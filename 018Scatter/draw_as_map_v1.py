# coding:utf-8"""create on Jan 15, 2020 by Wayne YUFunction:处理as_core_map的数据，按照经纬度的信息进行绘图v1:初步实现按照经纬度信息进行绘图"""import timeimport csvimport numpy as npimport matplotlib.pyplot as pltdef write_to_csv(res_list, des_path):    """    把给定的List，写到指定路径的文件中    :param res_list:    :param des_path:    :return: None    """    print("write file <%s> ..." % des_path)    csvFile = open(des_path, 'w', newline='', encoding='utf-8')    try:        writer = csv.writer(csvFile, delimiter="|")        for i in res_list:            writer.writerow(i)    except Exception as e:        print(e)    finally:        csvFile.close()    print("write finish!")def draw_map(as_info, open_file, year_str):    """    根据传入的as_info进行绘图    :param as_info:    :param open_file:    :param year_str:    :return None:    """    plt.figure(figsize=(9, 5))    ax = plt.subplot(111)    max_all_rel = 0  # 存储最大的连接数    for item in as_info:        # print(item)        if int(item[1]) > max_all_rel:            max_all_rel = int(item[1])    print("Max Edge Cnt:", max_all_rel)    print(as_info)    x_list = []    y_list = []    area = []    lw_list = []    c_color_list = []    coordinate_dic = {}  # 存储as号对应坐标    temp_list = []    for item in as_info:        x_list.append(float(item[10]))  # 经度作为x轴        y_list.append(float(item[9]))  # 维度作为y轴        lw_list.append(0.1)        set_alpha = 1 - np.log((int(item[1]) + 1)/(max_all_rel + 1))        print("alpha", set_alpha)        if set_alpha < 3:            c_color_list.append([float(200/256), float(100/256), float(100/256)])            area.append(12)        elif set_alpha < 6:            c_color_list.append([float(224.0/256), float(200.0/256), float(41.0/256)])            area.append(8)        elif set_alpha < 9:            c_color_list.append([float(100/256), float(100/256), float(200/256)])            area.append(3)        else:            c_color_list.append([float(256/256), float(256/256), float(256/256)])            area.append(1)        temp_list.append(x_list[-1])        temp_list.append(y_list[-1])        coordinate_dic[item[0]] = temp_list        temp_list = []    ax.set_xlim(-180, 180)    ax.set_ylim(-180, 180)    # print(x_list)    # print(y_list)    # 开始画线    file_read = open(open_file, 'r', encoding='utf-8')    for line in file_read.readlines():        if line.strip().find("#") == 0:            continue        line = line.strip().split("|")        p1 = coordinate_dic.get(line[0])        p2 = coordinate_dic.get(line[1])        if p1 and p2:            alpha_value = 1            line_width = 0.02            line_color = [float(20 / 256), float(250 / 256), float(250 / 256)]            z_order_value = 1            print("computing:", p1, p2)            ax.plot([p1[0], p2[0]], [p1[1], p2[1]], linewidth=line_width, alpha=alpha_value, color=line_color, zorder=z_order_value, )    # 开始打点    c = ax.scatter(x_list, y_list, c=c_color_list, edgecolors=[0, 0, 0], marker="o", lw=lw_list, s=area, cmap='hsv', alpha=0.9, zorder=7)    plt.axis('off')    # plt.show()    save_fig_name = "../000LocalData/as_image/as_map_final" + year_str + ".jpg"    plt.savefig(save_fig_name, dpi=1080, facecolor='black')    plt.close()if __name__ == "__main__":    time_start = time.time()  # 记录启动时间    for year_string in range(1998, 2005, 1):        file_in = '..\\000LocalData\\as_map\\as_core_map_data_new' + str(year_string) + '1001.csv'        file_read = open(file_in, 'r', encoding='utf-8')        file_in_list = []        new_info = []        asn_temp = ""        for line in file_read.readlines():            line = line.strip().split('|')            if len(line) < 11:                continue            if asn_temp == line[0]:                continue            file_in_list.append(line)            asn_temp = line[0]        # print(file_in_list)        bgp_file = "..\\000LocalData\\as_relationships\\serial-1\\" + str(year_string) + "1001.as-rel.txt"        draw_map(file_in_list, bgp_file, str(year_string))    time_end = time.time()    print("=>Scripts Finish, Time Consuming:", (time_end - time_start), "S")