# coding:utf-8"""create on Dec 6, 2019 by Wayne YUFunction:处理as_core_map的数据，生成极坐标，并绘图"""import timeimport csvimport numpy as npimport matplotlib.pyplot as pltdef write_to_csv(res_list, des_path):    """    把给定的List，写到指定路径的文件中    :param res_list:    :param des_path:    :return: None    """    print("write file <%s> ..." % des_path)    csvFile = open(des_path, 'w', newline='', encoding='utf-8')    try:        writer = csv.writer(csvFile, delimiter="|")        for i in res_list:            writer.writerow(i)    except Exception as e:        print(e)    finally:        csvFile.close()    print("write finish!")def compute_polar_args(as_info):    """    根据传入的as_info,计算每个as号的参数angle、radius    angle = longitue of the AS's orgs    radius = 1 - log((All_rel(AS)+1) / (maxinum_all_rel + 1))    :param as_info:    :return new_as_info:    """    new_as_info = []    max_all_rel = 0  # 存储最大的连接数    for item in as_info:        # print(item)        if int(item[1]) > max_all_rel:            max_all_rel = int(item[1])    print("Max Edge Cnt:", max_all_rel)    for item in as_info:        angle = 0.0        radius = 0.0        if float(item[10]) >= 0.0:            angle = float(item[10])        else:            angle = float(item[10]) + 360.0        radius = 1 - np.log((int(item[1]) + 1) / (max_all_rel + 1))        item.append(angle)        item.append(radius)        new_as_info.append(item)        # print(item)    return new_as_infodef draw_polar_map(as_info, open_file):    """    根据传入的as_info进行绘图    :param as_info:    :return None:    """    max_radius = 0.0    angle_list = []    radius_list = []    coordinate_dic = {}    temp_list = []    for item in as_info:        if float(item[12]) > max_radius:            max_radius = float(item[12])        angle = (float(item[11]) / 360.0) * 2 * np.pi        radius = float(float(item[12]))        temp_list.append(angle)        temp_list.append(radius)        angle_list.append(angle)        radius_list.append(radius)        coordinate_dic[item[0]] = temp_list        temp_list = []    # print(coordinate_dic)    # 准备绘图    area = 2    colors = angle_list    ax = plt.subplot(111, projection='polar')    # 开始打点    c = ax.scatter(angle_list, radius_list, c="", edgecolors='b', marker='s', lw=0.2, s=area, cmap='hsv', alpha=0.75)    # c = ax.scatter(angle_list, radius_list, c=colors, marker='s', s=area, cmap='hsv', alpha=1)    ax.set_ylim(0.0, max_radius + 0.1)  # 设置极坐标半径radius的最大刻度    # plt.axis('off')    # plt.xticks([])  # 去掉横坐标    # plt.yticks([])  # 去掉纵坐标    # 开始连线    file_read = open(open_file, 'r', encoding='utf-8')    for line in file_read.readlines():        if line.strip().find("#") == 0:            continue        line = line.strip().split("|")        p1 = coordinate_dic.get(line[0])        p2 = coordinate_dic.get(line[1])        if p1 and p2:            line_width = (p1[1] + p2[1]) / (30 * max_radius)            # print(p1, p2)            ax.plot([p1[0], p2[0]], [p1[1], p2[1]], linewidth=line_width)    save_fig_name = "../000LocalData/as_image/as_core_map.jpg"    plt.savefig(save_fig_name, dpi=1080)    # plt.show()if __name__ == "__main__":    time_start = time.time()  # 记录启动时间    file_in = '..\\000LocalData\\as_map\\as_core_map_data_new20041001.csv'    file_read = open(file_in, 'r', encoding='utf-8')    file_in_list = []    asn_temp = ""    for line in file_read.readlines():        line = line.strip().split('|')        if len(line) < 11:            continue        if asn_temp == line[0]:            continue        file_in_list.append(line)        asn_temp = line[0]    new_info = compute_polar_args(file_in_list)  # 计算极坐标相关参数    bgp_file = "..\\000LocalData\\as_relationships\\serial-3\\20041001.as-rel.txt"    draw_polar_map(new_info, bgp_file)    # print(file_in_list)    time_end = time.time()    print("=>Scripts Finish, Time Consuming:", (time_end - time_start), "S")