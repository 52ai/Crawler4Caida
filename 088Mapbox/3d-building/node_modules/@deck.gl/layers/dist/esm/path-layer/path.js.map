{"version":3,"sources":["../../../src/path-layer/path.ts"],"names":["cutPolylineByGrid","cutPolylineByMercatorBounds","normalizePath","path","size","gridResolution","wrapLongitude","flatPath","Array","isArray","length","i","j"],"mappings":"AAAA,SAAQA,iBAAR,EAA2BC,2BAA3B,QAA6D,kBAA7D;AAeA,OAAO,SAASC,aAAT,CACLC,IADK,EAELC,IAFK,EAGLC,cAHK,EAILC,aAJK,EAKsB;AAC3B,MAAIC,QAAJ;;AACA,MAAIC,KAAK,CAACC,OAAN,CAAcN,IAAI,CAAC,CAAD,CAAlB,CAAJ,EAA4B;AAC1B,UAAMO,MAAM,GAAGP,IAAI,CAACO,MAAL,GAAcN,IAA7B;AACAG,IAAAA,QAAQ,GAAG,IAAIC,KAAJ,CAAUE,MAAV,CAAX;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,IAAI,CAACO,MAAzB,EAAiCC,CAAC,EAAlC,EAAsC;AACpC,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,IAApB,EAA0BQ,CAAC,EAA3B,EAA+B;AAC7BL,QAAAA,QAAQ,CAACI,CAAC,GAAGP,IAAJ,GAAWQ,CAAZ,CAAR,GAAyBT,IAAI,CAACQ,CAAD,CAAJ,CAAQC,CAAR,KAAc,CAAvC;AACD;AACF;AACF,GARD,MAQO;AACLL,IAAAA,QAAQ,GAAGJ,IAAX;AACD;;AACD,MAAIE,cAAJ,EAAoB;AAClB,WAAOL,iBAAiB,CAACO,QAAD,EAAW;AAACH,MAAAA,IAAD;AAAOC,MAAAA;AAAP,KAAX,CAAxB;AACD;;AACD,MAAIC,aAAJ,EAAmB;AACjB,WAAOL,2BAA2B,CAACM,QAAD,EAAW;AAACH,MAAAA;AAAD,KAAX,CAAlC;AACD;;AACD,SAAOG,QAAP;AACD","sourcesContent":["import {cutPolylineByGrid, cutPolylineByMercatorBounds} from '@math.gl/polygon';\n\nimport type {NumericArray} from '@math.gl/core';\nimport type {Position} from '@deck.gl/core';\n\nexport type NestedPathGeometry = Position[];\nexport type FlatPathGeometry = NumericArray;\nexport type PathGeometry = NestedPathGeometry | FlatPathGeometry;\nexport type NormalizedPathGeometry = FlatPathGeometry[] | FlatPathGeometry;\n\n/**\n * Flattens a nested path object\n * Cut the feature if needed (globe projection, wrap longitude, etc.)\n * Returns a flat array of path positions, or a list of flat arrays representing multiple paths\n */\nexport function normalizePath(\n  path: PathGeometry,\n  size: number,\n  gridResolution?: number,\n  wrapLongitude?: boolean\n): number[][] | NumericArray {\n  let flatPath: NumericArray;\n  if (Array.isArray(path[0])) {\n    const length = path.length * size;\n    flatPath = new Array(length);\n    for (let i = 0; i < path.length; i++) {\n      for (let j = 0; j < size; j++) {\n        flatPath[i * size + j] = path[i][j] || 0;\n      }\n    }\n  } else {\n    flatPath = path as NumericArray;\n  }\n  if (gridResolution) {\n    return cutPolylineByGrid(flatPath, {size, gridResolution});\n  }\n  if (wrapLongitude) {\n    return cutPolylineByMercatorBounds(flatPath, {size});\n  }\n  return flatPath;\n}\n"],"file":"path.js"}