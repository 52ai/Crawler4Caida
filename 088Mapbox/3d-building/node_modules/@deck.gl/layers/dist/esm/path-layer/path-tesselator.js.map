{"version":3,"sources":["../../../src/path-layer/path-tesselator.ts"],"names":["Tesselator","normalizePath","START_CAP","END_CAP","INVALID","PathTesselator","constructor","opts","attributes","positions","size","padding","initialize","type","fp64","Float64Array","Float32Array","segmentTypes","Uint8ClampedArray","get","attributeName","getGeometryFromBuffer","buffer","normalize","normalizeGeometry","path","positionSize","resolution","wrapLongitude","getGeometrySize","isCut","subPath","numPoints","getPathLength","isClosed","updateGeometryAttributes","context","geometrySize","vertexStart","_updateSegmentTypes","_updatePositions","isPathClosed","fill","p","Array","i","ptIndex","getPointOnPath","length","index","target","Boolean","loop","lastPointIndex","isArray"],"mappings":"AAmBA,SAAQA,UAAR,QAAyB,eAAzB;AACA,SAAQC,aAAR,QAA4B,QAA5B;AAKA,MAAMC,SAAS,GAAG,CAAlB;AACA,MAAMC,OAAO,GAAG,CAAhB;AACA,MAAMC,OAAO,GAAG,CAAhB;AAIA,eAAe,MAAMC,cAAN,SAA6BL,UAA7B,CASb;AACAM,EAAAA,WAAW,CAACC,IAAD,EAAO;AAChB,UAAM,EACJ,GAAGA,IADC;AAEJC,MAAAA,UAAU,EAAE;AAGVC,QAAAA,SAAS,EAAE;AACTC,UAAAA,IAAI,EAAE,CADG;AAETC,UAAAA,OAAO,EAAE,EAFA;AAGTC,UAAAA,UAAU,EAAE,IAHH;AAITC,UAAAA,IAAI,EAAEN,IAAI,CAACO,IAAL,GAAYC,YAAZ,GAA2BC;AAJxB,SAHD;AASVC,QAAAA,YAAY,EAAE;AAACP,UAAAA,IAAI,EAAE,CAAP;AAAUG,UAAAA,IAAI,EAAEK;AAAhB;AATJ;AAFR,KAAN;AAcD;;AAGDC,EAAAA,GAAG,CAACC,aAAD,EAA2C;AAC5C,WAAO,KAAKZ,UAAL,CAAgBY,aAAhB,CAAP;AACD;;AAGSC,EAAAA,qBAAqB,CAACC,MAAD,EAAS;AACtC,QAAI,KAAKC,SAAT,EAAoB;AAClB,aAAO,MAAMF,qBAAN,CAA4BC,MAA5B,CAAP;AACD;;AAED,WAAO,IAAP;AACD;;AAGSE,EAAAA,iBAAiB,CAACC,IAAD,EAAgD;AACzE,QAAI,KAAKF,SAAT,EAAoB;AAClB,aAAOtB,aAAa,CAACwB,IAAD,EAAO,KAAKC,YAAZ,EAA0B,KAAKnB,IAAL,CAAUoB,UAApC,EAAgD,KAAKpB,IAAL,CAAUqB,aAA1D,CAApB;AACD;;AACD,WAAOH,IAAP;AACD;;AAGSI,EAAAA,eAAe,CAACJ,IAAD,EAAuC;AAC9D,QAAIK,KAAK,CAACL,IAAD,CAAT,EAAiB;AACf,UAAIf,IAAI,GAAG,CAAX;;AACA,WAAK,MAAMqB,OAAX,IAAsBN,IAAtB,EAA4B;AAC1Bf,QAAAA,IAAI,IAAI,KAAKmB,eAAL,CAAqBE,OAArB,CAAR;AACD;;AACD,aAAOrB,IAAP;AACD;;AACD,UAAMsB,SAAS,GAAG,KAAKC,aAAL,CAAmBR,IAAnB,CAAlB;;AACA,QAAIO,SAAS,GAAG,CAAhB,EAAmB;AAEjB,aAAO,CAAP;AACD;;AACD,QAAI,KAAKE,QAAL,CAAcT,IAAd,CAAJ,EAAyB;AAEvB,aAAOO,SAAS,GAAG,CAAZ,GAAgB,CAAhB,GAAoBA,SAAS,GAAG,CAAvC;AACD;;AACD,WAAOA,SAAP;AACD;;AAGSG,EAAAA,wBAAwB,CAChCV,IADgC,EAEhCW,OAFgC,EAM1B;AACN,QAAIA,OAAO,CAACC,YAAR,KAAyB,CAA7B,EAAgC;AAC9B;AACD;;AACD,QAAIZ,IAAI,IAAIK,KAAK,CAACL,IAAD,CAAjB,EAAyB;AACvB,WAAK,MAAMM,OAAX,IAAsBN,IAAtB,EAA4B;AAC1B,cAAMY,YAAY,GAAG,KAAKR,eAAL,CAAqBE,OAArB,CAArB;AACAK,QAAAA,OAAO,CAACC,YAAR,GAAuBA,YAAvB;AACA,aAAKF,wBAAL,CAA8BJ,OAA9B,EAAuCK,OAAvC;AACAA,QAAAA,OAAO,CAACE,WAAR,IAAuBD,YAAvB;AACD;AACF,KAPD,MAOO;AACL,WAAKE,mBAAL,CAAyBd,IAAzB,EAA+BW,OAA/B;;AACA,WAAKI,gBAAL,CAAsBf,IAAtB,EAA4BW,OAA5B;AACD;AACF;;AAEOG,EAAAA,mBAAmB,CACzBd,IADyB,EAEzBW,OAFyB,EAMzB;AACA,UAAMnB,YAAY,GAAG,KAAKT,UAAL,CAAgBS,YAArC;AACA,UAAMwB,YAAY,GAAGhB,IAAI,GAAG,KAAKS,QAAL,CAAcT,IAAd,CAAH,GAAyB,KAAlD;AACA,UAAM;AAACa,MAAAA,WAAD;AAAcD,MAAAA;AAAd,QAA8BD,OAApC;AAIAnB,IAAAA,YAAY,CAACyB,IAAb,CAAkB,CAAlB,EAAqBJ,WAArB,EAAkCA,WAAW,GAAGD,YAAhD;;AACA,QAAII,YAAJ,EAAkB;AAChBxB,MAAAA,YAAY,CAACqB,WAAD,CAAZ,GAA4BlC,OAA5B;AACAa,MAAAA,YAAY,CAACqB,WAAW,GAAGD,YAAd,GAA6B,CAA9B,CAAZ,GAA+CjC,OAA/C;AACD,KAHD,MAGO;AACLa,MAAAA,YAAY,CAACqB,WAAD,CAAZ,IAA6BpC,SAA7B;AACAe,MAAAA,YAAY,CAACqB,WAAW,GAAGD,YAAd,GAA6B,CAA9B,CAAZ,IAAgDlC,OAAhD;AACD;;AACDc,IAAAA,YAAY,CAACqB,WAAW,GAAGD,YAAd,GAA6B,CAA9B,CAAZ,GAA+CjC,OAA/C;AACD;;AAEOoC,EAAAA,gBAAgB,CACtBf,IADsB,EAEtBW,OAFsB,EAMtB;AACA,UAAM;AAAC3B,MAAAA;AAAD,QAAc,KAAKD,UAAzB;;AACA,QAAI,CAACC,SAAD,IAAc,CAACgB,IAAnB,EAAyB;AACvB;AACD;;AACD,UAAM;AAACa,MAAAA,WAAD;AAAcD,MAAAA;AAAd,QAA8BD,OAApC;AACA,UAAMO,CAAC,GAAG,IAAIC,KAAJ,CAAU,CAAV,CAAV;;AAIA,SAAK,IAAIC,CAAC,GAAGP,WAAR,EAAqBQ,OAAO,GAAG,CAApC,EAAuCA,OAAO,GAAGT,YAAjD,EAA+DQ,CAAC,IAAIC,OAAO,EAA3E,EAA+E;AAC7E,WAAKC,cAAL,CAAoBtB,IAApB,EAA0BqB,OAA1B,EAAmCH,CAAnC;AACAlC,MAAAA,SAAS,CAACoC,CAAC,GAAG,CAAL,CAAT,GAAmBF,CAAC,CAAC,CAAD,CAApB;AACAlC,MAAAA,SAAS,CAACoC,CAAC,GAAG,CAAJ,GAAQ,CAAT,CAAT,GAAuBF,CAAC,CAAC,CAAD,CAAxB;AACAlC,MAAAA,SAAS,CAACoC,CAAC,GAAG,CAAJ,GAAQ,CAAT,CAAT,GAAuBF,CAAC,CAAC,CAAD,CAAxB;AACD;AACF;;AAIOV,EAAAA,aAAa,CAACR,IAAD,EAAiC;AACpD,WAAOA,IAAI,CAACuB,MAAL,GAAc,KAAKtB,YAA1B;AACD;;AAGOqB,EAAAA,cAAc,CAACtB,IAAD,EAAyBwB,KAAzB,EAAwCC,MAAgB,GAAG,EAA3D,EAAyE;AAC7F,UAAM;AAACxB,MAAAA;AAAD,QAAiB,IAAvB;;AACA,QAAIuB,KAAK,GAAGvB,YAAR,IAAwBD,IAAI,CAACuB,MAAjC,EAAyC;AAEvCC,MAAAA,KAAK,IAAI,IAAIxB,IAAI,CAACuB,MAAL,GAActB,YAA3B;AACD;;AACD,UAAMmB,CAAC,GAAGI,KAAK,GAAGvB,YAAlB;AACAwB,IAAAA,MAAM,CAAC,CAAD,CAAN,GAAYzB,IAAI,CAACoB,CAAD,CAAhB;AACAK,IAAAA,MAAM,CAAC,CAAD,CAAN,GAAYzB,IAAI,CAACoB,CAAC,GAAG,CAAL,CAAhB;AACAK,IAAAA,MAAM,CAAC,CAAD,CAAN,GAAaxB,YAAY,KAAK,CAAjB,IAAsBD,IAAI,CAACoB,CAAC,GAAG,CAAL,CAA3B,IAAuC,CAAnD;AACA,WAAOK,MAAP;AACD;;AAGOhB,EAAAA,QAAQ,CAACT,IAAD,EAAkC;AAChD,QAAI,CAAC,KAAKF,SAAV,EAAqB;AACnB,aAAO4B,OAAO,CAAC,KAAK5C,IAAL,CAAU6C,IAAX,CAAd;AACD;;AACD,UAAM;AAAC1B,MAAAA;AAAD,QAAiB,IAAvB;AACA,UAAM2B,cAAc,GAAG5B,IAAI,CAACuB,MAAL,GAActB,YAArC;AACA,WACED,IAAI,CAAC,CAAD,CAAJ,KAAYA,IAAI,CAAC4B,cAAD,CAAhB,IACA5B,IAAI,CAAC,CAAD,CAAJ,KAAYA,IAAI,CAAC4B,cAAc,GAAG,CAAlB,CADhB,KAEC3B,YAAY,KAAK,CAAjB,IAAsBD,IAAI,CAAC,CAAD,CAAJ,KAAYA,IAAI,CAAC4B,cAAc,GAAG,CAAlB,CAFvC,CADF;AAKD;;AArKD;;AAwKF,SAASvB,KAAT,CAAeL,IAAf,EAAyE;AACvE,SAAOmB,KAAK,CAACU,OAAN,CAAc7B,IAAI,CAAC,CAAD,CAAlB,CAAP;AACD","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport {Tesselator} from '@deck.gl/core';\nimport {normalizePath} from './path';\n\nimport type {TypedArray} from '@math.gl/core';\nimport type {PathGeometry, FlatPathGeometry, NormalizedPathGeometry} from './path';\n\nconst START_CAP = 1;\nconst END_CAP = 2;\nconst INVALID = 4;\n\n// This class is set up to allow querying one attribute at a time\n// the way the AttributeManager expects it\nexport default class PathTesselator extends Tesselator<\n  PathGeometry,\n  NormalizedPathGeometry,\n  {\n    fp64?: boolean;\n    resolution?: number;\n    wrapLongitude?: boolean;\n    loop?: boolean;\n  }\n> {\n  constructor(opts) {\n    super({\n      ...opts,\n      attributes: {\n        // Padding covers shaderAttributes for last segment in largest case fp64\n        // additional vertex + hi & low parts, 3 * 6\n        positions: {\n          size: 3,\n          padding: 18,\n          initialize: true,\n          type: opts.fp64 ? Float64Array : Float32Array\n        },\n        segmentTypes: {size: 1, type: Uint8ClampedArray}\n      }\n    });\n  }\n\n  /** Get packed attribute by name */\n  get(attributeName: string): TypedArray | null {\n    return this.attributes[attributeName];\n  }\n\n  /* Implement base Tesselator interface */\n  protected getGeometryFromBuffer(buffer) {\n    if (this.normalize) {\n      return super.getGeometryFromBuffer(buffer);\n    }\n    // we don't need to read the positions if no normalization\n    return null;\n  }\n\n  /* Implement base Tesselator interface */\n  protected normalizeGeometry(path: PathGeometry): number[][] | PathGeometry {\n    if (this.normalize) {\n      return normalizePath(path, this.positionSize, this.opts.resolution, this.opts.wrapLongitude);\n    }\n    return path;\n  }\n\n  /* Implement base Tesselator interface */\n  protected getGeometrySize(path: NormalizedPathGeometry): number {\n    if (isCut(path)) {\n      let size = 0;\n      for (const subPath of path) {\n        size += this.getGeometrySize(subPath);\n      }\n      return size;\n    }\n    const numPoints = this.getPathLength(path);\n    if (numPoints < 2) {\n      // invalid path\n      return 0;\n    }\n    if (this.isClosed(path)) {\n      // minimum 3 vertices\n      return numPoints < 3 ? 0 : numPoints + 2;\n    }\n    return numPoints;\n  }\n\n  /* Implement base Tesselator interface */\n  protected updateGeometryAttributes(\n    path: NormalizedPathGeometry | null,\n    context: {\n      vertexStart: number;\n      geometrySize: number;\n    }\n  ): void {\n    if (context.geometrySize === 0) {\n      return;\n    }\n    if (path && isCut(path)) {\n      for (const subPath of path) {\n        const geometrySize = this.getGeometrySize(subPath);\n        context.geometrySize = geometrySize;\n        this.updateGeometryAttributes(subPath, context);\n        context.vertexStart += geometrySize;\n      }\n    } else {\n      this._updateSegmentTypes(path, context);\n      this._updatePositions(path, context);\n    }\n  }\n\n  private _updateSegmentTypes(\n    path: FlatPathGeometry | null,\n    context: {\n      vertexStart: number;\n      geometrySize: number;\n    }\n  ) {\n    const segmentTypes = this.attributes.segmentTypes as TypedArray;\n    const isPathClosed = path ? this.isClosed(path) : false;\n    const {vertexStart, geometrySize} = context;\n\n    // positions   --  A0 A1 B0 B1 B2 B3 B0 B1 B2 --\n    // segmentTypes     3  4  4  0  0  0  0  4  4\n    segmentTypes.fill(0, vertexStart, vertexStart + geometrySize);\n    if (isPathClosed) {\n      segmentTypes[vertexStart] = INVALID;\n      segmentTypes[vertexStart + geometrySize - 2] = INVALID;\n    } else {\n      segmentTypes[vertexStart] += START_CAP;\n      segmentTypes[vertexStart + geometrySize - 2] += END_CAP;\n    }\n    segmentTypes[vertexStart + geometrySize - 1] = INVALID;\n  }\n\n  private _updatePositions(\n    path: FlatPathGeometry | null,\n    context: {\n      vertexStart: number;\n      geometrySize: number;\n    }\n  ) {\n    const {positions} = this.attributes;\n    if (!positions || !path) {\n      return;\n    }\n    const {vertexStart, geometrySize} = context;\n    const p = new Array(3);\n\n    // positions   --  A0 A1 B0 B1 B2 B3 B0 B1 B2 --\n    // segmentTypes     3  4  4  0  0  0  0  4  4\n    for (let i = vertexStart, ptIndex = 0; ptIndex < geometrySize; i++, ptIndex++) {\n      this.getPointOnPath(path, ptIndex, p);\n      positions[i * 3] = p[0];\n      positions[i * 3 + 1] = p[1];\n      positions[i * 3 + 2] = p[2];\n    }\n  }\n\n  // Utilities\n  /** Returns the number of points in the path */\n  private getPathLength(path: FlatPathGeometry): number {\n    return path.length / this.positionSize;\n  }\n\n  /** Returns a point on the path at the specified index */\n  private getPointOnPath(path: FlatPathGeometry, index: number, target: number[] = []): number[] {\n    const {positionSize} = this;\n    if (index * positionSize >= path.length) {\n      // loop\n      index += 1 - path.length / positionSize;\n    }\n    const i = index * positionSize;\n    target[0] = path[i];\n    target[1] = path[i + 1];\n    target[2] = (positionSize === 3 && path[i + 2]) || 0;\n    return target;\n  }\n\n  // Returns true if the first and last points are identical\n  private isClosed(path: FlatPathGeometry): boolean {\n    if (!this.normalize) {\n      return Boolean(this.opts.loop);\n    }\n    const {positionSize} = this;\n    const lastPointIndex = path.length - positionSize;\n    return (\n      path[0] === path[lastPointIndex] &&\n      path[1] === path[lastPointIndex + 1] &&\n      (positionSize === 2 || path[2] === path[lastPointIndex + 2])\n    );\n  }\n}\n\nfunction isCut(path: NormalizedPathGeometry): path is FlatPathGeometry[] {\n  return Array.isArray(path[0]);\n}\n"],"file":"path-tesselator.js"}