{"version":3,"sources":["../../../src/polygon-layer/polygon-layer.ts"],"names":["CompositeLayer","createIterable","log","SolidPolygonLayer","PathLayer","Polygon","replaceInRange","defaultLineColor","defaultFillColor","defaultProps","stroked","filled","extruded","elevationScale","wireframe","_normalize","_windingOrder","lineWidthUnits","lineWidthScale","lineWidthMinPixels","lineWidthMaxPixels","Number","MAX_SAFE_INTEGER","lineJointRounded","lineMiterLimit","getPolygon","type","value","f","polygon","getFillColor","getLineColor","getLineWidth","getElevation","material","PolygonLayer","initializeState","state","paths","props","getLineDashArray","removed","updateState","changeFlags","geometryChanged","dataChanged","updateTriggersChanged","all","Array","isArray","slice","pathsDiff","map","dataRange","data","getIndex","p","__source","index","replace","_getPaths","setState","positionFormat","positionSize","startRow","endRow","iterable","objectInfo","object","normalize","holeIndices","positions","i","length","path","push","getSubLayerRow","renderLayers","_dataDiff","transitions","lineDashJustified","updateTriggers","FillLayer","getSubLayerClass","StrokeLayer","polygonLayer","shouldRenderSubLayer","getSubLayerProps","id","lineColors","polygonLineLayer","widthUnits","widthScale","widthMinPixels","widthMaxPixels","jointRounded","miterLimit","dashJustified","_pathType","getWidth","getColor","getPath","getSubLayerAccessor","getDashArray","x"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {\n  Accessor,\n  AccessorFunction,\n  Color,\n  CompositeLayer,\n  CompositeLayerProps,\n  createIterable,\n  Layer,\n  LayersList,\n  log,\n  Unit,\n  Material,\n  UpdateParameters,\n  DefaultProps\n} from '@deck.gl/core';\nimport SolidPolygonLayer from '../solid-polygon-layer/solid-polygon-layer';\nimport PathLayer from '../path-layer/path-layer';\nimport * as Polygon from '../solid-polygon-layer/polygon';\nimport {replaceInRange} from '../utils';\n\n/**\n * All properties supported by `PolygonLayer`.\n */\nexport type PolygonLayerProps<DataT = any> = _PolygonLayerProps<DataT> & CompositeLayerProps<DataT>;\n\n/**\n * Properties added by `PolygonLayer`.\n */\ntype _PolygonLayerProps<DataT = any> = {\n  /**\n   * Whether to draw an outline around the polygon (solid fill).\n   *\n   * Note that both the outer polygon as well the outlines of any holes will be drawn.\n   *\n   * @default true\n   */\n  stroked?: boolean;\n\n  /**\n   * Whether to draw a filled polygon (solid fill).\n   *\n   * Note that only the area between the outer polygon and any holes will be filled.\n   *\n   * @default true\n   */\n  filled?: boolean;\n\n  /**\n   * Whether to extrude the polygons.\n   *\n   * Based on the elevations provided by the `getElevation` accessor.\n   *\n   * If set to `false`, all polygons will be flat, this generates less geometry and is faster\n   * than simply returning 0 from getElevation.\n   *\n   * @default false\n   */\n  extruded?: boolean;\n\n  /**\n   * Elevation multiplier.\n   *\n   * The final elevation is calculated by `elevationScale * getElevation(d)`.\n   * `elevationScale` is a handy property to scale all elevation without updating the data.\n   *\n   * @default 1\n   */\n  elevationScale?: number;\n\n  /**\n   * Whether to generate a line wireframe of the hexagon.\n   *\n   * The outline will have \"horizontal\" lines closing the top and bottom polygons and a vertical\n   * line (a \"strut\") for each vertex on the polygon.\n   *\n   * @default false\n   */\n  wireframe?: boolean;\n\n  /**\n   * The units of the line width, one of `meters`, `common`, and `pixels`.\n   *\n   * @default 'meters'\n   * @see Unit.\n   */\n  lineWidthUnits?: Unit;\n\n  /**\n   * The line width multiplier that multiplied to all outlines of `Polygon` and `MultiPolygon`\n   * features if the stroked attribute is true.\n   *\n   * @default 1\n   */\n  lineWidthScale?: number;\n\n  /**\n   * The minimum line width in pixels.\n   *\n   * @default 0\n   */\n  lineWidthMinPixels?: number;\n\n  /**\n   * The maximum line width in pixels\n   *\n   * @default Number.MAX_SAFE_INTEGER\n   */\n  lineWidthMaxPixels?: number;\n\n  /**\n   * Type of joint. If `true`, draw round joints. Otherwise draw miter joints.\n   *\n   * @default false\n   */\n  lineJointRounded?: boolean;\n\n  /**\n   * The maximum extent of a joint in ratio to the stroke width.\n   *\n   * Only works if `lineJointRounded` is false.\n   *\n   * @default 4\n   */\n  lineMiterLimit?: number;\n\n  lineDashJustified?: boolean;\n\n  /** Called on each object in the data stream to retrieve its corresponding polygon. */\n  getPolygon?: AccessorFunction<DataT, any>;\n\n  /**\n   * Fill collor value or accessor.\n   *\n   * @default [0, 0, 0, 255]\n   */\n  getFillColor?: Accessor<DataT, Color>;\n\n  /**\n   * Line color value or accessor.\n   *\n   * @default [0, 0, 0, 255]\n   */\n  getLineColor?: Accessor<DataT, Color>;\n\n  /**\n   * Line width value or accessor.\n   *\n   * @default [0, 0, 0, 255]\n   */\n  getLineWidth?: Accessor<DataT, number>;\n\n  /**\n   * Elevation valur or accessor.\n   *\n   * Only used if `extruded: true`.\n   *\n   * @default 1000\n   */\n  getElevation?: Accessor<DataT, number>;\n\n  /**\n   * This property has been moved to `PathStyleExtension`.\n   *\n   * @deprecated\n   */\n  getLineDashArray?: Accessor<DataT, number> | null;\n\n  /**\n   * If `false`, will skip normalizing the coordinates returned by `getPolygon`.\n   *\n   * **Note**: This prop is experimental\n   *\n   * @default true\n   */\n  _normalize?: boolean;\n\n  /**\n   * Specifies the winding order of rings in the polygon data.\n   *\n   * **Note**: This prop is experimental\n   *\n   * @default 'CW'\n   */\n  _windingOrder?: 'CW' | 'CCW';\n\n  /**\n   * Material settings for lighting effect. Applies if `extruded: true`.\n   *\n   * @default true\n   * @see https://deck.gl/docs/developer-guide/using-lighting\n   */\n  material?: Material;\n};\n\nconst defaultLineColor: [number, number, number, number] = [0, 0, 0, 255];\nconst defaultFillColor: [number, number, number, number] = [0, 0, 0, 255];\n\nconst defaultProps: DefaultProps<PolygonLayerProps> = {\n  stroked: true,\n  filled: true,\n  extruded: false,\n  elevationScale: 1,\n  wireframe: false,\n  _normalize: true,\n  _windingOrder: 'CW',\n\n  lineWidthUnits: 'meters',\n  lineWidthScale: 1,\n  lineWidthMinPixels: 0,\n  lineWidthMaxPixels: Number.MAX_SAFE_INTEGER,\n  lineJointRounded: false,\n  lineMiterLimit: 4,\n\n  getPolygon: {type: 'accessor', value: f => f.polygon},\n  // Polygon fill color\n  getFillColor: {type: 'accessor', value: defaultFillColor},\n  // Point, line and polygon outline color\n  getLineColor: {type: 'accessor', value: defaultLineColor},\n  // Line and polygon outline accessors\n  getLineWidth: {type: 'accessor', value: 1},\n  // Polygon extrusion accessor\n  getElevation: {type: 'accessor', value: 1000},\n\n  // Optional material for 'lighting' shader module\n  material: true\n};\n\n/** A composite layer that renders filled, stroked and/or extruded polygons. */\nexport default class PolygonLayer<DataT = any, ExtraProps = {}> extends CompositeLayer<\n  Required<_PolygonLayerProps<DataT>> & ExtraProps\n> {\n  static layerName = 'PolygonLayer';\n  static defaultProps = defaultProps;\n\n  initializeState(): void {\n    this.state = {\n      paths: []\n    };\n\n    if (this.props.getLineDashArray) {\n      log.removed('getLineDashArray', 'PathStyleExtension')();\n    }\n  }\n\n  updateState({changeFlags}: UpdateParameters<this>) {\n    const geometryChanged =\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPolygon));\n\n    if (geometryChanged && Array.isArray(changeFlags.dataChanged)) {\n      const paths = this.state.paths.slice();\n      const pathsDiff = changeFlags.dataChanged.map(dataRange =>\n        replaceInRange({\n          data: paths,\n          getIndex: p => p.__source.index,\n          dataRange,\n          replace: this._getPaths(dataRange)\n        })\n      );\n      this.setState({paths, pathsDiff});\n    } else if (geometryChanged) {\n      this.setState({\n        paths: this._getPaths(),\n        pathsDiff: null\n      });\n    }\n  }\n\n  private _getPaths(dataRange: {startRow?: number; endRow?: number} = {}): {path: number[]}[] {\n    const {data, getPolygon, positionFormat, _normalize} = this.props;\n    const paths: {path: number[]}[] = [];\n    const positionSize = positionFormat === 'XY' ? 2 : 3;\n    const {startRow, endRow} = dataRange;\n\n    const {iterable, objectInfo} = createIterable(data, startRow, endRow);\n    for (const object of iterable) {\n      objectInfo.index++;\n      let polygon = getPolygon(object, objectInfo);\n      if (_normalize) {\n        polygon = Polygon.normalize(polygon, positionSize);\n      }\n      const {holeIndices} = polygon;\n      const positions = polygon.positions || polygon;\n\n      if (holeIndices) {\n        // split the positions array into `holeIndices.length + 1` rings\n        // holeIndices[-1] falls back to 0\n        // holeIndices[holeIndices.length] falls back to positions.length\n        for (let i = 0; i <= holeIndices.length; i++) {\n          const path = positions.slice(holeIndices[i - 1] || 0, holeIndices[i] || positions.length);\n          paths.push(this.getSubLayerRow({path}, object, objectInfo.index));\n        }\n      } else {\n        paths.push(this.getSubLayerRow({path: positions}, object, objectInfo.index));\n      }\n    }\n    return paths;\n  }\n\n  /* eslint-disable complexity */\n  renderLayers(): Layer | null | LayersList {\n    // Layer composition props\n    const {\n      data,\n      _dataDiff,\n      stroked,\n      filled,\n      extruded,\n      wireframe,\n      _normalize,\n      _windingOrder,\n      elevationScale,\n      transitions,\n      positionFormat\n    } = this.props;\n\n    // Rendering props underlying layer\n    const {\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      lineJointRounded,\n      lineMiterLimit,\n      lineDashJustified\n    } = this.props;\n\n    // Accessor props for underlying layers\n    const {\n      getFillColor,\n      getLineColor,\n      getLineWidth,\n      getLineDashArray,\n      getElevation,\n      getPolygon,\n      updateTriggers,\n      material\n    } = this.props;\n\n    const {paths, pathsDiff} = this.state;\n\n    const FillLayer = this.getSubLayerClass('fill', SolidPolygonLayer);\n    const StrokeLayer = this.getSubLayerClass('stroke', PathLayer);\n\n    // Filled Polygon Layer\n    const polygonLayer =\n      this.shouldRenderSubLayer('fill', paths) &&\n      new FillLayer(\n        {\n          _dataDiff,\n          extruded,\n          elevationScale,\n\n          filled,\n          wireframe,\n          _normalize,\n          _windingOrder,\n\n          getElevation,\n          getFillColor,\n          getLineColor: extruded && wireframe ? getLineColor : defaultLineColor,\n\n          material,\n          transitions\n        },\n        this.getSubLayerProps({\n          id: 'fill',\n          updateTriggers: updateTriggers && {\n            getPolygon: updateTriggers.getPolygon,\n            getElevation: updateTriggers.getElevation,\n            getFillColor: updateTriggers.getFillColor,\n            // using a legacy API to invalid lineColor attributes\n            // if (extruded && wireframe) has changed\n            lineColors: extruded && wireframe,\n            getLineColor: updateTriggers.getLineColor\n          }\n        }),\n        {\n          data,\n          positionFormat,\n          getPolygon\n        }\n      );\n\n    // Polygon line layer\n    const polygonLineLayer =\n      !extruded &&\n      stroked &&\n      this.shouldRenderSubLayer('stroke', paths) &&\n      new StrokeLayer(\n        {\n          _dataDiff: pathsDiff && (() => pathsDiff),\n          widthUnits: lineWidthUnits,\n          widthScale: lineWidthScale,\n          widthMinPixels: lineWidthMinPixels,\n          widthMaxPixels: lineWidthMaxPixels,\n          jointRounded: lineJointRounded,\n          miterLimit: lineMiterLimit,\n          dashJustified: lineDashJustified,\n\n          // Already normalized\n          _pathType: 'loop',\n\n          transitions: transitions && {\n            getWidth: transitions.getLineWidth,\n            getColor: transitions.getLineColor,\n            getPath: transitions.getPolygon\n          },\n\n          getColor: this.getSubLayerAccessor(getLineColor),\n          getWidth: this.getSubLayerAccessor(getLineWidth),\n          getDashArray: this.getSubLayerAccessor(getLineDashArray)\n        },\n        this.getSubLayerProps({\n          id: 'stroke',\n          updateTriggers: updateTriggers && {\n            getWidth: updateTriggers.getLineWidth,\n            getColor: updateTriggers.getLineColor,\n            getDashArray: updateTriggers.getLineDashArray\n          }\n        }),\n        {\n          data: paths,\n          positionFormat,\n          getPath: x => x.path\n        }\n      );\n\n    return [\n      // If not extruded: flat fill layer is drawn below outlines\n      !extruded && polygonLayer,\n      polygonLineLayer,\n      // If extruded: draw fill layer last for correct blending behavior\n      extruded && polygonLayer\n    ];\n  }\n  /* eslint-enable complexity */\n}\n"],"file":"polygon-layer.js"}