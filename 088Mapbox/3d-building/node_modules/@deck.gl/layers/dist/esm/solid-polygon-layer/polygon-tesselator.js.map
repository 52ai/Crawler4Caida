{"version":3,"sources":["../../../src/solid-polygon-layer/polygon-tesselator.ts"],"names":["Polygon","Tesselator","cutPolygonByGrid","cutPolygonByMercatorBounds","PolygonTesselator","constructor","opts","fp64","IndexType","Uint32Array","attributes","positions","size","type","Float64Array","Float32Array","vertexValid","Uint8ClampedArray","indices","get","attributeName","subarray","vertexCount","updateGeometry","externalIndices","buffers","value","length","data","getGeometry","Error","normalizeGeometry","polygon","normalize","normalizedPolygon","positionSize","resolution","getPositions","getHoleIndices","gridResolution","edgeTypes","wrapLongitude","maxLatitude","getGeometrySize","isCut","subPolygon","getGeometryFromBuffer","buffer","updateGeometryAttributes","context","geometrySize","vertexStart","indexStart","indexStarts","geometryIndex","_updateIndices","_updatePositions","_updateVertexValid","offset","typedArrayManager","target","i","getSurfaceIndices","preproject","allocate","copy","j","polygonPositions","x","y","z","holeIndices","set","fill","Array","isArray","Number","isFinite"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n// Handles tesselation of polygons with holes\n// - 2D surfaces\n// - 2D outlines\n// - 3D surfaces (top and sides only)\n// - 3D wireframes (not yet)\nimport * as Polygon from './polygon';\nimport {Tesselator} from '@deck.gl/core';\nimport {cutPolygonByGrid, cutPolygonByMercatorBounds} from '@math.gl/polygon';\n\nimport type {\n  PolygonGeometry,\n  NormalizedPolygonGeometry,\n  FlatComplexPolygonGeometry\n} from './polygon';\nimport type {TypedArray} from '@math.gl/core';\n\ntype GeometryUpdateContext = {\n  vertexStart: number;\n  indexStart: number;\n  geometrySize: number;\n  geometryIndex: number;\n};\n\ntype CutPolygon = FlatComplexPolygonGeometry & {\n  edgeTypes: number[];\n};\n\n// This class is set up to allow querying one attribute at a time\n// the way the AttributeManager expects it\nexport default class PolygonTesselator extends Tesselator<\n  PolygonGeometry,\n  NormalizedPolygonGeometry | CutPolygon[],\n  {\n    fp64?: boolean;\n    IndexType?: Uint32ArrayConstructor | Uint16ArrayConstructor;\n    resolution?: number;\n    wrapLongitude?: boolean;\n    preproject?: (xy: number[]) => number[];\n  }\n> {\n  constructor(opts) {\n    const {fp64, IndexType = Uint32Array} = opts;\n    super({\n      ...opts,\n      attributes: {\n        positions: {size: 3, type: fp64 ? Float64Array : Float32Array},\n        vertexValid: {type: Uint8ClampedArray, size: 1},\n        indices: {type: IndexType, size: 1}\n      }\n    });\n  }\n\n  /** Get attribute by name */\n  get(attributeName: string): TypedArray | null {\n    const {attributes} = this;\n    if (attributeName === 'indices') {\n      return attributes.indices && attributes.indices.subarray(0, this.vertexCount);\n    }\n\n    return attributes[attributeName];\n  }\n\n  /** Override base Tesselator method */\n  updateGeometry(opts) {\n    super.updateGeometry(opts);\n\n    const externalIndices = this.buffers.indices;\n    if (externalIndices) {\n      // @ts-ignore (2339) value is not defined on TypedArray (fall through)\n      this.vertexCount = (externalIndices.value || externalIndices).length;\n    } else if (this.data && !this.getGeometry) {\n      throw new Error('missing indices buffer');\n    }\n  }\n\n  /** Implement base Tesselator interface */\n  protected normalizeGeometry(polygon: PolygonGeometry): NormalizedPolygonGeometry | CutPolygon[] {\n    if (this.normalize) {\n      const normalizedPolygon = Polygon.normalize(polygon, this.positionSize);\n      if (this.opts.resolution) {\n        return cutPolygonByGrid(\n          Polygon.getPositions(normalizedPolygon),\n          Polygon.getHoleIndices(normalizedPolygon),\n          {\n            size: this.positionSize,\n            gridResolution: this.opts.resolution,\n            edgeTypes: true\n          }\n        ) as CutPolygon[];\n      }\n      if (this.opts.wrapLongitude) {\n        return cutPolygonByMercatorBounds(\n          Polygon.getPositions(normalizedPolygon),\n          Polygon.getHoleIndices(normalizedPolygon),\n          {\n            size: this.positionSize,\n            maxLatitude: 86,\n            edgeTypes: true\n          }\n        ) as CutPolygon[];\n      }\n      return normalizedPolygon;\n    }\n    // normalize is explicitly set to false, assume that user passed in already normalized polygons\n    return polygon as NormalizedPolygonGeometry;\n  }\n\n  /** Implement base Tesselator interface */\n  protected getGeometrySize(polygon: NormalizedPolygonGeometry | CutPolygon[]): number {\n    if (isCut(polygon)) {\n      let size = 0;\n      for (const subPolygon of polygon) {\n        size += this.getGeometrySize(subPolygon);\n      }\n      return size;\n    }\n    return Polygon.getPositions(polygon).length / this.positionSize;\n  }\n\n  /** Override base Tesselator method */\n  protected getGeometryFromBuffer(buffer) {\n    if (this.normalize || !this.buffers.indices) {\n      return super.getGeometryFromBuffer(buffer);\n    }\n    // we don't need to read the positions if no normalization/tesselation\n    return null;\n  }\n\n  /** Implement base Tesselator interface */\n  protected updateGeometryAttributes(\n    polygon: NormalizedPolygonGeometry | CutPolygon[] | null,\n    context: GeometryUpdateContext\n  ) {\n    if (polygon && isCut(polygon)) {\n      for (const subPolygon of polygon) {\n        const geometrySize = this.getGeometrySize(subPolygon);\n        context.geometrySize = geometrySize;\n        this.updateGeometryAttributes(subPolygon, context);\n        context.vertexStart += geometrySize;\n        context.indexStart = this.indexStarts[context.geometryIndex + 1];\n      }\n    } else {\n      this._updateIndices(polygon, context);\n      this._updatePositions(polygon, context);\n      this._updateVertexValid(polygon, context);\n    }\n  }\n\n  // Flatten the indices array\n  private _updateIndices(\n    polygon: NormalizedPolygonGeometry | null,\n    {geometryIndex, vertexStart: offset, indexStart}: GeometryUpdateContext\n  ) {\n    const {attributes, indexStarts, typedArrayManager} = this;\n\n    let target = attributes.indices;\n    if (!target || !polygon) {\n      return;\n    }\n    let i = indexStart;\n\n    // 1. get triangulated indices for the internal areas\n    const indices = Polygon.getSurfaceIndices(polygon, this.positionSize, this.opts.preproject);\n\n    // make sure the buffer is large enough\n    target = typedArrayManager.allocate(target, indexStart + indices.length, {\n      copy: true\n    });\n\n    // 2. offset each index by the number of indices in previous polygons\n    for (let j = 0; j < indices.length; j++) {\n      target[i++] = indices[j] + offset;\n    }\n\n    indexStarts[geometryIndex + 1] = indexStart + indices.length;\n    attributes.indices = target;\n  }\n\n  // Flatten out all the vertices of all the sub subPolygons\n  private _updatePositions(\n    polygon: NormalizedPolygonGeometry | null,\n    {vertexStart, geometrySize}: GeometryUpdateContext\n  ) {\n    const {\n      attributes: {positions},\n      positionSize\n    } = this;\n    if (!positions || !polygon) {\n      return;\n    }\n    const polygonPositions = Polygon.getPositions(polygon);\n\n    for (let i = vertexStart, j = 0; j < geometrySize; i++, j++) {\n      const x = polygonPositions[j * positionSize];\n      const y = polygonPositions[j * positionSize + 1];\n      const z = positionSize > 2 ? polygonPositions[j * positionSize + 2] : 0;\n\n      positions[i * 3] = x;\n      positions[i * 3 + 1] = y;\n      positions[i * 3 + 2] = z;\n    }\n  }\n\n  private _updateVertexValid(\n    polygon: NormalizedPolygonGeometry | null,\n    {vertexStart, geometrySize}: GeometryUpdateContext\n  ) {\n    const {positionSize} = this;\n    const vertexValid = this.attributes.vertexValid as TypedArray;\n    const holeIndices = polygon && Polygon.getHoleIndices(polygon);\n    /* We are reusing the some buffer for `nextPositions` by offseting one vertex\n     * to the left. As a result,\n     * the last vertex of each ring overlaps with the first vertex of the next ring.\n     * `vertexValid` is used to mark the end of each ring so we don't draw these\n     * segments:\n      positions      A0 A1 A2 A3 A4 B0 B1 B2 C0 ...\n      nextPositions  A1 A2 A3 A4 B0 B1 B2 C0 C1 ...\n      vertexValid    1  1  1  1  0  1  1  0  1 ...\n     */\n    if (polygon && (polygon as CutPolygon).edgeTypes) {\n      vertexValid.set((polygon as CutPolygon).edgeTypes, vertexStart);\n    } else {\n      vertexValid.fill(1, vertexStart, vertexStart + geometrySize);\n    }\n    if (holeIndices) {\n      for (let j = 0; j < holeIndices.length; j++) {\n        vertexValid[vertexStart + holeIndices[j] / positionSize - 1] = 0;\n      }\n    }\n    vertexValid[vertexStart + geometrySize - 1] = 0;\n  }\n}\n\nfunction isCut(polygon: NormalizedPolygonGeometry | CutPolygon[]): polygon is CutPolygon[] {\n  return Array.isArray(polygon) && polygon.length > 0 && !Number.isFinite(polygon[0]);\n}\n"],"file":"polygon-tesselator.js"}