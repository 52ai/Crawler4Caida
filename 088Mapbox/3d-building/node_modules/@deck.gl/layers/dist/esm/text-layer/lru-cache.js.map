{"version":3,"sources":["../../../src/text-layer/lru-cache.ts"],"names":["LRUCache","constructor","limit","get","key","value","_cache","_deleteOrder","_appendOrder","set","Object","keys","length","delete","_order","index","indexOf","splice","push"],"mappings":";AAOA,eAAe,MAAMA,QAAN,CAAuB;AAMpCC,EAAAA,WAAW,CAACC,KAAa,GAAG,CAAjB,EAAoB;AAAA;;AAAA,oCAJU,EAIV;;AAAA,oCAFJ,EAEI;;AAC7B,SAAKA,KAAL,GAAaA,KAAb;AACD;;AAEDC,EAAAA,GAAG,CAACC,GAAD,EAAsB;AACvB,UAAMC,KAAK,GAAG,KAAKC,MAAL,CAAYF,GAAZ,CAAd;;AACA,QAAIC,KAAJ,EAAW;AAET,WAAKE,YAAL,CAAkBH,GAAlB;;AACA,WAAKI,YAAL,CAAkBJ,GAAlB;AACD;;AACD,WAAOC,KAAP;AACD;;AAEDI,EAAAA,GAAG,CAACL,GAAD,EAAcC,KAAd,EAAmC;AACpC,QAAI,CAAC,KAAKC,MAAL,CAAYF,GAAZ,CAAL,EAAuB;AAErB,UAAIM,MAAM,CAACC,IAAP,CAAY,KAAKL,MAAjB,EAAyBM,MAAzB,KAAoC,KAAKV,KAA7C,EAAoD;AAClD,aAAKW,MAAL,CAAY,KAAKC,MAAL,CAAY,CAAZ,CAAZ;AACD;;AAED,WAAKR,MAAL,CAAYF,GAAZ,IAAmBC,KAAnB;;AACA,WAAKG,YAAL,CAAkBJ,GAAlB;AACD,KARD,MAQO;AAEL,WAAKS,MAAL,CAAYT,GAAZ;AAEA,WAAKE,MAAL,CAAYF,GAAZ,IAAmBC,KAAnB;;AACA,WAAKG,YAAL,CAAkBJ,GAAlB;AACD;AACF;;AAEDS,EAAAA,MAAM,CAACT,GAAD,EAAoB;AACxB,UAAMC,KAAK,GAAG,KAAKC,MAAL,CAAYF,GAAZ,CAAd;;AACA,QAAIC,KAAJ,EAAW;AACT,aAAO,KAAKC,MAAL,CAAYF,GAAZ,CAAP;;AACA,WAAKG,YAAL,CAAkBH,GAAlB;AACD;AACF;;AAEOG,EAAAA,YAAY,CAACH,GAAD,EAAoB;AACtC,UAAMW,KAAK,GAAG,KAAKD,MAAL,CAAYE,OAAZ,CAAoBZ,GAApB,CAAd;;AACA,QAAIW,KAAK,IAAI,CAAb,EAAgB;AACd,WAAKD,MAAL,CAAYG,MAAZ,CAAmBF,KAAnB,EAA0B,CAA1B;AACD;AACF;;AAEOP,EAAAA,YAAY,CAACJ,GAAD,EAAoB;AACtC,SAAKU,MAAL,CAAYI,IAAZ,CAAiBd,GAAjB;AACD;;AAvDmC","sourcesContent":["/**\n * LRU Cache class with limit\n *\n * Update order for each get/set operation\n * Delete oldest when reach given limit\n */\n\nexport default class LRUCache<ValueT> {\n  private limit: number;\n  private _cache: Record<string, ValueT> = {};\n  /** access/update order, first item is oldest, last item is newest */\n  private _order: string[] = [];\n\n  constructor(limit: number = 5) {\n    this.limit = limit;\n  }\n\n  get(key: string): ValueT {\n    const value = this._cache[key];\n    if (value) {\n      // update order\n      this._deleteOrder(key);\n      this._appendOrder(key);\n    }\n    return value;\n  }\n\n  set(key: string, value: ValueT): void {\n    if (!this._cache[key]) {\n      // if reach limit, delete the oldest\n      if (Object.keys(this._cache).length === this.limit) {\n        this.delete(this._order[0]);\n      }\n\n      this._cache[key] = value;\n      this._appendOrder(key);\n    } else {\n      // if found in cache, delete the old one, insert new one to the first of list\n      this.delete(key);\n\n      this._cache[key] = value;\n      this._appendOrder(key);\n    }\n  }\n\n  delete(key: string): void {\n    const value = this._cache[key];\n    if (value) {\n      delete this._cache[key];\n      this._deleteOrder(key);\n    }\n  }\n\n  private _deleteOrder(key: string): void {\n    const index = this._order.indexOf(key);\n    if (index >= 0) {\n      this._order.splice(index, 1);\n    }\n  }\n\n  private _appendOrder(key: string): void {\n    this._order.push(key);\n  }\n}\n"],"file":"lru-cache.js"}