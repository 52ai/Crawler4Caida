{"version":3,"sources":["../../../src/column-layer/column-layer.ts"],"names":["Layer","project32","gouraudLighting","phongLighting","picking","UNIT","Model","isWebGL2","hasFeature","FEATURES","ColumnGeometry","vs","fs","DEFAULT_COLOR","defaultProps","diskResolution","type","min","value","vertices","radius","angle","offset","coverage","max","elevationScale","radiusUnits","lineWidthUnits","lineWidthScale","lineWidthMinPixels","lineWidthMaxPixels","Number","MAX_SAFE_INTEGER","extruded","wireframe","filled","stroked","getPosition","x","position","getFillColor","getLineColor","getLineWidth","getElevation","material","getColor","deprecatedFor","ColumnLayer","getShaders","gl","context","transpileToGLSL100","defines","useDerivatives","props","flatShading","GLSL_DERIVATIVES","FLAT_SHADING","modules","initializeState","attributeManager","getAttributeManager","addInstanced","instancePositions","size","fp64","use64bitPositions","transition","accessor","instanceElevations","instanceFillColors","colorFormat","length","normalized","defaultValue","instanceLineColors","instanceStrokeWidths","updateState","params","oldProps","changeFlags","regenerateModels","extensionsChanged","state","model","delete","_getModel","invalidateAll","_updateGeometry","getGeometry","hasThinkness","geometry","height","nradial","meanVertexDistance","i","p","d","Math","sqrt","setState","edgeDistance","cos","PI","id","isInstanced","fillVertexCount","attributes","POSITION","wireframeVertexCount","indices","setProps","draw","uniforms","setUniforms","widthUnits","widthScale","widthMinPixels","widthMaxPixels","isIndexed","setVertexCount","setDrawMode","isStroke"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {\n  Layer,\n  project32,\n  gouraudLighting,\n  phongLighting,\n  picking,\n  UNIT,\n  LayerProps,\n  UpdateParameters,\n  Unit,\n  AccessorFunction,\n  Position,\n  Accessor,\n  Color,\n  Material,\n  DefaultProps\n} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, isWebGL2, hasFeature, FEATURES} from '@luma.gl/core';\nimport ColumnGeometry from './column-geometry';\n\nimport vs from './column-layer-vertex.glsl';\nimport fs from './column-layer-fragment.glsl';\n\nconst DEFAULT_COLOR: [number, number, number, number] = [0, 0, 0, 255];\n\nconst defaultProps: DefaultProps<ColumnLayerProps> = {\n  diskResolution: {type: 'number', min: 4, value: 20},\n  vertices: null,\n  radius: {type: 'number', min: 0, value: 1000},\n  angle: {type: 'number', value: 0},\n  offset: {type: 'array', value: [0, 0]},\n  coverage: {type: 'number', min: 0, max: 1, value: 1},\n  elevationScale: {type: 'number', min: 0, value: 1},\n  radiusUnits: 'meters',\n  lineWidthUnits: 'meters',\n  lineWidthScale: 1,\n  lineWidthMinPixels: 0,\n  lineWidthMaxPixels: Number.MAX_SAFE_INTEGER,\n\n  extruded: true,\n  wireframe: false,\n  filled: true,\n  stroked: false,\n\n  getPosition: {type: 'accessor', value: x => x.position},\n  getFillColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getLineColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getLineWidth: {type: 'accessor', value: 1},\n  getElevation: {type: 'accessor', value: 1000},\n  material: true,\n  getColor: {deprecatedFor: ['getFillColor', 'getLineColor']}\n};\n\n/** All properties supported by ColumnLayer. */\nexport type ColumnLayerProps<DataT = any> = _ColumnLayerProps<DataT> & LayerProps<DataT>;\n\n/** Properties added by ColumnLayer. */\ntype _ColumnLayerProps<DataT> = {\n  /**\n   * The number of sides to render the disk as.\n   * @default 20\n   */\n  diskResolution?: number;\n\n  /**\n   * isk size in units specified by `radiusUnits`.\n   * @default 1000\n   */\n  radius?: number;\n\n  /**\n   * Disk rotation, counter-clockwise in degrees.\n   * @default 0\n   */\n  angle?: number;\n\n  /**\n   * Replace the default geometry (regular polygon that fits inside the unit circle) with a custom one.\n   * @default null\n   */\n  vertices: Position[] | null;\n\n  /**\n   * Disk offset from the position, relative to the radius.\n   * @default [0,0]\n   */\n  offset?: [number, number];\n\n  /**\n   * Radius multiplier, between 0 - 1\n   * @default 1\n   */\n  coverage?: number;\n\n  /**\n   * Column elevation multiplier.\n   * @default 1\n   */\n  elevationScale?: number;\n\n  /**\n   * Whether to draw a filled column (solid fill).\n   * @default true\n   */\n  filled?: boolean;\n\n  /**\n   * Whether to draw an outline around the disks.\n   * @default false\n   */\n  stroked?: boolean;\n\n  /**\n   * Whether to extrude the columns. If set to `false`, all columns will be rendered as flat polygons.\n   * @default true\n   */\n  extruded?: boolean;\n\n  /**\n   * Whether to generate a line wireframe of the column.\n   * @default false\n   */\n  wireframe?: boolean;\n\n  /**\n   * If `true`, the vertical surfaces of the columns use [flat shading](https://en.wikipedia.org/wiki/Shading#Flat_vs._smooth_shading).\n   * @default false\n   */\n  flatShading?: boolean;\n\n  /**\n   * The units of the radius.\n   * @default 'meters'\n   */\n  radiusUnits?: Unit;\n\n  /**\n   * The units of the line width.\n   * @default 'meters'\n   */\n  lineWidthUnits?: Unit;\n\n  /**\n   * The line width multiplier that multiplied to all outlines.\n   * @default 1\n   */\n  lineWidthScale?: number;\n\n  /**\n   * The minimum outline width in pixels.\n   * @default 0\n   */\n  lineWidthMinPixels?: number;\n\n  /**\n   * The maximum outline width in pixels.\n   * @default Number.MAX_SAFE_INTEGER\n   */\n  lineWidthMaxPixels?: number;\n\n  /**\n   * Material settings for lighting effect. Applies if `extruded: true`.\n   *\n   * @default true\n   * @see https://deck.gl/docs/developer-guide/using-lighting\n   */\n  material?: Material;\n\n  /**\n   * Method called to retrieve the position of each column.\n   * @default object => object.position\n   */\n  getPosition?: AccessorFunction<DataT, Position>;\n\n  /**\n   * @deprecated Use getFilledColor and getLineColor instead\n   */\n  getColor?: Accessor<DataT, Color>;\n\n  /**\n   * Fill collor value or accessor.\n   * @default [0, 0, 0, 255]\n   */\n  getFillColor?: Accessor<DataT, Color>;\n\n  /**\n   * Line color value or accessor.\n   *\n   * @default [0, 0, 0, 255]\n   */\n  getLineColor?: Accessor<DataT, Color>;\n\n  /**\n   * The elevation of each cell in meters.\n   * @default 1000\n   */\n  getElevation?: Accessor<DataT, number>;\n\n  /**\n   * The width of the outline of the column, in units specified by `lineWidthUnits`.\n   *\n   * @default 1\n   */\n  getLineWidth?: Accessor<DataT, number>;\n};\n\n/** Render extruded cylinders (tessellated regular polygons) at given coordinates. */\nexport default class ColumnLayer<DataT = any, ExtraPropsT = {}> extends Layer<\n  ExtraPropsT & Required<_ColumnLayerProps<DataT>>\n> {\n  static layerName = 'ColumnLayer';\n  static defaultProps = defaultProps;\n\n  getShaders() {\n    const {gl} = this.context;\n    const transpileToGLSL100 = !isWebGL2(gl);\n    const defines: Record<string, any> = {};\n\n    const useDerivatives = this.props.flatShading && hasFeature(gl, FEATURES.GLSL_DERIVATIVES);\n    if (useDerivatives) {\n      defines.FLAT_SHADING = 1;\n    }\n    return super.getShaders({\n      vs,\n      fs,\n      defines,\n      transpileToGLSL100,\n      modules: [project32, useDerivatives ? phongLighting : gouraudLighting, picking]\n    });\n  }\n\n  /**\n   * DeckGL calls initializeState when GL context is available\n   * Essentially a deferred constructor\n   */\n  initializeState() {\n    const attributeManager = this.getAttributeManager()!;\n    /* eslint-disable max-len */\n    attributeManager.addInstanced({\n      instancePositions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instanceElevations: {\n        size: 1,\n        transition: true,\n        accessor: 'getElevation'\n      },\n      instanceFillColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: true,\n        accessor: 'getFillColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      instanceLineColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: true,\n        accessor: 'getLineColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      instanceStrokeWidths: {\n        size: 1,\n        accessor: 'getLineWidth',\n        transition: true\n      }\n    });\n    /* eslint-enable max-len */\n  }\n\n  updateState(params: UpdateParameters<this>): void {\n    super.updateState(params);\n\n    const {props, oldProps, changeFlags} = params;\n    const regenerateModels =\n      changeFlags.extensionsChanged || props.flatShading !== oldProps.flatShading;\n\n    if (regenerateModels) {\n      const {gl} = this.context;\n      this.state.model?.delete();\n      this.state.model = this._getModel(gl);\n      this.getAttributeManager()!.invalidateAll();\n    }\n\n    if (\n      regenerateModels ||\n      props.diskResolution !== oldProps.diskResolution ||\n      props.vertices !== oldProps.vertices ||\n      (props.extruded || props.stroked) !== (oldProps.extruded || oldProps.stroked)\n    ) {\n      this._updateGeometry(props);\n    }\n  }\n\n  getGeometry(diskResolution: number, vertices: number[] | undefined, hasThinkness: boolean) {\n    const geometry = new ColumnGeometry({\n      radius: 1,\n      height: hasThinkness ? 2 : 0,\n      vertices,\n      nradial: diskResolution\n    });\n\n    let meanVertexDistance = 0;\n    if (vertices) {\n      for (let i = 0; i < diskResolution; i++) {\n        const p = vertices[i];\n        const d = Math.sqrt(p[0] * p[0] + p[1] * p[1]);\n        meanVertexDistance += d / diskResolution;\n      }\n    } else {\n      meanVertexDistance = 1;\n    }\n    this.setState({\n      edgeDistance: Math.cos(Math.PI / diskResolution) * meanVertexDistance\n    });\n\n    return geometry;\n  }\n\n  protected _getModel(gl: WebGLRenderingContext): Model {\n    return new Model(gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      isInstanced: true\n    });\n  }\n\n  protected _updateGeometry({diskResolution, vertices, extruded, stroked}) {\n    const geometry: any = this.getGeometry(diskResolution, vertices, extruded || stroked);\n\n    this.setState({\n      fillVertexCount: geometry.attributes.POSITION.value.length / 3,\n      wireframeVertexCount: geometry.indices.value.length\n    });\n\n    this.state.model.setProps({geometry});\n  }\n\n  draw({uniforms}) {\n    const {\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      radiusUnits,\n      elevationScale,\n      extruded,\n      filled,\n      stroked,\n      wireframe,\n      offset,\n      coverage,\n      radius,\n      angle\n    } = this.props;\n    const {model, fillVertexCount, wireframeVertexCount, edgeDistance} = this.state;\n\n    model.setUniforms(uniforms).setUniforms({\n      radius,\n      angle: (angle / 180) * Math.PI,\n      offset,\n      extruded,\n      stroked,\n      coverage,\n      elevationScale,\n      edgeDistance,\n      radiusUnits: UNIT[radiusUnits],\n      widthUnits: UNIT[lineWidthUnits],\n      widthScale: lineWidthScale,\n      widthMinPixels: lineWidthMinPixels,\n      widthMaxPixels: lineWidthMaxPixels\n    });\n\n    // When drawing 3d: draw wireframe first so it doesn't get occluded by depth test\n    if (extruded && wireframe) {\n      model.setProps({isIndexed: true});\n      model\n        .setVertexCount(wireframeVertexCount)\n        .setDrawMode(GL.LINES)\n        .setUniforms({isStroke: true})\n        .draw();\n    }\n    if (filled) {\n      model.setProps({isIndexed: false});\n      model\n        .setVertexCount(fillVertexCount)\n        .setDrawMode(GL.TRIANGLE_STRIP)\n        .setUniforms({isStroke: false})\n        .draw();\n    }\n    // When drawing 2d: draw fill before stroke so that the outline is always on top\n    if (!extruded && stroked) {\n      model.setProps({isIndexed: false});\n      // The width of the stroke is achieved by flattening the side of the cylinder.\n      // Skip the last 1/3 of the vertices which is the top.\n      model\n        .setVertexCount((fillVertexCount * 2) / 3)\n        .setDrawMode(GL.TRIANGLE_STRIP)\n        .setUniforms({isStroke: true})\n        .draw();\n    }\n  }\n}\n"],"file":"column-layer.js"}