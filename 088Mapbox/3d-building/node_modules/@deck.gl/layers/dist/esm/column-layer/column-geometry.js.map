{"version":3,"sources":["../../../src/column-layer/column-geometry.ts"],"names":["log","Geometry","uid","modifyPolygonWindingDirection","WINDING","ColumnGeometry","constructor","props","id","indices","attributes","tesselateColumn","radius","height","nradial","vertices","assert","length","flatMap","v","COUNTER_CLOCKWISE","isExtruded","vertsAroundEdge","numVertices","stepAngle","Math","PI","Uint16Array","positions","Float32Array","normals","i","j","a","vertexIndex","sin","cos","k","floor","sign","index","POSITION","size","value","NORMAL"],"mappings":"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","sourcesContent":["import {log, BinaryAttribute} from '@deck.gl/core';\nimport {Geometry, uid} from '@luma.gl/core';\nimport {modifyPolygonWindingDirection, WINDING} from '@math.gl/polygon';\n\ntype ColumnGeometryProps = {\n  id?: string;\n  radius: number;\n  height?: number;\n  nradial?: number;\n  vertices?: number[];\n};\n\nexport default class ColumnGeometry extends Geometry {\n  constructor(props: ColumnGeometryProps) {\n    const {id = uid('column-geometry')} = props;\n    const {indices, attributes} = tesselateColumn(props);\n    super({\n      ...props,\n      id,\n      indices,\n      attributes\n    });\n  }\n}\n\n/* eslint-disable max-statements, complexity */\nfunction tesselateColumn(props: ColumnGeometryProps): {\n  indices: Uint16Array;\n  attributes: Record<string, BinaryAttribute>;\n} {\n  const {radius, height = 1, nradial = 10} = props;\n  let {vertices} = props;\n\n  if (vertices) {\n    log.assert(vertices.length >= nradial); // `vertices` must contain at least `diskResolution` points\n    vertices = vertices.flatMap(v => [v[0], v[1]]);\n    modifyPolygonWindingDirection(vertices, WINDING.COUNTER_CLOCKWISE);\n  }\n\n  const isExtruded = height > 0;\n  const vertsAroundEdge = nradial + 1; // loop\n  const numVertices = isExtruded\n    ? vertsAroundEdge * 3 + 1 // top, side top edge, side bottom edge, one additional degenerage vertex\n    : nradial; // top\n\n  const stepAngle = (Math.PI * 2) / nradial;\n\n  // Used for wireframe\n  const indices = new Uint16Array(isExtruded ? nradial * 3 * 2 : 0); // top loop, side vertical, bottom loop\n\n  const positions = new Float32Array(numVertices * 3);\n  const normals = new Float32Array(numVertices * 3);\n\n  let i = 0;\n\n  // side tesselation: 0, 1, 2, 3, 4, 5, ...\n  //\n  // 0 - 2 - 4  ... top\n  // | / | / |\n  // 1 - 3 - 5  ... bottom\n  //\n  if (isExtruded) {\n    for (let j = 0; j < vertsAroundEdge; j++) {\n      const a = j * stepAngle;\n      const vertexIndex = j % nradial;\n      const sin = Math.sin(a);\n      const cos = Math.cos(a);\n\n      for (let k = 0; k < 2; k++) {\n        positions[i + 0] = vertices ? vertices[vertexIndex * 2] : cos * radius;\n        positions[i + 1] = vertices ? vertices[vertexIndex * 2 + 1] : sin * radius;\n        positions[i + 2] = (1 / 2 - k) * height;\n\n        normals[i + 0] = vertices ? vertices[vertexIndex * 2] : cos;\n        normals[i + 1] = vertices ? vertices[vertexIndex * 2 + 1] : sin;\n\n        i += 3;\n      }\n    }\n\n    // duplicate the last vertex to create proper degenerate triangle.\n    positions[i + 0] = positions[i - 3];\n    positions[i + 1] = positions[i - 2];\n    positions[i + 2] = positions[i - 1];\n    i += 3;\n  }\n\n  // The column geometry is rendered as a triangle strip, so\n  // in order to render sides and top in one go we need to use degenerate triangles.\n  // Duplicate last vertex of side trinagles and first vertex of the top cap to preserve winding order.\n\n  // top tesselation: 0, -1, 1, -2, 2, -3, 3, ...\n  //\n  //    0 -- 1\n  //   /      \\\n  // -1        2\n  //  |        |\n  // -2        3\n  //   \\      /\n  //   -3 -- 4\n  //\n  for (let j = isExtruded ? 0 : 1; j < vertsAroundEdge; j++) {\n    const v = Math.floor(j / 2) * Math.sign(0.5 - (j % 2));\n    const a = v * stepAngle;\n    const vertexIndex = (v + nradial) % nradial;\n    const sin = Math.sin(a);\n    const cos = Math.cos(a);\n\n    positions[i + 0] = vertices ? vertices[vertexIndex * 2] : cos * radius;\n    positions[i + 1] = vertices ? vertices[vertexIndex * 2 + 1] : sin * radius;\n    positions[i + 2] = height / 2;\n\n    normals[i + 2] = 1;\n\n    i += 3;\n  }\n\n  if (isExtruded) {\n    let index = 0;\n    for (let j = 0; j < nradial; j++) {\n      // top loop\n      indices[index++] = j * 2 + 0;\n      indices[index++] = j * 2 + 2;\n      // side vertical\n      indices[index++] = j * 2 + 0;\n      indices[index++] = j * 2 + 1;\n      // bottom loop\n      indices[index++] = j * 2 + 1;\n      indices[index++] = j * 2 + 3;\n    }\n  }\n\n  return {\n    indices,\n    attributes: {\n      POSITION: {size: 3, value: positions},\n      NORMAL: {size: 3, value: normals}\n    }\n  };\n}\n"],"file":"column-geometry.js"}