{"version":3,"sources":["../../../src/column-layer/column-geometry.ts"],"names":["ColumnGeometry","props","id","tesselateColumn","indices","attributes","Geometry","radius","height","nradial","vertices","log","assert","length","flatMap","v","WINDING","COUNTER_CLOCKWISE","isExtruded","vertsAroundEdge","numVertices","stepAngle","Math","PI","Uint16Array","positions","Float32Array","normals","i","j","a","vertexIndex","sin","cos","k","floor","sign","index","POSITION","size","value","NORMAL"],"mappings":"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","sourcesContent":["import {log, BinaryAttribute} from '@deck.gl/core';\nimport {Geometry, uid} from '@luma.gl/core';\nimport {modifyPolygonWindingDirection, WINDING} from '@math.gl/polygon';\n\ntype ColumnGeometryProps = {\n  id?: string;\n  radius: number;\n  height?: number;\n  nradial?: number;\n  vertices?: number[];\n};\n\nexport default class ColumnGeometry extends Geometry {\n  constructor(props: ColumnGeometryProps) {\n    const {id = uid('column-geometry')} = props;\n    const {indices, attributes} = tesselateColumn(props);\n    super({\n      ...props,\n      id,\n      indices,\n      attributes\n    });\n  }\n}\n\n/* eslint-disable max-statements, complexity */\nfunction tesselateColumn(props: ColumnGeometryProps): {\n  indices: Uint16Array;\n  attributes: Record<string, BinaryAttribute>;\n} {\n  const {radius, height = 1, nradial = 10} = props;\n  let {vertices} = props;\n\n  if (vertices) {\n    log.assert(vertices.length >= nradial); // `vertices` must contain at least `diskResolution` points\n    vertices = vertices.flatMap(v => [v[0], v[1]]);\n    modifyPolygonWindingDirection(vertices, WINDING.COUNTER_CLOCKWISE);\n  }\n\n  const isExtruded = height > 0;\n  const vertsAroundEdge = nradial + 1; // loop\n  const numVertices = isExtruded\n    ? vertsAroundEdge * 3 + 1 // top, side top edge, side bottom edge, one additional degenerage vertex\n    : nradial; // top\n\n  const stepAngle = (Math.PI * 2) / nradial;\n\n  // Used for wireframe\n  const indices = new Uint16Array(isExtruded ? nradial * 3 * 2 : 0); // top loop, side vertical, bottom loop\n\n  const positions = new Float32Array(numVertices * 3);\n  const normals = new Float32Array(numVertices * 3);\n\n  let i = 0;\n\n  // side tesselation: 0, 1, 2, 3, 4, 5, ...\n  //\n  // 0 - 2 - 4  ... top\n  // | / | / |\n  // 1 - 3 - 5  ... bottom\n  //\n  if (isExtruded) {\n    for (let j = 0; j < vertsAroundEdge; j++) {\n      const a = j * stepAngle;\n      const vertexIndex = j % nradial;\n      const sin = Math.sin(a);\n      const cos = Math.cos(a);\n\n      for (let k = 0; k < 2; k++) {\n        positions[i + 0] = vertices ? vertices[vertexIndex * 2] : cos * radius;\n        positions[i + 1] = vertices ? vertices[vertexIndex * 2 + 1] : sin * radius;\n        positions[i + 2] = (1 / 2 - k) * height;\n\n        normals[i + 0] = vertices ? vertices[vertexIndex * 2] : cos;\n        normals[i + 1] = vertices ? vertices[vertexIndex * 2 + 1] : sin;\n\n        i += 3;\n      }\n    }\n\n    // duplicate the last vertex to create proper degenerate triangle.\n    positions[i + 0] = positions[i - 3];\n    positions[i + 1] = positions[i - 2];\n    positions[i + 2] = positions[i - 1];\n    i += 3;\n  }\n\n  // The column geometry is rendered as a triangle strip, so\n  // in order to render sides and top in one go we need to use degenerate triangles.\n  // Duplicate last vertex of side trinagles and first vertex of the top cap to preserve winding order.\n\n  // top tesselation: 0, -1, 1, -2, 2, -3, 3, ...\n  //\n  //    0 -- 1\n  //   /      \\\n  // -1        2\n  //  |        |\n  // -2        3\n  //   \\      /\n  //   -3 -- 4\n  //\n  for (let j = isExtruded ? 0 : 1; j < vertsAroundEdge; j++) {\n    const v = Math.floor(j / 2) * Math.sign(0.5 - (j % 2));\n    const a = v * stepAngle;\n    const vertexIndex = (v + nradial) % nradial;\n    const sin = Math.sin(a);\n    const cos = Math.cos(a);\n\n    positions[i + 0] = vertices ? vertices[vertexIndex * 2] : cos * radius;\n    positions[i + 1] = vertices ? vertices[vertexIndex * 2 + 1] : sin * radius;\n    positions[i + 2] = height / 2;\n\n    normals[i + 2] = 1;\n\n    i += 3;\n  }\n\n  if (isExtruded) {\n    let index = 0;\n    for (let j = 0; j < nradial; j++) {\n      // top loop\n      indices[index++] = j * 2 + 0;\n      indices[index++] = j * 2 + 2;\n      // side vertical\n      indices[index++] = j * 2 + 0;\n      indices[index++] = j * 2 + 1;\n      // bottom loop\n      indices[index++] = j * 2 + 1;\n      indices[index++] = j * 2 + 3;\n    }\n  }\n\n  return {\n    indices,\n    attributes: {\n      POSITION: {size: 3, value: positions},\n      NORMAL: {size: 3, value: normals}\n    }\n  };\n}\n"],"file":"column-geometry.js"}