{"version":3,"sources":["../../../src/solid-polygon-layer/solid-polygon-layer.ts"],"names":["DEFAULT_COLOR","defaultProps","filled","extruded","wireframe","_normalize","_windingOrder","elevationScale","type","min","value","getPolygon","f","polygon","getElevation","getFillColor","getLineColor","material","ATTRIBUTE_TRANSITION","enter","chunk","length","subarray","SolidPolygonLayer","vs","vsTop","vsSide","fs","defines","RING_WINDING_ORDER_CW","props","modules","project32","gouraudLighting","picking","context","gl","viewport","coordinateSystem","isGeospatial","COORDINATE_SYSTEM","DEFAULT","LNGLAT","setState","numInstances","polygonTesselator","PolygonTesselator","preproject","projectFlat","bind","fp64","use64bitPositions","IndexType","FEATURES","ELEMENT_INDEX_UINT32","Uint32Array","Uint16Array","attributeManager","getAttributeManager","noAlloc","remove","add","indices","size","isIndexed","update","calculateIndices","positions","transition","accessor","calculatePositions","shaderAttributes","vertexOffset","divisor","instancePositions","nextPositions","vertexValid","calculateVertexValid","elevations","instanceElevations","fillColors","colorFormat","normalized","defaultValue","instanceFillColors","lineColors","instanceLineColors","pickingColors","object","index","target","encodePickingColor","__source","instancePickingColors","params","info","data","find","d","objectIndex","i","_disablePickingIndex","uniforms","state","topModel","sideModel","renderUniforms","Boolean","setInstanceCount","instanceCount","setUniforms","setDrawMode","isWireframe","draw","setVertexCount","vertexCount","updateParams","updateGeometry","oldProps","changeFlags","regenerateModels","extensionsChanged","models","forEach","model","delete","_getModels","invalidateAll","geometryConfigChanged","dataChanged","updateTriggersChanged","all","buffers","attributes","normalize","geometryBuffer","getGeometry","positionFormat","wrapLongitude","resolution","startIndices","vertexStarts","id","shaders","getShaders","NON_INSTANCED_MODEL","Model","drawMode","vertexPositions","Float32Array","isSideVertex","geometry","Geometry","isInstanced","userData","excludeAttributes","filter","attribute","indexStarts","get","Layer"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, project32, gouraudLighting, picking, COORDINATE_SYSTEM} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry, hasFeatures, FEATURES} from '@luma.gl/core';\n\n// Polygon geometry generation is managed by the polygon tesselator\nimport PolygonTesselator from './polygon-tesselator';\n\nimport vsTop from './solid-polygon-layer-vertex-top.glsl';\nimport vsSide from './solid-polygon-layer-vertex-side.glsl';\nimport fs from './solid-polygon-layer-fragment.glsl';\n\nimport type {\n  LayerProps,\n  Color,\n  Material,\n  Accessor,\n  AccessorFunction,\n  UpdateParameters,\n  GetPickingInfoParams,\n  PickingInfo,\n  DefaultProps\n} from '@deck.gl/core';\nimport type {PolygonGeometry} from './polygon';\n\ntype _SolidPolygonLayerProps<DataT> = {\n  /** Whether to fill the polygons\n   * @default true\n   */\n  filled?: boolean;\n  /** Whether to extrude the polygons\n   * @default false\n   */\n  extruded?: boolean;\n  /** Whether to generate a line wireframe of the polygon.\n   * @default false\n   */\n  wireframe?: boolean;\n  /**\n   * (Experimental) If `false`, will skip normalizing the coordinates returned by `getPolygon`.\n   * @default true\n   */\n  _normalize?: boolean;\n  /**\n   * (Experimental) This prop is only effective with `_normalize: false`.\n   * It specifies the winding order of rings in the polygon data, one of 'CW' (clockwise) and 'CCW' (counter-clockwise)\n   */\n  _windingOrder?: 'CW' | 'CCW';\n\n  /** Elevation multiplier.\n   * @default 1\n   */\n  elevationScale?: number;\n\n  /** Polygon geometry accessor. */\n  getPolygon?: AccessorFunction<DataT, PolygonGeometry>;\n  /** Extrusion height accessor.\n   * @default 1000\n   */\n  getElevation?: Accessor<DataT, number>;\n  /** Fill color accessor.\n   * @default [0, 0, 0, 255]\n   */\n  getFillColor?: Accessor<DataT, Color>;\n  /** Stroke color accessor.\n   * @default [0, 0, 0, 255]\n   */\n  getLineColor?: Accessor<DataT, Color>;\n\n  /**\n   * Material settings for lighting effect. Applies if `extruded: true`\n   *\n   * @default true\n   * @see https://deck.gl/docs/developer-guide/using-lighting\n   */\n  material?: Material;\n};\n\n/** Render filled and/or extruded polygons. */\nexport type SolidPolygonLayerProps<DataT = any> = _SolidPolygonLayerProps<DataT> &\n  LayerProps<DataT>;\n\nconst DEFAULT_COLOR: [number, number, number, number] = [0, 0, 0, 255];\n\nconst defaultProps: DefaultProps<SolidPolygonLayerProps> = {\n  filled: true,\n  extruded: false,\n  wireframe: false,\n  _normalize: true,\n  _windingOrder: 'CW',\n\n  elevationScale: {type: 'number', min: 0, value: 1},\n\n  getPolygon: {type: 'accessor', value: f => f.polygon},\n  getElevation: {type: 'accessor', value: 1000},\n  getFillColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getLineColor: {type: 'accessor', value: DEFAULT_COLOR},\n\n  material: true\n};\n\nconst ATTRIBUTE_TRANSITION = {\n  enter: (value, chunk) => {\n    return chunk.length ? chunk.subarray(chunk.length - value.length) : value;\n  }\n};\n\nexport default class SolidPolygonLayer<DataT = any, ExtraPropsT = {}> extends Layer<\n  ExtraPropsT & Required<_SolidPolygonLayerProps<DataT>>\n> {\n  static defaultProps = defaultProps;\n  static layerName = 'SolidPolygonLayer';\n\n  state!: {\n    topModel?: Model;\n    sideModel?: Model;\n    models?: Model[];\n    numInstances: number;\n    polygonTesselator: PolygonTesselator;\n  };\n\n  getShaders(type) {\n    return super.getShaders({\n      vs: type === 'top' ? vsTop : vsSide,\n      fs,\n      defines: {\n        RING_WINDING_ORDER_CW: !this.props._normalize && this.props._windingOrder === 'CCW' ? 0 : 1\n      },\n      modules: [project32, gouraudLighting, picking]\n    });\n  }\n\n  get wrapLongitude(): boolean {\n    return false;\n  }\n\n  initializeState() {\n    const {gl, viewport} = this.context;\n    let {coordinateSystem} = this.props;\n    if (viewport.isGeospatial && coordinateSystem === COORDINATE_SYSTEM.DEFAULT) {\n      coordinateSystem = COORDINATE_SYSTEM.LNGLAT;\n    }\n\n    this.setState({\n      numInstances: 0,\n      polygonTesselator: new PolygonTesselator({\n        // Lnglat coordinates are usually projected non-linearly, which affects tesselation results\n        // Provide a preproject function if the coordinates are in lnglat\n        preproject:\n          coordinateSystem === COORDINATE_SYSTEM.LNGLAT && viewport.projectFlat.bind(viewport),\n        fp64: this.use64bitPositions(),\n        IndexType: !gl || hasFeatures(gl, FEATURES.ELEMENT_INDEX_UINT32) ? Uint32Array : Uint16Array\n      })\n    });\n\n    const attributeManager = this.getAttributeManager()!;\n    const noAlloc = true;\n\n    attributeManager.remove(['instancePickingColors']);\n\n    /* eslint-disable max-len */\n    attributeManager.add({\n      indices: {\n        size: 1,\n        isIndexed: true,\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        update: this.calculateIndices,\n        noAlloc\n      },\n      positions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getPolygon',\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        update: this.calculatePositions,\n        noAlloc,\n        shaderAttributes: {\n          positions: {\n            vertexOffset: 0,\n            divisor: 0\n          },\n          instancePositions: {\n            vertexOffset: 0,\n            divisor: 1\n          },\n          nextPositions: {\n            vertexOffset: 1,\n            divisor: 1\n          }\n        }\n      },\n      vertexValid: {\n        size: 1,\n        divisor: 1,\n        type: GL.UNSIGNED_BYTE,\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        update: this.calculateVertexValid,\n        noAlloc\n      },\n      elevations: {\n        size: 1,\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getElevation',\n        shaderAttributes: {\n          elevations: {\n            divisor: 0\n          },\n          instanceElevations: {\n            divisor: 1\n          }\n        }\n      },\n      fillColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getFillColor',\n        defaultValue: DEFAULT_COLOR,\n        shaderAttributes: {\n          fillColors: {\n            divisor: 0\n          },\n          instanceFillColors: {\n            divisor: 1\n          }\n        }\n      },\n      lineColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getLineColor',\n        defaultValue: DEFAULT_COLOR,\n        shaderAttributes: {\n          lineColors: {\n            divisor: 0\n          },\n          instanceLineColors: {\n            divisor: 1\n          }\n        }\n      },\n      pickingColors: {\n        size: 3,\n        type: GL.UNSIGNED_BYTE,\n        accessor: (object, {index, target: value}) =>\n          this.encodePickingColor(object && object.__source ? object.__source.index : index, value),\n        shaderAttributes: {\n          pickingColors: {\n            divisor: 0\n          },\n          instancePickingColors: {\n            divisor: 1\n          }\n        }\n      }\n    });\n    /* eslint-enable max-len */\n  }\n\n  getPickingInfo(params: GetPickingInfoParams): PickingInfo {\n    const info = super.getPickingInfo(params);\n    const {index} = info;\n    const {data} = this.props;\n\n    // Check if data comes from a composite layer, wrapped with getSubLayerRow\n    if (data[0] && data[0].__source) {\n      // index decoded from picking color refers to the source index\n      info.object = (data as any[]).find(d => d.__source.index === index);\n    }\n    return info;\n  }\n\n  disablePickingIndex(objectIndex: number) {\n    const {data} = this.props;\n\n    // Check if data comes from a composite layer, wrapped with getSubLayerRow\n    if (data[0] && data[0].__source) {\n      // index decoded from picking color refers to the source index\n      for (let i = 0; i < (data as any[]).length; i++) {\n        if (data[i].__source.index === objectIndex) {\n          this._disablePickingIndex(i);\n        }\n      }\n    } else {\n      this._disablePickingIndex(objectIndex);\n    }\n  }\n\n  draw({uniforms}) {\n    const {extruded, filled, wireframe, elevationScale} = this.props;\n    const {topModel, sideModel, polygonTesselator} = this.state;\n\n    const renderUniforms = {\n      ...uniforms,\n      extruded: Boolean(extruded),\n      elevationScale\n    };\n\n    // Note: the order is important\n    if (sideModel) {\n      sideModel.setInstanceCount(polygonTesselator.instanceCount - 1);\n      sideModel.setUniforms(renderUniforms);\n      if (wireframe) {\n        sideModel.setDrawMode(GL.LINE_STRIP);\n        sideModel.setUniforms({isWireframe: true}).draw();\n      }\n      if (filled) {\n        sideModel.setDrawMode(GL.TRIANGLE_FAN);\n        sideModel.setUniforms({isWireframe: false}).draw();\n      }\n    }\n\n    if (topModel) {\n      topModel.setVertexCount(polygonTesselator.vertexCount);\n      topModel.setUniforms(renderUniforms).draw();\n    }\n  }\n\n  updateState(updateParams: UpdateParameters<this>) {\n    super.updateState(updateParams);\n\n    this.updateGeometry(updateParams);\n\n    const {props, oldProps, changeFlags} = updateParams;\n    const attributeManager = this.getAttributeManager();\n\n    const regenerateModels =\n      changeFlags.extensionsChanged ||\n      props.filled !== oldProps.filled ||\n      props.extruded !== oldProps.extruded;\n\n    if (regenerateModels) {\n      this.state.models?.forEach(model => model.delete());\n\n      this.setState(this._getModels(this.context.gl));\n      attributeManager!.invalidateAll();\n    }\n  }\n\n  protected updateGeometry({props, oldProps, changeFlags}: UpdateParameters<this>) {\n    const geometryConfigChanged =\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPolygon));\n\n    // When the geometry config  or the data is changed,\n    // tessellator needs to be invoked\n    if (geometryConfigChanged) {\n      const {polygonTesselator} = this.state;\n      const buffers = (props.data as any).attributes || {};\n      polygonTesselator.updateGeometry({\n        data: props.data,\n        normalize: props._normalize,\n        geometryBuffer: buffers.getPolygon,\n        buffers,\n        getGeometry: props.getPolygon,\n        positionFormat: props.positionFormat,\n        wrapLongitude: props.wrapLongitude,\n        // TODO - move the flag out of the viewport\n        resolution: this.context.viewport.resolution,\n        fp64: this.use64bitPositions(),\n        dataChanged: changeFlags.dataChanged\n      });\n\n      this.setState({\n        numInstances: polygonTesselator.instanceCount,\n        startIndices: polygonTesselator.vertexStarts\n      });\n\n      if (!changeFlags.dataChanged) {\n        // Base `layer.updateState` only invalidates all attributes on data change\n        // Cover the rest of the scenarios here\n        this.getAttributeManager()!.invalidateAll();\n      }\n    }\n  }\n\n  protected _getModels(gl: WebGLRenderingContext): Model {\n    const {id, filled, extruded} = this.props;\n\n    let topModel;\n    let sideModel;\n\n    if (filled) {\n      const shaders = this.getShaders('top');\n      shaders.defines.NON_INSTANCED_MODEL = 1;\n\n      topModel = new Model(gl, {\n        ...shaders,\n        id: `${id}-top`,\n        drawMode: GL.TRIANGLES,\n        attributes: {\n          vertexPositions: new Float32Array([0, 1])\n        },\n        uniforms: {\n          isWireframe: false,\n          isSideVertex: false\n        },\n        vertexCount: 0,\n        isIndexed: true\n      });\n    }\n    if (extruded) {\n      sideModel = new Model(gl, {\n        ...this.getShaders('side'),\n        id: `${id}-side`,\n        geometry: new Geometry({\n          drawMode: GL.LINES,\n          vertexCount: 4,\n          attributes: {\n            // top right - top left - bootom left - bottom right\n            vertexPositions: {\n              size: 2,\n              value: new Float32Array([1, 0, 0, 0, 0, 1, 1, 1])\n            }\n          }\n        }),\n        instanceCount: 0,\n        isInstanced: 1\n      });\n\n      sideModel.userData.excludeAttributes = {indices: true};\n    }\n\n    return {\n      models: [sideModel, topModel].filter(Boolean),\n      topModel,\n      sideModel\n    };\n  }\n\n  protected calculateIndices(attribute) {\n    const {polygonTesselator} = this.state;\n    attribute.startIndices = polygonTesselator.indexStarts;\n    attribute.value = polygonTesselator.get('indices');\n  }\n\n  protected calculatePositions(attribute) {\n    const {polygonTesselator} = this.state;\n    attribute.startIndices = polygonTesselator.vertexStarts;\n    attribute.value = polygonTesselator.get('positions');\n  }\n\n  protected calculateVertexValid(attribute) {\n    attribute.value = this.state.polygonTesselator.get('vertexValid');\n  }\n}\n"],"file":"solid-polygon-layer.js"}