{"version":3,"sources":["../../../src/scatterplot-layer/scatterplot-layer.ts"],"names":["DEFAULT_COLOR","defaultProps","radiusUnits","radiusScale","type","min","value","radiusMinPixels","radiusMaxPixels","Number","MAX_SAFE_INTEGER","lineWidthUnits","lineWidthScale","lineWidthMinPixels","lineWidthMaxPixels","stroked","filled","billboard","antialiasing","getPosition","x","position","getRadius","getFillColor","getLineColor","getLineWidth","strokeWidth","deprecatedFor","outline","getColor","ScatterplotLayer","vs","fs","modules","project32","picking","getAttributeManager","addInstanced","instancePositions","size","fp64","use64bitPositions","transition","accessor","instanceRadius","defaultValue","instanceFillColors","props","colorFormat","length","normalized","instanceLineColors","instanceLineWidths","params","changeFlags","extensionsChanged","gl","context","state","model","delete","_getModel","invalidateAll","uniforms","setUniforms","UNIT","draw","positions","Model","getShaders","id","geometry","Geometry","drawMode","vertexCount","attributes","Float32Array","isInstanced","Layer"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, project32, picking, UNIT} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry} from '@luma.gl/core';\n\nimport vs from './scatterplot-layer-vertex.glsl';\nimport fs from './scatterplot-layer-fragment.glsl';\n\nimport type {\n  LayerProps,\n  UpdateParameters,\n  Accessor,\n  Unit,\n  Position,\n  Color,\n  DefaultProps\n} from '@deck.gl/core';\n\nconst DEFAULT_COLOR: [number, number, number, number] = [0, 0, 0, 255];\n\n/** All props supported by the ScatterplotLayer */\nexport type ScatterplotLayerProps<DataT = any> = _ScatterplotLayerProps<DataT> & LayerProps<DataT>;\n\n/** Props added by the ScatterplotLayer */\ntype _ScatterplotLayerProps<DataT> = {\n  /**\n   * The units of the radius, one of `'meters'`, `'common'`, and `'pixels'`.\n   * @default 'meters'\n   */\n  radiusUnits?: Unit;\n  /**\n   * Radius multiplier.\n   * @default 1\n   */\n  radiusScale?: number;\n  /**\n   * The minimum radius in pixels. This prop can be used to prevent the circle from getting too small when zoomed out.\n   * @default 0\n   */\n  radiusMinPixels?: number;\n  /**\n   * The maximum radius in pixels. This prop can be used to prevent the circle from getting too big when zoomed in.\n   * @default Number.MAX_SAFE_INTEGER\n   */\n  radiusMaxPixels?: number;\n\n  /**\n   * The units of the stroke width, one of `'meters'`, `'common'`, and `'pixels'`.\n   * @default 'meters'\n   */\n  lineWidthUnits?: Unit;\n  /**\n   * Stroke width multiplier.\n   * @default 1\n   */\n  lineWidthScale?: number;\n  /**\n   * The minimum stroke width in pixels. This prop can be used to prevent the line from getting too thin when zoomed out.\n   * @default 0\n   */\n  lineWidthMinPixels?: number;\n  /**\n   * The maximum stroke width in pixels. This prop can be used to prevent the circle from getting too thick when zoomed in.\n   * @default Number.MAX_SAFE_INTEGER\n   */\n  lineWidthMaxPixels?: number;\n\n  /**\n   * Draw the outline of points.\n   * @default false\n   */\n  stroked?: boolean;\n  /**\n   * Draw the filled area of points.\n   * @default true\n   */\n  filled?: boolean;\n  /**\n   * If `true`, rendered circles always face the camera. If `false` circles face up (i.e. are parallel with the ground plane).\n   * @default false\n   */\n  billboard?: boolean;\n  /**\n   * If `true`, circles are rendered with smoothed edges. If `false`, circles are rendered with rough edges. Antialiasing can cause artifacts on edges of overlapping circles.\n   * @default true\n   */\n  antialiasing?: boolean;\n\n  /**\n   * Center position accessor.\n   */\n  getPosition?: Accessor<DataT, Position>;\n  /**\n   * Radius accessor.\n   * @default 1\n   */\n  getRadius?: Accessor<DataT, number>;\n  /**\n   * Fill color accessor.\n   * @default [0, 0, 0, 255]\n   */\n  getFillColor?: Accessor<DataT, Color>;\n  /**\n   * Stroke color accessor.\n   * @default [0, 0, 0, 255]\n   */\n  getLineColor?: Accessor<DataT, Color>;\n  /**\n   * Stroke width accessor.\n   * @default 1\n   */\n  getLineWidth?: Accessor<DataT, number>;\n  /**\n   * @deprecated Use `getLineWidth` instead\n   */\n  strokeWidth?: number;\n  /**\n   * @deprecated Use `stroked` instead\n   */\n  outline?: boolean;\n  /**\n   * @deprecated Use `getFillColor` and `getLineColor` instead\n   */\n  getColor?: Accessor<DataT, Color>;\n};\n\nconst defaultProps: DefaultProps<ScatterplotLayerProps> = {\n  radiusUnits: 'meters',\n  radiusScale: {type: 'number', min: 0, value: 1},\n  radiusMinPixels: {type: 'number', min: 0, value: 0}, //  min point radius in pixels\n  radiusMaxPixels: {type: 'number', min: 0, value: Number.MAX_SAFE_INTEGER}, // max point radius in pixels\n\n  lineWidthUnits: 'meters',\n  lineWidthScale: {type: 'number', min: 0, value: 1},\n  lineWidthMinPixels: {type: 'number', min: 0, value: 0},\n  lineWidthMaxPixels: {type: 'number', min: 0, value: Number.MAX_SAFE_INTEGER},\n\n  stroked: false,\n  filled: true,\n  billboard: false,\n  antialiasing: true,\n\n  getPosition: {type: 'accessor', value: x => x.position},\n  getRadius: {type: 'accessor', value: 1},\n  getFillColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getLineColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getLineWidth: {type: 'accessor', value: 1},\n\n  // deprecated\n  strokeWidth: {deprecatedFor: 'getLineWidth'},\n  outline: {deprecatedFor: 'stroked'},\n  getColor: {deprecatedFor: ['getFillColor', 'getLineColor']}\n};\n\n/** Render circles at given coordinates. */\nexport default class ScatterplotLayer<DataT = any, ExtraPropsT = {}> extends Layer<\n  ExtraPropsT & Required<_ScatterplotLayerProps<DataT>>\n> {\n  static defaultProps = defaultProps;\n  static layerName: string = 'ScatterplotLayer';\n\n  getShaders() {\n    return super.getShaders({vs, fs, modules: [project32, picking]});\n  }\n\n  initializeState() {\n    this.getAttributeManager()!.addInstanced({\n      instancePositions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instanceRadius: {\n        size: 1,\n        transition: true,\n        accessor: 'getRadius',\n        defaultValue: 1\n      },\n      instanceFillColors: {\n        size: this.props.colorFormat.length,\n        transition: true,\n        normalized: true,\n        type: GL.UNSIGNED_BYTE,\n        accessor: 'getFillColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceLineColors: {\n        size: this.props.colorFormat.length,\n        transition: true,\n        normalized: true,\n        type: GL.UNSIGNED_BYTE,\n        accessor: 'getLineColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceLineWidths: {\n        size: 1,\n        transition: true,\n        accessor: 'getLineWidth',\n        defaultValue: 1\n      }\n    });\n  }\n\n  updateState(params: UpdateParameters<this>) {\n    super.updateState(params);\n\n    if (params.changeFlags.extensionsChanged) {\n      const {gl} = this.context;\n      this.state.model?.delete();\n      this.state.model = this._getModel(gl);\n      this.getAttributeManager()!.invalidateAll();\n    }\n  }\n\n  draw({uniforms}) {\n    const {\n      radiusUnits,\n      radiusScale,\n      radiusMinPixels,\n      radiusMaxPixels,\n      stroked,\n      filled,\n      billboard,\n      antialiasing,\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels\n    } = this.props;\n\n    this.state.model\n      .setUniforms(uniforms)\n      .setUniforms({\n        stroked: stroked ? 1 : 0,\n        filled,\n        billboard,\n        antialiasing,\n        radiusUnits: UNIT[radiusUnits],\n        radiusScale,\n        radiusMinPixels,\n        radiusMaxPixels,\n        lineWidthUnits: UNIT[lineWidthUnits],\n        lineWidthScale,\n        lineWidthMinPixels,\n        lineWidthMaxPixels\n      })\n      .draw();\n  }\n\n  protected _getModel(gl) {\n    // a square that minimally cover the unit circle\n    const positions = [-1, -1, 0, 1, -1, 0, 1, 1, 0, -1, 1, 0];\n\n    return new Model(gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: GL.TRIANGLE_FAN,\n        vertexCount: 4,\n        attributes: {\n          positions: {size: 3, value: new Float32Array(positions)}\n        }\n      }),\n      isInstanced: true\n    });\n  }\n}\n"],"file":"scatterplot-layer.js"}