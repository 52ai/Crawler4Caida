{"version":3,"sources":["../../../src/brushing/brushing.ts"],"names":["LayerExtension","shaderModule","defaultProps","getBrushingTarget","type","value","brushingTarget","brushingEnabled","brushingRadius","BrushingExtension","getShaders","modules","initializeState","context","extension","attributeManager","getAttributeManager","add","brushingTargets","size","accessor","update","props","undefined","useConstantTargetPositions","shaderAttributes","divisor","instanceBrushingTargets","state","onMouseMove","getCurrentLayer","setNeedsRedraw","deck","eventManager","on","pointermove","pointerleave","finalizeState","off","attribute","constant","Float32Array"],"mappings":";AAoBA,SAAQA,cAAR,QAA6B,eAA7B;AACA,OAAOC,YAAP,MAAyB,iBAAzB;AAIA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,iBAAiB,EAAE;AAACC,IAAAA,IAAI,EAAE,UAAP;AAAmBC,IAAAA,KAAK,EAAE,CAAC,CAAD,EAAI,CAAJ;AAA1B,GADA;AAGnBC,EAAAA,cAAc,EAAE,QAHG;AAInBC,EAAAA,eAAe,EAAE,IAJE;AAKnBC,EAAAA,cAAc,EAAE;AALG,CAArB;AA8BA,eAAe,MAAMC,iBAAN,SAAgCT,cAAhC,CAA+C;AAI5DU,EAAAA,UAAU,GAAQ;AAChB,WAAO;AACLC,MAAAA,OAAO,EAAE,CAACV,YAAD;AADJ,KAAP;AAGD;;AAEDW,EAAAA,eAAe,CAAsCC,OAAtC,EAA6DC,SAA7D,EAA8E;AAC3F,UAAMC,gBAAgB,GAAG,KAAKC,mBAAL,EAAzB;;AACA,QAAID,gBAAJ,EAAsB;AACpBA,MAAAA,gBAAgB,CAACE,GAAjB,CAAqB;AACnBC,QAAAA,eAAe,EAAE;AACfC,UAAAA,IAAI,EAAE,CADS;AAEfC,UAAAA,QAAQ,EAAE,mBAFK;AAOfC,UAAAA,MAAM,EAAE,KAAKC,KAAL,CAAWnB,iBAAX,GAA+BoB,SAA/B,GAA2CT,SAAS,CAACU,0BAP9C;AAQfC,UAAAA,gBAAgB,EAAE;AAChBP,YAAAA,eAAe,EAAE;AACfQ,cAAAA,OAAO,EAAE;AADM,aADD;AAIhBC,YAAAA,uBAAuB,EAAE;AACvBD,cAAAA,OAAO,EAAE;AADc;AAJT;AARH;AADE,OAArB;AAmBD;;AAID,SAAKE,KAAL,CAAWC,WAAX,GAAyB,MAAM;AAAA;;AAC7B,oCAAKC,eAAL,kFAAwBC,cAAxB;AACD,KAFD;;AAGA,QAAIlB,OAAO,CAACmB,IAAZ,EAAkB;AAEhBnB,MAAAA,OAAO,CAACmB,IAAR,CAAaC,YAAb,CAA0BC,EAA1B,CAA6B;AAC3BC,QAAAA,WAAW,EAAE,KAAKP,KAAL,CAAWC,WADG;AAE3BO,QAAAA,YAAY,EAAE,KAAKR,KAAL,CAAWC;AAFE,OAA7B;AAID;AACF;;AAEDQ,EAAAA,aAAa,CAAsCxB,OAAtC,EAA6DC,SAA7D,EAA8E;AAEzF,QAAID,OAAO,CAACmB,IAAZ,EAAkB;AAEhBnB,MAAAA,OAAO,CAACmB,IAAR,CAAaC,YAAb,CAA0BK,GAA1B,CAA8B;AAC5BH,QAAAA,WAAW,EAAE,KAAKP,KAAL,CAAWC,WADI;AAE5BO,QAAAA,YAAY,EAAE,KAAKR,KAAL,CAAWC;AAFG,OAA9B;AAID;AACF;;AAEDL,EAAAA,0BAA0B,CAACe,SAAD,EAAY;AACpCA,IAAAA,SAAS,CAACC,QAAV,GAAqB,IAArB;AACAD,IAAAA,SAAS,CAAClC,KAAV,GAAkB,IAAIoC,YAAJ,CAAiB,CAAjB,CAAlB;AACA;AACD;;AA/D2D;;gBAAzChC,iB,kBACGP,Y;;gBADHO,iB,mBAEI,mB","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {LayerExtension} from '@deck.gl/core';\nimport shaderModule from './shader-module';\n\nimport type {Layer, LayerContext, Accessor} from '@deck.gl/core';\n\nconst defaultProps = {\n  getBrushingTarget: {type: 'accessor', value: [0, 0]},\n\n  brushingTarget: 'source',\n  brushingEnabled: true,\n  brushingRadius: 10000\n};\n\nexport type BrushingExtensionProps<DataT = any> = {\n  /**\n   * Called to retrieve an arbitrary position for each object that it will be filtered by.\n   * Only effective if `brushingTarget` is set to `custom`.\n   */\n  getBrushingTarget?: Accessor<DataT, [number, number]>;\n  /**\n   * Enable/disable brushing. If brushing is disabled, all objects are rendered.\n   * @default true\n   */\n  brushingEnabled?: boolean;\n  /**\n   * The position used to filter each object by.\n   */\n  brushingTarget?: 'source' | 'target' | 'source_target' | 'custom';\n  /** The brushing radius centered at the pointer, in meters. If a data object is within this circle, it is rendered; otherwise it is hidden.\n   * @default 10000\n   */\n  brushingRadius?: number;\n};\n\n/** Adds GPU-based data brushing functionalities to layers. It allows the layer to show/hide objects based on the current pointer position. */\nexport default class BrushingExtension extends LayerExtension {\n  static defaultProps = defaultProps;\n  static extensionName = 'BrushingExtension';\n\n  getShaders(): any {\n    return {\n      modules: [shaderModule]\n    };\n  }\n\n  initializeState(this: Layer<BrushingExtensionProps>, context: LayerContext, extension: this) {\n    const attributeManager = this.getAttributeManager();\n    if (attributeManager) {\n      attributeManager.add({\n        brushingTargets: {\n          size: 2,\n          accessor: 'getBrushingTarget',\n          // Hack: extension's defaultProps is not merged with the layer's defaultProps,\n          // So we can't use the standard accessor when the prop is undefined\n          // TODO - move to an option\n          // eslint-disable-next-line @typescript-eslint/unbound-method\n          update: this.props.getBrushingTarget ? undefined : extension.useConstantTargetPositions,\n          shaderAttributes: {\n            brushingTargets: {\n              divisor: 0\n            },\n            instanceBrushingTargets: {\n              divisor: 1\n            }\n          }\n        }\n      });\n    }\n\n    // Trigger redraw when mouse moves\n    // TODO - expose this in a better way\n    this.state.onMouseMove = () => {\n      this.getCurrentLayer()?.setNeedsRedraw();\n    };\n    if (context.deck) {\n      // @ts-expect-error (2446) accessing protected property\n      context.deck.eventManager.on({\n        pointermove: this.state.onMouseMove,\n        pointerleave: this.state.onMouseMove\n      });\n    }\n  }\n\n  finalizeState(this: Layer<BrushingExtensionProps>, context: LayerContext, extension: this) {\n    // Remove event listeners\n    if (context.deck) {\n      // @ts-expect-error (2446) accessing protected property\n      context.deck.eventManager.off({\n        pointermove: this.state.onMouseMove,\n        pointerleave: this.state.onMouseMove\n      });\n    }\n  }\n\n  useConstantTargetPositions(attribute) {\n    attribute.constant = true;\n    attribute.value = new Float32Array(2);\n    return;\n  }\n}\n"],"file":"brushing.js"}