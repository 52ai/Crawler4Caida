{"version":3,"sources":["../../../src/data-filter/aggregator.ts"],"names":["AGGREGATE_VS","AGGREGATE_FS","supportsFloatTarget","gl","Boolean","getExtension","getFramebuffer","useFloatTarget","Framebuffer","width","height","attachments","Texture2D","format","type","mipmaps","depth","getModel","shaderOptions","defines","NON_INSTANCED_MODEL","FLOAT_TARGET","Model","id","vertexCount","isInstanced","drawMode","vs","fs","parameters","blend","blendFunc","blendEquation","depthTest"],"mappings":";;;;;;;;;;;;;;AAAA;;;;;;AAGA,IAAMA,YAAY,89BAAlB;AAiCA,IAAMC,YAAY,wMAAlB;;AAcO,SAASC,mBAAT,CAA6BC,EAA7B,EAAiE;AAEtE,SAAOC,OAAO,CACZD,EAAE,CAACE,YAAH,CAAgB,iBAAhB,MAEGF,EAAE,CAACE,YAAH,CAAgB,wBAAhB,KAECF,EAAE,CAACE,YAAH,CAAgB,0BAAhB,CAJJ,CADY,CAAd;AAOD;;AAGM,SAASC,cAAT,CAAwBH,EAAxB,EAAmDI,cAAnD,EAAyF;AAC9F,MAAIA,cAAJ,EAAoB;AAClB,WAAO,IAAIC,iBAAJ,CAAgBL,EAAhB,EAAoB;AACzBM,MAAAA,KAAK,EAAE,CADkB;AAEzBC,MAAAA,MAAM,EAAE,CAFiB;AAGzBC,MAAAA,WAAW,2CACe,IAAIC,eAAJ,CAAcT,EAAd,EAAkB;AACxCU,QAAAA,MAAM,EAAE,oBAASV,EAAT,gBADgC;AAExCW,QAAAA,IAAI,MAFoC;AAGxCC,QAAAA,OAAO,EAAE;AAH+B,OAAlB,CADf;AAHc,KAApB,CAAP;AAWD;;AACD,SAAO,IAAIP,iBAAJ,CAAgBL,EAAhB,EAAoB;AACzBM,IAAAA,KAAK,EAAE,GADkB;AAEzBC,IAAAA,MAAM,EAAE,EAFiB;AAGzBM,IAAAA,KAAK,EAAE;AAHkB,GAApB,CAAP;AAKD;;AAGM,SAASC,QAAT,CACLd,EADK,EAELe,aAFK,EAGLX,cAHK,EAIE;AACPW,EAAAA,aAAa,CAACC,OAAd,CAAsBC,mBAAtB,GAA4C,CAA5C;;AACA,MAAIb,cAAJ,EAAoB;AAClBW,IAAAA,aAAa,CAACC,OAAd,CAAsBE,YAAtB,GAAqC,CAArC;AACD;;AAED,SAAO,IAAIC,WAAJ,CAAUnB,EAAV;AACLoB,IAAAA,EAAE,EAAE,+BADC;AAELC,IAAAA,WAAW,EAAE,CAFR;AAGLC,IAAAA,WAAW,EAAE,KAHR;AAILC,IAAAA,QAAQ,GAJH;AAKLC,IAAAA,EAAE,EAAE3B,YALC;AAML4B,IAAAA,EAAE,EAAE3B;AANC,KAOFiB,aAPE,EAAP;AASD;;AAEM,IAAMW,UAAU,GAAG;AACxBC,EAAAA,KAAK,EAAE,IADiB;AAExBC,EAAAA,SAAS,EAAE,YAFa;AAGxBC,EAAAA,aAAa,EAAE,cAHS;AAIxBC,EAAAA,SAAS,EAAE;AAJa,CAAnB","sourcesContent":["import {Model, Texture2D, Framebuffer, isWebGL2} from '@luma.gl/core';\nimport GL from '@luma.gl/constants';\n\nconst AGGREGATE_VS = `\\\n#define SHADER_NAME data-filter-vertex-shader\n\n#ifdef FLOAT_TARGET\n  attribute float filterIndices;\n  attribute float filterPrevIndices;\n#else\n  attribute vec2 filterIndices;\n  attribute vec2 filterPrevIndices;\n#endif\n\nvarying vec4 vColor;\nconst float component = 1.0 / 255.0;\n\nvoid main() {\n  #ifdef FLOAT_TARGET\n    dataFilter_value *= float(filterIndices != filterPrevIndices);\n    gl_Position = vec4(0.0, 0.0, 0.0, 1.0);\n    vColor = vec4(0.0, 0.0, 0.0, 1.0);\n  #else\n    // Float texture is not supported: pack result into 4 channels x 256 px x 64px\n    dataFilter_value *= float(filterIndices.x != filterPrevIndices.x);\n    float col = filterIndices.x;\n    float row = filterIndices.y * 4.0;\n    float channel = floor(row);\n    row = fract(row);\n    vColor = component * vec4(bvec4(channel == 0.0, channel == 1.0, channel == 2.0, channel == 3.0));\n    gl_Position = vec4(col * 2.0 - 1.0, row * 2.0 - 1.0, 0.0, 1.0);\n  #endif\n  gl_PointSize = 1.0;\n}\n`;\n\nconst AGGREGATE_FS = `\\\n#define SHADER_NAME data-filter-fragment-shader\nprecision highp float;\n\nvarying vec4 vColor;\n\nvoid main() {\n  if (dataFilter_value < 0.5) {\n    discard;\n  }\n  gl_FragColor = vColor;\n}\n`;\n\nexport function supportsFloatTarget(gl: WebGLRenderingContext): boolean {\n  // https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/WebGL_best_practices#Support_for_float_textures_doesnt_mean_you_can_render_into_them!\n  return Boolean(\n    gl.getExtension('EXT_float_blend') &&\n      // WebGL 2\n      (gl.getExtension('EXT_color_buffer_float') ||\n        // WebGL 1\n        gl.getExtension('WEBGL_color_buffer_float'))\n  );\n}\n\n// A 1x1 framebuffer object that encodes the total count of filtered items\nexport function getFramebuffer(gl: WebGLRenderingContext, useFloatTarget: boolean): Framebuffer {\n  if (useFloatTarget) {\n    return new Framebuffer(gl, {\n      width: 1,\n      height: 1,\n      attachments: {\n        [GL.COLOR_ATTACHMENT0]: new Texture2D(gl, {\n          format: isWebGL2(gl) ? GL.RGBA32F : GL.RGBA,\n          type: GL.FLOAT,\n          mipmaps: false\n        })\n      }\n    });\n  }\n  return new Framebuffer(gl, {\n    width: 256,\n    height: 64,\n    depth: false\n  });\n}\n\n// Increments the counter based on dataFilter_value\nexport function getModel(\n  gl: WebGLRenderingContext,\n  shaderOptions: any,\n  useFloatTarget: boolean\n): Model {\n  shaderOptions.defines.NON_INSTANCED_MODEL = 1;\n  if (useFloatTarget) {\n    shaderOptions.defines.FLOAT_TARGET = 1;\n  }\n\n  return new Model(gl, {\n    id: 'data-filter-aggregation-model',\n    vertexCount: 1,\n    isInstanced: false,\n    drawMode: GL.POINTS,\n    vs: AGGREGATE_VS,\n    fs: AGGREGATE_FS,\n    ...shaderOptions\n  });\n}\n\nexport const parameters = {\n  blend: true,\n  blendFunc: [GL.ONE, GL.ONE, GL.ONE, GL.ONE],\n  blendEquation: [GL.FUNC_ADD, GL.FUNC_ADD],\n  depthTest: false\n};\n"],"file":"aggregator.js"}