{"version":3,"sources":["../../../src/data-filter/shader-module.ts"],"names":["vs","fs","getUniforms","opts","filterRange","filterEnabled","filterTransformSize","filterTransformColor","filterSoftRange","Number","isFinite","filter_min","filter_softMin","filter_softMax","filter_max","map","r","filter_enabled","filter_useSoftMargin","Boolean","filter_transformSize","filter_transformColor","getUniforms64","uniforms","min64High","Math","fround","filter_min64High","max64High","filter_max64High","x","i","inject","shaderModule","name","shaderModule64"],"mappings":"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","sourcesContent":["import {_ShaderModule as ShaderModule} from '@deck.gl/core/typed';\n\nimport type {DataFilterExtensionProps} from './data-filter';\n\n/*\n * data filter shader module\n */\nconst vs = `\nuniform DATAFILTER_TYPE filter_min;\nuniform DATAFILTER_TYPE filter_softMin;\nuniform DATAFILTER_TYPE filter_softMax;\nuniform DATAFILTER_TYPE filter_max;\nuniform bool filter_useSoftMargin;\nuniform bool filter_enabled;\nuniform bool filter_transformSize;\n\n#ifdef NON_INSTANCED_MODEL\n  #define DATAFILTER_ATTRIB filterValues\n  #define DATAFILTER_ATTRIB_64LOW filterValues64Low\n#else\n  #define DATAFILTER_ATTRIB instanceFilterValues\n  #define DATAFILTER_ATTRIB_64LOW instanceFilterValues64Low\n#endif\n\nattribute DATAFILTER_TYPE DATAFILTER_ATTRIB;\n#ifdef DATAFILTER_DOUBLE\n  attribute DATAFILTER_TYPE DATAFILTER_ATTRIB_64LOW;\n\n  uniform DATAFILTER_TYPE filter_min64High;\n  uniform DATAFILTER_TYPE filter_max64High;\n#endif\n\nvarying float dataFilter_value;\n\nfloat dataFilter_reduceValue(float value) {\n  return value;\n}\nfloat dataFilter_reduceValue(vec2 value) {\n  return min(value.x, value.y);\n}\nfloat dataFilter_reduceValue(vec3 value) {\n  return min(min(value.x, value.y), value.z);\n}\nfloat dataFilter_reduceValue(vec4 value) {\n  return min(min(value.x, value.y), min(value.z, value.w));\n}\nvoid dataFilter_setValue(DATAFILTER_TYPE valueFromMin, DATAFILTER_TYPE valueFromMax) {\n  if (filter_enabled) {\n    if (filter_useSoftMargin) {\n      dataFilter_value = dataFilter_reduceValue(\n        smoothstep(filter_min, filter_softMin, valueFromMin) *\n        (1.0 - smoothstep(filter_softMax, filter_max, valueFromMax))\n      );\n    } else {\n      dataFilter_value = dataFilter_reduceValue(\n        step(filter_min, valueFromMin) * step(valueFromMax, filter_max)\n      );\n    }\n  } else {\n    dataFilter_value = 1.0;\n  }\n}\n`;\n\nconst fs = `\nuniform bool filter_transformColor;\nvarying float dataFilter_value;\n`;\n\ntype DataFilterModuleSettings = {\n  extensions: any[]; // used to detect if layer props are present\n} & DataFilterExtensionProps;\n\n/* eslint-disable camelcase */\nfunction getUniforms(opts?: DataFilterModuleSettings | {}): Record<string, any> {\n  if (!opts || !('extensions' in opts)) {\n    return {};\n  }\n  const {\n    filterRange = [-1, 1],\n    filterEnabled = true,\n    filterTransformSize = true,\n    filterTransformColor = true\n  } = opts;\n  const filterSoftRange = opts.filterSoftRange || filterRange;\n\n  return {\n    ...(Number.isFinite(filterRange[0])\n      ? {\n          filter_min: filterRange[0],\n          filter_softMin: filterSoftRange[0],\n          filter_softMax: filterSoftRange[1],\n          filter_max: filterRange[1]\n        }\n      : {\n          filter_min: filterRange.map(r => r[0]),\n          filter_softMin: filterSoftRange.map(r => r[0]),\n          filter_softMax: filterSoftRange.map(r => r[1]),\n          filter_max: filterRange.map(r => r[1])\n        }),\n    filter_enabled: filterEnabled,\n    filter_useSoftMargin: Boolean(opts.filterSoftRange),\n    filter_transformSize: filterEnabled && filterTransformSize,\n    filter_transformColor: filterEnabled && filterTransformColor\n  };\n}\n\nfunction getUniforms64(opts?: DataFilterModuleSettings | {}): Record<string, any> {\n  if (!opts || !('extensions' in opts)) {\n    return {};\n  }\n  const uniforms = getUniforms(opts);\n  if (Number.isFinite(uniforms.filter_min)) {\n    const min64High = Math.fround(uniforms.filter_min);\n    uniforms.filter_min -= min64High;\n    uniforms.filter_softMin -= min64High;\n    uniforms.filter_min64High = min64High;\n\n    const max64High = Math.fround(uniforms.filter_max);\n    uniforms.filter_max -= max64High;\n    uniforms.filter_softMax -= max64High;\n    uniforms.filter_max64High = max64High;\n  } else {\n    const min64High = uniforms.filter_min.map(Math.fround);\n    uniforms.filter_min = uniforms.filter_min.map((x, i) => x - min64High[i]);\n    uniforms.filter_softMin = uniforms.filter_softMin.map((x, i) => x - min64High[i]);\n    uniforms.filter_min64High = min64High;\n\n    const max64High = uniforms.filter_max.map(Math.fround);\n    uniforms.filter_max = uniforms.filter_max.map((x, i) => x - max64High[i]);\n    uniforms.filter_softMax = uniforms.filter_softMax.map((x, i) => x - max64High[i]);\n    uniforms.filter_max64High = max64High;\n  }\n  return uniforms;\n}\n\nconst inject = {\n  'vs:#main-start': `\n    #ifdef DATAFILTER_DOUBLE\n      dataFilter_setValue(\n        DATAFILTER_ATTRIB - filter_min64High + DATAFILTER_ATTRIB_64LOW,\n        DATAFILTER_ATTRIB - filter_max64High + DATAFILTER_ATTRIB_64LOW\n      );\n    #else\n      dataFilter_setValue(DATAFILTER_ATTRIB, DATAFILTER_ATTRIB);\n    #endif\n  `,\n\n  'vs:DECKGL_FILTER_SIZE': `\n    if (filter_transformSize) {\n      size = size * dataFilter_value;\n    }\n  `,\n\n  'fs:DECKGL_FILTER_COLOR': `\n    if (dataFilter_value == 0.0) discard;\n    if (filter_transformColor) {\n      color.a *= dataFilter_value;\n    }\n  `\n};\n\nexport const shaderModule: ShaderModule<DataFilterModuleSettings> = {\n  name: 'data-filter',\n  vs,\n  fs,\n  inject,\n  getUniforms\n};\n\nexport const shaderModule64: ShaderModule<DataFilterModuleSettings> = {\n  name: 'data-filter-fp64',\n  vs,\n  fs,\n  inject,\n  getUniforms: getUniforms64\n};\n"],"file":"shader-module.js"}