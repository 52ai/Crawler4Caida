{"version":3,"sources":["../../../src/heatmap-layer/triangle-layer.ts"],"names":["TriangleLayer","vs","fs","modules","project32","gl","attributeManager","getAttributeManager","add","positions","size","noAlloc","texCoords","setState","model","_getModel","vertexCount","props","Model","getShaders","id","geometry","Geometry","drawMode","uniforms","state","texture","maxTexture","colorTexture","intensity","threshold","aggregationMode","colorDomain","setUniforms","draw","Layer"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAqBA;;AACA;;AACA;;AACA;;;;;;;;;;IAaqBA,a;;;;;;;;;;;;WAGnB,sBAAa;AACX,aAAO;AAACC,QAAAA,EAAE,EAAFA,4BAAD;AAAKC,QAAAA,EAAE,EAAFA,8BAAL;AAASC,QAAAA,OAAO,EAAE,CAACC,gBAAD;AAAlB,OAAP;AACD;;;WAED,+BAA0C;AAAA,UAAzBC,EAAyB,QAAzBA,EAAyB;AACxC,UAAMC,gBAAgB,GAAG,KAAKC,mBAAL,EAAzB;AACAD,MAAAA,gBAAgB,CAACE,GAAjB,CAAqB;AACnBC,QAAAA,SAAS,EAAE;AAACC,UAAAA,IAAI,EAAE,CAAP;AAAUC,UAAAA,OAAO,EAAE;AAAnB,SADQ;AAEnBC,QAAAA,SAAS,EAAE;AAACF,UAAAA,IAAI,EAAE,CAAP;AAAUC,UAAAA,OAAO,EAAE;AAAnB;AAFQ,OAArB;AAIA,WAAKE,QAAL,CAAc;AACZC,QAAAA,KAAK,EAAE,KAAKC,SAAL,CAAeV,EAAf;AADK,OAAd;AAGD;;;WAED,mBAAUA,EAAV,EAA4C;AAC1C,UAAOW,WAAP,GAAsB,KAAKC,KAA3B,CAAOD,WAAP;AAEA,aAAO,IAAIE,WAAJ,CAAUb,EAAV,kCACF,KAAKc,UAAL,EADE;AAELC,QAAAA,EAAE,EAAE,KAAKH,KAAL,CAAWG,EAFV;AAGLC,QAAAA,QAAQ,EAAE,IAAIC,cAAJ,CAAa;AACrBC,UAAAA,QAAQ,GADa;AAErBP,UAAAA,WAAW,EAAXA;AAFqB,SAAb;AAHL,SAAP;AAQD;;;WAED,qBAAuB;AAAA,UAAjBQ,QAAiB,SAAjBA,QAAiB;AACrB,UAAOV,KAAP,GAAgB,KAAKW,KAArB,CAAOX,KAAP;AAEA,wBACE,KAAKG,KADP;AAAA,UAAOS,OAAP,eAAOA,OAAP;AAAA,UAAgBC,UAAhB,eAAgBA,UAAhB;AAAA,UAA4BC,YAA5B,eAA4BA,YAA5B;AAAA,UAA0CC,SAA1C,eAA0CA,SAA1C;AAAA,UAAqDC,SAArD,eAAqDA,SAArD;AAAA,UAAgEC,eAAhE,eAAgEA,eAAhE;AAAA,UAAiFC,WAAjF,eAAiFA,WAAjF;AAGAlB,MAAAA,KAAK,CACFmB,WADH,iCAEOT,QAFP;AAGIE,QAAAA,OAAO,EAAPA,OAHJ;AAIIC,QAAAA,UAAU,EAAVA,UAJJ;AAKIC,QAAAA,YAAY,EAAZA,YALJ;AAMIC,QAAAA,SAAS,EAATA,SANJ;AAOIC,QAAAA,SAAS,EAATA,SAPJ;AAQIC,QAAAA,eAAe,EAAfA,eARJ;AASIC,QAAAA,WAAW,EAAXA;AATJ,UAWGE,IAXH;AAYD;;;EAjDwCC,Y;;;8BAAtBnC,a,eACA,e","sourcesContent":["// Copyright (c) 2015 - 2019 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry, Texture2D} from '@luma.gl/core';\nimport {Layer, LayerContext, project32} from '@deck.gl/core';\nimport vs from './triangle-layer-vertex.glsl';\nimport fs from './triangle-layer-fragment.glsl';\n\ntype _TriangleLayerProps = {\n  colorDomain: number[];\n  aggregationMode: string;\n  threshold: number;\n  intensity: number;\n  vertexCount: number;\n  colorTexture: Texture2D;\n  maxTexture: Texture2D;\n  texture: Texture2D;\n};\n\nexport default class TriangleLayer extends Layer<_TriangleLayerProps> {\n  static layerName = 'TriangleLayer';\n\n  getShaders() {\n    return {vs, fs, modules: [project32]};\n  }\n\n  initializeState({gl}: LayerContext): void {\n    const attributeManager = this.getAttributeManager()!;\n    attributeManager.add({\n      positions: {size: 3, noAlloc: true},\n      texCoords: {size: 2, noAlloc: true}\n    });\n    this.setState({\n      model: this._getModel(gl)\n    });\n  }\n\n  _getModel(gl: WebGLRenderingContext): Model {\n    const {vertexCount} = this.props;\n\n    return new Model(gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: GL.TRIANGLE_FAN,\n        vertexCount\n      })\n    });\n  }\n\n  draw({uniforms}): void {\n    const {model} = this.state;\n\n    const {texture, maxTexture, colorTexture, intensity, threshold, aggregationMode, colorDomain} =\n      this.props;\n\n    model\n      .setUniforms({\n        ...uniforms,\n        texture,\n        maxTexture,\n        colorTexture,\n        intensity,\n        threshold,\n        aggregationMode,\n        colorDomain\n      })\n      .draw();\n  }\n}\n"],"file":"triangle-layer.js"}