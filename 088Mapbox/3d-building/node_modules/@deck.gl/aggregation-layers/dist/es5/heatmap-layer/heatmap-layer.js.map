{"version":3,"sources":["../../../src/heatmap-layer/heatmap-layer.ts"],"names":["RESOLUTION","TEXTURE_OPTIONS","mipmaps","parameters","dataFormat","DEFAULT_COLOR_DOMAIN","AGGREGATION_MODE","SUM","MEAN","defaultProps","getPosition","type","value","x","position","getWeight","intensity","min","radiusPixels","max","colorRange","defaultColorRange","threshold","colorDomain","optional","aggregation","weightsTextureSize","debounceTimeout","REQUIRED_FEATURES","FEATURES","BLEND_EQUATION_MINMAX","TEXTURE_FLOAT","FLOAT_TARGET_FEATURES","COLOR_ATTACHMENT_RGBA32F","FLOAT_BLEND","DIMENSIONS","data","props","HeatmapLayer","gl","context","setState","supported","log","error","id","_setupTextureParams","_setupAttributes","_setupResources","changeFlags","somethingChanged","opts","state","_updateHeatmapState","oldProps","_getChangeFlags","dataChanged","viewportChanged","boundsChanged","_updateBounds","_updateTextureRenderingBounds","clearTimeout","updateTimer","isWeightMapDirty","viewportZoomChanged","_debouncedUpdateWeightmap","_updateColorTexture","_updateWeightmap","zoom","viewport","weightsTexture","triPositionBuffer","triTexCoordBuffer","maxWeightsTexture","colorTexture","updateTriggers","TriangleLayerClass","getSubLayerClass","TriangleLayer","getSubLayerProps","coordinateSystem","COORDINATE_SYSTEM","DEFAULT","attributes","positions","texCoords","vertexCount","maxTexture","aggregationMode","texture","weightsTransform","maxWeightTransform","delete","AttributeManager","stats","dimensions","isAttributeChanged","isAggregationDirty","compareAll","dimension","textureSize","format","Texture2D","width","height","attributeManager","getAttributeManager","add","size","accessor","weights","positionAttributeName","Math","floatTargetSupport","weightsScale","warn","vs","vsMax","_fs","fsMax","weightsVs","weightsFs","shaders","Transform","elementCount","_targetTexture","_targetTextureVarying","_createTextures","weightsTransformShaders","getShaders","_createWeightsTransform","maxWeightsTransformShaders","_sourceTextures","inTexture","Buffer","byteLength","shaderOptions","run","blend","depthTest","blendFunc","blendEquation","forceUpdate","viewportCorners","unproject","map","p","fround","visibleWorldBounds","newState","worldBounds","scaledCommonBounds","_worldToCommonBounds","_commonToWorldBounds","LNGLAT","normalizedCommonBounds","subData","textureBounds","projectPosition","colors","Uint8Array","setImageData","length","commonBounds","useLayerCoordinateSystem","metersPerPixel","distanceScales","metersPerUnit","uniforms","textureWidth","update","getNumInstances","clearColor","clearRenderTarget","getAttributes","moduleSettings","getModuleSettings","_updateMaxWeightValue","setParameters","fromTimer","setTimeout","bind","minLong","minLat","maxLong","maxLat","offsetMode","LNGLAT_OFFSETS","METER_OFFSETS","offsetOriginCommon","coordinateOrigin","scale","bottomLeftCommon","topRightCommon","xMin","yMin","xMax","yMax","bottomLeftWorld","unprojectPosition","topRightWorld","slice","concat","AggregationLayer"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2019 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* global setTimeout clearTimeout */\nimport GL from '@luma.gl/constants';\nimport {\n  getBounds,\n  boundsContain,\n  packVertices,\n  scaleToAspectRatio,\n  getTextureCoordinates,\n  getTextureParams\n} from './heatmap-layer-utils';\nimport {\n  Buffer,\n  Texture2D,\n  Transform,\n  getParameters,\n  withParameters,\n  FEATURES,\n  hasFeatures\n} from '@luma.gl/core';\nimport {\n  Accessor,\n  AccessorFunction,\n  AttributeManager,\n  ChangeFlags,\n  Color,\n  COORDINATE_SYSTEM,\n  Layer,\n  LayerContext,\n  LayersList,\n  log,\n  Position,\n  UpdateParameters,\n  DefaultProps\n} from '@deck.gl/core';\nimport TriangleLayer from './triangle-layer';\nimport AggregationLayer, {AggregationLayerProps} from '../aggregation-layer';\nimport {defaultColorRange, colorRangeToFlatArray} from '../utils/color-utils';\nimport weightsVs from './weights-vs.glsl';\nimport weightsFs from './weights-fs.glsl';\nimport vsMax from './max-vs.glsl';\nimport fsMax from './max-fs.glsl';\n\nconst RESOLUTION = 2; // (number of common space pixels) / (number texels)\nconst TEXTURE_OPTIONS = {\n  mipmaps: false,\n  parameters: {\n    [GL.TEXTURE_MAG_FILTER]: GL.LINEAR,\n    [GL.TEXTURE_MIN_FILTER]: GL.LINEAR,\n    [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n    [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE\n  },\n  dataFormat: GL.RGBA\n};\nconst DEFAULT_COLOR_DOMAIN = [0, 0];\nconst AGGREGATION_MODE = {\n  SUM: 0,\n  MEAN: 1\n};\n\nconst defaultProps: DefaultProps<HeatmapLayerProps> = {\n  getPosition: {type: 'accessor', value: x => x.position},\n  getWeight: {type: 'accessor', value: 1},\n  intensity: {type: 'number', min: 0, value: 1},\n  radiusPixels: {type: 'number', min: 1, max: 100, value: 50},\n  colorRange: defaultColorRange,\n  threshold: {type: 'number', min: 0, max: 1, value: 0.05},\n  colorDomain: {type: 'array', value: null, optional: true},\n  // 'SUM' or 'MEAN'\n  aggregation: 'SUM',\n  weightsTextureSize: {type: 'number', min: 128, max: 2048, value: 2048},\n  debounceTimeout: {type: 'number', min: 0, max: 1000, value: 500}\n};\n\nconst REQUIRED_FEATURES = [\n  FEATURES.BLEND_EQUATION_MINMAX, // max weight calculation\n  FEATURES.TEXTURE_FLOAT // weight-map as texture\n];\n\nconst FLOAT_TARGET_FEATURES = [\n  FEATURES.COLOR_ATTACHMENT_RGBA32F, // ability to render to float texture\n  FEATURES.FLOAT_BLEND // ability to blend when rendering to float texture\n];\n\nconst DIMENSIONS = {\n  data: {\n    props: ['radiusPixels']\n  }\n};\n\nexport type HeatmapLayerProps<DataT = any> = _HeatmapLayerProps<DataT> &\n  AggregationLayerProps<DataT>;\n\ntype _HeatmapLayerProps<DataT> = {\n  /**\n   * Radius of the circle in pixels, to which the weight of an object is distributed.\n   *\n   * @default 30\n   */\n  radiusPixels?: number;\n\n  /**\n   * Specified as an array of colors [color1, color2, ...].\n   *\n   * @default `6-class YlOrRd` - [colorbrewer](http://colorbrewer2.org/#type=sequential&scheme=YlOrRd&n=6)\n   */\n  colorRange?: Color[];\n\n  /**\n   * Value that is multiplied with the total weight at a pixel to obtain the final weight.\n   *\n   * @default 1\n   */\n  intensity?: number;\n\n  /**\n   * Ratio of the fading weight to the max weight, between `0` and `1`.\n   *\n   * For example, `0.1` affects all pixels with weight under 10% of the max.\n   *\n   * Ignored when `colorDomain` is specified.\n   * @default 0.05\n   */\n  threshold?: number;\n\n  /**\n   * Controls how weight values are mapped to the `colorRange`, as an array of two numbers [`minValue`, `maxValue`].\n   *\n   * @default null\n   */\n  colorDomain?: [number, number] | null;\n\n  /**\n   * Defines the type of aggregation operation\n   *\n   * V valid values are 'SUM', 'MEAN'.\n   *\n   * @default 'SUM'\n   */\n  aggregation?: 'SUM' | 'MEAN';\n\n  /**\n   * Specifies the size of weight texture.\n   * @default 2048\n   */\n  weightsTextureSize?: number;\n\n  /**\n   * Interval in milliseconds during which changes to the viewport don't trigger aggregation.\n   *\n   * @default 500\n   */\n  debounceTimeout?: number;\n\n  /**\n   * Method called to retrieve the position of each object.\n   *\n   * @default d => d.position\n   */\n  getPosition?: AccessorFunction<DataT, Position>;\n\n  /**\n   * The weight of each object.\n   *\n   * @default 1\n   */\n  getWeight?: Accessor<DataT, number>;\n};\n\n/** Visualizes the spatial distribution of data. */\nexport default class HeatmapLayer<DataT = any, ExtraPropsT = {}> extends AggregationLayer<\n  ExtraPropsT & Required<_HeatmapLayerProps<DataT>>\n> {\n  static layerName = 'HeatmapLayer';\n  static defaultProps = defaultProps;\n\n  state!: AggregationLayer['state'] & {\n    supported: boolean;\n    colorDomain?: number[];\n    isWeightMapDirty?: boolean;\n    weightsTexture?: Texture2D;\n    zoom?: number;\n    worldBounds?: number[];\n    normalizedCommonBounds?: number[];\n    updateTimer?: any;\n    triPositionBuffer?: Buffer;\n    triTexCoordBuffer?: Buffer;\n  };\n\n  initializeState() {\n    const {gl} = this.context;\n    if (!hasFeatures(gl, REQUIRED_FEATURES)) {\n      this.setState({supported: false});\n      log.error(`HeatmapLayer: ${this.id} is not supported on this browser`)();\n      return;\n    }\n    super.initializeAggregationLayer(DIMENSIONS);\n    this.setState({supported: true, colorDomain: DEFAULT_COLOR_DOMAIN});\n    this._setupTextureParams();\n    this._setupAttributes();\n    this._setupResources();\n  }\n\n  shouldUpdateState({changeFlags}: UpdateParameters<this>) {\n    // Need to be updated when viewport changes\n    return changeFlags.somethingChanged;\n  }\n\n  /* eslint-disable max-statements,complexity */\n  updateState(opts: UpdateParameters<this>) {\n    if (!this.state.supported) {\n      return;\n    }\n    super.updateState(opts);\n    this._updateHeatmapState(opts);\n  }\n\n  _updateHeatmapState(opts: UpdateParameters<this>) {\n    const {props, oldProps} = opts;\n    const changeFlags = this._getChangeFlags(opts);\n\n    if (changeFlags.dataChanged || changeFlags.viewportChanged) {\n      // if data is changed, do not debounce and immediately update the weight map\n      changeFlags.boundsChanged = this._updateBounds(changeFlags.dataChanged);\n      this._updateTextureRenderingBounds();\n    }\n\n    if (changeFlags.dataChanged || changeFlags.boundsChanged) {\n      // Update weight map immediately\n      clearTimeout(this.state.updateTimer);\n      this.setState({isWeightMapDirty: true});\n    } else if (changeFlags.viewportZoomChanged) {\n      // Update weight map when zoom stops\n      this._debouncedUpdateWeightmap();\n    }\n\n    if (props.colorRange !== oldProps.colorRange) {\n      this._updateColorTexture(opts);\n    }\n\n    if (this.state.isWeightMapDirty) {\n      this._updateWeightmap();\n    }\n\n    this.setState({zoom: opts.context.viewport.zoom});\n  }\n\n  renderLayers(): LayersList | Layer {\n    if (!this.state.supported) {\n      return [];\n    }\n    const {\n      weightsTexture,\n      triPositionBuffer,\n      triTexCoordBuffer,\n      maxWeightsTexture,\n      colorTexture,\n      colorDomain\n    } = this.state;\n    const {updateTriggers, intensity, threshold, aggregation} = this.props;\n\n    const TriangleLayerClass = this.getSubLayerClass('triangle', TriangleLayer);\n\n    return new TriangleLayerClass(\n      this.getSubLayerProps({\n        id: 'triangle-layer',\n        updateTriggers\n      }),\n      {\n        // position buffer is filled with world coordinates generated from viewport.unproject\n        // i.e. LNGLAT if geospatial, CARTESIAN otherwise\n        coordinateSystem: COORDINATE_SYSTEM.DEFAULT,\n        data: {\n          attributes: {\n            positions: triPositionBuffer,\n            texCoords: triTexCoordBuffer\n          }\n        },\n        vertexCount: 4,\n        maxTexture: maxWeightsTexture,\n        colorTexture,\n        aggregationMode: AGGREGATION_MODE[aggregation] || 0,\n        texture: weightsTexture,\n        intensity,\n        threshold,\n        colorDomain\n      }\n    );\n  }\n\n  finalizeState(context: LayerContext) {\n    super.finalizeState(context);\n    const {\n      weightsTransform,\n      weightsTexture,\n      maxWeightTransform,\n      maxWeightsTexture,\n      triPositionBuffer,\n      triTexCoordBuffer,\n      colorTexture,\n      updateTimer\n    } = this.state;\n    weightsTransform?.delete();\n    weightsTexture?.delete();\n    maxWeightTransform?.delete();\n    maxWeightsTexture?.delete();\n    triPositionBuffer?.delete();\n    triTexCoordBuffer?.delete();\n    colorTexture?.delete();\n    if (updateTimer) {\n      clearTimeout(updateTimer);\n    }\n  }\n\n  // PRIVATE\n\n  // override Composite layer private method to create AttributeManager instance\n  _getAttributeManager() {\n    return new AttributeManager(this.context.gl, {\n      id: this.props.id,\n      stats: this.context.stats\n    });\n  }\n\n  _getChangeFlags(opts: UpdateParameters<this>) {\n    const changeFlags: Partial<ChangeFlags> & {\n      boundsChanged?: boolean;\n      viewportZoomChanged?: boolean;\n    } = {};\n    const {dimensions} = this.state;\n    changeFlags.dataChanged =\n      this.isAttributeChanged() || // if any attribute is changed\n      this.isAggregationDirty(opts, {\n        compareAll: true,\n        dimension: dimensions.data\n      });\n    changeFlags.viewportChanged = opts.changeFlags.viewportChanged;\n\n    const {zoom} = this.state;\n    if (!opts.context.viewport || opts.context.viewport.zoom !== zoom) {\n      changeFlags.viewportZoomChanged = true;\n    }\n\n    return changeFlags;\n  }\n\n  _createTextures() {\n    const {gl} = this.context;\n    const {textureSize, format, type} = this.state;\n\n    this.setState({\n      weightsTexture: new Texture2D(gl, {\n        width: textureSize,\n        height: textureSize,\n        format,\n        type,\n        ...TEXTURE_OPTIONS\n      }),\n      maxWeightsTexture: new Texture2D(gl, {format, type, ...TEXTURE_OPTIONS}) // 1 X 1 texture,\n    });\n  }\n\n  _setupAttributes() {\n    const attributeManager = this.getAttributeManager()!;\n    attributeManager.add({\n      positions: {size: 3, type: GL.DOUBLE, accessor: 'getPosition'},\n      weights: {size: 1, accessor: 'getWeight'}\n    });\n    this.setState({positionAttributeName: 'positions'});\n  }\n\n  _setupTextureParams() {\n    const {gl} = this.context;\n    const {weightsTextureSize} = this.props;\n\n    const textureSize = Math.min(weightsTextureSize, getParameters(gl, gl.MAX_TEXTURE_SIZE));\n    const floatTargetSupport = hasFeatures(gl, FLOAT_TARGET_FEATURES);\n    const {format, type} = getTextureParams({gl, floatTargetSupport});\n    const weightsScale = floatTargetSupport ? 1 : 1 / 255;\n    this.setState({textureSize, format, type, weightsScale});\n    if (!floatTargetSupport) {\n      log.warn(\n        `HeatmapLayer: ${this.id} rendering to float texture not supported, fallingback to low precession format`\n      )();\n    }\n  }\n\n  getShaders(type) {\n    return super.getShaders(\n      type === 'max-weights-transform'\n        ? {\n            vs: vsMax,\n            _fs: fsMax\n          }\n        : {\n            vs: weightsVs,\n            _fs: weightsFs\n          }\n    );\n  }\n\n  _createWeightsTransform(shaders = {}) {\n    const {gl} = this.context;\n    let {weightsTransform} = this.state;\n    const {weightsTexture} = this.state;\n    weightsTransform?.delete();\n\n    weightsTransform = new Transform(gl, {\n      id: `${this.id}-weights-transform`,\n      elementCount: 1,\n      _targetTexture: weightsTexture,\n      _targetTextureVarying: 'weightsTexture',\n      ...shaders\n    });\n    this.setState({weightsTransform});\n  }\n\n  _setupResources() {\n    const {gl} = this.context;\n    this._createTextures();\n    const {textureSize, weightsTexture, maxWeightsTexture} = this.state;\n\n    const weightsTransformShaders = this.getShaders('weights-transform');\n    this._createWeightsTransform(weightsTransformShaders);\n\n    const maxWeightsTransformShaders = this.getShaders('max-weights-transform');\n    const maxWeightTransform = new Transform(gl, {\n      id: `${this.id}-max-weights-transform`,\n      _sourceTextures: {\n        inTexture: weightsTexture\n      },\n      _targetTexture: maxWeightsTexture,\n      _targetTextureVarying: 'outTexture',\n      ...maxWeightsTransformShaders,\n      elementCount: textureSize * textureSize\n    });\n\n    this.setState({\n      weightsTexture,\n      maxWeightsTexture,\n      maxWeightTransform,\n      zoom: null,\n      triPositionBuffer: new Buffer(gl, {\n        byteLength: 48,\n        accessor: {size: 3}\n      }),\n      triTexCoordBuffer: new Buffer(gl, {\n        byteLength: 48,\n        accessor: {size: 2}\n      })\n    });\n  }\n\n  // overwrite super class method to update transform model\n  updateShaders(shaderOptions) {\n    // sahder params (modules, injects) changed, update model object\n    this._createWeightsTransform(shaderOptions);\n  }\n\n  _updateMaxWeightValue() {\n    const {maxWeightTransform} = this.state;\n    maxWeightTransform.run({\n      parameters: {\n        blend: true,\n        depthTest: false,\n        blendFunc: [GL.ONE, GL.ONE],\n        blendEquation: GL.MAX\n      }\n    });\n  }\n\n  // Computes world bounds area that needs to be processed for generate heatmap\n  _updateBounds(forceUpdate: any = false): boolean {\n    const {viewport} = this.context;\n\n    // Unproject all 4 corners of the current screen coordinates into world coordinates (lng/lat)\n    // Takes care of viewport has non zero bearing/pitch (i.e axis not aligned with world coordiante system)\n    const viewportCorners = [\n      viewport.unproject([0, 0]),\n      viewport.unproject([viewport.width, 0]),\n      viewport.unproject([viewport.width, viewport.height]),\n      viewport.unproject([0, viewport.height])\n    ].map(p => p.map(Math.fround));\n\n    // #1: get world bounds for current viewport extends\n    const visibleWorldBounds = getBounds(viewportCorners); // TODO: Change to visible bounds\n\n    const newState: Partial<HeatmapLayer['state']> = {visibleWorldBounds, viewportCorners};\n    let boundsChanged = false;\n\n    if (\n      forceUpdate ||\n      !this.state.worldBounds ||\n      !boundsContain(this.state.worldBounds, visibleWorldBounds)\n    ) {\n      // #2 : convert world bounds to common (Flat) bounds\n      // #3 : extend common bounds to match aspect ratio with viewport\n      const scaledCommonBounds = this._worldToCommonBounds(visibleWorldBounds);\n\n      // #4 :convert aligned common bounds to world bounds\n      const worldBounds = this._commonToWorldBounds(scaledCommonBounds);\n\n      // Clip webmercator projection limits\n      if (this.props.coordinateSystem === COORDINATE_SYSTEM.LNGLAT) {\n        worldBounds[1] = Math.max(worldBounds[1], -85.051129);\n        worldBounds[3] = Math.min(worldBounds[3], 85.051129);\n        worldBounds[0] = Math.max(worldBounds[0], -360);\n        worldBounds[2] = Math.min(worldBounds[2], 360);\n      }\n\n      // #5: now convert world bounds to common using Layer's coordiante system and origin\n      const normalizedCommonBounds = this._worldToCommonBounds(worldBounds);\n\n      newState.worldBounds = worldBounds;\n      newState.normalizedCommonBounds = normalizedCommonBounds;\n\n      boundsChanged = true;\n    }\n    this.setState(newState);\n    return boundsChanged;\n  }\n\n  _updateTextureRenderingBounds() {\n    // Just render visible portion of the texture\n    const {triPositionBuffer, triTexCoordBuffer, normalizedCommonBounds, viewportCorners} =\n      this.state;\n\n    const {viewport} = this.context;\n\n    triPositionBuffer.subData(packVertices(viewportCorners, 3));\n\n    const textureBounds = viewportCorners.map(p =>\n      getTextureCoordinates(viewport.projectPosition(p), normalizedCommonBounds!)\n    );\n    triTexCoordBuffer.subData(packVertices(textureBounds, 2));\n  }\n\n  _updateColorTexture(opts) {\n    const {colorRange} = opts.props;\n    let {colorTexture} = this.state;\n    const colors = colorRangeToFlatArray(colorRange, false, Uint8Array as any);\n\n    if (colorTexture) {\n      colorTexture.setImageData({\n        data: colors,\n        width: colorRange.length\n      });\n    } else {\n      colorTexture = new Texture2D(this.context.gl, {\n        data: colors,\n        width: colorRange.length,\n        height: 1,\n        ...TEXTURE_OPTIONS\n      });\n    }\n    this.setState({colorTexture});\n  }\n\n  _updateWeightmap() {\n    const {radiusPixels, colorDomain, aggregation} = this.props;\n    const {weightsTransform, worldBounds, textureSize, weightsTexture, weightsScale} = this.state;\n    this.state.isWeightMapDirty = false;\n\n    // convert world bounds to common using Layer's coordiante system and origin\n    const commonBounds = this._worldToCommonBounds(worldBounds, {\n      useLayerCoordinateSystem: true\n    });\n\n    if (colorDomain && aggregation === 'SUM') {\n      // scale color domain to weight per pixel\n      const {viewport} = this.context;\n      const metersPerPixel =\n        (viewport.distanceScales.metersPerUnit[2] * (commonBounds[2] - commonBounds[0])) /\n        textureSize;\n      this.state.colorDomain = colorDomain.map(x => x * metersPerPixel * weightsScale);\n    } else {\n      this.state.colorDomain = colorDomain || DEFAULT_COLOR_DOMAIN;\n    }\n\n    const uniforms = {\n      radiusPixels,\n      commonBounds,\n      textureWidth: textureSize,\n      weightsScale\n    };\n    // Attribute manager sets data array count as instaceCount on model\n    // we need to set that as elementCount on 'weightsTransform'\n    weightsTransform.update({\n      elementCount: this.getNumInstances()\n    });\n    // Need to explictly specify clearColor as external context may have modified it\n    withParameters(this.context.gl, {clearColor: [0, 0, 0, 0]}, () => {\n      weightsTransform.run({\n        uniforms,\n        parameters: {\n          blend: true,\n          depthTest: false,\n          blendFunc: [GL.ONE, GL.ONE],\n          blendEquation: GL.FUNC_ADD\n        },\n        clearRenderTarget: true,\n        attributes: this.getAttributes(),\n        moduleSettings: this.getModuleSettings()\n      });\n    });\n    this._updateMaxWeightValue();\n\n    // reset filtering parameters (TODO: remove once luma issue#1193 is fixed)\n    weightsTexture.setParameters({\n      [GL.TEXTURE_MAG_FILTER]: GL.LINEAR,\n      [GL.TEXTURE_MIN_FILTER]: GL.LINEAR\n    });\n  }\n\n  _debouncedUpdateWeightmap(fromTimer = false) {\n    let {updateTimer} = this.state;\n    const {debounceTimeout} = this.props;\n\n    if (fromTimer) {\n      updateTimer = null;\n      // update\n      this._updateBounds(true);\n      this._updateTextureRenderingBounds();\n      this.setState({isWeightMapDirty: true});\n    } else {\n      this.setState({isWeightMapDirty: false});\n      clearTimeout(updateTimer);\n      updateTimer = setTimeout(this._debouncedUpdateWeightmap.bind(this, true), debounceTimeout);\n    }\n\n    this.setState({updateTimer});\n  }\n\n  // input: worldBounds: [minLong, minLat, maxLong, maxLat]\n  // input: opts.useLayerCoordinateSystem : layers coordiante system is used\n  // optput: commonBounds: [minX, minY, maxX, maxY] scaled to fit the current texture\n  _worldToCommonBounds(worldBounds, opts: {useLayerCoordinateSystem?: boolean} = {}) {\n    const {useLayerCoordinateSystem = false} = opts;\n    const [minLong, minLat, maxLong, maxLat] = worldBounds;\n    const {viewport} = this.context;\n    const {textureSize} = this.state;\n    const {coordinateSystem} = this.props;\n\n    const offsetMode =\n      useLayerCoordinateSystem &&\n      (coordinateSystem === COORDINATE_SYSTEM.LNGLAT_OFFSETS ||\n        coordinateSystem === COORDINATE_SYSTEM.METER_OFFSETS);\n    const offsetOriginCommon = offsetMode\n      ? viewport.projectPosition(this.props.coordinateOrigin)\n      : [0, 0];\n    const size = (textureSize * RESOLUTION) / viewport.scale;\n\n    let bottomLeftCommon;\n    let topRightCommon;\n\n    // Y-axis is flipped between World and Common bounds\n    if (useLayerCoordinateSystem && !offsetMode) {\n      bottomLeftCommon = this.projectPosition([minLong, minLat, 0]);\n      topRightCommon = this.projectPosition([maxLong, maxLat, 0]);\n    } else {\n      bottomLeftCommon = viewport.projectPosition([minLong, minLat, 0]);\n      topRightCommon = viewport.projectPosition([maxLong, maxLat, 0]);\n    }\n    // Ignore z component\n    return scaleToAspectRatio(\n      [\n        bottomLeftCommon[0] - offsetOriginCommon[0],\n        bottomLeftCommon[1] - offsetOriginCommon[1],\n        topRightCommon[0] - offsetOriginCommon[0],\n        topRightCommon[1] - offsetOriginCommon[1]\n      ],\n      size,\n      size\n    );\n  }\n\n  // input commonBounds: [xMin, yMin, xMax, yMax]\n  // output worldBounds: [minLong, minLat, maxLong, maxLat]\n  _commonToWorldBounds(commonBounds) {\n    const [xMin, yMin, xMax, yMax] = commonBounds;\n    const {viewport} = this.context;\n    const bottomLeftWorld = viewport.unprojectPosition([xMin, yMin]);\n    const topRightWorld = viewport.unprojectPosition([xMax, yMax]);\n\n    return bottomLeftWorld.slice(0, 2).concat(topRightWorld.slice(0, 2));\n  }\n}\n"],"file":"heatmap-layer.js"}