{"version":3,"sources":["../../../src/hexagon-layer/hexagon-aggregator.js"],"names":["pointToHexbin","props","aggregationParams","data","radius","viewport","attributes","centerLngLat","length","getPointsCenter","radiusCommon","getRadiusInCommon","screenPoints","iterable","objectInfo","positions","value","getAccessor","size","object","index","posIndex","position","arrayIsFinite","Number","isFinite","push","screenCoord","projectFlat","source","log","warn","newHexbin","x","d","y","hexagonBins","hexagons","map","hex","unprojectFlat","points","minX","Infinity","minY","maxX","maxY","i","Math","min","max","every","center","getDistanceScales","unitsPerMeter"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {hexbin} from 'd3-hexbin';\nimport {createIterable, log} from '@deck.gl/core';\n\n/**\n * Use d3-hexbin to performs hexagonal binning from geo points to hexagons\n * @param {Iterable} data - array of points\n * @param {Number} radius - hexagon radius in meter\n * @param {function} getPosition - get points lon lat\n * @param {Object} viewport - current viewport object\n\n * @return {Object} - hexagons and countRange\n */\nexport function pointToHexbin(props, aggregationParams) {\n  const {data, radius} = props;\n  const {viewport, attributes} = aggregationParams;\n  // get hexagon radius in mercator world unit\n  const centerLngLat = data.length ? getPointsCenter(data, aggregationParams) : null;\n  const radiusCommon = getRadiusInCommon(radius, viewport, centerLngLat);\n\n  // add world space coordinates to points\n  const screenPoints = [];\n  const {iterable, objectInfo} = createIterable(data);\n  const positions = attributes.positions.value;\n  const {size} = attributes.positions.getAccessor();\n  for (const object of iterable) {\n    objectInfo.index++;\n    const posIndex = objectInfo.index * size;\n    const position = [positions[posIndex], positions[posIndex + 1]];\n    const arrayIsFinite = Number.isFinite(position[0]) && Number.isFinite(position[1]);\n    if (arrayIsFinite) {\n      screenPoints.push({\n        screenCoord: viewport.projectFlat(position),\n        source: object,\n        index: objectInfo.index\n      });\n    } else {\n      log.warn('HexagonLayer: invalid position')();\n    }\n  }\n\n  const newHexbin = hexbin()\n    .radius(radiusCommon)\n    .x(d => d.screenCoord[0])\n    .y(d => d.screenCoord[1]);\n\n  const hexagonBins = newHexbin(screenPoints);\n\n  return {\n    hexagons: hexagonBins.map((hex, index) => ({\n      position: viewport.unprojectFlat([hex.x, hex.y]),\n      points: hex,\n      index\n    })),\n    radiusCommon\n  };\n}\n\n/**\n * Get the bounding box of all data points\n */\nexport function getPointsCenter(data, aggregationParams) {\n  const {attributes} = aggregationParams;\n  const positions = attributes.positions.value;\n  const {size} = attributes.positions.getAccessor();\n\n  let minX = Infinity;\n  let minY = Infinity;\n  let maxX = -Infinity;\n  let maxY = -Infinity;\n  let i;\n\n  for (i = 0; i < size * data.length; i += size) {\n    const x = positions[i];\n    const y = positions[i + 1];\n    const arrayIsFinite = Number.isFinite(x) && Number.isFinite(y);\n\n    if (arrayIsFinite) {\n      minX = Math.min(x, minX);\n      maxX = Math.max(x, maxX);\n      minY = Math.min(y, minY);\n      maxY = Math.max(y, maxY);\n    }\n  }\n\n  // return center\n  return [minX, minY, maxX, maxY].every(Number.isFinite)\n    ? [(minX + maxX) / 2, (minY + maxY) / 2]\n    : null;\n}\n\n/**\n * Get radius in mercator world space coordinates from meter\n * @param {Number} radius - in meter\n * @param {Object} viewport - current viewport object\n * @param {Array<Number>} center - data center\n\n * @return {Number} radius in mercator world spcae coordinates\n */\nexport function getRadiusInCommon(radius, viewport, center) {\n  const {unitsPerMeter} = viewport.getDistanceScales(center);\n  // x, y distance should be the same\n  return radius * unitsPerMeter[0];\n}\n"],"file":"hexagon-aggregator.js"}