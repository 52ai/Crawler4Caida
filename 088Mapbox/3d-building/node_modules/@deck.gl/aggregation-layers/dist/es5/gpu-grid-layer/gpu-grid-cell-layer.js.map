{"version":3,"sources":["../../../src/gpu-grid-layer/gpu-grid-cell-layer.ts"],"names":["COLOR_DATA_UBO_INDEX","ELEVATION_DATA_UBO_INDEX","defaultProps","colorDomain","colorRange","defaultColorRange","elevationDomain","elevationRange","elevationScale","type","min","value","gridSize","gridOrigin","gridOffset","cellSize","max","offset","coverage","extruded","material","GPUGridCellLayer","vs","fs","modules","project32","gouraudLighting","picking","fp64arithmetic","gl","attributeManager","getAttributeManager","addInstanced","colors","size","noAlloc","elevations","model","_getModel","_setupUniformBuffer","setState","Model","getShaders","id","props","geometry","CubeGeometry","isInstanced","uniforms","colorMaxMinBuffer","elevationMaxMinBuffer","gridOriginLow","gridOffsetLow","domainUniforms","getDomainUniforms","bindUniformBuffers","state","setUniforms","draw","unbindUniformBuffers","bind","target","index","unbind","colorDomainValid","elevationDomainValid","context","programHandle","program","handle","colorIndex","getUniformBlockIndex","elevationIndex","uniformBlockBinding","Layer"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {\n  Layer,\n  fp64LowPart,\n  project32,\n  gouraudLighting,\n  picking,\n  LayerContext,\n  LayerProps,\n  DefaultProps\n} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, CubeGeometry, Buffer} from '@luma.gl/core';\nimport {fp64arithmetic} from '@luma.gl/shadertools';\nimport {defaultColorRange, colorRangeToFlatArray} from '../utils/color-utils';\nimport type {_GPUGridLayerProps} from './gpu-grid-layer';\nimport vs from './gpu-grid-cell-layer-vertex.glsl';\nimport fs from './gpu-grid-cell-layer-fragment.glsl';\n\nconst COLOR_DATA_UBO_INDEX = 0;\nconst ELEVATION_DATA_UBO_INDEX = 1;\n\nconst defaultProps: DefaultProps<_GPUGridCellLayerProps & LayerProps> = {\n  // color\n  colorDomain: null,\n  colorRange: defaultColorRange,\n\n  // elevation\n  elevationDomain: null,\n  elevationRange: [0, 1000],\n  elevationScale: {type: 'number', min: 0, value: 1},\n\n  // grid\n  gridSize: {type: 'array', value: [1, 1]},\n  gridOrigin: {type: 'array', value: [0, 0]},\n  gridOffset: {type: 'array', value: [0, 0]},\n\n  cellSize: {type: 'number', min: 0, max: 1000, value: 1000},\n  offset: {type: 'array', value: [1, 1]},\n  coverage: {type: 'number', min: 0, max: 1, value: 1},\n  extruded: true,\n\n  material: true // Use lighting module defaults\n};\n\ntype _GPUGridCellLayerProps = _GPUGridLayerProps<any> & {\n  offset: number[];\n  gridSize: number[];\n  gridOrigin: number[];\n  gridOffset: number[];\n  colorMaxMinBuffer: Buffer;\n  elevationMaxMinBuffer: Buffer;\n};\n\nexport default class GPUGridCellLayer extends Layer<_GPUGridCellLayerProps> {\n  static layerName = 'GPUGridCellLayer';\n  static defaultProps = defaultProps;\n\n  getShaders() {\n    return super.getShaders({\n      vs,\n      fs,\n      modules: [project32, gouraudLighting, picking, fp64arithmetic]\n    });\n  }\n\n  initializeState({gl}: LayerContext) {\n    const attributeManager = this.getAttributeManager()!;\n    attributeManager.addInstanced({\n      colors: {\n        size: 4,\n        noAlloc: true\n      },\n      elevations: {\n        size: 4,\n        noAlloc: true\n      }\n    });\n    const model = this._getModel(gl);\n    this._setupUniformBuffer(model);\n    this.setState({model});\n  }\n\n  _getModel(gl: WebGLRenderingContext): Model {\n    return new Model(gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      geometry: new CubeGeometry(),\n      isInstanced: true\n    });\n  }\n\n  draw({uniforms}) {\n    const {\n      cellSize,\n      offset,\n      extruded,\n      elevationScale,\n      coverage,\n      gridSize,\n      gridOrigin,\n      gridOffset,\n      elevationRange,\n      colorMaxMinBuffer,\n      elevationMaxMinBuffer\n    } = this.props;\n\n    const gridOriginLow = [fp64LowPart(gridOrigin[0]), fp64LowPart(gridOrigin[1])];\n    const gridOffsetLow = [fp64LowPart(gridOffset[0]), fp64LowPart(gridOffset[1])];\n    const domainUniforms = this.getDomainUniforms();\n    const colorRange = colorRangeToFlatArray(this.props.colorRange);\n    this.bindUniformBuffers(colorMaxMinBuffer, elevationMaxMinBuffer);\n    this.state.model\n      .setUniforms(uniforms)\n      .setUniforms(domainUniforms)\n      .setUniforms({\n        cellSize,\n        offset,\n        extruded,\n        elevationScale,\n        coverage,\n        gridSize,\n        gridOrigin,\n        gridOriginLow,\n        gridOffset,\n        gridOffsetLow,\n        colorRange,\n        elevationRange\n      })\n      .draw();\n    this.unbindUniformBuffers(colorMaxMinBuffer, elevationMaxMinBuffer);\n  }\n\n  bindUniformBuffers(colorMaxMinBuffer, elevationMaxMinBuffer) {\n    colorMaxMinBuffer.bind({target: GL.UNIFORM_BUFFER, index: COLOR_DATA_UBO_INDEX});\n    elevationMaxMinBuffer.bind({target: GL.UNIFORM_BUFFER, index: ELEVATION_DATA_UBO_INDEX});\n  }\n\n  unbindUniformBuffers(colorMaxMinBuffer, elevationMaxMinBuffer) {\n    colorMaxMinBuffer.unbind({target: GL.UNIFORM_BUFFER, index: COLOR_DATA_UBO_INDEX});\n    elevationMaxMinBuffer.unbind({target: GL.UNIFORM_BUFFER, index: ELEVATION_DATA_UBO_INDEX});\n  }\n\n  getDomainUniforms() {\n    const {colorDomain, elevationDomain} = this.props;\n    const domainUniforms: Record<string, any> = {};\n    if (colorDomain !== null) {\n      domainUniforms.colorDomainValid = true;\n      domainUniforms.colorDomain = colorDomain;\n    } else {\n      domainUniforms.colorDomainValid = false;\n    }\n    if (elevationDomain !== null) {\n      domainUniforms.elevationDomainValid = true;\n      domainUniforms.elevationDomain = elevationDomain;\n    } else {\n      domainUniforms.elevationDomainValid = false;\n    }\n    return domainUniforms;\n  }\n\n  private _setupUniformBuffer(model: Model): void {\n    const gl = this.context.gl as WebGL2RenderingContext;\n    const programHandle = model.program.handle;\n\n    const colorIndex = gl.getUniformBlockIndex(programHandle, 'ColorData');\n    const elevationIndex = gl.getUniformBlockIndex(programHandle, 'ElevationData');\n    gl.uniformBlockBinding(programHandle, colorIndex, COLOR_DATA_UBO_INDEX);\n    gl.uniformBlockBinding(programHandle, elevationIndex, ELEVATION_DATA_UBO_INDEX);\n  }\n}\n"],"file":"gpu-grid-cell-layer.js"}