{"version":3,"sources":["../../../src/screen-grid-layer/screen-grid-cell-layer.ts"],"names":["DEFAULT_MINCOLOR","DEFAULT_MAXCOLOR","COLOR_PROPS","defaultProps","cellSizePixels","value","min","cellMarginPixels","max","colorDomain","colorRange","defaultColorRange","ScreenGridCellLayer","vs","fs","modules","picking","gl","context","attributeManager","getAttributeManager","addInstanced","instancePositions","size","update","calculateInstancePositions","instanceCounts","noAlloc","setState","model","_getModel","changeFlags","somethingChanged","params","oldProps","props","numInstances","invalidateAll","invalidate","_updateUniforms","uniforms","parameters","maxTexture","minColor","maxColor","state","setUniforms","draw","depthTest","depthMask","attribute","viewport","width","height","numCol","Math","ceil","i","x","y","floor","Model","getShaders","id","geometry","Geometry","drawMode","attributes","positions","Float32Array","isInstanced","log","deprecated","some","key","shouldUseMinMax","_shouldUseMinMax","viewportChanged","margin","cellScale","FEATURES","TEXTURE_FLOAT","Layer"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2019 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry, FEATURES, hasFeatures, Texture2D, DefaultProps} from '@luma.gl/core';\nimport {Layer, LayerProps, log, picking, UpdateParameters} from '@deck.gl/core';\nimport {defaultColorRange, colorRangeToFlatArray} from '../utils/color-utils';\nimport vs from './screen-grid-layer-vertex.glsl';\nimport fs from './screen-grid-layer-fragment.glsl';\nimport type {_ScreenGridLayerProps} from './screen-grid-layer';\n\nconst DEFAULT_MINCOLOR = [0, 0, 0, 0];\nconst DEFAULT_MAXCOLOR = [0, 255, 0, 255];\nconst COLOR_PROPS = ['minColor', 'maxColor', 'colorRange', 'colorDomain'];\n\nconst defaultProps: DefaultProps<ScreenGridCellLayerProps> = {\n  cellSizePixels: {value: 100, min: 1},\n  cellMarginPixels: {value: 2, min: 0, max: 5},\n\n  colorDomain: null,\n  colorRange: defaultColorRange\n};\n\n/** All properties supported by ScreenGridCellLayer. */\nexport type ScreenGridCellLayerProps<DataT = any> = _ScreenGridCellLayerProps<DataT> &\n  LayerProps<DataT>;\n\n/** Proprties added by ScreenGridCellLayer. */\nexport type _ScreenGridCellLayerProps<DataT> = _ScreenGridLayerProps<DataT> & {\n  maxTexture: Texture2D;\n};\n\nexport default class ScreenGridCellLayer<DataT = any, ExtraPropsT = {}> extends Layer<\n  ExtraPropsT & Required<_ScreenGridCellLayerProps<DataT>>\n> {\n  static layerName = 'ScreenGridCellLayer';\n  static defaultProps = defaultProps;\n\n  static isSupported(gl) {\n    return hasFeatures(gl, [FEATURES.TEXTURE_FLOAT]);\n  }\n\n  state!: Layer['state'] & {\n    model: Model;\n  };\n  getShaders() {\n    return {vs, fs, modules: [picking]};\n  }\n\n  initializeState() {\n    const {gl} = this.context;\n    const attributeManager = this.getAttributeManager()!;\n    attributeManager.addInstanced({\n      // eslint-disable-next-line @typescript-eslint/unbound-method\n      instancePositions: {size: 3, update: this.calculateInstancePositions},\n      instanceCounts: {size: 4, noAlloc: true}\n    });\n    this.setState({\n      model: this._getModel(gl)\n    });\n  }\n\n  shouldUpdateState({changeFlags}) {\n    // 'instanceCounts' buffer contetns change on viewport change.\n    return changeFlags.somethingChanged;\n  }\n\n  updateState(params: UpdateParameters<this>) {\n    super.updateState(params);\n\n    const {oldProps, props, changeFlags} = params;\n\n    const attributeManager = this.getAttributeManager()!;\n    if (props.numInstances !== oldProps.numInstances) {\n      attributeManager.invalidateAll();\n    } else if (oldProps.cellSizePixels !== props.cellSizePixels) {\n      attributeManager.invalidate('instancePositions');\n    }\n\n    this._updateUniforms(oldProps, props, changeFlags);\n  }\n\n  draw({uniforms}) {\n    const {parameters, maxTexture} = this.props;\n    const minColor = this.props.minColor || DEFAULT_MINCOLOR;\n    const maxColor = this.props.maxColor || DEFAULT_MAXCOLOR;\n\n    // If colorDomain not specified we use default domain [1, maxCount]\n    // maxCount value will be sampled form maxTexture in vertex shader.\n    const colorDomain = this.props.colorDomain || [1, 0];\n    const {model} = this.state;\n    model\n      .setUniforms(uniforms)\n      .setUniforms({\n        minColor,\n        maxColor,\n        maxTexture,\n        colorDomain\n      })\n      .draw({\n        parameters: {\n          depthTest: false,\n          depthMask: false,\n          ...parameters\n        }\n      });\n  }\n\n  calculateInstancePositions(attribute, {numInstances}) {\n    const {width, height} = this.context.viewport;\n    const {cellSizePixels} = this.props;\n    const numCol = Math.ceil(width / cellSizePixels);\n\n    const {value, size} = attribute;\n\n    for (let i = 0; i < numInstances; i++) {\n      const x = i % numCol;\n      const y = Math.floor(i / numCol);\n      value[i * size + 0] = ((x * cellSizePixels) / width) * 2 - 1;\n      value[i * size + 1] = 1 - ((y * cellSizePixels) / height) * 2;\n      value[i * size + 2] = 0;\n    }\n  }\n\n  // Private Methods\n\n  _getModel(gl: WebGLRenderingContext): Model {\n    return new Model(gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: GL.TRIANGLE_FAN,\n        attributes: {\n          positions: new Float32Array([0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0])\n        }\n      }),\n      isInstanced: true\n    });\n  }\n\n  _shouldUseMinMax(): boolean {\n    const {minColor, maxColor, colorDomain, colorRange} = this.props;\n    if (minColor || maxColor) {\n      log.deprecated('ScreenGridLayer props: minColor and maxColor', 'colorRange, colorDomain')();\n      return true;\n    }\n    // minColor and maxColor not supplied, check if colorRange or colorDomain supplied.\n    // NOTE: colorDomain and colorRange are experimental features, use them only when supplied.\n    if (colorDomain || colorRange) {\n      return false;\n    }\n    // None specified, use default minColor and maxColor\n    return true;\n  }\n\n  _updateUniforms(oldProps, props, changeFlags): void {\n    const {model} = this.state;\n    if (COLOR_PROPS.some(key => oldProps[key] !== props[key])) {\n      model.setUniforms({shouldUseMinMax: this._shouldUseMinMax()});\n    }\n\n    if (oldProps.colorRange !== props.colorRange) {\n      model.setUniforms({colorRange: colorRangeToFlatArray(props.colorRange)});\n    }\n\n    if (\n      oldProps.cellMarginPixels !== props.cellMarginPixels ||\n      oldProps.cellSizePixels !== props.cellSizePixels ||\n      changeFlags.viewportChanged\n    ) {\n      const {width, height} = this.context.viewport;\n      const {cellSizePixels, cellMarginPixels} = this.props;\n      const margin = cellSizePixels > cellMarginPixels ? cellMarginPixels : 0;\n\n      const cellScale = new Float32Array([\n        ((cellSizePixels - margin) / width) * 2,\n        (-(cellSizePixels - margin) / height) * 2,\n        1\n      ]);\n      model.setUniforms({cellScale});\n    }\n  }\n}\n"],"file":"screen-grid-cell-layer.js"}