{"version":3,"sources":["../../../src/screen-grid-layer/screen-grid-layer.ts"],"names":["defaultProps","ScreenGridCellLayer","getPosition","type","value","d","position","getWeight","gpuAggregation","aggregation","POSITION_ATTRIBUTE_NAME","DIMENSIONS","data","props","weights","accessors","ScreenGridLayer","gl","context","isSupported","setState","supported","log","error","id","dimensions","getCellSize","cellSizePixels","count","size","operation","AGGREGATION_OPERATION","SUM","needMax","maxTexture","projectPoints","subLayerData","attributes","positionAttributeName","posOffset","translation","attributeManager","getAttributeManager","add","accessor","fp64","use64bitPositions","changeFlags","state","somethingChanged","opts","numRow","numCol","updateTriggers","aggregationBuffer","CellLayerClass","getSubLayerClass","getSubLayerProps","instanceCounts","numInstances","maxBuffer","delete","info","index","gpuGridAggregator","aggregationResults","getData","object","GPUGridAggregator","getAggregationData","pixelIndex","aggregationData","maxData","setData","setImageData","cellSize","cellSizeChanged","oldProps","viewportChanged","warn","gpuAggregationChanged","positionsChanged","isAttributeChanged","aggregationDataDirty","isAggregationDirty","compareAll","dimension","aggregationWeightsDirty","viewport","width","height","Math","ceil","allocateResources","scaling","gridOffset","xOffset","yOffset","_updateAccessors","_resetResults","getValue","GridAggregationLayer"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {\n  Accessor,\n  Color,\n  GetPickingInfoParams,\n  Layer,\n  LayerContext,\n  LayersList,\n  log,\n  PickingInfo,\n  Position,\n  UpdateParameters,\n  DefaultProps\n} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport type {Texture2D} from '@luma.gl/core';\nimport GPUGridAggregator from '../utils/gpu-grid-aggregation/gpu-grid-aggregator';\nimport {AGGREGATION_OPERATION, getValueFunc} from '../utils/aggregation-operation-utils';\nimport ScreenGridCellLayer from './screen-grid-cell-layer';\nimport GridAggregationLayer, {GridAggregationLayerProps} from '../grid-aggregation-layer';\nimport {getFloatTexture} from '../utils/resource-utils.js';\n\nconst defaultProps: DefaultProps<ScreenGridLayerProps> = {\n  ...ScreenGridCellLayer.defaultProps,\n  getPosition: {type: 'accessor', value: d => d.position},\n  getWeight: {type: 'accessor', value: 1},\n\n  gpuAggregation: true,\n  aggregation: 'SUM'\n};\n\nconst POSITION_ATTRIBUTE_NAME = 'positions';\nconst DIMENSIONS = {\n  data: {\n    props: ['cellSizePixels']\n  },\n  weights: {\n    props: ['aggregation'],\n    accessors: ['getWeight']\n  }\n};\n\n/** All properties supported by ScreenGridLayer. */\nexport type ScreenGridLayerProps<DataT = any> = _ScreenGridLayerProps<DataT> &\n  GridAggregationLayerProps<DataT>;\n\n/** Properties added by ScreenGridLayer. */\nexport type _ScreenGridLayerProps<DataT> = {\n  /**\n   * Unit width/height of the bins.\n   * @default 100\n   */\n  cellSizePixels?: number;\n\n  /**\n   * Cell margin size in pixels.\n   * @default 2\n   */\n  cellMarginPixels?: number;\n\n  /**\n   * Expressed as an rgba array, minimal color that could be rendered by a tile.\n   * @default [0, 0, 0, 255]\n   * @deprecated Deprecated in version 5.2.0, use `colorRange` and `colorDomain` instead.\n   */\n  minColor?: Color | null;\n\n  /**\n   * Expressed as an rgba array, maximal color that could be rendered by a tile.\n   * @default [0, 255, 0, 255]\n   * @deprecated Deprecated in version 5.2.0, use `colorRange` and `colorDomain` instead.\n   */\n  maxColor?: Color | null;\n\n  /**\n   * Color scale input domain. The color scale maps continues numeric domain into discrete color range.\n   * @default [1, max(weight)]\n   */\n  colorDomain?: [number, number] | null;\n\n  /**\n   * Specified as an array of colors [color1, color2, ...].\n   *\n   * @default `6-class YlOrRd` - [colorbrewer](http://colorbrewer2.org/#type=sequential&scheme=YlOrRd&n=6)\n   */\n  colorRange?: Color[];\n\n  /**\n   * Method called to retrieve the position of each object.\n   *\n   * @default d => d.position\n   */\n  getPosition?: Accessor<DataT, Position>;\n\n  /**\n   * The weight of each object.\n   *\n   * @default 1\n   */\n  getWeight?: Accessor<DataT, number>;\n\n  /**\n   * Perform aggregation is performed on GPU.\n   *\n   * NOTE: GPU Aggregation requires WebGL2 support by the browser.\n   * When `gpuAggregation` is set to true and browser doesn't support WebGL2, aggregation falls back to CPU.\n   *\n   * @default true\n   */\n  gpuAggregation?: boolean;\n\n  /**\n   * Defines the type of aggregation operation\n   *\n   * V valid values are 'SUM', 'MEAN', 'MIN' and 'MAX'.\n   *\n   * @default 'SUM'\n   */\n  aggregation?: 'SUM' | 'MEAN' | 'MIN' | 'MAX';\n};\n\n/** Aggregates data into histogram bins and renders them as a grid. */\nexport default class ScreenGridLayer<DataT = any, ExtraProps = {}> extends GridAggregationLayer<\n  ExtraProps & Required<_ScreenGridLayerProps<DataT>>\n> {\n  static layerName = 'ScreenGridLayer';\n  static defaultProps = defaultProps;\n\n  state!: GridAggregationLayer['state'] & {\n    supported: boolean;\n    gpuGridAggregator?: any;\n    gpuAggregation?: any;\n    weights?: any;\n    maxTexture?: Texture2D;\n  };\n\n  initializeState() {\n    const {gl} = this.context;\n    if (!ScreenGridCellLayer.isSupported(gl)) {\n      // max aggregated value is sampled from a float texture\n      this.setState({supported: false});\n      log.error(`ScreenGridLayer: ${this.id} is not supported on this browser`)();\n      return;\n    }\n    super.initializeAggregationLayer({\n      dimensions: DIMENSIONS,\n      // @ts-expect-error\n      getCellSize: props => props.cellSizePixels // TODO\n    });\n    const weights = {\n      count: {\n        size: 1,\n        operation: AGGREGATION_OPERATION.SUM,\n        needMax: true,\n        maxTexture: getFloatTexture(gl, {id: `${this.id}-max-texture`})\n      }\n    };\n    this.setState({\n      supported: true,\n      projectPoints: true, // aggregation in screen space\n      weights,\n      subLayerData: {attributes: {}},\n      maxTexture: weights.count.maxTexture,\n      positionAttributeName: 'positions',\n      posOffset: [0, 0],\n      translation: [1, -1]\n    });\n    const attributeManager = this.getAttributeManager()!;\n    attributeManager.add({\n      [POSITION_ATTRIBUTE_NAME]: {\n        size: 3,\n        accessor: 'getPosition',\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions()\n      },\n      // this attribute is used in gpu aggregation path only\n      count: {size: 3, accessor: 'getWeight'}\n    });\n  }\n\n  shouldUpdateState({changeFlags}: UpdateParameters<this>) {\n    return this.state.supported && changeFlags.somethingChanged;\n  }\n\n  updateState(opts: UpdateParameters<this>) {\n    super.updateState(opts);\n  }\n\n  renderLayers(): LayersList | Layer {\n    if (!this.state.supported) {\n      return [];\n    }\n    const {maxTexture, numRow, numCol, weights} = this.state;\n    const {updateTriggers} = this.props;\n    const {aggregationBuffer} = weights.count;\n    const CellLayerClass = this.getSubLayerClass('cells', ScreenGridCellLayer);\n\n    return new CellLayerClass(\n      this.props,\n      this.getSubLayerProps({\n        id: 'cell-layer',\n        updateTriggers\n      }),\n      {\n        data: {attributes: {instanceCounts: aggregationBuffer}},\n        maxTexture,\n        numInstances: numRow * numCol\n      }\n    );\n  }\n\n  finalizeState(context: LayerContext): void {\n    super.finalizeState(context);\n\n    const {aggregationBuffer, maxBuffer, maxTexture} = this.state;\n\n    aggregationBuffer?.delete();\n    maxBuffer?.delete();\n    maxTexture?.delete();\n  }\n\n  getPickingInfo({info}: GetPickingInfoParams): PickingInfo {\n    const {index} = info;\n    if (index >= 0) {\n      const {gpuGridAggregator, gpuAggregation, weights} = this.state;\n      // Get count aggregation results\n      const aggregationResults = gpuAggregation\n        ? gpuGridAggregator.getData('count')\n        : weights.count;\n\n      // Each instance (one cell) is aggregated into single pixel,\n      // Get current instance's aggregation details.\n      info.object = GPUGridAggregator.getAggregationData({\n        pixelIndex: index,\n        ...aggregationResults\n      });\n    }\n\n    return info;\n  }\n\n  // Aggregation Overrides\n\n  updateResults({aggregationData, maxData}) {\n    const {count} = this.state.weights;\n    count.aggregationData = aggregationData;\n    count.aggregationBuffer.setData({data: aggregationData});\n    count.maxData = maxData;\n    count.maxTexture.setImageData({data: maxData});\n  }\n\n  /* eslint-disable complexity, max-statements */\n  updateAggregationState(opts) {\n    const cellSize = opts.props.cellSizePixels;\n    const cellSizeChanged = opts.oldProps.cellSizePixels !== cellSize;\n    const {viewportChanged} = opts.changeFlags;\n    let gpuAggregation = opts.props.gpuAggregation;\n    if (this.state.gpuAggregation !== opts.props.gpuAggregation) {\n      if (gpuAggregation && !GPUGridAggregator.isSupported(this.context.gl)) {\n        log.warn('GPU Grid Aggregation not supported, falling back to CPU')();\n        gpuAggregation = false;\n      }\n    }\n    const gpuAggregationChanged = gpuAggregation !== this.state.gpuAggregation;\n    this.setState({\n      gpuAggregation\n    });\n\n    const positionsChanged = this.isAttributeChanged(POSITION_ATTRIBUTE_NAME);\n\n    const {dimensions} = this.state;\n    const {data, weights} = dimensions;\n    const aggregationDataDirty =\n      positionsChanged ||\n      gpuAggregationChanged ||\n      viewportChanged ||\n      this.isAggregationDirty(opts, {\n        compareAll: gpuAggregation, // check for all (including extentions props) when using gpu aggregation\n        dimension: data\n      });\n    const aggregationWeightsDirty = this.isAggregationDirty(opts, {dimension: weights});\n\n    this.setState({\n      aggregationDataDirty,\n      aggregationWeightsDirty\n    });\n\n    const {viewport} = this.context;\n\n    if (viewportChanged || cellSizeChanged) {\n      const {width, height} = viewport;\n      const numCol = Math.ceil(width / cellSize);\n      const numRow = Math.ceil(height / cellSize);\n      this.allocateResources(numRow, numCol);\n      this.setState({\n        // transformation from clipspace to screen(pixel) space\n        scaling: [width / 2, -height / 2, 1],\n\n        gridOffset: {xOffset: cellSize, yOffset: cellSize},\n        width,\n        height,\n        numCol,\n        numRow\n      });\n    }\n\n    if (aggregationWeightsDirty) {\n      this._updateAccessors(opts);\n    }\n    if (aggregationDataDirty || aggregationWeightsDirty) {\n      this._resetResults();\n    }\n  }\n  /* eslint-enable complexity, max-statements */\n\n  // Private\n\n  _updateAccessors(opts) {\n    const {getWeight, aggregation, data} = opts.props;\n    const {count} = this.state.weights;\n    if (count) {\n      count.getWeight = getWeight;\n      count.operation = AGGREGATION_OPERATION[aggregation];\n    }\n    this.setState({getValue: getValueFunc(aggregation, getWeight, {data})});\n  }\n\n  _resetResults() {\n    const {count} = this.state.weights;\n    if (count) {\n      count.aggregationData = null;\n    }\n  }\n}\n"],"file":"screen-grid-layer.js"}