{"version":3,"sources":["../../../src/screen-grid-layer/screen-grid-layer.ts"],"names":["log","GPUGridAggregator","AGGREGATION_OPERATION","getValueFunc","ScreenGridCellLayer","GridAggregationLayer","getFloatTexture","defaultProps","getPosition","type","value","d","position","getWeight","gpuAggregation","aggregation","POSITION_ATTRIBUTE_NAME","DIMENSIONS","data","props","weights","accessors","ScreenGridLayer","initializeState","gl","context","isSupported","setState","supported","error","id","initializeAggregationLayer","dimensions","getCellSize","cellSizePixels","count","size","operation","SUM","needMax","maxTexture","projectPoints","subLayerData","attributes","positionAttributeName","posOffset","translation","attributeManager","getAttributeManager","add","accessor","fp64","use64bitPositions","shouldUpdateState","changeFlags","state","somethingChanged","updateState","opts","renderLayers","numRow","numCol","updateTriggers","aggregationBuffer","CellLayerClass","getSubLayerClass","getSubLayerProps","instanceCounts","numInstances","finalizeState","maxBuffer","delete","getPickingInfo","info","index","gpuGridAggregator","aggregationResults","getData","object","getAggregationData","pixelIndex","updateResults","aggregationData","maxData","setData","setImageData","updateAggregationState","cellSize","cellSizeChanged","oldProps","viewportChanged","warn","gpuAggregationChanged","positionsChanged","isAttributeChanged","aggregationDataDirty","isAggregationDirty","compareAll","dimension","aggregationWeightsDirty","viewport","width","height","Math","ceil","allocateResources","scaling","gridOffset","xOffset","yOffset","_updateAccessors","_resetResults","getValue"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {\n  Accessor,\n  Color,\n  GetPickingInfoParams,\n  Layer,\n  LayerContext,\n  LayersList,\n  log,\n  PickingInfo,\n  Position,\n  UpdateParameters,\n  DefaultProps\n} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport type {Texture2D} from '@luma.gl/core';\nimport GPUGridAggregator from '../utils/gpu-grid-aggregation/gpu-grid-aggregator';\nimport {AGGREGATION_OPERATION, getValueFunc} from '../utils/aggregation-operation-utils';\nimport ScreenGridCellLayer from './screen-grid-cell-layer';\nimport GridAggregationLayer, {GridAggregationLayerProps} from '../grid-aggregation-layer';\nimport {getFloatTexture} from '../utils/resource-utils.js';\n\nconst defaultProps: DefaultProps<ScreenGridLayerProps> = {\n  ...ScreenGridCellLayer.defaultProps,\n  getPosition: {type: 'accessor', value: d => d.position},\n  getWeight: {type: 'accessor', value: 1},\n\n  gpuAggregation: true,\n  aggregation: 'SUM'\n};\n\nconst POSITION_ATTRIBUTE_NAME = 'positions';\nconst DIMENSIONS = {\n  data: {\n    props: ['cellSizePixels']\n  },\n  weights: {\n    props: ['aggregation'],\n    accessors: ['getWeight']\n  }\n};\n\n/** All properties supported by ScreenGridLayer. */\nexport type ScreenGridLayerProps<DataT = any> = _ScreenGridLayerProps<DataT> &\n  GridAggregationLayerProps<DataT>;\n\n/** Properties added by ScreenGridLayer. */\nexport type _ScreenGridLayerProps<DataT> = {\n  /**\n   * Unit width/height of the bins.\n   * @default 100\n   */\n  cellSizePixels?: number;\n\n  /**\n   * Cell margin size in pixels.\n   * @default 2\n   */\n  cellMarginPixels?: number;\n\n  /**\n   * Expressed as an rgba array, minimal color that could be rendered by a tile.\n   * @default [0, 0, 0, 255]\n   * @deprecated Deprecated in version 5.2.0, use `colorRange` and `colorDomain` instead.\n   */\n  minColor?: Color | null;\n\n  /**\n   * Expressed as an rgba array, maximal color that could be rendered by a tile.\n   * @default [0, 255, 0, 255]\n   * @deprecated Deprecated in version 5.2.0, use `colorRange` and `colorDomain` instead.\n   */\n  maxColor?: Color | null;\n\n  /**\n   * Color scale input domain. The color scale maps continues numeric domain into discrete color range.\n   * @default [1, max(weight)]\n   */\n  colorDomain?: [number, number] | null;\n\n  /**\n   * Specified as an array of colors [color1, color2, ...].\n   *\n   * @default `6-class YlOrRd` - [colorbrewer](http://colorbrewer2.org/#type=sequential&scheme=YlOrRd&n=6)\n   */\n  colorRange?: Color[];\n\n  /**\n   * Method called to retrieve the position of each object.\n   *\n   * @default d => d.position\n   */\n  getPosition?: Accessor<DataT, Position>;\n\n  /**\n   * The weight of each object.\n   *\n   * @default 1\n   */\n  getWeight?: Accessor<DataT, number>;\n\n  /**\n   * Perform aggregation is performed on GPU.\n   *\n   * NOTE: GPU Aggregation requires WebGL2 support by the browser.\n   * When `gpuAggregation` is set to true and browser doesn't support WebGL2, aggregation falls back to CPU.\n   *\n   * @default true\n   */\n  gpuAggregation?: boolean;\n\n  /**\n   * Defines the type of aggregation operation\n   *\n   * V valid values are 'SUM', 'MEAN', 'MIN' and 'MAX'.\n   *\n   * @default 'SUM'\n   */\n  aggregation?: 'SUM' | 'MEAN' | 'MIN' | 'MAX';\n};\n\n/** Aggregates data into histogram bins and renders them as a grid. */\nexport default class ScreenGridLayer<DataT = any, ExtraProps = {}> extends GridAggregationLayer<\n  ExtraProps & Required<_ScreenGridLayerProps<DataT>>\n> {\n  static layerName = 'ScreenGridLayer';\n  static defaultProps = defaultProps;\n\n  state!: GridAggregationLayer['state'] & {\n    supported: boolean;\n    gpuGridAggregator?: any;\n    gpuAggregation?: any;\n    weights?: any;\n    maxTexture?: Texture2D;\n  };\n\n  initializeState() {\n    const {gl} = this.context;\n    if (!ScreenGridCellLayer.isSupported(gl)) {\n      // max aggregated value is sampled from a float texture\n      this.setState({supported: false});\n      log.error(`ScreenGridLayer: ${this.id} is not supported on this browser`)();\n      return;\n    }\n    super.initializeAggregationLayer({\n      dimensions: DIMENSIONS,\n      // @ts-expect-error\n      getCellSize: props => props.cellSizePixels // TODO\n    });\n    const weights = {\n      count: {\n        size: 1,\n        operation: AGGREGATION_OPERATION.SUM,\n        needMax: true,\n        maxTexture: getFloatTexture(gl, {id: `${this.id}-max-texture`})\n      }\n    };\n    this.setState({\n      supported: true,\n      projectPoints: true, // aggregation in screen space\n      weights,\n      subLayerData: {attributes: {}},\n      maxTexture: weights.count.maxTexture,\n      positionAttributeName: 'positions',\n      posOffset: [0, 0],\n      translation: [1, -1]\n    });\n    const attributeManager = this.getAttributeManager()!;\n    attributeManager.add({\n      [POSITION_ATTRIBUTE_NAME]: {\n        size: 3,\n        accessor: 'getPosition',\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions()\n      },\n      // this attribute is used in gpu aggregation path only\n      count: {size: 3, accessor: 'getWeight'}\n    });\n  }\n\n  shouldUpdateState({changeFlags}: UpdateParameters<this>) {\n    return this.state.supported && changeFlags.somethingChanged;\n  }\n\n  updateState(opts: UpdateParameters<this>) {\n    super.updateState(opts);\n  }\n\n  renderLayers(): LayersList | Layer {\n    if (!this.state.supported) {\n      return [];\n    }\n    const {maxTexture, numRow, numCol, weights} = this.state;\n    const {updateTriggers} = this.props;\n    const {aggregationBuffer} = weights.count;\n    const CellLayerClass = this.getSubLayerClass('cells', ScreenGridCellLayer);\n\n    return new CellLayerClass(\n      this.props,\n      this.getSubLayerProps({\n        id: 'cell-layer',\n        updateTriggers\n      }),\n      {\n        data: {attributes: {instanceCounts: aggregationBuffer}},\n        maxTexture,\n        numInstances: numRow * numCol\n      }\n    );\n  }\n\n  finalizeState(context: LayerContext): void {\n    super.finalizeState(context);\n\n    const {aggregationBuffer, maxBuffer, maxTexture} = this.state;\n\n    aggregationBuffer?.delete();\n    maxBuffer?.delete();\n    maxTexture?.delete();\n  }\n\n  getPickingInfo({info}: GetPickingInfoParams): PickingInfo {\n    const {index} = info;\n    if (index >= 0) {\n      const {gpuGridAggregator, gpuAggregation, weights} = this.state;\n      // Get count aggregation results\n      const aggregationResults = gpuAggregation\n        ? gpuGridAggregator.getData('count')\n        : weights.count;\n\n      // Each instance (one cell) is aggregated into single pixel,\n      // Get current instance's aggregation details.\n      info.object = GPUGridAggregator.getAggregationData({\n        pixelIndex: index,\n        ...aggregationResults\n      });\n    }\n\n    return info;\n  }\n\n  // Aggregation Overrides\n\n  updateResults({aggregationData, maxData}) {\n    const {count} = this.state.weights;\n    count.aggregationData = aggregationData;\n    count.aggregationBuffer.setData({data: aggregationData});\n    count.maxData = maxData;\n    count.maxTexture.setImageData({data: maxData});\n  }\n\n  /* eslint-disable complexity, max-statements */\n  updateAggregationState(opts) {\n    const cellSize = opts.props.cellSizePixels;\n    const cellSizeChanged = opts.oldProps.cellSizePixels !== cellSize;\n    const {viewportChanged} = opts.changeFlags;\n    let gpuAggregation = opts.props.gpuAggregation;\n    if (this.state.gpuAggregation !== opts.props.gpuAggregation) {\n      if (gpuAggregation && !GPUGridAggregator.isSupported(this.context.gl)) {\n        log.warn('GPU Grid Aggregation not supported, falling back to CPU')();\n        gpuAggregation = false;\n      }\n    }\n    const gpuAggregationChanged = gpuAggregation !== this.state.gpuAggregation;\n    this.setState({\n      gpuAggregation\n    });\n\n    const positionsChanged = this.isAttributeChanged(POSITION_ATTRIBUTE_NAME);\n\n    const {dimensions} = this.state;\n    const {data, weights} = dimensions;\n    const aggregationDataDirty =\n      positionsChanged ||\n      gpuAggregationChanged ||\n      viewportChanged ||\n      this.isAggregationDirty(opts, {\n        compareAll: gpuAggregation, // check for all (including extentions props) when using gpu aggregation\n        dimension: data\n      });\n    const aggregationWeightsDirty = this.isAggregationDirty(opts, {dimension: weights});\n\n    this.setState({\n      aggregationDataDirty,\n      aggregationWeightsDirty\n    });\n\n    const {viewport} = this.context;\n\n    if (viewportChanged || cellSizeChanged) {\n      const {width, height} = viewport;\n      const numCol = Math.ceil(width / cellSize);\n      const numRow = Math.ceil(height / cellSize);\n      this.allocateResources(numRow, numCol);\n      this.setState({\n        // transformation from clipspace to screen(pixel) space\n        scaling: [width / 2, -height / 2, 1],\n\n        gridOffset: {xOffset: cellSize, yOffset: cellSize},\n        width,\n        height,\n        numCol,\n        numRow\n      });\n    }\n\n    if (aggregationWeightsDirty) {\n      this._updateAccessors(opts);\n    }\n    if (aggregationDataDirty || aggregationWeightsDirty) {\n      this._resetResults();\n    }\n  }\n  /* eslint-enable complexity, max-statements */\n\n  // Private\n\n  _updateAccessors(opts) {\n    const {getWeight, aggregation, data} = opts.props;\n    const {count} = this.state.weights;\n    if (count) {\n      count.getWeight = getWeight;\n      count.operation = AGGREGATION_OPERATION[aggregation];\n    }\n    this.setState({getValue: getValueFunc(aggregation, getWeight, {data})});\n  }\n\n  _resetResults() {\n    const {count} = this.state.weights;\n    if (count) {\n      count.aggregationData = null;\n    }\n  }\n}\n"],"file":"screen-grid-layer.js"}