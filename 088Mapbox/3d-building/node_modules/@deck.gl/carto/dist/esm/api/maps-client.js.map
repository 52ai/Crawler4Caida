{"version":3,"sources":["../../../src/api/maps-client.ts"],"names":["defaultClassicCredentials","defaultCloudNativeCredentials","getDefaultCredentials","API_VERSIONS","DEFAULT_MAPS_URL_FORMAT","DEFAULT_REGION_COMPONENT_IN_URL","DEFAULT_USER_COMPONENT_IN_URL","encodeParameter","MAP_TYPES","CONNECTIONS","BIGQUERY","CARTO","BUFFER_SIZE","TILE_EXTENT","getDataV2","type","source","credentials","defaultCredentials","apiVersion","localCreds","V3","mapsUrl","url","connection","TILESET","V1","mapConfig","createMapConfig","buildURLMapsAPIv1","layergroup","request","metadata","tilejson","vector","V2","buildURLMapsAPIv2","Error","response","fetch","headers","Accept","error","json","ok","dealWithError","status","username","apiKey","e","JSON","stringify","errors","initURLParameters","encodedApiKey","encodedClient","parameters","cfg","join","mapsApiType","QUERY","replace","region","sql","version","buffersize","mvt","layers","options","vector_extent"],"mappings":"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","sourcesContent":["/**\n * Maps API Client for Maps API v1 and Maps API v2\n */\nimport {\n  ClassicCredentials,\n  defaultClassicCredentials,\n  defaultCloudNativeCredentials,\n  getDefaultCredentials\n} from '../config';\nimport {\n  API_VERSIONS,\n  DEFAULT_MAPS_URL_FORMAT,\n  DEFAULT_REGION_COMPONENT_IN_URL,\n  DEFAULT_USER_COMPONENT_IN_URL,\n  encodeParameter,\n  MapType,\n  MAP_TYPES\n} from './maps-api-common';\n\nexport const CONNECTIONS = {\n  BIGQUERY: 'bigquery',\n  CARTO: 'carto'\n};\n\nconst BUFFER_SIZE = 16;\nconst TILE_EXTENT = 4096;\n\n/**\n * Obtain a TileJson from Maps API v1 and v2\n */\nexport async function getDataV2({\n  type,\n  source,\n  credentials\n}: {\n  type: MapType;\n  source: string;\n  credentials?: Partial<ClassicCredentials>;\n}) {\n  const defaultCredentials = getDefaultCredentials();\n  const apiVersion = credentials?.apiVersion || defaultCredentials.apiVersion;\n  // Only pick up default credentials if they have been defined for\n  // correct API version\n  const localCreds = {\n    ...(apiVersion === API_VERSIONS.V3 ? defaultCloudNativeCredentials : defaultClassicCredentials),\n    mapsUrl: DEFAULT_MAPS_URL_FORMAT[apiVersion],\n    ...(defaultCredentials.apiVersion === apiVersion && defaultCredentials),\n    ...credentials\n  } as unknown as Required<ClassicCredentials>;\n\n  let url: string;\n\n  const connection = type === MAP_TYPES.TILESET ? CONNECTIONS.BIGQUERY : CONNECTIONS.CARTO;\n\n  switch (apiVersion) {\n    case API_VERSIONS.V1:\n      // Maps API v1\n      const mapConfig = createMapConfig(source);\n      url = buildURLMapsAPIv1({mapConfig, credentials: localCreds});\n      const layergroup = await request({url, credentials: localCreds});\n      return layergroup.metadata.tilejson.vector;\n\n    case API_VERSIONS.V2:\n      // Maps API v2\n      url = buildURLMapsAPIv2({connection, type, source, credentials: localCreds});\n      return await request({url, credentials: localCreds});\n\n    default:\n      throw new Error(\n        `Invalid maps API version. It should be ${API_VERSIONS.V1} or ${API_VERSIONS.V2}`\n      );\n  }\n}\n\n/**\n * Request against Maps API\n */\nasync function request({url, credentials}: {url: string; credentials: ClassicCredentials}) {\n  let response;\n\n  try {\n    /* global fetch */\n    response = await fetch(url, {\n      headers: {\n        Accept: 'application/json'\n      }\n    });\n  } catch (error) {\n    throw new Error(`Failed to connect to Maps API: ${error}`);\n  }\n\n  const json = await response.json();\n\n  if (!response.ok) {\n    dealWithError({response, json, credentials});\n  }\n\n  return json;\n}\n\n/**\n * Display proper message from Maps API error\n */\nfunction dealWithError({\n  response,\n  json,\n  credentials\n}: {\n  response: Response;\n  json: any;\n  credentials: ClassicCredentials;\n}) {\n  switch (response.status) {\n    case 401:\n      throw new Error(\n        `Unauthorized access to Maps API: invalid combination of user ('${credentials.username}') and apiKey ('${credentials.apiKey}')`\n      );\n    case 403:\n      throw new Error(\n        `Unauthorized access to dataset: the provided apiKey('${credentials.apiKey}') doesn't provide access to the requested data`\n      );\n\n    default:\n      const e =\n        credentials.apiVersion === API_VERSIONS.V1 ? JSON.stringify(json.errors) : json.error;\n      throw new Error(e);\n  }\n}\n\nfunction initURLParameters(credentials: ClassicCredentials): string[] {\n  const encodedApiKey = encodeParameter('api_key', credentials.apiKey);\n  const encodedClient = encodeParameter('client', 'deck-gl-carto');\n  return [encodedApiKey, encodedClient];\n}\n\n/**\n * Build a URL with all required parameters\n */\nfunction buildURLMapsAPIv1({\n  mapConfig,\n  credentials\n}: {\n  mapConfig: unknown;\n  credentials: Required<ClassicCredentials>;\n}): string {\n  const parameters = initURLParameters(credentials);\n  const cfg = JSON.stringify(mapConfig);\n  return `${mapsUrl(credentials)}?${parameters.join('&')}&${encodeParameter('config', cfg)}`;\n}\n\nfunction buildURLMapsAPIv2({\n  connection,\n  type,\n  source,\n  credentials\n}: {\n  connection: string;\n  type: MapType;\n  source: string;\n  credentials: Required<ClassicCredentials>;\n}): string {\n  const parameters = initURLParameters(credentials);\n  // Query type is mapped to 'sql' at maps api v1\n  const mapsApiType = type === MAP_TYPES.QUERY ? 'sql' : type;\n  let url = `${mapsUrl(credentials)}/${connection}/${mapsApiType}?`;\n  url += `${encodeParameter('source', source)}&format=tilejson&${parameters.join('&')}`;\n  return url;\n}\n\n/**\n * Prepare a url valid for the specified user\n */\nfunction mapsUrl(credentials: Required<ClassicCredentials>) {\n  return credentials.mapsUrl\n    .replace(DEFAULT_USER_COMPONENT_IN_URL, credentials.username)\n    .replace(DEFAULT_REGION_COMPONENT_IN_URL, credentials.region);\n}\n\nfunction createMapConfig(sql: string) {\n  return {\n    version: '1.3.1',\n    buffersize: {\n      mvt: BUFFER_SIZE\n    },\n    layers: [\n      {\n        type: 'mapnik',\n        options: {\n          sql,\n          // eslint-disable-next-line camelcase\n          vector_extent: TILE_EXTENT\n        }\n      }\n    ]\n  };\n}\n"],"file":"maps-client.js"}