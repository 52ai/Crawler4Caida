{"version":3,"sources":["../../../src/api/maps-v3-client.ts"],"names":["getDefaultCredentials","buildMapsUrlFromBase","buildStatsUrlFromBase","API_VERSIONS","COLUMNS_SUPPORT","encodeParameter","FORMATS","GEO_COLUMN_SUPPORT","MAP_TYPES","TILE_FORMATS","parseMap","log","assert","MAX_GET_LENGTH","DEFAULT_CLIENT","request","method","url","accessToken","body","headers","Accept","Authorization","fetch","error","Error","requestJson","response","json","ok","dealWithError","requestData","format","NDJSON","data","rows","status","getParameters","type","source","geoColumn","columns","clientId","aggregationExp","aggregationResLevel","queryParameters","parameters","sourceName","QUERY","push","JSON","stringify","join","isSpatialIndexGeoColumn","spatialIndex","split","mapInstantiation","connection","credentials","baseUrl","mapsUrl","length","q","client","getUrlFromMetadata","metadata","m","checkFetchLayerDataParameters","apiVersion","V3","apiBaseUrl","includes","fetchLayerData","formatTiles","mapFormat","_fetchDataUrl","result","schema","defaultCredentials","localCreds","prioritizedFormats","GEOJSON","TILEJSON","f","Object","values","_fetchMapDataset","dataset","connectionName","cache","parseInt","URL","searchParams","get","_fetchTilestats","attribute","statsUrl","stats","attributes","tilestats","layers","index","findIndex","d","fillInMapDatasets","datasets","token","promises","map","Promise","all","fillInTileStats","keplerMapConfig","config","visState","layer","channel","keys","visualChannels","name","find","id","dataId","TILESET","filteredAttributes","a","fetchMap","cartoMapId","autoRefresh","onNewData","stopAutoRefresh","intervalId","setInterval","changed","some","v","clearInterval","geojsonLayers","filter","geojsonDatasetIds","forEach"],"mappings":"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","sourcesContent":["/**\n * Maps API Client for Carto 3\n */\nimport {\n  getDefaultCredentials,\n  buildMapsUrlFromBase,\n  buildStatsUrlFromBase,\n  CloudNativeCredentials\n} from '../config';\nimport {\n  API_VERSIONS,\n  COLUMNS_SUPPORT,\n  encodeParameter,\n  Format,\n  FORMATS,\n  GEO_COLUMN_SUPPORT,\n  MapInstantiation,\n  MapType,\n  MAP_TYPES,\n  QueryParameters,\n  SchemaField,\n  TileFormat,\n  TILE_FORMATS\n} from './maps-api-common';\nimport {parseMap} from './parseMap';\nimport {log} from '@deck.gl/core';\nimport {assert} from '../utils';\n\nconst MAX_GET_LENGTH = 2048;\nconst DEFAULT_CLIENT = 'deck-gl-carto';\n\ninterface RequestParams {\n  method?: string;\n  url: string;\n  accessToken?: string;\n  body?: any;\n}\n\n/**\n * Request against Maps API\n */\nasync function request({method, url, accessToken, body}: RequestParams): Promise<Response> {\n  const headers: Record<string, string> = {\n    Accept: 'application/json'\n  };\n\n  if (accessToken) {\n    headers.Authorization = `Bearer ${accessToken}`;\n  }\n\n  if (method === 'POST') {\n    headers['Content-Type'] = 'application/json';\n  }\n\n  try {\n    /* global fetch */\n    return await fetch(url, {\n      method,\n      headers,\n      body\n    });\n  } catch (error) {\n    throw new Error(`Failed to connect to Maps API: ${error}`);\n  }\n}\n\nasync function requestJson<T = unknown>({\n  method,\n  url,\n  accessToken,\n  body\n}: RequestParams): Promise<T> {\n  const response = await request({method, url, accessToken, body});\n  const json = await response.json();\n\n  if (!response.ok) {\n    dealWithError({response, error: json.error});\n  }\n  return json as T;\n}\n\nasync function requestData({\n  method,\n  url,\n  accessToken,\n  format,\n  body\n}: RequestParams & {\n  format: Format;\n}): Promise<Response | unknown> {\n  if (format === FORMATS.NDJSON) {\n    return request({method, url, accessToken, body});\n  }\n\n  const data = await requestJson<any>({method, url, accessToken, body});\n  return data.rows ? data.rows : data;\n}\n\n/**\n * Display proper message from Maps API error\n */\nfunction dealWithError({response, error}: {response: Response; error?: string}): never {\n  switch (response.status) {\n    case 400:\n      throw new Error(`Bad request. ${error}`);\n    case 401:\n    case 403:\n      throw new Error(`Unauthorized access. ${error}`);\n    default:\n      throw new Error(error);\n  }\n}\n\ntype FetchLayerDataParams = {\n  type: MapType;\n  source: string;\n  connection: string;\n  credentials: CloudNativeCredentials;\n  geoColumn?: string;\n  columns?: string[];\n  clientId?: string;\n  format?: Format;\n  formatTiles?: TileFormat;\n  aggregationExp?: string;\n  aggregationResLevel?: number;\n  queryParameters?: QueryParameters;\n};\n\n/**\n * Build a URL with all required parameters\n */\nfunction getParameters({\n  type,\n  source,\n  geoColumn,\n  columns,\n  clientId,\n  aggregationExp,\n  aggregationResLevel,\n  queryParameters\n}: Omit<FetchLayerDataParams, 'connection' | 'credentials'>) {\n  const parameters = [encodeParameter('client', clientId || DEFAULT_CLIENT)];\n\n  const sourceName = type === MAP_TYPES.QUERY ? 'q' : 'name';\n  parameters.push(encodeParameter(sourceName, source));\n\n  if (queryParameters) {\n    parameters.push(encodeParameter('queryParameters', JSON.stringify(queryParameters)));\n  }\n\n  if (geoColumn) {\n    parameters.push(encodeParameter('geo_column', geoColumn));\n  }\n  if (columns) {\n    parameters.push(encodeParameter('columns', columns.join(',')));\n  }\n  if (aggregationExp) {\n    parameters.push(encodeParameter('aggregationExp', aggregationExp));\n  } else if (isSpatialIndexGeoColumn(geoColumn)) {\n    // Default aggregationExp required for spatial index layers\n    parameters.push(encodeParameter('aggregationExp', '1 AS value'));\n  }\n  if (aggregationResLevel) {\n    parameters.push(encodeParameter('aggregationResLevel', aggregationResLevel));\n  }\n\n  return parameters.join('&');\n}\n\nfunction isSpatialIndexGeoColumn(geoColumn: string | undefined) {\n  const spatialIndex = geoColumn?.split(':')[0];\n  return spatialIndex === 'h3' || spatialIndex === 'quadbin';\n}\n\nexport async function mapInstantiation({\n  type,\n  source,\n  connection,\n  credentials,\n  geoColumn,\n  columns,\n  clientId,\n  aggregationExp,\n  aggregationResLevel,\n  queryParameters\n}: FetchLayerDataParams): Promise<MapInstantiation> {\n  const baseUrl = `${credentials.mapsUrl}/${connection}/${type}`;\n  const url = `${baseUrl}?${getParameters({\n    type,\n    source,\n    geoColumn,\n    columns,\n    clientId,\n    aggregationResLevel,\n    aggregationExp,\n    queryParameters\n  })}`;\n  const {accessToken} = credentials;\n\n  if (url.length > MAX_GET_LENGTH && type === MAP_TYPES.QUERY) {\n    // need to be a POST request\n    const body = JSON.stringify({\n      q: source,\n      client: clientId || DEFAULT_CLIENT,\n      queryParameters\n    });\n    return await requestJson({method: 'POST', url: baseUrl, accessToken, body});\n  }\n\n  return await requestJson({url, accessToken});\n}\n\nfunction getUrlFromMetadata(metadata: MapInstantiation, format: Format): string | null {\n  const m = metadata[format];\n\n  if (m && !m.error && m.url) {\n    return m.url[0];\n  }\n\n  return null;\n}\n\nfunction checkFetchLayerDataParameters({\n  type,\n  source,\n  connection,\n  credentials,\n  geoColumn,\n  columns,\n  aggregationExp,\n  aggregationResLevel\n}: FetchLayerDataParams) {\n  assert(connection, 'Must define connection');\n  assert(type, 'Must define a type');\n  assert(source, 'Must define a source');\n\n  assert(credentials.apiVersion === API_VERSIONS.V3, 'Method only available for v3');\n  assert(credentials.apiBaseUrl, 'Must define apiBaseUrl');\n  assert(credentials.accessToken, 'Must define an accessToken');\n\n  if (columns) {\n    assert(\n      COLUMNS_SUPPORT.includes(type),\n      `The columns parameter is not supported by type ${type}`\n    );\n  }\n  if (geoColumn) {\n    assert(\n      GEO_COLUMN_SUPPORT.includes(type),\n      `The geoColumn parameter is not supported by type ${type}`\n    );\n  } else {\n    assert(!aggregationExp, 'Have aggregationExp, but geoColumn parameter is missing');\n    assert(!aggregationResLevel, 'Have aggregationResLevel, but geoColumn parameter is missing');\n  }\n\n  if (!aggregationExp) {\n    assert(\n      !aggregationResLevel,\n      'Have aggregationResLevel, but aggregationExp parameter is missing'\n    );\n  }\n}\n\nexport interface FetchLayerDataResult {\n  data: any;\n  format?: Format;\n  schema: SchemaField[];\n}\nexport async function fetchLayerData({\n  type,\n  source,\n  connection,\n  credentials,\n  geoColumn,\n  columns,\n  format,\n  formatTiles,\n  clientId,\n  aggregationExp,\n  aggregationResLevel,\n  queryParameters\n}: FetchLayerDataParams): Promise<FetchLayerDataResult> {\n  // Internally we split data fetching into two parts to allow us to\n  // conditionally fetch the actual data, depending on the metadata state\n  const {url, accessToken, mapFormat, metadata} = await _fetchDataUrl({\n    type,\n    source,\n    connection,\n    credentials,\n    geoColumn,\n    columns,\n    format,\n    formatTiles,\n    clientId,\n    aggregationExp,\n    aggregationResLevel,\n    queryParameters\n  });\n\n  const data = await requestData({url, format: mapFormat, accessToken});\n  const result: FetchLayerDataResult = {data, format: mapFormat, schema: metadata.schema};\n  return result;\n}\n\nasync function _fetchDataUrl({\n  type,\n  source,\n  connection,\n  credentials,\n  geoColumn,\n  columns,\n  format,\n  formatTiles,\n  clientId,\n  aggregationExp,\n  aggregationResLevel,\n  queryParameters\n}: FetchLayerDataParams) {\n  const defaultCredentials = getDefaultCredentials();\n  // Only pick up default credentials if they have been defined for\n  // correct API version\n  const localCreds = {\n    ...(defaultCredentials.apiVersion === API_VERSIONS.V3 && defaultCredentials),\n    ...credentials\n  };\n  checkFetchLayerDataParameters({\n    type,\n    source,\n    connection,\n    credentials: localCreds,\n    geoColumn,\n    columns,\n    aggregationExp,\n    aggregationResLevel\n  });\n\n  if (!localCreds.mapsUrl) {\n    localCreds.mapsUrl = buildMapsUrlFromBase(localCreds.apiBaseUrl);\n  }\n\n  const metadata = await mapInstantiation({\n    type,\n    source,\n    connection,\n    credentials: localCreds,\n    geoColumn,\n    columns,\n    clientId,\n    aggregationExp,\n    aggregationResLevel,\n    queryParameters\n  });\n  let url: string | null = null;\n  let mapFormat: Format | undefined;\n\n  if (format) {\n    mapFormat = format;\n    url = getUrlFromMetadata(metadata, format);\n    assert(url, `Format ${format} not available`);\n  } else {\n    // guess map format\n    const prioritizedFormats = [FORMATS.GEOJSON, FORMATS.JSON, FORMATS.NDJSON, FORMATS.TILEJSON];\n    for (const f of prioritizedFormats) {\n      url = getUrlFromMetadata(metadata, f);\n      if (url) {\n        mapFormat = f;\n        break;\n      }\n    }\n    assert(url && mapFormat, 'Unsupported data formats received from backend.');\n  }\n\n  if (format === FORMATS.TILEJSON && formatTiles) {\n    log.assert(\n      Object.values(TILE_FORMATS).includes(formatTiles),\n      `Invalid value for formatTiles: ${formatTiles}. Use value from TILE_FORMATS`\n    );\n    url += `&${encodeParameter('formatTiles', formatTiles)}`;\n  }\n\n  const {accessToken} = localCreds;\n  return {url, accessToken, mapFormat, metadata};\n}\n\n/* global clearInterval, setInterval, URL */\nasync function _fetchMapDataset(\n  dataset,\n  accessToken: string,\n  credentials: CloudNativeCredentials,\n  clientId?: string,\n  queryParameters?: QueryParameters\n) {\n  const {\n    aggregationExp,\n    aggregationResLevel,\n    connectionName: connection,\n    columns,\n    format,\n    geoColumn,\n    source,\n    type\n  } = dataset;\n  // First fetch metadata\n  const {url, mapFormat} = await _fetchDataUrl({\n    aggregationExp,\n    aggregationResLevel,\n    clientId,\n    credentials: {...credentials, accessToken},\n    connection,\n    columns,\n    format,\n    geoColumn,\n    source,\n    type,\n    queryParameters\n  });\n\n  // Extract the last time the data changed\n  const cache = parseInt(new URL(url).searchParams.get('cache') || '', 10);\n  if (cache && dataset.cache === cache) {\n    return false;\n  }\n  dataset.cache = cache;\n\n  // Only fetch if the data has changed\n  dataset.data = await requestData({url, format: mapFormat, accessToken});\n\n  return true;\n}\n\nasync function _fetchTilestats(\n  attribute,\n  dataset,\n  accessToken: string,\n  credentials: CloudNativeCredentials\n) {\n  const {connectionName: connection, source, type} = dataset;\n\n  const statsUrl = buildStatsUrlFromBase(credentials.apiBaseUrl);\n  let url = `${statsUrl}/${connection}/`;\n  if (type === MAP_TYPES.QUERY) {\n    url += `${attribute}?q=${source}`;\n  } else {\n    // MAP_TYPE.TABLE\n    url += `${source}/${attribute}`;\n  }\n  const stats = await requestData({url, format: FORMATS.JSON, accessToken});\n\n  // Replace tilestats for attribute with value from API\n  const {attributes} = dataset.data.tilestats.layers[0];\n  const index = attributes.findIndex(d => d.attribute === attribute);\n  attributes[index] = stats;\n  return true;\n}\n\nasync function fillInMapDatasets(\n  {datasets, token},\n  clientId: string,\n  credentials: CloudNativeCredentials\n) {\n  const promises = datasets.map(dataset => _fetchMapDataset(dataset, token, credentials, clientId));\n  return await Promise.all(promises);\n}\n\nasync function fillInTileStats(\n  {datasets, keplerMapConfig, token},\n  credentials: CloudNativeCredentials\n) {\n  const attributes: {attribute?: string; dataset?: any}[] = [];\n  const {layers} = keplerMapConfig.config.visState;\n  for (const layer of layers) {\n    for (const channel of Object.keys(layer.visualChannels)) {\n      const attribute = layer.visualChannels[channel]?.name;\n      if (attribute) {\n        const dataset = datasets.find(d => d.id === layer.config.dataId);\n        if (dataset.data.tilestats && dataset.type !== MAP_TYPES.TILESET) {\n          // Only fetch stats for QUERY & TABLE map types\n          attributes.push({attribute, dataset});\n        }\n      }\n    }\n  }\n  // Remove duplicates to avoid repeated requests\n  const filteredAttributes: {attribute?: string; dataset?: any}[] = [];\n  for (const a of attributes) {\n    if (\n      !filteredAttributes.find(\n        ({attribute, dataset}) => attribute === a.attribute && dataset === a.dataset\n      )\n    ) {\n      filteredAttributes.push(a);\n    }\n  }\n\n  const promises = filteredAttributes.map(({attribute, dataset}) =>\n    _fetchTilestats(attribute, dataset, token, credentials)\n  );\n  return await Promise.all(promises);\n}\n\nexport async function fetchMap({\n  cartoMapId,\n  clientId,\n  credentials,\n  autoRefresh,\n  onNewData\n}: {\n  cartoMapId: string;\n  clientId: string;\n  credentials?: CloudNativeCredentials;\n  autoRefresh?: number;\n  onNewData?: (map: any) => void;\n}) {\n  const defaultCredentials = getDefaultCredentials();\n  const localCreds = {\n    ...(defaultCredentials.apiVersion === API_VERSIONS.V3 && defaultCredentials),\n    ...credentials\n  } as CloudNativeCredentials;\n  const {accessToken} = localCreds;\n\n  assert(cartoMapId, 'Must define CARTO map id: fetchMap({cartoMapId: \"XXXX-XXXX-XXXX\"})');\n\n  assert(localCreds.apiVersion === API_VERSIONS.V3, 'Method only available for v3');\n  assert(localCreds.apiBaseUrl, 'Must define apiBaseUrl');\n  if (!localCreds.mapsUrl) {\n    localCreds.mapsUrl = buildMapsUrlFromBase(localCreds.apiBaseUrl);\n  }\n\n  if (autoRefresh || onNewData) {\n    assert(onNewData, 'Must define `onNewData` when using autoRefresh');\n    assert(typeof onNewData === 'function', '`onNewData` must be a function');\n    assert(\n      typeof autoRefresh === 'number' && autoRefresh > 0,\n      '`autoRefresh` must be a positive number'\n    );\n  }\n\n  const url = `${localCreds.mapsUrl}/public/${cartoMapId}`;\n  const map = await requestJson<any>({url, accessToken});\n\n  // Periodically check if the data has changed. Note that this\n  // will not update when a map is published.\n  let stopAutoRefresh: (() => void) | undefined;\n  if (autoRefresh) {\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    const intervalId = setInterval(async () => {\n      const changed = await fillInMapDatasets(map, clientId, localCreds);\n      if (onNewData && changed.some(v => v === true)) {\n        onNewData(parseMap(map));\n      }\n    }, autoRefresh * 1000);\n    stopAutoRefresh = () => {\n      clearInterval(intervalId);\n    };\n  }\n\n  const geojsonLayers = map.keplerMapConfig.config.visState.layers.filter(\n    ({type}) => type === 'geojson' || type === 'point'\n  );\n  const geojsonDatasetIds = geojsonLayers.map(({config}) => config.dataId);\n  map.datasets.forEach(dataset => {\n    if (geojsonDatasetIds.includes(dataset.id)) {\n      dataset.format = 'geojson';\n    }\n  });\n\n  // Mutates map.datasets so that dataset.data contains data\n  await fillInMapDatasets(map, clientId, localCreds);\n\n  // Mutates attributes in visualChannels to contain tile stats\n  await fillInTileStats(map, localCreds);\n  return {\n    ...parseMap(map),\n    ...{stopAutoRefresh}\n  };\n}\n"],"file":"maps-v3-client.js"}