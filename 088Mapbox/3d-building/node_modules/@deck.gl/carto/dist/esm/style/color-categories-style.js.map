{"version":3,"sources":["../../../src/style/color-categories-style.ts"],"names":["getPalette","DEFAULT_PALETTE","NULL_COLOR","OTHERS_COLOR","assert","getAttrValue","colorCategories","attr","domain","colors","nullColor","othersColor","Array","isArray","colorsByCategory","palette","length","i","c","entries","d","value","Number","isFinite"],"mappings":"AAEA,OAAOA,UAAP,IAA2BC,eAA3B,EAA4CC,UAA5C,EAAwDC,YAAxD,QAA2E,WAA3E;AACA,SAAQC,MAAR,EAAmCC,YAAnC,QAAsD,SAAtD;AAUA,eAAe,SAASC,eAAT,CAA0C;AACvDC,EAAAA,IADuD;AAEvDC,EAAAA,MAFuD;AAGvDC,EAAAA,MAAM,GAAGR,eAH8C;AAIvDS,EAAAA,SAAS,GAAGR,UAJ2C;AAKvDS,EAAAA,WAAW,GAAGR;AALyC,CAA1C,EA0BoB;AACjCC,EAAAA,MAAM,CAACQ,KAAK,CAACC,OAAN,CAAcL,MAAd,CAAD,EAAwB,wDAAxB,CAAN;AAEA,QAAMM,gBAAgB,GAAG,EAAzB;AACA,QAAMC,OAAO,GAAG,OAAON,MAAP,KAAkB,QAAlB,GAA6BT,UAAU,CAACS,MAAD,EAASD,MAAM,CAACQ,MAAhB,CAAvC,GAAiEP,MAAjF;;AAEA,OAAK,MAAM,CAACQ,CAAD,EAAIC,CAAJ,CAAX,IAAqBV,MAAM,CAACW,OAAP,EAArB,EAAuC;AACrCL,IAAAA,gBAAgB,CAACI,CAAD,CAAhB,GAAsBH,OAAO,CAACE,CAAD,CAA7B;AACD;;AAED,SAAOG,CAAC,IAAI;AACV,UAAMC,KAAK,GAAGhB,YAAY,CAACE,IAAD,EAAOa,CAAP,CAA1B;AACA,WAAQ,OAAOC,KAAP,KAAiB,QAAjB,IAA6BC,MAAM,CAACC,QAAP,CAAgBF,KAAhB,CAA9B,IAAyD,OAAOA,KAAP,KAAiB,QAA1E,GACHP,gBAAgB,CAACO,KAAD,CAAhB,IAA2BV,WADxB,GAEHD,SAFJ;AAGD,GALD;AAMD","sourcesContent":["import {AccessorFunction} from '@deck.gl/core';\nimport {Feature} from 'geojson';\nimport getPalette, {Color, DEFAULT_PALETTE, NULL_COLOR, OTHERS_COLOR} from './palette';\nimport {assert, AttributeSelector, getAttrValue} from './utils';\n\n/**\n * Helper function for quickly creating a color category style.\n *\n * Data values of each attribute listed in the domain are mapped one to one\n * with corresponding colors in the range.\n *\n * @return accessor that maps objects to `Color` values\n */\nexport default function colorCategories<DataT = Feature>({\n  attr,\n  domain,\n  colors = DEFAULT_PALETTE,\n  nullColor = NULL_COLOR,\n  othersColor = OTHERS_COLOR\n}: {\n  /** Attribute or column to symbolize by */\n  attr: string | AttributeSelector<DataT, number | string>;\n\n  /** Category list. Must be a valid list of categories. */\n  domain: number[] | string[];\n\n  /**\n   * Color assigned to each domain value.\n   *\n   * Either Array of colors in RGBA or valid named CARTOColors palette.\n   * @default `PurpOr`\n   */\n  colors: string | Color[];\n\n  /** Color for null values. @default: [204, 204, 204] */\n  nullColor?: Color;\n\n  /** Fallback color for a category not correctly assigned. @default: [119, 119, 119] */\n  othersColor?: Color;\n}): AccessorFunction<DataT, Color> {\n  assert(Array.isArray(domain), 'Expected \"domain\" to be an array of numbers or strings');\n\n  const colorsByCategory = {};\n  const palette = typeof colors === 'string' ? getPalette(colors, domain.length) : colors;\n\n  for (const [i, c] of domain.entries()) {\n    colorsByCategory[c] = palette[i];\n  }\n\n  return d => {\n    const value = getAttrValue(attr, d);\n    return (typeof value === 'number' && Number.isFinite(value)) || typeof value === 'string'\n      ? colorsByCategory[value] || othersColor\n      : nullColor;\n  };\n}\n"],"file":"color-categories-style.js"}