"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _pbf = _interopRequireDefault(require("pbf"));

var _core = require("@deck.gl/core");

var _extensions = require("@deck.gl/extensions");

var _geoLayers = require("@deck.gl/geo-layers");

var _layers = require("@deck.gl/layers");

var _gis = require("@loaders.gl/gis");

var _cartoTile = require("./schema/carto-tile");

var _mapsApiCommon = require("../api/maps-api-common");

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function parseJSON(arrayBuffer) {
  return JSON.parse(new TextDecoder().decode(arrayBuffer));
}

function parsePbf(buffer) {
  var pbf = new _pbf.default(buffer);

  var tile = _cartoTile.TileReader.read(pbf);

  return tile;
}

function unpackProperties(properties) {
  if (!properties || !properties.length) {
    return [];
  }

  return properties.map(function (item) {
    var currentRecord = {};
    item.data.forEach(function (_ref) {
      var key = _ref.key,
          value = _ref.value;
      currentRecord[key] = value;
    });
    return currentRecord;
  });
}

function parseCartoTile(arrayBuffer, options) {
  if (!arrayBuffer) return null;
  var formatTiles = options && options.cartoTile && options.cartoTile.formatTiles;
  if (formatTiles === _mapsApiCommon.TILE_FORMATS.GEOJSON) return (0, _gis.geojsonToBinary)(parseJSON(arrayBuffer).features);
  var tile = parsePbf(arrayBuffer);
  var points = tile.points,
      lines = tile.lines,
      polygons = tile.polygons;
  var data = {
    points: _objectSpread(_objectSpread({}, points), {}, {
      properties: unpackProperties(points.properties)
    }),
    lines: _objectSpread(_objectSpread({}, lines), {}, {
      properties: unpackProperties(lines.properties)
    }),
    polygons: _objectSpread(_objectSpread({}, polygons), {}, {
      properties: unpackProperties(polygons.properties)
    })
  };
  return data;
}

var defaultTileFormat = _mapsApiCommon.TILE_FORMATS.BINARY;
var CartoTileLoader = {
  name: 'CARTO Tile',
  version: '1',
  id: 'cartoTile',
  module: 'carto',
  extensions: ['pbf'],
  mimeTypes: ['application/x-protobuf'],
  category: 'geometry',
  worker: false,
  parse: function () {
    var _parse = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee(arrayBuffer, options) {
      return _regenerator.default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", parseCartoTile(arrayBuffer, options));

            case 1:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    function parse(_x, _x2) {
      return _parse.apply(this, arguments);
    }

    return parse;
  }(),
  parseSync: parseCartoTile,
  options: {
    cartoTile: {
      formatTiles: defaultTileFormat
    }
  }
};

var defaultProps = _objectSpread(_objectSpread({}, _geoLayers.MVTLayer.defaultProps), {}, {
  formatTiles: defaultTileFormat,
  loaders: [CartoTileLoader]
});

var CartoTileLayer = function (_MVTLayer) {
  (0, _inherits2.default)(CartoTileLayer, _MVTLayer);

  var _super = _createSuper(CartoTileLayer);

  function CartoTileLayer() {
    (0, _classCallCheck2.default)(this, CartoTileLayer);
    return _super.apply(this, arguments);
  }

  (0, _createClass2.default)(CartoTileLayer, [{
    key: "getTileData",
    value: function getTileData(tile) {
      var url = (0, _geoLayers._getURLFromTemplate)(this.state.data, tile);

      if (!url) {
        return Promise.reject('Invalid URL');
      }

      var loadOptions = this.getLoadOptions();
      var _this$props = this.props,
          fetch = _this$props.fetch,
          formatTiles = _this$props.formatTiles;
      var signal = tile.signal;
      loadOptions = _objectSpread(_objectSpread({}, loadOptions), {}, {
        mimeType: 'application/x-protobuf'
      });

      if (formatTiles) {
        _core.log.assert(Object.values(_mapsApiCommon.TILE_FORMATS).includes(formatTiles), "Invalid value for formatTiles: ".concat(formatTiles, ". Use value from TILE_FORMATS"));

        loadOptions.cartoTile = {
          formatTiles: formatTiles
        };
      }

      return fetch(url, {
        propName: 'data',
        layer: this,
        loadOptions: loadOptions,
        signal: signal
      });
    }
  }, {
    key: "renderSubLayers",
    value: function renderSubLayers(props) {
      if (props.data === null) {
        return null;
      }

      var tileBbox = props.tile.bbox;
      var west = tileBbox.west,
          south = tileBbox.south,
          east = tileBbox.east,
          north = tileBbox.north;

      var subLayerProps = _objectSpread(_objectSpread({}, props), {}, {
        autoHighlight: false,
        extensions: [new _extensions.ClipExtension()].concat((0, _toConsumableArray2.default)(props.extensions || [])),
        clipBounds: [west, south, east, north]
      });

      var subLayer = new _layers.GeoJsonLayer(subLayerProps);
      return subLayer;
    }
  }]);
  return CartoTileLayer;
}(_geoLayers.MVTLayer);

exports.default = CartoTileLayer;
(0, _defineProperty2.default)(CartoTileLayer, "layerName", 'CartoTileLayer');
(0, _defineProperty2.default)(CartoTileLayer, "defaultProps", defaultProps);
//# sourceMappingURL=carto-tile-layer.js.map