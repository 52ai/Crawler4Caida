import { scaleLinear, scaleOrdinal, scaleLog, scalePoint, scaleQuantile, scaleQuantize, scaleSqrt, scaleThreshold } from 'd3-scale';
import { Layer, _ConstructorOf as ConstructorOf } from '@deck.gl/core/typed';
import { MVTLayer } from '@deck.gl/geo-layers/typed';
import CartoTileLayer from '../layers/carto-tile-layer';
import H3TileLayer from '../layers/h3-tile-layer';
import QuadbinTileLayer from '../layers/quadbin-tile-layer';
declare const SCALE_FUNCS: {
    linear: typeof scaleLinear;
    ordinal: typeof scaleOrdinal;
    log: typeof scaleLog;
    point: typeof scalePoint;
    quantile: typeof scaleQuantile;
    quantize: typeof scaleQuantize;
    sqrt: typeof scaleSqrt;
    custom: typeof scaleThreshold;
};
export declare type SCALE_TYPE = keyof typeof SCALE_FUNCS;
export declare const AGGREGATION: {
    average: string;
    maximum: string;
    minimum: string;
    sum: string;
};
export declare const OPACITY_MAP: {
    getFillColor: string;
    getLineColor: string;
    getTextColor: string;
};
export declare function getLayer(type: string, config: any, dataset: any): {
    Layer: ConstructorOf<Layer>;
    propMap: any;
    defaultProps: any;
};
export declare function layerFromTileDataset(formatTiles: string | null | undefined, scheme: string): typeof CartoTileLayer | typeof H3TileLayer | typeof MVTLayer | typeof QuadbinTileLayer;
declare function domainFromValues(values: any, scaleType: SCALE_TYPE): any;
export declare function opacityToAlpha(opacity: any): number;
export declare function getColorValueAccessor({ name }: {
    name: any;
}, colorAggregation: any, data: any): any;
export declare function getColorAccessor({ name }: {
    name: any;
}, scaleType: SCALE_TYPE, { aggregation, range: { colors, colorMap } }: {
    aggregation: any;
    range: {
        colors: any;
        colorMap: any;
    };
}, opacity: number | undefined, data: any): any;
export declare function getSizeAccessor({ name }: {
    name: any;
}, scaleType: SCALE_TYPE, aggregation: any, range: Iterable<Range>, data: any): any;
export declare function getTextAccessor({ name, type }: {
    name: any;
    type: any;
}, data: any): any;
export declare function getTextPixelOffsetAccessor({ alignment, anchor, size }: {
    alignment: any;
    anchor: any;
    size: any;
}, radius: any): number[] | ((d: any) => number[]);
export { domainFromValues as _domainFromValues };
//# sourceMappingURL=layer-map.d.ts.map