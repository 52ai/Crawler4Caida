interface KeyValueObject {
    key: string;
    value: string;
}
export interface Properties {
    data: KeyValueObject[];
}
interface Doubles {
    value: Float32Array;
    size: number;
}
interface Ints {
    value: Uint32Array;
    size: number;
}
interface NumericProp {
    value: number[];
}
interface Points {
    positions: Doubles;
    globalFeatureIds: Ints;
    featureIds: Ints;
    properties: Properties[];
    numericProps: Record<string, NumericProp>;
}
interface Lines extends Points {
    pathIndices: Ints;
}
interface Polygons extends Points {
    polygonIndices: Ints;
    primitivePolygonIndices: Ints;
    triangles: Ints;
}
export interface Tile {
    points: Points;
    lines: Lines;
    polygons: Polygons;
}
export declare class TileReader {
    static read(pbf: any, end?: number): Tile;
    static _readField(this: void, tag: number, obj: Tile, pbf: any): void;
}
export {};
//# sourceMappingURL=carto-tile.d.ts.map