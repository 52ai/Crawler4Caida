{"version":3,"sources":["../../src/json-converter.js"],"names":["assert","JSONConfiguration","instantiateClass","FUNCTION_IDENTIFIER","CONSTANT_IDENTIFIER","FUNCTION_KEY","parseJSON","isObject","value","JSONConverter","constructor","props","log","console","configuration","onJSONChange","json","convertedJson","setProps","finalize","mergeConfiguration","config","merge","convert","parsedJSON","convertJSON","postProcessConvertedJson","convertJson","convertJSONRecursively","key","Array","isArray","map","element","i","String","isClassInstance","convertClassInstance","convertFunctionObject","convertPlainObject","convertString","typeKey","isClass","Boolean","type","functionKey","targetFunction","availableFunctions","functions","matchedFn","result","string","startsWith","convertFunction","replace","constants","enumVarName","enumValName","split","enumerations"],"mappings":"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","sourcesContent":["// Converts JSON to props (\"hydrating\" classes, resolving enums and functions etc).\n// Lightly processes `json` props, transform string values, and extract `views` and `layers`\n// See: https://github.com/visgl/deck.gl/blob/master/dev-docs/RFCs/v6.1/json-layers-rfc.md\n//\n// NOTES:\n// * This is intended to provide minimal necessary processing required to support\n//   existing deck.gl props via JSON. This is not an implementation of alternate JSON schemas.\n// * Optionally, error checking could be applied, but ideally should leverage\n//   non-JSON specific mechanisms like prop types.\n\nimport assert from './utils/assert';\nimport JSONConfiguration from './json-configuration';\nimport {instantiateClass} from './helpers/instantiate-class';\n\nimport {FUNCTION_IDENTIFIER, CONSTANT_IDENTIFIER, FUNCTION_KEY} from './syntactic-sugar';\nimport parseJSON from './helpers/parse-json';\n\nconst isObject = value => value && typeof value === 'object';\n\nexport default class JSONConverter {\n  constructor(props) {\n    this.log = console; // eslint-disable-line\n    this.configuration = {};\n    this.onJSONChange = () => {};\n    this.json = null;\n    this.convertedJson = null;\n    this.setProps(props);\n  }\n\n  finalize() {}\n\n  setProps(props) {\n    // HANDLE CONFIGURATION PROPS\n    if ('configuration' in props) {\n      // Accept object or `JSONConfiguration`\n      this.configuration =\n        props.configuration instanceof JSONConfiguration\n          ? props.configuration\n          : new JSONConfiguration(props.configuration);\n    }\n\n    if ('onJSONChange' in props) {\n      this.onJSONChange = props.onJSONChange;\n    }\n  }\n\n  mergeConfiguration(config) {\n    this.configuration.merge(config);\n  }\n\n  convert(json) {\n    // Use shallow equality to ensure we only convert same json once\n    if (!json || json === this.json) {\n      return this.convertedJson;\n    }\n    // Save json for shallow diffing\n    this.json = json;\n\n    // Accept JSON strings by parsing them\n    const parsedJSON = parseJSON(json);\n\n    // Convert the JSON\n    let convertedJson = convertJSON(parsedJSON, this.configuration);\n\n    convertedJson = this.configuration.postProcessConvertedJson(convertedJson);\n\n    this.convertedJson = convertedJson;\n    return convertedJson;\n  }\n\n  // DEPRECATED: Backwards compatibility\n  convertJson(json) {\n    return this.convert(json);\n  }\n}\n\nfunction convertJSON(json, configuration) {\n  // Fixup configuration\n  configuration = new JSONConfiguration(configuration);\n  return convertJSONRecursively(json, '', configuration);\n}\n\n// Converts JSON to props (\"hydrating\" classes, resolving enums and functions etc).\nfunction convertJSONRecursively(json, key, configuration) {\n  if (Array.isArray(json)) {\n    return json.map((element, i) => convertJSONRecursively(element, String(i), configuration));\n  }\n\n  // If object.type is in configuration, instantiate\n  if (isClassInstance(json, configuration)) {\n    return convertClassInstance(json, configuration);\n  }\n\n  if (isObject(json)) {\n    // If object.function is in configuration, convert object to function\n    if (FUNCTION_KEY in json) {\n      return convertFunctionObject(json, configuration);\n    }\n    return convertPlainObject(json, configuration);\n  }\n\n  // Single value\n  if (typeof json === 'string') {\n    return convertString(json, key, configuration);\n  }\n\n  // Return unchanged (number, boolean, ...)\n  return json;\n}\n\n// Returns true if an object has a `type` field\nfunction isClassInstance(json, configuration) {\n  const {typeKey} = configuration;\n  const isClass = isObject(json) && Boolean(json[typeKey]);\n  return isClass;\n}\n\nfunction convertClassInstance(json, configuration) {\n  // Extract the class type field\n  const {typeKey} = configuration;\n  const type = json[typeKey];\n\n  // Prepare a props object and ensure all values have been converted\n  let props = {...json};\n  delete props[typeKey];\n\n  props = convertPlainObject(props, configuration);\n\n  return instantiateClass(type, props, configuration);\n}\n\n// Plain JS object, embed functions.\nfunction convertFunctionObject(json, configuration) {\n  const {functionKey} = configuration;\n\n  let props = {...json};\n  delete props[functionKey];\n\n  props = convertPlainObject(props, configuration);\n\n  const targetFunction = json[functionKey];\n  const availableFunctions = configuration.functions;\n  const matchedFn = availableFunctions[targetFunction];\n\n  assert(matchedFn, `Function ${targetFunction} not found.`);\n\n  return matchedFn(props);\n}\n\n// Plain JS object, convert each key and return.\nfunction convertPlainObject(json, configuration) {\n  assert(isObject(json));\n\n  const result = {};\n  for (const key in json) {\n    const value = json[key];\n    result[key] = convertJSONRecursively(value, key, configuration);\n  }\n  return result;\n}\n\n// Convert one string value in an object\n// TODO - We could also support string syntax for hydrating other types, like regexps...\n// But no current use case\nfunction convertString(string, key, configuration) {\n  // Here the JSON value is supposed to be treated as a function\n  if (string.startsWith(FUNCTION_IDENTIFIER) && configuration.convertFunction) {\n    string = string.replace(FUNCTION_IDENTIFIER, '');\n    return configuration.convertFunction(string, configuration);\n  }\n  if (string.startsWith(CONSTANT_IDENTIFIER)) {\n    string = string.replace(CONSTANT_IDENTIFIER, '');\n    if (configuration.constants[string]) {\n      return configuration.constants[string];\n    }\n    // enum\n    const [enumVarName, enumValName] = string.split('.');\n    return configuration.enumerations[enumVarName][enumValName];\n  }\n  return string;\n}\n"],"file":"json-converter.js"}