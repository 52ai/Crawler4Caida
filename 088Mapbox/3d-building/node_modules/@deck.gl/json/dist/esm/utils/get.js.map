{"version":3,"sources":["../../../src/utils/get.js"],"names":["get","container","compositeKey","keyList","getKeys","value","key","isObject","undefined","keyMap","split","Array","isArray"],"mappings":"AA2BA,OAAO,SAASA,GAAT,CAAaC,SAAb,EAAwBC,YAAxB,EAAsC;AAE3C,QAAMC,OAAO,GAAGC,OAAO,CAACF,YAAD,CAAvB;AAEA,MAAIG,KAAK,GAAGJ,SAAZ;;AACA,OAAK,MAAMK,GAAX,IAAkBH,OAAlB,EAA2B;AAEzBE,IAAAA,KAAK,GAAGE,QAAQ,CAACF,KAAD,CAAR,GAAkBA,KAAK,CAACC,GAAD,CAAvB,GAA+BE,SAAvC;AACD;;AACD,SAAOH,KAAP;AACD;;AAOD,SAASE,QAAT,CAAkBF,KAAlB,EAAyB;AACvB,SAAOA,KAAK,KAAK,IAAV,IAAkB,OAAOA,KAAP,KAAiB,QAA1C;AACD;;AAGD,MAAMI,MAAM,GAAG,EAAf;;AAKA,SAASL,OAAT,CAAiBF,YAAjB,EAA+B;AAC7B,MAAI,OAAOA,YAAP,KAAwB,QAA5B,EAAsC;AAEpC,QAAIC,OAAO,GAAGM,MAAM,CAACP,YAAD,CAApB;;AACA,QAAI,CAACC,OAAL,EAAc;AACZA,MAAAA,OAAO,GAAGD,YAAY,CAACQ,KAAb,CAAmB,GAAnB,CAAV;AACAD,MAAAA,MAAM,CAACP,YAAD,CAAN,GAAuBC,OAAvB;AACD;;AACD,WAAOA,OAAP;AACD;;AAED,SAAOQ,KAAK,CAACC,OAAN,CAAcV,YAAd,IAA8BA,YAA9B,GAA6C,CAACA,YAAD,CAApD;AACD","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/**\n * Access properties of nested containers using dot-path notation\n * Returns `undefined` if any container is not valid, instead of throwing\n * @param {Object} container - container that supports get\n * @param {String|*} compositeKey - key to access, can be '.'-separated string\n * @return {*} - value in the final key of the nested container, or `undefined`\n */\nexport function get(container, compositeKey) {\n  // Split the key into subkeys\n  const keyList = getKeys(compositeKey);\n  // Recursively get the value of each key;\n  let value = container;\n  for (const key of keyList) {\n    // If any intermediate subfield is not an object, return undefined\n    value = isObject(value) ? value[key] : undefined;\n  }\n  return value;\n}\n\n/**\n * Checks if argument is an \"indexable\" object (not a primitive value, nor null)\n * @param {*} value - JavaScript value to be tested\n * @return {Boolean} - true if argument is a JavaScript object\n */\nfunction isObject(value) {\n  return value !== null && typeof value === 'object';\n}\n\n// Cache key to key arrays for speed\nconst keyMap = {};\n\n// Takes a string of '.' separated keys and returns an array of keys\n// - 'feature.geometry.type' => ['feature', 'geometry', 'type']\n// - 'feature' => ['feature']\nfunction getKeys(compositeKey) {\n  if (typeof compositeKey === 'string') {\n    // else assume string and split around dots\n    let keyList = keyMap[compositeKey];\n    if (!keyList) {\n      keyList = compositeKey.split('.');\n      keyMap[compositeKey] = keyList;\n    }\n    return keyList;\n  }\n  // Wrap in array if needed\n  return Array.isArray(compositeKey) ? compositeKey : [compositeKey];\n}\n"],"file":"get.js"}