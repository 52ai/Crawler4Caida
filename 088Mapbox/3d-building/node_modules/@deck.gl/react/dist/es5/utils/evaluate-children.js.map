{"version":3,"sources":["../../../src/utils/evaluate-children.ts"],"names":["MAP_STYLE","position","zIndex","evaluateChildren","children","childProps","Array","isArray","map","child","isComponent","isReactMap","style","needsDeckGLViewProps","componentClass","type","componentProps","defaultProps","mapStyle","deckGLViewProps"],"mappings":";;;;;;;;;;;;AACA;;AAEA,IAAMA,SAAS,GAAG;AAACC,EAAAA,QAAQ,EAAE,UAAX;AAAuBC,EAAAA,MAAM,EAAE,CAAC;AAAhC,CAAlB;;AAEe,SAASC,gBAAT,CACbC,QADa,EAEbC,UAFa,EAGI;AACjB,MAAI,OAAOD,QAAP,KAAoB,UAAxB,EAAoC;AAClC,WAAOA,QAAQ,CAACC,UAAD,CAAf;AACD;;AACD,MAAIC,KAAK,CAACC,OAAN,CAAcH,QAAd,CAAJ,EAA6B;AAC3B,WAAOA,QAAQ,CAACI,GAAT,CAAa,UAAAC,KAAK;AAAA,aAAIN,gBAAgB,CAACM,KAAD,EAAQJ,UAAR,CAApB;AAAA,KAAlB,CAAP;AACD;;AACD,MAAIK,WAAW,CAACN,QAAD,CAAf,EAA2B;AAGzB,QAAIO,UAAU,CAACP,QAAD,CAAd,EAA0B;AAExBC,MAAAA,UAAU,CAACO,KAAX,GAAmBZ,SAAnB;AACA,aAAO,yBAAaI,QAAb,EAAuBC,UAAvB,CAAP;AACD;;AACD,QAAIQ,oBAAoB,CAACT,QAAD,CAAxB,EAAoC;AAClC,aAAO,yBAAaA,QAAb,EAAuBC,UAAvB,CAAP;AACD;AACF;;AAED,SAAOD,QAAP;AACD;;AAEM,SAASM,WAAT,CAAqBD,KAArB,EAA0E;AAC/E,SAAQA,KAAK,IAAI,sBAAOA,KAAP,MAAiB,QAA1B,IAAsC,UAAUA,KAAjD,IAA2D,KAAlE;AACD;;AAED,SAASE,UAAT,CAAoBF,KAApB,EAAwD;AACtD,MAAMK,cAAc,GAAGL,KAAK,CAACM,IAA7B;AAEA,MAAMC,cAAc,GAAGF,cAAc,IAAIA,cAAc,CAACG,YAAxD;AACA,SAAOD,cAAc,IAAIA,cAAc,CAACE,QAAxC;AACD;;AAED,SAASL,oBAAT,CAA8BJ,KAA9B,EAAkE;AAChE,MAAMK,cAAc,GAAGL,KAAK,CAACM,IAA7B;AAEA,SAAOD,cAAc,IAAIA,cAAc,CAACK,eAAxC;AACD","sourcesContent":["import * as React from 'react';\nimport {cloneElement} from 'react';\n\nconst MAP_STYLE = {position: 'absolute', zIndex: -1};\n\nexport default function evaluateChildren(\n  children: React.ReactNode,\n  childProps: any\n): React.ReactNode {\n  if (typeof children === 'function') {\n    return children(childProps);\n  }\n  if (Array.isArray(children)) {\n    return children.map(child => evaluateChildren(child, childProps));\n  }\n  if (isComponent(children)) {\n    // Special treatment for react-map-gl's Map component\n    // to support shorthand use case <DeckGL><StaticMap /></DeckGL>\n    if (isReactMap(children)) {\n      // Place map under the canvas\n      childProps.style = MAP_STYLE;\n      return cloneElement(children, childProps);\n    }\n    if (needsDeckGLViewProps(children)) {\n      return cloneElement(children, childProps);\n    }\n  }\n\n  return children;\n}\n\nexport function isComponent(child: React.ReactNode): child is React.ReactElement {\n  return (child && typeof child === 'object' && 'type' in child) || false;\n}\n\nfunction isReactMap(child: React.ReactElement): boolean {\n  const componentClass = child.type;\n  // @ts-expect-error defaultProps is not defined on JSXElementConstructor\n  const componentProps = componentClass && componentClass.defaultProps;\n  return componentProps && componentProps.mapStyle;\n}\n\nfunction needsDeckGLViewProps(child: React.ReactElement): boolean {\n  const componentClass = child.type;\n  // @ts-expect-error deckGLViewProps is a custom hack defined on the constructor (nebula.gl)\n  return componentClass && componentClass.deckGLViewProps;\n}\n"],"file":"evaluate-children.js"}