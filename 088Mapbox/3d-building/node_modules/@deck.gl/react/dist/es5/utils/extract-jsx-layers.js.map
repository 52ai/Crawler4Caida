{"version":3,"sources":["../../../src/utils/extract-jsx-layers.ts"],"names":["wrapInView","node","View","Array","isArray","map","type","React","Fragment","props","children","extractJSXLayers","layers","views","reactChildren","jsxLayers","jsxViews","Children","forEach","reactElement","ElementType","Layer","layer","createLayer","push","id","view","Object","keys","length","values","LayerType","reactProps","defaultProps","key"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {createElement} from 'react';\nimport {inheritsFrom} from './inherits-from';\nimport {Layer, View} from '@deck.gl/core';\nimport {isComponent} from './evaluate-children';\nimport type {LayersList} from '@deck.gl/core';\n\n// recursively wrap render callbacks in `View`\nfunction wrapInView(node: React.ReactNode): React.ReactNode {\n  if (typeof node === 'function') {\n    // React.Children does not traverse functions.\n    // All render callbacks must be protected under a <View>\n    // @ts-expect-error View is not a ReactJSXElement constructor. Only used as a temporary wrapper and will be removed in extractJSXLayers\n    return createElement(View, {}, node);\n  }\n  if (Array.isArray(node)) {\n    return node.map(wrapInView);\n  }\n  if (isComponent(node)) {\n    if (node.type === React.Fragment) {\n      return wrapInView(node.props.children);\n    }\n    if (inheritsFrom(node.type, View)) {\n      return node;\n    }\n  }\n  return node;\n}\n\n// extracts any deck.gl layers masquerading as react elements from props.children\nexport default function extractJSXLayers({\n  children,\n  layers = [],\n  views = null\n}: {\n  children?: React.ReactNode;\n  layers?: LayersList;\n  views?: View | View[] | null;\n}): {\n  children: React.ReactNode[];\n  layers: LayersList;\n  views: View | View[] | null;\n} {\n  const reactChildren: React.ReactNode[] = []; // extract real react elements (i.e. not deck.gl layers)\n  const jsxLayers: LayersList = []; // extracted layer from react children, will add to deck.gl layer array\n  const jsxViews: Record<string, View> = {};\n\n  // React.children\n  React.Children.forEach(wrapInView(children), reactElement => {\n    if (isComponent(reactElement)) {\n      // For some reason Children.forEach doesn't filter out `null`s\n      const ElementType = reactElement.type;\n      if (inheritsFrom(ElementType, Layer)) {\n        const layer = createLayer(ElementType, reactElement.props);\n        jsxLayers.push(layer);\n      } else {\n        reactChildren.push(reactElement);\n      }\n\n      // empty id => default view\n      if (inheritsFrom(ElementType, View) && ElementType !== View && reactElement.props.id) {\n        // @ts-ignore Cannot instantiate an abstract class (View)\n        const view = new ElementType(reactElement.props);\n        jsxViews[view.id] = view;\n      }\n    } else if (reactElement) {\n      reactChildren.push(reactElement);\n    }\n  });\n\n  // Avoid modifying views if no JSX views were found\n  if (Object.keys(jsxViews).length > 0) {\n    // If a view is specified in both views prop and JSX, use the one in views\n    if (Array.isArray(views)) {\n      views.forEach(view => {\n        jsxViews[view.id] = view;\n      });\n    } else if (views) {\n      jsxViews[views.id] = views;\n    }\n    views = Object.values(jsxViews);\n  }\n\n  // Avoid modifying layers array if no JSX layers were found\n  layers = jsxLayers.length > 0 ? [...jsxLayers, ...layers] : layers;\n\n  return {layers, children: reactChildren, views};\n}\n\nfunction createLayer(LayerType: typeof Layer, reactProps: any): Layer {\n  const props = {};\n  // Layer.defaultProps is treated as ReactElement.defaultProps and merged into react props\n  // Remove them\n  const defaultProps = LayerType.defaultProps || {};\n  for (const key in reactProps) {\n    if (defaultProps[key] !== reactProps[key]) {\n      props[key] = reactProps[key];\n    }\n  }\n  // @ts-ignore Cannot instantiate an abstract class (Layer)\n  return new LayerType(props);\n}\n"],"file":"extract-jsx-layers.js"}