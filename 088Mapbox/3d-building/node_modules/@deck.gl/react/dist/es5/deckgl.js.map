{"version":3,"sources":["../../src/deckgl.ts"],"names":["getRefHandles","thisRef","deck","pickObject","opts","pickMultipleObjects","pickObjects","redrawDeck","redrawReason","_drawLayers","createDeckInstance","DeckClass","props","_customRender","viewports","getViewports","lastRenderedViewports","forceUpdate","DeckGL","ref","version","setVersion","_thisRef","control","v","current","containerRef","canvasRef","jsxProps","layers","views","children","inRender","handleViewStateChange","params","viewState","viewStateUpdateRequested","onViewStateChange","handleInteractionStateChange","interactionStateUpdateRequested","onInteractionStateChange","deckProps","forwardProps","style","width","height","parent","canvas","setProps","Deck","finalize","currentViewports","isInitialized","undefined","ContextProvider","id","containerStyle","canvasStyle","childrenUnderViews","key","defaultProps"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport * as React from 'react';\nimport {\n  createElement,\n  useRef,\n  useState,\n  useMemo,\n  useEffect,\n  useImperativeHandle,\n  forwardRef\n} from 'react';\nimport {Deck} from '@deck.gl/core';\nimport useIsomorphicLayoutEffect from './utils/use-isomorphic-layout-effect';\n\nimport extractJSXLayers from './utils/extract-jsx-layers';\nimport positionChildrenUnderViews from './utils/position-children-under-views';\nimport extractStyles from './utils/extract-styles';\n\nimport type {DeckGLContextValue} from './utils/position-children-under-views';\nimport type {DeckProps, Viewport} from '@deck.gl/core';\n\n/* eslint-disable max-statements, accessor-pairs */\ntype DeckInstanceRef = {\n  deck?: Deck;\n  redrawReason?: string | null;\n  lastRenderedViewports?: Viewport[];\n  viewStateUpdateRequested?: any;\n  interactionStateUpdateRequested?: any;\n  forceUpdate: () => void;\n  version: number;\n  control: React.ReactHTMLElement<HTMLElement> | null;\n};\n\n// Remove prop types in the base Deck class that support externally supplied canvas/WebGLContext\n/** DeckGL React component props */\nexport type DeckGLProps = Omit<\n  DeckProps,\n  'width' | 'height' | 'gl' | 'parent' | 'canvas' | '_customRender'\n> & {\n  Deck?: typeof Deck;\n  width?: string | number;\n  height?: string | number;\n  children?: React.ReactNode;\n  ContextProvider?: React.Context<DeckGLContextValue>['Provider'];\n};\n\nexport type DeckGLRef = {\n  deck?: Deck;\n  pickObject: Deck['pickObject'];\n  pickObjects: Deck['pickObjects'];\n  pickMultipleObjects: Deck['pickMultipleObjects'];\n};\n\nfunction getRefHandles(thisRef: DeckInstanceRef): DeckGLRef {\n  return {\n    get deck() {\n      return thisRef.deck;\n    },\n    // The following method can only be called after ref is available, by which point deck is defined in useEffect\n    pickObject: opts => thisRef.deck!.pickObject(opts),\n    pickMultipleObjects: opts => thisRef.deck!.pickMultipleObjects(opts),\n    pickObjects: opts => thisRef.deck!.pickObjects(opts)\n  };\n}\n\nfunction redrawDeck(thisRef: DeckInstanceRef) {\n  if (thisRef.redrawReason) {\n    // Only redraw if we have received a dirty flag\n    // @ts-expect-error accessing protected method\n    thisRef.deck._drawLayers(thisRef.redrawReason);\n    thisRef.redrawReason = null;\n  }\n}\n\nfunction createDeckInstance(\n  thisRef: DeckInstanceRef,\n  DeckClass: typeof Deck,\n  props: DeckProps\n): Deck {\n  const deck = new DeckClass({\n    ...props,\n    // The Deck's animation loop is independent from React's render cycle, causing potential\n    // synchronization issues. We provide this custom render function to make sure that React\n    // and Deck update on the same schedule.\n    _customRender: redrawReason => {\n      // Save the dirty flag for later\n      thisRef.redrawReason = redrawReason;\n\n      // Viewport/view state is passed to child components as props.\n      // If they have changed, we need to trigger a React rerender to update children props.\n      const viewports = deck.getViewports();\n      if (thisRef.lastRenderedViewports !== viewports) {\n        // Viewports have changed, update children props first.\n        // This will delay the Deck canvas redraw till after React update (in useLayoutEffect)\n        // so that the canvas does not get rendered before the child components update.\n        thisRef.forceUpdate();\n      } else {\n        redrawDeck(thisRef);\n      }\n    }\n  });\n  return deck;\n}\n\nconst DeckGL = forwardRef<DeckGLRef, DeckGLProps>((props, ref) => {\n  // A mechanism to force redraw\n  const [version, setVersion] = useState(0);\n  // A reference to persistent states\n  const _thisRef = useRef<DeckInstanceRef>({\n    control: null,\n    version,\n    forceUpdate: () => setVersion(v => v + 1)\n  });\n  const thisRef = _thisRef.current;\n  // DOM refs\n  const containerRef = useRef(null);\n  const canvasRef = useRef(null);\n\n  // extract any deck.gl layers masquerading as react elements from props.children\n  const jsxProps = useMemo(\n    () => extractJSXLayers(props),\n    [props.layers, props.views, props.children]\n  );\n\n  // Callbacks\n  let inRender = true;\n\n  const handleViewStateChange: DeckProps['onViewStateChange'] = params => {\n    if (inRender && props.viewState) {\n      // Callback may invoke a state update. Defer callback to after render() to avoid React error\n      // In React StrictMode, render is executed twice and useEffect/useLayoutEffect is executed once\n      // Store deferred parameters in ref so that we can access it in another render\n      thisRef.viewStateUpdateRequested = params;\n      return null;\n    }\n    thisRef.viewStateUpdateRequested = null;\n    return props.onViewStateChange?.(params);\n  };\n\n  const handleInteractionStateChange: DeckProps['onInteractionStateChange'] = params => {\n    if (inRender) {\n      // Callback may invoke a state update. Defer callback to after render() to avoid React error\n      // In React StrictMode, render is executed twice and useEffect/useLayoutEffect is executed once\n      // Store deferred parameters in ref so that we can access it in another render\n      thisRef.interactionStateUpdateRequested = params;\n    } else {\n      thisRef.interactionStateUpdateRequested = null;\n      props.onInteractionStateChange?.(params);\n    }\n  };\n\n  // Update Deck's props. If Deck needs redraw, this will trigger a call to `_customRender` in\n  // the next animation frame.\n  // Needs to be called both from initial mount, and when new props are received\n  const deckProps = useMemo(() => {\n    const forwardProps: DeckProps = {\n      ...props,\n      // Override user styling props. We will set the canvas style in render()\n      style: null,\n      width: '100%',\n      height: '100%',\n      parent: containerRef.current,\n      canvas: canvasRef.current,\n      layers: jsxProps.layers,\n      views: jsxProps.views,\n      onViewStateChange: handleViewStateChange,\n      onInteractionStateChange: handleInteractionStateChange\n    };\n\n    // The defaultValue for _customRender is null, which would overwrite the definition\n    // of _customRender. Remove to avoid frequently redeclaring the method here.\n    delete forwardProps._customRender;\n\n    if (thisRef.deck) {\n      thisRef.deck.setProps(forwardProps);\n    }\n\n    return forwardProps;\n  }, [props]);\n\n  useEffect(() => {\n    const DeckClass = props.Deck || Deck;\n\n    thisRef.deck = createDeckInstance(thisRef, DeckClass, {\n      ...deckProps,\n      parent: containerRef.current,\n      canvas: canvasRef.current\n    });\n\n    return () => thisRef.deck?.finalize();\n  }, []);\n\n  useIsomorphicLayoutEffect(() => {\n    // render has just been called. The children are positioned based on the current view state.\n    // Redraw Deck canvas immediately, if necessary, using the current view state, so that it\n    // matches the child components.\n    redrawDeck(thisRef);\n\n    // Execute deferred callbacks\n    const {viewStateUpdateRequested, interactionStateUpdateRequested} = thisRef;\n    if (viewStateUpdateRequested) {\n      handleViewStateChange(viewStateUpdateRequested);\n    }\n    if (interactionStateUpdateRequested) {\n      handleInteractionStateChange(interactionStateUpdateRequested);\n    }\n  });\n\n  useImperativeHandle(ref, () => getRefHandles(thisRef), []);\n\n  const currentViewports =\n    thisRef.deck && thisRef.deck.isInitialized ? thisRef.deck.getViewports() : undefined;\n\n  const {ContextProvider, width, height, id, style} = props;\n\n  const {containerStyle, canvasStyle} = useMemo(\n    () => extractStyles({width, height, style}),\n    [width, height, style]\n  );\n\n  // Props changes may lead to 3 types of updates:\n  // 1. Only the WebGL canvas - updated in Deck's render cycle (next animation frame)\n  // 2. Only the DOM - updated in React's lifecycle (now)\n  // 3. Both the WebGL canvas and the DOM - defer React rerender to next animation frame just\n  //    before Deck redraw to ensure perfect synchronization & avoid excessive redraw\n  //    This is because multiple changes may happen to Deck between two frames e.g. transition\n  if (\n    (!thisRef.viewStateUpdateRequested && thisRef.lastRenderedViewports === currentViewports) || // case 2\n    thisRef.version !== version // case 3 just before deck redraws\n  ) {\n    thisRef.lastRenderedViewports = currentViewports;\n    thisRef.version = version;\n\n    // Render the background elements (typically react-map-gl instances)\n    // using the view descriptors\n    const childrenUnderViews = positionChildrenUnderViews({\n      children: jsxProps.children,\n      deck: thisRef.deck,\n      ContextProvider\n    });\n\n    const canvas = createElement('canvas', {\n      key: 'canvas',\n      id: id || 'deckgl-overlay',\n      ref: canvasRef,\n      style: canvasStyle\n    });\n\n    // Render deck.gl as the last child\n    thisRef.control = createElement(\n      'div',\n      {id: `${id || 'deckgl'}-wrapper`, ref: containerRef, style: containerStyle},\n      [canvas, childrenUnderViews]\n    );\n  }\n\n  inRender = false;\n  return thisRef.control;\n});\n\nDeckGL.defaultProps = Deck.defaultProps;\n\nexport default DeckGL;\n"],"file":"deckgl.js"}