{"version":3,"sources":["../../../src/utils/extract-jsx-layers.ts"],"names":["React","createElement","inheritsFrom","Layer","View","isComponent","wrapInView","node","Array","isArray","map","type","Fragment","props","children","extractJSXLayers","layers","views","reactChildren","jsxLayers","jsxViews","Children","forEach","reactElement","ElementType","layer","createLayer","push","id","view","Object","keys","length","values","LayerType","reactProps","defaultProps","key"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {createElement} from 'react';\nimport {inheritsFrom} from './inherits-from';\nimport {Layer, View} from '@deck.gl/core';\nimport {isComponent} from './evaluate-children';\nimport type {LayersList} from '@deck.gl/core';\n\n// recursively wrap render callbacks in `View`\nfunction wrapInView(node: React.ReactNode): React.ReactNode {\n  if (typeof node === 'function') {\n    // React.Children does not traverse functions.\n    // All render callbacks must be protected under a <View>\n    // @ts-expect-error View is not a ReactJSXElement constructor. Only used as a temporary wrapper and will be removed in extractJSXLayers\n    return createElement(View, {}, node);\n  }\n  if (Array.isArray(node)) {\n    return node.map(wrapInView);\n  }\n  if (isComponent(node)) {\n    if (node.type === React.Fragment) {\n      return wrapInView(node.props.children);\n    }\n    if (inheritsFrom(node.type, View)) {\n      return node;\n    }\n  }\n  return node;\n}\n\n// extracts any deck.gl layers masquerading as react elements from props.children\nexport default function extractJSXLayers({\n  children,\n  layers = [],\n  views = null\n}: {\n  children?: React.ReactNode;\n  layers?: LayersList;\n  views?: View | View[] | null;\n}): {\n  children: React.ReactNode[];\n  layers: LayersList;\n  views: View | View[] | null;\n} {\n  const reactChildren: React.ReactNode[] = []; // extract real react elements (i.e. not deck.gl layers)\n  const jsxLayers: LayersList = []; // extracted layer from react children, will add to deck.gl layer array\n  const jsxViews: Record<string, View> = {};\n\n  // React.children\n  React.Children.forEach(wrapInView(children), reactElement => {\n    if (isComponent(reactElement)) {\n      // For some reason Children.forEach doesn't filter out `null`s\n      const ElementType = reactElement.type;\n      if (inheritsFrom(ElementType, Layer)) {\n        const layer = createLayer(ElementType, reactElement.props);\n        jsxLayers.push(layer);\n      } else {\n        reactChildren.push(reactElement);\n      }\n\n      // empty id => default view\n      if (inheritsFrom(ElementType, View) && ElementType !== View && reactElement.props.id) {\n        // @ts-ignore Cannot instantiate an abstract class (View)\n        const view = new ElementType(reactElement.props);\n        jsxViews[view.id] = view;\n      }\n    } else if (reactElement) {\n      reactChildren.push(reactElement);\n    }\n  });\n\n  // Avoid modifying views if no JSX views were found\n  if (Object.keys(jsxViews).length > 0) {\n    // If a view is specified in both views prop and JSX, use the one in views\n    if (Array.isArray(views)) {\n      views.forEach(view => {\n        jsxViews[view.id] = view;\n      });\n    } else if (views) {\n      jsxViews[views.id] = views;\n    }\n    views = Object.values(jsxViews);\n  }\n\n  // Avoid modifying layers array if no JSX layers were found\n  layers = jsxLayers.length > 0 ? [...jsxLayers, ...layers] : layers;\n\n  return {layers, children: reactChildren, views};\n}\n\nfunction createLayer(LayerType: typeof Layer, reactProps: any): Layer {\n  const props = {};\n  // Layer.defaultProps is treated as ReactElement.defaultProps and merged into react props\n  // Remove them\n  const defaultProps = LayerType.defaultProps || {};\n  for (const key in reactProps) {\n    if (defaultProps[key] !== reactProps[key]) {\n      props[key] = reactProps[key];\n    }\n  }\n  // @ts-ignore Cannot instantiate an abstract class (Layer)\n  return new LayerType(props);\n}\n"],"file":"extract-jsx-layers.js"}