{"version":3,"sources":["../../src/utils.ts"],"names":["Deck","Matrix4","Vector2","MAX_LATITUDE","createDeckInstance","map","overlay","deck","props","userData","_googleMap","destroyDeckInstance","eventListeners","click","dblclick","mousemove","mouseout","newDeck","useDevicePixels","interleaved","style","pointerEvents","parent","getContainer","initialViewState","longitude","latitude","zoom","controller","eventType","addListener","evt","handleMouseEvent","_eventListeners","container","document","createElement","position","Object","assign","getPanes","overlayLayer","appendChild","getMap","getDiv","remove","finalize","getViewPropsFromOverlay","width","height","getMapSize","projection","getProjection","bounds","getBounds","left","top","ne","getNorthEast","sw","getSouthWest","topRight","fromLatLngToDivPixel","bottomLeft","centerLngLat","pixelToLngLat","centerH","google","maps","LatLng","centerContainerPx","fromLatLngToContainerPixel","centerDivPx","leftOffset","Math","round","x","topOffset","y","topLngLat","bottomLngLat","abs","center","centerPx","delta","sub","bearing","verticalAngle","PI","heading","getHeading","getZoom","scale","viewDiagonal","len","mapDiagonal","log2","pitch","getTilt","getViewPropsFromCoordinateTransformer","transformer","tilt","getCameraParams","fovy","aspect","near","far","projectionMatrix","perspective","focalDistance","viewState","altitude","lat","lng","repeat","firstChild","offsetWidth","offsetHeight","point","Point","latLng","fromContainerPixelToLatLng","getEventPixel","event","pixel","getViewports","project","type","mockEvent","offsetCenter","srcEvent","tapCount","_onPointerDown","_onEvent","_onPointerMove"],"mappings":"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","sourcesContent":["/* global google, document */\nimport {Deck} from '@deck.gl/core';\nimport {Matrix4, Vector2} from '@math.gl/core';\nimport type {MjolnirGestureEvent, MjolnirPointerEvent} from 'mjolnir.js';\n\n// https://en.wikipedia.org/wiki/Web_Mercator_projection#Formulas\nconst MAX_LATITUDE = 85.05113;\n\ntype UserData = {\n  _googleMap: google.maps.Map;\n  _eventListeners: Record<string, google.maps.MapsEventListener | null>;\n};\n\n/**\n * Get a new deck instance\n * @param map (google.maps.Map) - The parent Map instance\n * @param overlay (google.maps.OverlayView) - A maps Overlay instance\n * @param [deck] (Deck) - a previously created instances\n */\nexport function createDeckInstance(\n  map: google.maps.Map,\n  overlay: google.maps.OverlayView | google.maps.WebGLOverlayView,\n  deck: Deck | null | undefined,\n  props\n): Deck {\n  if (deck) {\n    if (deck.userData._googleMap === map) {\n      return deck;\n    }\n    // deck instance was created for a different map\n    destroyDeckInstance(deck);\n  }\n\n  const eventListeners = {\n    click: null,\n    dblclick: null,\n    mousemove: null,\n    mouseout: null\n  };\n\n  const newDeck = new Deck({\n    ...props,\n    useDevicePixels: props.interleaved ? true : props.useDevicePixels,\n    style: props.interleaved ? null : {pointerEvents: 'none'},\n    parent: getContainer(overlay, props.style),\n    initialViewState: {\n      longitude: 0,\n      latitude: 0,\n      zoom: 1\n    },\n    controller: false\n  });\n\n  // Register event listeners\n  for (const eventType in eventListeners) {\n    eventListeners[eventType] = map.addListener(eventType, evt =>\n      handleMouseEvent(newDeck, eventType, evt)\n    );\n  }\n\n  // Attach userData directly to Deck instance\n  (newDeck.userData as UserData)._googleMap = map;\n  (newDeck.userData as UserData)._eventListeners = eventListeners;\n\n  return newDeck;\n}\n\n// Create a container that will host the deck canvas and tooltip\nfunction getContainer(\n  overlay: google.maps.OverlayView | google.maps.WebGLOverlayView,\n  style?: Partial<CSSStyleDeclaration>\n): HTMLElement {\n  const container = document.createElement('div');\n  container.style.position = 'absolute';\n  Object.assign(container.style, style);\n\n  // The DOM structure has a different structure depending on whether\n  // the Google map is rendered as vector or raster\n  if ('getPanes' in overlay) {\n    overlay.getPanes()?.overlayLayer.appendChild(container);\n  } else {\n    overlay.getMap()?.getDiv().appendChild(container);\n  }\n  return container;\n}\n\n/**\n * Safely remove a deck instance\n * @param deck (Deck) - a previously created instances\n */\nexport function destroyDeckInstance(deck: Deck) {\n  const {_eventListeners: eventListeners} = deck.userData;\n\n  // Unregister event listeners\n  for (const eventType in eventListeners) {\n    // Check that event listener was set before trying to remove.\n    if (eventListeners[eventType]) {\n      eventListeners[eventType].remove();\n    }\n  }\n\n  deck.finalize();\n}\n\n/* eslint-disable max-statements */\n/**\n * Get the current view state\n * @param map (google.maps.Map) - The parent Map instance\n * @param overlay (google.maps.OverlayView) - A maps Overlay instance\n */\n// eslint-disable-next-line complexity\nexport function getViewPropsFromOverlay(map: google.maps.Map, overlay: google.maps.OverlayView) {\n  const {width, height} = getMapSize(map);\n\n  // Canvas position relative to draggable map's container depends on\n  // overlayView's projection, not the map's. Have to use the center of the\n  // map for this, not the top left, for the same reason as above.\n  const projection = overlay.getProjection();\n\n  const bounds = map.getBounds();\n  if (!bounds) {\n    return {width, height, left: 0, top: 0};\n  }\n\n  const ne = bounds.getNorthEast();\n  const sw = bounds.getSouthWest();\n  const topRight = projection.fromLatLngToDivPixel(ne);\n  const bottomLeft = projection.fromLatLngToDivPixel(sw);\n\n  // google maps places overlays in a container anchored at the map center.\n  // the container CSS is manipulated during dragging.\n  // We need to update left/top of the deck canvas to match the base map.\n  const centerLngLat = pixelToLngLat(projection, width / 2, height / 2);\n  const centerH = new google.maps.LatLng(0, centerLngLat[0]);\n  const centerContainerPx = projection.fromLatLngToContainerPixel(centerH);\n  const centerDivPx = projection.fromLatLngToDivPixel(centerH);\n\n  if (!topRight || !bottomLeft || !centerDivPx || !centerContainerPx) {\n    return {width, height, left: 0, top: 0};\n  }\n  const leftOffset = Math.round(centerDivPx.x - centerContainerPx.x);\n  let topOffset = centerDivPx.y - centerContainerPx.y;\n\n  const topLngLat = pixelToLngLat(projection, width / 2, 0);\n  const bottomLngLat = pixelToLngLat(projection, width / 2, height);\n\n  // Compute fractional center.\n  let latitude = centerLngLat[1];\n  const longitude = centerLngLat[0];\n\n  // Adjust vertical offset - limit latitude\n  if (Math.abs(latitude) > MAX_LATITUDE) {\n    latitude = latitude > 0 ? MAX_LATITUDE : -MAX_LATITUDE;\n    const center = new google.maps.LatLng(latitude, longitude);\n    const centerPx = projection.fromLatLngToContainerPixel(center);\n    // @ts-ignore (TS2531) Object is possibly 'null'\n    topOffset += centerPx.y - height / 2;\n  }\n  topOffset = Math.round(topOffset);\n\n  // Compute fractional bearing\n  const delta = new Vector2(topLngLat).sub(bottomLngLat);\n  let bearing = (180 * delta.verticalAngle()) / Math.PI;\n  if (bearing < 0) bearing += 360;\n\n  // Maps sometimes returns undefined instead of 0\n  const heading = map.getHeading() || 0;\n\n  let zoom = (map.getZoom() as number) - 1;\n\n  let scale;\n\n  if (bearing === 0) {\n    // At full world view (always unrotated) simply compare height, as diagonal\n    // is incorrect due to multiple world copies\n    scale = height ? (bottomLeft.y - topRight.y) / height : 1;\n  } else if (bearing === heading) {\n    // Fractional zoom calculation only correct when bearing is not animating\n    const viewDiagonal = new Vector2([topRight.x, topRight.y])\n      .sub([bottomLeft.x, bottomLeft.y])\n      .len();\n    const mapDiagonal = new Vector2([width, -height]).len();\n    scale = mapDiagonal ? viewDiagonal / mapDiagonal : 1;\n  }\n\n  // When resizing aggressively, occasionally ne and sw are the same points\n  // See https://github.com/visgl/deck.gl/issues/4218\n  zoom += Math.log2(scale || 1);\n\n  return {\n    width,\n    height,\n    left: leftOffset,\n    top: topOffset,\n    zoom,\n    bearing,\n    pitch: map.getTilt(),\n    latitude,\n    longitude\n  };\n}\n\n/* eslint-enable max-statements */\n\n/**\n * Get the current view state\n * @param map (google.maps.Map) - The parent Map instance\n * @param transformer (google.maps.CoordinateTransformer) - A CoordinateTransformer instance\n */\nexport function getViewPropsFromCoordinateTransformer(\n  map: google.maps.Map,\n  transformer: google.maps.CoordinateTransformer\n) {\n  const {width, height} = getMapSize(map);\n  const {center, heading: bearing, tilt: pitch, zoom} = transformer.getCameraParams();\n\n  // Match Google projection matrix\n  const fovy = 25;\n  const aspect = height ? width / height : 1;\n\n  // Match depth range (crucial for correct z-sorting)\n  const near = 0.75;\n  const far = 300000000000000;\n  // const far = Infinity;\n\n  const projectionMatrix = new Matrix4().perspective({\n    fovy: (fovy * Math.PI) / 180,\n    aspect,\n    near,\n    far\n  });\n  const focalDistance = 0.5 * projectionMatrix[5];\n\n  return {\n    width,\n    height,\n    viewState: {\n      altitude: focalDistance,\n      bearing,\n      latitude: center.lat(),\n      longitude: center.lng(),\n      pitch,\n      projectionMatrix,\n      repeat: true,\n      zoom: zoom - 1\n    }\n  };\n}\n\nfunction getMapSize(map: google.maps.Map): {width: number; height: number} {\n  // The map fills the container div unless it's in fullscreen mode\n  // at which point the first child of the container is promoted\n  const container = map.getDiv().firstChild as HTMLElement | null;\n  return {\n    // @ts-ignore (TS2531) Object is possibly 'null'\n    width: container.offsetWidth,\n    // @ts-ignore (TS2531) Object is possibly 'null'\n    height: container.offsetHeight\n  };\n}\n\nfunction pixelToLngLat(\n  projection: google.maps.MapCanvasProjection,\n  x: number,\n  y: number\n): [longitude: number, latitude: number] {\n  const point = new google.maps.Point(x, y);\n  const latLng = projection.fromContainerPixelToLatLng(point);\n  // @ts-ignore (TS2531) Object is possibly 'null'\n  return [latLng.lng(), latLng.lat()];\n}\n\nfunction getEventPixel(event, deck: Deck): {x: number; y: number} {\n  if (event.pixel) {\n    return event.pixel;\n  }\n  // event.pixel may not exist when clicking on a POI\n  // https://developers.google.com/maps/documentation/javascript/reference/map#MouseEvent\n  const point = deck.getViewports()[0].project([event.latLng.lng(), event.latLng.lat()]);\n  return {\n    x: point[0],\n    y: point[1]\n  };\n}\n\n// Triggers picking on a mouse event\nfunction handleMouseEvent(deck: Deck, type: string, event) {\n  const mockEvent: Record<string, any> = {\n    type,\n    offsetCenter: getEventPixel(event, deck),\n    srcEvent: event\n  };\n\n  switch (type) {\n    case 'click':\n      mockEvent.tapCount = 1;\n      // Hack: because we do not listen to pointer down, perform picking now\n      deck._onPointerDown(mockEvent as MjolnirPointerEvent);\n      deck._onEvent(mockEvent as MjolnirGestureEvent);\n      break;\n\n    case 'dblclick':\n      mockEvent.type = 'click';\n      mockEvent.tapCount = 2;\n      deck._onEvent(mockEvent as MjolnirGestureEvent);\n      break;\n\n    case 'mousemove':\n      mockEvent.type = 'pointermove';\n      deck._onPointerMove(mockEvent as MjolnirPointerEvent);\n      break;\n\n    case 'mouseout':\n      mockEvent.type = 'pointerleave';\n      deck._onPointerMove(mockEvent as MjolnirPointerEvent);\n      break;\n\n    default:\n      return;\n  }\n}\n"],"file":"utils.js"}