export declare type ResourceManagerContext = {
    gl: WebGLRenderingContext;
    resourceManager: ResourceManager;
};
export default class ResourceManager {
    protocol: string;
    private _context;
    private _resources;
    private _consumers;
    private _pruneRequest;
    constructor({ gl, protocol }: {
        gl: any;
        protocol: any;
    });
    contains(resourceId: string): boolean;
    add({ resourceId, data, forceUpdate, persistent }: {
        resourceId: string;
        data: any;
        forceUpdate?: boolean;
        persistent?: boolean;
    }): void;
    remove(resourceId: string): void;
    unsubscribe({ consumerId }: {
        consumerId: string;
    }): void;
    subscribe<T>({ resourceId, onChange, consumerId, requestId }: {
        resourceId: string;
        onChange: (data: T | Promise<T>) => void;
        consumerId: string;
        requestId: string;
    }): T | Promise<T> | undefined;
    prune(): void;
    finalize(): void;
    private _track;
    private _prune;
}
//# sourceMappingURL=resource-manager.d.ts.map