"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getMaskBounds = getMaskBounds;
exports.getMaskViewport = getMaskViewport;

var _orthographicView = _interopRequireDefault(require("../../views/orthographic-view"));

var _webMercatorViewport = _interopRequireDefault(require("../../viewports/web-mercator-viewport"));

var _webMercator = require("@math.gl/web-mercator");

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function getMaskBounds(_ref) {
  var layers = _ref.layers,
      viewport = _ref.viewport;
  var bounds = null;

  var _iterator = _createForOfIteratorHelper(layers),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var layer = _step.value;
      var subLayerBounds = layer.getBounds();

      if (subLayerBounds) {
        if (bounds) {
          bounds[0] = Math.min(bounds[0], subLayerBounds[0][0]);
          bounds[1] = Math.min(bounds[1], subLayerBounds[0][1]);
          bounds[2] = Math.max(bounds[2], subLayerBounds[1][0]);
          bounds[3] = Math.max(bounds[3], subLayerBounds[1][1]);
        } else {
          bounds = [subLayerBounds[0][0], subLayerBounds[0][1], subLayerBounds[1][0], subLayerBounds[1][1]];
        }
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  var viewportBounds = viewport.getBounds();

  if (!bounds) {
    return viewportBounds;
  }

  var paddedBounds = _doubleBounds(viewportBounds);

  if (bounds[2] - bounds[0] < paddedBounds[2] - paddedBounds[0] || bounds[3] - bounds[1] < paddedBounds[3] - paddedBounds[1]) {
    return bounds;
  }

  bounds[0] = Math.max(bounds[0], paddedBounds[0]);
  bounds[1] = Math.max(bounds[1], paddedBounds[1]);
  bounds[2] = Math.min(bounds[2], paddedBounds[2]);
  bounds[3] = Math.min(bounds[3], paddedBounds[3]);
  return bounds;
}

function getMaskViewport(_ref2) {
  var bounds = _ref2.bounds,
      viewport = _ref2.viewport,
      width = _ref2.width,
      height = _ref2.height;

  if (bounds[2] <= bounds[0] || bounds[3] <= bounds[1]) {
    return null;
  }

  var padding = 1;
  width -= padding * 2;
  height -= padding * 2;

  if (viewport instanceof _webMercatorViewport.default) {
    var _fitBounds = (0, _webMercator.fitBounds)({
      width: width,
      height: height,
      bounds: [[bounds[0], bounds[1]], [bounds[2], bounds[3]]],
      maxZoom: 20
    }),
        longitude = _fitBounds.longitude,
        latitude = _fitBounds.latitude,
        zoom = _fitBounds.zoom;

    return new _webMercatorViewport.default({
      longitude: longitude,
      latitude: latitude,
      zoom: zoom,
      x: padding,
      y: padding,
      width: width,
      height: height
    });
  }

  var center = [(bounds[0] + bounds[2]) / 2, (bounds[1] + bounds[3]) / 2, 0];
  var scale = Math.min(20, width / (bounds[2] - bounds[0]), height / (bounds[3] - bounds[1]));
  return new _orthographicView.default({
    x: padding,
    y: padding
  }).makeViewport({
    width: width,
    height: height,
    viewState: {
      target: center,
      zoom: Math.log2(scale)
    }
  });
}

function _doubleBounds(bounds) {
  var size = {
    x: bounds[2] - bounds[0],
    y: bounds[3] - bounds[1]
  };
  var center = {
    x: bounds[0] + 0.5 * size.x,
    y: bounds[1] + 0.5 * size.y
  };
  return [center.x - size.x, center.y - size.y, center.x + size.x, center.y + size.y];
}
//# sourceMappingURL=utils.js.map