{"version":3,"sources":["../../../src/utils/flatten.ts"],"names":["flatten","array","filter","Array","isArray","flattenArray","result","index","length","value","push","fillArray","target","source","start","count","total","copied","i","copyWithin"],"mappings":";;;;;;;;AAgCO,SAASA,OAAT,CACLC,KADK,EAGA;AAAA,MADLC,MACK,uEAD6B;AAAA,WAAM,IAAN;AAAA,GAC7B;;AAEL,MAAI,CAACC,KAAK,CAACC,OAAN,CAAcH,KAAd,CAAL,EAA2B;AACzB,WAAOC,MAAM,CAACD,KAAD,CAAN,GAAgB,CAACA,KAAD,CAAhB,GAA0B,EAAjC;AACD;;AAED,SAAOI,YAAY,CAACJ,KAAD,EAAQC,MAAR,EAAgB,EAAhB,CAAnB;AACD;;AAGD,SAASG,YAAT,CAAyBJ,KAAzB,EAAgDC,MAAhD,EAAiFI,MAAjF,EAAmG;AACjG,MAAIC,KAAK,GAAG,CAAC,CAAb;;AACA,SAAO,EAAEA,KAAF,GAAUN,KAAK,CAACO,MAAvB,EAA+B;AAC7B,QAAMC,KAAK,GAAGR,KAAK,CAACM,KAAD,CAAnB;;AACA,QAAIJ,KAAK,CAACC,OAAN,CAAcK,KAAd,CAAJ,EAA0B;AACxBJ,MAAAA,YAAY,CAACI,KAAD,EAAQP,MAAR,EAAgBI,MAAhB,CAAZ;AACD,KAFD,MAEO,IAAIJ,MAAM,CAACO,KAAD,CAAV,EAAmB;AACxBH,MAAAA,MAAM,CAACI,IAAP,CAAYD,KAAZ;AACD;AACF;;AACD,SAAOH,MAAP;AACD;;AAGM,SAASK,SAAT,OAA2D;AAAA,MAAvCC,MAAuC,QAAvCA,MAAuC;AAAA,MAA/BC,MAA+B,QAA/BA,MAA+B;AAAA,wBAAvBC,KAAuB;AAAA,MAAvBA,KAAuB,2BAAf,CAAe;AAAA,wBAAZC,KAAY;AAAA,MAAZA,KAAY,2BAAJ,CAAI;AAChE,MAAMP,MAAM,GAAGK,MAAM,CAACL,MAAtB;AACA,MAAMQ,KAAK,GAAGD,KAAK,GAAGP,MAAtB;AACA,MAAIS,MAAM,GAAG,CAAb;;AACA,OAAK,IAAIC,CAAC,GAAGJ,KAAb,EAAoBG,MAAM,GAAGT,MAA7B,EAAqCS,MAAM,EAA3C,EAA+C;AAC7CL,IAAAA,MAAM,CAACM,CAAC,EAAF,CAAN,GAAcL,MAAM,CAACI,MAAD,CAApB;AACD;;AAED,SAAOA,MAAM,GAAGD,KAAhB,EAAuB;AAGrB,QAAIC,MAAM,GAAGD,KAAK,GAAGC,MAArB,EAA6B;AAC3BL,MAAAA,MAAM,CAACO,UAAP,CAAkBL,KAAK,GAAGG,MAA1B,EAAkCH,KAAlC,EAAyCA,KAAK,GAAGG,MAAjD;AACAA,MAAAA,MAAM,IAAI,CAAV;AACD,KAHD,MAGO;AACLL,MAAAA,MAAM,CAACO,UAAP,CAAkBL,KAAK,GAAGG,MAA1B,EAAkCH,KAAlC,EAAyCA,KAAK,GAAGE,KAAR,GAAgBC,MAAzD;AACAA,MAAAA,MAAM,GAAGD,KAAT;AACD;AACF;;AAED,SAAOJ,MAAP;AACD","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\ntype NestedArray<T> = (T | NestedArray<T>)[];\n\n/**\n * Flattens a nested array into a single level array,\n * or a single value into an array with one value\n * @example flatten([[1, [2]], [3], 4]) => [1, 2, 3, 4]\n * @example flatten(1) => [1]\n * @param array The array to flatten.\n * @param filter= - Optional predicate called on each `value` to\n *   determine if it should be included (pushed onto) the resulting array.\n * @return Returns the new flattened array (new array or `result` if provided)\n */\nexport function flatten<T>(\n  array: T | NestedArray<T>,\n  filter: (element: T) => boolean = () => true\n): T[] {\n  // Wrap single object in array\n  if (!Array.isArray(array)) {\n    return filter(array) ? [array] : [];\n  }\n  // Deep flatten and filter the array\n  return flattenArray(array, filter, []);\n}\n\n/** Deep flattens an array. Helper to `flatten`, see its parameters */\nfunction flattenArray<T>(array: NestedArray<T>, filter: (element: T) => boolean, result: T[]): T[] {\n  let index = -1;\n  while (++index < array.length) {\n    const value = array[index];\n    if (Array.isArray(value)) {\n      flattenArray(value, filter, result);\n    } else if (filter(value)) {\n      result.push(value);\n    }\n  }\n  return result;\n}\n\n/** Uses copyWithin to significantly speed up typed array value filling */\nexport function fillArray({target, source, start = 0, count = 1}) {\n  const length = source.length;\n  const total = count * length;\n  let copied = 0;\n  for (let i = start; copied < length; copied++) {\n    target[i++] = source[copied];\n  }\n\n  while (copied < total) {\n    // If we have copied less than half, copy everything we got\n    // else copy remaining in one operation\n    if (copied < total - copied) {\n      target.copyWithin(start + copied, start, start + copied);\n      copied *= 2;\n    } else {\n      target.copyWithin(start + copied, start, start + total - copied);\n      copied = total;\n    }\n  }\n\n  return target;\n}\n"],"file":"flatten.js"}