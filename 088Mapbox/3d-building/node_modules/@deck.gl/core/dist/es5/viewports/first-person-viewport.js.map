{"version":3,"sources":["../../../src/viewports/first-person-viewport.ts"],"names":["FirstPersonViewport","props","longitude","latitude","modelMatrix","bearing","pitch","up","spherical","SphericalCoordinates","dir","toVector3","normalize","center","Matrix4","transformAsVector","zoom","Number","isFinite","scale","Math","pow","viewMatrix","lookAt","eye","Viewport"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;;;;;;;;;IAuCqBA,mB;;;;;AAInB,+BAAYC,KAAZ,EAA+C;AAAA;;AAAA;AAE7C,QAAOC,SAAP,GAAmFD,KAAnF,CAAOC,SAAP;AAAA,QAAkBC,QAAlB,GAAmFF,KAAnF,CAAkBE,QAAlB;AAAA,QAA4BC,WAA5B,GAAmFH,KAAnF,CAA4BG,WAA5B;AAAA,yBAAmFH,KAAnF,CAAyCI,OAAzC;AAAA,QAAyCA,OAAzC,+BAAmD,CAAnD;AAAA,uBAAmFJ,KAAnF,CAAsDK,KAAtD;AAAA,QAAsDA,KAAtD,6BAA8D,CAA9D;AAAA,oBAAmFL,KAAnF,CAAiEM,EAAjE;AAAA,QAAiEA,EAAjE,0BAAsE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAtE;AAGA,QAAMC,SAAS,GAAG,IAAIC,2BAAJ,CAAyB;AACzCJ,MAAAA,OAAO,EAAPA,OADyC;AAGzCC,MAAAA,KAAK,EAAEA,KAAK,KAAK,CAAC,EAAX,GAAgB,MAAhB,GAAyB,KAAKA;AAHI,KAAzB,CAAlB;AAKA,QAAMI,GAAG,GAAGF,SAAS,CAACG,SAAV,GAAsBC,SAAtB,EAAZ;AAGA,QAAMC,MAAM,GAAGT,WAAW,GAAG,IAAIU,aAAJ,CAAYV,WAAZ,EAAyBW,iBAAzB,CAA2CL,GAA3C,CAAH,GAAqDA,GAA/E;AAGA,QAAMM,IAAI,GAAGC,MAAM,CAACC,QAAP,CAAgBf,QAAhB,IAA4B,+BAAa;AAACA,MAAAA,QAAQ,EAAEA;AAAX,KAAb,CAA5B,GAA2E,CAAxF;AACA,QAAMgB,KAAK,GAAGC,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYL,IAAZ,CAAd;AACA,QAAMM,UAAU,GAAG,IAAIR,aAAJ,GAAcS,MAAd,CAAqB;AAACC,MAAAA,GAAG,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAN;AAAiBX,MAAAA,MAAM,EAANA,MAAjB;AAAyBN,MAAAA,EAAE,EAAFA;AAAzB,KAArB,EAAmDY,KAAnD,CAAyDA,KAAzD,CAAnB;AAEA,8DACKlB,KADL;AAEEe,MAAAA,IAAI,EAAJA,IAFF;AAGEM,MAAAA,UAAU,EAAVA;AAHF;AApB6C;AAAA;AA0B7C,UAAKnB,QAAL,GAAgBA,QAAhB;AACA,UAAKD,SAAL,GAAiBA,SAAjB;AA3B6C;AA4B9C;;;EAhC8CuB,iB","sourcesContent":["import Viewport from '../viewports/viewport';\nimport {getMeterZoom} from '@math.gl/web-mercator';\nimport {Matrix4, _SphericalCoordinates as SphericalCoordinates} from '@math.gl/core';\n\nexport type FirstPersonViewportOptions = {\n  /** Name of the viewport */\n  id?: string;\n  /** Left offset from the canvas edge, in pixels */\n  x?: number;\n  /** Top offset from the canvas edge, in pixels */\n  y?: number;\n  /** Viewport width in pixels */\n  width?: number;\n  /** Viewport height in pixels */\n  height?: number;\n  /** Longitude of the camera, in the geospatial case. */\n  longitude?: number;\n  /** Latitude of the camera, in the geospatial case. */\n  latitude?: number;\n  /** Meter offsets of the camera from the lng-lat anchor point. Default `[0, 0, 0]`. */\n  position?: [number, number, number];\n  /** Bearing (heading) of the camera in degrees. Default `0` (north). */\n  bearing?: number;\n  /** Pitch (tilt) of the camera in degrees. Default `0` (horizontal). */\n  pitch?: number;\n  /** Transform applied to the camera position and direction */\n  modelMatrix?: number[] | null;\n  /** Custom projection matrix */\n  projectionMatrix?: number[];\n  /** The up direction, default positive z axis. */\n  up?: [number, number, number];\n  /** Field of view covered by camera, in degrees. Default `75`. */\n  fovy?: number;\n  /** Distance of near clipping plane. Default `0.1`. */\n  near?: number;\n  /** Distance of far clipping plane. Default `1000`. */\n  far?: number;\n  /** Modifier of viewport scale. Corresponds to the number of pixels per meter. Default `1`. */\n  focalDistance?: number;\n};\n\nexport default class FirstPersonViewport extends Viewport {\n  longitude?: number;\n  latitude?: number;\n\n  constructor(props: FirstPersonViewportOptions) {\n    // TODO - push direction handling into Matrix4.lookAt\n    const {longitude, latitude, modelMatrix, bearing = 0, pitch = 0, up = [0, 0, 1]} = props;\n\n    // Always calculate direction from bearing and pitch\n    const spherical = new SphericalCoordinates({\n      bearing,\n      // Avoid \"pixel project matrix not invertible\" error\n      pitch: pitch === -90 ? 0.0001 : 90 + pitch\n    });\n    const dir = spherical.toVector3().normalize();\n\n    // Direction is relative to model coordinates, of course\n    const center = modelMatrix ? new Matrix4(modelMatrix).transformAsVector(dir) : dir;\n\n    // Just the direction. All the positioning is done in viewport.js\n    const zoom = Number.isFinite(latitude) ? getMeterZoom({latitude: latitude as number}) : 0;\n    const scale = Math.pow(2, zoom);\n    const viewMatrix = new Matrix4().lookAt({eye: [0, 0, 0], center, up}).scale(scale);\n\n    super({\n      ...props,\n      zoom,\n      viewMatrix\n    });\n\n    this.latitude = latitude;\n    this.longitude = longitude;\n  }\n}\n"],"file":"first-person-viewport.js"}