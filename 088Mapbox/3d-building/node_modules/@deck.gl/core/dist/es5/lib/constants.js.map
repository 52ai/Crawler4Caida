{"version":3,"sources":["../../../src/lib/constants.ts"],"names":["COORDINATE_SYSTEM","DEFAULT","LNGLAT","METER_OFFSETS","LNGLAT_OFFSETS","CARTESIAN","Object","defineProperty","get","log","deprecated","PROJECTION_MODE","WEB_MERCATOR","GLOBE","WEB_MERCATOR_AUTO_OFFSET","IDENTITY","UNIT","common","meters","pixels","EVENTS","click","handler","panstart","panmove","panend","OPERATION","DRAW","MASK"],"mappings":";;;;;;;;;AAuBA;;AAKO,IAAMA,iBAAiB,GAAG;AAI/BC,EAAAA,OAAO,EAAE,CAAC,CAJqB;AAU/BC,EAAAA,MAAM,EAAE,CAVuB;AAgB/BC,EAAAA,aAAa,EAAE,CAhBgB;AAuB/BC,EAAAA,cAAc,EAAE,CAvBe;AA4B/BC,EAAAA,SAAS,EAAE;AA5BoB,CAA1B;;AAoCPC,MAAM,CAACC,cAAP,CAAsBP,iBAAtB,EAAyC,UAAzC,EAAqD;AACnDQ,EAAAA,GAAG,EAAE,eAAM;AACTC,iBAAIC,UAAJ,CAAe,4BAAf,EAA6C,6BAA7C;;AACA,WAAO,CAAP;AACD;AAJkD,CAArD;AAWO,IAAMC,eAAe,GAAG;AAI7BC,EAAAA,YAAY,EAAE,CAJe;AAQ7BC,EAAAA,KAAK,EAAE,CARsB;AAa7BC,EAAAA,wBAAwB,EAAE,CAbG;AAkB7BC,EAAAA,QAAQ,EAAE;AAlBmB,CAAxB;;AAqBA,IAAMC,IAAI,GAAG;AAClBC,EAAAA,MAAM,EAAE,CADU;AAElBC,EAAAA,MAAM,EAAE,CAFU;AAGlBC,EAAAA,MAAM,EAAE;AAHU,CAAb;;AAMA,IAAMC,MAAM,GAAG;AACpBC,EAAAA,KAAK,EAAE;AAACC,IAAAA,OAAO,EAAE;AAAV,GADa;AAEpBC,EAAAA,QAAQ,EAAE;AAACD,IAAAA,OAAO,EAAE;AAAV,GAFU;AAGpBE,EAAAA,OAAO,EAAE;AAACF,IAAAA,OAAO,EAAE;AAAV,GAHW;AAIpBG,EAAAA,MAAM,EAAE;AAACH,IAAAA,OAAO,EAAE;AAAV;AAJY,CAAf;;AAUA,IAAMI,SAAS,GAAG;AACvBC,EAAAA,IAAI,EAAE,MADiB;AAEvBC,EAAAA,IAAI,EAAE;AAFiB,CAAlB","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n// Note: The numeric values here are matched by shader code in the\n// \"project\" and \"project64\" shader modules. Both places need to be\n// updated.\nimport log from '../utils/log';\n\n/**\n * The coordinate system that positions/dimensions are defined in.\n */\nexport const COORDINATE_SYSTEM = {\n  /**\n   * `LNGLAT` if rendering into a geospatial viewport, `CARTESIAN` otherwise\n   */\n  DEFAULT: -1,\n  /**\n   * Positions are interpreted as [longitude, latitude, elevation]\n   * longitude/latitude are in degrees, elevation is in meters.\n   * Dimensions are in meters.\n   */\n  LNGLAT: 1,\n\n  /**\n   * Positions are interpreted as [x, y, z] in meter offsets from the coordinate origin.\n   * Dimensions are in meters.\n   */\n  METER_OFFSETS: 2,\n\n  /**\n   * Positions are interpreted as [deltaLng, deltaLat, elevation] from the coordinate origin.\n   * deltaLng/deltaLat are in degrees, elevation is in meters.\n   * Dimensions are in meters.\n   */\n  LNGLAT_OFFSETS: 3,\n\n  /**\n   * Positions and dimensions are in the common units of the viewport.\n   */\n  CARTESIAN: 0\n} as const;\n\n// Enums cannot be directly exported as they are not transpiled correctly into ES5, see https://github.com/visgl/deck.gl/issues/7130\nexport type CoordinateSystem = -1 | 0 | 1 | 2 | 3;\n\n// Deprecated\n/* eslint-disable accessor-pairs */\nObject.defineProperty(COORDINATE_SYSTEM, 'IDENTITY', {\n  get: () => {\n    log.deprecated('COORDINATE_SYSTEM.IDENTITY', 'COORDINATE_SYSTEM.CARTESIAN')();\n    return 0;\n  }\n});\n/* eslint-enable accessor-pairs */\n\n/**\n * How coordinates are transformed from the world space into the common space.\n */\nexport const PROJECTION_MODE = {\n  /**\n   * Render geospatial data in Web Mercator projection\n   */\n  WEB_MERCATOR: 1,\n  /**\n   * Render geospatial data as a 3D globe\n   */\n  GLOBE: 2,\n\n  /**\n   * (Internal use only) Web Mercator projection at high zoom\n   */\n  WEB_MERCATOR_AUTO_OFFSET: 4,\n\n  /**\n   * No transformation\n   */\n  IDENTITY: 0\n} as const;\n\nexport const UNIT = {\n  common: 0,\n  meters: 1,\n  pixels: 2\n} as const;\n\nexport const EVENTS = {\n  click: {handler: 'onClick'},\n  panstart: {handler: 'onDragStart'},\n  panmove: {handler: 'onDrag'},\n  panend: {handler: 'onDragEnd'}\n} as const;\n\n/**\n * The rendering operation to perform with a layer, used in the `operation` prop\n */\nexport const OPERATION = {\n  DRAW: 'draw',\n  MASK: 'mask'\n} as const;\n"],"file":"constants.js"}