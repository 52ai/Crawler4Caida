{"version":3,"sources":["../../../../src/lib/attribute/attribute-transition-manager.ts"],"names":["TRANSITION_TYPES","interpolation","GPUInterpolationTransition","spring","GPUSpringTransition","AttributeTransitionManager","gl","id","timeline","transitions","needsRedraw","numInstances","isSupported","Transform","attributeName","_removeTransition","attributes","attribute","settings","getTransitionSetting","_updateAttribute","transition","inProgress","animatedAttributes","attributeInTransition","updated","update","cancel","isNew","type","log","warn","TransitionType","error","start"],"mappings":"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","sourcesContent":["import {Transform} from '@luma.gl/core';\nimport GPUInterpolationTransition from '../../transitions/gpu-interpolation-transition';\nimport GPUSpringTransition from '../../transitions/gpu-spring-transition';\nimport log from '../../utils/log';\n\nimport type {TransitionSettings} from './attribute-transition-utils';\nimport type Attribute from './attribute';\nimport type {Timeline} from '@luma.gl/engine';\nimport type GPUTransition from '../../transitions/gpu-transition';\nimport type {ConstructorOf} from '../../types/types';\n\nconst TRANSITION_TYPES: Record<string, ConstructorOf<GPUTransition>> = {\n  interpolation: GPUInterpolationTransition,\n  spring: GPUSpringTransition\n};\n\nexport default class AttributeTransitionManager {\n  id: string;\n  isSupported: boolean;\n\n  private gl: WebGLRenderingContext;\n  private timeline?: Timeline;\n\n  private transitions: {[id: string]: GPUTransition};\n  private needsRedraw: boolean;\n  private numInstances: number;\n\n  constructor(\n    gl: WebGLRenderingContext,\n    {\n      id,\n      timeline\n    }: {\n      id: string;\n      timeline?: Timeline;\n    }\n  ) {\n    this.id = id;\n    this.gl = gl;\n    this.timeline = timeline;\n\n    this.transitions = {};\n    this.needsRedraw = false;\n    this.numInstances = 1;\n\n    this.isSupported = Transform.isSupported(gl);\n  }\n\n  finalize(): void {\n    for (const attributeName in this.transitions) {\n      this._removeTransition(attributeName);\n    }\n  }\n\n  /* Public methods */\n\n  // Called when attribute manager updates\n  // Check the latest attributes for updates.\n  update({\n    attributes,\n    transitions,\n    numInstances\n  }: {\n    attributes: {[id: string]: Attribute};\n    transitions: any;\n    numInstances: number;\n  }): void {\n    // Transform class will crash if elementCount is 0\n    this.numInstances = numInstances || 1;\n\n    for (const attributeName in attributes) {\n      const attribute = attributes[attributeName];\n      const settings = attribute.getTransitionSetting(transitions);\n\n      // this attribute might not support transitions?\n      if (!settings) continue; // eslint-disable-line no-continue\n      this._updateAttribute(attributeName, attribute, settings);\n    }\n\n    for (const attributeName in this.transitions) {\n      const attribute = attributes[attributeName];\n      if (!attribute || !attribute.getTransitionSetting(transitions)) {\n        // Animated attribute has been removed\n        this._removeTransition(attributeName);\n      }\n    }\n  }\n\n  // Returns `true` if attribute is transition-enabled\n  hasAttribute(attributeName: string): boolean {\n    const transition = this.transitions[attributeName];\n    return transition && transition.inProgress;\n  }\n\n  // Get all the animated attributes\n  getAttributes(): {[id: string]: Attribute} {\n    const animatedAttributes = {};\n\n    for (const attributeName in this.transitions) {\n      const transition = this.transitions[attributeName];\n      if (transition.inProgress) {\n        animatedAttributes[attributeName] = transition.attributeInTransition;\n      }\n    }\n\n    return animatedAttributes;\n  }\n\n  /* eslint-disable max-statements */\n  // Called every render cycle, run transform feedback\n  // Returns `true` if anything changes\n  run(): boolean {\n    if (!this.isSupported || this.numInstances === 0) {\n      return false;\n    }\n\n    for (const attributeName in this.transitions) {\n      const updated = this.transitions[attributeName].update();\n      if (updated) {\n        this.needsRedraw = true;\n      }\n    }\n\n    const needsRedraw = this.needsRedraw;\n    this.needsRedraw = false;\n    return needsRedraw;\n  }\n  /* eslint-enable max-statements */\n\n  /* Private methods */\n  private _removeTransition(attributeName: string): void {\n    this.transitions[attributeName].cancel();\n    delete this.transitions[attributeName];\n  }\n\n  // Check an attributes for updates\n  // Returns a transition object if a new transition is triggered.\n  private _updateAttribute(\n    attributeName: string,\n    attribute: Attribute,\n    settings: TransitionSettings\n  ): void {\n    const transition = this.transitions[attributeName];\n    // an attribute can change transition type when it updates\n    // let's remove the transition when that happens so we can create the new transition type\n    // TODO: when switching transition types, make sure to carry over the attribute's\n    // previous buffers, currentLength, startIndices, etc, to be used as the starting point\n    // for the next transition\n    let isNew = !transition || transition.type !== settings.type;\n    if (isNew) {\n      if (!this.isSupported) {\n        log.warn(\n          `WebGL2 not supported by this browser. Transition for ${attributeName} is disabled.`\n        )();\n        return;\n      }\n\n      if (transition) {\n        this._removeTransition(attributeName);\n      }\n\n      const TransitionType = TRANSITION_TYPES[settings.type];\n      if (TransitionType) {\n        this.transitions[attributeName] = new TransitionType({\n          attribute,\n          timeline: this.timeline,\n          gl: this.gl\n        });\n      } else {\n        log.error(`unsupported transition type '${settings.type}'`)();\n        isNew = false;\n      }\n    }\n\n    if (isNew || attribute.needsRedraw()) {\n      this.needsRedraw = true;\n      this.transitions[attributeName].start(settings, this.numInstances);\n    }\n  }\n}\n"],"file":"attribute-transition-manager.js"}