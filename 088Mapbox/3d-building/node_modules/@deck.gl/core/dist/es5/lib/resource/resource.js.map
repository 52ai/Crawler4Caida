{"version":3,"sources":["../../../../src/lib/resource/resource.ts"],"names":["Resource","id","data","context","Set","setData","consumer","_subscribers","add","delete","size","isLoaded","_error","Promise","reject","_content","_loader","then","getData","forceUpdate","_data","loadCount","_loadCount","loader","result","undefined","catch","error","subscriber","onChange"],"mappings":";;;;;;;;;;;;;;;AAAA;;;;;;;;IAQqBA,Q;AAanB,oBAAYC,EAAZ,EAAwBC,IAAxB,EAAuDC,OAAvD,EAAwF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sDAP3D,CAO2D;AAAA,wDANjE,IAAIC,GAAJ,EAMiE;AAAA;AAAA;AAAA;AAAA;AACtF,SAAKH,EAAL,GAAUA,EAAV;AACA,SAAKE,OAAL,GAAeA,OAAf;AAEA,SAAKE,OAAL,CAAaH,IAAb;AACD;;;;WAGD,mBAAUI,QAAV,EAAiD;AAC/C,WAAKC,YAAL,CAAkBC,GAAlB,CAAsBF,QAAtB;AACD;;;WAED,qBAAYA,QAAZ,EAAmD;AACjD,WAAKC,YAAL,CAAkBE,MAAlB,CAAyBH,QAAzB;AACD;;;WAED,iBAAiB;AACf,aAAO,KAAKC,YAAL,CAAkBG,IAAlB,GAAyB,CAAhC;AACD;;;WAED,mBAAe,CAEd;;;WAED,mBAA0B;AAAA;;AACxB,aAAO,KAAKC,QAAL,GACH,KAAKC,MAAL,GACEC,OAAO,CAACC,MAAR,CAAe,KAAKF,MAApB,CADF,GAEE,KAAKG,QAHJ,GAIH,KAAKC,OAAL,CAAcC,IAAd,CAAmB;AAAA,eAAM,KAAI,CAACC,OAAL,EAAN;AAAA,OAAnB,CAJJ;AAKD;;;WAED,iBAAQhB,IAAR,EAAmBiB,WAAnB,EAA0C;AAAA;;AACxC,UAAIjB,IAAI,KAAK,KAAKkB,KAAd,IAAuB,CAACD,WAA5B,EAAyC;AACvC;AACD;;AACD,WAAKC,KAAL,GAAalB,IAAb;AACA,UAAMmB,SAAS,GAAG,EAAE,KAAKC,UAAzB;AAEA,UAAIC,MAAM,GAAGrB,IAAb;;AACA,UAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;AAC5BqB,QAAAA,MAAM,GAAG,gBAAKrB,IAAL,CAAT;AACD;;AACD,UAAIqB,MAAM,YAAYV,OAAtB,EAA+B;AAC7B,aAAKF,QAAL,GAAgB,KAAhB;AACA,aAAKK,OAAL,GAAeO,MAAM,CAClBN,IADY,CACP,UAAAO,MAAM,EAAI;AAEd,cAAI,MAAI,CAACF,UAAL,KAAoBD,SAAxB,EAAmC;AACjC,YAAA,MAAI,CAACV,QAAL,GAAgB,IAAhB;AACA,YAAA,MAAI,CAACC,MAAL,GAAca,SAAd;AACA,YAAA,MAAI,CAACV,QAAL,GAAgBS,MAAhB;AACD;AACF,SARY,EASZE,KATY,CASN,UAAAC,KAAK,EAAI;AACd,cAAI,MAAI,CAACL,UAAL,KAAoBD,SAAxB,EAAmC;AACjC,YAAA,MAAI,CAACV,QAAL,GAAgB,IAAhB;AACA,YAAA,MAAI,CAACC,MAAL,GAAce,KAAK,IAAI,IAAvB;AACD;AACF,SAdY,CAAf;AAeD,OAjBD,MAiBO;AACL,aAAKhB,QAAL,GAAgB,IAAhB;AACA,aAAKC,MAAL,GAAca,SAAd;AACA,aAAKV,QAAL,GAAgBb,IAAhB;AACD;;AAhCuC,iDAkCf,KAAKK,YAlCU;AAAA;;AAAA;AAkCxC,4DAA4C;AAAA,cAAjCqB,UAAiC;AAC1CA,UAAAA,UAAU,CAACC,QAAX,CAAoB,KAAKX,OAAL,EAApB;AACD;AApCuC;AAAA;AAAA;AAAA;AAAA;AAqCzC","sourcesContent":["import {load} from '@loaders.gl/core';\n\nimport type {ResourceManagerContext} from './resource-manager';\n\nexport type ResourceSubscriber<T = any> = {\n  onChange: (data: T | Promise<T>) => void;\n};\n\nexport default class Resource<T = any> {\n  id: string;\n  context: ResourceManagerContext;\n  isLoaded!: boolean;\n  persistent?: boolean;\n\n  private _loadCount: number = 0;\n  private _subscribers = new Set<ResourceSubscriber<T>>();\n  private _data!: T | Promise<T> | string;\n  private _loader?: Promise<void>;\n  private _error?: Error;\n  private _content?: T;\n\n  constructor(id: string, data: T | Promise<T> | string, context: ResourceManagerContext) {\n    this.id = id;\n    this.context = context;\n\n    this.setData(data);\n  }\n\n  // consumer: {onChange: Function}\n  subscribe(consumer: ResourceSubscriber<T>): void {\n    this._subscribers.add(consumer);\n  }\n\n  unsubscribe(consumer: ResourceSubscriber<T>): void {\n    this._subscribers.delete(consumer);\n  }\n\n  inUse(): boolean {\n    return this._subscribers.size > 0;\n  }\n\n  delete(): void {\n    // Remove any resources created\n  }\n\n  getData(): T | Promise<T> {\n    return this.isLoaded\n      ? this._error\n        ? Promise.reject(this._error)\n        : this._content!\n      : this._loader!.then(() => this.getData());\n  }\n\n  setData(data: any, forceUpdate?: boolean) {\n    if (data === this._data && !forceUpdate) {\n      return;\n    }\n    this._data = data;\n    const loadCount = ++this._loadCount;\n\n    let loader = data;\n    if (typeof data === 'string') {\n      loader = load(data);\n    }\n    if (loader instanceof Promise) {\n      this.isLoaded = false;\n      this._loader = loader\n        .then(result => {\n          // check if source has changed\n          if (this._loadCount === loadCount) {\n            this.isLoaded = true;\n            this._error = undefined;\n            this._content = result;\n          }\n        })\n        .catch(error => {\n          if (this._loadCount === loadCount) {\n            this.isLoaded = true;\n            this._error = error || true;\n          }\n        });\n    } else {\n      this.isLoaded = true;\n      this._error = undefined;\n      this._content = data;\n    }\n\n    for (const subscriber of this._subscribers) {\n      subscriber.onChange(this.getData());\n    }\n  }\n}\n"],"file":"resource.js"}