{"version":3,"sources":["../../../../src/lib/attribute/data-column.ts"],"names":["getStride","accessor","stride","size","bytesPerElement","resolveShaderAttribute","baseAccessor","shaderAttributeOptions","offset","log","removed","vertexOffset","undefined","elementOffset","resolveDoublePrecisionShaderAttributes","resolvedOptions","high","low","DataColumn","gl","opts","state","id","logicalType","type","doublePrecision","defaultValue","Number","isFinite","Array","fill","bufferType","isIndexed","FEATURES","ELEMENT_INDEX_UINT32","defaultType","fp64","Float32Array","value","settings","BYTES_PER_ELEMENT","externalBuffer","bufferAccessor","allocatedValue","numInstances","bounds","constant","_buffer","Buffer","target","getAccessor","n","delete","typedArrayManager","release","options","shaderAttributes","isBuffer64Bit","Float64Array","doubleShaderAttributeDefs","ShaderAttribute","shaderAttributeDef","getBuffer","result","min","from","len","length","Infinity","max","i","j","v","data","ArrayBuffer","isView","buffer","_normalizeValue","normalized","normalizeConstant","hasChanged","_areValuesEqual","_checkExternalBuffer","byteOffset","requiredBufferSize","byteLength","reallocate","setAccessor","subData","startOffset","endOffset","startIndex","endIndex","subarray","copy","oldValue","allocate","Error","ArrayType","illegalArrayType","constructor","name","warn","map","x","out","start","value1","value2"],"mappings":"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","sourcesContent":["/* eslint-disable complexity */\nimport GL from '@luma.gl/constants';\nimport {hasFeature, FEATURES, Buffer} from '@luma.gl/core';\nimport ShaderAttribute, {IShaderAttribute} from './shader-attribute';\nimport {glArrayFromType} from './gl-utils';\nimport typedArrayManager from '../../utils/typed-array-manager';\nimport {toDoublePrecisionArray} from '../../utils/math-utils';\nimport log from '../../utils/log';\n\nimport type {Buffer as LumaBuffer} from '@luma.gl/webgl';\nimport type {TypedArray, NumericArray, TypedArrayConstructor} from '../../types/types';\n\nexport type BufferAccessor = {\n  /** A WebGL data type, see [vertexAttribPointer](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/vertexAttribPointer#parameters). */\n  type?: number;\n  /** The number of elements per vertex attribute. */\n  size?: number;\n  /** 1 if instanced. */\n  divisor?: number;\n  /** Offset of the first vertex attribute into the buffer, in bytes. */\n  offset?: number;\n  /** The offset between the beginning of consecutive vertex attributes, in bytes. */\n  stride?: number;\n  /** Whether data values should be normalized. Note that all color attributes in deck.gl layers are normalized by default. */\n  normalized?: boolean;\n  integer?: boolean;\n};\n\nexport type ShaderAttributeOptions = Partial<BufferAccessor> & {\n  offset: number;\n  stride: number;\n  vertexOffset?: number;\n  elementOffset?: number;\n};\n\nfunction getStride(accessor: DataColumnSettings<any>): number {\n  return accessor.stride || accessor.size * accessor.bytesPerElement;\n}\n\nfunction resolveShaderAttribute(\n  baseAccessor: DataColumnSettings<any>,\n  shaderAttributeOptions: Partial<ShaderAttributeOptions>\n): ShaderAttributeOptions {\n  if (shaderAttributeOptions.offset) {\n    log.removed('shaderAttribute.offset', 'vertexOffset, elementOffset')();\n  }\n\n  // All shader attributes share the parent's stride\n  const stride = getStride(baseAccessor);\n  // `vertexOffset` is used to access the neighboring vertex's value\n  // e.g. `nextPositions` in polygon\n  const vertexOffset =\n    shaderAttributeOptions.vertexOffset !== undefined\n      ? shaderAttributeOptions.vertexOffset\n      : baseAccessor.vertexOffset || 0;\n  // `elementOffset` is defined when shader attribute's size is smaller than the parent's\n  // e.g. `translations` in transform matrix\n  const elementOffset = shaderAttributeOptions.elementOffset || 0;\n  const offset =\n    // offsets defined by the attribute\n    vertexOffset * stride +\n    elementOffset * baseAccessor.bytesPerElement +\n    // offsets defined by external buffers if any\n    (baseAccessor.offset || 0);\n\n  return {\n    ...shaderAttributeOptions,\n    offset,\n    stride\n  };\n}\n\nfunction resolveDoublePrecisionShaderAttributes(\n  baseAccessor: DataColumnSettings<any>,\n  shaderAttributeOptions: Partial<ShaderAttributeOptions>\n): {\n  high: ShaderAttributeOptions;\n  low: ShaderAttributeOptions;\n} {\n  const resolvedOptions = resolveShaderAttribute(baseAccessor, shaderAttributeOptions);\n\n  return {\n    high: resolvedOptions,\n    low: {\n      ...resolvedOptions,\n      offset: resolvedOptions.offset + baseAccessor.size * 4\n    }\n  };\n}\n\nexport type DataColumnOptions<Options> = Options &\n  BufferAccessor & {\n    id?: string;\n    vertexOffset?: number;\n    fp64?: boolean;\n    logicalType?: number;\n    isIndexed?: boolean;\n    defaultValue?: number | number[];\n  };\n\ntype DataColumnSettings<Options> = DataColumnOptions<Options> & {\n  type: number;\n  size: number;\n  logicalType?: number;\n  bytesPerElement: number;\n  defaultValue: number[];\n  defaultType: TypedArrayConstructor;\n};\n\ntype DataColumnInternalState<Options, State> = State & {\n  externalBuffer: LumaBuffer | null;\n  bufferAccessor: DataColumnSettings<Options>;\n  allocatedValue: TypedArray | null;\n  numInstances: number;\n  bounds: [number[], number[]] | null;\n  constant: boolean;\n};\n\nexport default class DataColumn<Options, State> implements IShaderAttribute {\n  gl: WebGLRenderingContext;\n  id: string;\n  size: number;\n  settings: DataColumnSettings<Options>;\n  value: NumericArray | null;\n  doublePrecision: boolean;\n\n  protected _buffer: LumaBuffer | null;\n  protected state: DataColumnInternalState<Options, State>;\n\n  /* eslint-disable max-statements */\n  constructor(gl: WebGLRenderingContext, opts: DataColumnOptions<Options>, state: State) {\n    this.gl = gl;\n    this.id = opts.id || '';\n    this.size = opts.size || 1;\n\n    const logicalType = opts.logicalType || opts.type;\n    const doublePrecision = logicalType === GL.DOUBLE;\n\n    let {defaultValue} = opts;\n    defaultValue = Number.isFinite(defaultValue)\n      ? [defaultValue]\n      : defaultValue || new Array(this.size).fill(0);\n\n    let bufferType: number;\n    if (doublePrecision) {\n      bufferType = GL.FLOAT;\n    } else if (!logicalType && opts.isIndexed) {\n      bufferType =\n        gl && hasFeature(gl, FEATURES.ELEMENT_INDEX_UINT32) ? GL.UNSIGNED_INT : GL.UNSIGNED_SHORT;\n    } else {\n      bufferType = logicalType || GL.FLOAT;\n    }\n\n    // This is the attribute type defined by the layer\n    // If an external buffer is provided, this.type may be overwritten\n    // But we always want to use defaultType for allocation\n    let defaultType = glArrayFromType(logicalType || bufferType || GL.FLOAT);\n    this.doublePrecision = doublePrecision;\n\n    // `fp64: false` tells a double-precision attribute to allocate Float32Arrays\n    // by default when using auto-packing. This is more efficient in use cases where\n    // high precision is unnecessary, but the `64Low` attribute is still required\n    // by the shader.\n    if (doublePrecision && opts.fp64 === false) {\n      defaultType = Float32Array;\n    }\n\n    this.value = null;\n    this.settings = {\n      ...opts,\n      defaultType,\n      defaultValue: defaultValue as number[],\n      logicalType,\n      type: bufferType,\n      size: this.size,\n      bytesPerElement: defaultType.BYTES_PER_ELEMENT\n    };\n    this.state = {\n      ...state,\n      externalBuffer: null,\n      bufferAccessor: this.settings,\n      allocatedValue: null,\n      numInstances: 0,\n      bounds: null,\n      constant: false\n    };\n    this._buffer = null;\n  }\n  /* eslint-enable max-statements */\n\n  get isConstant(): boolean {\n    return this.state.constant;\n  }\n\n  get buffer(): LumaBuffer {\n    if (!this._buffer) {\n      const {isIndexed, type} = this.settings;\n      this._buffer = new Buffer(this.gl, {\n        id: this.id,\n        target: isIndexed ? GL.ELEMENT_ARRAY_BUFFER : GL.ARRAY_BUFFER,\n        accessor: {type}\n      }) as LumaBuffer;\n    }\n    return this._buffer;\n  }\n\n  get byteOffset(): number {\n    const accessor = this.getAccessor();\n    if (accessor.vertexOffset) {\n      return accessor.vertexOffset * getStride(accessor);\n    }\n    return 0;\n  }\n\n  get numInstances(): number {\n    return this.state.numInstances;\n  }\n\n  set numInstances(n: number) {\n    this.state.numInstances = n;\n  }\n\n  delete(): void {\n    if (this._buffer) {\n      this._buffer.delete();\n      this._buffer = null;\n    }\n    typedArrayManager.release(this.state.allocatedValue);\n  }\n\n  getShaderAttributes(\n    id: string,\n    options: Partial<ShaderAttributeOptions> | null\n  ): Record<string, IShaderAttribute> {\n    if (this.doublePrecision) {\n      const shaderAttributes = {};\n      const isBuffer64Bit = this.value instanceof Float64Array;\n\n      const doubleShaderAttributeDefs = resolveDoublePrecisionShaderAttributes(\n        this.getAccessor(),\n        options || {}\n      );\n\n      shaderAttributes[id] = new ShaderAttribute(this, doubleShaderAttributeDefs.high);\n      shaderAttributes[`${id}64Low`] = isBuffer64Bit\n        ? new ShaderAttribute(this, doubleShaderAttributeDefs.low)\n        : new Float32Array(this.size); // use constant for low part if buffer is 32-bit\n      return shaderAttributes;\n    }\n    if (options) {\n      const shaderAttributeDef = resolveShaderAttribute(this.getAccessor(), options);\n      return {[id]: new ShaderAttribute(this, shaderAttributeDef)};\n    }\n    return {[id]: this};\n  }\n\n  getBuffer(): LumaBuffer | null {\n    if (this.state.constant) {\n      return null;\n    }\n    return this.state.externalBuffer || this._buffer;\n  }\n\n  getValue(): [LumaBuffer, BufferAccessor] | NumericArray | null {\n    if (this.state.constant) {\n      return this.value;\n    }\n    return [this.getBuffer() as LumaBuffer, this.getAccessor() as BufferAccessor];\n  }\n\n  getAccessor(): DataColumnSettings<Options> {\n    return this.state.bufferAccessor;\n  }\n\n  // Returns [min: Array(size), max: Array(size)]\n  /* eslint-disable max-depth */\n  getBounds(): [number[], number[]] | null {\n    if (this.state.bounds) {\n      return this.state.bounds;\n    }\n    let result: [number[], number[]] | null = null;\n    if (this.state.constant && this.value) {\n      const min = Array.from(this.value);\n      result = [min, min];\n    } else {\n      const {value, numInstances, size} = this;\n      const len = numInstances * size;\n      if (value && len && value.length >= len) {\n        const min = new Array(size).fill(Infinity);\n        const max = new Array(size).fill(-Infinity);\n        for (let i = 0; i < len; ) {\n          for (let j = 0; j < size; j++) {\n            const v = value[i++];\n            if (v < min[j]) min[j] = v;\n            if (v > max[j]) max[j] = v;\n          }\n        }\n        result = [min, max];\n      }\n    }\n    this.state.bounds = result;\n    return result;\n  }\n\n  // returns true if success\n  // eslint-disable-next-line max-statements\n  setData(\n    data:\n      | TypedArray\n      | LumaBuffer\n      | ({\n          constant?: boolean;\n          value?: NumericArray;\n          buffer?: LumaBuffer;\n        } & Partial<BufferAccessor>)\n  ): boolean {\n    const {state} = this;\n\n    let opts: {\n      constant?: boolean;\n      value?: NumericArray;\n      buffer?: LumaBuffer;\n    } & Partial<BufferAccessor>;\n    if (ArrayBuffer.isView(data)) {\n      opts = {value: data};\n    } else if (data instanceof Buffer) {\n      opts = {buffer: data as LumaBuffer};\n    } else {\n      opts = data;\n    }\n\n    const accessor: DataColumnSettings<Options> = {...this.settings, ...opts};\n    state.bufferAccessor = accessor;\n    state.bounds = null; // clear cached bounds\n\n    if (opts.constant) {\n      // set constant\n      let value = opts.value as NumericArray;\n      value = this._normalizeValue(value, [], 0);\n      if (this.settings.normalized) {\n        value = this.normalizeConstant(value);\n      }\n      const hasChanged = !state.constant || !this._areValuesEqual(value, this.value);\n\n      if (!hasChanged) {\n        return false;\n      }\n      state.externalBuffer = null;\n      state.constant = true;\n      this.value = value;\n    } else if (opts.buffer) {\n      const buffer = opts.buffer;\n      state.externalBuffer = buffer;\n      state.constant = false;\n      this.value = opts.value || null;\n      const isBuffer64Bit = opts.value instanceof Float64Array;\n\n      // Copy the type of the buffer into the accessor\n      // @ts-ignore\n      accessor.type = opts.type || buffer.accessor.type;\n      // @ts-ignore\n      accessor.bytesPerElement = buffer.accessor.BYTES_PER_ELEMENT * (isBuffer64Bit ? 2 : 1);\n      accessor.stride = getStride(accessor);\n    } else if (opts.value) {\n      this._checkExternalBuffer(opts);\n\n      let value = opts.value as TypedArray;\n      state.externalBuffer = null;\n      state.constant = false;\n      this.value = value;\n\n      accessor.bytesPerElement = value.BYTES_PER_ELEMENT;\n      accessor.stride = getStride(accessor);\n\n      const {buffer, byteOffset} = this;\n\n      if (this.doublePrecision && value instanceof Float64Array) {\n        value = toDoublePrecisionArray(value, accessor);\n      }\n\n      // A small over allocation is used as safety margin\n      // Shader attributes may try to access this buffer with bigger offsets\n      const requiredBufferSize = value.byteLength + byteOffset + accessor.stride * 2;\n      if (buffer.byteLength < requiredBufferSize) {\n        buffer.reallocate(requiredBufferSize);\n      }\n      // Hack: force Buffer to infer data type\n      buffer.setAccessor(null);\n      buffer.subData({data: value, offset: byteOffset});\n      // @ts-ignore\n      accessor.type = opts.type || buffer.accessor.type;\n    }\n\n    return true;\n  }\n\n  updateSubBuffer(\n    opts: {\n      startOffset?: number;\n      endOffset?: number;\n    } = {}\n  ): void {\n    this.state.bounds = null; // clear cached bounds\n\n    const value = this.value as TypedArray;\n    const {startOffset = 0, endOffset} = opts;\n    this.buffer.subData({\n      data:\n        this.doublePrecision && value instanceof Float64Array\n          ? toDoublePrecisionArray(value, {\n              size: this.size,\n              startIndex: startOffset,\n              endIndex: endOffset\n            })\n          : value.subarray(startOffset, endOffset),\n      offset: startOffset * value.BYTES_PER_ELEMENT + this.byteOffset\n    });\n  }\n\n  allocate(numInstances: number, copy: boolean = false): boolean {\n    const {state} = this;\n    const oldValue = state.allocatedValue;\n\n    // Allocate at least one element to ensure a valid buffer\n    const value = typedArrayManager.allocate(oldValue, numInstances + 1, {\n      size: this.size,\n      type: this.settings.defaultType,\n      copy\n    });\n\n    this.value = value;\n\n    const {buffer, byteOffset} = this;\n\n    if (buffer.byteLength < value.byteLength + byteOffset) {\n      buffer.reallocate(value.byteLength + byteOffset);\n\n      if (copy && oldValue) {\n        // Upload the full existing attribute value to the GPU, so that updateBuffer\n        // can choose to only update a partial range.\n        // TODO - copy old buffer to new buffer on the GPU\n        buffer.subData({\n          data:\n            oldValue instanceof Float64Array ? toDoublePrecisionArray(oldValue, this) : oldValue,\n          offset: byteOffset\n        });\n      }\n    }\n\n    state.allocatedValue = value;\n    state.constant = false;\n    state.externalBuffer = null;\n    state.bufferAccessor = this.settings;\n    return true;\n  }\n\n  // PRIVATE HELPER METHODS\n  protected _checkExternalBuffer(opts: {value?: NumericArray; normalized?: boolean}): void {\n    const {value} = opts;\n    if (!ArrayBuffer.isView(value)) {\n      throw new Error(`Attribute ${this.id} value is not TypedArray`);\n    }\n    const ArrayType = this.settings.defaultType;\n\n    let illegalArrayType = false;\n    if (this.doublePrecision) {\n      // not 32bit or 64bit\n      illegalArrayType = value.BYTES_PER_ELEMENT < 4;\n    }\n    if (illegalArrayType) {\n      throw new Error(`Attribute ${this.id} does not support ${value.constructor.name}`);\n    }\n    if (!(value instanceof ArrayType) && this.settings.normalized && !('normalized' in opts)) {\n      log.warn(`Attribute ${this.id} is normalized`)();\n    }\n  }\n\n  // https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/vertexAttribPointer\n  normalizeConstant(value: NumericArray): NumericArray {\n    switch (this.settings.type) {\n      case GL.BYTE:\n        // normalize [-128, 127] to [-1, 1]\n        return new Float32Array(value).map(x => ((x + 128) / 255) * 2 - 1);\n\n      case GL.SHORT:\n        // normalize [-32768, 32767] to [-1, 1]\n        return new Float32Array(value).map(x => ((x + 32768) / 65535) * 2 - 1);\n\n      case GL.UNSIGNED_BYTE:\n        // normalize [0, 255] to [0, 1]\n        return new Float32Array(value).map(x => x / 255);\n\n      case GL.UNSIGNED_SHORT:\n        // normalize [0, 65535] to [0, 1]\n        return new Float32Array(value).map(x => x / 65535);\n\n      default:\n        // No normalization for gl.FLOAT and gl.HALF_FLOAT\n        return value;\n    }\n  }\n\n  /* check user supplied values and apply fallback */\n  protected _normalizeValue(value: any, out: NumericArray, start: number): NumericArray {\n    const {defaultValue, size} = this.settings;\n\n    if (Number.isFinite(value)) {\n      out[start] = value;\n      return out;\n    }\n    if (!value) {\n      out[start] = defaultValue[0];\n      return out;\n    }\n\n    // Important - switch cases are 5x more performant than a for loop!\n    /* eslint-disable no-fallthrough, default-case */\n    switch (size) {\n      case 4:\n        out[start + 3] = Number.isFinite(value[3]) ? value[3] : defaultValue[3];\n      case 3:\n        out[start + 2] = Number.isFinite(value[2]) ? value[2] : defaultValue[2];\n      case 2:\n        out[start + 1] = Number.isFinite(value[1]) ? value[1] : defaultValue[1];\n      case 1:\n        out[start + 0] = Number.isFinite(value[0]) ? value[0] : defaultValue[0];\n        break;\n\n      default:\n        // In the rare case where the attribute size > 4, do it the slow way\n        // This is used for e.g. transform matrices\n        let i = size;\n        while (--i >= 0) {\n          out[start + i] = Number.isFinite(value[i]) ? value[i] : defaultValue[i];\n        }\n    }\n\n    return out;\n  }\n\n  protected _areValuesEqual(value1: any, value2: any): boolean {\n    if (!value1 || !value2) {\n      return false;\n    }\n    const {size} = this;\n    for (let i = 0; i < size; i++) {\n      if (value1[i] !== value2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n"],"file":"data-column.js"}