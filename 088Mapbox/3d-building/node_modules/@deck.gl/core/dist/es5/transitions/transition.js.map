{"version":3,"sources":["../../../src/transitions/transition.ts"],"names":["Transition","timeline","_inProgress","_handle","_timeline","time","settings","duration","cancel","onStart","removeChannel","onEnd","onInterrupt","addChannel","delay","getTime","_onUpdate","onUpdate","isFinished","end"],"mappings":";;;;;;;;;;;;;;;IAUqBA,U;AAWnB,sBAAYC,QAAZ,EAAgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAC9B,SAAKC,WAAL,GAAmB,KAAnB;AACA,SAAKC,OAAL,GAAe,IAAf;AACA,SAAKC,SAAL,GAAiBH,QAAjB;AACA,SAAKI,IAAL,GAAY,CAAZ;AAGA,SAAKC,QAAL,GAAgB;AAACC,MAAAA,QAAQ,EAAE;AAAX,KAAhB;AACD;;;;SAGD,eAA0B;AACxB,aAAO,KAAKL,WAAZ;AACD;;;WAMD,eAAMI,QAAN,EAAoC;AAAA;;AAClC,WAAKE,MAAL;AACA,WAAKF,QAAL,GAAgBA,QAAhB;AACA,WAAKJ,WAAL,GAAmB,IAAnB;AACA,sDAAKI,QAAL,EAAcG,OAAd,qGAAwB,IAAxB;AACD;;;WAKD,eAAM;AACJ,UAAI,KAAKP,WAAT,EAAsB;AAAA;;AACpB,aAAKE,SAAL,CAAeM,aAAf,CAA6B,KAAKP,OAAlC;;AACA,aAAKA,OAAL,GAAe,IAAf;AACA,aAAKD,WAAL,GAAmB,KAAnB;AACA,wDAAKI,QAAL,EAAcK,KAAd,oGAAsB,IAAtB;AACD;AACF;;;WAKD,kBAAS;AACP,UAAI,KAAKT,WAAT,EAAsB;AAAA;;AACpB,yDAAKI,QAAL,EAAcM,WAAd,sGAA4B,IAA5B;;AACA,aAAKR,SAAL,CAAeM,aAAf,CAA6B,KAAKP,OAAlC;;AACA,aAAKA,OAAL,GAAe,IAAf;AACA,aAAKD,WAAL,GAAmB,KAAnB;AACD;AACF;;;WAKD,kBAAS;AAAA;;AACP,UAAI,CAAC,KAAKA,WAAV,EAAuB;AACrB,eAAO,KAAP;AACD;;AAMD,UAAI,KAAKC,OAAL,KAAiB,IAArB,EAA2B;AACzB,YAAkBF,QAAlB,GAAwC,IAAxC,CAAOG,SAAP;AAAA,YAA4BE,QAA5B,GAAwC,IAAxC,CAA4BA,QAA5B;AACA,aAAKH,OAAL,GAAeF,QAAQ,CAACY,UAAT,CAAoB;AACjCC,UAAAA,KAAK,EAAEb,QAAQ,CAACc,OAAT,EAD0B;AAEjCR,UAAAA,QAAQ,EAAED,QAAQ,CAACC;AAFc,SAApB,CAAf;AAID;;AAED,WAAKF,IAAL,GAAY,KAAKD,SAAL,CAAeW,OAAf,CAAuB,KAAKZ,OAA5B,CAAZ;;AAEA,WAAKa,SAAL;;AAEA,uDAAKV,QAAL,EAAcW,QAAd,sGAAyB,IAAzB;;AAIA,UAAI,KAAKb,SAAL,CAAec,UAAf,CAA0B,KAAKf,OAA/B,CAAJ,EAA6C;AAC3C,aAAKgB,GAAL;AACD;;AACD,aAAO,IAAP;AACD;;;WAID,qBAAsB,CAErB","sourcesContent":["import type {Timeline} from '@luma.gl/core';\n\nexport type TransitionSettings = {\n  duration: number;\n  onStart?: (transition: Transition) => void;\n  onUpdate?: (transition: Transition) => void;\n  onInterrupt?: (transition: Transition) => void;\n  onEnd?: (transition: Transition) => void;\n};\n\nexport default class Transition {\n  private _inProgress: boolean;\n  private _handle: number | null;\n  private _timeline: Timeline;\n\n  time: number;\n  settings: TransitionSettings;\n\n  /**\n   * @params timeline {Timeline}\n   */\n  constructor(timeline: Timeline) {\n    this._inProgress = false;\n    this._handle = null;\n    this._timeline = timeline;\n    this.time = 0;\n\n    // Defaults\n    this.settings = {duration: 0};\n  }\n\n  /* Public API */\n  get inProgress(): boolean {\n    return this._inProgress;\n  }\n\n  /**\n   * (re)start this transition.\n   * @params props {object} - optional overriding props. see constructor\n   */\n  start(settings: TransitionSettings) {\n    this.cancel();\n    this.settings = settings;\n    this._inProgress = true;\n    this.settings.onStart?.(this);\n  }\n\n  /**\n   * end this transition if it is in progress.\n   */\n  end() {\n    if (this._inProgress) {\n      this._timeline.removeChannel(this._handle);\n      this._handle = null;\n      this._inProgress = false;\n      this.settings.onEnd?.(this);\n    }\n  }\n\n  /**\n   * cancel this transition if it is in progress.\n   */\n  cancel() {\n    if (this._inProgress) {\n      this.settings.onInterrupt?.(this);\n      this._timeline.removeChannel(this._handle);\n      this._handle = null;\n      this._inProgress = false;\n    }\n  }\n\n  /**\n   * update this transition. Returns `true` if updated.\n   */\n  update() {\n    if (!this._inProgress) {\n      return false;\n    }\n\n    // It is important to initialize the handle during `update` instead of `start`.\n    // The CPU time that the `start` frame takes should not be counted towards the duration.\n    // On the other hand, `update` always happens during a render cycle. The clock starts when the\n    // transition is rendered for the first time.\n    if (this._handle === null) {\n      const {_timeline: timeline, settings} = this;\n      this._handle = timeline.addChannel({\n        delay: timeline.getTime(),\n        duration: settings.duration\n      });\n    }\n\n    this.time = this._timeline.getTime(this._handle);\n    // Call subclass method\n    this._onUpdate();\n    // Call user callback\n    this.settings.onUpdate?.(this);\n\n    // This only works if `settings.duration` is set\n    // Spring transition must call `end` manually\n    if (this._timeline.isFinished(this._handle)) {\n      this.end();\n    }\n    return true;\n  }\n\n  /* Private API */\n\n  protected _onUpdate() {\n    // for subclass override\n  }\n}\n"],"file":"transition.js"}