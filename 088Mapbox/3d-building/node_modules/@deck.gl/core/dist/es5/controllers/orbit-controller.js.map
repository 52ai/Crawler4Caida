{"version":3,"sources":["../../../src/controllers/orbit-controller.ts"],"names":["OrbitState","options","width","height","rotationX","rotationOrbit","target","zoom","minRotationX","maxRotationX","minZoom","Infinity","maxZoom","startPanPosition","startRotatePos","startRotationX","startRotationOrbit","startZoomPosition","startZoom","makeViewport","pos","_getUpdatedState","_unproject","startPosition","getState","viewport","getViewportProps","newProps","panByPosition","deltaAngleX","deltaAngleY","undefined","newRotation","deltaScaleX","deltaScaleY","viewState","fromProps","props","Math","abs","startPos","scale","newZoom","_calculateNewZoom","zoomedViewport","speed","_panFromCenter","unproject","log2","offset","pan","constructor","Array","isArray","ViewState","OrbitController","transitionDuration","transitionInterpolator","LinearInterpolator","transitionProps","compare","required","Controller"],"mappings":"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","sourcesContent":["import {clamp} from '@math.gl/core';\nimport Controller from './controller';\nimport ViewState from './view-state';\nimport {mod} from '../utils/math-utils';\n\nimport type Viewport from '../viewports/viewport';\nimport LinearInterpolator from '../transitions/linear-interpolator';\n\nexport type OrbitStateProps = {\n  width: number;\n  height: number;\n  target?: number[];\n  zoom?: number | number[];\n  rotationX?: number;\n  rotationOrbit?: number;\n\n  /** Viewport constraints */\n  maxZoom?: number;\n  minZoom?: number;\n  minRotationX?: number;\n  maxRotationX?: number;\n};\n\ntype OrbitStateInternal = {\n  startPanPosition?: number[];\n  startRotatePos?: number[];\n  startRotationX?: number;\n  startRotationOrbit?: number;\n  startZoomPosition?: number[];\n  startZoom?: number | number[];\n};\n\nexport class OrbitState extends ViewState<OrbitState, OrbitStateProps, OrbitStateInternal> {\n  makeViewport: (props: Record<string, any>) => Viewport;\n\n  constructor(\n    options: OrbitStateProps &\n      OrbitStateInternal & {\n        makeViewport: (props: Record<string, any>) => Viewport;\n      }\n  ) {\n    const {\n      /* Viewport arguments */\n      width, // Width of viewport\n      height, // Height of viewport\n      rotationX = 0, // Rotation around x axis\n      rotationOrbit = 0, // Rotation around orbit axis\n      target = [0, 0, 0],\n      zoom = 0,\n\n      /* Viewport constraints */\n      minRotationX = -90,\n      maxRotationX = 90,\n      minZoom = -Infinity,\n      maxZoom = Infinity,\n\n      /** Interaction states, required to calculate change during transform */\n      // Model state when the pan operation first started\n      startPanPosition,\n      // Model state when the rotate operation first started\n      startRotatePos,\n      startRotationX,\n      startRotationOrbit,\n      // Model state when the zoom operation first started\n      startZoomPosition,\n      startZoom\n    } = options;\n\n    super(\n      {\n        width,\n        height,\n        rotationX,\n        rotationOrbit,\n        target,\n        zoom,\n        minRotationX,\n        maxRotationX,\n        minZoom,\n        maxZoom\n      },\n      {\n        startPanPosition,\n        startRotatePos,\n        startRotationX,\n        startRotationOrbit,\n        startZoomPosition,\n        startZoom\n      }\n    );\n\n    this.makeViewport = options.makeViewport;\n  }\n\n  /**\n   * Start panning\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  panStart({pos}: {pos: [number, number]}): OrbitState {\n    return this._getUpdatedState({\n      startPanPosition: this._unproject(pos)\n    });\n  }\n\n  /**\n   * Pan\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   */\n  pan({pos, startPosition}: {pos: [number, number]; startPosition?: number[]}): OrbitState {\n    const startPanPosition = this.getState().startPanPosition || startPosition;\n\n    if (!startPanPosition) {\n      return this;\n    }\n\n    const viewport = this.makeViewport(this.getViewportProps());\n    const newProps = viewport.panByPosition(startPanPosition, pos);\n\n    return this._getUpdatedState(newProps);\n  }\n\n  /**\n   * End panning\n   * Must call if `panStart()` was called\n   */\n  panEnd(): OrbitState {\n    return this._getUpdatedState({\n      startPanPosition: null\n    });\n  }\n\n  /**\n   * Start rotating\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  rotateStart({pos}: {pos: [number, number]}): OrbitState {\n    return this._getUpdatedState({\n      startRotatePos: pos,\n      startRotationX: this.getViewportProps().rotationX,\n      startRotationOrbit: this.getViewportProps().rotationOrbit\n    });\n  }\n\n  /**\n   * Rotate\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   */\n  rotate({\n    pos,\n    deltaAngleX = 0,\n    deltaAngleY = 0\n  }: {\n    pos?: [number, number];\n    deltaAngleX?: number;\n    deltaAngleY?: number;\n  }): OrbitState {\n    const {startRotatePos, startRotationX, startRotationOrbit} = this.getState();\n    const {width, height} = this.getViewportProps();\n\n    if (!startRotatePos || startRotationX === undefined || startRotationOrbit === undefined) {\n      return this;\n    }\n\n    let newRotation;\n    if (pos) {\n      let deltaScaleX = (pos[0] - startRotatePos[0]) / width;\n      const deltaScaleY = (pos[1] - startRotatePos[1]) / height;\n\n      if (startRotationX < -90 || startRotationX > 90) {\n        // When looking at the \"back\" side of the scene, invert horizontal drag\n        // so that the camera movement follows user input\n        deltaScaleX *= -1;\n      }\n      newRotation = {\n        rotationX: startRotationX + deltaScaleY * 180,\n        rotationOrbit: startRotationOrbit + deltaScaleX * 180\n      };\n    } else {\n      newRotation = {\n        rotationX: startRotationX + deltaAngleY,\n        rotationOrbit: startRotationOrbit + deltaAngleX\n      };\n    }\n\n    return this._getUpdatedState(newRotation);\n  }\n\n  /**\n   * End rotating\n   * Must call if `rotateStart()` was called\n   */\n  rotateEnd(): OrbitState {\n    return this._getUpdatedState({\n      startRotationX: null,\n      startRotationOrbit: null\n    });\n  }\n\n  // shortest path between two view states\n  shortestPathFrom(viewState: OrbitState): OrbitStateProps {\n    const fromProps = viewState.getViewportProps();\n    const props = {...this.getViewportProps()};\n    const {rotationOrbit} = props;\n\n    if (Math.abs(rotationOrbit - fromProps.rotationOrbit) > 180) {\n      props.rotationOrbit = rotationOrbit < 0 ? rotationOrbit + 360 : rotationOrbit - 360;\n    }\n\n    return props;\n  }\n\n  /**\n   * Start zooming\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  zoomStart({pos}: {pos: [number, number]}): OrbitState {\n    return this._getUpdatedState({\n      startZoomPosition: this._unproject(pos),\n      startZoom: this.getViewportProps().zoom\n    });\n  }\n\n  /**\n   * Zoom\n   * @param {[Number, Number]} pos - position on screen where the current target is\n   * @param {[Number, Number]} startPos - the target position at\n   *   the start of the operation. Must be supplied of `zoomStart()` was not called\n   * @param {Number} scale - a number between [0, 1] specifying the accumulated\n   *   relative scale.\n   */\n  zoom({\n    pos,\n    startPos,\n    scale\n  }: {\n    pos: [number, number];\n    startPos?: [number, number];\n    scale: number;\n  }): OrbitState {\n    let {startZoom, startZoomPosition} = this.getState();\n    if (!startZoomPosition) {\n      // We have two modes of zoom:\n      // scroll zoom that are discrete events (transform from the current zoom level),\n      // and pinch zoom that are continuous events (transform from the zoom level when\n      // pinch started).\n      // If startZoom state is defined, then use the startZoom state;\n      // otherwise assume discrete zooming\n      startZoom = this.getViewportProps().zoom;\n      startZoomPosition = this._unproject(startPos) || this._unproject(pos);\n    }\n    if (!startZoomPosition) {\n      return this;\n    }\n    const newZoom = this._calculateNewZoom({scale, startZoom});\n    const zoomedViewport = this.makeViewport({...this.getViewportProps(), zoom: newZoom});\n\n    return this._getUpdatedState({\n      zoom: newZoom,\n      ...zoomedViewport.panByPosition(startZoomPosition, pos)\n    });\n  }\n\n  /**\n   * End zooming\n   * Must call if `zoomStart()` was called\n   */\n  zoomEnd(): OrbitState {\n    return this._getUpdatedState({\n      startZoomPosition: null,\n      startZoom: null\n    });\n  }\n\n  zoomIn(speed: number = 2): OrbitState {\n    return this._getUpdatedState({\n      zoom: this._calculateNewZoom({scale: speed})\n    });\n  }\n\n  zoomOut(speed: number = 2): OrbitState {\n    return this._getUpdatedState({\n      zoom: this._calculateNewZoom({scale: 1 / speed})\n    });\n  }\n\n  moveLeft(speed: number = 50): OrbitState {\n    return this._panFromCenter([-speed, 0]);\n  }\n\n  moveRight(speed: number = 50): OrbitState {\n    return this._panFromCenter([speed, 0]);\n  }\n\n  moveUp(speed: number = 50): OrbitState {\n    return this._panFromCenter([0, -speed]);\n  }\n\n  moveDown(speed: number = 50): OrbitState {\n    return this._panFromCenter([0, speed]);\n  }\n\n  rotateLeft(speed: number = 15): OrbitState {\n    return this._getUpdatedState({\n      rotationOrbit: this.getViewportProps().rotationOrbit - speed\n    });\n  }\n\n  rotateRight(speed: number = 15): OrbitState {\n    return this._getUpdatedState({\n      rotationOrbit: this.getViewportProps().rotationOrbit + speed\n    });\n  }\n\n  rotateUp(speed: number = 10): OrbitState {\n    return this._getUpdatedState({\n      rotationX: this.getViewportProps().rotationX - speed\n    });\n  }\n\n  rotateDown(speed: number = 10): OrbitState {\n    return this._getUpdatedState({\n      rotationX: this.getViewportProps().rotationX + speed\n    });\n  }\n\n  /* Private methods */\n\n  _unproject(pos?: number[]): number[] | undefined {\n    const viewport = this.makeViewport(this.getViewportProps());\n    // @ts-ignore\n    return pos && viewport.unproject(pos);\n  }\n\n  // Calculates new zoom\n  _calculateNewZoom({\n    scale,\n    startZoom\n  }: {\n    scale: number;\n    startZoom?: number | number[];\n  }): number | number[] {\n    const {maxZoom, minZoom} = this.getViewportProps();\n    if (startZoom === undefined) {\n      startZoom = this.getViewportProps().zoom;\n    }\n    const zoom = (startZoom as number) + Math.log2(scale);\n    return clamp(zoom, minZoom, maxZoom);\n  }\n\n  _panFromCenter(offset) {\n    const {width, height, target} = this.getViewportProps();\n    return this.pan({\n      startPosition: target,\n      pos: [width / 2 + offset[0], height / 2 + offset[1]]\n    });\n  }\n\n  _getUpdatedState(newProps): OrbitState {\n    // @ts-ignore\n    return new this.constructor({\n      makeViewport: this.makeViewport,\n      ...this.getViewportProps(),\n      ...this.getState(),\n      ...newProps\n    });\n  }\n\n  // Apply any constraints (mathematical or defined by _viewportProps) to map state\n  applyConstraints(props: Required<OrbitStateProps>): Required<OrbitStateProps> {\n    // Ensure zoom is within specified range\n    const {maxZoom, minZoom, zoom, maxRotationX, minRotationX, rotationOrbit} = props;\n\n    props.zoom = Array.isArray(zoom)\n      ? [clamp(zoom[0], minZoom, maxZoom), clamp(zoom[1], minZoom, maxZoom)]\n      : clamp(zoom, minZoom, maxZoom);\n\n    props.rotationX = clamp(props.rotationX, minRotationX, maxRotationX);\n    if (rotationOrbit < -180 || rotationOrbit > 180) {\n      props.rotationOrbit = mod(rotationOrbit + 180, 360) - 180;\n    }\n\n    return props;\n  }\n}\n\nexport default class OrbitController extends Controller<OrbitState> {\n  ControllerState = OrbitState;\n\n  transition = {\n    transitionDuration: 300,\n    transitionInterpolator: new LinearInterpolator({\n      transitionProps: {\n        compare: ['target', 'zoom', 'rotationX', 'rotationOrbit'],\n        required: ['target', 'zoom']\n      }\n    })\n  };\n}\n"],"file":"orbit-controller.js"}