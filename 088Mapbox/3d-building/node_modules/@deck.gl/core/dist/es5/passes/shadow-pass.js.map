{"version":3,"sources":["../../../src/passes/shadow-pass.ts"],"names":["ShadowPass","gl","props","shadowMap","Texture2D","width","height","parameters","depthBuffer","Renderbuffer","format","fbo","Framebuffer","id","attachments","params","target","depthRange","depthTest","blend","clearColor","viewport","viewports","pixelRatio","resize","pass","layer","shadowEnabled","drawToShadowMap","delete","LayersPass"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;;;;;;;;;IAQqBA,U;;;;;AAKnB,sBACEC,EADF,EAEEC,KAFF,EAKE;AAAA;;AAAA;;AAAA;AACA,8BAAMD,EAAN,EAAUC,KAAV;AADA;AAAA;AAAA;AAIA,UAAKC,SAAL,GAAiB,IAAIC,eAAJ,CAAcH,EAAd,EAAkB;AACjCI,MAAAA,KAAK,EAAE,CAD0B;AAEjCC,MAAAA,MAAM,EAAE,CAFyB;AAGjCC,MAAAA,UAAU;AAHuB,KAAlB,CAAjB;AAWA,UAAKC,WAAL,GAAmB,IAAIC,kBAAJ,CAAiBR,EAAjB,EAAqB;AACtCS,MAAAA,MAAM,OADgC;AAEtCL,MAAAA,KAAK,EAAE,CAF+B;AAGtCC,MAAAA,MAAM,EAAE;AAH8B,KAArB,CAAnB;AAMA,UAAKK,GAAL,GAAW,IAAIC,iBAAJ,CAAgBX,EAAhB,EAAoB;AAC7BY,MAAAA,EAAE,EAAE,WADyB;AAE7BR,MAAAA,KAAK,EAAE,CAFsB;AAG7BC,MAAAA,MAAM,EAAE,CAHqB;AAI7BQ,MAAAA,WAAW,yEACe,MAAKX,SADpB,sDAGc,MAAKK,WAHnB;AAJkB,KAApB,CAAX;AArBA;AA+BD;;;;WAED,gBAAOO,MAAP,EAAe;AAAA;;AACb,UAAMC,MAAM,GAAG,KAAKL,GAApB;AAEA,gCACE,KAAKV,EADP,EAEE;AACEgB,QAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,CADd;AAEEC,QAAAA,SAAS,EAAE,IAFb;AAGEC,QAAAA,KAAK,EAAE,KAHT;AAIEC,QAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV;AAJd,OAFF,EAQE,YAAM;AACJ,YAAMC,QAAQ,GAAGN,MAAM,CAACO,SAAP,CAAiB,CAAjB,CAAjB;AACA,YAAMC,UAAU,GAAG,4BAAiB,MAAI,CAACtB,EAAtB,CAAnB;AACA,YAAMI,KAAK,GAAGgB,QAAQ,CAAChB,KAAT,GAAiBkB,UAA/B;AACA,YAAMjB,MAAM,GAAGe,QAAQ,CAACf,MAAT,GAAkBiB,UAAjC;;AACA,YAAIlB,KAAK,KAAKW,MAAM,CAACX,KAAjB,IAA0BC,MAAM,KAAKU,MAAM,CAACV,MAAhD,EAAwD;AACtDU,UAAAA,MAAM,CAACQ,MAAP,CAAc;AAACnB,YAAAA,KAAK,EAALA,KAAD;AAAQC,YAAAA,MAAM,EAANA;AAAR,WAAd;AACD;;AAED,+IAAiBS,MAAjB;AAAyBC,UAAAA,MAAM,EAANA,MAAzB;AAAiCS,UAAAA,IAAI,EAAE;AAAvC;AACD,OAlBH;AAoBD;;;WAED,yBAAgBC,KAAhB,EAAuB;AACrB,aAAOA,KAAK,CAACxB,KAAN,CAAYyB,aAAZ,KAA8B,KAArC;AACD;;;WAED,+BAAsB;AACpB,aAAO;AACLC,QAAAA,eAAe,EAAE;AADZ,OAAP;AAGD;;;WAED,mBAAS;AACP,UAAI,KAAKjB,GAAT,EAAc;AACZ,aAAKA,GAAL,CAASkB,MAAT;AACA,aAAKlB,GAAL,GAAW,IAAX;AACD;;AAED,UAAI,KAAKR,SAAT,EAAoB;AAClB,aAAKA,SAAL,CAAe0B,MAAf;AACA,aAAK1B,SAAL,GAAiB,IAAjB;AACD;;AAED,UAAI,KAAKK,WAAT,EAAsB;AACpB,aAAKA,WAAL,CAAiBqB,MAAjB;AACA,aAAKrB,WAAL,GAAmB,IAAnB;AACD;AACF;;;EA7FqCsB,mB","sourcesContent":["import {default as LayersPass} from './layers-pass';\nimport {\n  Framebuffer,\n  Texture2D,\n  Renderbuffer,\n  withParameters,\n  cssToDeviceRatio\n} from '@luma.gl/core';\n\nexport default class ShadowPass extends LayersPass {\n  shadowMap: Texture2D;\n  depthBuffer: Renderbuffer;\n  fbo: Framebuffer;\n\n  constructor(\n    gl: WebGLRenderingContext,\n    props?: {\n      id;\n    }\n  ) {\n    super(gl, props);\n\n    // The shadowMap texture\n    this.shadowMap = new Texture2D(gl, {\n      width: 1,\n      height: 1,\n      parameters: {\n        [gl.TEXTURE_MIN_FILTER]: gl.LINEAR,\n        [gl.TEXTURE_MAG_FILTER]: gl.LINEAR,\n        [gl.TEXTURE_WRAP_S]: gl.CLAMP_TO_EDGE,\n        [gl.TEXTURE_WRAP_T]: gl.CLAMP_TO_EDGE\n      }\n    });\n\n    this.depthBuffer = new Renderbuffer(gl, {\n      format: gl.DEPTH_COMPONENT16,\n      width: 1,\n      height: 1\n    });\n\n    this.fbo = new Framebuffer(gl, {\n      id: 'shadowmap',\n      width: 1,\n      height: 1,\n      attachments: {\n        [gl.COLOR_ATTACHMENT0]: this.shadowMap,\n        // Depth attachment has to be specified for depth test to work\n        [gl.DEPTH_ATTACHMENT]: this.depthBuffer\n      }\n    });\n  }\n\n  render(params) {\n    const target = this.fbo;\n\n    withParameters(\n      this.gl,\n      {\n        depthRange: [0, 1],\n        depthTest: true,\n        blend: false,\n        clearColor: [1, 1, 1, 1]\n      },\n      () => {\n        const viewport = params.viewports[0];\n        const pixelRatio = cssToDeviceRatio(this.gl);\n        const width = viewport.width * pixelRatio;\n        const height = viewport.height * pixelRatio;\n        if (width !== target.width || height !== target.height) {\n          target.resize({width, height});\n        }\n\n        super.render({...params, target, pass: 'shadow'});\n      }\n    );\n  }\n\n  shouldDrawLayer(layer) {\n    return layer.props.shadowEnabled !== false;\n  }\n\n  getModuleParameters() {\n    return {\n      drawToShadowMap: true\n    };\n  }\n\n  delete() {\n    if (this.fbo) {\n      this.fbo.delete();\n      this.fbo = null;\n    }\n\n    if (this.shadowMap) {\n      this.shadowMap.delete();\n      this.shadowMap = null;\n    }\n\n    if (this.depthBuffer) {\n      this.depthBuffer.delete();\n      this.depthBuffer = null;\n    }\n  }\n}\n"],"file":"shadow-pass.js"}