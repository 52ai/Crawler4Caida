{"version":3,"sources":["../../../src/lifecycle/component-state.ts"],"names":["EMPTY_PROPS","Object","freeze","ComponentState","component","asyncProps","onAsyncPropUpdated","oldProps","oldAsyncProps","propName","asyncProp","type","release","resolvedValue","props","Boolean","pendingLoadCount","resolvedLoadCount","key","isAsyncPropLoading","value","_watchPromise","Promise","resolve","resolvedValues","ASYNC_RESOLVED_SYMBOL","originalValues","ASYNC_ORIGINAL_SYMBOL","defaultValues","ASYNC_DEFAULTS_SYMBOL","_createAsyncPropData","_updateAsyncProp","getAsyncProp","url","error","_didAsyncInputValueChange","_fetch","_resolveAsyncIterable","_setPropValue","create","defineProperty","enumerable","lastValue","_freezeAsyncOldProps","_postProcessValue","loadCount","undefined","promise","then","data","_setAsyncPropValue","_onResolve","catch","_onError","iterable","count","chunk","dataTransform","concat","startRow","endRow","length","propType","transform","defaultValue","propTypes","constructor","_propTypes"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {isAsyncIterable} from '../utils/iterable-utils';\nimport {ASYNC_ORIGINAL_SYMBOL, ASYNC_RESOLVED_SYMBOL, ASYNC_DEFAULTS_SYMBOL} from './constants';\nimport type Component from './component';\nimport {PropType} from './prop-types';\n\nconst EMPTY_PROPS = Object.freeze({});\n\ntype AsyncPropState = {\n  type: PropType;\n  lastValue: any;\n  resolvedValue: any;\n  pendingLoadCount: number;\n  resolvedLoadCount: number;\n};\n\nexport default class ComponentState<ComponentT extends Component> {\n  component: ComponentT;\n  onAsyncPropUpdated: (propName: string, value: any) => void;\n\n  private asyncProps: Partial<Record<string, AsyncPropState>>;\n  private oldProps: ComponentT['props'] | null;\n  private oldAsyncProps: ComponentT['props'] | null;\n\n  constructor(component: ComponentT) {\n    this.component = component;\n    this.asyncProps = {}; // Prop values that the layer sees\n    this.onAsyncPropUpdated = () => {};\n    this.oldProps = null; // Last props before update\n    this.oldAsyncProps = null; // Last props before update, with async values copied.\n  }\n\n  finalize() {\n    for (const propName in this.asyncProps) {\n      const asyncProp = this.asyncProps[propName];\n      if (asyncProp && asyncProp.type && asyncProp.type.release) {\n        // Release any resources created by transforms\n        asyncProp.type.release(\n          asyncProp.resolvedValue,\n          asyncProp.type,\n          this.component as Component\n        );\n      }\n    }\n  }\n\n  /* Layer-facing props API */\n\n  getOldProps(): ComponentT['props'] | typeof EMPTY_PROPS {\n    return this.oldAsyncProps || this.oldProps || EMPTY_PROPS;\n  }\n\n  resetOldProps() {\n    this.oldAsyncProps = null;\n    this.oldProps = this.component.props;\n  }\n\n  // Checks if a prop is overridden\n  hasAsyncProp(propName: string): boolean {\n    return propName in this.asyncProps;\n  }\n\n  // Returns value of an overriden prop\n  getAsyncProp(propName: string): any {\n    const asyncProp = this.asyncProps[propName];\n    return asyncProp && asyncProp.resolvedValue;\n  }\n\n  isAsyncPropLoading(propName?: string): boolean {\n    if (propName) {\n      const asyncProp = this.asyncProps[propName];\n      return Boolean(\n        asyncProp &&\n          asyncProp.pendingLoadCount > 0 &&\n          asyncProp.pendingLoadCount !== asyncProp.resolvedLoadCount\n      );\n    }\n    for (const key in this.asyncProps) {\n      if (this.isAsyncPropLoading(key)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  // Without changing the original prop value, swap out the data resolution under the hood\n  reloadAsyncProp(propName: string, value: any) {\n    this._watchPromise(propName, Promise.resolve(value));\n  }\n\n  // Updates all async/overridden props (when new props come in)\n  // Checks if urls have changed, starts loading, or removes override\n  setAsyncProps(props: ComponentT['props']) {\n    // NOTE: prop param and default values are only support for testing\n    const resolvedValues = props[ASYNC_RESOLVED_SYMBOL] || {};\n    const originalValues = props[ASYNC_ORIGINAL_SYMBOL] || props;\n    const defaultValues = props[ASYNC_DEFAULTS_SYMBOL] || {};\n\n    // TODO - use async props from the layer's prop types\n    for (const propName in resolvedValues) {\n      const value = resolvedValues[propName];\n      this._createAsyncPropData(propName, defaultValues[propName]);\n      this._updateAsyncProp(propName, value);\n      // Use transformed value\n      resolvedValues[propName] = this.getAsyncProp(propName);\n    }\n\n    for (const propName in originalValues) {\n      const value = originalValues[propName];\n      // Makes sure a record exists for this prop\n      this._createAsyncPropData(propName, defaultValues[propName]);\n      this._updateAsyncProp(propName, value);\n    }\n  }\n\n  /* Placeholder methods for subclassing */\n\n  protected _fetch(propName: string, url: string): any {\n    return null;\n  }\n\n  protected _onResolve(propName: string, value: any) {} // eslint-disable-line @typescript-eslint/no-empty-function\n\n  protected _onError(propName: string, error: Error) {} // eslint-disable-line @typescript-eslint/no-empty-function\n\n  // Intercept strings (URLs) and Promises and activates loading and prop rewriting\n  private _updateAsyncProp(propName: string, value: any) {\n    if (!this._didAsyncInputValueChange(propName, value)) {\n      return;\n    }\n\n    // interpret value string as url and start a new load tracked by a promise\n    if (typeof value === 'string') {\n      value = this._fetch(propName, value);\n    }\n\n    // interprets promise and track the \"loading\"\n    if (value instanceof Promise) {\n      this._watchPromise(propName, value);\n      return;\n    }\n\n    if (isAsyncIterable(value)) {\n      this._resolveAsyncIterable(propName, value); // eslint-disable-line @typescript-eslint/no-floating-promises\n      return;\n    }\n\n    // else, normal, non-async value. Just store value for now\n    this._setPropValue(propName, value);\n  }\n\n  // Whenever async props are changing, we need to make a copy of oldProps\n  // otherwise the prop rewriting will affect the value both in props and oldProps.\n  // While the copy is relatively expensive, this only happens on load completion.\n  private _freezeAsyncOldProps() {\n    if (!this.oldAsyncProps && this.oldProps) {\n      // 1. inherit all synchronous props from oldProps\n      // 2. reconfigure the async prop descriptors to fixed values\n      this.oldAsyncProps = Object.create(this.oldProps);\n      for (const propName in this.asyncProps) {\n        Object.defineProperty(this.oldAsyncProps, propName, {\n          enumerable: true,\n          value: this.oldProps[propName]\n        });\n      }\n    }\n  }\n\n  // Checks if an input value actually changed (to avoid reloading/rewatching promises/urls)\n  private _didAsyncInputValueChange(propName: string, value: any): boolean {\n    // @ts-ignore\n    const asyncProp: AsyncPropState = this.asyncProps[propName];\n    if (value === asyncProp.resolvedValue || value === asyncProp.lastValue) {\n      return false;\n    }\n    asyncProp.lastValue = value;\n    return true;\n  }\n\n  // Set normal, non-async value\n  private _setPropValue(propName: string, value: any) {\n    // Save the current value before overwriting so that diffProps can access both\n    this._freezeAsyncOldProps();\n\n    const asyncProp = this.asyncProps[propName];\n    if (asyncProp) {\n      value = this._postProcessValue(asyncProp, value);\n      asyncProp.resolvedValue = value;\n      asyncProp.pendingLoadCount++;\n      asyncProp.resolvedLoadCount = asyncProp.pendingLoadCount;\n    }\n  }\n\n  // Set a just resolved async value, calling onAsyncPropUpdates if value changes asynchronously\n  private _setAsyncPropValue(propName: string, value: any, loadCount: number) {\n    // Only update if loadCount is larger or equal to resolvedLoadCount\n    // otherwise a more recent load has already completed\n    const asyncProp = this.asyncProps[propName];\n    if (asyncProp && loadCount >= asyncProp.resolvedLoadCount && value !== undefined) {\n      // Save the current value before overwriting so that diffProps can access both\n      this._freezeAsyncOldProps();\n\n      asyncProp.resolvedValue = value;\n      asyncProp.resolvedLoadCount = loadCount;\n\n      // Call callback to inform listener\n      this.onAsyncPropUpdated(propName, value);\n    }\n  }\n\n  // Tracks a promise, sets the prop when loaded, handles load count\n  private _watchPromise(propName: string, promise: Promise<any>) {\n    const asyncProp = this.asyncProps[propName];\n    if (asyncProp) {\n      asyncProp.pendingLoadCount++;\n      const loadCount = asyncProp.pendingLoadCount;\n      promise\n        .then(data => {\n          data = this._postProcessValue(asyncProp, data);\n          this._setAsyncPropValue(propName, data, loadCount);\n          this._onResolve(propName, data);\n        })\n        .catch(error => {\n          this._onError(propName, error);\n        });\n    }\n  }\n\n  private async _resolveAsyncIterable(\n    propName: string,\n    iterable: AsyncIterable<any>\n  ): Promise<void> {\n    if (propName !== 'data') {\n      // we only support data as async iterable\n      this._setPropValue(propName, iterable);\n      return;\n    }\n\n    const asyncProp = this.asyncProps[propName];\n    if (!asyncProp) {\n      return;\n    }\n\n    asyncProp.pendingLoadCount++;\n    const loadCount = asyncProp.pendingLoadCount;\n    let data: any[] = [];\n    let count = 0;\n\n    for await (const chunk of iterable) {\n      // @ts-expect-error (2339) dataTransform is not decared in base component props\n      const {dataTransform} = this.component.props;\n      if (dataTransform) {\n        data = dataTransform(chunk, data) as any[];\n      } else {\n        data = data.concat(chunk);\n      }\n\n      // Used by the default _dataDiff function\n      Object.defineProperty(data, '__diff', {\n        enumerable: false,\n        value: [{startRow: count, endRow: data.length}]\n      });\n\n      count = data.length;\n      this._setAsyncPropValue(propName, data, loadCount);\n    }\n\n    this._onResolve(propName, data);\n  }\n\n  // Give the app a chance to post process the loaded data\n  private _postProcessValue(asyncProp, value: any) {\n    const propType = asyncProp.type;\n    if (propType) {\n      if (propType.release) {\n        propType.release(asyncProp.resolvedValue, propType, this.component);\n      }\n      if (propType.transform) {\n        return propType.transform(value, propType, this.component);\n      }\n    }\n    return value;\n  }\n\n  // Creating an asyncProp record if needed\n  private _createAsyncPropData(propName: string, defaultValue: any) {\n    const asyncProp = this.asyncProps[propName];\n    if (!asyncProp) {\n      // @ts-expect-error\n      const propTypes = this.component && this.component.constructor._propTypes;\n      // assert(defaultValue !== undefined);\n      this.asyncProps[propName] = {\n        type: propTypes && propTypes[propName],\n        lastValue: null, // Supplied prop value (can be url/promise, not visible to layer)\n        resolvedValue: defaultValue, // Resolved prop value (valid data, can be \"shown\" to layer)\n        pendingLoadCount: 0, // How many loads have been issued\n        resolvedLoadCount: 0 // Latest resolved load, (earlier loads will be ignored)\n      };\n    }\n  }\n}\n"],"file":"component-state.js"}