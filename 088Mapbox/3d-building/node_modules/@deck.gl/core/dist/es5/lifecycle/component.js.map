{"version":3,"sources":["../../../src/lifecycle/component.ts"],"names":["counter","Component","propObjects","props","id","count","newProps","asyncProps","key","ASYNC_DEFAULTS_SYMBOL","ASYNC_RESOLVED_SYMBOL","ASYNC_ORIGINAL_SYMBOL","constructor"],"mappings":";;;;;;;;;;;;;;;AAAA;;AAMA;;;;;;AAEA,IAAIA,OAAO,GAAG,CAAd;;IAUqBC,S;AAQnB,uBAA+C;AAAA;AAAA;AAAA;AAAA;;AAAA,sCAAhCC,WAAgC;AAAhCA,MAAAA,WAAgC;AAAA;;AAG7C,SAAKC,KAAL,GAAa,8BAAoB,IAApB,EAA0BD,WAA1B,CAAb;AAGA,SAAKE,EAAL,GAAU,KAAKD,KAAL,CAAWC,EAArB;AACA,SAAKC,KAAL,GAAaL,OAAO,EAApB;AACD;;;;WAGD,eAAMM,QAAN,EAAiC;AAC/B,UAAOH,KAAP,GAAgB,IAAhB,CAAOA,KAAP;AAGA,UAAMI,UAA2B,GAAG,EAApC;;AAGA,WAAK,IAAMC,GAAX,IAAkBL,KAAK,CAACM,gCAAD,CAAvB,EAAgD;AAC9C,YAAID,GAAG,IAAIL,KAAK,CAACO,gCAAD,CAAhB,EAAyC;AACvCH,UAAAA,UAAU,CAACC,GAAD,CAAV,GAAkBL,KAAK,CAACO,gCAAD,CAAL,CAA6BF,GAA7B,CAAlB;AACD,SAFD,MAEO,IAAIA,GAAG,IAAIL,KAAK,CAACQ,gCAAD,CAAhB,EAAyC;AAC9CJ,UAAAA,UAAU,CAACC,GAAD,CAAV,GAAkBL,KAAK,CAACQ,gCAAD,CAAL,CAA6BH,GAA7B,CAAlB;AACD;AACF;;AAID,aAAO,IAAI,KAAKI,WAAT,+CAAyBT,KAAzB,GAAmCI,UAAnC,GAAkDD,QAAlD,EAAP;AACD;;;;;;8BArCkBL,S,mBACY,W;8BADZA,S,kBAEiB,E","sourcesContent":["import {\n  COMPONENT_SYMBOL,\n  ASYNC_ORIGINAL_SYMBOL,\n  ASYNC_RESOLVED_SYMBOL,\n  ASYNC_DEFAULTS_SYMBOL\n} from './constants';\nimport {createProps} from './create-props';\n\nlet counter = 0;\n\nexport type StatefulComponentProps<PropsT> = PropsT & {\n  id: string;\n  [COMPONENT_SYMBOL]: Component<PropsT>;\n  [ASYNC_DEFAULTS_SYMBOL]: Partial<PropsT>;\n  [ASYNC_ORIGINAL_SYMBOL]: Partial<PropsT>;\n  [ASYNC_RESOLVED_SYMBOL]: Partial<PropsT>;\n};\n\nexport default class Component<PropsT = {}> {\n  static componentName: string = 'Component';\n  static defaultProps: Readonly<{}> = {};\n\n  id: string;\n  props: StatefulComponentProps<PropsT>;\n  count: number;\n\n  constructor(...propObjects: Partial<PropsT>[]) {\n    // Merge supplied props with default props and freeze them.\n    /* eslint-disable prefer-spread */\n    this.props = createProps<PropsT>(this, propObjects);\n    /* eslint-enable prefer-spread */\n\n    this.id = this.props.id; // The layer's id, used for matching with layers from last render cycle\n    this.count = counter++; // Keep track of how many layer instances you are generating\n  }\n\n  // clone this layer with modified props\n  clone(newProps: Partial<PropsT>) {\n    const {props} = this;\n\n    // Async props cannot be copied with Object.assign, copy them separately\n    const asyncProps: Partial<PropsT> = {};\n\n    // See async props definition in create-props.js\n    for (const key in props[ASYNC_DEFAULTS_SYMBOL]) {\n      if (key in props[ASYNC_RESOLVED_SYMBOL]) {\n        asyncProps[key] = props[ASYNC_RESOLVED_SYMBOL][key];\n      } else if (key in props[ASYNC_ORIGINAL_SYMBOL]) {\n        asyncProps[key] = props[ASYNC_ORIGINAL_SYMBOL][key];\n      }\n    }\n\n    // Some custom layer implementation may not support multiple arguments in the constructor\n    // @ts-ignore\n    return new this.constructor({...props, ...asyncProps, ...newProps});\n  }\n}\n"],"file":"component.js"}