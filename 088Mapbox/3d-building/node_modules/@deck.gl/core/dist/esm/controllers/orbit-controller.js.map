{"version":3,"sources":["../../../src/controllers/orbit-controller.ts"],"names":["clamp","Controller","ViewState","mod","LinearInterpolator","OrbitState","constructor","options","width","height","rotationX","rotationOrbit","target","zoom","minRotationX","maxRotationX","minZoom","Infinity","maxZoom","startPanPosition","startRotatePos","startRotationX","startRotationOrbit","startZoomPosition","startZoom","makeViewport","panStart","pos","_getUpdatedState","_unproject","pan","startPosition","getState","viewport","getViewportProps","newProps","panByPosition","panEnd","rotateStart","rotate","deltaAngleX","deltaAngleY","undefined","newRotation","deltaScaleX","deltaScaleY","rotateEnd","shortestPathFrom","viewState","fromProps","props","Math","abs","zoomStart","startPos","scale","newZoom","_calculateNewZoom","zoomedViewport","zoomEnd","zoomIn","speed","zoomOut","moveLeft","_panFromCenter","moveRight","moveUp","moveDown","rotateLeft","rotateRight","rotateUp","rotateDown","unproject","log2","offset","applyConstraints","Array","isArray","OrbitController","transitionDuration","transitionInterpolator","transitionProps","compare","required"],"mappings":"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","sourcesContent":["import {clamp} from '@math.gl/core';\nimport Controller from './controller';\nimport ViewState from './view-state';\nimport {mod} from '../utils/math-utils';\n\nimport type Viewport from '../viewports/viewport';\nimport LinearInterpolator from '../transitions/linear-interpolator';\n\nexport type OrbitStateProps = {\n  width: number;\n  height: number;\n  target?: number[];\n  zoom?: number | number[];\n  rotationX?: number;\n  rotationOrbit?: number;\n\n  /** Viewport constraints */\n  maxZoom?: number;\n  minZoom?: number;\n  minRotationX?: number;\n  maxRotationX?: number;\n};\n\ntype OrbitStateInternal = {\n  startPanPosition?: number[];\n  startRotatePos?: number[];\n  startRotationX?: number;\n  startRotationOrbit?: number;\n  startZoomPosition?: number[];\n  startZoom?: number | number[];\n};\n\nexport class OrbitState extends ViewState<OrbitState, OrbitStateProps, OrbitStateInternal> {\n  makeViewport: (props: Record<string, any>) => Viewport;\n\n  constructor(\n    options: OrbitStateProps &\n      OrbitStateInternal & {\n        makeViewport: (props: Record<string, any>) => Viewport;\n      }\n  ) {\n    const {\n      /* Viewport arguments */\n      width, // Width of viewport\n      height, // Height of viewport\n      rotationX = 0, // Rotation around x axis\n      rotationOrbit = 0, // Rotation around orbit axis\n      target = [0, 0, 0],\n      zoom = 0,\n\n      /* Viewport constraints */\n      minRotationX = -90,\n      maxRotationX = 90,\n      minZoom = -Infinity,\n      maxZoom = Infinity,\n\n      /** Interaction states, required to calculate change during transform */\n      // Model state when the pan operation first started\n      startPanPosition,\n      // Model state when the rotate operation first started\n      startRotatePos,\n      startRotationX,\n      startRotationOrbit,\n      // Model state when the zoom operation first started\n      startZoomPosition,\n      startZoom\n    } = options;\n\n    super(\n      {\n        width,\n        height,\n        rotationX,\n        rotationOrbit,\n        target,\n        zoom,\n        minRotationX,\n        maxRotationX,\n        minZoom,\n        maxZoom\n      },\n      {\n        startPanPosition,\n        startRotatePos,\n        startRotationX,\n        startRotationOrbit,\n        startZoomPosition,\n        startZoom\n      }\n    );\n\n    this.makeViewport = options.makeViewport;\n  }\n\n  /**\n   * Start panning\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  panStart({pos}: {pos: [number, number]}): OrbitState {\n    return this._getUpdatedState({\n      startPanPosition: this._unproject(pos)\n    });\n  }\n\n  /**\n   * Pan\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   */\n  pan({pos, startPosition}: {pos: [number, number]; startPosition?: number[]}): OrbitState {\n    const startPanPosition = this.getState().startPanPosition || startPosition;\n\n    if (!startPanPosition) {\n      return this;\n    }\n\n    const viewport = this.makeViewport(this.getViewportProps());\n    const newProps = viewport.panByPosition(startPanPosition, pos);\n\n    return this._getUpdatedState(newProps);\n  }\n\n  /**\n   * End panning\n   * Must call if `panStart()` was called\n   */\n  panEnd(): OrbitState {\n    return this._getUpdatedState({\n      startPanPosition: null\n    });\n  }\n\n  /**\n   * Start rotating\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  rotateStart({pos}: {pos: [number, number]}): OrbitState {\n    return this._getUpdatedState({\n      startRotatePos: pos,\n      startRotationX: this.getViewportProps().rotationX,\n      startRotationOrbit: this.getViewportProps().rotationOrbit\n    });\n  }\n\n  /**\n   * Rotate\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   */\n  rotate({\n    pos,\n    deltaAngleX = 0,\n    deltaAngleY = 0\n  }: {\n    pos?: [number, number];\n    deltaAngleX?: number;\n    deltaAngleY?: number;\n  }): OrbitState {\n    const {startRotatePos, startRotationX, startRotationOrbit} = this.getState();\n    const {width, height} = this.getViewportProps();\n\n    if (!startRotatePos || startRotationX === undefined || startRotationOrbit === undefined) {\n      return this;\n    }\n\n    let newRotation;\n    if (pos) {\n      let deltaScaleX = (pos[0] - startRotatePos[0]) / width;\n      const deltaScaleY = (pos[1] - startRotatePos[1]) / height;\n\n      if (startRotationX < -90 || startRotationX > 90) {\n        // When looking at the \"back\" side of the scene, invert horizontal drag\n        // so that the camera movement follows user input\n        deltaScaleX *= -1;\n      }\n      newRotation = {\n        rotationX: startRotationX + deltaScaleY * 180,\n        rotationOrbit: startRotationOrbit + deltaScaleX * 180\n      };\n    } else {\n      newRotation = {\n        rotationX: startRotationX + deltaAngleY,\n        rotationOrbit: startRotationOrbit + deltaAngleX\n      };\n    }\n\n    return this._getUpdatedState(newRotation);\n  }\n\n  /**\n   * End rotating\n   * Must call if `rotateStart()` was called\n   */\n  rotateEnd(): OrbitState {\n    return this._getUpdatedState({\n      startRotationX: null,\n      startRotationOrbit: null\n    });\n  }\n\n  // shortest path between two view states\n  shortestPathFrom(viewState: OrbitState): OrbitStateProps {\n    const fromProps = viewState.getViewportProps();\n    const props = {...this.getViewportProps()};\n    const {rotationOrbit} = props;\n\n    if (Math.abs(rotationOrbit - fromProps.rotationOrbit) > 180) {\n      props.rotationOrbit = rotationOrbit < 0 ? rotationOrbit + 360 : rotationOrbit - 360;\n    }\n\n    return props;\n  }\n\n  /**\n   * Start zooming\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  zoomStart({pos}: {pos: [number, number]}): OrbitState {\n    return this._getUpdatedState({\n      startZoomPosition: this._unproject(pos),\n      startZoom: this.getViewportProps().zoom\n    });\n  }\n\n  /**\n   * Zoom\n   * @param {[Number, Number]} pos - position on screen where the current target is\n   * @param {[Number, Number]} startPos - the target position at\n   *   the start of the operation. Must be supplied of `zoomStart()` was not called\n   * @param {Number} scale - a number between [0, 1] specifying the accumulated\n   *   relative scale.\n   */\n  zoom({\n    pos,\n    startPos,\n    scale\n  }: {\n    pos: [number, number];\n    startPos?: [number, number];\n    scale: number;\n  }): OrbitState {\n    let {startZoom, startZoomPosition} = this.getState();\n    if (!startZoomPosition) {\n      // We have two modes of zoom:\n      // scroll zoom that are discrete events (transform from the current zoom level),\n      // and pinch zoom that are continuous events (transform from the zoom level when\n      // pinch started).\n      // If startZoom state is defined, then use the startZoom state;\n      // otherwise assume discrete zooming\n      startZoom = this.getViewportProps().zoom;\n      startZoomPosition = this._unproject(startPos) || this._unproject(pos);\n    }\n    if (!startZoomPosition) {\n      return this;\n    }\n    const newZoom = this._calculateNewZoom({scale, startZoom});\n    const zoomedViewport = this.makeViewport({...this.getViewportProps(), zoom: newZoom});\n\n    return this._getUpdatedState({\n      zoom: newZoom,\n      ...zoomedViewport.panByPosition(startZoomPosition, pos)\n    });\n  }\n\n  /**\n   * End zooming\n   * Must call if `zoomStart()` was called\n   */\n  zoomEnd(): OrbitState {\n    return this._getUpdatedState({\n      startZoomPosition: null,\n      startZoom: null\n    });\n  }\n\n  zoomIn(speed: number = 2): OrbitState {\n    return this._getUpdatedState({\n      zoom: this._calculateNewZoom({scale: speed})\n    });\n  }\n\n  zoomOut(speed: number = 2): OrbitState {\n    return this._getUpdatedState({\n      zoom: this._calculateNewZoom({scale: 1 / speed})\n    });\n  }\n\n  moveLeft(speed: number = 50): OrbitState {\n    return this._panFromCenter([-speed, 0]);\n  }\n\n  moveRight(speed: number = 50): OrbitState {\n    return this._panFromCenter([speed, 0]);\n  }\n\n  moveUp(speed: number = 50): OrbitState {\n    return this._panFromCenter([0, -speed]);\n  }\n\n  moveDown(speed: number = 50): OrbitState {\n    return this._panFromCenter([0, speed]);\n  }\n\n  rotateLeft(speed: number = 15): OrbitState {\n    return this._getUpdatedState({\n      rotationOrbit: this.getViewportProps().rotationOrbit - speed\n    });\n  }\n\n  rotateRight(speed: number = 15): OrbitState {\n    return this._getUpdatedState({\n      rotationOrbit: this.getViewportProps().rotationOrbit + speed\n    });\n  }\n\n  rotateUp(speed: number = 10): OrbitState {\n    return this._getUpdatedState({\n      rotationX: this.getViewportProps().rotationX - speed\n    });\n  }\n\n  rotateDown(speed: number = 10): OrbitState {\n    return this._getUpdatedState({\n      rotationX: this.getViewportProps().rotationX + speed\n    });\n  }\n\n  /* Private methods */\n\n  _unproject(pos?: number[]): number[] | undefined {\n    const viewport = this.makeViewport(this.getViewportProps());\n    // @ts-ignore\n    return pos && viewport.unproject(pos);\n  }\n\n  // Calculates new zoom\n  _calculateNewZoom({\n    scale,\n    startZoom\n  }: {\n    scale: number;\n    startZoom?: number | number[];\n  }): number | number[] {\n    const {maxZoom, minZoom} = this.getViewportProps();\n    if (startZoom === undefined) {\n      startZoom = this.getViewportProps().zoom;\n    }\n    const zoom = (startZoom as number) + Math.log2(scale);\n    return clamp(zoom, minZoom, maxZoom);\n  }\n\n  _panFromCenter(offset) {\n    const {width, height, target} = this.getViewportProps();\n    return this.pan({\n      startPosition: target,\n      pos: [width / 2 + offset[0], height / 2 + offset[1]]\n    });\n  }\n\n  _getUpdatedState(newProps): OrbitState {\n    // @ts-ignore\n    return new this.constructor({\n      makeViewport: this.makeViewport,\n      ...this.getViewportProps(),\n      ...this.getState(),\n      ...newProps\n    });\n  }\n\n  // Apply any constraints (mathematical or defined by _viewportProps) to map state\n  applyConstraints(props: Required<OrbitStateProps>): Required<OrbitStateProps> {\n    // Ensure zoom is within specified range\n    const {maxZoom, minZoom, zoom, maxRotationX, minRotationX, rotationOrbit} = props;\n\n    props.zoom = Array.isArray(zoom)\n      ? [clamp(zoom[0], minZoom, maxZoom), clamp(zoom[1], minZoom, maxZoom)]\n      : clamp(zoom, minZoom, maxZoom);\n\n    props.rotationX = clamp(props.rotationX, minRotationX, maxRotationX);\n    if (rotationOrbit < -180 || rotationOrbit > 180) {\n      props.rotationOrbit = mod(rotationOrbit + 180, 360) - 180;\n    }\n\n    return props;\n  }\n}\n\nexport default class OrbitController extends Controller<OrbitState> {\n  ControllerState = OrbitState;\n\n  transition = {\n    transitionDuration: 300,\n    transitionInterpolator: new LinearInterpolator({\n      transitionProps: {\n        compare: ['target', 'zoom', 'rotationX', 'rotationOrbit'],\n        required: ['target', 'zoom']\n      }\n    })\n  };\n}\n"],"file":"orbit-controller.js"}