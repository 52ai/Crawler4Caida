{"version":3,"sources":["../../../src/controllers/first-person-controller.ts"],"names":["Controller","ViewState","mod","LinearInterpolator","Vector3","_SphericalCoordinates","SphericalCoordinates","clamp","MOVEMENT_SPEED","FirstPersonState","constructor","options","width","height","position","bearing","pitch","longitude","latitude","maxPitch","minPitch","startRotatePos","startBearing","startPitch","startZoomPosition","panStart","pan","panEnd","rotateStart","pos","_getUpdatedState","getViewportProps","rotate","deltaAngleX","deltaAngleY","getState","undefined","newRotation","deltaScaleX","deltaScaleY","rotateEnd","zoomStart","zoom","scale","direction","getDirection","_move","Math","log2","zoomEnd","moveLeft","speed","rotateZ","radians","PI","moveRight","moveUp","moveDown","negate","rotateLeft","rotateRight","rotateUp","rotateDown","zoomIn","zoomOut","shortestPathFrom","viewState","fromProps","props","abs","fromPosition","delta","add","use2D","spherical","toVector3","normalize","newProps","applyConstraints","FirstPersonController","transitionDuration","transitionInterpolator"],"mappings":"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","sourcesContent":["import Controller from './controller';\nimport ViewState from './view-state';\nimport {mod} from '../utils/math-utils';\nimport LinearInterpolator from '../transitions/linear-interpolator';\n\nimport {Vector3, _SphericalCoordinates as SphericalCoordinates, clamp} from '@math.gl/core';\n\nconst MOVEMENT_SPEED = 20;\n\ntype FirstPersonStateProps = {\n  width: number;\n  height: number;\n\n  position?: number[];\n  bearing?: number;\n  pitch?: number;\n\n  // Geospatial anchor\n  longitude?: number | null;\n  latitude?: number | null;\n\n  maxPitch?: number;\n  minPitch?: number;\n};\n\ntype FirstPersonStateInternal = {\n  startRotatePos?: [number, number];\n  startBearing?: number;\n  startPitch?: number;\n  startZoomPosition?: number[];\n};\n\nclass FirstPersonState extends ViewState<\n  FirstPersonState,\n  FirstPersonStateProps,\n  FirstPersonStateInternal\n> {\n  constructor(options: FirstPersonStateProps & FirstPersonStateInternal) {\n    const {\n      /* Viewport arguments */\n      width, // Width of viewport\n      height, // Height of viewport\n\n      // Position and orientation\n      position = [0, 0, 0], // typically in meters from anchor point\n\n      bearing = 0, // Rotation around y axis\n      pitch = 0, // Rotation around x axis\n\n      // Geospatial anchor\n      longitude = null,\n      latitude = null,\n\n      maxPitch = 90,\n      minPitch = -90,\n\n      // Model state when the rotate operation first started\n      startRotatePos,\n      startBearing,\n      startPitch,\n      startZoomPosition\n    } = options;\n\n    super(\n      {\n        width,\n        height,\n        position,\n        bearing,\n        pitch,\n        longitude,\n        latitude,\n        maxPitch,\n        minPitch\n      },\n      {\n        startRotatePos,\n        startBearing,\n        startPitch,\n        startZoomPosition\n      }\n    );\n  }\n\n  /* Public API */\n\n  /**\n   * Start panning\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  panStart(): FirstPersonState {\n    return this;\n  }\n\n  /**\n   * Pan\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   */\n  pan(): FirstPersonState {\n    return this;\n  }\n\n  /**\n   * End panning\n   * Must call if `panStart()` was called\n   */\n  panEnd(): FirstPersonState {\n    return this;\n  }\n\n  /**\n   * Start rotating\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  rotateStart({pos}: {pos: [number, number]}): FirstPersonState {\n    return this._getUpdatedState({\n      startRotatePos: pos,\n      startBearing: this.getViewportProps().bearing,\n      startPitch: this.getViewportProps().pitch\n    });\n  }\n\n  /**\n   * Rotate\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   */\n  rotate({\n    pos,\n    deltaAngleX = 0,\n    deltaAngleY = 0\n  }: {\n    pos?: [number, number];\n    deltaAngleX?: number;\n    deltaAngleY: number;\n  }): FirstPersonState {\n    const {startRotatePos, startBearing, startPitch} = this.getState();\n    const {width, height} = this.getViewportProps();\n\n    if (!startRotatePos || startBearing === undefined || startPitch === undefined) {\n      return this;\n    }\n\n    let newRotation;\n    if (pos) {\n      const deltaScaleX = (pos[0] - startRotatePos[0]) / width;\n      const deltaScaleY = (pos[1] - startRotatePos[1]) / height;\n      newRotation = {\n        bearing: startBearing - deltaScaleX * 180,\n        pitch: startPitch - deltaScaleY * 90\n      };\n    } else {\n      newRotation = {\n        bearing: startBearing - deltaAngleX,\n        pitch: startPitch - deltaAngleY\n      };\n    }\n\n    return this._getUpdatedState(newRotation);\n  }\n\n  /**\n   * End rotating\n   * Must call if `rotateStart()` was called\n   */\n  rotateEnd(): FirstPersonState {\n    return this._getUpdatedState({\n      startRotatePos: null,\n      startBearing: null,\n      startPitch: null\n    });\n  }\n\n  /**\n   * Start zooming\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  zoomStart(): FirstPersonState {\n    return this._getUpdatedState({\n      startZoomPosition: this.getViewportProps().position\n    });\n  }\n\n  /**\n   * Zoom\n   * @param {[Number, Number]} pos - position on screen where the current center is\n   * @param {[Number, Number]} startPos - the center position at\n   *   the start of the operation. Must be supplied of `zoomStart()` was not called\n   * @param {Number} scale - a number between [0, 1] specifying the accumulated\n   *   relative scale.\n   */\n  zoom({scale}: {scale: number}): FirstPersonState {\n    let {startZoomPosition} = this.getState();\n    if (!startZoomPosition) {\n      startZoomPosition = this.getViewportProps().position;\n    }\n\n    const direction = this.getDirection();\n    return this._move(direction, Math.log2(scale) * MOVEMENT_SPEED, startZoomPosition);\n  }\n\n  /**\n   * End zooming\n   * Must call if `zoomStart()` was called\n   */\n  zoomEnd(): FirstPersonState {\n    return this._getUpdatedState({\n      startZoomPosition: null\n    });\n  }\n\n  moveLeft(speed: number = MOVEMENT_SPEED): FirstPersonState {\n    const direction = this.getDirection(true);\n    return this._move(direction.rotateZ({radians: Math.PI / 2}), speed);\n  }\n\n  moveRight(speed: number = MOVEMENT_SPEED): FirstPersonState {\n    const direction = this.getDirection(true);\n    return this._move(direction.rotateZ({radians: -Math.PI / 2}), speed);\n  }\n\n  // forward\n  moveUp(speed: number = MOVEMENT_SPEED): FirstPersonState {\n    const direction = this.getDirection(true);\n    return this._move(direction, speed);\n  }\n\n  // backward\n  moveDown(speed: number = MOVEMENT_SPEED): FirstPersonState {\n    const direction = this.getDirection(true);\n    return this._move(direction.negate(), speed);\n  }\n\n  rotateLeft(speed: number = 15): FirstPersonState {\n    return this._getUpdatedState({\n      bearing: this.getViewportProps().bearing - speed\n    });\n  }\n\n  rotateRight(speed: number = 15): FirstPersonState {\n    return this._getUpdatedState({\n      bearing: this.getViewportProps().bearing + speed\n    });\n  }\n\n  rotateUp(speed: number = 10): FirstPersonState {\n    return this._getUpdatedState({\n      pitch: this.getViewportProps().pitch + speed\n    });\n  }\n\n  rotateDown(speed: number = 10): FirstPersonState {\n    return this._getUpdatedState({\n      pitch: this.getViewportProps().pitch - speed\n    });\n  }\n\n  zoomIn(speed: number = 2): FirstPersonState {\n    return this.zoom({scale: speed});\n  }\n\n  zoomOut(speed: number = 2): FirstPersonState {\n    return this.zoom({scale: 1 / speed});\n  }\n\n  // shortest path between two view states\n  shortestPathFrom(viewState: FirstPersonState) {\n    const fromProps = viewState.getViewportProps();\n    const props = {...this.getViewportProps()};\n    const {bearing, longitude} = props;\n\n    if (Math.abs(bearing - fromProps.bearing) > 180) {\n      props.bearing = bearing < 0 ? bearing + 360 : bearing - 360;\n    }\n    if (\n      longitude !== null &&\n      fromProps.longitude !== null &&\n      Math.abs(longitude - fromProps.longitude) > 180\n    ) {\n      props.longitude = longitude < 0 ? longitude + 360 : longitude - 360;\n    }\n    return props;\n  }\n\n  /* Private methods */\n  _move(\n    direction: Vector3,\n    speed: number,\n    fromPosition: number[] = this.getViewportProps().position\n  ) {\n    const delta = direction.scale(speed);\n    return this._getUpdatedState({\n      position: new Vector3(fromPosition).add(delta)\n    });\n  }\n\n  getDirection(use2D: boolean = false): Vector3 {\n    const spherical = new SphericalCoordinates({\n      bearing: this.getViewportProps().bearing,\n      pitch: use2D ? 90 : 90 + this.getViewportProps().pitch\n    });\n    const direction = spherical.toVector3().normalize();\n    return direction;\n  }\n\n  _getUpdatedState(newProps: Record<string, any>): FirstPersonState {\n    // Update _viewportProps\n    return new FirstPersonState({...this.getViewportProps(), ...this.getState(), ...newProps});\n  }\n\n  // Apply any constraints (mathematical or defined by _viewportProps) to map state\n  applyConstraints(props: Required<FirstPersonStateProps>): Required<FirstPersonStateProps> {\n    // Ensure pitch and zoom are within specified range\n    const {pitch, maxPitch, minPitch, longitude, bearing} = props;\n    props.pitch = clamp(pitch, minPitch, maxPitch);\n\n    // Normalize degrees\n    if (longitude !== null && (longitude < -180 || longitude > 180)) {\n      props.longitude = mod(longitude + 180, 360) - 180;\n    }\n    if (bearing < -180 || bearing > 180) {\n      props.bearing = mod(bearing + 180, 360) - 180;\n    }\n\n    return props;\n  }\n}\n\nexport default class FirstPersonController extends Controller<FirstPersonState> {\n  ControllerState = FirstPersonState;\n\n  transition = {\n    transitionDuration: 300,\n    transitionInterpolator: new LinearInterpolator(['position', 'pitch', 'bearing'])\n  };\n}\n"],"file":"first-person-controller.js"}