{"version":3,"sources":["../../../src/controllers/orthographic-controller.ts"],"names":["clamp","Controller","OrbitState","LinearInterpolator","OrthographicState","constructor","props","zoomAxis","_calculateNewZoom","scale","startZoom","maxZoom","minZoom","getViewportProps","undefined","zoom","deltaZoom","Math","log2","Array","isArray","newZoomX","newZoomY","z","min","max","OrthographicController","transitionDuration","transitionInterpolator","_onPanRotate"],"mappings":";AAAA,SAAQA,KAAR,QAAoB,eAApB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,SAAQC,UAAR,QAAyB,oBAAzB;AACA,OAAOC,kBAAP,MAA+B,oCAA/B;;AAEA,MAAMC,iBAAN,SAAgCF,UAAhC,CAA2C;AAGzCG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB;;AAGjB,SAAKC,QAAL,GAAgBD,KAAK,CAACC,QAAN,IAAkB,KAAlC;AACD;;AAEDC,EAAAA,iBAAiB,CAAC;AAACC,IAAAA,KAAD;AAAQC,IAAAA;AAAR,GAAD,EAAqB;AACpC,UAAM;AAACC,MAAAA,OAAD;AAAUC,MAAAA;AAAV,QAAqB,KAAKC,gBAAL,EAA3B;;AACA,QAAIH,SAAS,KAAKI,SAAlB,EAA6B;AAC3BJ,MAAAA,SAAS,GAAG,KAAKG,gBAAL,GAAwBE,IAApC;AACD;;AACD,QAAIC,SAAS,GAAGC,IAAI,CAACC,IAAL,CAAUT,KAAV,CAAhB;;AACA,QAAIU,KAAK,CAACC,OAAN,CAAcV,SAAd,CAAJ,EAA8B;AAC5B,UAAI,CAACW,QAAD,EAAWC,QAAX,IAAuBZ,SAA3B;;AACA,cAAQ,KAAKH,QAAb;AACE,aAAK,GAAL;AAEEc,UAAAA,QAAQ,GAAGrB,KAAK,CAACqB,QAAQ,GAAGL,SAAZ,EAAuBJ,OAAvB,EAAgCD,OAAhC,CAAhB;AACA;;AACF,aAAK,GAAL;AAEEW,UAAAA,QAAQ,GAAGtB,KAAK,CAACsB,QAAQ,GAAGN,SAAZ,EAAuBJ,OAAvB,EAAgCD,OAAhC,CAAhB;AACA;;AACF;AAEE,cAAIY,CAAC,GAAGN,IAAI,CAACO,GAAL,CAASH,QAAQ,GAAGL,SAApB,EAA+BM,QAAQ,GAAGN,SAA1C,CAAR;;AACA,cAAIO,CAAC,GAAGX,OAAR,EAAiB;AACfI,YAAAA,SAAS,IAAIJ,OAAO,GAAGW,CAAvB;AACD;;AACDA,UAAAA,CAAC,GAAGN,IAAI,CAACQ,GAAL,CAASJ,QAAQ,GAAGL,SAApB,EAA+BM,QAAQ,GAAGN,SAA1C,CAAJ;;AACA,cAAIO,CAAC,GAAGZ,OAAR,EAAiB;AACfK,YAAAA,SAAS,IAAIL,OAAO,GAAGY,CAAvB;AACD;;AACDF,UAAAA,QAAQ,IAAIL,SAAZ;AACAM,UAAAA,QAAQ,IAAIN,SAAZ;AApBJ;;AAsBA,aAAO,CAACK,QAAD,EAAWC,QAAX,CAAP;AACD;;AAID,WAAOtB,KAAK,CAACU,SAAS,GAAGM,SAAb,EAAwBJ,OAAxB,EAAiCD,OAAjC,CAAZ;AACD;;AA7CwC;;AAgD3C,eAAe,MAAMe,sBAAN,SAAqCzB,UAArC,CAA4D;AAAA;AAAA;;AAAA,6CACvDG,iBADuD;;AAAA,wCAE5D;AACXuB,MAAAA,kBAAkB,EAAE,GADT;AAEXC,MAAAA,sBAAsB,EAAE,IAAIzB,kBAAJ,CAAuB,CAAC,QAAD,EAAW,MAAX,CAAvB;AAFb,KAF4D;;AAAA,sCAM5C,KAN4C;AAAA;;AAQzE0B,EAAAA,YAAY,GAAG;AAEb,WAAO,KAAP;AACD;;AAXwE","sourcesContent":["import {clamp} from '@math.gl/core';\nimport Controller from './controller';\nimport {OrbitState} from './orbit-controller';\nimport LinearInterpolator from '../transitions/linear-interpolator';\n\nclass OrthographicState extends OrbitState {\n  zoomAxis: 'X' | 'Y' | 'all';\n\n  constructor(props) {\n    super(props);\n\n    this.zoomAxis = props.zoomAxis || 'all';\n  }\n\n  _calculateNewZoom({scale, startZoom}) {\n    const {maxZoom, minZoom} = this.getViewportProps();\n    if (startZoom === undefined) {\n      startZoom = this.getViewportProps().zoom;\n    }\n    let deltaZoom = Math.log2(scale);\n    if (Array.isArray(startZoom)) {\n      let [newZoomX, newZoomY] = startZoom;\n      switch (this.zoomAxis) {\n        case 'X':\n          // Scale x only\n          newZoomX = clamp(newZoomX + deltaZoom, minZoom, maxZoom);\n          break;\n        case 'Y':\n          // Scale y only\n          newZoomY = clamp(newZoomY + deltaZoom, minZoom, maxZoom);\n          break;\n        default:\n          // Lock aspect ratio\n          let z = Math.min(newZoomX + deltaZoom, newZoomY + deltaZoom);\n          if (z < minZoom) {\n            deltaZoom += minZoom - z;\n          }\n          z = Math.max(newZoomX + deltaZoom, newZoomY + deltaZoom);\n          if (z > maxZoom) {\n            deltaZoom += maxZoom - z;\n          }\n          newZoomX += deltaZoom;\n          newZoomY += deltaZoom;\n      }\n      return [newZoomX, newZoomY];\n    }\n    // Ignore `zoomAxis`\n    // `LinearTransitionInterpolator` does not support interpolation between a number and an array\n    // So if zoom is a number (legacy use case), new zoom still has to be a number\n    return clamp(startZoom + deltaZoom, minZoom, maxZoom);\n  }\n}\n\nexport default class OrthographicController extends Controller<OrbitState> {\n  ControllerState = OrthographicState;\n  transition = {\n    transitionDuration: 300,\n    transitionInterpolator: new LinearInterpolator(['target', 'zoom'])\n  };\n  dragMode: 'pan' | 'rotate' = 'pan';\n\n  _onPanRotate() {\n    // No rotation in orthographic view\n    return false;\n  }\n}\n"],"file":"orthographic-controller.js"}