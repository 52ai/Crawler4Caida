{"version":3,"sources":["../../../src/controllers/map-controller.ts"],"names":["clamp","Controller","ViewState","normalizeViewportProps","assert","LinearInterpolator","PITCH_MOUSE_THRESHOLD","PITCH_ACCEL","MapState","constructor","options","width","height","latitude","longitude","zoom","bearing","pitch","altitude","position","maxZoom","minZoom","maxPitch","minPitch","startPanLngLat","startZoomLngLat","startRotatePos","startBearing","startPitch","startZoom","normalize","Number","isFinite","makeViewport","panStart","pos","_getUpdatedState","_unproject","pan","startPos","getState","viewport","getViewportProps","newProps","panByPosition","panEnd","rotateStart","rotate","deltaAngleX","deltaAngleY","undefined","newRotation","_getNewRotation","rotateEnd","zoomStart","scale","Math","log2","zoomedViewport","zoomEnd","zoomIn","speed","_zoomFromCenter","zoomOut","moveLeft","_panFromCenter","moveRight","moveUp","moveDown","rotateLeft","rotateRight","rotateUp","rotateDown","shortestPathFrom","viewState","fromProps","props","abs","applyConstraints","Object","assign","offset","unproject","deltaX","deltaY","centerY","startY","deltaScaleX","deltaScaleY","MapController","transitionDuration","transitionInterpolator","transitionProps","compare","required","setProps","oldProps","dimensionChanged","updateViewport","ControllerState","state"],"mappings":"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","sourcesContent":["import {clamp} from '@math.gl/core';\nimport Controller, {ControllerProps} from './controller';\nimport ViewState from './view-state';\nimport {normalizeViewportProps} from '@math.gl/web-mercator';\nimport assert from '../utils/assert';\n\nimport LinearInterpolator from '../transitions/linear-interpolator';\nimport type Viewport from '../viewports/viewport';\n\nconst PITCH_MOUSE_THRESHOLD = 5;\nconst PITCH_ACCEL = 1.2;\n\nexport type MapStateProps = {\n  /** Mapbox viewport properties */\n  /** The width of the viewport */\n  width: number;\n  /** The height of the viewport */\n  height: number;\n  /** The latitude at the center of the viewport */\n  latitude: number;\n  /** The longitude at the center of the viewport */\n  longitude: number;\n  /** The tile zoom level of the map. */\n  zoom: number;\n  /** The bearing of the viewport in degrees */\n  bearing?: number;\n  /** The pitch of the viewport in degrees */\n  pitch?: number;\n  /**\n   * Specify the altitude of the viewport camera\n   * Unit: map heights, default 1.5\n   * Non-public API, see https://github.com/mapbox/mapbox-gl-js/issues/1137\n   */\n  altitude?: number;\n  /** Viewport position */\n  position?: [number, number, number];\n\n  /** Viewport constraints */\n  maxZoom?: number;\n  minZoom?: number;\n  maxPitch?: number;\n  minPitch?: number;\n\n  /** Normalize viewport props to fit map height into viewport. Default `true` */\n  normalize?: boolean;\n};\n\ntype MapStateInternal = {\n  /** Interaction states, required to calculate change during transform */\n  /* The point on map being grabbed when the operation first started */\n  startPanLngLat?: [number, number];\n  /* Center of the zoom when the operation first started */\n  startZoomLngLat?: [number, number];\n  /* Pointer position when rotation started */\n  startRotatePos?: [number, number];\n  /** Bearing when current perspective rotate operation started */\n  startBearing?: number;\n  /** Pitch when current perspective rotate operation started */\n  startPitch?: number;\n  /** Zoom when current zoom operation started */\n  startZoom?: number;\n};\n\n/* Utils */\n\nexport class MapState extends ViewState<MapState, MapStateProps, MapStateInternal> {\n  makeViewport: (props: Record<string, any>) => Viewport;\n\n  constructor(\n    options: MapStateProps &\n      MapStateInternal & {\n        makeViewport: (props: Record<string, any>) => Viewport;\n      }\n  ) {\n    const {\n      /** Mapbox viewport properties */\n      /** The width of the viewport */\n      width,\n      /** The height of the viewport */\n      height,\n      /** The latitude at the center of the viewport */\n      latitude,\n      /** The longitude at the center of the viewport */\n      longitude,\n      /** The tile zoom level of the map. */\n      zoom,\n      /** The bearing of the viewport in degrees */\n      bearing = 0,\n      /** The pitch of the viewport in degrees */\n      pitch = 0,\n      /**\n       * Specify the altitude of the viewport camera\n       * Unit: map heights, default 1.5\n       * Non-public API, see https://github.com/mapbox/mapbox-gl-js/issues/1137\n       */\n      altitude = 1.5,\n      /** Viewport position */\n      position = [0, 0, 0],\n\n      /** Viewport constraints */\n      maxZoom = 20,\n      minZoom = 0,\n      maxPitch = 60,\n      minPitch = 0,\n\n      /** Interaction states, required to calculate change during transform */\n      /* The point on map being grabbed when the operation first started */\n      startPanLngLat,\n      /* Center of the zoom when the operation first started */\n      startZoomLngLat,\n      /* Pointer position when rotation started */\n      startRotatePos,\n      /** Bearing when current perspective rotate operation started */\n      startBearing,\n      /** Pitch when current perspective rotate operation started */\n      startPitch,\n      /** Zoom when current zoom operation started */\n      startZoom,\n\n      /** Normalize viewport props to fit map height into viewport */\n      normalize = true\n    } = options;\n\n    assert(Number.isFinite(longitude)); // `longitude` must be supplied\n    assert(Number.isFinite(latitude)); // `latitude` must be supplied\n    assert(Number.isFinite(zoom)); // `zoom` must be supplied\n\n    super(\n      {\n        width,\n        height,\n        latitude,\n        longitude,\n        zoom,\n        bearing,\n        pitch,\n        altitude,\n        maxZoom,\n        minZoom,\n        maxPitch,\n        minPitch,\n        normalize,\n        position\n      },\n      {\n        startPanLngLat,\n        startZoomLngLat,\n        startRotatePos,\n        startBearing,\n        startPitch,\n        startZoom\n      }\n    );\n\n    this.makeViewport = options.makeViewport;\n  }\n\n  /**\n   * Start panning\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  panStart({pos}: {pos: [number, number]}): MapState {\n    return this._getUpdatedState({\n      startPanLngLat: this._unproject(pos)\n    });\n  }\n\n  /**\n   * Pan\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   * @param {[Number, Number], optional} startPos - where the pointer grabbed at\n   *   the start of the operation. Must be supplied of `panStart()` was not called\n   */\n  pan({pos, startPos}: {pos: [number, number]; startPos?: [number, number]}): MapState {\n    const startPanLngLat = this.getState().startPanLngLat || this._unproject(startPos);\n\n    if (!startPanLngLat) {\n      return this;\n    }\n\n    const viewport = this.makeViewport(this.getViewportProps());\n    const newProps = viewport.panByPosition(startPanLngLat, pos);\n\n    return this._getUpdatedState(newProps);\n  }\n\n  /**\n   * End panning\n   * Must call if `panStart()` was called\n   */\n  panEnd(): MapState {\n    return this._getUpdatedState({\n      startPanLngLat: null\n    });\n  }\n\n  /**\n   * Start rotating\n   * @param {[Number, Number]} pos - position on screen where the center is\n   */\n  rotateStart({pos}: {pos: [number, number]}): MapState {\n    return this._getUpdatedState({\n      startRotatePos: pos,\n      startBearing: this.getViewportProps().bearing,\n      startPitch: this.getViewportProps().pitch\n    });\n  }\n\n  /**\n   * Rotate\n   * @param {[Number, Number]} pos - position on screen where the center is\n   */\n  rotate({\n    pos,\n    deltaAngleX = 0,\n    deltaAngleY = 0\n  }: {\n    pos?: [number, number];\n    deltaAngleX?: number;\n    deltaAngleY?: number;\n  }): MapState {\n    const {startRotatePos, startBearing, startPitch} = this.getState();\n\n    if (!startRotatePos || startBearing === undefined || startPitch === undefined) {\n      return this;\n    }\n    let newRotation;\n    if (pos) {\n      newRotation = this._getNewRotation(pos, startRotatePos, startPitch, startBearing);\n    } else {\n      newRotation = {\n        bearing: startBearing + deltaAngleX,\n        pitch: startPitch + deltaAngleY\n      };\n    }\n    return this._getUpdatedState(newRotation);\n  }\n\n  /**\n   * End rotating\n   * Must call if `rotateStart()` was called\n   */\n  rotateEnd(): MapState {\n    return this._getUpdatedState({\n      startBearing: null,\n      startPitch: null\n    });\n  }\n\n  /**\n   * Start zooming\n   * @param {[Number, Number]} pos - position on screen where the center is\n   */\n  zoomStart({pos}: {pos: [number, number]}): MapState {\n    return this._getUpdatedState({\n      startZoomLngLat: this._unproject(pos),\n      startZoom: this.getViewportProps().zoom\n    });\n  }\n\n  /**\n   * Zoom\n   * @param {[Number, Number]} pos - position on screen where the current center is\n   * @param {[Number, Number]} startPos - the center position at\n   *   the start of the operation. Must be supplied of `zoomStart()` was not called\n   * @param {Number} scale - a number between [0, 1] specifying the accumulated\n   *   relative scale.\n   */\n  zoom({\n    pos,\n    startPos,\n    scale\n  }: {\n    pos: [number, number];\n    startPos?: [number, number];\n    scale: number;\n  }): MapState {\n    // Make sure we zoom around the current mouse position rather than map center\n    let {startZoom, startZoomLngLat} = this.getState();\n\n    if (!startZoomLngLat) {\n      // We have two modes of zoom:\n      // scroll zoom that are discrete events (transform from the current zoom level),\n      // and pinch zoom that are continuous events (transform from the zoom level when\n      // pinch started).\n      // If startZoom state is defined, then use the startZoom state;\n      // otherwise assume discrete zooming\n      startZoom = this.getViewportProps().zoom;\n      startZoomLngLat = this._unproject(startPos) || this._unproject(pos);\n    }\n    if (!startZoomLngLat) {\n      return this;\n    }\n\n    const {maxZoom, minZoom} = this.getViewportProps();\n    let zoom = (startZoom as number) + Math.log2(scale);\n    zoom = clamp(zoom, minZoom, maxZoom);\n\n    const zoomedViewport = this.makeViewport({...this.getViewportProps(), zoom});\n\n    return this._getUpdatedState({\n      zoom,\n      ...zoomedViewport.panByPosition(startZoomLngLat, pos)\n    });\n  }\n\n  /**\n   * End zooming\n   * Must call if `zoomStart()` was called\n   */\n  zoomEnd(): MapState {\n    return this._getUpdatedState({\n      startZoomLngLat: null,\n      startZoom: null\n    });\n  }\n\n  zoomIn(speed: number = 2): MapState {\n    return this._zoomFromCenter(speed);\n  }\n\n  zoomOut(speed: number = 2): MapState {\n    return this._zoomFromCenter(1 / speed);\n  }\n\n  moveLeft(speed: number = 100): MapState {\n    return this._panFromCenter([speed, 0]);\n  }\n\n  moveRight(speed: number = 100): MapState {\n    return this._panFromCenter([-speed, 0]);\n  }\n\n  moveUp(speed: number = 100): MapState {\n    return this._panFromCenter([0, speed]);\n  }\n\n  moveDown(speed: number = 100): MapState {\n    return this._panFromCenter([0, -speed]);\n  }\n\n  rotateLeft(speed: number = 15): MapState {\n    return this._getUpdatedState({\n      bearing: this.getViewportProps().bearing - speed\n    });\n  }\n\n  rotateRight(speed: number = 15): MapState {\n    return this._getUpdatedState({\n      bearing: this.getViewportProps().bearing + speed\n    });\n  }\n\n  rotateUp(speed: number = 10): MapState {\n    return this._getUpdatedState({\n      pitch: this.getViewportProps().pitch + speed\n    });\n  }\n\n  rotateDown(speed: number = 10): MapState {\n    return this._getUpdatedState({\n      pitch: this.getViewportProps().pitch - speed\n    });\n  }\n\n  shortestPathFrom(viewState: MapState): MapStateProps {\n    // const endViewStateProps = new this.ControllerState(endProps).shortestPathFrom(startViewstate);\n    const fromProps = viewState.getViewportProps();\n    const props = {...this.getViewportProps()};\n    const {bearing, longitude} = props;\n\n    if (Math.abs(bearing - fromProps.bearing) > 180) {\n      props.bearing = bearing < 0 ? bearing + 360 : bearing - 360;\n    }\n    if (Math.abs(longitude - fromProps.longitude) > 180) {\n      props.longitude = longitude < 0 ? longitude + 360 : longitude - 360;\n    }\n    return props;\n  }\n\n  // Apply any constraints (mathematical or defined by _viewportProps) to map state\n  applyConstraints(props: Required<MapStateProps>): Required<MapStateProps> {\n    // Ensure zoom is within specified range\n    const {maxZoom, minZoom, zoom} = props;\n    props.zoom = clamp(zoom, minZoom, maxZoom);\n\n    // Ensure pitch is within specified range\n    const {maxPitch, minPitch, pitch} = props;\n    props.pitch = clamp(pitch, minPitch, maxPitch);\n\n    // Normalize viewport props to fit map height into viewport\n    const {normalize = true} = props;\n    if (normalize) {\n      Object.assign(props, normalizeViewportProps(props));\n    }\n\n    return props;\n  }\n\n  /* Private methods */\n\n  _zoomFromCenter(scale) {\n    const {width, height} = this.getViewportProps();\n    return this.zoom({\n      pos: [width / 2, height / 2],\n      scale\n    });\n  }\n\n  _panFromCenter(offset) {\n    const {width, height} = this.getViewportProps();\n    return this.pan({\n      startPos: [width / 2, height / 2],\n      pos: [width / 2 + offset[0], height / 2 + offset[1]]\n    });\n  }\n\n  _getUpdatedState(newProps): MapState {\n    // @ts-ignore\n    return new this.constructor({\n      makeViewport: this.makeViewport,\n      ...this.getViewportProps(),\n      ...this.getState(),\n      ...newProps\n    });\n  }\n\n  _unproject(pos?: [number, number]): [number, number] | undefined {\n    const viewport = this.makeViewport(this.getViewportProps());\n    // @ts-ignore\n    return pos && viewport.unproject(pos);\n  }\n\n  _getNewRotation(\n    pos: [number, number],\n    startPos: [number, number],\n    startPitch: number,\n    startBearing: number\n  ): {\n    pitch: number;\n    bearing: number;\n  } {\n    const deltaX = pos[0] - startPos[0];\n    const deltaY = pos[1] - startPos[1];\n    const centerY = pos[1];\n    const startY = startPos[1];\n    const {width, height} = this.getViewportProps();\n\n    const deltaScaleX = deltaX / width;\n    let deltaScaleY = 0;\n\n    if (deltaY > 0) {\n      if (Math.abs(height - startY) > PITCH_MOUSE_THRESHOLD) {\n        // Move from 0 to -1 as we drag upwards\n        deltaScaleY = (deltaY / (startY - height)) * PITCH_ACCEL;\n      }\n    } else if (deltaY < 0) {\n      if (startY > PITCH_MOUSE_THRESHOLD) {\n        // Move from 0 to 1 as we drag upwards\n        deltaScaleY = 1 - centerY / startY;\n      }\n    }\n    // clamp deltaScaleY to [-1, 1] so that rotation is constrained between minPitch and maxPitch.\n    // deltaScaleX does not need to be clamped as bearing does not have constraints.\n    deltaScaleY = clamp(deltaScaleY, -1, 1);\n\n    const {minPitch, maxPitch} = this.getViewportProps();\n\n    const bearing = startBearing + 180 * deltaScaleX;\n    let pitch = startPitch;\n    if (deltaScaleY > 0) {\n      // Gradually increase pitch\n      pitch = startPitch + deltaScaleY * (maxPitch - startPitch);\n    } else if (deltaScaleY < 0) {\n      // Gradually decrease pitch\n      pitch = startPitch - deltaScaleY * (minPitch - startPitch);\n    }\n\n    return {\n      pitch,\n      bearing\n    };\n  }\n}\n\nexport default class MapController extends Controller<MapState> {\n  ControllerState = MapState;\n\n  transition = {\n    transitionDuration: 300,\n    transitionInterpolator: new LinearInterpolator({\n      transitionProps: {\n        compare: ['longitude', 'latitude', 'zoom', 'bearing', 'pitch', 'position'],\n        required: ['longitude', 'latitude', 'zoom']\n      }\n    })\n  };\n\n  dragMode: 'pan' | 'rotate' = 'pan';\n\n  setProps(props: ControllerProps & MapStateProps) {\n    props.position = props.position || [0, 0, 0];\n    const oldProps = this.props;\n\n    super.setProps(props);\n\n    const dimensionChanged = !oldProps || oldProps.height !== props.height;\n    if (dimensionChanged) {\n      // Dimensions changed, normalize the props\n      this.updateViewport(\n        new this.ControllerState({\n          makeViewport: this.makeViewport,\n          ...props,\n          ...this.state\n        })\n      );\n    }\n  }\n}\n"],"file":"map-controller.js"}