{"version":3,"sources":["../../../src/transitions/transition.ts"],"names":["Transition","constructor","timeline","_inProgress","_handle","_timeline","time","settings","duration","inProgress","start","cancel","onStart","end","removeChannel","onEnd","onInterrupt","update","addChannel","delay","getTime","_onUpdate","onUpdate","isFinished"],"mappings":";AAUA,eAAe,MAAMA,UAAN,CAAiB;AAW9BC,EAAAA,WAAW,CAACC,QAAD,EAAqB;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAC9B,SAAKC,WAAL,GAAmB,KAAnB;AACA,SAAKC,OAAL,GAAe,IAAf;AACA,SAAKC,SAAL,GAAiBH,QAAjB;AACA,SAAKI,IAAL,GAAY,CAAZ;AAGA,SAAKC,QAAL,GAAgB;AAACC,MAAAA,QAAQ,EAAE;AAAX,KAAhB;AACD;;AAGa,MAAVC,UAAU,GAAY;AACxB,WAAO,KAAKN,WAAZ;AACD;;AAMDO,EAAAA,KAAK,CAACH,QAAD,EAA+B;AAAA;;AAClC,SAAKI,MAAL;AACA,SAAKJ,QAAL,GAAgBA,QAAhB;AACA,SAAKJ,WAAL,GAAmB,IAAnB;AACA,oDAAKI,QAAL,EAAcK,OAAd,qGAAwB,IAAxB;AACD;;AAKDC,EAAAA,GAAG,GAAG;AACJ,QAAI,KAAKV,WAAT,EAAsB;AAAA;;AACpB,WAAKE,SAAL,CAAeS,aAAf,CAA6B,KAAKV,OAAlC;;AACA,WAAKA,OAAL,GAAe,IAAf;AACA,WAAKD,WAAL,GAAmB,KAAnB;AACA,sDAAKI,QAAL,EAAcQ,KAAd,oGAAsB,IAAtB;AACD;AACF;;AAKDJ,EAAAA,MAAM,GAAG;AACP,QAAI,KAAKR,WAAT,EAAsB;AAAA;;AACpB,uDAAKI,QAAL,EAAcS,WAAd,sGAA4B,IAA5B;;AACA,WAAKX,SAAL,CAAeS,aAAf,CAA6B,KAAKV,OAAlC;;AACA,WAAKA,OAAL,GAAe,IAAf;AACA,WAAKD,WAAL,GAAmB,KAAnB;AACD;AACF;;AAKDc,EAAAA,MAAM,GAAG;AAAA;;AACP,QAAI,CAAC,KAAKd,WAAV,EAAuB;AACrB,aAAO,KAAP;AACD;;AAMD,QAAI,KAAKC,OAAL,KAAiB,IAArB,EAA2B;AACzB,YAAM;AAACC,QAAAA,SAAS,EAAEH,QAAZ;AAAsBK,QAAAA;AAAtB,UAAkC,IAAxC;AACA,WAAKH,OAAL,GAAeF,QAAQ,CAACgB,UAAT,CAAoB;AACjCC,QAAAA,KAAK,EAAEjB,QAAQ,CAACkB,OAAT,EAD0B;AAEjCZ,QAAAA,QAAQ,EAAED,QAAQ,CAACC;AAFc,OAApB,CAAf;AAID;;AAED,SAAKF,IAAL,GAAY,KAAKD,SAAL,CAAee,OAAf,CAAuB,KAAKhB,OAA5B,CAAZ;;AAEA,SAAKiB,SAAL;;AAEA,qDAAKd,QAAL,EAAce,QAAd,sGAAyB,IAAzB;;AAIA,QAAI,KAAKjB,SAAL,CAAekB,UAAf,CAA0B,KAAKnB,OAA/B,CAAJ,EAA6C;AAC3C,WAAKS,GAAL;AACD;;AACD,WAAO,IAAP;AACD;;AAISQ,EAAAA,SAAS,GAAG,CAErB;;AAnG6B","sourcesContent":["import type {Timeline} from '@luma.gl/core';\n\nexport type TransitionSettings = {\n  duration: number;\n  onStart?: (transition: Transition) => void;\n  onUpdate?: (transition: Transition) => void;\n  onInterrupt?: (transition: Transition) => void;\n  onEnd?: (transition: Transition) => void;\n};\n\nexport default class Transition {\n  private _inProgress: boolean;\n  private _handle: number | null;\n  private _timeline: Timeline;\n\n  time: number;\n  settings: TransitionSettings;\n\n  /**\n   * @params timeline {Timeline}\n   */\n  constructor(timeline: Timeline) {\n    this._inProgress = false;\n    this._handle = null;\n    this._timeline = timeline;\n    this.time = 0;\n\n    // Defaults\n    this.settings = {duration: 0};\n  }\n\n  /* Public API */\n  get inProgress(): boolean {\n    return this._inProgress;\n  }\n\n  /**\n   * (re)start this transition.\n   * @params props {object} - optional overriding props. see constructor\n   */\n  start(settings: TransitionSettings) {\n    this.cancel();\n    this.settings = settings;\n    this._inProgress = true;\n    this.settings.onStart?.(this);\n  }\n\n  /**\n   * end this transition if it is in progress.\n   */\n  end() {\n    if (this._inProgress) {\n      this._timeline.removeChannel(this._handle);\n      this._handle = null;\n      this._inProgress = false;\n      this.settings.onEnd?.(this);\n    }\n  }\n\n  /**\n   * cancel this transition if it is in progress.\n   */\n  cancel() {\n    if (this._inProgress) {\n      this.settings.onInterrupt?.(this);\n      this._timeline.removeChannel(this._handle);\n      this._handle = null;\n      this._inProgress = false;\n    }\n  }\n\n  /**\n   * update this transition. Returns `true` if updated.\n   */\n  update() {\n    if (!this._inProgress) {\n      return false;\n    }\n\n    // It is important to initialize the handle during `update` instead of `start`.\n    // The CPU time that the `start` frame takes should not be counted towards the duration.\n    // On the other hand, `update` always happens during a render cycle. The clock starts when the\n    // transition is rendered for the first time.\n    if (this._handle === null) {\n      const {_timeline: timeline, settings} = this;\n      this._handle = timeline.addChannel({\n        delay: timeline.getTime(),\n        duration: settings.duration\n      });\n    }\n\n    this.time = this._timeline.getTime(this._handle);\n    // Call subclass method\n    this._onUpdate();\n    // Call user callback\n    this.settings.onUpdate?.(this);\n\n    // This only works if `settings.duration` is set\n    // Spring transition must call `end` manually\n    if (this._timeline.isFinished(this._handle)) {\n      this.end();\n    }\n    return true;\n  }\n\n  /* Private API */\n\n  protected _onUpdate() {\n    // for subclass override\n  }\n}\n"],"file":"transition.js"}