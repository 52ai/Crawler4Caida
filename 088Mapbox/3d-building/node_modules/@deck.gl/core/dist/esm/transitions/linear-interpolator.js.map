{"version":3,"sources":["../../../src/transitions/linear-interpolator.ts"],"names":["TransitionInterpolator","lerp","DEFAULT_PROPS","DEFAULT_REQUIRED_PROPS","LinearInterpolator","constructor","opts","transitionProps","Array","isArray","normalizedOpts","compare","required","initializeProps","startProps","endProps","result","makeViewport","around","startViewport","endViewport","aroundPosition","unproject","start","Object","assign","end","project","width","height","interpolateProps","t","propsInTransition","key","_propsToExtract","viewport","panByPosition"],"mappings":"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","sourcesContent":["import TransitionInterpolator from './transition-interpolator';\nimport {lerp} from '@math.gl/core';\n\nimport type Viewport from '../viewports/viewport';\n\nconst DEFAULT_PROPS = ['longitude', 'latitude', 'zoom', 'bearing', 'pitch'];\nconst DEFAULT_REQUIRED_PROPS = ['longitude', 'latitude', 'zoom'];\n\ntype PropsWithAnchor = {\n  around?: number[];\n  aroundPosition?: number[];\n  [key: string]: any;\n};\n\n/**\n * Performs linear interpolation of two view states.\n */\nexport default class LinearInterpolator extends TransitionInterpolator {\n  opts: {\n    around?: number[];\n    makeViewport?: (props: Record<string, any>) => Viewport;\n  };\n\n  /**\n   * @param {Object} opts\n   * @param {Array} opts.transitionProps - list of props to apply linear transition to.\n   * @param {Array} opts.around - a screen point to zoom/rotate around.\n   * @param {Function} opts.makeViewport - construct a viewport instance with given props.\n   */\n  constructor(\n    opts:\n      | string[]\n      | {\n          transitionProps?:\n            | string[]\n            | {\n                compare: string[];\n                extract?: string[];\n                required?: string[];\n              };\n          around?: number[];\n          makeViewport?: (props: Record<string, any>) => Viewport;\n        } = {}\n  ) {\n    // Backward compatibility\n    const transitionProps = Array.isArray(opts) ? opts : opts.transitionProps;\n\n    const normalizedOpts = Array.isArray(opts) ? {} : opts;\n    normalizedOpts.transitionProps = Array.isArray(transitionProps)\n      ? {\n          compare: transitionProps,\n          required: transitionProps\n        }\n      : transitionProps || {\n          compare: DEFAULT_PROPS,\n          required: DEFAULT_REQUIRED_PROPS\n        };\n\n    super(normalizedOpts.transitionProps);\n    this.opts = normalizedOpts;\n  }\n\n  initializeProps(\n    startProps: Record<string, any>,\n    endProps: Record<string, any>\n  ): {\n    start: PropsWithAnchor;\n    end: PropsWithAnchor;\n  } {\n    const result = super.initializeProps(startProps, endProps);\n\n    const {makeViewport, around} = this.opts;\n    if (makeViewport && around) {\n      const startViewport = makeViewport(startProps);\n      const endViewport = makeViewport(endProps);\n      const aroundPosition = startViewport.unproject(around);\n      result.start.around = around;\n      Object.assign(result.end, {\n        around: endViewport.project(aroundPosition),\n        aroundPosition,\n        width: endProps.width,\n        height: endProps.height\n      });\n    }\n\n    return result;\n  }\n\n  interpolateProps(\n    startProps: PropsWithAnchor,\n    endProps: PropsWithAnchor,\n    t: number\n  ): Record<string, any> {\n    const propsInTransition = {};\n    for (const key of this._propsToExtract) {\n      propsInTransition[key] = lerp(startProps[key] || 0, endProps[key] || 0, t);\n    }\n\n    if (endProps.aroundPosition && this.opts.makeViewport) {\n      // Linear transition should be performed in common space\n      const viewport = this.opts.makeViewport({...endProps, ...propsInTransition});\n      Object.assign(\n        propsInTransition,\n        viewport.panByPosition(\n          endProps.aroundPosition,\n          // anchor point in current screen coordinates\n          lerp(startProps.around as number[], endProps.around as number[], t) as number[]\n        )\n      );\n    }\n    return propsInTransition;\n  }\n}\n"],"file":"linear-interpolator.js"}