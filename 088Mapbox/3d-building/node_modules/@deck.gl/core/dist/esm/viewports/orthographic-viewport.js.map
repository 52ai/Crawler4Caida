{"version":3,"sources":["../../../src/viewports/orthographic-viewport.ts"],"names":["Viewport","Matrix4","clamp","pixelsToWorld","vec2","viewMatrix","lookAt","eye","getProjectionMatrix","width","height","near","far","padding","left","right","bottom","top","l","r","t","b","offsetX","offsetY","ortho","OrthographicViewport","constructor","props","zoom","target","flipY","zoomX","Array","isArray","zoomY","zoom_","Math","min","scale","pow","distanceScales","scaleX","scaleY","unitsPerMeter","metersPerUnit","longitude","undefined","position","clone","projectionMatrix","projectFlat","X","Y","unprojectFlat","x","y","panByPosition","coords","pixel","fromLocation","pixelUnprojectionMatrix","toLocation","translate","add","negate","newCenter","center"],"mappings":"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","sourcesContent":["import Viewport from '../viewports/viewport';\n\nimport {Matrix4, clamp} from '@math.gl/core';\nimport {pixelsToWorld} from '@math.gl/web-mercator';\nimport * as vec2 from 'gl-matrix/vec2';\n\nimport type {Padding} from './viewport';\n\nconst viewMatrix = new Matrix4().lookAt({eye: [0, 0, 1]});\n\nfunction getProjectionMatrix({\n  width,\n  height,\n  near,\n  far,\n  padding\n}: {\n  width: number;\n  height: number;\n  near: number;\n  far: number;\n  padding: Padding | null;\n}) {\n  let left = -width / 2;\n  let right = width / 2;\n  let bottom = -height / 2;\n  let top = height / 2;\n  if (padding) {\n    const {left: l = 0, right: r = 0, top: t = 0, bottom: b = 0} = padding;\n    const offsetX = clamp((l + width - r) / 2, 0, width) - width / 2;\n    const offsetY = clamp((t + height - b) / 2, 0, height) - height / 2;\n    left -= offsetX;\n    right -= offsetX;\n    bottom += offsetY;\n    top += offsetY;\n  }\n\n  return new Matrix4().ortho({\n    left,\n    right,\n    bottom,\n    top,\n    near,\n    far\n  });\n}\n\nexport type OrthographicViewportOptions = {\n  /** Name of the viewport */\n  id?: string;\n  /** Left offset from the canvas edge, in pixels */\n  x?: number;\n  /** Top offset from the canvas edge, in pixels */\n  y?: number;\n  /** Viewport width in pixels */\n  width?: number;\n  /** Viewport height in pixels */\n  height?: number;\n  /** The world position at the center of the viewport. Default `[0, 0, 0]`. */\n  target?: [number, number, number] | [number, number];\n  /**  The zoom level of the viewport. `zoom: 0` maps one unit distance to one pixel on screen, and increasing `zoom` by `1` scales the same object to twice as large.\n   *   To apply independent zoom levels to the X and Y axes, supply an array `[zoomX, zoomY]`. Default `0`. */\n  zoom?: number | [number, number];\n  /** Padding around the viewport, in pixels. */\n  padding?: Padding | null;\n  /** Distance of near clipping plane. Default `0.1`. */\n  near?: number;\n  /** Distance of far clipping plane. Default `1000`. */\n  far?: number;\n  /** Whether to use top-left coordinates (`true`) or bottom-left coordinates (`false`). Default `true`. */\n  flipY?: boolean;\n};\n\nexport default class OrthographicViewport extends Viewport {\n  constructor(props: OrthographicViewportOptions) {\n    const {\n      width,\n      height,\n      near = 0.1,\n      far = 1000,\n      zoom = 0,\n      target = [0, 0, 0],\n      padding = null,\n      flipY = true\n    } = props;\n    const zoomX = Array.isArray(zoom) ? zoom[0] : zoom;\n    const zoomY = Array.isArray(zoom) ? zoom[1] : zoom;\n    const zoom_ = Math.min(zoomX, zoomY);\n    const scale = Math.pow(2, zoom_);\n\n    let distanceScales;\n    if (zoomX !== zoomY) {\n      const scaleX = Math.pow(2, zoomX);\n      const scaleY = Math.pow(2, zoomY);\n\n      distanceScales = {\n        unitsPerMeter: [scaleX / scale, scaleY / scale, 1],\n        metersPerUnit: [scale / scaleX, scale / scaleY, 1]\n      };\n    }\n\n    super({\n      ...props,\n      // in case viewState contains longitude/latitude values,\n      // make sure that the base Viewport class does not treat this as a geospatial viewport\n      longitude: undefined,\n      position: target,\n      viewMatrix: viewMatrix.clone().scale([scale, scale * (flipY ? -1 : 1), scale]),\n      projectionMatrix: getProjectionMatrix({\n        width: width || 1,\n        height: height || 1,\n        padding,\n        near,\n        far\n      }),\n      zoom: zoom_,\n      distanceScales\n    });\n  }\n\n  projectFlat([X, Y]: number[]): [number, number] {\n    const {unitsPerMeter} = this.distanceScales;\n    return [X * unitsPerMeter[0], Y * unitsPerMeter[1]];\n  }\n\n  unprojectFlat([x, y]: number[]): [number, number] {\n    const {metersPerUnit} = this.distanceScales;\n    return [x * metersPerUnit[0], y * metersPerUnit[1]];\n  }\n\n  /* Needed by LinearInterpolator */\n  panByPosition(coords: number[], pixel: number[]): OrthographicViewportOptions {\n    const fromLocation = pixelsToWorld(pixel, this.pixelUnprojectionMatrix);\n    const toLocation = this.projectFlat(coords);\n\n    const translate = vec2.add([], toLocation, vec2.negate([], fromLocation));\n    const newCenter = vec2.add([], this.center, translate);\n\n    return {target: this.unprojectFlat(newCenter)};\n  }\n}\n"],"file":"orthographic-viewport.js"}