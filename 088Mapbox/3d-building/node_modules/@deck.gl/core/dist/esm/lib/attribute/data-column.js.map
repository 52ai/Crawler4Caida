{"version":3,"sources":["../../../../src/lib/attribute/data-column.ts"],"names":["hasFeature","FEATURES","Buffer","ShaderAttribute","glArrayFromType","typedArrayManager","toDoublePrecisionArray","log","getStride","accessor","stride","size","bytesPerElement","resolveShaderAttribute","baseAccessor","shaderAttributeOptions","offset","removed","vertexOffset","undefined","elementOffset","resolveDoublePrecisionShaderAttributes","resolvedOptions","high","low","DataColumn","constructor","gl","opts","state","id","logicalType","type","doublePrecision","defaultValue","Number","isFinite","Array","fill","bufferType","isIndexed","ELEMENT_INDEX_UINT32","defaultType","fp64","Float32Array","value","settings","BYTES_PER_ELEMENT","externalBuffer","bufferAccessor","allocatedValue","numInstances","bounds","constant","_buffer","isConstant","buffer","target","byteOffset","getAccessor","n","delete","release","getShaderAttributes","options","shaderAttributes","isBuffer64Bit","Float64Array","doubleShaderAttributeDefs","shaderAttributeDef","getBuffer","getValue","getBounds","result","min","from","len","length","Infinity","max","i","j","v","setData","data","ArrayBuffer","isView","_normalizeValue","normalized","normalizeConstant","hasChanged","_areValuesEqual","_checkExternalBuffer","requiredBufferSize","byteLength","reallocate","setAccessor","subData","updateSubBuffer","startOffset","endOffset","startIndex","endIndex","subarray","allocate","copy","oldValue","Error","ArrayType","illegalArrayType","name","warn","map","x","out","start","value1","value2"],"mappings":";AAEA,SAAQA,UAAR,EAAoBC,QAApB,EAA8BC,MAA9B,QAA2C,eAA3C;AACA,OAAOC,eAAP,MAAgD,oBAAhD;AACA,SAAQC,eAAR,QAA8B,YAA9B;AACA,OAAOC,iBAAP,MAA8B,iCAA9B;AACA,SAAQC,sBAAR,QAAqC,wBAArC;AACA,OAAOC,GAAP,MAAgB,iBAAhB;;AA4BA,SAASC,SAAT,CAAmBC,QAAnB,EAA8D;AAC5D,SAAOA,QAAQ,CAACC,MAAT,IAAmBD,QAAQ,CAACE,IAAT,GAAgBF,QAAQ,CAACG,eAAnD;AACD;;AAED,SAASC,sBAAT,CACEC,YADF,EAEEC,sBAFF,EAG0B;AACxB,MAAIA,sBAAsB,CAACC,MAA3B,EAAmC;AACjCT,IAAAA,GAAG,CAACU,OAAJ,CAAY,wBAAZ,EAAsC,6BAAtC;AACD;;AAGD,QAAMP,MAAM,GAAGF,SAAS,CAACM,YAAD,CAAxB;AAGA,QAAMI,YAAY,GAChBH,sBAAsB,CAACG,YAAvB,KAAwCC,SAAxC,GACIJ,sBAAsB,CAACG,YAD3B,GAEIJ,YAAY,CAACI,YAAb,IAA6B,CAHnC;AAMA,QAAME,aAAa,GAAGL,sBAAsB,CAACK,aAAvB,IAAwC,CAA9D;AACA,QAAMJ,MAAM,GAEVE,YAAY,GAAGR,MAAf,GACAU,aAAa,GAAGN,YAAY,CAACF,eAD7B,IAGCE,YAAY,CAACE,MAAb,IAAuB,CAHxB,CAFF;AAOA,SAAO,EACL,GAAGD,sBADE;AAELC,IAAAA,MAFK;AAGLN,IAAAA;AAHK,GAAP;AAKD;;AAED,SAASW,sCAAT,CACEP,YADF,EAEEC,sBAFF,EAME;AACA,QAAMO,eAAe,GAAGT,sBAAsB,CAACC,YAAD,EAAeC,sBAAf,CAA9C;AAEA,SAAO;AACLQ,IAAAA,IAAI,EAAED,eADD;AAELE,IAAAA,GAAG,EAAE,EACH,GAAGF,eADA;AAEHN,MAAAA,MAAM,EAAEM,eAAe,CAACN,MAAhB,GAAyBF,YAAY,CAACH,IAAb,GAAoB;AAFlD;AAFA,GAAP;AAOD;;AA8BD,eAAe,MAAMc,UAAN,CAA6D;AAY1EC,EAAAA,WAAW,CAACC,EAAD,EAA4BC,IAA5B,EAA8DC,KAA9D,EAA4E;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AACrF,SAAKF,EAAL,GAAUA,EAAV;AACA,SAAKG,EAAL,GAAUF,IAAI,CAACE,EAAL,IAAW,EAArB;AACA,SAAKnB,IAAL,GAAYiB,IAAI,CAACjB,IAAL,IAAa,CAAzB;AAEA,UAAMoB,WAAW,GAAGH,IAAI,CAACG,WAAL,IAAoBH,IAAI,CAACI,IAA7C;AACA,UAAMC,eAAe,GAAGF,WAAW,SAAnC;AAEA,QAAI;AAACG,MAAAA;AAAD,QAAiBN,IAArB;AACAM,IAAAA,YAAY,GAAGC,MAAM,CAACC,QAAP,CAAgBF,YAAhB,IACX,CAACA,YAAD,CADW,GAEXA,YAAY,IAAI,IAAIG,KAAJ,CAAU,KAAK1B,IAAf,EAAqB2B,IAArB,CAA0B,CAA1B,CAFpB;AAIA,QAAIC,UAAJ;;AACA,QAAIN,eAAJ,EAAqB;AACnBM,MAAAA,UAAU,OAAV;AACD,KAFD,MAEO,IAAI,CAACR,WAAD,IAAgBH,IAAI,CAACY,SAAzB,EAAoC;AACzCD,MAAAA,UAAU,GACRZ,EAAE,IAAI3B,UAAU,CAAC2B,EAAD,EAAK1B,QAAQ,CAACwC,oBAAd,CAAhB,cADF;AAED,KAHM,MAGA;AACLF,MAAAA,UAAU,GAAGR,WAAW,QAAxB;AACD;;AAKD,QAAIW,WAAW,GAAGtC,eAAe,CAAC2B,WAAW,IAAIQ,UAAf,QAAD,CAAjC;AACA,SAAKN,eAAL,GAAuBA,eAAvB;;AAMA,QAAIA,eAAe,IAAIL,IAAI,CAACe,IAAL,KAAc,KAArC,EAA4C;AAC1CD,MAAAA,WAAW,GAAGE,YAAd;AACD;;AAED,SAAKC,KAAL,GAAa,IAAb;AACA,SAAKC,QAAL,GAAgB,EACd,GAAGlB,IADW;AAEdc,MAAAA,WAFc;AAGdR,MAAAA,YAAY,EAAEA,YAHA;AAIdH,MAAAA,WAJc;AAKdC,MAAAA,IAAI,EAAEO,UALQ;AAMd5B,MAAAA,IAAI,EAAE,KAAKA,IANG;AAOdC,MAAAA,eAAe,EAAE8B,WAAW,CAACK;AAPf,KAAhB;AASA,SAAKlB,KAAL,GAAa,EACX,GAAGA,KADQ;AAEXmB,MAAAA,cAAc,EAAE,IAFL;AAGXC,MAAAA,cAAc,EAAE,KAAKH,QAHV;AAIXI,MAAAA,cAAc,EAAE,IAJL;AAKXC,MAAAA,YAAY,EAAE,CALH;AAMXC,MAAAA,MAAM,EAAE,IANG;AAOXC,MAAAA,QAAQ,EAAE;AAPC,KAAb;AASA,SAAKC,OAAL,GAAe,IAAf;AACD;;AAGa,MAAVC,UAAU,GAAY;AACxB,WAAO,KAAK1B,KAAL,CAAWwB,QAAlB;AACD;;AAES,MAANG,MAAM,GAAe;AACvB,QAAI,CAAC,KAAKF,OAAV,EAAmB;AACjB,YAAM;AAACd,QAAAA,SAAD;AAAYR,QAAAA;AAAZ,UAAoB,KAAKc,QAA/B;AACA,WAAKQ,OAAL,GAAe,IAAIpD,MAAJ,CAAW,KAAKyB,EAAhB,EAAoB;AACjCG,QAAAA,EAAE,EAAE,KAAKA,EADwB;AAEjC2B,QAAAA,MAAM,EAAEjB,SAAS,gBAFgB;AAGjC/B,QAAAA,QAAQ,EAAE;AAACuB,UAAAA;AAAD;AAHuB,OAApB,CAAf;AAKD;;AACD,WAAO,KAAKsB,OAAZ;AACD;;AAEa,MAAVI,UAAU,GAAW;AACvB,UAAMjD,QAAQ,GAAG,KAAKkD,WAAL,EAAjB;;AACA,QAAIlD,QAAQ,CAACS,YAAb,EAA2B;AACzB,aAAOT,QAAQ,CAACS,YAAT,GAAwBV,SAAS,CAACC,QAAD,CAAxC;AACD;;AACD,WAAO,CAAP;AACD;;AAEe,MAAZ0C,YAAY,GAAW;AACzB,WAAO,KAAKtB,KAAL,CAAWsB,YAAlB;AACD;;AAEe,MAAZA,YAAY,CAACS,CAAD,EAAY;AAC1B,SAAK/B,KAAL,CAAWsB,YAAX,GAA0BS,CAA1B;AACD;;AAEDC,EAAAA,MAAM,GAAS;AACb,QAAI,KAAKP,OAAT,EAAkB;AAChB,WAAKA,OAAL,CAAaO,MAAb;;AACA,WAAKP,OAAL,GAAe,IAAf;AACD;;AACDjD,IAAAA,iBAAiB,CAACyD,OAAlB,CAA0B,KAAKjC,KAAL,CAAWqB,cAArC;AACD;;AAEDa,EAAAA,mBAAmB,CACjBjC,EADiB,EAEjBkC,OAFiB,EAGiB;AAClC,QAAI,KAAK/B,eAAT,EAA0B;AACxB,YAAMgC,gBAAgB,GAAG,EAAzB;AACA,YAAMC,aAAa,GAAG,KAAKrB,KAAL,YAAsBsB,YAA5C;AAEA,YAAMC,yBAAyB,GAAG/C,sCAAsC,CACtE,KAAKsC,WAAL,EADsE,EAEtEK,OAAO,IAAI,EAF2D,CAAxE;AAKAC,MAAAA,gBAAgB,CAACnC,EAAD,CAAhB,GAAuB,IAAI3B,eAAJ,CAAoB,IAApB,EAA0BiE,yBAAyB,CAAC7C,IAApD,CAAvB;AACA0C,MAAAA,gBAAgB,WAAInC,EAAJ,WAAhB,GAAiCoC,aAAa,GAC1C,IAAI/D,eAAJ,CAAoB,IAApB,EAA0BiE,yBAAyB,CAAC5C,GAApD,CAD0C,GAE1C,IAAIoB,YAAJ,CAAiB,KAAKjC,IAAtB,CAFJ;AAGA,aAAOsD,gBAAP;AACD;;AACD,QAAID,OAAJ,EAAa;AACX,YAAMK,kBAAkB,GAAGxD,sBAAsB,CAAC,KAAK8C,WAAL,EAAD,EAAqBK,OAArB,CAAjD;AACA,aAAO;AAAC,SAAClC,EAAD,GAAM,IAAI3B,eAAJ,CAAoB,IAApB,EAA0BkE,kBAA1B;AAAP,OAAP;AACD;;AACD,WAAO;AAAC,OAACvC,EAAD,GAAM;AAAP,KAAP;AACD;;AAEDwC,EAAAA,SAAS,GAAsB;AAC7B,QAAI,KAAKzC,KAAL,CAAWwB,QAAf,EAAyB;AACvB,aAAO,IAAP;AACD;;AACD,WAAO,KAAKxB,KAAL,CAAWmB,cAAX,IAA6B,KAAKM,OAAzC;AACD;;AAEDiB,EAAAA,QAAQ,GAAuD;AAC7D,QAAI,KAAK1C,KAAL,CAAWwB,QAAf,EAAyB;AACvB,aAAO,KAAKR,KAAZ;AACD;;AACD,WAAO,CAAC,KAAKyB,SAAL,EAAD,EAAiC,KAAKX,WAAL,EAAjC,CAAP;AACD;;AAEDA,EAAAA,WAAW,GAAgC;AACzC,WAAO,KAAK9B,KAAL,CAAWoB,cAAlB;AACD;;AAIDuB,EAAAA,SAAS,GAAgC;AACvC,QAAI,KAAK3C,KAAL,CAAWuB,MAAf,EAAuB;AACrB,aAAO,KAAKvB,KAAL,CAAWuB,MAAlB;AACD;;AACD,QAAIqB,MAAmC,GAAG,IAA1C;;AACA,QAAI,KAAK5C,KAAL,CAAWwB,QAAX,IAAuB,KAAKR,KAAhC,EAAuC;AACrC,YAAM6B,GAAG,GAAGrC,KAAK,CAACsC,IAAN,CAAW,KAAK9B,KAAhB,CAAZ;AACA4B,MAAAA,MAAM,GAAG,CAACC,GAAD,EAAMA,GAAN,CAAT;AACD,KAHD,MAGO;AACL,YAAM;AAAC7B,QAAAA,KAAD;AAAQM,QAAAA,YAAR;AAAsBxC,QAAAA;AAAtB,UAA8B,IAApC;AACA,YAAMiE,GAAG,GAAGzB,YAAY,GAAGxC,IAA3B;;AACA,UAAIkC,KAAK,IAAI+B,GAAT,IAAgB/B,KAAK,CAACgC,MAAN,IAAgBD,GAApC,EAAyC;AACvC,cAAMF,GAAG,GAAG,IAAIrC,KAAJ,CAAU1B,IAAV,EAAgB2B,IAAhB,CAAqBwC,QAArB,CAAZ;AACA,cAAMC,GAAG,GAAG,IAAI1C,KAAJ,CAAU1B,IAAV,EAAgB2B,IAAhB,CAAqB,CAACwC,QAAtB,CAAZ;;AACA,aAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,GAApB,GAA2B;AACzB,eAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGtE,IAApB,EAA0BsE,CAAC,EAA3B,EAA+B;AAC7B,kBAAMC,CAAC,GAAGrC,KAAK,CAACmC,CAAC,EAAF,CAAf;AACA,gBAAIE,CAAC,GAAGR,GAAG,CAACO,CAAD,CAAX,EAAgBP,GAAG,CAACO,CAAD,CAAH,GAASC,CAAT;AAChB,gBAAIA,CAAC,GAAGH,GAAG,CAACE,CAAD,CAAX,EAAgBF,GAAG,CAACE,CAAD,CAAH,GAASC,CAAT;AACjB;AACF;;AACDT,QAAAA,MAAM,GAAG,CAACC,GAAD,EAAMK,GAAN,CAAT;AACD;AACF;;AACD,SAAKlD,KAAL,CAAWuB,MAAX,GAAoBqB,MAApB;AACA,WAAOA,MAAP;AACD;;AAIDU,EAAAA,OAAO,CACLC,IADK,EASI;AACT,UAAM;AAACvD,MAAAA;AAAD,QAAU,IAAhB;AAEA,QAAID,IAAJ;;AAKA,QAAIyD,WAAW,CAACC,MAAZ,CAAmBF,IAAnB,CAAJ,EAA8B;AAC5BxD,MAAAA,IAAI,GAAG;AAACiB,QAAAA,KAAK,EAAEuC;AAAR,OAAP;AACD,KAFD,MAEO,IAAIA,IAAI,YAAYlF,MAApB,EAA4B;AACjC0B,MAAAA,IAAI,GAAG;AAAC4B,QAAAA,MAAM,EAAE4B;AAAT,OAAP;AACD,KAFM,MAEA;AACLxD,MAAAA,IAAI,GAAGwD,IAAP;AACD;;AAED,UAAM3E,QAAqC,GAAG,EAAC,GAAG,KAAKqC,QAAT;AAAmB,SAAGlB;AAAtB,KAA9C;AACAC,IAAAA,KAAK,CAACoB,cAAN,GAAuBxC,QAAvB;AACAoB,IAAAA,KAAK,CAACuB,MAAN,GAAe,IAAf;;AAEA,QAAIxB,IAAI,CAACyB,QAAT,EAAmB;AAEjB,UAAIR,KAAK,GAAGjB,IAAI,CAACiB,KAAjB;AACAA,MAAAA,KAAK,GAAG,KAAK0C,eAAL,CAAqB1C,KAArB,EAA4B,EAA5B,EAAgC,CAAhC,CAAR;;AACA,UAAI,KAAKC,QAAL,CAAc0C,UAAlB,EAA8B;AAC5B3C,QAAAA,KAAK,GAAG,KAAK4C,iBAAL,CAAuB5C,KAAvB,CAAR;AACD;;AACD,YAAM6C,UAAU,GAAG,CAAC7D,KAAK,CAACwB,QAAP,IAAmB,CAAC,KAAKsC,eAAL,CAAqB9C,KAArB,EAA4B,KAAKA,KAAjC,CAAvC;;AAEA,UAAI,CAAC6C,UAAL,EAAiB;AACf,eAAO,KAAP;AACD;;AACD7D,MAAAA,KAAK,CAACmB,cAAN,GAAuB,IAAvB;AACAnB,MAAAA,KAAK,CAACwB,QAAN,GAAiB,IAAjB;AACA,WAAKR,KAAL,GAAaA,KAAb;AACD,KAfD,MAeO,IAAIjB,IAAI,CAAC4B,MAAT,EAAiB;AACtB,YAAMA,MAAM,GAAG5B,IAAI,CAAC4B,MAApB;AACA3B,MAAAA,KAAK,CAACmB,cAAN,GAAuBQ,MAAvB;AACA3B,MAAAA,KAAK,CAACwB,QAAN,GAAiB,KAAjB;AACA,WAAKR,KAAL,GAAajB,IAAI,CAACiB,KAAL,IAAc,IAA3B;AACA,YAAMqB,aAAa,GAAGtC,IAAI,CAACiB,KAAL,YAAsBsB,YAA5C;AAIA1D,MAAAA,QAAQ,CAACuB,IAAT,GAAgBJ,IAAI,CAACI,IAAL,IAAawB,MAAM,CAAC/C,QAAP,CAAgBuB,IAA7C;AAEAvB,MAAAA,QAAQ,CAACG,eAAT,GAA2B4C,MAAM,CAAC/C,QAAP,CAAgBsC,iBAAhB,IAAqCmB,aAAa,GAAG,CAAH,GAAO,CAAzD,CAA3B;AACAzD,MAAAA,QAAQ,CAACC,MAAT,GAAkBF,SAAS,CAACC,QAAD,CAA3B;AACD,KAbM,MAaA,IAAImB,IAAI,CAACiB,KAAT,EAAgB;AACrB,WAAK+C,oBAAL,CAA0BhE,IAA1B;;AAEA,UAAIiB,KAAK,GAAGjB,IAAI,CAACiB,KAAjB;AACAhB,MAAAA,KAAK,CAACmB,cAAN,GAAuB,IAAvB;AACAnB,MAAAA,KAAK,CAACwB,QAAN,GAAiB,KAAjB;AACA,WAAKR,KAAL,GAAaA,KAAb;AAEApC,MAAAA,QAAQ,CAACG,eAAT,GAA2BiC,KAAK,CAACE,iBAAjC;AACAtC,MAAAA,QAAQ,CAACC,MAAT,GAAkBF,SAAS,CAACC,QAAD,CAA3B;AAEA,YAAM;AAAC+C,QAAAA,MAAD;AAASE,QAAAA;AAAT,UAAuB,IAA7B;;AAEA,UAAI,KAAKzB,eAAL,IAAwBY,KAAK,YAAYsB,YAA7C,EAA2D;AACzDtB,QAAAA,KAAK,GAAGvC,sBAAsB,CAACuC,KAAD,EAAQpC,QAAR,CAA9B;AACD;;AAID,YAAMoF,kBAAkB,GAAGhD,KAAK,CAACiD,UAAN,GAAmBpC,UAAnB,GAAgCjD,QAAQ,CAACC,MAAT,GAAkB,CAA7E;;AACA,UAAI8C,MAAM,CAACsC,UAAP,GAAoBD,kBAAxB,EAA4C;AAC1CrC,QAAAA,MAAM,CAACuC,UAAP,CAAkBF,kBAAlB;AACD;;AAEDrC,MAAAA,MAAM,CAACwC,WAAP,CAAmB,IAAnB;AACAxC,MAAAA,MAAM,CAACyC,OAAP,CAAe;AAACb,QAAAA,IAAI,EAAEvC,KAAP;AAAc7B,QAAAA,MAAM,EAAE0C;AAAtB,OAAf;AAEAjD,MAAAA,QAAQ,CAACuB,IAAT,GAAgBJ,IAAI,CAACI,IAAL,IAAawB,MAAM,CAAC/C,QAAP,CAAgBuB,IAA7C;AACD;;AAED,WAAO,IAAP;AACD;;AAEDkE,EAAAA,eAAe,CACbtE,IAGC,GAAG,EAJS,EAKP;AACN,SAAKC,KAAL,CAAWuB,MAAX,GAAoB,IAApB;AAEA,UAAMP,KAAK,GAAG,KAAKA,KAAnB;AACA,UAAM;AAACsD,MAAAA,WAAW,GAAG,CAAf;AAAkBC,MAAAA;AAAlB,QAA+BxE,IAArC;AACA,SAAK4B,MAAL,CAAYyC,OAAZ,CAAoB;AAClBb,MAAAA,IAAI,EACF,KAAKnD,eAAL,IAAwBY,KAAK,YAAYsB,YAAzC,GACI7D,sBAAsB,CAACuC,KAAD,EAAQ;AAC5BlC,QAAAA,IAAI,EAAE,KAAKA,IADiB;AAE5B0F,QAAAA,UAAU,EAAEF,WAFgB;AAG5BG,QAAAA,QAAQ,EAAEF;AAHkB,OAAR,CAD1B,GAMIvD,KAAK,CAAC0D,QAAN,CAAeJ,WAAf,EAA4BC,SAA5B,CARY;AASlBpF,MAAAA,MAAM,EAAEmF,WAAW,GAAGtD,KAAK,CAACE,iBAApB,GAAwC,KAAKW;AATnC,KAApB;AAWD;;AAED8C,EAAAA,QAAQ,CAACrD,YAAD,EAAuBsD,IAAa,GAAG,KAAvC,EAAuD;AAC7D,UAAM;AAAC5E,MAAAA;AAAD,QAAU,IAAhB;AACA,UAAM6E,QAAQ,GAAG7E,KAAK,CAACqB,cAAvB;AAGA,UAAML,KAAK,GAAGxC,iBAAiB,CAACmG,QAAlB,CAA2BE,QAA3B,EAAqCvD,YAAY,GAAG,CAApD,EAAuD;AACnExC,MAAAA,IAAI,EAAE,KAAKA,IADwD;AAEnEqB,MAAAA,IAAI,EAAE,KAAKc,QAAL,CAAcJ,WAF+C;AAGnE+D,MAAAA;AAHmE,KAAvD,CAAd;AAMA,SAAK5D,KAAL,GAAaA,KAAb;AAEA,UAAM;AAACW,MAAAA,MAAD;AAASE,MAAAA;AAAT,QAAuB,IAA7B;;AAEA,QAAIF,MAAM,CAACsC,UAAP,GAAoBjD,KAAK,CAACiD,UAAN,GAAmBpC,UAA3C,EAAuD;AACrDF,MAAAA,MAAM,CAACuC,UAAP,CAAkBlD,KAAK,CAACiD,UAAN,GAAmBpC,UAArC;;AAEA,UAAI+C,IAAI,IAAIC,QAAZ,EAAsB;AAIpBlD,QAAAA,MAAM,CAACyC,OAAP,CAAe;AACbb,UAAAA,IAAI,EACFsB,QAAQ,YAAYvC,YAApB,GAAmC7D,sBAAsB,CAACoG,QAAD,EAAW,IAAX,CAAzD,GAA4EA,QAFjE;AAGb1F,UAAAA,MAAM,EAAE0C;AAHK,SAAf;AAKD;AACF;;AAED7B,IAAAA,KAAK,CAACqB,cAAN,GAAuBL,KAAvB;AACAhB,IAAAA,KAAK,CAACwB,QAAN,GAAiB,KAAjB;AACAxB,IAAAA,KAAK,CAACmB,cAAN,GAAuB,IAAvB;AACAnB,IAAAA,KAAK,CAACoB,cAAN,GAAuB,KAAKH,QAA5B;AACA,WAAO,IAAP;AACD;;AAGS8C,EAAAA,oBAAoB,CAAChE,IAAD,EAA2D;AACvF,UAAM;AAACiB,MAAAA;AAAD,QAAUjB,IAAhB;;AACA,QAAI,CAACyD,WAAW,CAACC,MAAZ,CAAmBzC,KAAnB,CAAL,EAAgC;AAC9B,YAAM,IAAI8D,KAAJ,qBAAuB,KAAK7E,EAA5B,8BAAN;AACD;;AACD,UAAM8E,SAAS,GAAG,KAAK9D,QAAL,CAAcJ,WAAhC;AAEA,QAAImE,gBAAgB,GAAG,KAAvB;;AACA,QAAI,KAAK5E,eAAT,EAA0B;AAExB4E,MAAAA,gBAAgB,GAAGhE,KAAK,CAACE,iBAAN,GAA0B,CAA7C;AACD;;AACD,QAAI8D,gBAAJ,EAAsB;AACpB,YAAM,IAAIF,KAAJ,qBAAuB,KAAK7E,EAA5B,+BAAmDe,KAAK,CAACnB,WAAN,CAAkBoF,IAArE,EAAN;AACD;;AACD,QAAI,EAAEjE,KAAK,YAAY+D,SAAnB,KAAiC,KAAK9D,QAAL,CAAc0C,UAA/C,IAA6D,EAAE,gBAAgB5D,IAAlB,CAAjE,EAA0F;AACxFrB,MAAAA,GAAG,CAACwG,IAAJ,qBAAsB,KAAKjF,EAA3B;AACD;AACF;;AAGD2D,EAAAA,iBAAiB,CAAC5C,KAAD,EAAoC;AACnD,YAAQ,KAAKC,QAAL,CAAcd,IAAtB;AACE;AAEE,eAAO,IAAIY,YAAJ,CAAiBC,KAAjB,EAAwBmE,GAAxB,CAA4BC,CAAC,IAAK,CAACA,CAAC,GAAG,GAAL,IAAY,GAAb,GAAoB,CAApB,GAAwB,CAAzD,CAAP;;AAEF;AAEE,eAAO,IAAIrE,YAAJ,CAAiBC,KAAjB,EAAwBmE,GAAxB,CAA4BC,CAAC,IAAK,CAACA,CAAC,GAAG,KAAL,IAAc,KAAf,GAAwB,CAAxB,GAA4B,CAA7D,CAAP;;AAEF;AAEE,eAAO,IAAIrE,YAAJ,CAAiBC,KAAjB,EAAwBmE,GAAxB,CAA4BC,CAAC,IAAIA,CAAC,GAAG,GAArC,CAAP;;AAEF;AAEE,eAAO,IAAIrE,YAAJ,CAAiBC,KAAjB,EAAwBmE,GAAxB,CAA4BC,CAAC,IAAIA,CAAC,GAAG,KAArC,CAAP;;AAEF;AAEE,eAAOpE,KAAP;AAnBJ;AAqBD;;AAGS0C,EAAAA,eAAe,CAAC1C,KAAD,EAAaqE,GAAb,EAAgCC,KAAhC,EAA6D;AACpF,UAAM;AAACjF,MAAAA,YAAD;AAAevB,MAAAA;AAAf,QAAuB,KAAKmC,QAAlC;;AAEA,QAAIX,MAAM,CAACC,QAAP,CAAgBS,KAAhB,CAAJ,EAA4B;AAC1BqE,MAAAA,GAAG,CAACC,KAAD,CAAH,GAAatE,KAAb;AACA,aAAOqE,GAAP;AACD;;AACD,QAAI,CAACrE,KAAL,EAAY;AACVqE,MAAAA,GAAG,CAACC,KAAD,CAAH,GAAajF,YAAY,CAAC,CAAD,CAAzB;AACA,aAAOgF,GAAP;AACD;;AAID,YAAQvG,IAAR;AACE,WAAK,CAAL;AACEuG,QAAAA,GAAG,CAACC,KAAK,GAAG,CAAT,CAAH,GAAiBhF,MAAM,CAACC,QAAP,CAAgBS,KAAK,CAAC,CAAD,CAArB,IAA4BA,KAAK,CAAC,CAAD,CAAjC,GAAuCX,YAAY,CAAC,CAAD,CAApE;;AACF,WAAK,CAAL;AACEgF,QAAAA,GAAG,CAACC,KAAK,GAAG,CAAT,CAAH,GAAiBhF,MAAM,CAACC,QAAP,CAAgBS,KAAK,CAAC,CAAD,CAArB,IAA4BA,KAAK,CAAC,CAAD,CAAjC,GAAuCX,YAAY,CAAC,CAAD,CAApE;;AACF,WAAK,CAAL;AACEgF,QAAAA,GAAG,CAACC,KAAK,GAAG,CAAT,CAAH,GAAiBhF,MAAM,CAACC,QAAP,CAAgBS,KAAK,CAAC,CAAD,CAArB,IAA4BA,KAAK,CAAC,CAAD,CAAjC,GAAuCX,YAAY,CAAC,CAAD,CAApE;;AACF,WAAK,CAAL;AACEgF,QAAAA,GAAG,CAACC,KAAK,GAAG,CAAT,CAAH,GAAiBhF,MAAM,CAACC,QAAP,CAAgBS,KAAK,CAAC,CAAD,CAArB,IAA4BA,KAAK,CAAC,CAAD,CAAjC,GAAuCX,YAAY,CAAC,CAAD,CAApE;AACA;;AAEF;AAGE,YAAI8C,CAAC,GAAGrE,IAAR;;AACA,eAAO,EAAEqE,CAAF,IAAO,CAAd,EAAiB;AACfkC,UAAAA,GAAG,CAACC,KAAK,GAAGnC,CAAT,CAAH,GAAiB7C,MAAM,CAACC,QAAP,CAAgBS,KAAK,CAACmC,CAAD,CAArB,IAA4BnC,KAAK,CAACmC,CAAD,CAAjC,GAAuC9C,YAAY,CAAC8C,CAAD,CAApE;AACD;;AAjBL;;AAoBA,WAAOkC,GAAP;AACD;;AAESvB,EAAAA,eAAe,CAACyB,MAAD,EAAcC,MAAd,EAAoC;AAC3D,QAAI,CAACD,MAAD,IAAW,CAACC,MAAhB,EAAwB;AACtB,aAAO,KAAP;AACD;;AACD,UAAM;AAAC1G,MAAAA;AAAD,QAAS,IAAf;;AACA,SAAK,IAAIqE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGrE,IAApB,EAA0BqE,CAAC,EAA3B,EAA+B;AAC7B,UAAIoC,MAAM,CAACpC,CAAD,CAAN,KAAcqC,MAAM,CAACrC,CAAD,CAAxB,EAA6B;AAC3B,eAAO,KAAP;AACD;AACF;;AACD,WAAO,IAAP;AACD;;AAjbyE","sourcesContent":["/* eslint-disable complexity */\nimport GL from '@luma.gl/constants';\nimport {hasFeature, FEATURES, Buffer} from '@luma.gl/core';\nimport ShaderAttribute, {IShaderAttribute} from './shader-attribute';\nimport {glArrayFromType} from './gl-utils';\nimport typedArrayManager from '../../utils/typed-array-manager';\nimport {toDoublePrecisionArray} from '../../utils/math-utils';\nimport log from '../../utils/log';\n\nimport type {Buffer as LumaBuffer} from '@luma.gl/webgl';\nimport type {TypedArray, NumericArray, TypedArrayConstructor} from '../../types/types';\n\nexport type BufferAccessor = {\n  /** A WebGL data type, see [vertexAttribPointer](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/vertexAttribPointer#parameters). */\n  type?: number;\n  /** The number of elements per vertex attribute. */\n  size?: number;\n  /** 1 if instanced. */\n  divisor?: number;\n  /** Offset of the first vertex attribute into the buffer, in bytes. */\n  offset?: number;\n  /** The offset between the beginning of consecutive vertex attributes, in bytes. */\n  stride?: number;\n  /** Whether data values should be normalized. Note that all color attributes in deck.gl layers are normalized by default. */\n  normalized?: boolean;\n  integer?: boolean;\n};\n\nexport type ShaderAttributeOptions = Partial<BufferAccessor> & {\n  offset: number;\n  stride: number;\n  vertexOffset?: number;\n  elementOffset?: number;\n};\n\nfunction getStride(accessor: DataColumnSettings<any>): number {\n  return accessor.stride || accessor.size * accessor.bytesPerElement;\n}\n\nfunction resolveShaderAttribute(\n  baseAccessor: DataColumnSettings<any>,\n  shaderAttributeOptions: Partial<ShaderAttributeOptions>\n): ShaderAttributeOptions {\n  if (shaderAttributeOptions.offset) {\n    log.removed('shaderAttribute.offset', 'vertexOffset, elementOffset')();\n  }\n\n  // All shader attributes share the parent's stride\n  const stride = getStride(baseAccessor);\n  // `vertexOffset` is used to access the neighboring vertex's value\n  // e.g. `nextPositions` in polygon\n  const vertexOffset =\n    shaderAttributeOptions.vertexOffset !== undefined\n      ? shaderAttributeOptions.vertexOffset\n      : baseAccessor.vertexOffset || 0;\n  // `elementOffset` is defined when shader attribute's size is smaller than the parent's\n  // e.g. `translations` in transform matrix\n  const elementOffset = shaderAttributeOptions.elementOffset || 0;\n  const offset =\n    // offsets defined by the attribute\n    vertexOffset * stride +\n    elementOffset * baseAccessor.bytesPerElement +\n    // offsets defined by external buffers if any\n    (baseAccessor.offset || 0);\n\n  return {\n    ...shaderAttributeOptions,\n    offset,\n    stride\n  };\n}\n\nfunction resolveDoublePrecisionShaderAttributes(\n  baseAccessor: DataColumnSettings<any>,\n  shaderAttributeOptions: Partial<ShaderAttributeOptions>\n): {\n  high: ShaderAttributeOptions;\n  low: ShaderAttributeOptions;\n} {\n  const resolvedOptions = resolveShaderAttribute(baseAccessor, shaderAttributeOptions);\n\n  return {\n    high: resolvedOptions,\n    low: {\n      ...resolvedOptions,\n      offset: resolvedOptions.offset + baseAccessor.size * 4\n    }\n  };\n}\n\nexport type DataColumnOptions<Options> = Options &\n  BufferAccessor & {\n    id?: string;\n    vertexOffset?: number;\n    fp64?: boolean;\n    logicalType?: number;\n    isIndexed?: boolean;\n    defaultValue?: number | number[];\n  };\n\ntype DataColumnSettings<Options> = DataColumnOptions<Options> & {\n  type: number;\n  size: number;\n  logicalType?: number;\n  bytesPerElement: number;\n  defaultValue: number[];\n  defaultType: TypedArrayConstructor;\n};\n\ntype DataColumnInternalState<Options, State> = State & {\n  externalBuffer: LumaBuffer | null;\n  bufferAccessor: DataColumnSettings<Options>;\n  allocatedValue: TypedArray | null;\n  numInstances: number;\n  bounds: [number[], number[]] | null;\n  constant: boolean;\n};\n\nexport default class DataColumn<Options, State> implements IShaderAttribute {\n  gl: WebGLRenderingContext;\n  id: string;\n  size: number;\n  settings: DataColumnSettings<Options>;\n  value: NumericArray | null;\n  doublePrecision: boolean;\n\n  protected _buffer: LumaBuffer | null;\n  protected state: DataColumnInternalState<Options, State>;\n\n  /* eslint-disable max-statements */\n  constructor(gl: WebGLRenderingContext, opts: DataColumnOptions<Options>, state: State) {\n    this.gl = gl;\n    this.id = opts.id || '';\n    this.size = opts.size || 1;\n\n    const logicalType = opts.logicalType || opts.type;\n    const doublePrecision = logicalType === GL.DOUBLE;\n\n    let {defaultValue} = opts;\n    defaultValue = Number.isFinite(defaultValue)\n      ? [defaultValue]\n      : defaultValue || new Array(this.size).fill(0);\n\n    let bufferType: number;\n    if (doublePrecision) {\n      bufferType = GL.FLOAT;\n    } else if (!logicalType && opts.isIndexed) {\n      bufferType =\n        gl && hasFeature(gl, FEATURES.ELEMENT_INDEX_UINT32) ? GL.UNSIGNED_INT : GL.UNSIGNED_SHORT;\n    } else {\n      bufferType = logicalType || GL.FLOAT;\n    }\n\n    // This is the attribute type defined by the layer\n    // If an external buffer is provided, this.type may be overwritten\n    // But we always want to use defaultType for allocation\n    let defaultType = glArrayFromType(logicalType || bufferType || GL.FLOAT);\n    this.doublePrecision = doublePrecision;\n\n    // `fp64: false` tells a double-precision attribute to allocate Float32Arrays\n    // by default when using auto-packing. This is more efficient in use cases where\n    // high precision is unnecessary, but the `64Low` attribute is still required\n    // by the shader.\n    if (doublePrecision && opts.fp64 === false) {\n      defaultType = Float32Array;\n    }\n\n    this.value = null;\n    this.settings = {\n      ...opts,\n      defaultType,\n      defaultValue: defaultValue as number[],\n      logicalType,\n      type: bufferType,\n      size: this.size,\n      bytesPerElement: defaultType.BYTES_PER_ELEMENT\n    };\n    this.state = {\n      ...state,\n      externalBuffer: null,\n      bufferAccessor: this.settings,\n      allocatedValue: null,\n      numInstances: 0,\n      bounds: null,\n      constant: false\n    };\n    this._buffer = null;\n  }\n  /* eslint-enable max-statements */\n\n  get isConstant(): boolean {\n    return this.state.constant;\n  }\n\n  get buffer(): LumaBuffer {\n    if (!this._buffer) {\n      const {isIndexed, type} = this.settings;\n      this._buffer = new Buffer(this.gl, {\n        id: this.id,\n        target: isIndexed ? GL.ELEMENT_ARRAY_BUFFER : GL.ARRAY_BUFFER,\n        accessor: {type}\n      }) as LumaBuffer;\n    }\n    return this._buffer;\n  }\n\n  get byteOffset(): number {\n    const accessor = this.getAccessor();\n    if (accessor.vertexOffset) {\n      return accessor.vertexOffset * getStride(accessor);\n    }\n    return 0;\n  }\n\n  get numInstances(): number {\n    return this.state.numInstances;\n  }\n\n  set numInstances(n: number) {\n    this.state.numInstances = n;\n  }\n\n  delete(): void {\n    if (this._buffer) {\n      this._buffer.delete();\n      this._buffer = null;\n    }\n    typedArrayManager.release(this.state.allocatedValue);\n  }\n\n  getShaderAttributes(\n    id: string,\n    options: Partial<ShaderAttributeOptions> | null\n  ): Record<string, IShaderAttribute> {\n    if (this.doublePrecision) {\n      const shaderAttributes = {};\n      const isBuffer64Bit = this.value instanceof Float64Array;\n\n      const doubleShaderAttributeDefs = resolveDoublePrecisionShaderAttributes(\n        this.getAccessor(),\n        options || {}\n      );\n\n      shaderAttributes[id] = new ShaderAttribute(this, doubleShaderAttributeDefs.high);\n      shaderAttributes[`${id}64Low`] = isBuffer64Bit\n        ? new ShaderAttribute(this, doubleShaderAttributeDefs.low)\n        : new Float32Array(this.size); // use constant for low part if buffer is 32-bit\n      return shaderAttributes;\n    }\n    if (options) {\n      const shaderAttributeDef = resolveShaderAttribute(this.getAccessor(), options);\n      return {[id]: new ShaderAttribute(this, shaderAttributeDef)};\n    }\n    return {[id]: this};\n  }\n\n  getBuffer(): LumaBuffer | null {\n    if (this.state.constant) {\n      return null;\n    }\n    return this.state.externalBuffer || this._buffer;\n  }\n\n  getValue(): [LumaBuffer, BufferAccessor] | NumericArray | null {\n    if (this.state.constant) {\n      return this.value;\n    }\n    return [this.getBuffer() as LumaBuffer, this.getAccessor() as BufferAccessor];\n  }\n\n  getAccessor(): DataColumnSettings<Options> {\n    return this.state.bufferAccessor;\n  }\n\n  // Returns [min: Array(size), max: Array(size)]\n  /* eslint-disable max-depth */\n  getBounds(): [number[], number[]] | null {\n    if (this.state.bounds) {\n      return this.state.bounds;\n    }\n    let result: [number[], number[]] | null = null;\n    if (this.state.constant && this.value) {\n      const min = Array.from(this.value);\n      result = [min, min];\n    } else {\n      const {value, numInstances, size} = this;\n      const len = numInstances * size;\n      if (value && len && value.length >= len) {\n        const min = new Array(size).fill(Infinity);\n        const max = new Array(size).fill(-Infinity);\n        for (let i = 0; i < len; ) {\n          for (let j = 0; j < size; j++) {\n            const v = value[i++];\n            if (v < min[j]) min[j] = v;\n            if (v > max[j]) max[j] = v;\n          }\n        }\n        result = [min, max];\n      }\n    }\n    this.state.bounds = result;\n    return result;\n  }\n\n  // returns true if success\n  // eslint-disable-next-line max-statements\n  setData(\n    data:\n      | TypedArray\n      | LumaBuffer\n      | ({\n          constant?: boolean;\n          value?: NumericArray;\n          buffer?: LumaBuffer;\n        } & Partial<BufferAccessor>)\n  ): boolean {\n    const {state} = this;\n\n    let opts: {\n      constant?: boolean;\n      value?: NumericArray;\n      buffer?: LumaBuffer;\n    } & Partial<BufferAccessor>;\n    if (ArrayBuffer.isView(data)) {\n      opts = {value: data};\n    } else if (data instanceof Buffer) {\n      opts = {buffer: data as LumaBuffer};\n    } else {\n      opts = data;\n    }\n\n    const accessor: DataColumnSettings<Options> = {...this.settings, ...opts};\n    state.bufferAccessor = accessor;\n    state.bounds = null; // clear cached bounds\n\n    if (opts.constant) {\n      // set constant\n      let value = opts.value as NumericArray;\n      value = this._normalizeValue(value, [], 0);\n      if (this.settings.normalized) {\n        value = this.normalizeConstant(value);\n      }\n      const hasChanged = !state.constant || !this._areValuesEqual(value, this.value);\n\n      if (!hasChanged) {\n        return false;\n      }\n      state.externalBuffer = null;\n      state.constant = true;\n      this.value = value;\n    } else if (opts.buffer) {\n      const buffer = opts.buffer;\n      state.externalBuffer = buffer;\n      state.constant = false;\n      this.value = opts.value || null;\n      const isBuffer64Bit = opts.value instanceof Float64Array;\n\n      // Copy the type of the buffer into the accessor\n      // @ts-ignore\n      accessor.type = opts.type || buffer.accessor.type;\n      // @ts-ignore\n      accessor.bytesPerElement = buffer.accessor.BYTES_PER_ELEMENT * (isBuffer64Bit ? 2 : 1);\n      accessor.stride = getStride(accessor);\n    } else if (opts.value) {\n      this._checkExternalBuffer(opts);\n\n      let value = opts.value as TypedArray;\n      state.externalBuffer = null;\n      state.constant = false;\n      this.value = value;\n\n      accessor.bytesPerElement = value.BYTES_PER_ELEMENT;\n      accessor.stride = getStride(accessor);\n\n      const {buffer, byteOffset} = this;\n\n      if (this.doublePrecision && value instanceof Float64Array) {\n        value = toDoublePrecisionArray(value, accessor);\n      }\n\n      // A small over allocation is used as safety margin\n      // Shader attributes may try to access this buffer with bigger offsets\n      const requiredBufferSize = value.byteLength + byteOffset + accessor.stride * 2;\n      if (buffer.byteLength < requiredBufferSize) {\n        buffer.reallocate(requiredBufferSize);\n      }\n      // Hack: force Buffer to infer data type\n      buffer.setAccessor(null);\n      buffer.subData({data: value, offset: byteOffset});\n      // @ts-ignore\n      accessor.type = opts.type || buffer.accessor.type;\n    }\n\n    return true;\n  }\n\n  updateSubBuffer(\n    opts: {\n      startOffset?: number;\n      endOffset?: number;\n    } = {}\n  ): void {\n    this.state.bounds = null; // clear cached bounds\n\n    const value = this.value as TypedArray;\n    const {startOffset = 0, endOffset} = opts;\n    this.buffer.subData({\n      data:\n        this.doublePrecision && value instanceof Float64Array\n          ? toDoublePrecisionArray(value, {\n              size: this.size,\n              startIndex: startOffset,\n              endIndex: endOffset\n            })\n          : value.subarray(startOffset, endOffset),\n      offset: startOffset * value.BYTES_PER_ELEMENT + this.byteOffset\n    });\n  }\n\n  allocate(numInstances: number, copy: boolean = false): boolean {\n    const {state} = this;\n    const oldValue = state.allocatedValue;\n\n    // Allocate at least one element to ensure a valid buffer\n    const value = typedArrayManager.allocate(oldValue, numInstances + 1, {\n      size: this.size,\n      type: this.settings.defaultType,\n      copy\n    });\n\n    this.value = value;\n\n    const {buffer, byteOffset} = this;\n\n    if (buffer.byteLength < value.byteLength + byteOffset) {\n      buffer.reallocate(value.byteLength + byteOffset);\n\n      if (copy && oldValue) {\n        // Upload the full existing attribute value to the GPU, so that updateBuffer\n        // can choose to only update a partial range.\n        // TODO - copy old buffer to new buffer on the GPU\n        buffer.subData({\n          data:\n            oldValue instanceof Float64Array ? toDoublePrecisionArray(oldValue, this) : oldValue,\n          offset: byteOffset\n        });\n      }\n    }\n\n    state.allocatedValue = value;\n    state.constant = false;\n    state.externalBuffer = null;\n    state.bufferAccessor = this.settings;\n    return true;\n  }\n\n  // PRIVATE HELPER METHODS\n  protected _checkExternalBuffer(opts: {value?: NumericArray; normalized?: boolean}): void {\n    const {value} = opts;\n    if (!ArrayBuffer.isView(value)) {\n      throw new Error(`Attribute ${this.id} value is not TypedArray`);\n    }\n    const ArrayType = this.settings.defaultType;\n\n    let illegalArrayType = false;\n    if (this.doublePrecision) {\n      // not 32bit or 64bit\n      illegalArrayType = value.BYTES_PER_ELEMENT < 4;\n    }\n    if (illegalArrayType) {\n      throw new Error(`Attribute ${this.id} does not support ${value.constructor.name}`);\n    }\n    if (!(value instanceof ArrayType) && this.settings.normalized && !('normalized' in opts)) {\n      log.warn(`Attribute ${this.id} is normalized`)();\n    }\n  }\n\n  // https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/vertexAttribPointer\n  normalizeConstant(value: NumericArray): NumericArray {\n    switch (this.settings.type) {\n      case GL.BYTE:\n        // normalize [-128, 127] to [-1, 1]\n        return new Float32Array(value).map(x => ((x + 128) / 255) * 2 - 1);\n\n      case GL.SHORT:\n        // normalize [-32768, 32767] to [-1, 1]\n        return new Float32Array(value).map(x => ((x + 32768) / 65535) * 2 - 1);\n\n      case GL.UNSIGNED_BYTE:\n        // normalize [0, 255] to [0, 1]\n        return new Float32Array(value).map(x => x / 255);\n\n      case GL.UNSIGNED_SHORT:\n        // normalize [0, 65535] to [0, 1]\n        return new Float32Array(value).map(x => x / 65535);\n\n      default:\n        // No normalization for gl.FLOAT and gl.HALF_FLOAT\n        return value;\n    }\n  }\n\n  /* check user supplied values and apply fallback */\n  protected _normalizeValue(value: any, out: NumericArray, start: number): NumericArray {\n    const {defaultValue, size} = this.settings;\n\n    if (Number.isFinite(value)) {\n      out[start] = value;\n      return out;\n    }\n    if (!value) {\n      out[start] = defaultValue[0];\n      return out;\n    }\n\n    // Important - switch cases are 5x more performant than a for loop!\n    /* eslint-disable no-fallthrough, default-case */\n    switch (size) {\n      case 4:\n        out[start + 3] = Number.isFinite(value[3]) ? value[3] : defaultValue[3];\n      case 3:\n        out[start + 2] = Number.isFinite(value[2]) ? value[2] : defaultValue[2];\n      case 2:\n        out[start + 1] = Number.isFinite(value[1]) ? value[1] : defaultValue[1];\n      case 1:\n        out[start + 0] = Number.isFinite(value[0]) ? value[0] : defaultValue[0];\n        break;\n\n      default:\n        // In the rare case where the attribute size > 4, do it the slow way\n        // This is used for e.g. transform matrices\n        let i = size;\n        while (--i >= 0) {\n          out[start + i] = Number.isFinite(value[i]) ? value[i] : defaultValue[i];\n        }\n    }\n\n    return out;\n  }\n\n  protected _areValuesEqual(value1: any, value2: any): boolean {\n    if (!value1 || !value2) {\n      return false;\n    }\n    const {size} = this;\n    for (let i = 0; i < size; i++) {\n      if (value1[i] !== value2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n"],"file":"data-column.js"}