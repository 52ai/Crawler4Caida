{"version":3,"sources":["../../../../src/lib/attribute/attribute.ts"],"names":["DataColumn","assert","createIterable","getAccessorFromBuffer","fillArray","range","normalizeTransitionSettings","Attribute","constructor","gl","opts","startIndices","lastExternalBuffer","binaryValue","binaryAccessor","needsUpdate","needsRedraw","updateRanges","FULL","settings","update","accessor","_autoUpdater","undefined","Object","seal","state","_validateAttributeUpdaters","layout","clearChangedFlags","getUpdateTriggers","id","concat","supportsTransition","Boolean","transition","getTransitionSetting","layerSettings","userSettings","Array","isArray","find","a","setNeedsUpdate","reason","dataRange","setNeedsRedraw","startRow","endRow","Infinity","add","clearNeedsUpdate","EMPTY","allocate","numInstances","noAlloc","updateBuffer","data","props","context","updated","call","value","constant","buffer","byteLength","byteOffset","setData","startOffset","Number","isFinite","getVertexOffset","endOffset","length","size","updateSubBuffer","_checkAttributeArray","setConstantValue","hasChanged","setExternalBuffer","setBinaryValue","transform","ArrayBuffer","isView","needsNormalize","stride","offset","nested","row","vertexIndex","getShaderAttributes","shaderAttributeDefs","shaderAttributes","shaderAttributeName","assign","attribute","accessorFunc","i","iterable","objectInfo","object","index","objectValue","numVertices","startIndex","item","_normalizeValue","set","target","source","start","count","hasUpdater","Error","limit","Math","min","valid"],"mappings":"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","sourcesContent":["/* eslint-disable complexity */\nimport DataColumn, {DataColumnOptions, ShaderAttributeOptions, BufferAccessor} from './data-column';\nimport {IShaderAttribute} from './shader-attribute';\nimport assert from '../../utils/assert';\nimport {createIterable, getAccessorFromBuffer} from '../../utils/iterable-utils';\nimport {fillArray} from '../../utils/flatten';\nimport * as range from '../../utils/range';\nimport {normalizeTransitionSettings, TransitionSettings} from './attribute-transition-utils';\nimport type {Buffer} from '@luma.gl/webgl';\n\nimport type {NumericArray, TypedArray} from '../../types/types';\n\nexport type Accessor<DataType, ReturnType> = (\n  object: DataType,\n  context: {\n    data: any;\n    index: number;\n    target: number[];\n  }\n) => ReturnType;\n\nexport type Updater = (\n  attribute: Attribute,\n  {\n    data,\n    startRow,\n    endRow,\n    props,\n    numInstances\n  }: {\n    data: any;\n    startRow: number;\n    endRow: number;\n    props: any;\n    numInstances: number;\n  }\n) => void;\n\nexport type AttributeOptions = DataColumnOptions<{\n  transition?: boolean | Partial<TransitionSettings>;\n  noAlloc?: boolean;\n  update?: Updater;\n  accessor?: Accessor<any, any> | string | string[];\n  transform?: (value: any) => any;\n  shaderAttributes?: Record<string, Partial<ShaderAttributeOptions>>;\n}>;\n\nexport type BinaryAttribute = Partial<BufferAccessor> & {value?: TypedArray; buffer?: Buffer};\n\ntype AttributeInternalState = {\n  startIndices: NumericArray | null;\n  /** Legacy: external binary supplied via attribute name */\n  lastExternalBuffer: TypedArray | Buffer | BinaryAttribute | null;\n  /** External binary supplied via accessor name */\n  binaryValue: TypedArray | Buffer | BinaryAttribute | null;\n  binaryAccessor: Accessor<any, any> | null;\n  needsUpdate: string | boolean;\n  needsRedraw: string | boolean;\n  updateRanges: number[][];\n};\n\nexport default class Attribute extends DataColumn<AttributeOptions, AttributeInternalState> {\n  /** Legacy approach to set attribute value - read `isConstant` instead for attribute state */\n  constant: boolean = false;\n\n  constructor(gl: WebGLRenderingContext, opts: AttributeOptions) {\n    super(gl, opts, {\n      startIndices: null,\n      lastExternalBuffer: null,\n      binaryValue: null,\n      binaryAccessor: null,\n      needsUpdate: true,\n      needsRedraw: false,\n      updateRanges: range.FULL\n    });\n\n    // eslint-disable-next-line\n    this.settings.update = opts.update || (opts.accessor ? this._autoUpdater : undefined);\n\n    Object.seal(this.settings);\n    Object.seal(this.state);\n\n    // Check all fields and generate helpful error messages\n    this._validateAttributeUpdaters();\n  }\n\n  get startIndices(): NumericArray | null {\n    return this.state.startIndices;\n  }\n\n  set startIndices(layout: NumericArray | null) {\n    this.state.startIndices = layout;\n  }\n\n  needsUpdate(): string | boolean {\n    return this.state.needsUpdate;\n  }\n\n  needsRedraw({clearChangedFlags = false}: {clearChangedFlags?: boolean} = {}): string | boolean {\n    const needsRedraw = this.state.needsRedraw;\n    this.state.needsRedraw = needsRedraw && !clearChangedFlags;\n    return needsRedraw;\n  }\n\n  getUpdateTriggers(): string[] {\n    const {accessor} = this.settings;\n\n    // Backards compatibility: allow attribute name to be used as update trigger key\n    return [this.id].concat((typeof accessor !== 'function' && accessor) || []);\n  }\n\n  supportsTransition(): boolean {\n    return Boolean(this.settings.transition);\n  }\n\n  // Resolve transition settings object if transition is enabled, otherwise `null`\n  getTransitionSetting(opts: Record<string, any>): TransitionSettings | null {\n    if (!opts || !this.supportsTransition()) {\n      return null;\n    }\n    const {accessor} = this.settings;\n    // TODO: have the layer resolve these transition settings itself?\n    const layerSettings = this.settings.transition;\n    // these are the transition settings passed in by the user\n    const userSettings = Array.isArray(accessor)\n      ? // @ts-ignore\n        opts[accessor.find(a => opts[a])]\n      : // @ts-ignore\n        opts[accessor];\n\n    // Shorthand: use duration instead of parameter object\n    return normalizeTransitionSettings(userSettings, layerSettings);\n  }\n\n  setNeedsUpdate(reason: string = this.id, dataRange?: {startRow?: number; endRow?: number}): void {\n    this.state.needsUpdate = this.state.needsUpdate || reason;\n    this.setNeedsRedraw(reason);\n    if (dataRange) {\n      const {startRow = 0, endRow = Infinity} = dataRange;\n      this.state.updateRanges = range.add(this.state.updateRanges, [startRow, endRow]);\n    } else {\n      this.state.updateRanges = range.FULL;\n    }\n  }\n\n  clearNeedsUpdate(): void {\n    this.state.needsUpdate = false;\n    this.state.updateRanges = range.EMPTY;\n  }\n\n  setNeedsRedraw(reason: string = this.id): void {\n    this.state.needsRedraw = this.state.needsRedraw || reason;\n  }\n\n  allocate(numInstances: number): boolean {\n    const {state, settings} = this;\n\n    if (settings.noAlloc) {\n      // Data is provided through a Buffer object.\n      return false;\n    }\n\n    if (settings.update) {\n      super.allocate(numInstances, state.updateRanges !== range.FULL);\n      return true;\n    }\n\n    return false;\n  }\n\n  updateBuffer({\n    numInstances,\n    data,\n    props,\n    context\n  }: {\n    numInstances: number;\n    data: any;\n    props: any;\n    context: any;\n  }): boolean {\n    if (!this.needsUpdate()) {\n      return false;\n    }\n\n    const {\n      state: {updateRanges},\n      settings: {update, noAlloc}\n    } = this;\n\n    let updated = true;\n    if (update) {\n      // Custom updater - typically for non-instanced layers\n      for (const [startRow, endRow] of updateRanges) {\n        update.call(context, this, {data, startRow, endRow, props, numInstances});\n      }\n      if (!this.value) {\n        // no value was assigned during update\n      } else if (\n        this.constant ||\n        this.buffer.byteLength < (this.value as TypedArray).byteLength + this.byteOffset\n      ) {\n        this.setData({\n          value: this.value,\n          constant: this.constant\n        });\n        // Setting attribute.constant in updater is a legacy approach that interferes with allocation in the next cycle\n        // Respect it here but reset after use\n        this.constant = false;\n      } else {\n        for (const [startRow, endRow] of updateRanges) {\n          const startOffset = Number.isFinite(startRow) ? this.getVertexOffset(startRow) : 0;\n          const endOffset = Number.isFinite(endRow)\n            ? this.getVertexOffset(endRow)\n            : noAlloc || !Number.isFinite(numInstances)\n            ? this.value.length\n            : numInstances * this.size;\n\n          super.updateSubBuffer({startOffset, endOffset});\n        }\n      }\n      this._checkAttributeArray();\n    } else {\n      updated = false;\n    }\n\n    this.clearNeedsUpdate();\n    this.setNeedsRedraw();\n\n    return updated;\n  }\n\n  // Use generic value\n  // Returns true if successful\n  setConstantValue(value?: NumericArray): boolean {\n    if (value === undefined || typeof value === 'function') {\n      return false;\n    }\n\n    const hasChanged = this.setData({constant: true, value});\n\n    if (hasChanged) {\n      this.setNeedsRedraw();\n    }\n    this.clearNeedsUpdate();\n    return true;\n  }\n\n  // Use external buffer\n  // Returns true if successful\n  // eslint-disable-next-line max-statements\n  setExternalBuffer(buffer?: TypedArray | Buffer | BinaryAttribute): boolean {\n    const {state} = this;\n\n    if (!buffer) {\n      state.lastExternalBuffer = null;\n      return false;\n    }\n\n    this.clearNeedsUpdate();\n\n    if (state.lastExternalBuffer === buffer) {\n      return true;\n    }\n    state.lastExternalBuffer = buffer;\n    this.setNeedsRedraw();\n    this.setData(buffer);\n    return true;\n  }\n\n  // Binary value is a typed array packed from mapping the source data with the accessor\n  // If the returned value from the accessor is the same as the attribute value, set it directly\n  // Otherwise use the auto updater for transform/normalization\n  setBinaryValue(\n    buffer?: TypedArray | Buffer | BinaryAttribute,\n    startIndices: NumericArray | null = null\n  ): boolean {\n    const {state, settings} = this;\n\n    if (!buffer) {\n      state.binaryValue = null;\n      state.binaryAccessor = null;\n      return false;\n    }\n\n    if (settings.noAlloc) {\n      // Let the layer handle this\n      return false;\n    }\n\n    if (state.binaryValue === buffer) {\n      this.clearNeedsUpdate();\n      return true;\n    }\n    state.binaryValue = buffer;\n    this.setNeedsRedraw();\n\n    const needsUpdate = settings.transform || startIndices !== this.startIndices;\n\n    if (needsUpdate) {\n      if (ArrayBuffer.isView(buffer)) {\n        buffer = {value: buffer};\n      }\n      const binaryValue = buffer as BinaryAttribute;\n      assert(ArrayBuffer.isView(binaryValue.value), `invalid ${settings.accessor}`);\n      const needsNormalize = Boolean(binaryValue.size) && binaryValue.size !== this.size;\n\n      state.binaryAccessor = getAccessorFromBuffer(binaryValue.value, {\n        size: binaryValue.size || this.size,\n        stride: binaryValue.stride,\n        offset: binaryValue.offset,\n        startIndices: startIndices as NumericArray,\n        nested: needsNormalize\n      });\n      // Fall through to auto updater\n      return false;\n    }\n\n    this.clearNeedsUpdate();\n    this.setData(buffer);\n    return true;\n  }\n\n  getVertexOffset(row: number): number {\n    const {startIndices} = this;\n    const vertexIndex = startIndices ? startIndices[row] : row;\n    return vertexIndex * this.size;\n  }\n\n  getShaderAttributes(): Record<string, IShaderAttribute> {\n    const shaderAttributeDefs = this.settings.shaderAttributes || {[this.id]: null};\n    const shaderAttributes: Record<string, IShaderAttribute> = {};\n\n    for (const shaderAttributeName in shaderAttributeDefs) {\n      Object.assign(\n        shaderAttributes,\n        super.getShaderAttributes(shaderAttributeName, shaderAttributeDefs[shaderAttributeName])\n      );\n    }\n\n    return shaderAttributes;\n  }\n\n  /* eslint-disable max-depth, max-statements */\n  private _autoUpdater(\n    attribute: Attribute,\n    {\n      data,\n      startRow,\n      endRow,\n      props,\n      numInstances\n    }: {\n      data: any;\n      startRow: number;\n      endRow: number;\n      props: any;\n      numInstances: number;\n    }\n  ): void {\n    if (attribute.constant) {\n      return;\n    }\n    const {settings, state, value, size, startIndices} = attribute;\n\n    const {accessor, transform} = settings;\n    const accessorFunc: Accessor<any, any> =\n      state.binaryAccessor ||\n      // @ts-ignore\n      (typeof accessor === 'function' ? accessor : props[accessor]);\n\n    assert(typeof accessorFunc === 'function', `accessor \"${accessor}\" is not a function`);\n\n    let i = attribute.getVertexOffset(startRow);\n    const {iterable, objectInfo} = createIterable(data, startRow, endRow);\n    for (const object of iterable) {\n      objectInfo.index++;\n\n      let objectValue = accessorFunc(object, objectInfo);\n      if (transform) {\n        // transform callbacks could be bound to a particular layer instance.\n        // always point `this` to the current layer.\n        objectValue = transform.call(this, objectValue);\n      }\n\n      if (startIndices) {\n        const numVertices =\n          (objectInfo.index < startIndices.length - 1\n            ? startIndices[objectInfo.index + 1]\n            : numInstances) - startIndices[objectInfo.index];\n        if (objectValue && Array.isArray(objectValue[0])) {\n          let startIndex = i;\n          for (const item of objectValue) {\n            attribute._normalizeValue(item, value as TypedArray, startIndex);\n            startIndex += size;\n          }\n        } else if (objectValue && objectValue.length > size) {\n          (value as TypedArray).set(objectValue, i);\n        } else {\n          attribute._normalizeValue(objectValue, objectInfo.target, 0);\n          fillArray({\n            target: value,\n            source: objectInfo.target,\n            start: i,\n            count: numVertices\n          });\n        }\n        i += numVertices * size;\n      } else {\n        attribute._normalizeValue(objectValue, value as TypedArray, i);\n        i += size;\n      }\n    }\n  }\n  /* eslint-enable max-depth, max-statements */\n\n  // Validate deck.gl level fields\n  private _validateAttributeUpdaters() {\n    const {settings} = this;\n\n    // Check that 'update' is a valid function\n    const hasUpdater = settings.noAlloc || typeof settings.update === 'function';\n    if (!hasUpdater) {\n      throw new Error(`Attribute ${this.id} missing update or accessor`);\n    }\n  }\n\n  // check that the first few elements of the attribute are reasonable\n  /* eslint-disable no-fallthrough */\n  private _checkAttributeArray() {\n    const {value} = this;\n    const limit = Math.min(4, this.size);\n    if (value && value.length >= limit) {\n      let valid = true;\n      switch (limit) {\n        case 4:\n          valid = valid && Number.isFinite(value[3]);\n        case 3:\n          valid = valid && Number.isFinite(value[2]);\n        case 2:\n          valid = valid && Number.isFinite(value[1]);\n        case 1:\n          valid = valid && Number.isFinite(value[0]);\n          break;\n        default:\n          valid = false;\n      }\n\n      if (!valid) {\n        throw new Error(`Illegal attribute generated for ${this.id}`);\n      }\n    }\n  }\n  /* eslint-enable no-fallthrough */\n}\n"],"file":"attribute.js"}