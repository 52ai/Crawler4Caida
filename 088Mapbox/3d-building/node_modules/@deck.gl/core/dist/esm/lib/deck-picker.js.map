{"version":3,"sources":["../../../src/lib/deck-picker.ts"],"names":["Framebuffer","Texture2D","isWebGL2","readPixelsToArray","cssToDeviceRatio","cssToDevicePixels","PickLayersPass","getClosestObject","getUniqueObjects","processPickInfo","getLayerPickingInfo","getEmptyPickingInfo","DeckPicker","constructor","gl","pickLayersPass","lastPickedInfo","index","layerId","info","setProps","props","layerFilter","_pickable","finalize","pickingFBO","delete","depthFBO","color","pickObject","opts","_pickClosestObject","pickObjects","_pickVisibleObjects","getLastPickedObject","x","y","layers","viewports","lastPickedLayerId","layer","id","lastPickedViewportId","viewport","find","l","v","coordinate","unproject","_resizeBuffer","isSupported","colorBufferFloat","attach","format","type","resize","width","canvas","height","_getPickable","pickableLayers","filter","isPickable","isComposite","length","views","radius","depth","mode","unproject3D","onViewportActive","effects","pixelRatio","result","emptyInfo","devicePixelRange","devicePixel","Math","floor","deviceRadius","round","deviceRect","_getPickingRect","deviceX","deviceY","deviceWidth","deviceHeight","cullRect","infos","affectedLayers","Set","i","pickInfo","pickedResult","_drawAndSample","pass","pickedColor","pickedObjectIndex","z","pickedLayer","pickedResultPass2","pickedX","pickedY","pickedColors","add","disablePickingIndex","values","push","restorePickingColors","get","maxObjects","leftTop","deviceLeft","deviceTop","rightBottom","deviceRight","deviceBottom","pickInfos","uniqueInfos","Map","isMaxObjects","Number","isFinite","size","picked","has","object","set","Array","from","pickZ","decodePickingColor","render","Float32Array","Uint8Array","sourceX","sourceY","sourceWidth","sourceHeight","target","max","min"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {\n  Framebuffer,\n  Texture2D,\n  isWebGL2,\n  readPixelsToArray,\n  cssToDeviceRatio,\n  cssToDevicePixels\n} from '@luma.gl/core';\nimport GL from '@luma.gl/constants';\nimport PickLayersPass, {PickingColorDecoder} from '../passes/pick-layers-pass';\nimport {getClosestObject, getUniqueObjects, PickedPixel} from './picking/query-object';\nimport {\n  processPickInfo,\n  getLayerPickingInfo,\n  getEmptyPickingInfo,\n  PickingInfo\n} from './picking/pick-info';\n\nimport type {Framebuffer as LumaFramebuffer} from '@luma.gl/webgl';\nimport type {FilterContext, Rect} from '../passes/layers-pass';\nimport type Layer from './layer';\nimport type {Effect} from './effect';\nimport type View from '../views/view';\nimport type Viewport from '../viewports/viewport';\n\nexport type PickByPointOptions = {\n  x: number;\n  y: number;\n  radius?: number;\n  depth?: number;\n  mode?: string;\n  unproject3D?: boolean;\n};\n\nexport type PickByRectOptions = {\n  x: number;\n  y: number;\n  width?: number;\n  height?: number;\n  mode?: string;\n  maxObjects?: number | null;\n};\n\ntype PickOperationContext = {\n  layers: Layer[];\n  views: Record<string, View>;\n  viewports: Viewport[];\n  onViewportActive: (viewport: Viewport) => void;\n  effects: Effect[];\n};\n\n/** Manages picking in a Deck context */\nexport default class DeckPicker {\n  gl: WebGLRenderingContext;\n  pickingFBO?: LumaFramebuffer;\n  depthFBO?: LumaFramebuffer;\n  pickLayersPass: PickLayersPass;\n  layerFilter?: (context: FilterContext) => boolean;\n\n  /** Identifiers of the previously picked object, for callback tracking and auto highlight */\n  lastPickedInfo: {\n    index: number;\n    layerId: string | null;\n    info: PickingInfo | null;\n  };\n\n  _pickable: boolean = true;\n\n  constructor(gl: WebGLRenderingContext) {\n    this.gl = gl;\n    this.pickLayersPass = new PickLayersPass(gl);\n    this.lastPickedInfo = {\n      index: -1,\n      layerId: null,\n      info: null\n    };\n  }\n\n  setProps(props: any): void {\n    if ('layerFilter' in props) {\n      this.layerFilter = props.layerFilter;\n    }\n\n    if ('_pickable' in props) {\n      this._pickable = props._pickable;\n    }\n  }\n\n  finalize() {\n    if (this.pickingFBO) {\n      this.pickingFBO.delete();\n    }\n    if (this.depthFBO) {\n      this.depthFBO.color.delete();\n      this.depthFBO.delete();\n    }\n  }\n\n  /** Pick the closest info at given coordinate */\n  pickObject(opts: PickByPointOptions & PickOperationContext) {\n    return this._pickClosestObject(opts);\n  }\n\n  /** Get all unique infos within a bounding box */\n  pickObjects(opts: PickByRectOptions & PickOperationContext) {\n    return this._pickVisibleObjects(opts);\n  }\n\n  // Returns a new picking info object by assuming the last picked object is still picked\n  getLastPickedObject({x, y, layers, viewports}, lastPickedInfo = this.lastPickedInfo.info) {\n    const lastPickedLayerId = lastPickedInfo && lastPickedInfo.layer && lastPickedInfo.layer.id;\n    const lastPickedViewportId =\n      lastPickedInfo && lastPickedInfo.viewport && lastPickedInfo.viewport.id;\n    const layer = lastPickedLayerId ? layers.find(l => l.id === lastPickedLayerId) : null;\n    const viewport =\n      (lastPickedViewportId && viewports.find(v => v.id === lastPickedViewportId)) || viewports[0];\n    const coordinate = viewport && viewport.unproject([x - viewport.x, y - viewport.y]);\n\n    const info = {\n      x,\n      y,\n      viewport,\n      coordinate,\n      layer\n    };\n\n    return {...lastPickedInfo, ...info};\n  }\n\n  // Private\n\n  /** Ensures that picking framebuffer exists and matches the canvas size */\n  _resizeBuffer() {\n    const {gl} = this;\n\n    // Create a frame buffer if not already available\n    if (!this.pickingFBO) {\n      this.pickingFBO = new Framebuffer(gl);\n\n      if (Framebuffer.isSupported(gl, {colorBufferFloat: true})) {\n        const depthFBO = new Framebuffer(gl);\n        depthFBO.attach({\n          [GL.COLOR_ATTACHMENT0]: new Texture2D(gl, {\n            format: isWebGL2(gl) ? GL.RGBA32F : GL.RGBA,\n            type: GL.FLOAT\n          })\n        });\n        this.depthFBO = depthFBO;\n      }\n    }\n    // Resize it to current canvas size (this is a noop if size hasn't changed)\n    this.pickingFBO?.resize({width: gl.canvas.width, height: gl.canvas.height});\n    this.depthFBO?.resize({width: gl.canvas.width, height: gl.canvas.height});\n  }\n\n  /** Preliminary filtering of the layers list. Skid picking pass if no layer is pickable. */\n  _getPickable(layers: Layer[]): Layer[] | null {\n    if (this._pickable === false) {\n      return null;\n    }\n    const pickableLayers = layers.filter(layer => layer.isPickable() && !layer.isComposite);\n    return pickableLayers.length ? pickableLayers : null;\n  }\n\n  // eslint-disable-next-line max-statements,complexity\n  /** Pick the closest object at the given coordinate */\n  _pickClosestObject({\n    layers,\n    views,\n    viewports,\n    x,\n    y,\n    radius = 0,\n    depth = 1,\n    mode = 'query',\n    unproject3D,\n    onViewportActive,\n    effects\n  }: PickByPointOptions & PickOperationContext): {\n    result: PickingInfo[];\n    emptyInfo: PickingInfo;\n  } {\n    const pickableLayers = this._getPickable(layers);\n    const pixelRatio = cssToDeviceRatio(this.gl);\n\n    if (!pickableLayers) {\n      return {\n        result: [],\n        emptyInfo: getEmptyPickingInfo({viewports, x, y, pixelRatio})\n      };\n    }\n\n    this._resizeBuffer();\n\n    // Convert from canvas top-left to WebGL bottom-left coordinates\n    // Top-left coordinates [x, y] to bottom-left coordinates [deviceX, deviceY]\n    // And compensate for pixelRatio\n    const devicePixelRange = cssToDevicePixels(this.gl, [x, y], true);\n    const devicePixel = [\n      devicePixelRange.x + Math.floor(devicePixelRange.width / 2),\n      devicePixelRange.y + Math.floor(devicePixelRange.height / 2)\n    ];\n\n    const deviceRadius = Math.round(radius * pixelRatio);\n    const {width, height} = this.pickingFBO as LumaFramebuffer;\n    const deviceRect = this._getPickingRect({\n      deviceX: devicePixel[0],\n      deviceY: devicePixel[1],\n      deviceRadius,\n      deviceWidth: width,\n      deviceHeight: height\n    });\n\n    const cullRect: Rect = {\n      x: x - radius,\n      y: y - radius,\n      width: radius * 2 + 1,\n      height: radius * 2 + 1\n    };\n\n    let infos: Map<string | null, PickingInfo>;\n    const result: PickingInfo[] = [];\n    const affectedLayers = new Set<Layer>();\n\n    for (let i = 0; i < depth; i++) {\n      let pickInfo: PickedPixel;\n\n      if (deviceRect) {\n        const pickedResult = this._drawAndSample({\n          layers: pickableLayers,\n          views,\n          viewports,\n          onViewportActive,\n          deviceRect,\n          cullRect,\n          effects,\n          pass: `picking:${mode}`\n        });\n\n        pickInfo = getClosestObject({\n          ...pickedResult,\n          deviceX: devicePixel[0],\n          deviceY: devicePixel[1],\n          deviceRadius,\n          deviceRect\n        });\n      } else {\n        pickInfo = {\n          pickedColor: null,\n          pickedObjectIndex: -1\n        };\n      }\n\n      let z;\n      if (pickInfo.pickedLayer && unproject3D && this.depthFBO) {\n        const pickedResultPass2 = this._drawAndSample(\n          {\n            layers: [pickInfo.pickedLayer],\n            views,\n            viewports,\n            onViewportActive,\n            deviceRect: {\n              x: pickInfo.pickedX as number,\n              y: pickInfo.pickedY as number,\n              width: 1,\n              height: 1\n            },\n            cullRect,\n            effects,\n            pass: `picking:${mode}:z`\n          },\n          true\n        );\n        // picked value is in common space (pixels) from the camera target (viewport.position)\n        // convert it to meters from the ground\n        z = pickedResultPass2.pickedColors[0];\n      }\n\n      // Only exclude if we need to run picking again.\n      // We need to run picking again if an object is detected AND\n      // we have not exhausted the requested depth.\n      if (pickInfo.pickedLayer && i + 1 < depth) {\n        affectedLayers.add(pickInfo.pickedLayer);\n        pickInfo.pickedLayer.disablePickingIndex(pickInfo.pickedObjectIndex);\n      }\n\n      // This logic needs to run even if no object is picked.\n      infos = processPickInfo({\n        pickInfo,\n        lastPickedInfo: this.lastPickedInfo,\n        mode,\n        layers: pickableLayers,\n        viewports,\n        x,\n        y,\n        z,\n        pixelRatio\n      });\n\n      for (const info of infos.values()) {\n        if (info.layer) {\n          result.push(info);\n        }\n      }\n\n      // If no object is picked stop.\n      if (!pickInfo.pickedColor) {\n        break;\n      }\n    }\n\n    // reset only affected buffers\n    for (const layer of affectedLayers) {\n      layer.restorePickingColors();\n    }\n\n    return {result, emptyInfo: infos!.get(null) as PickingInfo};\n  }\n\n  /** Pick all objects within the given bounding box */\n  _pickVisibleObjects({\n    layers,\n    views,\n    viewports,\n    x,\n    y,\n    width = 1,\n    height = 1,\n    mode = 'query',\n    maxObjects = null,\n    onViewportActive,\n    effects\n  }: PickByRectOptions & PickOperationContext): PickingInfo[] {\n    const pickableLayers = this._getPickable(layers);\n\n    if (!pickableLayers) {\n      return [];\n    }\n\n    this._resizeBuffer();\n    // Convert from canvas top-left to WebGL bottom-left coordinates\n    // And compensate for pixelRatio\n    const pixelRatio = cssToDeviceRatio(this.gl);\n    const leftTop = cssToDevicePixels(this.gl, [x, y], true);\n\n    // take left and top (y inverted in device pixels) from start location\n    const deviceLeft = leftTop.x;\n    const deviceTop = leftTop.y + leftTop.height;\n\n    // take right and bottom (y inverted in device pixels) from end location\n    const rightBottom = cssToDevicePixels(this.gl, [x + width, y + height], true);\n    const deviceRight = rightBottom.x + rightBottom.width;\n    const deviceBottom = rightBottom.y;\n\n    const deviceRect = {\n      x: deviceLeft,\n      y: deviceBottom,\n      // deviceTop and deviceRight represent the first pixel outside the desired rect\n      width: deviceRight - deviceLeft,\n      height: deviceTop - deviceBottom\n    };\n\n    const pickedResult = this._drawAndSample({\n      layers: pickableLayers,\n      views,\n      viewports,\n      onViewportActive,\n      deviceRect,\n      cullRect: {x, y, width, height},\n      effects,\n      pass: `picking:${mode}`\n    });\n\n    const pickInfos = getUniqueObjects(pickedResult);\n\n    // Only return unique infos, identified by info.object\n    const uniqueInfos = new Map();\n\n    const isMaxObjects = Number.isFinite(maxObjects);\n\n    for (let i = 0; i < pickInfos.length; i++) {\n      if (isMaxObjects && maxObjects && uniqueInfos.size >= maxObjects) {\n        break;\n      }\n      const pickInfo = pickInfos[i];\n      let info: PickingInfo = {\n        color: pickInfo.pickedColor,\n        layer: null,\n        index: pickInfo.pickedObjectIndex,\n        picked: true,\n        x,\n        y,\n        pixelRatio\n      };\n\n      info = getLayerPickingInfo({layer: pickInfo.pickedLayer as Layer, info, mode});\n      if (!uniqueInfos.has(info.object)) {\n        uniqueInfos.set(info.object, info);\n      }\n    }\n\n    return Array.from(uniqueInfos.values());\n  }\n\n  /** Renders layers into the picking buffer with picking colors and read the pixels. */\n  _drawAndSample(params: {\n    deviceRect: Rect;\n    pass: string;\n    layers: Layer[];\n    views: Record<string, View>;\n    viewports: Viewport[];\n    onViewportActive: (viewport: Viewport) => void;\n    cullRect?: Rect;\n    effects: Effect[];\n  }): {\n    pickedColors: Uint8Array;\n    decodePickingColor: PickingColorDecoder;\n  };\n\n  /** Renders layers into the picking buffer with encoded z values and read the pixels. */\n  _drawAndSample(\n    params: {\n      deviceRect: Rect;\n      pass: string;\n      layers: Layer[];\n      views: Record<string, View>;\n      viewports: Viewport[];\n      onViewportActive: (viewport: Viewport) => void;\n      cullRect?: Rect;\n      effects: Effect[];\n    },\n    pickZ: true\n  ): {\n    pickedColors: Float32Array;\n    decodePickingColor: null;\n  };\n\n  _drawAndSample(\n    {\n      layers,\n      views,\n      viewports,\n      onViewportActive,\n      deviceRect,\n      cullRect,\n      effects,\n      pass\n    }: {\n      deviceRect: Rect;\n      pass: string;\n      layers: Layer[];\n      views: Record<string, View>;\n      viewports: Viewport[];\n      onViewportActive: (viewport: Viewport) => void;\n      cullRect?: Rect;\n      effects: Effect[];\n    },\n    pickZ: boolean = false\n  ): {\n    pickedColors: Uint8Array | Float32Array;\n    decodePickingColor: PickingColorDecoder | null;\n  } {\n    const pickingFBO = pickZ ? this.depthFBO : this.pickingFBO;\n\n    const {decodePickingColor} = this.pickLayersPass.render({\n      layers,\n      layerFilter: this.layerFilter,\n      views,\n      viewports,\n      onViewportActive,\n      pickingFBO,\n      deviceRect,\n      cullRect,\n      effects,\n      pass,\n      pickZ\n    });\n\n    // Read from an already rendered picking buffer\n    // Returns an Uint8ClampedArray of picked pixels\n    const {x, y, width, height} = deviceRect;\n    const pickedColors = new (pickZ ? Float32Array : Uint8Array)(width * height * 4);\n    readPixelsToArray(pickingFBO, {\n      sourceX: x,\n      sourceY: y,\n      sourceWidth: width,\n      sourceHeight: height,\n      target: pickedColors\n    });\n\n    return {pickedColors, decodePickingColor};\n  }\n\n  // Calculate a picking rect centered on deviceX and deviceY and clipped to device\n  // Returns null if pixel is outside of device\n  _getPickingRect({\n    deviceX,\n    deviceY,\n    deviceRadius,\n    deviceWidth,\n    deviceHeight\n  }: {\n    deviceX: number;\n    deviceY: number;\n    deviceRadius: number;\n    deviceWidth: number;\n    deviceHeight: number;\n  }): Rect | null {\n    // Create a box of size `radius * 2 + 1` centered at [deviceX, deviceY]\n    const x = Math.max(0, deviceX - deviceRadius);\n    const y = Math.max(0, deviceY - deviceRadius);\n    const width = Math.min(deviceWidth, deviceX + deviceRadius + 1) - x;\n    const height = Math.min(deviceHeight, deviceY + deviceRadius + 1) - y;\n\n    // x, y out of bounds.\n    if (width <= 0 || height <= 0) {\n      return null;\n    }\n\n    return {x, y, width, height};\n  }\n}\n"],"file":"deck-picker.js"}