import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import ComponentState from '../lifecycle/component-state';
export default class LayerState extends ComponentState {
  constructor({
    attributeManager,
    layer
  }) {
    super(layer);

    _defineProperty(this, "attributeManager", void 0);

    _defineProperty(this, "needsRedraw", void 0);

    _defineProperty(this, "needsUpdate", void 0);

    _defineProperty(this, "subLayers", void 0);

    _defineProperty(this, "usesPickingColorCache", void 0);

    _defineProperty(this, "changeFlags", void 0);

    _defineProperty(this, "viewport", void 0);

    _defineProperty(this, "uniformTransitions", void 0);

    _defineProperty(this, "propsInTransition", void 0);

    this.attributeManager = attributeManager;
    this.needsRedraw = true;
    this.needsUpdate = true;
    this.subLayers = null;
    this.usesPickingColorCache = false;
  }

  get layer() {
    return this.component;
  }

  set layer(layer) {
    this.component = layer;
  }

  _fetch(propName, url) {
    const fetch = this.component.props.fetch;

    if (fetch) {
      return fetch(url, {
        propName,
        layer: this.layer
      });
    }

    return super._fetch(propName, url);
  }

  _onResolve(propName, value) {
    const onDataLoad = this.component.props.onDataLoad;

    if (propName === 'data' && onDataLoad) {
      onDataLoad(value, {
        propName,
        layer: this.layer
      });
    }
  }

  _onError(propName, error) {
    this.layer.raiseError(error, "loading ".concat(propName, " of ").concat(this.layer));
  }

}
//# sourceMappingURL=layer-state.js.map