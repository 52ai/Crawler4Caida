{"version":3,"sources":["../../../src/utils/typed-array-manager.ts"],"names":["TypedArrayManager","constructor","options","overAlloc","poolSize","setOptions","Object","assign","opts","allocate","typedArray","count","size","type","padding","copy","initialize","maxCount","Type","Float32Array","newSize","ArrayBuffer","isView","length","BYTES_PER_ELEMENT","buffer","byteLength","maxSize","Infinity","newArray","_allocate","set","fill","_release","release","sizeToAllocate","Math","max","ceil","pool","_pool","i","findIndex","b","array","splice","push","shift"],"mappings":"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","sourcesContent":["import {TypedArray, TypedArrayConstructor} from '../types/types';\n\nexport type TypedArrayManagerOptions = {\n  overAlloc?: number;\n  poolSize?: number;\n};\n\nexport class TypedArrayManager {\n  private _pool: ArrayBuffer[] = [];\n  opts: {\n    overAlloc: number;\n    poolSize: number;\n  } = {overAlloc: 2, poolSize: 100};\n\n  constructor(options: TypedArrayManagerOptions = {}) {\n    this.setOptions(options);\n  }\n\n  setOptions(options: TypedArrayManagerOptions) {\n    Object.assign(this.opts, options);\n  }\n\n  allocate<T extends TypedArray>(\n    typedArray: T | null | undefined,\n    count: number,\n    {\n      size = 1,\n      type,\n      padding = 0,\n      copy = false,\n      initialize = false,\n      maxCount\n    }: {\n      size?: number;\n      type?: TypedArrayConstructor;\n      padding?: number;\n      copy?: boolean;\n      initialize?: boolean;\n      maxCount?: number;\n    }\n  ): T {\n    const Type =\n      type || (typedArray && (typedArray.constructor as TypedArrayConstructor)) || Float32Array;\n\n    const newSize = count * size + padding;\n    if (ArrayBuffer.isView(typedArray)) {\n      if (newSize <= typedArray.length) {\n        return typedArray;\n      }\n      if (newSize * typedArray.BYTES_PER_ELEMENT <= typedArray.buffer.byteLength) {\n        return new Type(typedArray.buffer, 0, newSize) as T;\n      }\n    }\n\n    let maxSize: number = Infinity;\n    if (maxCount) {\n      maxSize = maxCount * size + padding;\n    }\n\n    const newArray = this._allocate(Type, newSize, initialize, maxSize);\n\n    if (typedArray && copy) {\n      newArray.set(typedArray);\n    } else if (!initialize) {\n      // Hack - always initialize the first 4 elements. NaNs crash the Attribute validation\n      newArray.fill(0, 0, 4);\n    }\n\n    this._release(typedArray);\n    return newArray as T;\n  }\n\n  release(typedArray: TypedArray | null | undefined) {\n    this._release(typedArray);\n  }\n\n  private _allocate(\n    Type: TypedArrayConstructor,\n    size: number,\n    initialize: boolean,\n    maxSize: number\n  ): TypedArray {\n    // Allocate at least one element to ensure a valid buffer\n    let sizeToAllocate = Math.max(Math.ceil(size * this.opts.overAlloc), 1);\n    // Don't over allocate after certain specified number of elements\n    if (sizeToAllocate > maxSize) {\n      sizeToAllocate = maxSize;\n    }\n\n    // Check if available in pool\n    const pool = this._pool;\n    const byteLength = Type.BYTES_PER_ELEMENT * sizeToAllocate;\n    const i = pool.findIndex(b => b.byteLength >= byteLength);\n    if (i >= 0) {\n      // Create a new array using an existing buffer\n      const array = new Type(pool.splice(i, 1)[0], 0, sizeToAllocate);\n      if (initialize) {\n        // Viewing a buffer with a different type may create NaNs\n        array.fill(0);\n      }\n      return array;\n    }\n    return new Type(sizeToAllocate);\n  }\n\n  private _release(typedArray: TypedArray | null | undefined): void {\n    if (!ArrayBuffer.isView(typedArray)) {\n      return;\n    }\n    const pool = this._pool;\n    const {buffer} = typedArray;\n    // Save the buffer of the released array into the pool\n    // Sort buffers by size\n    // TODO - implement binary search?\n    const {byteLength} = buffer;\n    const i = pool.findIndex(b => b.byteLength >= byteLength);\n    if (i < 0) {\n      pool.push(buffer);\n    } else if (i > 0 || pool.length < this.opts.poolSize) {\n      pool.splice(i, 0, buffer);\n    }\n    if (pool.length > this.opts.poolSize) {\n      // Drop the smallest one\n      pool.shift();\n    }\n  }\n}\n\nexport default new TypedArrayManager();\n"],"file":"typed-array-manager.js"}