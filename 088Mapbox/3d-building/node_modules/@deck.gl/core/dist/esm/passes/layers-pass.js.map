{"version":3,"sources":["../../../src/passes/layers-pass.ts"],"names":["Pass","clear","setParameters","withParameters","cssToDeviceRatio","LayersPass","render","options","gl","framebuffer","target","_drawLayers","moduleParameters","viewports","views","onViewportActive","clearStack","clearCanvas","pass","clearGLCanvas","_lastRenderIndex","renderStats","viewport","view","id","drawLayerParams","_getDrawLayerParams","subViewports","subViewport","stats","_drawLayersInViewport","layers","push","layerFilter","cullRect","effects","indexResolver","layerIndexResolver","drawContext","layer","isPicking","startsWith","renderPass","layerFilterCache","layerIndex","length","shouldDrawLayer","_shouldDrawLayer","layerParam","layerRenderIndex","_getModuleParameters","layerParameters","getLayerParameters","globalModuleParameters","glViewport","getGLViewport","props","clearOpts","color","depth","scissorTest","scissor","renderStatus","totalCount","visibleCount","compositeCount","pickableCount","pickable","isComposite","Math","max","_drawLayer","uniforms","parameters","err","raiseError","getModuleParameters","visible","parent","filterSubLayer","rootLayerId","activateViewport","overrides","Object","assign","create","internalState","propsInTransition","autoWrapLongitude","wrapLongitude","context","mousePosition","pickingActive","devicePixelRatio","effect","startIndex","layerIndices","resolvers","resolveLayerIndex","isDrawn","indexOverride","_offset","layerId","parentId","index","resolver","Number","isFinite","useTarget","pixelRatio","height","drawingBufferHeight","dimensions","x","y","width","drawingBufferWidth"],"mappings":"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","sourcesContent":["import GL from '@luma.gl/constants';\nimport Pass from './pass';\nimport {clear, setParameters, withParameters, cssToDeviceRatio} from '@luma.gl/core';\n\nimport type {Framebuffer} from '@luma.gl/core';\nimport type Viewport from '../viewports/viewport';\nimport type View from '../views/view';\nimport type Layer from '../lib/layer';\nimport type {Effect} from '../lib/effect';\n\nexport type Rect = {x: number; y: number; width: number; height: number};\n\nexport type LayersPassRenderOptions = {\n  target?: Framebuffer;\n  pass: string;\n  layers: Layer[];\n  viewports: Viewport[];\n  onViewportActive: (viewport: Viewport) => void;\n  cullRect?: Rect;\n  views?: Record<string, View>;\n  effects?: Effect[];\n  /** If true, recalculates render index (z) from 0. Set to false if a stack of layers are rendered in multiple passes. */\n  clearStack?: boolean;\n  clearCanvas?: boolean;\n  layerFilter?: (context: FilterContext) => boolean;\n  moduleParameters?: any;\n};\n\ntype DrawLayerParameters = {\n  shouldDrawLayer: boolean;\n  layerRenderIndex?: number;\n  moduleParameters?: any;\n  layerParameters?: any;\n};\n\nexport type FilterContext = {\n  layer: Layer;\n  viewport: Viewport;\n  isPicking: boolean;\n  renderPass: string;\n  cullRect?: Rect;\n};\n\nexport type RenderStats = {\n  totalCount: number;\n  visibleCount: number;\n  compositeCount: number;\n  pickableCount: number;\n};\n\nexport default class LayersPass extends Pass {\n  _lastRenderIndex: number = -1;\n\n  render(options: LayersPassRenderOptions): any {\n    const gl = this.gl;\n\n    setParameters(gl, {framebuffer: options.target});\n    return this._drawLayers(options);\n  }\n\n  // Draw a list of layers in a list of viewports\n  private _drawLayers(options: LayersPassRenderOptions) {\n    const {\n      target,\n      moduleParameters,\n      viewports,\n      views,\n      onViewportActive,\n      clearStack = true,\n      clearCanvas = true\n    } = options;\n    options.pass = options.pass || 'unknown';\n\n    const gl = this.gl;\n    if (clearCanvas) {\n      clearGLCanvas(gl);\n    }\n\n    if (clearStack) {\n      this._lastRenderIndex = -1;\n    }\n\n    const renderStats: RenderStats[] = [];\n\n    for (const viewport of viewports) {\n      const view = views && views[viewport.id];\n\n      // Update context to point to this viewport\n      onViewportActive(viewport);\n\n      const drawLayerParams = this._getDrawLayerParams(viewport, options);\n\n      // render this viewport\n      // @ts-expect-error\n      const subViewports = viewport.subViewports || [viewport];\n      for (const subViewport of subViewports) {\n        const stats = this._drawLayersInViewport(\n          gl,\n          {\n            target,\n            moduleParameters,\n            viewport: subViewport,\n            view,\n            pass: options.pass,\n            layers: options.layers\n          },\n          drawLayerParams\n        );\n        renderStats.push(stats);\n      }\n    }\n    return renderStats;\n  }\n\n  // Resolve the parameters needed to draw each layer\n  // When a viewport contains multiple subviewports (e.g. repeated web mercator map),\n  // this is only done once for the parent viewport\n  private _getDrawLayerParams(\n    viewport: Viewport,\n    {layers, pass, layerFilter, cullRect, effects, moduleParameters}: LayersPassRenderOptions\n  ): DrawLayerParameters[] {\n    const drawLayerParams: DrawLayerParameters[] = [];\n    const indexResolver = layerIndexResolver(this._lastRenderIndex + 1);\n    const drawContext: FilterContext = {\n      layer: layers[0],\n      viewport,\n      isPicking: pass.startsWith('picking'),\n      renderPass: pass,\n      cullRect\n    };\n    const layerFilterCache = {};\n    for (let layerIndex = 0; layerIndex < layers.length; layerIndex++) {\n      const layer = layers[layerIndex];\n      // Check if we should draw layer\n      const shouldDrawLayer = this._shouldDrawLayer(\n        layer,\n        drawContext,\n        layerFilter,\n        layerFilterCache\n      );\n\n      const layerParam: DrawLayerParameters = {\n        shouldDrawLayer\n      };\n\n      if (shouldDrawLayer) {\n        // This is the \"logical\" index for ordering this layer in the stack\n        // used to calculate polygon offsets\n        // It can be the same as another layer\n        layerParam.layerRenderIndex = indexResolver(layer, shouldDrawLayer);\n\n        layerParam.moduleParameters = this._getModuleParameters(\n          layer,\n          effects,\n          pass,\n          moduleParameters\n        );\n        layerParam.layerParameters = this.getLayerParameters(layer, layerIndex, viewport);\n      }\n      drawLayerParams[layerIndex] = layerParam;\n    }\n    return drawLayerParams;\n  }\n\n  // Draws a list of layers in one viewport\n  // TODO - when picking we could completely skip rendering viewports that dont\n  // intersect with the picking rect\n  /* eslint-disable max-depth, max-statements */\n  private _drawLayersInViewport(\n    gl,\n    {layers, moduleParameters: globalModuleParameters, pass, target, viewport, view},\n    drawLayerParams\n  ): RenderStats {\n    const glViewport = getGLViewport(gl, {\n      moduleParameters: globalModuleParameters,\n      target,\n      viewport\n    });\n\n    if (view && view.props.clear) {\n      const clearOpts = view.props.clear === true ? {color: true, depth: true} : view.props.clear;\n      withParameters(\n        gl,\n        {\n          scissorTest: true,\n          scissor: glViewport\n        },\n        () => clear(gl, clearOpts)\n      );\n    }\n\n    // render layers in normal colors\n    const renderStatus = {\n      totalCount: layers.length,\n      visibleCount: 0,\n      compositeCount: 0,\n      pickableCount: 0\n    };\n\n    setParameters(gl, {viewport: glViewport});\n\n    // render layers in normal colors\n    for (let layerIndex = 0; layerIndex < layers.length; layerIndex++) {\n      const layer = layers[layerIndex];\n      const {shouldDrawLayer, layerRenderIndex, moduleParameters, layerParameters} =\n        drawLayerParams[layerIndex];\n\n      // Calculate stats\n      if (shouldDrawLayer && layer.props.pickable) {\n        renderStatus.pickableCount++;\n      }\n      if (layer.isComposite) {\n        renderStatus.compositeCount++;\n      } else if (shouldDrawLayer) {\n        // Draw the layer\n        renderStatus.visibleCount++;\n\n        this._lastRenderIndex = Math.max(this._lastRenderIndex, layerRenderIndex);\n\n        // overwrite layer.context.viewport with the sub viewport\n        moduleParameters.viewport = viewport;\n\n        try {\n          layer._drawLayer({\n            moduleParameters,\n            uniforms: {layerIndex: layerRenderIndex},\n            parameters: layerParameters\n          });\n        } catch (err) {\n          layer.raiseError(err, `drawing ${layer} to ${pass}`);\n        }\n      }\n    }\n\n    return renderStatus;\n  }\n  /* eslint-enable max-depth, max-statements */\n\n  /* Methods for subclass overrides */\n  protected shouldDrawLayer(layer: Layer): boolean {\n    return true;\n  }\n\n  protected getModuleParameters(layer: Layer, effects?: Effect[]): any {\n    return null;\n  }\n\n  protected getLayerParameters(layer: Layer, layerIndex: number, viewport: Viewport): any {\n    return layer.props.parameters;\n  }\n\n  /* Private */\n  private _shouldDrawLayer(\n    layer: Layer,\n    drawContext: FilterContext,\n    layerFilter: ((params: FilterContext) => boolean) | undefined,\n    layerFilterCache: Record<string, boolean>\n  ) {\n    const shouldDrawLayer = layer.props.visible && this.shouldDrawLayer(layer);\n\n    if (!shouldDrawLayer) {\n      return false;\n    }\n\n    drawContext.layer = layer;\n\n    let parent = layer.parent as Layer;\n    while (parent) {\n      // @ts-ignore\n      if (!parent.props.visible || !parent.filterSubLayer(drawContext)) {\n        return false;\n      }\n      drawContext.layer = parent;\n      parent = parent.parent as Layer;\n    }\n\n    if (layerFilter) {\n      const rootLayerId = drawContext.layer.id;\n      if (!(rootLayerId in layerFilterCache)) {\n        layerFilterCache[rootLayerId] = layerFilter(drawContext);\n      }\n      if (!layerFilterCache[rootLayerId]) {\n        return false;\n      }\n    }\n\n    // If a layer is drawn, update its viewportChanged flag\n    layer.activateViewport(drawContext.viewport);\n\n    return true;\n  }\n\n  private _getModuleParameters(\n    layer: Layer,\n    effects: Effect[] | undefined,\n    pass: string,\n    overrides: any\n  ): any {\n    const moduleParameters = Object.assign(\n      Object.create(layer.internalState?.propsInTransition || layer.props),\n      {\n        autoWrapLongitude: layer.wrapLongitude,\n        // @ts-ignore\n        viewport: layer.context.viewport,\n        // @ts-ignore\n        mousePosition: layer.context.mousePosition,\n        pickingActive: 0,\n        devicePixelRatio: cssToDeviceRatio(this.gl)\n      }\n    );\n\n    if (effects) {\n      for (const effect of effects) {\n        Object.assign(moduleParameters, effect.getModuleParameters?.(layer));\n      }\n    }\n\n    return Object.assign(moduleParameters, this.getModuleParameters(layer, effects), overrides);\n  }\n}\n\n// If the _index prop is defined, return a layer index that's relative to its parent\n// Otherwise return the index of the layer among all rendered layers\n// This is done recursively, i.e. if the user overrides a layer's default index,\n// all its descendants will be resolved relative to that index.\n// This implementation assumes that parent layers always appear before its children\n// which is true if the layer array comes from the LayerManager\nexport function layerIndexResolver(\n  startIndex: number = 0,\n  layerIndices: Record<string, number> = {}\n): (layer: Layer, isDrawn: boolean) => number {\n  const resolvers = {};\n\n  const resolveLayerIndex = (layer, isDrawn) => {\n    const indexOverride = layer.props._offset;\n    const layerId = layer.id;\n    const parentId = layer.parent && layer.parent.id;\n\n    let index;\n\n    if (parentId && !(parentId in layerIndices)) {\n      // Populate layerIndices with the parent layer's index\n      resolveLayerIndex(layer.parent, false);\n    }\n\n    if (parentId in resolvers) {\n      const resolver = (resolvers[parentId] =\n        resolvers[parentId] || layerIndexResolver(layerIndices[parentId], layerIndices));\n      index = resolver(layer, isDrawn);\n      resolvers[layerId] = resolver;\n    } else if (Number.isFinite(indexOverride)) {\n      index = indexOverride + (layerIndices[parentId] || 0);\n      // Mark layer as needing its own resolver\n      // We don't actually create it until it's used for the first time\n      resolvers[layerId] = null;\n    } else {\n      index = startIndex;\n    }\n\n    if (isDrawn && index >= startIndex) {\n      startIndex = index + 1;\n    }\n\n    layerIndices[layerId] = index;\n    return index;\n  };\n  return resolveLayerIndex;\n}\n\n// Convert viewport top-left CSS coordinates to bottom up WebGL coordinates\nfunction getGLViewport(\n  gl,\n  {\n    moduleParameters,\n    target,\n    viewport\n  }: {\n    moduleParameters: any;\n    target?: Framebuffer;\n    viewport: Viewport;\n  }\n): [number, number, number, number] {\n  const useTarget = target && target.id !== 'default-framebuffer';\n  const pixelRatio =\n    (moduleParameters && moduleParameters.devicePixelRatio) || cssToDeviceRatio(gl);\n\n  // Default framebuffer is used when writing to canvas\n  const height = useTarget ? target.height : gl.drawingBufferHeight;\n\n  // Convert viewport top-left CSS coordinates to bottom up WebGL coordinates\n  const dimensions = viewport;\n  return [\n    dimensions.x * pixelRatio,\n    height - (dimensions.y + dimensions.height) * pixelRatio,\n    dimensions.width * pixelRatio,\n    dimensions.height * pixelRatio\n  ];\n}\n\nfunction clearGLCanvas(gl: WebGLRenderingContext) {\n  const width = gl.drawingBufferWidth;\n  const height = gl.drawingBufferHeight;\n  // clear depth and color buffers, restoring transparency\n  setParameters(gl, {viewport: [0, 0, width, height]});\n  gl.clear(GL.COLOR_BUFFER_BIT | GL.DEPTH_BUFFER_BIT);\n}\n"],"file":"layers-pass.js"}