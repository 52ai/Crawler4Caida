{"version":3,"sources":["../../../src/passes/pick-layers-pass.ts"],"names":["LayersPass","withParameters","OPERATION","log","PICKING_PARAMETERS","blendFunc","blendEquation","PickLayersPass","render","props","pickingFBO","_drawPickingBuffer","layers","layerFilter","views","viewports","onViewportActive","deviceRect","x","y","width","height","cullRect","effects","pass","pickZ","gl","encodedColors","byLayer","Map","byAlpha","_colors","renderStatus","scissorTest","scissor","clearColor","depthMask","depthTest","depthRange","colorMask","blend","target","filter","e","useInPicking","decodePickingColor","decodeColor","bind","stats","shouldDrawLayer","layer","pickable","operation","DRAW","getModuleParameters","pickingActive","pickingAttribute","lightSources","getLayerParameters","layerIndex","viewport","pickParameters","parameters","Object","assign","blendColor","encodeColor","encoded","a","entry","get","push","size","set","warn","pickedColor","pickedLayer","pickedViewports","pickedObjectIndex"],"mappings":"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","sourcesContent":["import LayersPass, {LayersPassRenderOptions, RenderStats, Rect} from './layers-pass';\nimport {withParameters} from '@luma.gl/core';\nimport GL from '@luma.gl/constants';\nimport {OPERATION} from '../lib/constants';\nimport log from '../utils/log';\n\nimport type {Framebuffer} from '@luma.gl/core';\nimport type Viewport from '../viewports/viewport';\nimport type Layer from '../lib/layer';\n\nconst PICKING_PARAMETERS = {\n  blendFunc: [GL.ONE, GL.ZERO, GL.CONSTANT_ALPHA, GL.ZERO],\n  blendEquation: GL.FUNC_ADD\n};\n\ntype PickLayersPassRenderOptions = LayersPassRenderOptions & {\n  pickingFBO: Framebuffer;\n  deviceRect: Rect;\n  pickZ: boolean;\n};\n\ntype EncodedPickingColors = {\n  a: number;\n  layer: Layer;\n  viewports: Viewport[];\n};\n\nexport type PickingColorDecoder = (pickedColor: number[] | Uint8Array) =>\n  | {\n      pickedLayer: Layer;\n      pickedViewports: Viewport[];\n      pickedObjectIndex: number;\n    }\n  | undefined;\n\nexport default class PickLayersPass extends LayersPass {\n  private pickZ?: boolean;\n  private _colors: {\n    byLayer: Map<Layer, EncodedPickingColors>;\n    byAlpha: EncodedPickingColors[];\n  } | null = null;\n\n  render(props: PickLayersPassRenderOptions) {\n    if (props.pickingFBO) {\n      // When drawing into an off-screen buffer, use the alpha channel to encode layer index\n      return this._drawPickingBuffer(props);\n    }\n    // When drawing to screen (debug mode), do not use the alpha channel so that result is always visible\n    return super.render(props);\n  }\n\n  // Private\n  // Draws list of layers and viewports into the picking buffer\n  // Note: does not sample the buffer, that has to be done by the caller\n  _drawPickingBuffer({\n    layers,\n    layerFilter,\n    views,\n    viewports,\n    onViewportActive,\n    pickingFBO,\n    deviceRect: {x, y, width, height},\n    cullRect,\n    effects,\n    pass = 'picking',\n    pickZ\n  }: PickLayersPassRenderOptions): {\n    decodePickingColor: PickingColorDecoder | null;\n    stats: RenderStats;\n  } {\n    const gl = this.gl;\n    this.pickZ = pickZ;\n\n    // Track encoded layer indices\n    const encodedColors = pickZ\n      ? null\n      : {\n          byLayer: new Map(),\n          byAlpha: []\n        };\n    // Temporarily store it on the instance so that it can be accessed by this.getLayerParameters\n    this._colors = encodedColors;\n\n    // Make sure we clear scissor test and fbo bindings in case of exceptions\n    // We are only interested in one pixel, no need to render anything else\n    // Note that the callback here is called synchronously.\n    // Set blend mode for picking\n    // always overwrite existing pixel with [r,g,b,layerIndex]\n    const renderStatus = withParameters(\n      gl,\n      {\n        scissorTest: true,\n        scissor: [x, y, width, height],\n        clearColor: [0, 0, 0, 0],\n        // When used as Mapbox custom layer, the context state may be dirty\n        // TODO - Remove when mapbox fixes this issue\n        // https://github.com/mapbox/mapbox-gl-js/issues/7801\n        depthMask: true,\n        depthTest: true,\n        depthRange: [0, 1],\n        colorMask: [true, true, true, true],\n        // Blending\n        ...PICKING_PARAMETERS,\n        blend: !pickZ\n      },\n      () =>\n        super.render({\n          target: pickingFBO,\n          layers,\n          layerFilter,\n          views,\n          viewports,\n          onViewportActive,\n          cullRect,\n          effects: effects?.filter(e => e.useInPicking),\n          pass\n        })\n    );\n\n    // Clear the temp field\n    this._colors = null;\n    const decodePickingColor = encodedColors && decodeColor.bind(null, encodedColors);\n    return {decodePickingColor, stats: renderStatus};\n  }\n\n  protected shouldDrawLayer(layer: Layer): boolean {\n    return layer.props.pickable && layer.props.operation === OPERATION.DRAW;\n  }\n\n  protected getModuleParameters() {\n    return {\n      pickingActive: 1,\n      pickingAttribute: this.pickZ,\n      // turn off lighting by adding empty light source object\n      // lights shader module relies on the `lightSources` to turn on/off lighting\n      lightSources: {}\n    };\n  }\n\n  protected getLayerParameters(layer: Layer, layerIndex: number, viewport: Viewport): any {\n    const pickParameters = {...layer.props.parameters};\n\n    if (!this._colors) {\n      pickParameters.blend = false;\n    } else {\n      Object.assign(pickParameters, PICKING_PARAMETERS);\n      pickParameters.blend = true;\n      pickParameters.blendColor = encodeColor(this._colors, layer, viewport);\n    }\n\n    return pickParameters;\n  }\n}\n\n// Assign an unique alpha value for each pickable layer and track the encoding in the cache object\n// Returns normalized blend color\nfunction encodeColor(\n  encoded: {\n    byLayer: Map<Layer, EncodedPickingColors>;\n    byAlpha: EncodedPickingColors[];\n  },\n  layer: Layer,\n  viewport: Viewport\n): number[] {\n  const {byLayer, byAlpha} = encoded;\n  let a;\n\n  // Encode layerIndex in the alpha channel\n  // TODO - combine small layers to better utilize the picking color space\n  let entry = byLayer.get(layer);\n  if (entry) {\n    entry.viewports.push(viewport);\n    a = entry.a;\n  } else {\n    a = byLayer.size + 1;\n    if (a <= 255) {\n      entry = {a, layer, viewports: [viewport]};\n      byLayer.set(layer, entry);\n      byAlpha[a] = entry;\n    } else {\n      log.warn('Too many pickable layers, only picking the first 255')();\n      a = 0;\n    }\n  }\n  return [0, 0, 0, a / 255];\n}\n\n// Given a picked color, retrieve the corresponding layer and viewports from cache\nfunction decodeColor(\n  encoded: {\n    byLayer: Map<Layer, EncodedPickingColors>;\n    byAlpha: EncodedPickingColors[];\n  },\n  pickedColor: number[] | Uint8Array\n):\n  | {\n      pickedLayer: Layer;\n      pickedViewports: Viewport[];\n      pickedObjectIndex: number;\n    }\n  | undefined {\n  const entry = encoded.byAlpha[pickedColor[3]];\n  return (\n    entry && {\n      pickedLayer: entry.layer,\n      pickedViewports: entry.viewports,\n      pickedObjectIndex: entry.layer.decodePickingColor(pickedColor)\n    }\n  );\n}\n"],"file":"pick-layers-pass.js"}