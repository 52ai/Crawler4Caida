{"version":3,"sources":["../../../../src/effects/mask/utils.ts"],"names":["OrthographicView","WebMercatorViewport","fitBounds","getMaskBounds","layers","viewport","bounds","layer","subLayerBounds","getBounds","Math","min","max","viewportBounds","paddedBounds","_doubleBounds","getMaskViewport","width","height","padding","longitude","latitude","zoom","maxZoom","x","y","center","scale","makeViewport","viewState","target","log2","size"],"mappings":"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","sourcesContent":["import OrthographicView from '../../views/orthographic-view';\nimport WebMercatorViewport from '../../viewports/web-mercator-viewport';\nimport {fitBounds} from '@math.gl/web-mercator';\n\nimport type Layer from '../../lib/layer';\nimport type Viewport from '../../viewports/viewport';\n\nexport type MaskBounds = [number, number, number, number];\n\n/*\n * Compute the bounds of the mask in world space, such that it covers an\n * area currently visible (extended by a buffer) or the area of the masking\n * data, whichever is smaller\n */\nexport function getMaskBounds({\n  layers,\n  viewport\n}: {\n  layers: Layer[];\n  viewport: Viewport;\n}): MaskBounds {\n  // Join the bounds of layer data\n  let bounds: MaskBounds | null = null;\n  for (const layer of layers) {\n    const subLayerBounds = layer.getBounds();\n    if (subLayerBounds) {\n      if (bounds) {\n        bounds[0] = Math.min(bounds[0], subLayerBounds[0][0]);\n        bounds[1] = Math.min(bounds[1], subLayerBounds[0][1]);\n        bounds[2] = Math.max(bounds[2], subLayerBounds[1][0]);\n        bounds[3] = Math.max(bounds[3], subLayerBounds[1][1]);\n      } else {\n        bounds = [\n          subLayerBounds[0][0],\n          subLayerBounds[0][1],\n          subLayerBounds[1][0],\n          subLayerBounds[1][1]\n        ];\n      }\n    }\n  }\n  const viewportBounds = viewport.getBounds();\n  if (!bounds) {\n    return viewportBounds;\n  }\n\n  // Expand viewport bounds by 2X. Heurestically chosen to avoid masking\n  // errors when mask is partially out of view\n  const paddedBounds = _doubleBounds(viewportBounds);\n\n  // When bounds of the mask are smaller than the viewport bounds simply use\n  // mask bounds, so as to maximize resolution & avoid mask rerenders\n  if (\n    bounds[2] - bounds[0] < paddedBounds[2] - paddedBounds[0] ||\n    bounds[3] - bounds[1] < paddedBounds[3] - paddedBounds[1]\n  ) {\n    return bounds;\n  }\n\n  // As viewport shrinks, to avoid pixelation along mask edges\n  // we need to reduce the bounds and only render the visible portion\n  // of the mask.\n  // We pad the viewport bounds to capture the section\n  // of the mask just outside the viewport to correctly maskByInstance.\n  // Intersect mask & padded viewport bounds\n  bounds[0] = Math.max(bounds[0], paddedBounds[0]);\n  bounds[1] = Math.max(bounds[1], paddedBounds[1]);\n  bounds[2] = Math.min(bounds[2], paddedBounds[2]);\n  bounds[3] = Math.min(bounds[3], paddedBounds[3]);\n  return bounds;\n}\n\n/*\n * Compute viewport to render the mask into, covering the given bounds\n */\nexport function getMaskViewport({\n  bounds,\n  viewport,\n  width,\n  height\n}: {\n  bounds: MaskBounds;\n  viewport: Viewport;\n  width: number;\n  height: number;\n}): Viewport | null {\n  if (bounds[2] <= bounds[0] || bounds[3] <= bounds[1]) {\n    return null;\n  }\n\n  // Single pixel border to prevent mask bleeding at edge of texture\n  const padding = 1;\n  width -= padding * 2;\n  height -= padding * 2;\n\n  if (viewport instanceof WebMercatorViewport) {\n    const {longitude, latitude, zoom} = fitBounds({\n      width,\n      height,\n      bounds: [\n        [bounds[0], bounds[1]],\n        [bounds[2], bounds[3]]\n      ],\n      maxZoom: 20\n    });\n    return new WebMercatorViewport({\n      longitude,\n      latitude,\n      zoom,\n      x: padding,\n      y: padding,\n      width,\n      height\n    });\n  }\n\n  const center = [(bounds[0] + bounds[2]) / 2, (bounds[1] + bounds[3]) / 2, 0];\n  const scale = Math.min(20, width / (bounds[2] - bounds[0]), height / (bounds[3] - bounds[1]));\n\n  return new OrthographicView({\n    x: padding,\n    y: padding\n  }).makeViewport({\n    width,\n    height,\n    viewState: {\n      target: center,\n      zoom: Math.log2(scale)\n    }\n  });\n}\n\nfunction _doubleBounds(bounds: MaskBounds): MaskBounds {\n  const size = {\n    x: bounds[2] - bounds[0],\n    y: bounds[3] - bounds[1]\n  };\n  const center = {\n    x: bounds[0] + 0.5 * size.x,\n    y: bounds[1] + 0.5 * size.y\n  };\n  return [center.x - size.x, center.y - size.y, center.x + size.x, center.y + size.y];\n}\n"],"file":"utils.js"}