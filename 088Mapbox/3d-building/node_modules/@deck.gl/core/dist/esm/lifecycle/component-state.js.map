{"version":3,"sources":["../../../src/lifecycle/component-state.ts"],"names":["isAsyncIterable","ASYNC_ORIGINAL_SYMBOL","ASYNC_RESOLVED_SYMBOL","ASYNC_DEFAULTS_SYMBOL","EMPTY_PROPS","Object","freeze","ComponentState","constructor","component","asyncProps","onAsyncPropUpdated","oldProps","oldAsyncProps","finalize","propName","asyncProp","type","release","resolvedValue","getOldProps","resetOldProps","props","hasAsyncProp","getAsyncProp","isAsyncPropLoading","Boolean","pendingLoadCount","resolvedLoadCount","key","reloadAsyncProp","value","_watchPromise","Promise","resolve","setAsyncProps","resolvedValues","originalValues","defaultValues","_createAsyncPropData","_updateAsyncProp","_fetch","url","_onResolve","_onError","error","_didAsyncInputValueChange","_resolveAsyncIterable","_setPropValue","_freezeAsyncOldProps","create","defineProperty","enumerable","lastValue","_postProcessValue","_setAsyncPropValue","loadCount","undefined","promise","then","data","catch","iterable","count","chunk","dataTransform","concat","startRow","endRow","length","propType","transform","defaultValue","propTypes","_propTypes"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {isAsyncIterable} from '../utils/iterable-utils';\nimport {ASYNC_ORIGINAL_SYMBOL, ASYNC_RESOLVED_SYMBOL, ASYNC_DEFAULTS_SYMBOL} from './constants';\nimport type Component from './component';\nimport {PropType} from './prop-types';\n\nconst EMPTY_PROPS = Object.freeze({});\n\ntype AsyncPropState = {\n  type: PropType;\n  lastValue: any;\n  resolvedValue: any;\n  pendingLoadCount: number;\n  resolvedLoadCount: number;\n};\n\nexport default class ComponentState<ComponentT extends Component> {\n  component: ComponentT;\n  onAsyncPropUpdated: (propName: string, value: any) => void;\n\n  private asyncProps: Partial<Record<string, AsyncPropState>>;\n  private oldProps: ComponentT['props'] | null;\n  private oldAsyncProps: ComponentT['props'] | null;\n\n  constructor(component: ComponentT) {\n    this.component = component;\n    this.asyncProps = {}; // Prop values that the layer sees\n    this.onAsyncPropUpdated = () => {};\n    this.oldProps = null; // Last props before update\n    this.oldAsyncProps = null; // Last props before update, with async values copied.\n  }\n\n  finalize() {\n    for (const propName in this.asyncProps) {\n      const asyncProp = this.asyncProps[propName];\n      if (asyncProp && asyncProp.type && asyncProp.type.release) {\n        // Release any resources created by transforms\n        asyncProp.type.release(\n          asyncProp.resolvedValue,\n          asyncProp.type,\n          this.component as Component\n        );\n      }\n    }\n  }\n\n  /* Layer-facing props API */\n\n  getOldProps(): ComponentT['props'] | typeof EMPTY_PROPS {\n    return this.oldAsyncProps || this.oldProps || EMPTY_PROPS;\n  }\n\n  resetOldProps() {\n    this.oldAsyncProps = null;\n    this.oldProps = this.component.props;\n  }\n\n  // Checks if a prop is overridden\n  hasAsyncProp(propName: string): boolean {\n    return propName in this.asyncProps;\n  }\n\n  // Returns value of an overriden prop\n  getAsyncProp(propName: string): any {\n    const asyncProp = this.asyncProps[propName];\n    return asyncProp && asyncProp.resolvedValue;\n  }\n\n  isAsyncPropLoading(propName?: string): boolean {\n    if (propName) {\n      const asyncProp = this.asyncProps[propName];\n      return Boolean(\n        asyncProp &&\n          asyncProp.pendingLoadCount > 0 &&\n          asyncProp.pendingLoadCount !== asyncProp.resolvedLoadCount\n      );\n    }\n    for (const key in this.asyncProps) {\n      if (this.isAsyncPropLoading(key)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  // Without changing the original prop value, swap out the data resolution under the hood\n  reloadAsyncProp(propName: string, value: any) {\n    this._watchPromise(propName, Promise.resolve(value));\n  }\n\n  // Updates all async/overridden props (when new props come in)\n  // Checks if urls have changed, starts loading, or removes override\n  setAsyncProps(props: ComponentT['props']) {\n    // NOTE: prop param and default values are only support for testing\n    const resolvedValues = props[ASYNC_RESOLVED_SYMBOL] || {};\n    const originalValues = props[ASYNC_ORIGINAL_SYMBOL] || props;\n    const defaultValues = props[ASYNC_DEFAULTS_SYMBOL] || {};\n\n    // TODO - use async props from the layer's prop types\n    for (const propName in resolvedValues) {\n      const value = resolvedValues[propName];\n      this._createAsyncPropData(propName, defaultValues[propName]);\n      this._updateAsyncProp(propName, value);\n      // Use transformed value\n      resolvedValues[propName] = this.getAsyncProp(propName);\n    }\n\n    for (const propName in originalValues) {\n      const value = originalValues[propName];\n      // Makes sure a record exists for this prop\n      this._createAsyncPropData(propName, defaultValues[propName]);\n      this._updateAsyncProp(propName, value);\n    }\n  }\n\n  /* Placeholder methods for subclassing */\n\n  protected _fetch(propName: string, url: string): any {\n    return null;\n  }\n\n  protected _onResolve(propName: string, value: any) {} // eslint-disable-line @typescript-eslint/no-empty-function\n\n  protected _onError(propName: string, error: Error) {} // eslint-disable-line @typescript-eslint/no-empty-function\n\n  // Intercept strings (URLs) and Promises and activates loading and prop rewriting\n  private _updateAsyncProp(propName: string, value: any) {\n    if (!this._didAsyncInputValueChange(propName, value)) {\n      return;\n    }\n\n    // interpret value string as url and start a new load tracked by a promise\n    if (typeof value === 'string') {\n      value = this._fetch(propName, value);\n    }\n\n    // interprets promise and track the \"loading\"\n    if (value instanceof Promise) {\n      this._watchPromise(propName, value);\n      return;\n    }\n\n    if (isAsyncIterable(value)) {\n      this._resolveAsyncIterable(propName, value); // eslint-disable-line @typescript-eslint/no-floating-promises\n      return;\n    }\n\n    // else, normal, non-async value. Just store value for now\n    this._setPropValue(propName, value);\n  }\n\n  // Whenever async props are changing, we need to make a copy of oldProps\n  // otherwise the prop rewriting will affect the value both in props and oldProps.\n  // While the copy is relatively expensive, this only happens on load completion.\n  private _freezeAsyncOldProps() {\n    if (!this.oldAsyncProps && this.oldProps) {\n      // 1. inherit all synchronous props from oldProps\n      // 2. reconfigure the async prop descriptors to fixed values\n      this.oldAsyncProps = Object.create(this.oldProps);\n      for (const propName in this.asyncProps) {\n        Object.defineProperty(this.oldAsyncProps, propName, {\n          enumerable: true,\n          value: this.oldProps[propName]\n        });\n      }\n    }\n  }\n\n  // Checks if an input value actually changed (to avoid reloading/rewatching promises/urls)\n  private _didAsyncInputValueChange(propName: string, value: any): boolean {\n    // @ts-ignore\n    const asyncProp: AsyncPropState = this.asyncProps[propName];\n    if (value === asyncProp.resolvedValue || value === asyncProp.lastValue) {\n      return false;\n    }\n    asyncProp.lastValue = value;\n    return true;\n  }\n\n  // Set normal, non-async value\n  private _setPropValue(propName: string, value: any) {\n    // Save the current value before overwriting so that diffProps can access both\n    this._freezeAsyncOldProps();\n\n    const asyncProp = this.asyncProps[propName];\n    if (asyncProp) {\n      value = this._postProcessValue(asyncProp, value);\n      asyncProp.resolvedValue = value;\n      asyncProp.pendingLoadCount++;\n      asyncProp.resolvedLoadCount = asyncProp.pendingLoadCount;\n    }\n  }\n\n  // Set a just resolved async value, calling onAsyncPropUpdates if value changes asynchronously\n  private _setAsyncPropValue(propName: string, value: any, loadCount: number) {\n    // Only update if loadCount is larger or equal to resolvedLoadCount\n    // otherwise a more recent load has already completed\n    const asyncProp = this.asyncProps[propName];\n    if (asyncProp && loadCount >= asyncProp.resolvedLoadCount && value !== undefined) {\n      // Save the current value before overwriting so that diffProps can access both\n      this._freezeAsyncOldProps();\n\n      asyncProp.resolvedValue = value;\n      asyncProp.resolvedLoadCount = loadCount;\n\n      // Call callback to inform listener\n      this.onAsyncPropUpdated(propName, value);\n    }\n  }\n\n  // Tracks a promise, sets the prop when loaded, handles load count\n  private _watchPromise(propName: string, promise: Promise<any>) {\n    const asyncProp = this.asyncProps[propName];\n    if (asyncProp) {\n      asyncProp.pendingLoadCount++;\n      const loadCount = asyncProp.pendingLoadCount;\n      promise\n        .then(data => {\n          data = this._postProcessValue(asyncProp, data);\n          this._setAsyncPropValue(propName, data, loadCount);\n          this._onResolve(propName, data);\n        })\n        .catch(error => {\n          this._onError(propName, error);\n        });\n    }\n  }\n\n  private async _resolveAsyncIterable(\n    propName: string,\n    iterable: AsyncIterable<any>\n  ): Promise<void> {\n    if (propName !== 'data') {\n      // we only support data as async iterable\n      this._setPropValue(propName, iterable);\n      return;\n    }\n\n    const asyncProp = this.asyncProps[propName];\n    if (!asyncProp) {\n      return;\n    }\n\n    asyncProp.pendingLoadCount++;\n    const loadCount = asyncProp.pendingLoadCount;\n    let data: any[] = [];\n    let count = 0;\n\n    for await (const chunk of iterable) {\n      // @ts-expect-error (2339) dataTransform is not decared in base component props\n      const {dataTransform} = this.component.props;\n      if (dataTransform) {\n        data = dataTransform(chunk, data) as any[];\n      } else {\n        data = data.concat(chunk);\n      }\n\n      // Used by the default _dataDiff function\n      Object.defineProperty(data, '__diff', {\n        enumerable: false,\n        value: [{startRow: count, endRow: data.length}]\n      });\n\n      count = data.length;\n      this._setAsyncPropValue(propName, data, loadCount);\n    }\n\n    this._onResolve(propName, data);\n  }\n\n  // Give the app a chance to post process the loaded data\n  private _postProcessValue(asyncProp, value: any) {\n    const propType = asyncProp.type;\n    if (propType) {\n      if (propType.release) {\n        propType.release(asyncProp.resolvedValue, propType, this.component);\n      }\n      if (propType.transform) {\n        return propType.transform(value, propType, this.component);\n      }\n    }\n    return value;\n  }\n\n  // Creating an asyncProp record if needed\n  private _createAsyncPropData(propName: string, defaultValue: any) {\n    const asyncProp = this.asyncProps[propName];\n    if (!asyncProp) {\n      // @ts-expect-error\n      const propTypes = this.component && this.component.constructor._propTypes;\n      // assert(defaultValue !== undefined);\n      this.asyncProps[propName] = {\n        type: propTypes && propTypes[propName],\n        lastValue: null, // Supplied prop value (can be url/promise, not visible to layer)\n        resolvedValue: defaultValue, // Resolved prop value (valid data, can be \"shown\" to layer)\n        pendingLoadCount: 0, // How many loads have been issued\n        resolvedLoadCount: 0 // Latest resolved load, (earlier loads will be ignored)\n      };\n    }\n  }\n}\n"],"file":"component-state.js"}