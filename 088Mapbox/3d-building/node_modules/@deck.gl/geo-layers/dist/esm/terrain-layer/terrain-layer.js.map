{"version":3,"sources":["../../../src/terrain-layer/terrain-layer.ts"],"names":["CompositeLayer","log","SimpleMeshLayer","COORDINATE_SYSTEM","TerrainWorkerLoader","TileLayer","urlType","getURLFromTemplate","DUMMY_DATA","defaultProps","elevationData","texture","optional","meshMaxError","type","value","bounds","compare","color","elevationDecoder","rScaler","gScaler","bScaler","offset","workerUrl","wireframe","material","loaders","urlTemplateToUpdateTrigger","template","Array","isArray","join","TerrainLayer","updateState","props","oldProps","elevationDataChanged","isTiled","includes","setState","shouldReload","state","terrain","loadTerrain","removed","signal","loadOptions","getLoadOptions","skirtHeight","fetch","propName","layer","getTiledTerrainData","tile","viewport","context","dataUrl","textureUrl","bottomLeft","topRight","isGeospatial","bbox","projectFlat","west","south","east","north","left","bottom","right","top","surface","catch","_","Promise","resolve","all","renderSubLayers","SubLayerClass","getSubLayerClass","data","mesh","_instanced","coordinateSystem","CARTESIAN","getPosition","d","getColor","onViewportLoad","tiles","zRange","ranges","map","content","filter","Boolean","arr","header","boundingBox","bound","length","minZ","Math","min","x","maxZ","max","renderLayers","tileSize","maxZoom","minZoom","extent","maxRequests","onTileLoad","onTileUnload","onTileError","maxCacheSize","maxCacheByteSize","refinementStrategy","getSubLayerProps","id","getTileData","bind","updateTriggers"],"mappings":";AAoBA,SAEEA,cAFF,EAOEC,GAPF,QAWO,eAXP;AAYA,SAAQC,eAAR,QAA8B,sBAA9B;AACA,SAAQC,iBAAR,QAAgC,eAAhC;AAEA,SAAQC,mBAAR,QAAkC,qBAAlC;AACA,OAAOC,SAAP,MAAwC,0BAAxC;AAGA,SAAQC,OAAR,EAAiBC,kBAAjB,QAA0C,qBAA1C;AAEA,MAAMC,UAAU,GAAG,CAAC,CAAD,CAAnB;AAEA,MAAMC,YAA6C,GAAG,EACpD,GAAGJ,SAAS,CAACI,YADuC;AAGpDC,EAAAA,aAAa,EAAEJ,OAHqC;AAKpDK,EAAAA,OAAO,EAAE,EAAC,GAAGL,OAAJ;AAAaM,IAAAA,QAAQ,EAAE;AAAvB,GAL2C;AAOpDC,EAAAA,YAAY,EAAE;AAACC,IAAAA,IAAI,EAAE,QAAP;AAAiBC,IAAAA,KAAK,EAAE;AAAxB,GAPsC;AASpDC,EAAAA,MAAM,EAAE;AAACF,IAAAA,IAAI,EAAE,OAAP;AAAgBC,IAAAA,KAAK,EAAE,IAAvB;AAA6BH,IAAAA,QAAQ,EAAE,IAAvC;AAA6CK,IAAAA,OAAO,EAAE;AAAtD,GAT4C;AAWpDC,EAAAA,KAAK,EAAE;AAACJ,IAAAA,IAAI,EAAE,OAAP;AAAgBC,IAAAA,KAAK,EAAE,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX;AAAvB,GAX6C;AAapDI,EAAAA,gBAAgB,EAAE;AAChBL,IAAAA,IAAI,EAAE,QADU;AAEhBC,IAAAA,KAAK,EAAE;AACLK,MAAAA,OAAO,EAAE,CADJ;AAELC,MAAAA,OAAO,EAAE,CAFJ;AAGLC,MAAAA,OAAO,EAAE,CAHJ;AAILC,MAAAA,MAAM,EAAE;AAJH;AAFS,GAbkC;AAuBpDC,EAAAA,SAAS,EAAE;AAACV,IAAAA,IAAI,EAAE,QAAP;AAAiBC,IAAAA,KAAK,EAAE;AAAxB,GAvByC;AAyBpDU,EAAAA,SAAS,EAAE,KAzByC;AA0BpDC,EAAAA,QAAQ,EAAE,IA1B0C;AA4BpDC,EAAAA,OAAO,EAAE,CAACvB,mBAAD;AA5B2C,CAAtD;;AAkCA,SAASwB,0BAAT,CAAoCC,QAApC,EAA0E;AACxE,MAAIC,KAAK,CAACC,OAAN,CAAcF,QAAd,CAAJ,EAA6B;AAC3B,WAAOA,QAAQ,CAACG,IAAT,CAAc,GAAd,CAAP;AACD;;AACD,SAAOH,QAAQ,IAAI,EAAnB;AACD;;AA8CD,eAAe,MAAMI,YAAN,SAA6CjC,cAA7C,CAEb;AAAA;AAAA;;AAAA;AAAA;;AAUAkC,EAAAA,WAAW,CAAC;AAACC,IAAAA,KAAD;AAAQC,IAAAA;AAAR,GAAD,EAAkD;AAC3D,UAAMC,oBAAoB,GAAGF,KAAK,CAACzB,aAAN,KAAwB0B,QAAQ,CAAC1B,aAA9D;;AACA,QAAI2B,oBAAJ,EAA0B;AACxB,YAAM;AAAC3B,QAAAA;AAAD,UAAkByB,KAAxB;AACA,YAAMG,OAAO,GACX5B,aAAa,KACZoB,KAAK,CAACC,OAAN,CAAcrB,aAAd,KACEA,aAAa,CAAC6B,QAAd,CAAuB,KAAvB,KAAiC7B,aAAa,CAAC6B,QAAd,CAAuB,KAAvB,CAFvB,CADf;AAIA,WAAKC,QAAL,CAAc;AAACF,QAAAA;AAAD,OAAd;AACD;;AAGD,UAAMG,YAAY,GAChBJ,oBAAoB,IACpBF,KAAK,CAACtB,YAAN,KAAuBuB,QAAQ,CAACvB,YADhC,IAEAsB,KAAK,CAAChB,gBAAN,KAA2BiB,QAAQ,CAACjB,gBAFpC,IAGAgB,KAAK,CAACnB,MAAN,KAAiBoB,QAAQ,CAACpB,MAJ5B;;AAMA,QAAI,CAAC,KAAK0B,KAAL,CAAWJ,OAAZ,IAAuBG,YAA3B,EAAyC;AAEvC,YAAME,OAAO,GAAG,KAAKC,WAAL,CAAiBT,KAAjB,CAAhB;AACA,WAAKK,QAAL,CAAc;AAACG,QAAAA;AAAD,OAAd;AACD;;AAID,QAAIR,KAAK,CAACX,SAAV,EAAqB;AACnBvB,MAAAA,GAAG,CAAC4C,OAAJ,CAAY,WAAZ,EAAyB,+BAAzB;AACD;AACF;;AAEDD,EAAAA,WAAW,CAAC;AACVlC,IAAAA,aADU;AAEVM,IAAAA,MAFU;AAGVG,IAAAA,gBAHU;AAIVN,IAAAA,YAJU;AAKViC,IAAAA;AALU,GAAD,EAM0C;AAAA;;AACnD,QAAI,CAACpC,aAAL,EAAoB;AAClB,aAAO,IAAP;AACD;;AACD,QAAIqC,WAAW,GAAG,KAAKC,cAAL,EAAlB;AACAD,IAAAA,WAAW,GAAG,EACZ,GAAGA,WADS;AAEZJ,MAAAA,OAAO,EAAE;AACPM,QAAAA,WAAW,EAAE,KAAKP,KAAL,CAAWJ,OAAX,GAAqBzB,YAAY,GAAG,CAApC,GAAwC,CAD9C;AAEP,4BAAGkC,WAAH,iDAAG,aAAaJ,OAAhB,CAFO;AAGP3B,QAAAA,MAHO;AAIPH,QAAAA,YAJO;AAKPM,QAAAA;AALO;AAFG,KAAd;AAUA,UAAM;AAAC+B,MAAAA;AAAD,QAAU,KAAKf,KAArB;AACA,WAAOe,KAAK,CAACxC,aAAD,EAAgB;AAACyC,MAAAA,QAAQ,EAAE,eAAX;AAA4BC,MAAAA,KAAK,EAAE,IAAnC;AAAyCL,MAAAA,WAAzC;AAAsDD,MAAAA;AAAtD,KAAhB,CAAZ;AACD;;AAEDO,EAAAA,mBAAmB,CAACC,IAAD,EAA+C;AAChE,UAAM;AAAC5C,MAAAA,aAAD;AAAgBwC,MAAAA,KAAhB;AAAuBvC,MAAAA,OAAvB;AAAgCQ,MAAAA,gBAAhC;AAAkDN,MAAAA;AAAlD,QAAkE,KAAKsB,KAA7E;AACA,UAAM;AAACoB,MAAAA;AAAD,QAAa,KAAKC,OAAxB;AACA,UAAMC,OAAO,GAAGlD,kBAAkB,CAACG,aAAD,EAAgB4C,IAAhB,CAAlC;AACA,UAAMI,UAAU,GAAG/C,OAAO,IAAIJ,kBAAkB,CAACI,OAAD,EAAU2C,IAAV,CAAhD;AAEA,UAAM;AAACR,MAAAA;AAAD,QAAWQ,IAAjB;AACA,QAAIK,UAAU,GAAG,CAAC,CAAD,EAAI,CAAJ,CAAjB;AACA,QAAIC,QAAQ,GAAG,CAAC,CAAD,EAAI,CAAJ,CAAf;;AACA,QAAIL,QAAQ,CAACM,YAAb,EAA2B;AACzB,YAAMC,IAAI,GAAGR,IAAI,CAACQ,IAAlB;AACAH,MAAAA,UAAU,GAAGJ,QAAQ,CAACQ,WAAT,CAAqB,CAACD,IAAI,CAACE,IAAN,EAAYF,IAAI,CAACG,KAAjB,CAArB,CAAb;AACAL,MAAAA,QAAQ,GAAGL,QAAQ,CAACQ,WAAT,CAAqB,CAACD,IAAI,CAACI,IAAN,EAAYJ,IAAI,CAACK,KAAjB,CAArB,CAAX;AACD,KAJD,MAIO;AACL,YAAML,IAAI,GAAGR,IAAI,CAACQ,IAAlB;AACAH,MAAAA,UAAU,GAAG,CAACG,IAAI,CAACM,IAAN,EAAYN,IAAI,CAACO,MAAjB,CAAb;AACAT,MAAAA,QAAQ,GAAG,CAACE,IAAI,CAACQ,KAAN,EAAaR,IAAI,CAACS,GAAlB,CAAX;AACD;;AACD,UAAMvD,MAAc,GAAG,CAAC2C,UAAU,CAAC,CAAD,CAAX,EAAgBA,UAAU,CAAC,CAAD,CAA1B,EAA+BC,QAAQ,CAAC,CAAD,CAAvC,EAA4CA,QAAQ,CAAC,CAAD,CAApD,CAAvB;AAEA,UAAMjB,OAAO,GAAG,KAAKC,WAAL,CAAiB;AAC/BlC,MAAAA,aAAa,EAAE+C,OADgB;AAE/BzC,MAAAA,MAF+B;AAG/BG,MAAAA,gBAH+B;AAI/BN,MAAAA,YAJ+B;AAK/BiC,MAAAA;AAL+B,KAAjB,CAAhB;AAOA,UAAM0B,OAAO,GAAGd,UAAU,GAEtBR,KAAK,CAACQ,UAAD,EAAa;AAACP,MAAAA,QAAQ,EAAE,SAAX;AAAsBC,MAAAA,KAAK,EAAE,IAA7B;AAAmCzB,MAAAA,OAAO,EAAE,EAA5C;AAAgDmB,MAAAA;AAAhD,KAAb,CAAL,CAA2E2B,KAA3E,CAAiFC,CAAC,IAAI,IAAtF,CAFsB,GAGtBC,OAAO,CAACC,OAAR,CAAgB,IAAhB,CAHJ;AAKA,WAAOD,OAAO,CAACE,GAAR,CAAY,CAAClC,OAAD,EAAU6B,OAAV,CAAZ,CAAP;AACD;;AAEDM,EAAAA,eAAe,CACb3C,KADa,EAMb;AACA,UAAM4C,aAAa,GAAG,KAAKC,gBAAL,CAAsB,MAAtB,EAA8B9E,eAA9B,CAAtB;AAEA,UAAM;AAACgB,MAAAA,KAAD;AAAQO,MAAAA,SAAR;AAAmBC,MAAAA;AAAnB,QAA+B,KAAKS,KAA1C;AACA,UAAM;AAAC8C,MAAAA;AAAD,QAAS9C,KAAf;;AAEA,QAAI,CAAC8C,IAAL,EAAW;AACT,aAAO,IAAP;AACD;;AAED,UAAM,CAACC,IAAD,EAAOvE,OAAP,IAAkBsE,IAAxB;AAEA,WAAO,IAAIF,aAAJ,CAAkB5C,KAAlB,EAAyB;AAC9B8C,MAAAA,IAAI,EAAEzE,UADwB;AAE9B0E,MAAAA,IAF8B;AAG9BvE,MAAAA,OAH8B;AAI9BwE,MAAAA,UAAU,EAAE,KAJkB;AAK9BC,MAAAA,gBAAgB,EAAEjF,iBAAiB,CAACkF,SALN;AAM9BC,MAAAA,WAAW,EAAEC,CAAC,IAAI,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CANY;AAO9BC,MAAAA,QAAQ,EAAEtE,KAPoB;AAQ9BO,MAAAA,SAR8B;AAS9BC,MAAAA;AAT8B,KAAzB,CAAP;AAWD;;AAGD+D,EAAAA,cAAc,CAACC,KAAD,EAA+C;AAC3D,QAAI,CAACA,KAAL,EAAY;AACV;AACD;;AAED,UAAM;AAACC,MAAAA;AAAD,QAAW,KAAKjD,KAAtB;AACA,UAAMkD,MAAM,GAAGF,KAAK,CACjBG,GADY,CACRvC,IAAI,IAAIA,IAAI,CAACwC,OADL,EAEZC,MAFY,CAELC,OAFK,EAGZH,GAHY,CAGRI,GAAG,IAAI;AAEV,YAAMjF,MAAM,GAAGiF,GAAG,CAAC,CAAD,CAAH,CAAOC,MAAP,CAAcC,WAA7B;AACA,aAAOnF,MAAM,CAAC6E,GAAP,CAAWO,KAAK,IAAIA,KAAK,CAAC,CAAD,CAAzB,CAAP;AACD,KAPY,CAAf;;AAQA,QAAIR,MAAM,CAACS,MAAP,KAAkB,CAAtB,EAAyB;AACvB;AACD;;AACD,UAAMC,IAAI,GAAGC,IAAI,CAACC,GAAL,CAAS,GAAGZ,MAAM,CAACC,GAAP,CAAWY,CAAC,IAAIA,CAAC,CAAC,CAAD,CAAjB,CAAZ,CAAb;AACA,UAAMC,IAAI,GAAGH,IAAI,CAACI,GAAL,CAAS,GAAGf,MAAM,CAACC,GAAP,CAAWY,CAAC,IAAIA,CAAC,CAAC,CAAD,CAAjB,CAAZ,CAAb;;AAEA,QAAI,CAACd,MAAD,IAAWW,IAAI,GAAGX,MAAM,CAAC,CAAD,CAAxB,IAA+Be,IAAI,GAAGf,MAAM,CAAC,CAAD,CAAhD,EAAqD;AACnD,WAAKnD,QAAL,CAAc;AAACmD,QAAAA,MAAM,EAAE,CAACW,IAAD,EAAOI,IAAP;AAAT,OAAd;AACD;AACF;;AAEDE,EAAAA,YAAY,GAA8B;AACxC,UAAM;AACJ1F,MAAAA,KADI;AAEJQ,MAAAA,QAFI;AAGJhB,MAAAA,aAHI;AAIJC,MAAAA,OAJI;AAKJc,MAAAA,SALI;AAMJZ,MAAAA,YANI;AAOJM,MAAAA,gBAPI;AAQJ0F,MAAAA,QARI;AASJC,MAAAA,OATI;AAUJC,MAAAA,OAVI;AAWJC,MAAAA,MAXI;AAYJC,MAAAA,WAZI;AAaJC,MAAAA,UAbI;AAcJC,MAAAA,YAdI;AAeJC,MAAAA,WAfI;AAgBJC,MAAAA,YAhBI;AAiBJC,MAAAA,gBAjBI;AAkBJC,MAAAA;AAlBI,QAmBF,KAAKpF,KAnBT;;AAqBA,QAAI,KAAKO,KAAL,CAAWJ,OAAf,EAAwB;AACtB,aAAO,IAAIjC,SAAJ,CACL,KAAKmH,gBAAL,CAAsB;AACpBC,QAAAA,EAAE,EAAE;AADgB,OAAtB,CADK,EAIL;AACEC,QAAAA,WAAW,EAAE,KAAKrE,mBAAL,CAAyBsE,IAAzB,CAA8B,IAA9B,CADf;AAEE7C,QAAAA,eAAe,EAAE,KAAKA,eAAL,CAAqB6C,IAArB,CAA0B,IAA1B,CAFnB;AAGEC,QAAAA,cAAc,EAAE;AACdF,UAAAA,WAAW,EAAE;AACXhH,YAAAA,aAAa,EAAEkB,0BAA0B,CAAClB,aAAD,CAD9B;AAEXC,YAAAA,OAAO,EAAEiB,0BAA0B,CAACjB,OAAD,CAFxB;AAGXE,YAAAA,YAHW;AAIXM,YAAAA;AAJW;AADC,SAHlB;AAWEsE,QAAAA,cAAc,EAAE,KAAKA,cAAL,CAAoBkC,IAApB,CAAyB,IAAzB,CAXlB;AAYEhC,QAAAA,MAAM,EAAE,KAAKjD,KAAL,CAAWiD,MAAX,IAAqB,IAZ/B;AAaEkB,QAAAA,QAbF;AAcEC,QAAAA,OAdF;AAeEC,QAAAA,OAfF;AAgBEC,QAAAA,MAhBF;AAiBEC,QAAAA,WAjBF;AAkBEC,QAAAA,UAlBF;AAmBEC,QAAAA,YAnBF;AAoBEC,QAAAA,WApBF;AAqBEC,QAAAA,YArBF;AAsBEC,QAAAA,gBAtBF;AAuBEC,QAAAA;AAvBF,OAJK,CAAP;AA8BD;;AAED,UAAMxC,aAAa,GAAG,KAAKC,gBAAL,CAAsB,MAAtB,EAA8B9E,eAA9B,CAAtB;AACA,WAAO,IAAI6E,aAAJ,CACL,KAAKyC,gBAAL,CAAsB;AACpBC,MAAAA,EAAE,EAAE;AADgB,KAAtB,CADK,EAIL;AACExC,MAAAA,IAAI,EAAEzE,UADR;AAEE0E,MAAAA,IAAI,EAAE,KAAKxC,KAAL,CAAWC,OAFnB;AAGEhC,MAAAA,OAHF;AAIEwE,MAAAA,UAAU,EAAE,KAJd;AAKEG,MAAAA,WAAW,EAAEC,CAAC,IAAI,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CALpB;AAMEC,MAAAA,QAAQ,EAAEtE,KANZ;AAOEQ,MAAAA,QAPF;AAQED,MAAAA;AARF,KAJK,CAAP;AAeD;;AArOD;;gBAFmBQ,Y,kBAGGxB,Y;;gBAHHwB,Y,eAIA,c","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {\n  Color,\n  CompositeLayer,\n  CompositeLayerProps,\n  DefaultProps,\n  Layer,\n  LayersList,\n  log,\n  Material,\n  Texture,\n  UpdateParameters\n} from '@deck.gl/core';\nimport {SimpleMeshLayer} from '@deck.gl/mesh-layers';\nimport {COORDINATE_SYSTEM} from '@deck.gl/core';\nimport type {MeshAttributes} from '@loaders.gl/schema';\nimport {TerrainWorkerLoader} from '@loaders.gl/terrain';\nimport TileLayer, {TileLayerProps} from '../tile-layer/tile-layer';\nimport Tile2DHeader from '../tile-layer/tile-2d-header';\nimport {Bounds, GeoBoundingBox, TileBoundingBox, TileLoadProps, ZRange} from '../tile-layer/types';\nimport {urlType, getURLFromTemplate} from '../tile-layer/utils';\n\nconst DUMMY_DATA = [1];\n\nconst defaultProps: DefaultProps<TerrainLayerProps> = {\n  ...TileLayer.defaultProps,\n  // Image url that encodes height data\n  elevationData: urlType,\n  // Image url to use as texture\n  texture: {...urlType, optional: true},\n  // Martini error tolerance in meters, smaller number -> more detailed mesh\n  meshMaxError: {type: 'number', value: 4.0},\n  // Bounding box of the terrain image, [minX, minY, maxX, maxY] in world coordinates\n  bounds: {type: 'array', value: null, optional: true, compare: true},\n  // Color to use if texture is unavailable\n  color: {type: 'color', value: [255, 255, 255]},\n  // Object to decode height data, from (r, g, b) to height in meters\n  elevationDecoder: {\n    type: 'object',\n    value: {\n      rScaler: 1,\n      gScaler: 0,\n      bScaler: 0,\n      offset: 0\n    }\n  },\n  // Supply url to local terrain worker bundle. Only required if running offline and cannot access CDN.\n  workerUrl: {type: 'string', value: null},\n  // Same as SimpleMeshLayer wireframe\n  wireframe: false,\n  material: true,\n\n  loaders: [TerrainWorkerLoader]\n};\n\ntype URLTemplate = string | string[];\n\n// Turns array of templates into a single string to work around shallow change\nfunction urlTemplateToUpdateTrigger(template: URLTemplate | null): string {\n  if (Array.isArray(template)) {\n    return template.join(';');\n  }\n  return template || '';\n}\n\ntype ElevationDecoder = {rScaler: number; gScaler: number; bScaler: number; offset: number};\ntype TerrainLoadProps = {\n  bounds: Bounds;\n  elevationData: string | null;\n  elevationDecoder: ElevationDecoder;\n  meshMaxError: number;\n  signal?: AbortSignal;\n};\n\ntype MeshAndTexture = [MeshAttributes | null, Texture | null];\n\n/** All properties supported by TerrainLayer */\nexport type TerrainLayerProps = _TerrainLayerProps &\n  TileLayerProps<MeshAndTexture> &\n  CompositeLayerProps;\n\n/** Props added by the TerrainLayer */\ntype _TerrainLayerProps = {\n  /** Image url that encodes height data. **/\n  elevationData: URLTemplate;\n\n  /** Image url to use as texture. **/\n  texture?: URLTemplate | null;\n\n  /** Martini error tolerance in meters, smaller number -> more detailed mesh. **/\n  meshMaxError?: number;\n\n  /** Bounding box of the terrain image, [minX, minY, maxX, maxY] in world coordinates. **/\n  bounds?: Bounds | null;\n\n  /** Color to use if texture is unavailable. **/\n  color?: Color;\n\n  /** Object to decode height data, from (r, g, b) to height in meters. **/\n  elevationDecoder?: ElevationDecoder;\n\n  /** Whether to render the mesh in wireframe mode. **/\n  wireframe?: boolean;\n\n  /** Material props for lighting effect. **/\n  material?: Material;\n};\n\n/** Render mesh surfaces from height map images. */\nexport default class TerrainLayer<ExtraPropsT = {}> extends CompositeLayer<\n  ExtraPropsT & Required<_TerrainLayerProps & Required<TileLayerProps<MeshAndTexture>>>\n> {\n  static defaultProps = defaultProps;\n  static layerName = 'TerrainLayer';\n\n  state!: {\n    isTiled?: boolean;\n    terrain: MeshAttributes;\n    zRange?: ZRange | null;\n  };\n\n  updateState({props, oldProps}: UpdateParameters<this>): void {\n    const elevationDataChanged = props.elevationData !== oldProps.elevationData;\n    if (elevationDataChanged) {\n      const {elevationData} = props;\n      const isTiled =\n        elevationData &&\n        (Array.isArray(elevationData) ||\n          (elevationData.includes('{x}') && elevationData.includes('{y}')));\n      this.setState({isTiled});\n    }\n\n    // Reloading for single terrain mesh\n    const shouldReload =\n      elevationDataChanged ||\n      props.meshMaxError !== oldProps.meshMaxError ||\n      props.elevationDecoder !== oldProps.elevationDecoder ||\n      props.bounds !== oldProps.bounds;\n\n    if (!this.state.isTiled && shouldReload) {\n      // When state.isTiled, elevationData cannot be an array\n      const terrain = this.loadTerrain(props as TerrainLoadProps);\n      this.setState({terrain});\n    }\n\n    // TODO - remove in v9\n    // @ts-ignore\n    if (props.workerUrl) {\n      log.removed('workerUrl', 'loadOptions.terrain.workerUrl')();\n    }\n  }\n\n  loadTerrain({\n    elevationData,\n    bounds,\n    elevationDecoder,\n    meshMaxError,\n    signal\n  }: TerrainLoadProps): Promise<MeshAttributes> | null {\n    if (!elevationData) {\n      return null;\n    }\n    let loadOptions = this.getLoadOptions();\n    loadOptions = {\n      ...loadOptions,\n      terrain: {\n        skirtHeight: this.state.isTiled ? meshMaxError * 2 : 0,\n        ...loadOptions?.terrain,\n        bounds,\n        meshMaxError,\n        elevationDecoder\n      }\n    };\n    const {fetch} = this.props;\n    return fetch(elevationData, {propName: 'elevationData', layer: this, loadOptions, signal});\n  }\n\n  getTiledTerrainData(tile: TileLoadProps): Promise<MeshAndTexture> {\n    const {elevationData, fetch, texture, elevationDecoder, meshMaxError} = this.props;\n    const {viewport} = this.context;\n    const dataUrl = getURLFromTemplate(elevationData, tile);\n    const textureUrl = texture && getURLFromTemplate(texture, tile);\n\n    const {signal} = tile;\n    let bottomLeft = [0, 0] as [number, number];\n    let topRight = [0, 0] as [number, number];\n    if (viewport.isGeospatial) {\n      const bbox = tile.bbox as GeoBoundingBox;\n      bottomLeft = viewport.projectFlat([bbox.west, bbox.south]);\n      topRight = viewport.projectFlat([bbox.east, bbox.north]);\n    } else {\n      const bbox = tile.bbox as Exclude<TileBoundingBox, GeoBoundingBox>;\n      bottomLeft = [bbox.left, bbox.bottom];\n      topRight = [bbox.right, bbox.top];\n    }\n    const bounds: Bounds = [bottomLeft[0], bottomLeft[1], topRight[0], topRight[1]];\n\n    const terrain = this.loadTerrain({\n      elevationData: dataUrl,\n      bounds,\n      elevationDecoder,\n      meshMaxError,\n      signal\n    });\n    const surface = textureUrl\n      ? // If surface image fails to load, the tile should still be displayed\n        fetch(textureUrl, {propName: 'texture', layer: this, loaders: [], signal}).catch(_ => null)\n      : Promise.resolve(null);\n\n    return Promise.all([terrain, surface]);\n  }\n\n  renderSubLayers(\n    props: TileLayerProps<MeshAndTexture> & {\n      id: string;\n      data: MeshAndTexture;\n      tile: Tile2DHeader<MeshAndTexture>;\n    }\n  ) {\n    const SubLayerClass = this.getSubLayerClass('mesh', SimpleMeshLayer);\n\n    const {color, wireframe, material} = this.props;\n    const {data} = props;\n\n    if (!data) {\n      return null;\n    }\n\n    const [mesh, texture] = data;\n\n    return new SubLayerClass(props, {\n      data: DUMMY_DATA,\n      mesh,\n      texture,\n      _instanced: false,\n      coordinateSystem: COORDINATE_SYSTEM.CARTESIAN,\n      getPosition: d => [0, 0, 0],\n      getColor: color,\n      wireframe,\n      material\n    });\n  }\n\n  // Update zRange of viewport\n  onViewportLoad(tiles?: Tile2DHeader<MeshAndTexture>[]): void {\n    if (!tiles) {\n      return;\n    }\n\n    const {zRange} = this.state;\n    const ranges = tiles\n      .map(tile => tile.content)\n      .filter(Boolean)\n      .map(arr => {\n        // @ts-ignore\n        const bounds = arr[0].header.boundingBox;\n        return bounds.map(bound => bound[2]);\n      });\n    if (ranges.length === 0) {\n      return;\n    }\n    const minZ = Math.min(...ranges.map(x => x[0]));\n    const maxZ = Math.max(...ranges.map(x => x[1]));\n\n    if (!zRange || minZ < zRange[0] || maxZ > zRange[1]) {\n      this.setState({zRange: [minZ, maxZ]});\n    }\n  }\n\n  renderLayers(): Layer | null | LayersList {\n    const {\n      color,\n      material,\n      elevationData,\n      texture,\n      wireframe,\n      meshMaxError,\n      elevationDecoder,\n      tileSize,\n      maxZoom,\n      minZoom,\n      extent,\n      maxRequests,\n      onTileLoad,\n      onTileUnload,\n      onTileError,\n      maxCacheSize,\n      maxCacheByteSize,\n      refinementStrategy\n    } = this.props;\n\n    if (this.state.isTiled) {\n      return new TileLayer<MeshAndTexture>(\n        this.getSubLayerProps({\n          id: 'tiles'\n        }),\n        {\n          getTileData: this.getTiledTerrainData.bind(this),\n          renderSubLayers: this.renderSubLayers.bind(this),\n          updateTriggers: {\n            getTileData: {\n              elevationData: urlTemplateToUpdateTrigger(elevationData),\n              texture: urlTemplateToUpdateTrigger(texture),\n              meshMaxError,\n              elevationDecoder\n            }\n          },\n          onViewportLoad: this.onViewportLoad.bind(this),\n          zRange: this.state.zRange || null,\n          tileSize,\n          maxZoom,\n          minZoom,\n          extent,\n          maxRequests,\n          onTileLoad,\n          onTileUnload,\n          onTileError,\n          maxCacheSize,\n          maxCacheByteSize,\n          refinementStrategy\n        }\n      );\n    }\n\n    const SubLayerClass = this.getSubLayerClass('mesh', SimpleMeshLayer);\n    return new SubLayerClass(\n      this.getSubLayerProps({\n        id: 'mesh'\n      }),\n      {\n        data: DUMMY_DATA,\n        mesh: this.state.terrain,\n        texture,\n        _instanced: false,\n        getPosition: d => [0, 0, 0],\n        getColor: color,\n        material,\n        wireframe\n      }\n    );\n  }\n}\n"],"file":"terrain-layer.js"}