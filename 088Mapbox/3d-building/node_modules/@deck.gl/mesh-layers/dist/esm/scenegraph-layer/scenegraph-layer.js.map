{"version":3,"sources":["../../../src/scenegraph-layer/scenegraph-layer.ts"],"names":["Layer","project32","picking","log","isWebGL2","pbr","ScenegraphNode","createGLTFObjects","GLTFLoader","waitForGLTFAssets","MATRIX_ATTRIBUTES","shouldComposeModelMatrix","vs","fs","DEFAULT_COLOR","defaultProps","scenegraph","type","value","async","getScene","gltf","scenes","scene","getAnimator","animator","_animations","sizeScale","min","sizeMinPixels","sizeMaxPixels","Number","MAX_SAFE_INTEGER","getPosition","x","position","getColor","_lighting","_imageBasedLightingEnvironment","getOrientation","getScale","getTranslation","getTransformMatrix","loaders","ScenegraphLayer","getShaders","modules","props","push","initializeState","attributeManager","getAttributeManager","addInstanced","instancePositions","size","fp64","use64bitPositions","accessor","transition","instanceColors","colorFormat","length","normalized","defaultValue","instanceModelMatrix","updateState","params","oldProps","_updateScenegraph","_applyAnimationsProp","state","finalizeState","context","_deleteScenegraph","gl","scenegraphData","gltfObjects","_getModelOptions","then","setNeedsRedraw","deprecated","options","layer","_applyAllAttributes","setState","warn","attributesAvailable","allAttributes","getAttributes","traverse","model","_setModelAttributes","animationsProp","animations","getAnimations","Object","keys","sort","forEach","key","animation","assign","isFinite","number","findResult","find","name","delete","env","waitForFullLoad","imageBasedLightingEnvironment","modelOptions","isInstanced","transpileToGLSL100","useTangents","updateAttributes","changedAttributes","draw","moduleParameters","parameters","animate","timeline","getTime","viewport","opacity","coordinateSystem","numInstances","getNumInstances","worldMatrix","setInstanceCount","updateModuleSettings","uniforms","composeModelMatrix","sceneModelMatrix","u_Camera","getUniforms","project_uCameraPosition"],"mappings":"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","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, project32, picking, log} from '@deck.gl/core';\nimport {isWebGL2} from '@luma.gl/core';\nimport {pbr} from '@luma.gl/shadertools';\nimport {\n  ScenegraphNode,\n  GroupNode,\n  GLTFAnimator,\n  GLTFEnvironment,\n  createGLTFObjects\n} from '@luma.gl/experimental';\nimport GL from '@luma.gl/constants';\nimport {GLTFLoader} from '@loaders.gl/gltf';\nimport {waitForGLTFAssets} from './gltf-utils';\n\nimport {MATRIX_ATTRIBUTES, shouldComposeModelMatrix} from '../utils/matrix';\n\nimport vs from './scenegraph-layer-vertex.glsl';\nimport fs from './scenegraph-layer-fragment.glsl';\n\nimport type {\n  UpdateParameters,\n  LayerContext,\n  LayerProps,\n  Position,\n  Color,\n  Accessor,\n  DefaultProps\n} from '@deck.gl/core';\n\nconst DEFAULT_COLOR: [number, number, number, number] = [255, 255, 255, 255];\n\nexport type ScenegraphLayerProps<DataT = any> = _ScenegraphLayerProps<DataT> & LayerProps<DataT>;\n\ntype _ScenegraphLayerProps<DataT> = {\n  // TODO - define in luma.gl\n  /**\n   * A url for a glTF model or scenegraph loaded via a [scenegraph loader](https://loaders.gl/docs/specifications/category-scenegraph)\n   */\n  scenegraph: any;\n  /**\n   * Create a luma.gl GroupNode from the resolved scenegraph prop\n   */\n  getScene?: (\n    scenegraph: any,\n    context: {gl: WebGLRenderingContext; layer: ScenegraphLayer<DataT>}\n  ) => GroupNode;\n  /**\n   * Create a luma.gl GLTFAnimator from the resolved scenegraph prop\n   */\n  getAnimator?: (\n    scenegraph: any,\n    context: {gl: WebGLRenderingContext; layer: ScenegraphLayer<DataT>}\n  ) => GLTFAnimator;\n  /**\n   * (Experimental) animation configurations. Requires `_animate` on deck object.\n   */\n  _animations?: {\n    [name: number | string | '*']: {\n      /** If the animation is playing */\n      playing?: boolean;\n      /** Start time of the animation, default `0` */\n      startTime?: number;\n      /** Speed multiplier of the animation, default `1` */\n      speed?: number;\n    };\n  } | null;\n  /**\n   * (Experimental) lighting mode\n   * @default 'flat'\n   */\n  _lighting?: 'flat' | 'pbr';\n  /**\n   * (Experimental) lighting environment. Requires `_lighting` to be `'pbr'`.\n   */\n  _imageBasedLightingEnvironment?:\n    | null\n    | GLTFEnvironment\n    | ((context: {gl: WebGLRenderingContext; layer: ScenegraphLayer<DataT>}) => GLTFEnvironment);\n\n  /** Anchor position accessor. */\n  getPosition?: Accessor<DataT, Position>;\n  /** Color value or accessor.\n   * @default [255, 255, 255, 255]\n   */\n  getColor?: Accessor<DataT, Color>;\n  /**\n   * Orientation in [pitch, yaw, roll] in degrees.\n   * @see https://en.wikipedia.org/wiki/Euler_angles\n   * @default [0, 0, 0]\n   */\n  getOrientation?: Accessor<DataT, [number, number, number]>;\n  /**\n   * Scaling factor of the model along each axis.\n   * @default [1, 1, 1]\n   */\n  getScale?: Accessor<DataT, [number, number, number]>;\n  /**\n   * Translation from the anchor point, [x, y, z] in meters.\n   * @default [0, 0, 0]\n   */\n  getTranslation?: Accessor<DataT, [number, number, number]>;\n  /**\n   * TransformMatrix. If specified, `getOrientation`, `getScale` and `getTranslation` are ignored.\n   */\n  getTransformMatrix?: Accessor<DataT, number[]>;\n  /**\n   * Multiplier to scale each geometry by.\n   * @default 1\n   */\n  sizeScale?: number;\n  /**\n   * The minimum size in pixels for one unit of the scene.\n   * @default 0\n   */\n  sizeMinPixels?: number;\n  /**\n   * The maximum size in pixels for one unit of the scene.\n   * @default Number.MAX_SAFE_INTEGER\n   */\n  sizeMaxPixels?: number;\n};\n\nconst defaultProps: DefaultProps<ScenegraphLayerProps> = {\n  scenegraph: {type: 'object', value: null, async: true},\n  getScene: gltf => {\n    if (gltf && gltf.scenes) {\n      // gltf post processor replaces `gltf.scene` number with the scene `object`\n      return typeof gltf.scene === 'object' ? gltf.scene : gltf.scenes[gltf.scene || 0];\n    }\n    return gltf;\n  },\n  getAnimator: scenegraph => scenegraph && scenegraph.animator,\n  _animations: null,\n\n  sizeScale: {type: 'number', value: 1, min: 0},\n  sizeMinPixels: {type: 'number', min: 0, value: 0},\n  sizeMaxPixels: {type: 'number', min: 0, value: Number.MAX_SAFE_INTEGER},\n\n  getPosition: {type: 'accessor', value: x => x.position},\n  getColor: {type: 'accessor', value: DEFAULT_COLOR},\n\n  // flat or pbr\n  _lighting: 'flat',\n  // _lighting must be pbr for this to work\n  _imageBasedLightingEnvironment: null,\n\n  // yaw, pitch and roll are in degrees\n  // https://en.wikipedia.org/wiki/Euler_angles\n  // [pitch, yaw, roll]\n  getOrientation: {type: 'accessor', value: [0, 0, 0]},\n  getScale: {type: 'accessor', value: [1, 1, 1]},\n  getTranslation: {type: 'accessor', value: [0, 0, 0]},\n  // 4x4 matrix\n  getTransformMatrix: {type: 'accessor', value: []},\n\n  loaders: [GLTFLoader]\n};\n\n/** Render a number of instances of a complete glTF scenegraph. */\nexport default class ScenegraphLayer<DataT = any, ExtraPropsT = {}> extends Layer<\n  ExtraPropsT & Required<_ScenegraphLayerProps<DataT>>\n> {\n  static defaultProps = defaultProps;\n  static layerName = 'ScenegraphLayer';\n\n  state!: {\n    scenegraph: GroupNode;\n    animator: GLTFAnimator;\n    attributesAvailable?: boolean;\n  };\n\n  getShaders() {\n    const modules = [project32, picking];\n\n    if (this.props._lighting === 'pbr') {\n      modules.push(pbr);\n    }\n\n    return {vs, fs, modules};\n  }\n\n  initializeState() {\n    const attributeManager = this.getAttributeManager();\n    // attributeManager is always defined for primitive layers\n    attributeManager!.addInstanced({\n      instancePositions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        accessor: 'getPosition',\n        transition: true\n      },\n      instanceColors: {\n        type: GL.UNSIGNED_BYTE,\n        size: this.props.colorFormat.length,\n        accessor: 'getColor',\n        normalized: true,\n        defaultValue: DEFAULT_COLOR,\n        transition: true\n      },\n      instanceModelMatrix: MATRIX_ATTRIBUTES\n    });\n  }\n\n  updateState(params: UpdateParameters<this>) {\n    super.updateState(params);\n    const {props, oldProps} = params;\n\n    if (props.scenegraph !== oldProps.scenegraph) {\n      this._updateScenegraph();\n    } else if (props._animations !== oldProps._animations) {\n      this._applyAnimationsProp(this.state.scenegraph, this.state.animator, props._animations);\n    }\n  }\n\n  finalizeState(context: LayerContext) {\n    super.finalizeState(context);\n    this._deleteScenegraph();\n  }\n\n  private _updateScenegraph(): void {\n    const props = this.props;\n    const {gl} = this.context;\n    let scenegraphData: any = null;\n    if (props.scenegraph instanceof ScenegraphNode) {\n      // Signature 1: props.scenegraph is a proper luma.gl Scenegraph\n      scenegraphData = {scenes: [props.scenegraph]};\n    } else if (props.scenegraph && !props.scenegraph.gltf) {\n      // Converts loaders.gl gltf to luma.gl scenegraph using the undocumented @luma.gl/experimental function\n      const gltf = props.scenegraph;\n      const gltfObjects = createGLTFObjects(gl, gltf, this._getModelOptions());\n      scenegraphData = {gltf, ...gltfObjects};\n\n      waitForGLTFAssets(gltfObjects).then(() => this.setNeedsRedraw()); // eslint-disable-line @typescript-eslint/no-floating-promises\n    } else if (props.scenegraph) {\n      // DEPRECATED PATH: Assumes this data was loaded through GLTFScenegraphLoader\n      log.deprecated(\n        'ScenegraphLayer.props.scenegraph',\n        'Use GLTFLoader instead of GLTFScenegraphLoader'\n      )();\n      scenegraphData = props.scenegraph;\n    }\n\n    const options = {layer: this, gl};\n    const scenegraph = props.getScene(scenegraphData, options);\n    const animator = props.getAnimator(scenegraphData, options);\n\n    if (scenegraph instanceof ScenegraphNode) {\n      this._deleteScenegraph();\n      this._applyAllAttributes(scenegraph);\n      this._applyAnimationsProp(scenegraph, animator, props._animations);\n      this.setState({scenegraph, animator});\n    } else if (scenegraph !== null) {\n      log.warn('invalid scenegraph:', scenegraph)();\n    }\n  }\n\n  private _applyAllAttributes(scenegraph: GroupNode): void {\n    if (this.state.attributesAvailable) {\n      // attributeManager is always defined for primitive layers\n      const allAttributes = this.getAttributeManager()!.getAttributes();\n      scenegraph.traverse(model => {\n        this._setModelAttributes(model.model, allAttributes);\n      });\n    }\n  }\n\n  private _applyAnimationsProp(\n    scenegraph: GroupNode,\n    animator: GLTFAnimator,\n    animationsProp: any\n  ): void {\n    if (!scenegraph || !animator || !animationsProp) {\n      return;\n    }\n\n    const animations = animator.getAnimations();\n\n    // sort() to ensure '*' comes first so that other values can override\n    Object.keys(animationsProp)\n      .sort()\n      .forEach(key => {\n        // Key can be:\n        //  - number for index number\n        //  - name for animation name\n        //  - * to affect all animations\n        const value = animationsProp[key];\n\n        if (key === '*') {\n          animations.forEach(animation => {\n            Object.assign(animation, value);\n          });\n        } else if (Number.isFinite(Number(key))) {\n          const number = Number(key);\n          if (number >= 0 && number < animations.length) {\n            Object.assign(animations[number], value);\n          } else {\n            log.warn(`animation ${key} not found`)();\n          }\n        } else {\n          const findResult = animations.find(({name}) => name === key);\n          if (findResult) {\n            Object.assign(findResult, value);\n          } else {\n            log.warn(`animation ${key} not found`)();\n          }\n        }\n      });\n  }\n\n  private _deleteScenegraph(): void {\n    const {scenegraph} = this.state;\n    if (scenegraph instanceof ScenegraphNode) {\n      scenegraph.delete();\n    }\n  }\n\n  private _getModelOptions(): any {\n    const {_imageBasedLightingEnvironment} = this.props;\n\n    let env: GLTFEnvironment | null = null;\n    if (_imageBasedLightingEnvironment) {\n      if (typeof _imageBasedLightingEnvironment === 'function') {\n        env = _imageBasedLightingEnvironment({gl: this.context.gl, layer: this});\n      } else {\n        env = _imageBasedLightingEnvironment;\n      }\n    }\n\n    return {\n      gl: this.context.gl,\n      waitForFullLoad: true,\n      imageBasedLightingEnvironment: env,\n      modelOptions: {\n        isInstanced: true,\n        transpileToGLSL100: !isWebGL2(this.context.gl),\n        ...this.getShaders()\n      },\n      // tangents are not supported\n      useTangents: false\n    };\n  }\n\n  updateAttributes(changedAttributes) {\n    this.setState({attributesAvailable: true});\n    if (!this.state.scenegraph) return;\n\n    this.state.scenegraph.traverse(model => {\n      this._setModelAttributes(model.model, changedAttributes);\n    });\n  }\n\n  draw({moduleParameters = null, parameters = {}, context}) {\n    if (!this.state.scenegraph) return;\n\n    if (this.props._animations && this.state.animator) {\n      this.state.animator.animate(context.timeline.getTime());\n      this.setNeedsRedraw();\n    }\n\n    const {viewport} = this.context;\n    const {sizeScale, sizeMinPixels, sizeMaxPixels, opacity, coordinateSystem} = this.props;\n    const numInstances = this.getNumInstances();\n    this.state.scenegraph.traverse((model, {worldMatrix}) => {\n      model.model.setInstanceCount(numInstances);\n      model.updateModuleSettings(moduleParameters);\n      model.draw({\n        parameters,\n        uniforms: {\n          sizeScale,\n          opacity,\n          sizeMinPixels,\n          sizeMaxPixels,\n          composeModelMatrix: shouldComposeModelMatrix(viewport, coordinateSystem),\n          sceneModelMatrix: worldMatrix,\n          // Needed for PBR (TODO: find better way to get it)\n          // eslint-disable-next-line camelcase\n          u_Camera: model.model.getUniforms().project_uCameraPosition\n        }\n      });\n    });\n  }\n}\n"],"file":"scenegraph-layer.js"}