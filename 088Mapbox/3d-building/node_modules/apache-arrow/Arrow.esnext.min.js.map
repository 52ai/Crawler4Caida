{"version":3,"sources":["webpack/universalModuleDefinition","webpack/bootstrap","flatbuffers/js/flatbuffers.mjs","text-encoding-utf-8/lib/encoding.lib.mjs","util/utf8.ts","io/interfaces.ts","util/compat.ts","util/buffer.ts","io/adapters.ts","vector.ts","fb/Schema.ts","fb/Message.ts","enum.ts","type.ts","util/bit.ts","data.ts","util/pretty.ts","builder/valid.ts","builder/buffer.ts","builder.ts","builder/bool.ts","builder/null.ts","builder/date.ts","builder/decimal.ts","builder/dictionary.ts","builder/fixedsizebinary.ts","util/math.ts","builder/float.ts","util/bn.ts","builder/int.ts","builder/time.ts","builder/timestamp.ts","builder/interval.ts","builder/binary.ts","builder/utf8.ts","builder/run.ts","schema.ts","builder/list.ts","builder/fixedsizelist.ts","builder/map.ts","builder/struct.ts","builder/union.ts","visitor.ts","visitor/set.ts","visitor/builderctor.ts","builder/index.ts","fb/File.ts","ipc/metadata/file.ts","io/stream.ts","io/file.ts","util/int.ts","visitor/vectorloader.ts","vector/row.ts","util/vector.ts","util/args.ts","vector/chunked.ts","column.ts","visitor/typeassembler.ts","ipc/metadata/json.ts","ipc/metadata/message.ts","ipc/message.ts","visitor/typecomparator.ts","visitor/vectorassembler.ts","visitor/jsontypeassembler.ts","visitor/jsonvectorassembler.ts","ipc/writer.ts","util/recordbatch.ts","vector/base.ts","vector/binary.ts","vector/bool.ts","vector/date.ts","vector/decimal.ts","vector/dictionary.ts","vector/fixedsizebinary.ts","vector/fixedsizelist.ts","vector/float.ts","vector/interval.ts","vector/int.ts","vector/list.ts","vector/map.ts","vector/null.ts","vector/struct.ts","vector/timestamp.ts","vector/time.ts","vector/union.ts","vector/utf8.ts","util/fn.ts","visitor/get.ts","visitor/indexof.ts","visitor/iterator.ts","visitor/toarray.ts","visitor/bytewidth.ts","visitor/vectorctor.ts","vector/index.ts","table.ts","recordbatch.ts","ipc/reader.ts","io/whatwg/builder.ts","io/whatwg/reader.ts","io/whatwg/writer.ts","compute/predicate.ts","compute/dataframe.ts","Arrow.ts","Arrow.dom.ts","io/whatwg/iterable.ts"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","flatbuffers","inRange","a","min","max","ToDictionary","undefined","TypeError","Offset","Table","SIZEOF_SHORT","SIZEOF_INT","FILE_IDENTIFIER_LENGTH","SIZE_PREFIX_LENGTH","Encoding","UTF8_BYTES","UTF16_STRING","int32","Int32Array","float32","Float32Array","buffer","float64","Float64Array","isLittleEndian","Uint16Array","Uint8Array","Long","low","high","this","ZERO","toFloat64","equals","other","Builder","opt_initial_size","initial_size","bb","ByteBuffer","allocate","space","minalign","vtable","vtable_in_use","isNested","object_start","vtables","vector_num_elems","force_defaults","clear","capacity","forceDefaults","dataBuffer","asUint8Array","bytes","subarray","position","offset","prep","size","additional_bytes","align_size","old_buf_size","growByteBuffer","pad","byte_size","writeInt8","writeInt16","writeInt32","writeInt64","writeFloat32","writeFloat64","addInt8","addInt16","addInt32","addInt64","addFloat32","addFloat64","addFieldInt8","voffset","defaultValue","slot","addFieldInt16","addFieldInt32","addFieldInt64","addFieldFloat32","addFieldFloat64","addFieldOffset","addOffset","addFieldStruct","nested","obj","Error","notNested","new_buf_size","nbb","setPosition","set","startObject","numfields","endObject","vtableloc","trimmed_size","len","existing_vtable","vt1","outer_loop","length","vt2","readInt16","j","push","finish","root_table","opt_file_identifier","opt_size_prefix","size_prefix","file_identifier","charCodeAt","finishSizePrefixed","requiredField","table","field","table_start","vtable_start","readInt32","startVector","elem_size","num_elems","alignment","endVector","createString","utf8","codePoint","createLong","bytes_","position_","readInt8","readUint8","readUint16","readUint32","readInt64","readUint64","readFloat32","readFloat64","writeUint8","writeUint16","writeUint32","writeUint64","getBufferIdentifier","result","String","fromCharCode","__offset","bb_pos","vtable_offset","__union","__string","opt_encoding","b","__indirect","__vector","__vector_len","__has_identifier","ident","Stream","tokens","slice","endOfStream","read","shift","prepend","token","Array","isArray","unshift","pop","finished","decoderError","fatal","opt_code_point","DEFAULT_ENCODING","encoding","options","toLowerCase","_streaming","_BOMseen","_decoder","_fatal","_ignoreBOM","_encoder","_options","UTF8Decoder","utf8_code_point","utf8_bytes_seen","utf8_bytes_needed","utf8_lower_boundary","utf8_upper_boundary","handler","stream","bite","code_point","UTF8Encoder","count","temp","decode","input","ArrayBuffer","byteOffset","byteLength","input_stream","code_points","apply","indexOf","cp","codePointsToString","encode","opt_string","string","u","stringToCodePoints","decoder","TextDecoder","decodeUtf8","encoder","TextEncoder","encodeUtf8","ITERATOR_DONE","freeze","done","ArrowJSON","_json","ReadableInterop","_getDOMStream","tee","writable","_getNodeStream","pipe","pipeTo","duplex","pipeThrough","_DOMStream","toDOMStream","_nodeStream","toNodeStream","super","_values","resolvers","_closedPromise","Promise","_closedPromiseResolve","reason","return","_ensureOpen","resolve","_error","error","reject","asyncIterator","_","abort","close","next","_args","BigIntCtor","BigIntAvailable","BigIntUnavailableError","BigIntUnavailable","asIntN","asUintN","BigInt","BigInt64ArrayCtor","BigInt64ArrayAvailable","BigInt64ArrayUnavailableError","BigInt64Array","BigUint64ArrayCtor","BigUint64ArrayAvailable","BigUint64ArrayUnavailableError","BigUint64Array","isNumber","x","isBoolean","isFunction","isObject","isPromise","then","isIterable","iterator","isAsyncIterable","isArrowJSON","isIteratorResult","isFileHandle","isFetchResponse","isReadableDOMStream","isReadableNodeStream","SharedArrayBuf","SharedArrayBuffer","memcpy","target","source","targetByteOffset","sourceByteLength","targetByteLength","dst","src","Math","joinUint8Arrays","chunks","xOffset","yOffset","xLen","yLen","y","collapseContiguousByteRanges","reduce","sliced","index","Infinity","toArrayBufferView","ArrayBufferViewCtor","isView","BYTES_PER_ELEMENT","from","toInt8Array","Int8Array","toInt16Array","Int16Array","toInt32Array","toBigInt64Array","toUint8Array","toUint16Array","toUint32Array","Uint32Array","toBigUint64Array","toFloat32Array","toFloat64Array","toUint8ClampedArray","Uint8ClampedArray","pump","toArrayBufferViewIterator","ArrayCtor","wrap","buffers","it","toInt8ArrayIterator","toInt16ArrayIterator","toInt32ArrayIterator","toUint8ArrayIterator","toUint16ArrayIterator","toUint32ArrayIterator","toFloat32ArrayIterator","toFloat64ArrayIterator","toUint8ClampedArrayIterator","async","toArrayBufferViewAsyncIterator","emit","toInt8ArrayAsyncIterator","toInt16ArrayAsyncIterator","toInt32ArrayAsyncIterator","toUint8ArrayAsyncIterator","toUint16ArrayAsyncIterator","toUint32ArrayAsyncIterator","toFloat32ArrayAsyncIterator","toFloat64ArrayAsyncIterator","toUint8ClampedArrayAsyncIterator","rebaseValueOffsets","valueOffsets","compareArrayLike","fromIterable","cmd","threw","bufferLength","byteRange","isNaN","e","throw","fromAsyncIterable","fromDOMStream","releaseLock","fromNodeStream","events","event","err","onEvent","race","map","isFinite","cleanup","evt","fn","destroy","byobReader","defaultReader","supportsBYOB","reader","getBYOBReader","getDefaultReader","catch","readFromBYOBReader","readInto","AbstractVector","MetadataVersion","Feature","UnionMode","Precision","DateUnit","TimeUnit","IntervalUnit","Type","DictionaryKind","Endianness","CompressionType","BodyCompressionMethod","MessageHeader","BufferType","proto","data","__init","builder","startNull","endNull","startStruct_","endStruct_","startList","endList","listSize","startFixedSizeList","addListSize","endFixedSizeList","keysSorted","startMap","addKeysSorted","endMap","Sparse","typeIdsOffset","numElems","startUnion","addMode","addTypeIds","endUnion","bitWidth","isSigned","startInt","addBitWidth","addIsSigned","endInt","HALF","precision","startFloatingPoint","addPrecision","endFloatingPoint","startUtf8","endUtf8","startBinary","endBinary","byteWidth","startFixedSizeBinary","addByteWidth","endFixedSizeBinary","startBool","endBool","scale","startDecimal","addScale","endDecimal","MILLISECOND","unit","startDate","addUnit","endDate","startTime","endTime","SECOND","optionalEncoding","timezoneOffset","startTimestamp","addTimezone","endTimestamp","YEAR_MONTH","startInterval","endInterval","keyOffset","valueOffset","startKeyValue","addKey","addValue","endKeyValue","DenseArray","id","indexTypeOffset","isOrdered","dictionaryKind","startDictionaryEncoding","addId","addIndexType","addIsOrdered","addDictionaryKind","endDictionaryEncoding","NONE","nameOffset","nullable","typeType","typeOffset","dictionaryOffset","childrenOffset","customMetadataOffset","startField","addName","addNullable","addTypeType","addType","addDictionary","addChildren","addCustomMetadata","endField","Buffer","Little","endianness","fieldsOffset","featuresOffset","startSchema","addEndianness","addFields","addFeatures","endSchema","FieldNode","null_count","LZ4_FRAME","BUFFER","codec","method","startBodyCompression","addCodec","addMethod","endBodyCompression","nodesOffset","buffersOffset","compressionOffset","startRecordBatch","addLength","addNodes","addBuffers","addCompression","endRecordBatch","dataOffset","isDelta","startDictionaryBatch","addData","addIsDelta","endDictionaryBatch","V1","version","headerType","headerOffset","bodyLength","startMessage","addVersion","addHeaderType","addHeader","addBodyLength","endMessage","getBool","_data","_index","byte","bit","getBit","setBool","truncateBitmap","bitmap","alignedSize","packBools","BitIterator","values","xs","begin","context","byteIndex","popcnt_bit_range","lhs","rhs","sum","rhsInside","lhsInside","popcnt_array","arr","cnt","pos","view","DataView","popcnt_uint32","getUint32","getUint16","getUint8","uint32","typeId","Null","Int","Float","Binary","Utf8","Bool","Decimal","Date","Time","Timestamp","Interval","List","Struct","Union","FixedSizeBinary","FixedSizeList","Map","Dictionary","children","ArrayType","Int8","Int16","Int32","Int64","Uint8","Uint16","Uint32","Uint64","SINGLE","DOUBLE","DAY","MICROSECOND","NANOSECOND","timezone","DAY_TIME","child","valueType","type","f","join","typeIds","typeIdToChildIndex","idx","Dense","getId","atomicDictionaryId","dictionary","indices","strideForType","nullCount","childData","floor","_nullCount","stride","nullBitmap","childStride","_sliceBuffers","clone","_sliceChildren","newLength","fill","VALIDITY","TYPE","OFFSET","DATA","valueOffsetsOrChildren","valueToString","toPrimitive","JSON","stringify","createIsValidFunction","nullValues","fnBody","noNaNs","filter","valueToCase","Function","roundLengthUpToNearest64Bytes","BPE","constructor","_resize","extra","reserved","array","sliceOrExtendArray","DataBufferBuilder","reserve","BitmapBufferBuilder","numValid","val","cur","OffsetsBufferBuilder","flush","_ArrayType64","buffer64","ArrayType64","nulls","_nulls","_isValid","queueingStrategy","highWaterMark","sizeProperty","numChunks","new","append","toVector","throughIterable","throughAsyncIterable","numInvalid","_offsets","_typeIds","reservedLength","reservedByteLength","setValid","isValid","setValue","_setValue","valid","numChildren","offsets","last","forEach","opts","_pendingLength","pending","_pending","current","_flush","pendingLength","_flushPending","DateDayBuilder","DateMillisecondBuilder","hashFn","_dictionaryOffset","_keysToIndices","valueToKey","keysToIndices","prev","_dictionary","curr","concat","f64","u32","uint16ToFloat64","h","expo","sigf","sign","NaN","float64ToUint16","Float32Builder","Float64Builder","isArrowBigNumSymbol","for","BigNum","setPrototypeOf","SignedBigNum","args","UnsignedBigNum","DecimalBigNum","bignumToNumber","bn","signed","words","number","hi","lo","bignumToString","bignumToBigInt","decimalToString","digits","base64","base32","checks","reverse","toJSON","valueOf","toString","hint","assign","num","Int8Builder","Int16Builder","Int32Builder","toBigInt","Uint8Builder","Uint16Builder","Uint32Builder","memo","TimeSecondBuilder","TimeMillisecondBuilder","TimeMicrosecondBuilder","TimeNanosecondBuilder","TimestampSecondBuilder","TimestampMillisecondBuilder","TimestampMicrosecondBuilder","TimestampNanosecondBuilder","IntervalDayTimeBuilder","IntervalYearMonthBuilder","fields","metadata","dictionaries","generateDictionaryMap","columnNames","names","columnIndices","Boolean","curFields","mergeMaps","newFields","f2","findIndex","newDictionaries","m1","m2","isDictionary","has","_run","run","childIndex","entries","_valueToChildTypeId","childTypeId","SparseUnionBuilder","getChildAt","Visitor","nodes","node","visit","getVisitFn","throwIfNotFound","visitor","dtype","inferDType","visitNull","visitBool","visitInt","visitInt8","visitInt16","visitInt32","visitInt64","visitUint8","visitUint16","visitUint32","visitUint64","visitFloat","Float16","visitFloat16","Float32","visitFloat32","Float64","visitFloat64","visitUtf8","visitBinary","visitFixedSizeBinary","visitDate","DateDay","visitDateDay","DateMillisecond","visitDateMillisecond","visitTimestamp","TimestampSecond","visitTimestampSecond","TimestampMillisecond","visitTimestampMillisecond","TimestampMicrosecond","visitTimestampMicrosecond","TimestampNanosecond","visitTimestampNanosecond","visitTime","TimeSecond","visitTimeSecond","TimeMillisecond","visitTimeMillisecond","TimeMicrosecond","visitTimeMicrosecond","TimeNanosecond","visitTimeNanosecond","visitDecimal","visitList","visitStruct","visitUnion","DenseUnion","visitDenseUnion","SparseUnion","visitSparseUnion","visitDictionary","visitInterval","IntervalDayTime","visitIntervalDayTime","IntervalYearMonth","visitIntervalYearMonth","visitFixedSizeList","visitMap","_node","setEpochMsToMillisecondsLong","epochMs","setVariableWidthBytes","setDateDay","setEpochMsToDays","setDateMillisecond","setNumeric","setFloat16","setNumericX2","vector","values64","long","setTimestampSecond","setTimestampMillisecond","setTimestampMicrosecond","setEpochMsToMicrosecondsLong","setTimestampNanosecond","setEpochMsToNanosecondsLong","setTimeSecond","setTimeMillisecond","setTimeMicrosecond","setTimeNanosecond","setDenseUnion","setSparseUnion","setIntervalDayTime","setIntervalYearMonth","itr","end","v","_setStructVectorValue","_setStructArrayValue","_setStructObjectValue","getKey","instance","newBuilder","defaultOptions","getChildOptions","keys","T","Block","schemaOffset","dictionariesOffset","recordBatchesOffset","startFooter","addSchema","addDictionaries","addRecordBatches","endFooter","metaDataLength","schema","V4","recordBatches","dictionaryBatches","_recordBatches","_dictionaryBatches","buf","footer","getRootAsFooter","OffHeapFooter","startRecordBatchesVector","numRecordBatches","rb","startDictionariesVector","numDictionaries","db","dictionaryBatchesOffset","finishFooterBuffer","block","getRecordBatch","getDictionaryBatch","_footer","recordBatchesLength","dictionariesLength","fileBlock","createBlock","write","sync","chunk","peek","body","closed","cancel","readAt","getInt32","nBytes","file","_handle","stat","bytesRead","intAsHex","kPowersOfTen","BaseInt64","L","R","product","lessThan","_times","_plus","out_buffer","fromString","str","out","posn","group","parseInt","substr","multiple","times","plus","left","right","this_high","other_high","negate","startsWith","Int128","L0","L1","L2","L3","R0","R1","R2","R3","multiply","sums","nodesIndex","buffersIndex","nextFieldNode","readNullBitmap","readData","readOffsets","visitMany","readTypeIds","readDictionary","nextBufferRange","_type","sources","isTimestamp","isInt","isTime","isDate","convertArray","isDecimal","isBinary","isFixedSizeBinary","joined","binaryDataFromJSON","isBool","isUtf8","kParent","kRowIndex","kKeyToIdx","kIdxToVal","kCustomInspect","parent","numKeys","ktoi","itov","getValue","getIndex","ki","vi","k","kr","vr","callbackfn","thisArg","callback","defineProperties","configurable","MapRow","createRowProxy","StructRow","defineRowProxyProperties","desc","row","setter","Proxy","RowProxyHandler","isExtensible","deleteProperty","preventExtensions","ownKeys","receiver","Reflect","clampIndex","adjust","tmp","clampRange","big0","isNaNFast","createElementComparator","search","typeofSearch","valueOfSearch","comparators","createSubElementsComparator","creatMapComparator","createArrayLikeComparator","createVectorComparator","createObjectComparator","compareArray","compareObject","vec","compareVector","lKeyItr","rKeyItr","rValItr","rVal","lKey","rKey","selectChunkArgs","Ctor","vals","_selectChunkArgs","selectVectorChildrenArgs","_selectVectorChildrenArgs","selectColumnChildrenArgs","_selectColumnChildrenArgs","_selectArgs","res","toKeysAndValues","_selectFieldArgs","ret","fieldIndex","valueIndex","ChunkedIterator","chunkIndex","chunkIterator","getChunkIterator","vectors","calculateOffsets","_chunks","_chunkOffsets","_length","_numChildren","flatten","_indices","others","_sliceInternal","columns","_children","mid","isValidInternal","getInternal","element","self","indexOfInternal","toArray","arraySet","typedSet","fromIndex","start","found","slices","chunkOffsets","chunkLength","chunkOffset","to","_field","SingleChunkColumn","rest","some","column","_chunk","startTypeIdsVector","createTypeIdsVector","indexType","recordBatchFromJSON","fieldNodesFromJSON","buffersFromJSON","fieldChildrenFromJSON","fromJSON","fieldNodes","validity","BufferRegion","customMetadataFromJSON","_metadata","indexTypeFromJSON","typeFromJSON","header","_version","_headerType","_createHeader","_bodyLength","msg","message","Schema","RecordBatch","DictionaryBatch","messageHeaderFromJSON","_message","getRootAsMessage","decodeMessageHeader","isSchema","isRecordBatch","isDictionaryBatch","finishMessageBuffer","_nodes","_buffers","_isDelta","_id","decodeFieldChildren","childrenLength","decodeCustomMetadata","entry","customMetadataLength","customMetadata","decodeIndexType","decodeFieldType","typeIdsArray","childOffsets","childrenVectorOffset","createChildrenVector","metadataOffset","createCustomMetadataVector","dictType","dictMeta","fieldOffsets","startFieldsVector","fieldsVectorOffset","createFieldsVector","platformIsLittleEndian","Big","_schema","fieldsLength","decodeSchemaFields","schemaFieldsFromJSON","recordBatch","startNodesVector","nodesVectorOffset","startBuffersVector","b_","buffersVectorOffset","batch","nodesLength","decodeFieldNodes","bufferRegions","buffersLength","decodeBuffers","dictionaryBatch","createFieldNode","createBuffer","setInt16","invalidMessageType","nullMessage","invalidMessageMetadata","expected","actual","invalidMessageBodyLength","readMetadataLength","readMetadata","throwIfNull","readMessage","PADDING","metadataLength","_body","_batchIndex","_dictionaryIndex","batches","flattenDataSources","MAGIC_STR","MAGIC","checkForMagicArrowString","magicLength","magicAndPadding","magicX2AndPadding","compareManyFields","every","compareFields","compareConstructor","compareAny","compareInt","compareFloat","compareDate","compareTimestamp","compareTime","compareUnion","compareInterval","compareSchemas","_byteLength","_bufferRegions","assembler","vectorChildren","assembleResult","RangeError","isNull","addBuffer","_nullV","assembleFlatVector","assembleFlatListVector","firstOffset","lastOffset","assembleListVector","assembleNestedVector","maxChildTypeId","childLengths","shiftedOffsets","unshiftedOffsets","childLength","bigNumsToStrings","binaryToString","octets","toUpperCase","_position","_started","_sink","_dictionaryBlocks","_recordBatchBlocks","_dictionaryDeltaOffsets","autoDestroy","writeLegacyIpcFormat","_autoDestroy","_writeLegacyIpcFormat","writableStrategy","readableStrategy","writeAll","writeAllAsync","reset","sink","isWritableNodeStream","objectMode","_writeFooter","_writeSchema","payload","_writeRecordBatch","flatbufferSize","prefixSize","nPaddingBytes","_write","of","_writePadding","_writeMessage","assemble","_writeDictionaries","_writeBodyBuffers","padding","_writeDictionaryBatch","writer","_writeMagic","_dictionaries","fieldToJSON","dictionaryBatchToJSON","records","noopBuf","nullBufs","bitmapLength","distributeVectorsIntoRecordBatches","vecs","batchArgs","numBatches","batchLength","numColumns","Number","distributeChildData","uniformlyDistributeChunksAcrossRecordBatches","_changeLengthAndBackfillNullBitmap","_bindDataAccessors","VectorName","isConcatSpreadable","vectorFromValuesWithType","DateDayVector","DateMillisecondVector","ArrowType","vectorTypeToDataType","InputType","arrayTypeToDataType","convertTo16Bit","Float16Vector","Float32Vector","Float64Vector","typeCtor","dataCtor","ctor","IntervalDayTimeVector","IntervalYearMonthVector","is64bit","convert32To64Bit","Int8Vector","Int16Vector","Int32Vector","_values64","Uint8Vector","Uint16Vector","Uint32Vector","_row","bound","TimestampSecondVector","TimestampMillisecondVector","TimestampMicrosecondVector","TimestampNanosecondVector","TimeSecondVector","TimeMillisecondVector","TimeMicrosecondVector","TimeNanosecondVector","DenseUnionVector","SparseUnionVector","partial0","partial2","epochMillisecondsLongToMs","epochMillisecondsToDate","getVariableWidthBytes","getDateDay","epochDaysToMs","epochDaysToDate","getDateMillisecond","epochMillisecondsLongToDate","getNumeric","getFloat16","getBigInts","getTimestampSecond","getTimestampMillisecond","getTimestampMicrosecond","epochMicrosecondsLongToMs","getTimestampNanosecond","epochNanosecondsLongToMs","getTimeSecond","getTimeMillisecond","getTimeMicrosecond","getTimeNanosecond","getDenseUnion","getSparseUnion","getIntervalDayTime","getIntervalYearMonth","interval","int32s","_vector","decimal","indexOfValue","searchElement","indexOfNull","compare","indexOfUnion","VectorIterator","getFn","vectorIterator","nullByte","nullBit","nullableIterator","arrayOfVector","variableWidthColumnErrorMessage","____","visitFields","newDataType","transform","getByteWidth","wrapNullableSet","VectorCtor","partialType0","empty","fromStruct","tableFromIterable","tableFromAsyncIterable","isSync","open","opening","cols","selectColumnArgs","getColumnAt","getColumnIndex","nameToIndex","selectAt","columnName","oldToNew","newIdx","_f","_fs","fs","selectFieldArgs","vs","batchData","ensureSameLengthData","collect","impl","_impl","isFile","isAsync","isStream","readRecordBatch","RecordBatchStreamReader","fromArrowJSON","AsyncRecordBatchFileReader","AsyncRecordBatchStreamReader","fromFileHandle","RecordBatchFileReader","fromAsyncByteStream","fromByteStream","readAllSync","readAllAsync","_recordBatchIndex","_loadVectors","types","_reader","shouldAutoDestroy","readSchema","_readNextMessageAndValidate","readMessageBody","_loadRecordBatch","_loadDictionaryBatch","_readFooter","_readDictionaryBatch","seek","_numChunks","_finished","_bufferedSize","builderOptions","_controller","_builder","_getSize","chunkByteLength","readableHighWaterMark","writableHighWaterMark","ReadableStream","_maybeFlush","WritableStream","_writeValueAndReturnChunkSize","bufferedSize","controller","desiredSize","_enqueue","enqueue","recordBatchReaderThroughDOMStream","queue","readable","recordBatchWriterThroughDOMStream","Value","Literal","LTeq","GTeq","Not","ge","le","eq","Col","colidx","Predicate","expr","And","Or","ComparisonPredicate","_bindLitLit","_bindLitCol","_bindColLit","_bindColCol","CombinationPredicate","accum","_batch","rtrn","left_func","right_func","col","lit","col_func","lastDictionary","reverseLookup","lastKey","func","CustomPredicate","bind_","and","or","custom","countBy","scan","scanReverse","predicate","batchIndex","numRows","count_by","countByteLength","ceil","log","counts","FilteredBatchIterator","predicateFunc","_predicate","isBound","util","compareTypes","bm","hwm","asyncIterableAsReadableDOMStream","iterableAsReadableDOMStream"],"mappings":"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","file":"Arrow.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Arrow\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Arrow\"] = factory();\n\telse\n\t\troot[\"Arrow\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/// @file\n/// @addtogroup flatbuffers_javascript_api\n/// @{\n/// @cond FLATBUFFERS_INTERNAL\n\n/**\n * @fileoverview\n *\n * Need to suppress 'global this' error so the Node.js export line doesn't cause\n * closure compile to error out.\n * @suppress {globalThis}\n */\n\n/**\n * @const\n * @namespace\n */\nvar flatbuffers = {};\n\n/**\n * @typedef {number}\n */\nflatbuffers.Offset;\n\n/**\n * @typedef {{\n *   bb: flatbuffers.ByteBuffer,\n *   bb_pos: number\n * }}\n */\nflatbuffers.Table;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_SHORT = 2;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_INT = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.FILE_IDENTIFIER_LENGTH = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZE_PREFIX_LENGTH = 4;\n\n/**\n * @enum {number}\n */\nflatbuffers.Encoding = {\n  UTF8_BYTES: 1,\n  UTF16_STRING: 2\n};\n\n/**\n * @type {Int32Array}\n * @const\n */\nflatbuffers.int32 = new Int32Array(2);\n\n/**\n * @type {Float32Array}\n * @const\n */\nflatbuffers.float32 = new Float32Array(flatbuffers.int32.buffer);\n\n/**\n * @type {Float64Array}\n * @const\n */\nflatbuffers.float64 = new Float64Array(flatbuffers.int32.buffer);\n\n/**\n * @type {boolean}\n * @const\n */\nflatbuffers.isLittleEndian = new Uint16Array(new Uint8Array([1, 0]).buffer)[0] === 1;\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @constructor\n * @param {number} low\n * @param {number} high\n */\nflatbuffers.Long = function(low, high) {\n  /**\n   * @type {number}\n   * @const\n   */\n  this.low = low | 0;\n\n  /**\n   * @type {number}\n   * @const\n   */\n  this.high = high | 0;\n};\n\n/**\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.Long.create = function(low, high) {\n  // Special-case zero to avoid GC overhead for default values\n  return low == 0 && high == 0 ? flatbuffers.Long.ZERO : new flatbuffers.Long(low, high);\n};\n\n/**\n * @returns {number}\n */\nflatbuffers.Long.prototype.toFloat64 = function() {\n  return (this.low >>> 0) + this.high * 0x100000000;\n};\n\n/**\n * @param {flatbuffers.Long} other\n * @returns {boolean}\n */\nflatbuffers.Long.prototype.equals = function(other) {\n  return this.low == other.low && this.high == other.high;\n};\n\n/**\n * @type {!flatbuffers.Long}\n * @const\n */\nflatbuffers.Long.ZERO = new flatbuffers.Long(0, 0);\n\n/// @endcond\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a FlatBufferBuilder.\n *\n * @constructor\n * @param {number=} opt_initial_size\n */\nflatbuffers.Builder = function(opt_initial_size) {\n  if (!opt_initial_size) {\n    var initial_size = 1024;\n  } else {\n    var initial_size = opt_initial_size;\n  }\n\n  /**\n   * @type {flatbuffers.ByteBuffer}\n   * @private\n   */\n  this.bb = flatbuffers.ByteBuffer.allocate(initial_size);\n\n  /**\n   * Remaining space in the ByteBuffer.\n   *\n   * @type {number}\n   * @private\n   */\n  this.space = initial_size;\n\n  /**\n   * Minimum alignment encountered so far.\n   *\n   * @type {number}\n   * @private\n   */\n  this.minalign = 1;\n\n  /**\n   * The vtable for the current table.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtable = null;\n\n  /**\n   * The amount of fields we're actually using.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vtable_in_use = 0;\n\n  /**\n   * Whether we are currently serializing a table.\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.isNested = false;\n\n  /**\n   * Starting offset of the current struct/table.\n   *\n   * @type {number}\n   * @private\n   */\n  this.object_start = 0;\n\n  /**\n   * List of offsets of all vtables.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtables = [];\n\n  /**\n   * For the current vector being built.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vector_num_elems = 0;\n\n  /**\n   * False omits default values from the serialized data\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.force_defaults = false;\n};\n\nflatbuffers.Builder.prototype.clear = function() {\n  this.bb.clear();\n  this.space = this.bb.capacity();\n  this.minalign = 1;\n  this.vtable = null;\n  this.vtable_in_use = 0;\n  this.isNested = false;\n  this.object_start = 0;\n  this.vtables = [];\n  this.vector_num_elems = 0;\n  this.force_defaults = false;\n};\n\n/**\n * In order to save space, fields that are set to their default value\n * don't get serialized into the buffer. Forcing defaults provides a\n * way to manually disable this optimization.\n *\n * @param {boolean} forceDefaults true always serializes default values\n */\nflatbuffers.Builder.prototype.forceDefaults = function(forceDefaults) {\n  this.force_defaults = forceDefaults;\n};\n\n/**\n * Get the ByteBuffer representing the FlatBuffer. Only call this after you've\n * called finish(). The actual data starts at the ByteBuffer's current position,\n * not necessarily at 0.\n *\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.Builder.prototype.dataBuffer = function() {\n  return this.bb;\n};\n\n/**\n * Get the bytes representing the FlatBuffer. Only call this after you've\n * called finish().\n *\n * @returns {!Uint8Array}\n */\nflatbuffers.Builder.prototype.asUint8Array = function() {\n  return this.bb.bytes().subarray(this.bb.position(), this.bb.position() + this.offset());\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Prepare to write an element of `size` after `additional_bytes` have been\n * written, e.g. if you write a string, you need to align such the int length\n * field is aligned to 4 bytes, and the string data follows it directly. If all\n * you need to do is alignment, `additional_bytes` will be 0.\n *\n * @param {number} size This is the of the new element to write\n * @param {number} additional_bytes The padding size\n */\nflatbuffers.Builder.prototype.prep = function(size, additional_bytes) {\n  // Track the biggest thing we've ever aligned to.\n  if (size > this.minalign) {\n    this.minalign = size;\n  }\n\n  // Find the amount of alignment needed such that `size` is properly\n  // aligned after `additional_bytes`\n  var align_size = ((~(this.bb.capacity() - this.space + additional_bytes)) + 1) & (size - 1);\n\n  // Reallocate the buffer if needed.\n  while (this.space < align_size + size + additional_bytes) {\n    var old_buf_size = this.bb.capacity();\n    this.bb = flatbuffers.Builder.growByteBuffer(this.bb);\n    this.space += this.bb.capacity() - old_buf_size;\n  }\n\n  this.pad(align_size);\n};\n\n/**\n * @param {number} byte_size\n */\nflatbuffers.Builder.prototype.pad = function(byte_size) {\n  for (var i = 0; i < byte_size; i++) {\n    this.bb.writeInt8(--this.space, 0);\n  }\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt8 = function(value) {\n  this.bb.writeInt8(this.space -= 1, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt16 = function(value) {\n  this.bb.writeInt16(this.space -= 2, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt32 = function(value) {\n  this.bb.writeInt32(this.space -= 4, value);\n};\n\n/**\n * @param {flatbuffers.Long} value\n */\nflatbuffers.Builder.prototype.writeInt64 = function(value) {\n  this.bb.writeInt64(this.space -= 8, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat32 = function(value) {\n  this.bb.writeFloat32(this.space -= 4, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat64 = function(value) {\n  this.bb.writeFloat64(this.space -= 8, value);\n};\n/// @endcond\n\n/**\n * Add an `int8` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int8` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt8 = function(value) {\n  this.prep(1, 0);\n  this.writeInt8(value);\n};\n\n/**\n * Add an `int16` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int16` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt16 = function(value) {\n  this.prep(2, 0);\n  this.writeInt16(value);\n};\n\n/**\n * Add an `int32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt32 = function(value) {\n  this.prep(4, 0);\n  this.writeInt32(value);\n};\n\n/**\n * Add an `int64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {flatbuffers.Long} value The `int64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt64 = function(value) {\n  this.prep(8, 0);\n  this.writeInt64(value);\n};\n\n/**\n * Add a `float32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat32 = function(value) {\n  this.prep(4, 0);\n  this.writeFloat32(value);\n};\n\n/**\n * Add a `float64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat64 = function(value) {\n  this.prep(8, 0);\n  this.writeFloat64(value);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt8 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt8(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt16 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt16(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Long} value\n * @param {flatbuffers.Long} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || !value.equals(defaultValue)) {\n    this.addInt64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldOffset = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addOffset(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structs are stored inline, so nothing additional is being added. `d` is always 0.\n *\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldStruct = function(voffset, value, defaultValue) {\n  if (value != defaultValue) {\n    this.nested(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structures are always stored inline, they need to be created right\n * where they're used.  You'll get this assertion failure if you\n * created it elsewhere.\n *\n * @param {flatbuffers.Offset} obj The offset of the created object\n */\nflatbuffers.Builder.prototype.nested = function(obj) {\n  if (obj != this.offset()) {\n    throw new Error('FlatBuffers: struct must be serialized inline.');\n  }\n};\n\n/**\n * Should not be creating any other object, string or vector\n * while an object is being constructed\n */\nflatbuffers.Builder.prototype.notNested = function() {\n  if (this.isNested) {\n    throw new Error('FlatBuffers: object serialization must not be nested.');\n  }\n};\n\n/**\n * Set the current vtable at `voffset` to the current location in the buffer.\n *\n * @param {number} voffset\n */\nflatbuffers.Builder.prototype.slot = function(voffset) {\n  this.vtable[voffset] = this.offset();\n};\n\n/**\n * @returns {flatbuffers.Offset} Offset relative to the end of the buffer.\n */\nflatbuffers.Builder.prototype.offset = function() {\n  return this.bb.capacity() - this.space;\n};\n\n/**\n * Doubles the size of the backing ByteBuffer and copies the old data towards\n * the end of the new buffer (since we build the buffer backwards).\n *\n * @param {flatbuffers.ByteBuffer} bb The current buffer with the existing data\n * @returns {!flatbuffers.ByteBuffer} A new byte buffer with the old data copied\n * to it. The data is located at the end of the buffer.\n *\n * uint8Array.set() formally takes {Array<number>|ArrayBufferView}, so to pass\n * it a uint8Array we need to suppress the type check:\n * @suppress {checkTypes}\n */\nflatbuffers.Builder.growByteBuffer = function(bb) {\n  var old_buf_size = bb.capacity();\n\n  // Ensure we don't grow beyond what fits in an int.\n  if (old_buf_size & 0xC0000000) {\n    throw new Error('FlatBuffers: cannot grow buffer beyond 2 gigabytes.');\n  }\n\n  var new_buf_size = old_buf_size << 1;\n  var nbb = flatbuffers.ByteBuffer.allocate(new_buf_size);\n  nbb.setPosition(new_buf_size - old_buf_size);\n  nbb.bytes().set(bb.bytes(), new_buf_size - old_buf_size);\n  return nbb;\n};\n/// @endcond\n\n/**\n * Adds on offset, relative to where it will be written.\n *\n * @param {flatbuffers.Offset} offset The offset to add.\n */\nflatbuffers.Builder.prototype.addOffset = function(offset) {\n  this.prep(flatbuffers.SIZEOF_INT, 0); // Ensure alignment is already done.\n  this.writeInt32(this.offset() - offset + flatbuffers.SIZEOF_INT);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Start encoding a new object in the buffer.  Users will not usually need to\n * call this directly. The FlatBuffers compiler will generate helper methods\n * that call this method internally.\n *\n * @param {number} numfields\n */\nflatbuffers.Builder.prototype.startObject = function(numfields) {\n  this.notNested();\n  if (this.vtable == null) {\n    this.vtable = [];\n  }\n  this.vtable_in_use = numfields;\n  for (var i = 0; i < numfields; i++) {\n    this.vtable[i] = 0; // This will push additional elements as needed\n  }\n  this.isNested = true;\n  this.object_start = this.offset();\n};\n\n/**\n * Finish off writing the object that is under construction.\n *\n * @returns {flatbuffers.Offset} The offset to the object inside `dataBuffer`\n */\nflatbuffers.Builder.prototype.endObject = function() {\n  if (this.vtable == null || !this.isNested) {\n    throw new Error('FlatBuffers: endObject called without startObject');\n  }\n\n  this.addInt32(0);\n  var vtableloc = this.offset();\n\n  // Trim trailing zeroes.\n  var i = this.vtable_in_use - 1;\n  for (; i >= 0 && this.vtable[i] == 0; i--) {}\n  var trimmed_size = i + 1;\n\n  // Write out the current vtable.\n  for (; i >= 0; i--) {\n    // Offset relative to the start of the table.\n    this.addInt16(this.vtable[i] != 0 ? vtableloc - this.vtable[i] : 0);\n  }\n\n  var standard_fields = 2; // The fields below:\n  this.addInt16(vtableloc - this.object_start);\n  var len = (trimmed_size + standard_fields) * flatbuffers.SIZEOF_SHORT;\n  this.addInt16(len);\n\n  // Search for an existing vtable that matches the current one.\n  var existing_vtable = 0;\n  var vt1 = this.space;\nouter_loop:\n  for (i = 0; i < this.vtables.length; i++) {\n    var vt2 = this.bb.capacity() - this.vtables[i];\n    if (len == this.bb.readInt16(vt2)) {\n      for (var j = flatbuffers.SIZEOF_SHORT; j < len; j += flatbuffers.SIZEOF_SHORT) {\n        if (this.bb.readInt16(vt1 + j) != this.bb.readInt16(vt2 + j)) {\n          continue outer_loop;\n        }\n      }\n      existing_vtable = this.vtables[i];\n      break;\n    }\n  }\n\n  if (existing_vtable) {\n    // Found a match:\n    // Remove the current vtable.\n    this.space = this.bb.capacity() - vtableloc;\n\n    // Point table to existing vtable.\n    this.bb.writeInt32(this.space, existing_vtable - vtableloc);\n  } else {\n    // No match:\n    // Add the location of the current vtable to the list of vtables.\n    this.vtables.push(this.offset());\n\n    // Point table to current vtable.\n    this.bb.writeInt32(this.bb.capacity() - vtableloc, this.offset() - vtableloc);\n  }\n\n  this.isNested = false;\n  return vtableloc;\n};\n/// @endcond\n\n/**\n * Finalize a buffer, poiting to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n * @param {boolean=} opt_size_prefix\n */\nflatbuffers.Builder.prototype.finish = function(root_table, opt_file_identifier, opt_size_prefix) {\n  var size_prefix = opt_size_prefix ? flatbuffers.SIZE_PREFIX_LENGTH : 0;\n  if (opt_file_identifier) {\n    var file_identifier = opt_file_identifier;\n    this.prep(this.minalign, flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH + size_prefix);\n    if (file_identifier.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n      throw new Error('FlatBuffers: file identifier must be length ' +\n        flatbuffers.FILE_IDENTIFIER_LENGTH);\n    }\n    for (var i = flatbuffers.FILE_IDENTIFIER_LENGTH - 1; i >= 0; i--) {\n      this.writeInt8(file_identifier.charCodeAt(i));\n    }\n  }\n  this.prep(this.minalign, flatbuffers.SIZEOF_INT + size_prefix);\n  this.addOffset(root_table);\n  if (size_prefix) {\n    this.addInt32(this.bb.capacity() - this.space);\n  }\n  this.bb.setPosition(this.space);\n};\n\n/**\n * Finalize a size prefixed buffer, pointing to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n */\nflatbuffers.Builder.prototype.finishSizePrefixed = function (root_table, opt_file_identifier) {\n  this.finish(root_table, opt_file_identifier, true);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * This checks a required field has been set in a given table that has\n * just been constructed.\n *\n * @param {flatbuffers.Offset} table\n * @param {number} field\n */\nflatbuffers.Builder.prototype.requiredField = function(table, field) {\n  var table_start = this.bb.capacity() - table;\n  var vtable_start = table_start - this.bb.readInt32(table_start);\n  var ok = this.bb.readInt16(vtable_start + field) != 0;\n\n  // If this fails, the caller will show what field needs to be set.\n  if (!ok) {\n    throw new Error('FlatBuffers: field ' + field + ' must be set');\n  }\n};\n\n/**\n * Start a new array/vector of objects.  Users usually will not call\n * this directly. The FlatBuffers compiler will create a start/end\n * method for vector types in generated code.\n *\n * @param {number} elem_size The size of each element in the array\n * @param {number} num_elems The number of elements in the array\n * @param {number} alignment The alignment of the array\n */\nflatbuffers.Builder.prototype.startVector = function(elem_size, num_elems, alignment) {\n  this.notNested();\n  this.vector_num_elems = num_elems;\n  this.prep(flatbuffers.SIZEOF_INT, elem_size * num_elems);\n  this.prep(alignment, elem_size * num_elems); // Just in case alignment > int.\n};\n\n/**\n * Finish off the creation of an array and all its elements. The array must be\n * created with `startVector`.\n *\n * @returns {flatbuffers.Offset} The offset at which the newly created array\n * starts.\n */\nflatbuffers.Builder.prototype.endVector = function() {\n  this.writeInt32(this.vector_num_elems);\n  return this.offset();\n};\n/// @endcond\n\n/**\n * Encode the string `s` in the buffer using UTF-8. If a Uint8Array is passed\n * instead of a string, it is assumed to contain valid UTF-8 encoded data.\n *\n * @param {string|Uint8Array} s The string to encode\n * @return {flatbuffers.Offset} The offset in the buffer where the encoded string starts\n */\nflatbuffers.Builder.prototype.createString = function(s) {\n  if (s instanceof Uint8Array) {\n    var utf8 = s;\n  } else {\n    var utf8 = [];\n    var i = 0;\n\n    while (i < s.length) {\n      var codePoint;\n\n      // Decode UTF-16\n      var a = s.charCodeAt(i++);\n      if (a < 0xD800 || a >= 0xDC00) {\n        codePoint = a;\n      } else {\n        var b = s.charCodeAt(i++);\n        codePoint = (a << 10) + b + (0x10000 - (0xD800 << 10) - 0xDC00);\n      }\n\n      // Encode UTF-8\n      if (codePoint < 0x80) {\n        utf8.push(codePoint);\n      } else {\n        if (codePoint < 0x800) {\n          utf8.push(((codePoint >> 6) & 0x1F) | 0xC0);\n        } else {\n          if (codePoint < 0x10000) {\n            utf8.push(((codePoint >> 12) & 0x0F) | 0xE0);\n          } else {\n            utf8.push(\n              ((codePoint >> 18) & 0x07) | 0xF0,\n              ((codePoint >> 12) & 0x3F) | 0x80);\n          }\n          utf8.push(((codePoint >> 6) & 0x3F) | 0x80);\n        }\n        utf8.push((codePoint & 0x3F) | 0x80);\n      }\n    }\n  }\n\n  this.addInt8(0);\n  this.startVector(1, utf8.length, 1);\n  this.bb.setPosition(this.space -= utf8.length);\n  for (var i = 0, offset = this.space, bytes = this.bb.bytes(); i < utf8.length; i++) {\n    bytes[offset++] = utf8[i];\n  }\n  return this.endVector();\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.Builder.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n////////////////////////////////////////////////////////////////////////////////\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Create a new ByteBuffer with a given array of bytes (`Uint8Array`).\n *\n * @constructor\n * @param {Uint8Array} bytes\n */\nflatbuffers.ByteBuffer = function(bytes) {\n  /**\n   * @type {Uint8Array}\n   * @private\n   */\n  this.bytes_ = bytes;\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.position_ = 0;\n};\n\n/**\n * Create and allocate a new ByteBuffer with a given size.\n *\n * @param {number} byte_size\n * @returns {!flatbuffers.ByteBuffer}\n */\nflatbuffers.ByteBuffer.allocate = function(byte_size) {\n  return new flatbuffers.ByteBuffer(new Uint8Array(byte_size));\n};\n\nflatbuffers.ByteBuffer.prototype.clear = function() {\n  this.position_ = 0;\n};\n\n/**\n * Get the underlying `Uint8Array`.\n *\n * @returns {Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.bytes = function() {\n  return this.bytes_;\n};\n\n/**\n * Get the buffer's position.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.position = function() {\n  return this.position_;\n};\n\n/**\n * Set the buffer's position.\n *\n * @param {number} position\n */\nflatbuffers.ByteBuffer.prototype.setPosition = function(position) {\n  this.position_ = position;\n};\n\n/**\n * Get the buffer's capacity.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.capacity = function() {\n  return this.bytes_.length;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt8 = function(offset) {\n  return this.readUint8(offset) << 24 >> 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint8 = function(offset) {\n  return this.bytes_[offset];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt16 = function(offset) {\n  return this.readUint16(offset) << 16 >> 16;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint16 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt32 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8 | this.bytes_[offset + 2] << 16 | this.bytes_[offset + 3] << 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint32 = function(offset) {\n  return this.readInt32(offset) >>> 0;\n};\n\n/**\n * @param {number} offset\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readInt64 = function(offset) {\n  return new flatbuffers.Long(this.readInt32(offset), this.readInt32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readUint64 = function(offset) {\n  return new flatbuffers.Long(this.readUint32(offset), this.readUint32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat32 = function(offset) {\n  flatbuffers.int32[0] = this.readInt32(offset);\n  return flatbuffers.float32[0];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat64 = function(offset) {\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1] = this.readInt32(offset);\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0] = this.readInt32(offset + 4);\n  return flatbuffers.float64[0];\n};\n\n/**\n * @param {number} offset\n * @param {number|boolean} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt8 = function(offset, value) {\n  this.bytes_[offset] = /** @type {number} */(value);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint8 = function(offset, value) {\n  this.bytes_[offset] = value;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt16 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint16 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt32 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n  this.bytes_[offset + 2] = value >> 16;\n  this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint32 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n    this.bytes_[offset + 2] = value >> 16;\n    this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt64 = function(offset, value) {\n  this.writeInt32(offset, value.low);\n  this.writeInt32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint64 = function(offset, value) {\n    this.writeUint32(offset, value.low);\n    this.writeUint32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat32 = function(offset, value) {\n  flatbuffers.float32[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[0]);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat64 = function(offset, value) {\n  flatbuffers.float64[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1]);\n  this.writeInt32(offset + 4, flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0]);\n};\n\n/**\n * Return the file identifier.   Behavior is undefined for FlatBuffers whose\n * schema does not include a file_identifier (likely points at padding or the\n * start of a the root vtable).\n * @returns {string}\n */\nflatbuffers.ByteBuffer.prototype.getBufferIdentifier = function() {\n  if (this.bytes_.length < this.position_ + flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error(\n        'FlatBuffers: ByteBuffer is too short to contain an identifier.');\n  }\n  var result = \"\";\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    result += String.fromCharCode(\n        this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i));\n  }\n  return result;\n};\n\n/**\n * Look up a field in the vtable, return an offset into the object, or 0 if the\n * field is not present.\n *\n * @param {number} bb_pos\n * @param {number} vtable_offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__offset = function(bb_pos, vtable_offset) {\n  var vtable = bb_pos - this.readInt32(bb_pos);\n  return vtable_offset < this.readInt16(vtable) ? this.readInt16(vtable + vtable_offset) : 0;\n};\n\n/**\n * Initialize any Table-derived type to point to the union at the given offset.\n *\n * @param {flatbuffers.Table} t\n * @param {number} offset\n * @returns {flatbuffers.Table}\n */\nflatbuffers.ByteBuffer.prototype.__union = function(t, offset) {\n  t.bb_pos = offset + this.readInt32(offset);\n  t.bb = this;\n  return t;\n};\n\n/**\n * Create a JavaScript string from UTF-8 data stored inside the FlatBuffer.\n * This allocates a new string and converts to wide chars upon each access.\n *\n * To avoid the conversion to UTF-16, pass flatbuffers.Encoding.UTF8_BYTES as\n * the \"optionalEncoding\" argument. This is useful for avoiding conversion to\n * and from UTF-16 when the data will just be packaged back up in another\n * FlatBuffer later on.\n *\n * @param {number} offset\n * @param {flatbuffers.Encoding=} opt_encoding Defaults to UTF16_STRING\n * @returns {string|!Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.__string = function(offset, opt_encoding) {\n  offset += this.readInt32(offset);\n\n  var length = this.readInt32(offset);\n  var result = '';\n  var i = 0;\n\n  offset += flatbuffers.SIZEOF_INT;\n\n  if (opt_encoding === flatbuffers.Encoding.UTF8_BYTES) {\n    return this.bytes_.subarray(offset, offset + length);\n  }\n\n  while (i < length) {\n    var codePoint;\n\n    // Decode UTF-8\n    var a = this.readUint8(offset + i++);\n    if (a < 0xC0) {\n      codePoint = a;\n    } else {\n      var b = this.readUint8(offset + i++);\n      if (a < 0xE0) {\n        codePoint =\n          ((a & 0x1F) << 6) |\n          (b & 0x3F);\n      } else {\n        var c = this.readUint8(offset + i++);\n        if (a < 0xF0) {\n          codePoint =\n            ((a & 0x0F) << 12) |\n            ((b & 0x3F) << 6) |\n            (c & 0x3F);\n        } else {\n          var d = this.readUint8(offset + i++);\n          codePoint =\n            ((a & 0x07) << 18) |\n            ((b & 0x3F) << 12) |\n            ((c & 0x3F) << 6) |\n            (d & 0x3F);\n        }\n      }\n    }\n\n    // Encode UTF-16\n    if (codePoint < 0x10000) {\n      result += String.fromCharCode(codePoint);\n    } else {\n      codePoint -= 0x10000;\n      result += String.fromCharCode(\n        (codePoint >> 10) + 0xD800,\n        (codePoint & ((1 << 10) - 1)) + 0xDC00);\n    }\n  }\n\n  return result;\n};\n\n/**\n * Retrieve the relative offset stored at \"offset\"\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__indirect = function(offset) {\n  return offset + this.readInt32(offset);\n};\n\n/**\n * Get the start of data of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector = function(offset) {\n  return offset + this.readInt32(offset) + flatbuffers.SIZEOF_INT; // data starts after the length\n};\n\n/**\n * Get the length of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector_len = function(offset) {\n  return this.readInt32(offset + this.readInt32(offset));\n};\n\n/**\n * @param {string} ident\n * @returns {boolean}\n */\nflatbuffers.ByteBuffer.prototype.__has_identifier = function(ident) {\n  if (ident.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error('FlatBuffers: file identifier must be length ' +\n                    flatbuffers.FILE_IDENTIFIER_LENGTH);\n  }\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    if (ident.charCodeAt(i) != this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n\n// Exports for Node.js and RequireJS\nexport { flatbuffers };\n\n/// @endcond\n/// @}\n","'use strict';\n\n// This is free and unencumbered software released into the public domain.\n// See LICENSE.md for more information.\n\n//\n// Utilities\n//\n\n/**\n * @param {number} a The number to test.\n * @param {number} min The minimum value in the range, inclusive.\n * @param {number} max The maximum value in the range, inclusive.\n * @return {boolean} True if a >= min and a <= max.\n */\nfunction inRange(a, min, max) {\n  return min <= a && a <= max;\n}\n\n/**\n * @param {*} o\n * @return {Object}\n */\nfunction ToDictionary(o) {\n  if (o === undefined) return {};\n  if (o === Object(o)) return o;\n  throw TypeError('Could not convert argument to dictionary');\n}\n\n/**\n * @param {string} string Input string of UTF-16 code units.\n * @return {!Array.<number>} Code points.\n */\nfunction stringToCodePoints(string) {\n  // https://heycam.github.io/webidl/#dfn-obtain-unicode\n\n  // 1. Let S be the DOMString value.\n  var s = String(string);\n\n  // 2. Let n be the length of S.\n  var n = s.length;\n\n  // 3. Initialize i to 0.\n  var i = 0;\n\n  // 4. Initialize U to be an empty sequence of Unicode characters.\n  var u = [];\n\n  // 5. While i < n:\n  while (i < n) {\n\n    // 1. Let c be the code unit in S at index i.\n    var c = s.charCodeAt(i);\n\n    // 2. Depending on the value of c:\n\n    // c < 0xD800 or c > 0xDFFF\n    if (c < 0xD800 || c > 0xDFFF) {\n      // Append to U the Unicode character with code point c.\n      u.push(c);\n    }\n\n    // 0xDC00 ≤ c ≤ 0xDFFF\n    else if (0xDC00 <= c && c <= 0xDFFF) {\n      // Append to U a U+FFFD REPLACEMENT CHARACTER.\n      u.push(0xFFFD);\n    }\n\n    // 0xD800 ≤ c ≤ 0xDBFF\n    else if (0xD800 <= c && c <= 0xDBFF) {\n      // 1. If i = n−1, then append to U a U+FFFD REPLACEMENT\n      // CHARACTER.\n      if (i === n - 1) {\n        u.push(0xFFFD);\n      }\n      // 2. Otherwise, i < n−1:\n      else {\n        // 1. Let d be the code unit in S at index i+1.\n        var d = string.charCodeAt(i + 1);\n\n        // 2. If 0xDC00 ≤ d ≤ 0xDFFF, then:\n        if (0xDC00 <= d && d <= 0xDFFF) {\n          // 1. Let a be c & 0x3FF.\n          var a = c & 0x3FF;\n\n          // 2. Let b be d & 0x3FF.\n          var b = d & 0x3FF;\n\n          // 3. Append to U the Unicode character with code point\n          // 2^16+2^10*a+b.\n          u.push(0x10000 + (a << 10) + b);\n\n          // 4. Set i to i+1.\n          i += 1;\n        }\n\n        // 3. Otherwise, d < 0xDC00 or d > 0xDFFF. Append to U a\n        // U+FFFD REPLACEMENT CHARACTER.\n        else  {\n          u.push(0xFFFD);\n        }\n      }\n    }\n\n    // 3. Set i to i+1.\n    i += 1;\n  }\n\n  // 6. Return U.\n  return u;\n}\n\n/**\n * @param {!Array.<number>} code_points Array of code points.\n * @return {string} string String of UTF-16 code units.\n */\nfunction codePointsToString(code_points) {\n  var s = '';\n  for (var i = 0; i < code_points.length; ++i) {\n    var cp = code_points[i];\n    if (cp <= 0xFFFF) {\n      s += String.fromCharCode(cp);\n    } else {\n      cp -= 0x10000;\n      s += String.fromCharCode((cp >> 10) + 0xD800,\n                               (cp & 0x3FF) + 0xDC00);\n    }\n  }\n  return s;\n}\n\n\n//\n// Implementation of Encoding specification\n// https://encoding.spec.whatwg.org/\n//\n\n//\n// 3. Terminology\n//\n\n/**\n * End-of-stream is a special token that signifies no more tokens\n * are in the stream.\n * @const\n */ var end_of_stream = -1;\n\n/**\n * A stream represents an ordered sequence of tokens.\n *\n * @constructor\n * @param {!(Array.<number>|Uint8Array)} tokens Array of tokens that provide the\n * stream.\n */\nfunction Stream(tokens) {\n  /** @type {!Array.<number>} */\n  this.tokens = [].slice.call(tokens);\n}\n\nStream.prototype = {\n  /**\n   * @return {boolean} True if end-of-stream has been hit.\n   */\n  endOfStream: function() {\n    return !this.tokens.length;\n  },\n\n  /**\n   * When a token is read from a stream, the first token in the\n   * stream must be returned and subsequently removed, and\n   * end-of-stream must be returned otherwise.\n   *\n   * @return {number} Get the next token from the stream, or\n   * end_of_stream.\n   */\n   read: function() {\n    if (!this.tokens.length)\n      return end_of_stream;\n     return this.tokens.shift();\n   },\n\n  /**\n   * When one or more tokens are prepended to a stream, those tokens\n   * must be inserted, in given order, before the first token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The token(s) to prepend to the stream.\n   */\n  prepend: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.unshift(tokens.pop());\n    } else {\n      this.tokens.unshift(token);\n    }\n  },\n\n  /**\n   * When one or more tokens are pushed to a stream, those tokens\n   * must be inserted, in given order, after the last token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The tokens(s) to prepend to the stream.\n   */\n  push: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.push(tokens.shift());\n    } else {\n      this.tokens.push(token);\n    }\n  }\n};\n\n//\n// 4. Encodings\n//\n\n// 4.1 Encoders and decoders\n\n/** @const */\nvar finished = -1;\n\n/**\n * @param {boolean} fatal If true, decoding errors raise an exception.\n * @param {number=} opt_code_point Override the standard fallback code point.\n * @return {number} The code point to insert on a decoding error.\n */\nfunction decoderError(fatal, opt_code_point) {\n  if (fatal)\n    throw TypeError('Decoder error');\n  return opt_code_point || 0xFFFD;\n}\n\n/** @interface */\nfunction Decoder() {}\nDecoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point, or |finished|.\n   */\n  handler: function(stream, bite) {}\n};\n\n/** @interface */\nfunction Encoder() {}\nEncoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of code points being encoded.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit, or |finished|.\n   */\n  handler: function(stream, code_point) {}\n};\n\n//\n// 7. API\n//\n\n/** @const */ var DEFAULT_ENCODING = 'utf-8';\n\n// 7.1 Interface TextDecoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextDecoder(encoding, options) {\n  if (!(this instanceof TextDecoder)) {\n    return new TextDecoder(encoding, options);\n  }\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {boolean} */\n  this._BOMseen = false;\n  /** @private @type {?Decoder} */\n  this._decoder = null;\n  /** @private @type {boolean} */\n  this._fatal = Boolean(options['fatal']);\n  /** @private @type {boolean} */\n  this._ignoreBOM = Boolean(options['ignoreBOM']);\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n  Object.defineProperty(this, 'fatal', {value: this._fatal});\n  Object.defineProperty(this, 'ignoreBOM', {value: this._ignoreBOM});\n}\n\nTextDecoder.prototype = {\n  /**\n   * @param {ArrayBufferView=} input The buffer of bytes to decode.\n   * @param {Object=} options\n   * @return {string} The decoded string.\n   */\n  decode: function decode(input, options) {\n    var bytes;\n    if (typeof input === 'object' && input instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input);\n    } else if (typeof input === 'object' && 'buffer' in input &&\n               input.buffer instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input.buffer,\n                             input.byteOffset,\n                             input.byteLength);\n    } else {\n      bytes = new Uint8Array(0);\n    }\n\n    options = ToDictionary(options);\n\n    if (!this._streaming) {\n      this._decoder = new UTF8Decoder({fatal: this._fatal});\n      this._BOMseen = false;\n    }\n    this._streaming = Boolean(options['stream']);\n\n    var input_stream = new Stream(bytes);\n\n    var code_points = [];\n\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n\n    while (!input_stream.endOfStream()) {\n      result = this._decoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (result === null)\n        continue;\n      if (Array.isArray(result))\n        code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n      else\n        code_points.push(result);\n    }\n    if (!this._streaming) {\n      do {\n        result = this._decoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (result === null)\n          continue;\n        if (Array.isArray(result))\n          code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n        else\n          code_points.push(result);\n      } while (!input_stream.endOfStream());\n      this._decoder = null;\n    }\n\n    if (code_points.length) {\n      // If encoding is one of utf-8, utf-16be, and utf-16le, and\n      // ignore BOM flag and BOM seen flag are unset, run these\n      // subsubsteps:\n      if (['utf-8'].indexOf(this.encoding) !== -1 &&\n          !this._ignoreBOM && !this._BOMseen) {\n        // If token is U+FEFF, set BOM seen flag.\n        if (code_points[0] === 0xFEFF) {\n          this._BOMseen = true;\n          code_points.shift();\n        } else {\n          // Otherwise, if token is not end-of-stream, set BOM seen\n          // flag and append token to output.\n          this._BOMseen = true;\n        }\n      }\n    }\n\n    return codePointsToString(code_points);\n  }\n};\n\n// 7.2 Interface TextEncoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextEncoder(encoding, options) {\n  if (!(this instanceof TextEncoder))\n    return new TextEncoder(encoding, options);\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {?Encoder} */\n  this._encoder = null;\n  /** @private @type {{fatal: boolean}} */\n  this._options = {fatal: Boolean(options['fatal'])};\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n}\n\nTextEncoder.prototype = {\n  /**\n   * @param {string=} opt_string The string to encode.\n   * @param {Object=} options\n   * @return {Uint8Array} Encoded bytes, as a Uint8Array.\n   */\n  encode: function encode(opt_string, options) {\n    opt_string = opt_string ? String(opt_string) : '';\n    options = ToDictionary(options);\n\n    // NOTE: This option is nonstandard. None of the encodings\n    // permitted for encoding (i.e. UTF-8, UTF-16) are stateful,\n    // so streaming is not necessary.\n    if (!this._streaming)\n      this._encoder = new UTF8Encoder(this._options);\n    this._streaming = Boolean(options['stream']);\n\n    var bytes = [];\n    var input_stream = new Stream(stringToCodePoints(opt_string));\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n    while (!input_stream.endOfStream()) {\n      result = this._encoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (Array.isArray(result))\n        bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n      else\n        bytes.push(result);\n    }\n    if (!this._streaming) {\n      while (true) {\n        result = this._encoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (Array.isArray(result))\n          bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n        else\n          bytes.push(result);\n      }\n      this._encoder = null;\n    }\n    return new Uint8Array(bytes);\n  }\n};\n\n//\n// 8. The encoding\n//\n\n// 8.1 utf-8\n\n/**\n * @constructor\n * @implements {Decoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Decoder(options) {\n  var fatal = options.fatal;\n\n  // utf-8's decoder's has an associated utf-8 code point, utf-8\n  // bytes seen, and utf-8 bytes needed (all initially 0), a utf-8\n  // lower boundary (initially 0x80), and a utf-8 upper boundary\n  // (initially 0xBF).\n  var /** @type {number} */ utf8_code_point = 0,\n      /** @type {number} */ utf8_bytes_seen = 0,\n      /** @type {number} */ utf8_bytes_needed = 0,\n      /** @type {number} */ utf8_lower_boundary = 0x80,\n      /** @type {number} */ utf8_upper_boundary = 0xBF;\n\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point.\n   */\n  this.handler = function(stream, bite) {\n    // 1. If byte is end-of-stream and utf-8 bytes needed is not 0,\n    // set utf-8 bytes needed to 0 and return error.\n    if (bite === end_of_stream && utf8_bytes_needed !== 0) {\n      utf8_bytes_needed = 0;\n      return decoderError(fatal);\n    }\n\n    // 2. If byte is end-of-stream, return finished.\n    if (bite === end_of_stream)\n      return finished;\n\n    // 3. If utf-8 bytes needed is 0, based on byte:\n    if (utf8_bytes_needed === 0) {\n\n      // 0x00 to 0x7F\n      if (inRange(bite, 0x00, 0x7F)) {\n        // Return a code point whose value is byte.\n        return bite;\n      }\n\n      // 0xC2 to 0xDF\n      if (inRange(bite, 0xC2, 0xDF)) {\n        // Set utf-8 bytes needed to 1 and utf-8 code point to byte\n        // − 0xC0.\n        utf8_bytes_needed = 1;\n        utf8_code_point = bite - 0xC0;\n      }\n\n      // 0xE0 to 0xEF\n      else if (inRange(bite, 0xE0, 0xEF)) {\n        // 1. If byte is 0xE0, set utf-8 lower boundary to 0xA0.\n        if (bite === 0xE0)\n          utf8_lower_boundary = 0xA0;\n        // 2. If byte is 0xED, set utf-8 upper boundary to 0x9F.\n        if (bite === 0xED)\n          utf8_upper_boundary = 0x9F;\n        // 3. Set utf-8 bytes needed to 2 and utf-8 code point to\n        // byte − 0xE0.\n        utf8_bytes_needed = 2;\n        utf8_code_point = bite - 0xE0;\n      }\n\n      // 0xF0 to 0xF4\n      else if (inRange(bite, 0xF0, 0xF4)) {\n        // 1. If byte is 0xF0, set utf-8 lower boundary to 0x90.\n        if (bite === 0xF0)\n          utf8_lower_boundary = 0x90;\n        // 2. If byte is 0xF4, set utf-8 upper boundary to 0x8F.\n        if (bite === 0xF4)\n          utf8_upper_boundary = 0x8F;\n        // 3. Set utf-8 bytes needed to 3 and utf-8 code point to\n        // byte − 0xF0.\n        utf8_bytes_needed = 3;\n        utf8_code_point = bite - 0xF0;\n      }\n\n      // Otherwise\n      else {\n        // Return error.\n        return decoderError(fatal);\n      }\n\n      // Then (byte is in the range 0xC2 to 0xF4) set utf-8 code\n      // point to utf-8 code point << (6 × utf-8 bytes needed) and\n      // return continue.\n      utf8_code_point = utf8_code_point << (6 * utf8_bytes_needed);\n      return null;\n    }\n\n    // 4. If byte is not in the range utf-8 lower boundary to utf-8\n    // upper boundary, run these substeps:\n    if (!inRange(bite, utf8_lower_boundary, utf8_upper_boundary)) {\n\n      // 1. Set utf-8 code point, utf-8 bytes needed, and utf-8\n      // bytes seen to 0, set utf-8 lower boundary to 0x80, and set\n      // utf-8 upper boundary to 0xBF.\n      utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n      utf8_lower_boundary = 0x80;\n      utf8_upper_boundary = 0xBF;\n\n      // 2. Prepend byte to stream.\n      stream.prepend(bite);\n\n      // 3. Return error.\n      return decoderError(fatal);\n    }\n\n    // 5. Set utf-8 lower boundary to 0x80 and utf-8 upper boundary\n    // to 0xBF.\n    utf8_lower_boundary = 0x80;\n    utf8_upper_boundary = 0xBF;\n\n    // 6. Increase utf-8 bytes seen by one and set utf-8 code point\n    // to utf-8 code point + (byte − 0x80) << (6 × (utf-8 bytes\n    // needed − utf-8 bytes seen)).\n    utf8_bytes_seen += 1;\n    utf8_code_point += (bite - 0x80) << (6 * (utf8_bytes_needed - utf8_bytes_seen));\n\n    // 7. If utf-8 bytes seen is not equal to utf-8 bytes needed,\n    // continue.\n    if (utf8_bytes_seen !== utf8_bytes_needed)\n      return null;\n\n    // 8. Let code point be utf-8 code point.\n    var code_point = utf8_code_point;\n\n    // 9. Set utf-8 code point, utf-8 bytes needed, and utf-8 bytes\n    // seen to 0.\n    utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n\n    // 10. Return a code point whose value is code point.\n    return code_point;\n  };\n}\n\n/**\n * @constructor\n * @implements {Encoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Encoder(options) {\n  var fatal = options.fatal;\n  /**\n   * @param {Stream} stream Input stream.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit.\n   */\n  this.handler = function(stream, code_point) {\n    // 1. If code point is end-of-stream, return finished.\n    if (code_point === end_of_stream)\n      return finished;\n\n    // 2. If code point is in the range U+0000 to U+007F, return a\n    // byte whose value is code point.\n    if (inRange(code_point, 0x0000, 0x007f))\n      return code_point;\n\n    // 3. Set count and offset based on the range code point is in:\n    var count, offset;\n    // U+0080 to U+07FF:    1 and 0xC0\n    if (inRange(code_point, 0x0080, 0x07FF)) {\n      count = 1;\n      offset = 0xC0;\n    }\n    // U+0800 to U+FFFF:    2 and 0xE0\n    else if (inRange(code_point, 0x0800, 0xFFFF)) {\n      count = 2;\n      offset = 0xE0;\n    }\n    // U+10000 to U+10FFFF: 3 and 0xF0\n    else if (inRange(code_point, 0x10000, 0x10FFFF)) {\n      count = 3;\n      offset = 0xF0;\n    }\n\n    // 4.Let bytes be a byte sequence whose first byte is (code\n    // point >> (6 × count)) + offset.\n    var bytes = [(code_point >> (6 * count)) + offset];\n\n    // 5. Run these substeps while count is greater than 0:\n    while (count > 0) {\n\n      // 1. Set temp to code point >> (6 × (count − 1)).\n      var temp = code_point >> (6 * (count - 1));\n\n      // 2. Append to bytes 0x80 | (temp & 0x3F).\n      bytes.push(0x80 | (temp & 0x3F));\n\n      // 3. Decrease count by one.\n      count -= 1;\n    }\n\n    // 6. Return bytes bytes, in order.\n    return bytes;\n  };\n}\n\nexport {TextEncoder, TextDecoder};\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport {\n    TextDecoder as TextDecoderPolyfill,\n    TextEncoder as TextEncoderPolyfill,\n} from 'text-encoding-utf-8';\n\nconst decoder = new (typeof TextDecoder !== 'undefined' ? TextDecoder : TextDecoderPolyfill)('utf-8');\n/** @ignore */\nexport const decodeUtf8 = (buffer?: ArrayBuffer | ArrayBufferView) => decoder.decode(buffer);\n\nconst encoder = new (typeof TextEncoder !== 'undefined' ? TextEncoder : TextEncoderPolyfill)();\n/** @ignore */\nexport const encodeUtf8 = (value?: string) => encoder.encode(value);\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport streamAdapters from './adapters';\n\n/** @ignore */\nexport const ITERATOR_DONE: any = Object.freeze({ done: true, value: void (0) });\n\n/** @ignore */\nexport type FileHandle = import('fs').promises.FileHandle;\n/** @ignore */\nexport type ArrowJSONLike = { schema: any; batches?: any[]; dictionaries?: any[] };\n/** @ignore */\nexport type ReadableDOMStreamOptions = { type: 'bytes' | undefined; autoAllocateChunkSize?: number; highWaterMark?: number };\n\n/** @ignore */\nexport class ArrowJSON {\n    constructor(private _json: ArrowJSONLike) {}\n    public get schema(): any { return this._json['schema']; }\n    public get batches(): any[] { return (this._json['batches'] || []) as any[]; }\n    public get dictionaries(): any[] { return (this._json['dictionaries'] || []) as any[]; }\n}\n\n/** @ignore */\nexport interface Readable<T> {\n\n    readonly closed: Promise<void>;\n    cancel(reason?: any): Promise<void>;\n\n    read(size?: number | null): Promise<T | null>;\n    peek(size?: number | null): Promise<T | null>;\n    throw(value?: any): Promise<IteratorResult<any>>;\n    return(value?: any): Promise<IteratorResult<any>>;\n    next(size?: number | null): Promise<IteratorResult<T>>;\n}\n\n/** @ignore */\nexport interface Writable<T> {\n    readonly closed: Promise<void>;\n    close(): void;\n    write(chunk: T): void;\n    abort(reason?: any): void;\n}\n\n/** @ignore */\nexport interface ReadableWritable<TReadable, TWritable> extends Readable<TReadable>, Writable<TWritable> {\n    [Symbol.asyncIterator](): AsyncIterableIterator<TReadable>;\n    toDOMStream(options?: ReadableDOMStreamOptions): ReadableStream<TReadable>;\n    toNodeStream(options?: import('stream').ReadableOptions): import('stream').Readable;\n}\n\n/** @ignore */\nexport abstract class ReadableInterop<T> {\n\n    public abstract toDOMStream(options?: ReadableDOMStreamOptions): ReadableStream<T>;\n    public abstract toNodeStream(options?: import('stream').ReadableOptions): import('stream').Readable;\n\n    public tee(): [ReadableStream<T>, ReadableStream<T>] {\n        return this._getDOMStream().tee();\n    }\n    public pipe<R extends NodeJS.WritableStream>(writable: R, options?: { end?: boolean }) {\n        return this._getNodeStream().pipe(writable, options);\n    }\n    public pipeTo(writable: WritableStream<T>, options?: PipeOptions) { return this._getDOMStream().pipeTo(writable, options); }\n    public pipeThrough<R extends ReadableStream<any>>(duplex: { writable: WritableStream<T>; readable: R }, options?: PipeOptions) {\n        return this._getDOMStream().pipeThrough(duplex, options);\n    }\n\n    protected _DOMStream?: ReadableStream<T>;\n    private _getDOMStream() {\n        return this._DOMStream || (this._DOMStream = this.toDOMStream());\n    }\n\n    protected _nodeStream?: import('stream').Readable;\n    private _getNodeStream() {\n        return this._nodeStream || (this._nodeStream = this.toNodeStream());\n    }\n}\n\n/** @ignore */\ntype Resolution<T> = { resolve: (value?: T | PromiseLike<T>) => void; reject: (reason?: any) => void };\n\n/** @ignore */\nexport class AsyncQueue<TReadable = Uint8Array, TWritable = TReadable> extends ReadableInterop<TReadable>\n    implements AsyncIterableIterator<TReadable>, ReadableWritable<TReadable, TWritable> {\n\n    protected _values: TWritable[] = [];\n    protected _error?: { error: any };\n    protected _closedPromise: Promise<void>;\n    protected _closedPromiseResolve?: (value?: any) => void;\n    protected resolvers: Resolution<IteratorResult<TReadable>>[] = [];\n\n    constructor() {\n        super();\n        this._closedPromise = new Promise((r) => this._closedPromiseResolve = r);\n    }\n\n    public get closed(): Promise<void> { return this._closedPromise; }\n    public async cancel(reason?: any) { await this.return(reason); }\n    public write(value: TWritable) {\n        if (this._ensureOpen()) {\n            this.resolvers.length <= 0\n                ? (this._values.push(value))\n                : (this.resolvers.shift()!.resolve({ done: false, value } as any));\n        }\n    }\n    public abort(value?: any) {\n        if (this._closedPromiseResolve) {\n            this.resolvers.length <= 0\n                ? (this._error = { error: value })\n                : (this.resolvers.shift()!.reject({ done: true, value }));\n        }\n    }\n    public close() {\n        if (this._closedPromiseResolve) {\n            const { resolvers } = this;\n            while (resolvers.length > 0) {\n                resolvers.shift()!.resolve(ITERATOR_DONE);\n            }\n            this._closedPromiseResolve();\n            this._closedPromiseResolve = undefined;\n        }\n    }\n\n    public [Symbol.asyncIterator]() { return this; }\n    public toDOMStream(options?: ReadableDOMStreamOptions) {\n        return streamAdapters.toDOMStream(\n            (this._closedPromiseResolve || this._error)\n                ? (this as AsyncIterable<TReadable>)\n                : (this._values as any) as Iterable<TReadable>,\n            options);\n    }\n    public toNodeStream(options?: import('stream').ReadableOptions) {\n        return streamAdapters.toNodeStream(\n            (this._closedPromiseResolve || this._error)\n                ? (this as AsyncIterable<TReadable>)\n                : (this._values as any) as Iterable<TReadable>,\n            options);\n    }\n    public async throw(_?: any) { await this.abort(_); return ITERATOR_DONE; }\n    public async return(_?: any) { await this.close(); return ITERATOR_DONE; }\n\n    public async read(size?: number | null): Promise<TReadable | null> { return (await this.next(size, 'read')).value; }\n    public async peek(size?: number | null): Promise<TReadable | null> { return (await this.next(size, 'peek')).value; }\n    public next(..._args: any[]): Promise<IteratorResult<TReadable>> {\n        if (this._values.length > 0) {\n            return Promise.resolve({ done: false, value: this._values.shift()! } as any);\n        } else if (this._error) {\n            return Promise.reject({ done: true, value: this._error.error });\n        } else if (!this._closedPromiseResolve) {\n            return Promise.resolve(ITERATOR_DONE);\n        } else {\n            return new Promise<IteratorResult<TReadable>>((resolve, reject) => {\n                this.resolvers.push({ resolve, reject });\n            });\n        }\n    }\n\n    protected _ensureOpen() {\n        if (this._closedPromiseResolve) {\n            return true;\n        }\n        throw new Error(`${this} is closed`);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { ReadableInterop, ArrowJSONLike } from '../io/interfaces';\n\n/** @ignore */\ntype FSReadStream = import('fs').ReadStream;\n/** @ignore */\ntype FileHandle = import('fs').promises.FileHandle;\n\n/** @ignore */\nexport interface Subscription {\n    unsubscribe: () => void;\n}\n\n/** @ignore */\nexport interface Observer<T> {\n    closed?: boolean;\n    next: (value: T) => void;\n    error: (err: any) => void;\n    complete: () => void;\n}\n\n/** @ignore */\nexport interface Observable<T> {\n    subscribe: (observer: Observer<T>) => Subscription;\n}\n\n/** @ignore */\nconst [BigIntCtor, BigIntAvailable] = (() => {\n    const BigIntUnavailableError = () => { throw new Error('BigInt is not available in this environment'); };\n    function BigIntUnavailable() { throw BigIntUnavailableError(); }\n    BigIntUnavailable.asIntN = () => { throw BigIntUnavailableError(); };\n    BigIntUnavailable.asUintN = () => { throw BigIntUnavailableError(); };\n    return typeof BigInt !== 'undefined' ? [BigInt, true] : [<any> BigIntUnavailable, false];\n})() as [BigIntConstructor, boolean];\n\n/** @ignore */\nconst [BigInt64ArrayCtor, BigInt64ArrayAvailable] = (() => {\n    const BigInt64ArrayUnavailableError = () => { throw new Error('BigInt64Array is not available in this environment'); };\n    class BigInt64ArrayUnavailable {\n        static get BYTES_PER_ELEMENT() { return 8; }\n        static of() { throw BigInt64ArrayUnavailableError(); }\n        static from() { throw BigInt64ArrayUnavailableError(); }\n        constructor() { throw BigInt64ArrayUnavailableError(); }\n    }\n    return typeof BigInt64Array !== 'undefined' ? [BigInt64Array, true] : [<any> BigInt64ArrayUnavailable, false];\n})() as [BigInt64ArrayConstructor, boolean];\n\n/** @ignore */\nconst [BigUint64ArrayCtor, BigUint64ArrayAvailable] = (() => {\n    const BigUint64ArrayUnavailableError = () => { throw new Error('BigUint64Array is not available in this environment'); };\n    class BigUint64ArrayUnavailable {\n        static get BYTES_PER_ELEMENT() { return 8; }\n        static of() { throw BigUint64ArrayUnavailableError(); }\n        static from() { throw BigUint64ArrayUnavailableError(); }\n        constructor() { throw BigUint64ArrayUnavailableError(); }\n    }\n    return typeof BigUint64Array !== 'undefined' ? [BigUint64Array, true] : [<any> BigUint64ArrayUnavailable, false];\n})() as [BigUint64ArrayConstructor, boolean];\n\nexport { BigIntCtor as BigInt, BigIntAvailable };\nexport { BigInt64ArrayCtor as BigInt64Array, BigInt64ArrayAvailable };\nexport { BigUint64ArrayCtor as BigUint64Array, BigUint64ArrayAvailable };\n\n/** @ignore */ const isNumber = (x: any) => typeof x === 'number';\n/** @ignore */ const isBoolean = (x: any) => typeof x === 'boolean';\n/** @ignore */ const isFunction = (x: any) => typeof x === 'function';\n/** @ignore */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport const isObject = (x: any): x is Object => x != null && Object(x) === x;\n\n/** @ignore */\nexport const isPromise = <T = any>(x: any): x is PromiseLike<T> => {\n    return isObject(x) && isFunction(x.then);\n};\n\n/** @ignore */\nexport const isObservable = <T = any>(x: any): x is Observable<T> => {\n    return isObject(x) && isFunction(x.subscribe);\n};\n\n/** @ignore */\nexport const isIterable = <T = any>(x: any): x is Iterable<T> => {\n    return isObject(x) && isFunction(x[Symbol.iterator]);\n};\n\n/** @ignore */\nexport const isAsyncIterable = <T = any>(x: any): x is AsyncIterable<T> => {\n    return isObject(x) && isFunction(x[Symbol.asyncIterator]);\n};\n\n/** @ignore */\nexport const isArrowJSON = (x: any): x is ArrowJSONLike  => {\n    return isObject(x) && isObject(x['schema']);\n};\n\n/** @ignore */\nexport const isArrayLike = <T = any>(x: any): x is ArrayLike<T> => {\n    return isObject(x) && isNumber(x['length']);\n};\n\n/** @ignore */\nexport const isIteratorResult = <T = any>(x: any): x is IteratorResult<T> => {\n    return isObject(x) && ('done' in x) && ('value' in x);\n};\n\n/** @ignore */\nexport const isUnderlyingSink = <T = any>(x: any): x is UnderlyingSink<T> => {\n    return isObject(x) &&\n        isFunction(x['abort']) &&\n        isFunction(x['close']) &&\n        isFunction(x['start']) &&\n        isFunction(x['write']);\n};\n\n/** @ignore */\nexport const isFileHandle = (x: any): x is FileHandle => {\n    return isObject(x) && isFunction(x['stat']) && isNumber(x['fd']);\n};\n\n/** @ignore */\nexport const isFSReadStream = (x: any): x is FSReadStream => {\n    return isReadableNodeStream(x) && isNumber((<any> x)['bytesRead']);\n};\n\n/** @ignore */\nexport const isFetchResponse = (x: any): x is Response => {\n    return isObject(x) && isReadableDOMStream(x['body']);\n};\n\n/** @ignore */\nexport const isWritableDOMStream = <T = any>(x: any): x is WritableStream<T> => {\n    return isObject(x) &&\n        isFunction(x['abort']) &&\n        isFunction(x['getWriter']) &&\n        !(x instanceof ReadableInterop);\n};\n\n/** @ignore */\nexport const isReadableDOMStream = <T = any>(x: any): x is ReadableStream<T> => {\n    return isObject(x) &&\n        isFunction(x['cancel']) &&\n        isFunction(x['getReader']) &&\n        !(x instanceof ReadableInterop);\n};\n\n/** @ignore */\nexport const isWritableNodeStream = (x: any): x is NodeJS.WritableStream => {\n    return isObject(x) &&\n        isFunction(x['end']) &&\n        isFunction(x['write']) &&\n        isBoolean(x['writable']) &&\n        !(x instanceof ReadableInterop);\n};\n\n/** @ignore */\nexport const isReadableNodeStream = (x: any): x is NodeJS.ReadableStream => {\n    return isObject(x) &&\n        isFunction(x['read']) &&\n        isFunction(x['pipe']) &&\n        isBoolean(x['readable']) &&\n        !(x instanceof ReadableInterop);\n};\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { flatbuffers } from 'flatbuffers';\nimport { encodeUtf8 } from '../util/utf8';\nimport ByteBuffer = flatbuffers.ByteBuffer;\nimport { TypedArray, TypedArrayConstructor } from '../interfaces';\nimport { BigIntArray, BigIntArrayConstructor } from '../interfaces';\nimport { isPromise, isIterable, isAsyncIterable, isIteratorResult, BigInt64Array, BigUint64Array } from './compat';\n\n/** @ignore */\nconst SharedArrayBuf = (typeof SharedArrayBuffer !== 'undefined' ? SharedArrayBuffer : ArrayBuffer);\n\n/** @ignore */\nfunction collapseContiguousByteRanges(chunks: Uint8Array[]) {\n    const result = chunks[0] ? [chunks[0]] : [];\n    let xOffset: number, yOffset: number, xLen: number, yLen: number;\n    for (let x, y, i = 0, j = 0, n = chunks.length; ++i < n;) {\n        x = result[j];\n        y = chunks[i];\n        // continue if x and y don't share the same underlying ArrayBuffer, or if x isn't before y\n        if (!x || !y || x.buffer !== y.buffer || y.byteOffset < x.byteOffset) {\n            y && (result[++j] = y);\n            continue;\n        }\n        ({ byteOffset: xOffset, byteLength: xLen } = x);\n        ({ byteOffset: yOffset, byteLength: yLen } = y);\n        // continue if the byte ranges of x and y aren't contiguous\n        if ((xOffset + xLen) < yOffset || (yOffset + yLen) < xOffset) {\n            y && (result[++j] = y);\n            continue;\n        }\n        result[j] = new Uint8Array(x.buffer, xOffset, yOffset - xOffset + yLen);\n    }\n    return result;\n}\n\n/** @ignore */\nexport function memcpy<TTarget extends ArrayBufferView, TSource extends ArrayBufferView>(target: TTarget, source: TSource, targetByteOffset = 0, sourceByteLength = source.byteLength) {\n    const targetByteLength = target.byteLength;\n    const dst = new Uint8Array(target.buffer, target.byteOffset, targetByteLength);\n    const src = new Uint8Array(source.buffer, source.byteOffset, Math.min(sourceByteLength, targetByteLength));\n    dst.set(src, targetByteOffset);\n    return target;\n}\n\n/** @ignore */\nexport function joinUint8Arrays(chunks: Uint8Array[], size?: number | null): [Uint8Array, Uint8Array[], number] {\n    // collapse chunks that share the same underlying ArrayBuffer and whose byte ranges overlap,\n    // to avoid unnecessarily copying the bytes to do this buffer join. This is a common case during\n    // streaming, where we may be reading partial byte ranges out of the same underlying ArrayBuffer\n    const result = collapseContiguousByteRanges(chunks);\n    const byteLength = result.reduce((x, b) => x + b.byteLength, 0);\n    let source: Uint8Array, sliced: Uint8Array, buffer: Uint8Array | void;\n    let offset = 0, index = -1;\n    const length = Math.min(size || Infinity, byteLength);\n    for (let n = result.length; ++index < n;) {\n        source = result[index];\n        sliced = source.subarray(0, Math.min(source.length, length - offset));\n        if (length <= (offset + sliced.length)) {\n            if (sliced.length < source.length) {\n                result[index] = source.subarray(sliced.length);\n            } else if (sliced.length === source.length) { index++; }\n            buffer ? memcpy(buffer, sliced, offset) : (buffer = sliced);\n            break;\n        }\n        memcpy(buffer || (buffer = new Uint8Array(length)), sliced, offset);\n        offset += sliced.length;\n    }\n    return [buffer || new Uint8Array(0), result.slice(index), byteLength - (buffer ? buffer.byteLength : 0)];\n}\n\n/** @ignore */\nexport type ArrayBufferViewInput = ArrayBufferView | ArrayBufferLike | ArrayBufferView | Iterable<number> | ArrayLike<number> | ByteBuffer | string | null | undefined  |\n                    IteratorResult<ArrayBufferView | ArrayBufferLike | ArrayBufferView | Iterable<number> | ArrayLike<number> | ByteBuffer | string | null | undefined> |\n          ReadableStreamReadResult<ArrayBufferView | ArrayBufferLike | ArrayBufferView | Iterable<number> | ArrayLike<number> | ByteBuffer | string | null | undefined> ;\n\n/** @ignore */\nexport function toArrayBufferView<T extends TypedArray>(ArrayBufferViewCtor: TypedArrayConstructor<T>, input: ArrayBufferViewInput): T;\nexport function toArrayBufferView<T extends BigIntArray>(ArrayBufferViewCtor: BigIntArrayConstructor<T>, input: ArrayBufferViewInput): T;\nexport function toArrayBufferView(ArrayBufferViewCtor: any, input: ArrayBufferViewInput) {\n\n    let value: any = isIteratorResult(input) ? input.value : input;\n\n    if (value instanceof ArrayBufferViewCtor) {\n        if (ArrayBufferViewCtor === Uint8Array) {\n            // Node's `Buffer` class passes the `instanceof Uint8Array` check, but we need\n            // a real Uint8Array, since Buffer#slice isn't the same as Uint8Array#slice :/\n            return new ArrayBufferViewCtor(value.buffer, value.byteOffset, value.byteLength);\n        }\n        return value;\n    }\n    if (!value) { return new ArrayBufferViewCtor(0); }\n    if (typeof value === 'string') { value = encodeUtf8(value); }\n    if (value instanceof ArrayBuffer) { return new ArrayBufferViewCtor(value); }\n    if (value instanceof SharedArrayBuf) { return new ArrayBufferViewCtor(value); }\n    if (value instanceof ByteBuffer) { return toArrayBufferView(ArrayBufferViewCtor, value.bytes()); }\n    return !ArrayBuffer.isView(value) ? ArrayBufferViewCtor.from(value) : value.byteLength <= 0 ? new ArrayBufferViewCtor(0)\n        : new ArrayBufferViewCtor(value.buffer, value.byteOffset, value.byteLength / ArrayBufferViewCtor.BYTES_PER_ELEMENT);\n}\n\n/** @ignore */ export const toInt8Array = (input: ArrayBufferViewInput) => toArrayBufferView(Int8Array, input);\n/** @ignore */ export const toInt16Array = (input: ArrayBufferViewInput) => toArrayBufferView(Int16Array, input);\n/** @ignore */ export const toInt32Array = (input: ArrayBufferViewInput) => toArrayBufferView(Int32Array, input);\n/** @ignore */ export const toBigInt64Array = (input: ArrayBufferViewInput) => toArrayBufferView(BigInt64Array, input);\n/** @ignore */ export const toUint8Array = (input: ArrayBufferViewInput) => toArrayBufferView(Uint8Array, input);\n/** @ignore */ export const toUint16Array = (input: ArrayBufferViewInput) => toArrayBufferView(Uint16Array, input);\n/** @ignore */ export const toUint32Array = (input: ArrayBufferViewInput) => toArrayBufferView(Uint32Array, input);\n/** @ignore */ export const toBigUint64Array = (input: ArrayBufferViewInput) => toArrayBufferView(BigUint64Array, input);\n/** @ignore */ export const toFloat32Array = (input: ArrayBufferViewInput) => toArrayBufferView(Float32Array, input);\n/** @ignore */ export const toFloat64Array = (input: ArrayBufferViewInput) => toArrayBufferView(Float64Array, input);\n/** @ignore */ export const toUint8ClampedArray = (input: ArrayBufferViewInput) => toArrayBufferView(Uint8ClampedArray, input);\n\n/** @ignore */\ntype ArrayBufferViewIteratorInput = Iterable<ArrayBufferViewInput> | ArrayBufferViewInput;\n\n/** @ignore */\nconst pump = <T extends Iterator<any> | AsyncIterator<any>>(iterator: T) => { iterator.next(); return iterator; };\n\n/** @ignore */\nexport function* toArrayBufferViewIterator<T extends TypedArray>(ArrayCtor: TypedArrayConstructor<T>, source: ArrayBufferViewIteratorInput) {\n\n    const wrap = function*<T>(x: T) { yield x; };\n    const buffers: Iterable<ArrayBufferViewInput> =\n                   (typeof source === 'string') ? wrap(source)\n                 : (ArrayBuffer.isView(source)) ? wrap(source)\n              : (source instanceof ArrayBuffer) ? wrap(source)\n           : (source instanceof SharedArrayBuf) ? wrap(source)\n    : !isIterable<ArrayBufferViewInput>(source) ? wrap(source) : source;\n\n    yield* pump((function* (it: Iterator<ArrayBufferViewInput, any, number | undefined>): Generator<T, void, number | undefined> {\n        let r: IteratorResult<any> = <any> null;\n        do {\n            r = it.next(yield toArrayBufferView(ArrayCtor, r));\n        } while (!r.done);\n    })(buffers[Symbol.iterator]()));\n    return new ArrayCtor();\n}\n\n/** @ignore */ export const toInt8ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Int8Array, input);\n/** @ignore */ export const toInt16ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Int16Array, input);\n/** @ignore */ export const toInt32ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Int32Array, input);\n/** @ignore */ export const toUint8ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint8Array, input);\n/** @ignore */ export const toUint16ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint16Array, input);\n/** @ignore */ export const toUint32ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint32Array, input);\n/** @ignore */ export const toFloat32ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Float32Array, input);\n/** @ignore */ export const toFloat64ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Float64Array, input);\n/** @ignore */ export const toUint8ClampedArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint8ClampedArray, input);\n\n/** @ignore */\ntype ArrayBufferViewAsyncIteratorInput = AsyncIterable<ArrayBufferViewInput> | Iterable<ArrayBufferViewInput> | PromiseLike<ArrayBufferViewInput> | ArrayBufferViewInput;\n\n/** @ignore */\nexport async function* toArrayBufferViewAsyncIterator<T extends TypedArray>(ArrayCtor: TypedArrayConstructor<T>, source: ArrayBufferViewAsyncIteratorInput): AsyncGenerator<T, T, number | undefined> {\n\n    // if a Promise, unwrap the Promise and iterate the resolved value\n    if (isPromise<ArrayBufferViewInput>(source)) {\n        return yield* toArrayBufferViewAsyncIterator(ArrayCtor, await source);\n    }\n\n    const wrap = async function*<T>(x: T) { yield await x; };\n    const emit = async function* <T extends Iterable<any>>(source: T) {\n        yield* pump((function*(it: Iterator<any>) {\n            let r: IteratorResult<any> = <any> null;\n            do {\n                r = it.next(yield r && r.value);\n            } while (!r.done);\n        })(source[Symbol.iterator]()));\n    };\n\n    const buffers: AsyncIterable<ArrayBufferViewInput> =\n                        (typeof source === 'string') ? wrap(source) // if string, wrap in an AsyncIterableIterator\n                      : (ArrayBuffer.isView(source)) ? wrap(source) // if TypedArray, wrap in an AsyncIterableIterator\n                   : (source instanceof ArrayBuffer) ? wrap(source) // if ArrayBuffer, wrap in an AsyncIterableIterator\n                : (source instanceof SharedArrayBuf) ? wrap(source) // if SharedArrayBuffer, wrap in an AsyncIterableIterator\n          : isIterable<ArrayBufferViewInput>(source) ? emit(source) // If Iterable, wrap in an AsyncIterableIterator and compose the `next` values\n    : !isAsyncIterable<ArrayBufferViewInput>(source) ? wrap(source) // If not an AsyncIterable, treat as a sentinel and wrap in an AsyncIterableIterator\n                                                     : source; // otherwise if AsyncIterable, use it\n\n    yield* pump((async function* (it: AsyncIterator<ArrayBufferViewInput, any, number | undefined>): AsyncGenerator<T, void, number | undefined> {\n        let r: IteratorResult<any> = <any> null;\n        do {\n            r = await it.next(yield toArrayBufferView(ArrayCtor, r));\n        } while (!r.done);\n    })(buffers[Symbol.asyncIterator]()));\n    return new ArrayCtor();\n}\n\n/** @ignore */ export const toInt8ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Int8Array, input);\n/** @ignore */ export const toInt16ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Int16Array, input);\n/** @ignore */ export const toInt32ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Int32Array, input);\n/** @ignore */ export const toUint8ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint8Array, input);\n/** @ignore */ export const toUint16ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint16Array, input);\n/** @ignore */ export const toUint32ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint32Array, input);\n/** @ignore */ export const toFloat32ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Float32Array, input);\n/** @ignore */ export const toFloat64ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Float64Array, input);\n/** @ignore */ export const toUint8ClampedArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint8ClampedArray, input);\n\n/** @ignore */\nexport function rebaseValueOffsets(offset: number, length: number, valueOffsets: Int32Array) {\n    // If we have a non-zero offset, create a new offsets array with the values\n    // shifted by the start offset, such that the new start offset is 0\n    if (offset !== 0) {\n        valueOffsets = valueOffsets.slice(0, length + 1);\n        for (let i = -1; ++i <= length;) {\n            valueOffsets[i] += offset;\n        }\n    }\n    return valueOffsets;\n}\n\n/** @ignore */\nexport function compareArrayLike<T extends ArrayLike<any>>(a: T, b: T) {\n    let i = 0;\n    const n = a.length;\n    if (n !== b.length) { return false; }\n    if (n > 0) {\n        do { if (a[i] !== b[i]) { return false; } } while (++i < n);\n    }\n    return true;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport {\n    toUint8Array,\n    joinUint8Arrays,\n    ArrayBufferViewInput,\n    toUint8ArrayIterator,\n    toUint8ArrayAsyncIterator\n} from '../util/buffer';\n\nimport { ReadableDOMStreamOptions } from './interfaces';\n\ninterface ReadableStreamReadResult<T> { done: boolean; value: T }\ntype Uint8ArrayGenerator = Generator<Uint8Array, null, { cmd: 'peek' | 'read'; size: number }>;\ntype AsyncUint8ArrayGenerator = AsyncGenerator<Uint8Array, null, { cmd: 'peek' | 'read'; size: number }>;\n\n/** @ignore */\nexport default {\n    fromIterable<T extends ArrayBufferViewInput>(source: Iterable<T> | T): Uint8ArrayGenerator {\n        return pump(fromIterable<T>(source));\n    },\n    fromAsyncIterable<T extends ArrayBufferViewInput>(source: AsyncIterable<T> | PromiseLike<T>): AsyncUint8ArrayGenerator {\n        return pump(fromAsyncIterable<T>(source));\n    },\n    fromDOMStream<T extends ArrayBufferViewInput>(source: ReadableStream<T>): AsyncUint8ArrayGenerator {\n        return pump(fromDOMStream<T>(source));\n    },\n    fromNodeStream(stream: NodeJS.ReadableStream): AsyncUint8ArrayGenerator {\n        return pump(fromNodeStream(stream));\n    },\n    // @ts-ignore\n    toDOMStream<T>(source: Iterable<T> | AsyncIterable<T>, options?: ReadableDOMStreamOptions): ReadableStream<T> {\n        throw new Error(`\"toDOMStream\" not available in this environment`);\n    },\n    // @ts-ignore\n    toNodeStream<T>(source: Iterable<T> | AsyncIterable<T>, options?: import('stream').ReadableOptions): import('stream').Readable {\n        throw new Error(`\"toNodeStream\" not available in this environment`);\n    },\n};\n\n/** @ignore */\nconst pump = <T extends Uint8ArrayGenerator | AsyncUint8ArrayGenerator>(iterator: T) => { iterator.next(); return iterator; };\n\n/** @ignore */\nfunction* fromIterable<T extends ArrayBufferViewInput>(source: Iterable<T> | T): Uint8ArrayGenerator {\n\n    let done: boolean | undefined, threw = false;\n    let buffers: Uint8Array[] = [], buffer: Uint8Array;\n    let cmd: 'peek' | 'read', size: number, bufferLength = 0;\n\n    function byteRange() {\n        if (cmd === 'peek') {\n            return joinUint8Arrays(buffers, size)[0];\n        }\n        [buffer, buffers, bufferLength] = joinUint8Arrays(buffers, size);\n        return buffer;\n    }\n\n    // Yield so the caller can inject the read command before creating the source Iterator\n    ({ cmd, size } = yield <any> null);\n\n    // initialize the iterator\n    const it = toUint8ArrayIterator(source)[Symbol.iterator]();\n\n    try {\n        do {\n            // read the next value\n            ({ done, value: buffer } = isNaN(size - bufferLength) ?\n                it.next(undefined) : it.next(size - bufferLength));\n            // if chunk is not null or empty, push it onto the queue\n            if (!done && buffer.byteLength > 0) {\n                buffers.push(buffer);\n                bufferLength += buffer.byteLength;\n            }\n            // If we have enough bytes in our buffer, yield chunks until we don't\n            if (done || size <= bufferLength) {\n                do {\n                    ({ cmd, size } = yield byteRange());\n                } while (size < bufferLength);\n            }\n        } while (!done);\n    } catch (e) {\n        (threw = true) && (typeof it.throw === 'function') && (it.throw(e));\n    } finally {\n        (threw === false) && (typeof it.return === 'function') && (it.return(null!));\n    }\n    return null;\n}\n\n/** @ignore */\nasync function* fromAsyncIterable<T extends ArrayBufferViewInput>(source: AsyncIterable<T> | PromiseLike<T>): AsyncUint8ArrayGenerator {\n\n    let done: boolean | undefined, threw = false;\n    let buffers: Uint8Array[] = [], buffer: Uint8Array;\n    let cmd: 'peek' | 'read', size: number, bufferLength = 0;\n\n    function byteRange() {\n        if (cmd === 'peek') {\n            return joinUint8Arrays(buffers, size)[0];\n        }\n        [buffer, buffers, bufferLength] = joinUint8Arrays(buffers, size);\n        return buffer;\n    }\n\n    // Yield so the caller can inject the read command before creating the source AsyncIterator\n    ({ cmd, size } = (yield <any> null)!);\n\n    // initialize the iterator\n    const it = toUint8ArrayAsyncIterator(source)[Symbol.asyncIterator]();\n\n    try {\n        do {\n            // read the next value\n            ({ done, value: buffer } = isNaN(size - bufferLength)\n                ? await it.next(undefined)\n                : await it.next(size - bufferLength));\n            // if chunk is not null or empty, push it onto the queue\n            if (!done && buffer.byteLength > 0) {\n                buffers.push(buffer);\n                bufferLength += buffer.byteLength;\n            }\n            // If we have enough bytes in our buffer, yield chunks until we don't\n            if (done || size <= bufferLength) {\n                do {\n                    ({ cmd, size } = yield byteRange());\n                } while (size < bufferLength);\n            }\n        } while (!done);\n    } catch (e) {\n        (threw = true) && (typeof it.throw === 'function') && (await it.throw(e));\n    } finally {\n        (threw === false) && (typeof it.return === 'function') && (await it.return(new Uint8Array(0)));\n    }\n    return null;\n}\n\n// All this manual Uint8Array chunk management can be avoided if/when engines\n// add support for ArrayBuffer.transfer() or ArrayBuffer.prototype.realloc():\n// https://github.com/domenic/proposal-arraybuffer-transfer\n/** @ignore */\nasync function* fromDOMStream<T extends ArrayBufferViewInput>(source: ReadableStream<T>): AsyncUint8ArrayGenerator {\n\n    let done = false, threw = false;\n    let buffers: Uint8Array[] = [], buffer: Uint8Array;\n    let cmd: 'peek' | 'read', size: number, bufferLength = 0;\n\n    function byteRange() {\n        if (cmd === 'peek') {\n            return joinUint8Arrays(buffers, size)[0];\n        }\n        [buffer, buffers, bufferLength] = joinUint8Arrays(buffers, size);\n        return buffer;\n    }\n\n    // Yield so the caller can inject the read command before we establish the ReadableStream lock\n    ({ cmd, size } = yield <any> null);\n\n    // initialize the reader and lock the stream\n    const it = new AdaptiveByteReader(source);\n\n    try {\n        do {\n            // read the next value\n            ({ done, value: buffer } = isNaN(size - bufferLength)\n                ? await it['read'](undefined)\n                : await it['read'](size - bufferLength));\n            // if chunk is not null or empty, push it onto the queue\n            if (!done && buffer.byteLength > 0) {\n                buffers.push(toUint8Array(buffer));\n                bufferLength += buffer.byteLength;\n            }\n            // If we have enough bytes in our buffer, yield chunks until we don't\n            if (done || size <= bufferLength) {\n                do {\n                    ({ cmd, size } = yield byteRange());\n                } while (size < bufferLength);\n            }\n        } while (!done);\n    } catch (e) {\n        (threw = true) && (await it['cancel'](e));\n    } finally {\n        (threw === false) ? (await it['cancel']())\n            : source['locked'] && it.releaseLock();\n    }\n    return null;\n}\n\n/** @ignore */\nclass AdaptiveByteReader<T extends ArrayBufferViewInput> {\n\n    private supportsBYOB: boolean;\n    private byobReader: ReadableStreamBYOBReader | null = null;\n    private defaultReader: ReadableStreamDefaultReader<T> | null = null;\n    private reader: ReadableStreamBYOBReader | ReadableStreamDefaultReader<T> | null;\n\n    constructor(private source: ReadableStream<T>) {\n        try {\n            this.supportsBYOB = !!(this.reader = this.getBYOBReader());\n        } catch (e) {\n            this.supportsBYOB = !(this.reader = this.getDefaultReader());\n        }\n    }\n\n    get closed(): Promise<void> {\n        return this.reader ? this.reader['closed'].catch(() => {}) : Promise.resolve();\n    }\n\n    releaseLock(): void {\n        if (this.reader) {\n            this.reader.releaseLock();\n        }\n        this.reader = this.byobReader = this.defaultReader = null;\n    }\n\n    async cancel(reason?: any): Promise<void> {\n        const { reader, source } = this;\n        reader && (await reader['cancel'](reason).catch(() => {}));\n        source && (source['locked'] && this.releaseLock());\n    }\n\n    async read(size?: number): Promise<ReadableStreamReadResult<Uint8Array>> {\n        if (size === 0) {\n            return { done: this.reader == null, value: new Uint8Array(0) };\n        }\n        const result = !this.supportsBYOB || typeof size !== 'number'\n            ? await this.getDefaultReader().read()\n            : await this.readFromBYOBReader(size);\n        !result.done && (result.value = toUint8Array(result as ReadableStreamReadResult<Uint8Array>));\n        return result as ReadableStreamReadResult<Uint8Array>;\n    }\n\n    private getDefaultReader() {\n        if (this.byobReader) { this.releaseLock(); }\n        if (!this.defaultReader) {\n            this.defaultReader = this.source['getReader']();\n            // We have to catch and swallow errors here to avoid uncaught promise rejection exceptions\n            // that seem to be raised when we call `releaseLock()` on this reader. I'm still mystified\n            // about why these errors are raised, but I'm sure there's some important spec reason that\n            // I haven't considered. I hate to employ such an anti-pattern here, but it seems like the\n            // only solution in this case :/\n            this.defaultReader['closed'].catch(() => {});\n        }\n        return (this.reader = this.defaultReader);\n    }\n\n    private getBYOBReader() {\n        if (this.defaultReader) { this.releaseLock(); }\n        if (!this.byobReader) {\n            this.byobReader = this.source['getReader']({ mode: 'byob' });\n            // We have to catch and swallow errors here to avoid uncaught promise rejection exceptions\n            // that seem to be raised when we call `releaseLock()` on this reader. I'm still mystified\n            // about why these errors are raised, but I'm sure there's some important spec reason that\n            // I haven't considered. I hate to employ such an anti-pattern here, but it seems like the\n            // only solution in this case :/\n            this.byobReader['closed'].catch(() => {});\n        }\n        return (this.reader = this.byobReader);\n    }\n\n    // This strategy plucked from the example in the streams spec:\n    // https://streams.spec.whatwg.org/#example-manual-read-bytes\n    private async readFromBYOBReader(size: number) {\n        return await readInto(this.getBYOBReader(), new ArrayBuffer(size), 0, size);\n    }\n}\n\n/** @ignore */\nasync function readInto(reader: ReadableStreamBYOBReader, buffer: ArrayBufferLike, offset: number, size: number): Promise<ReadableStreamReadResult<Uint8Array>> {\n    if (offset >= size) {\n        return { done: false, value: new Uint8Array(buffer, 0, size) };\n    }\n    const { done, value } = await reader.read(new Uint8Array(buffer, offset, size - offset));\n    if (((offset += value!.byteLength) < size) && !done) {\n        return await readInto(reader, value!.buffer, offset, size);\n    }\n    return { done, value: new Uint8Array(value!.buffer, 0, offset) };\n}\n\n/** @ignore */\ntype EventName = 'end' | 'error' | 'readable';\n/** @ignore */\ntype Event = [EventName, (_: any) => void, Promise<[EventName, Error | null]>];\n/** @ignore */\nconst onEvent = <T extends string>(stream: NodeJS.ReadableStream, event: T) => {\n    const handler = (_: any) => resolve([event, _]);\n    let resolve: (value?: [T, any] | PromiseLike<[T, any]>) => void;\n    return [event, handler, new Promise<[T, any]>(\n        (r) => (resolve = r) && stream['once'](event, handler)\n    )] as Event;\n};\n\n/** @ignore */\nasync function* fromNodeStream(stream: NodeJS.ReadableStream): AsyncUint8ArrayGenerator {\n\n    const events: Event[] = [];\n    let event: EventName = 'error';\n    let done = false, err: Error | null = null;\n    let cmd: 'peek' | 'read', size: number, bufferLength = 0;\n    let buffers: Uint8Array[] = [], buffer: Uint8Array | Buffer | string;\n\n    function byteRange() {\n        if (cmd === 'peek') {\n            return joinUint8Arrays(buffers, size)[0];\n        }\n        [buffer, buffers, bufferLength] = joinUint8Arrays(buffers, size);\n        return buffer;\n    }\n\n    // Yield so the caller can inject the read command before we\n    // add the listener for the source stream's 'readable' event.\n    ({ cmd, size } = yield <any> null);\n\n    // ignore stdin if it's a TTY\n    if ((stream as any)['isTTY']) {\n        yield new Uint8Array(0);\n        return null;\n    }\n\n    try {\n        // initialize the stream event handlers\n        events[0] = onEvent(stream, 'end');\n        events[1] = onEvent(stream, 'error');\n\n        do {\n            events[2] = onEvent(stream, 'readable');\n\n            // wait on the first message event from the stream\n            [event, err] = await Promise.race(events.map((x) => x[2]));\n\n            // if the stream emitted an Error, rethrow it\n            if (event === 'error') { break; }\n            if (!(done = event === 'end')) {\n                // If the size is NaN, request to read everything in the stream's internal buffer\n                if (!isFinite(size - bufferLength)) {\n                    buffer = toUint8Array(stream['read'](undefined));\n                } else {\n                    buffer = toUint8Array(stream['read'](size - bufferLength));\n                    // If the byteLength is 0, then the requested amount is more than the stream has\n                    // in its internal buffer. In this case the stream needs a \"kick\" to tell it to\n                    // continue emitting readable events, so request to read everything the stream\n                    // has in its internal buffer right now.\n                    if (buffer.byteLength < (size - bufferLength)) {\n                        buffer = toUint8Array(stream['read'](undefined));\n                    }\n                }\n                // if chunk is not null or empty, push it onto the queue\n                if (buffer.byteLength > 0) {\n                    buffers.push(buffer);\n                    bufferLength += buffer.byteLength;\n                }\n            }\n            // If we have enough bytes in our buffer, yield chunks until we don't\n            if (done || size <= bufferLength) {\n                do {\n                    ({ cmd, size } = yield byteRange());\n                } while (size < bufferLength);\n            }\n        } while (!done);\n    } finally {\n        await cleanup(events, event === 'error' ? err : null);\n    }\n\n    return null;\n\n    function cleanup<T extends Error | null | void>(events: Event[], err?: T) {\n        buffer = buffers = <any> null;\n        return new Promise<T>((resolve, reject) => {\n            for (const [evt, fn] of events) {\n                stream['off'](evt, fn);\n            }\n            try {\n                // Some stream implementations don't call the destroy callback,\n                // because it's really a node-internal API. Just calling `destroy`\n                // here should be enough to conform to the ReadableStream contract\n                const destroy = (stream as any)['destroy'];\n                destroy && destroy.call(stream, err);\n                err = undefined;\n            } catch (e) { err = e || err; } finally {\n                err != null ? reject(err) : resolve();\n            }\n        });\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { DataType } from './type';\nimport { Chunked } from './vector/chunked';\n\n/** @ignore */\nexport interface Clonable<R extends AbstractVector> {\n    clone(...args: any[]): R;\n}\n\n/** @ignore */\nexport interface Sliceable<R extends AbstractVector> {\n    slice(begin?: number, end?: number): R;\n}\n\n/** @ignore */\nexport interface Applicative<T extends DataType, R extends Chunked> {\n    concat(...others: Vector<T>[]): R;\n    readonly [Symbol.isConcatSpreadable]: boolean;\n}\n\nexport interface AbstractVector<T extends DataType = any>\n    extends Clonable<AbstractVector<T>>,\n            Sliceable<AbstractVector<T>>,\n            Applicative<T, Chunked<T>> {\n\n    readonly TType: T['TType'];\n    readonly TArray: T['TArray'];\n    readonly TValue: T['TValue'];\n}\n\nexport abstract class AbstractVector<T extends DataType = any> implements Iterable<T['TValue'] | null> {\n\n    public abstract readonly data: Data<T>;\n    public abstract readonly type: T;\n    public abstract readonly typeId: T['TType'];\n    public abstract readonly length: number;\n    public abstract readonly stride: number;\n    public abstract readonly nullCount: number;\n    public abstract readonly byteLength: number;\n    public abstract readonly numChildren: number;\n\n    public abstract readonly ArrayType: T['ArrayType'];\n\n    public abstract isValid(index: number): boolean;\n    public abstract get(index: number): T['TValue'] | null;\n    public abstract set(index: number, value: T['TValue'] | null): void;\n    public abstract indexOf(value: T['TValue'] | null, fromIndex?: number): number;\n    public abstract [Symbol.iterator](): IterableIterator<T['TValue'] | null>;\n\n    public abstract toArray(): T['TArray'];\n    public abstract getChildAt<R extends DataType = any>(index: number): Vector<R> | null;\n}\n\n(AbstractVector.prototype as any).data = null;\n\nexport { AbstractVector as Vector };\n","// automatically generated by the FlatBuffers compiler, do not modify\n\nimport { flatbuffers } from 'flatbuffers';\n/**\n * Logical types, vector layouts, and schemas\n *\n * @enum {number}\n */\nexport enum MetadataVersion {\n    /**\n     * 0.1.0 (October 2016).\n     */\n    V1 = 0,\n\n    /**\n     * 0.2.0 (February 2017). Non-backwards compatible with V1.\n     */\n    V2 = 1,\n\n    /**\n     * 0.3.0 -> 0.7.1 (May - December 2017). Non-backwards compatible with V2.\n     */\n    V3 = 2,\n\n    /**\n     * >= 0.8.0 (December 2017). Non-backwards compatible with V3.\n     */\n    V4 = 3,\n\n    /**\n     * >= 1.0.0 (July 2020. Backwards compatible with V4 (V5 readers can read V4\n     * metadata and IPC messages). Implementations are recommended to provide a\n     * V4 compatibility mode with V5 format changes disabled.\n     *\n     * Incompatible changes between V4 and V5:\n     * - Union buffer layout has changed. In V5, Unions don't have a validity\n     *   bitmap buffer.\n     */\n    V5 = 4\n}\n\n/**\n * Represents Arrow Features that might not have full support\n * within implementations. This is intended to be used in\n * two scenarios:\n *  1.  A mechanism for readers of Arrow Streams\n *      and files to understand that the stream or file makes\n *      use of a feature that isn't supported or unknown to\n *      the implementation (and therefore can meet the Arrow\n *      forward compatibility guarantees).\n *  2.  A means of negotiating between a client and server\n *      what features a stream is allowed to use. The enums\n *      values here are intented to represent higher level\n *      features, additional details maybe negotiated\n *      with key-value pairs specific to the protocol.\n *\n * Enums added to this list should be assigned power-of-two values\n * to facilitate exchanging and comparing bitmaps for supported\n * features.\n *\n * @enum {number}\n */\nexport enum Feature {\n    /**\n     * Needed to make flatbuffers happy.\n     */\n    UNUSED = 0,\n\n    /**\n     * The stream makes use of multiple full dictionaries with the\n     * same ID and assumes clients implement dictionary replacement\n     * correctly.\n     */\n    DICTIONARY_REPLACEMENT = 1,\n\n    /**\n     * The stream makes use of compressed bodies as described\n     * in Message.fbs.\n     */\n    COMPRESSED_BODY = 2\n}\n\n/**\n * @enum {number}\n */\nexport enum UnionMode {\n    Sparse = 0,\n    Dense = 1\n}\n\n/**\n * @enum {number}\n */\nexport enum Precision {\n    HALF = 0,\n    SINGLE = 1,\n    DOUBLE = 2\n}\n\n/**\n * @enum {number}\n */\nexport enum DateUnit {\n    DAY = 0,\n    MILLISECOND = 1\n}\n\n/**\n * @enum {number}\n */\nexport enum TimeUnit {\n    SECOND = 0,\n    MILLISECOND = 1,\n    MICROSECOND = 2,\n    NANOSECOND = 3\n}\n\n/**\n * @enum {number}\n */\nexport enum IntervalUnit {\n    YEAR_MONTH = 0,\n    DAY_TIME = 1\n}\n\n/**\n * ----------------------------------------------------------------------\n * Top-level Type value, enabling extensible type-specific metadata. We can\n * add new logical types to Type without breaking backwards compatibility\n *\n * @enum {number}\n */\nexport enum Type {\n    NONE = 0,\n    Null = 1,\n    Int = 2,\n    FloatingPoint = 3,\n    Binary = 4,\n    Utf8 = 5,\n    Bool = 6,\n    Decimal = 7,\n    Date = 8,\n    Time = 9,\n    Timestamp = 10,\n    Interval = 11,\n    List = 12,\n    Struct_ = 13,\n    Union = 14,\n    FixedSizeBinary = 15,\n    FixedSizeList = 16,\n    Map = 17,\n    Duration = 18,\n    LargeBinary = 19,\n    LargeUtf8 = 20,\n    LargeList = 21\n}\n\n/**\n * ----------------------------------------------------------------------\n * Dictionary encoding metadata\n * Maintained for forwards compatibility, in the future\n * Dictionaries might be explicit maps between integers and values\n * allowing for non-contiguous index values\n *\n * @enum {number}\n */\nexport enum DictionaryKind {\n    DenseArray = 0\n}\n\n/**\n * ----------------------------------------------------------------------\n * Endianness of the platform producing the data\n *\n * @enum {number}\n */\nexport enum Endianness {\n    Little = 0,\n    Big = 1\n}\n\n/**\n * These are stored in the flatbuffer in the Type union below\n *\n * @constructor\n */\nexport class Null {\n    bb: flatbuffers.ByteBuffer | null = null;\n\n    bb_pos: number = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Null\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Null {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Null= obj\n     * @returns Null\n     */\n    static getRootAsNull(bb: flatbuffers.ByteBuffer, obj?: Null): Null {\n        return (obj || new Null()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Null= obj\n     * @returns Null\n     */\n    static getSizePrefixedRootAsNull(bb: flatbuffers.ByteBuffer, obj?: Null): Null {\n        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n        return (obj || new Null()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startNull(builder: flatbuffers.Builder) {\n        builder.startObject(0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endNull(builder: flatbuffers.Builder): flatbuffers.Offset {\n        const offset = builder.endObject();\n        return offset;\n    }\n\n    static createNull(builder: flatbuffers.Builder): flatbuffers.Offset {\n        Null.startNull(builder);\n        return Null.endNull(builder);\n    }\n}\n/**\n * A Struct_ in the flatbuffer metadata is the same as an Arrow Struct\n * (according to the physical memory layout). We used Struct_ here as\n * Struct is a reserved word in Flatbuffers\n *\n * @constructor\n */\nexport class Struct_ {\n    bb: flatbuffers.ByteBuffer | null = null;\n\n    bb_pos: number = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Struct_\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Struct_ {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Struct_= obj\n     * @returns Struct_\n     */\n    static getRootAsStruct_(bb: flatbuffers.ByteBuffer, obj?: Struct_): Struct_ {\n        return (obj || new Struct_()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Struct_= obj\n     * @returns Struct_\n     */\n    static getSizePrefixedRootAsStruct_(bb: flatbuffers.ByteBuffer, obj?: Struct_): Struct_ {\n        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n        return (obj || new Struct_()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startStruct_(builder: flatbuffers.Builder) {\n        builder.startObject(0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endStruct_(builder: flatbuffers.Builder): flatbuffers.Offset {\n        const offset = builder.endObject();\n        return offset;\n    }\n\n    static createStruct_(builder: flatbuffers.Builder): flatbuffers.Offset {\n        Struct_.startStruct_(builder);\n        return Struct_.endStruct_(builder);\n    }\n}\n/**\n * @constructor\n */\nexport class List {\n    bb: flatbuffers.ByteBuffer | null = null;\n\n    bb_pos: number = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns List\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): List {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param List= obj\n     * @returns List\n     */\n    static getRootAsList(bb: flatbuffers.ByteBuffer, obj?: List): List {\n        return (obj || new List()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param List= obj\n     * @returns List\n     */\n    static getSizePrefixedRootAsList(bb: flatbuffers.ByteBuffer, obj?: List): List {\n        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n        return (obj || new List()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startList(builder: flatbuffers.Builder) {\n        builder.startObject(0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endList(builder: flatbuffers.Builder): flatbuffers.Offset {\n        const offset = builder.endObject();\n        return offset;\n    }\n\n    static createList(builder: flatbuffers.Builder): flatbuffers.Offset {\n        List.startList(builder);\n        return List.endList(builder);\n    }\n}\n/**\n * Same as List, but with 64-bit offsets, allowing to represent\n * extremely large data values.\n *\n * @constructor\n */\nexport class LargeList {\n    bb: flatbuffers.ByteBuffer | null = null;\n\n    bb_pos: number = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns LargeList\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): LargeList {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param LargeList= obj\n     * @returns LargeList\n     */\n    static getRootAsLargeList(bb: flatbuffers.ByteBuffer, obj?: LargeList): LargeList {\n        return (obj || new LargeList()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param LargeList= obj\n     * @returns LargeList\n     */\n    static getSizePrefixedRootAsLargeList(bb: flatbuffers.ByteBuffer, obj?: LargeList): LargeList {\n        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n        return (obj || new LargeList()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startLargeList(builder: flatbuffers.Builder) {\n        builder.startObject(0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endLargeList(builder: flatbuffers.Builder): flatbuffers.Offset {\n        const offset = builder.endObject();\n        return offset;\n    }\n\n    static createLargeList(builder: flatbuffers.Builder): flatbuffers.Offset {\n        LargeList.startLargeList(builder);\n        return LargeList.endLargeList(builder);\n    }\n}\n/**\n * @constructor\n */\nexport class FixedSizeList {\n    bb: flatbuffers.ByteBuffer | null = null;\n\n    bb_pos: number = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns FixedSizeList\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): FixedSizeList {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param FixedSizeList= obj\n     * @returns FixedSizeList\n     */\n    static getRootAsFixedSizeList(bb: flatbuffers.ByteBuffer, obj?: FixedSizeList): FixedSizeList {\n        return (obj || new FixedSizeList()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param FixedSizeList= obj\n     * @returns FixedSizeList\n     */\n    static getSizePrefixedRootAsFixedSizeList(bb: flatbuffers.ByteBuffer, obj?: FixedSizeList): FixedSizeList {\n        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n        return (obj || new FixedSizeList()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * Number of list items per value\n     *\n     * @returns number\n     */\n    listSize(): number {\n        const offset = this.bb!.__offset(this.bb_pos, 4);\n        return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startFixedSizeList(builder: flatbuffers.Builder) {\n        builder.startObject(1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number listSize\n     */\n    static addListSize(builder: flatbuffers.Builder, listSize: number) {\n        builder.addFieldInt32(0, listSize, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endFixedSizeList(builder: flatbuffers.Builder): flatbuffers.Offset {\n        const offset = builder.endObject();\n        return offset;\n    }\n\n    static createFixedSizeList(builder: flatbuffers.Builder, listSize: number): flatbuffers.Offset {\n        FixedSizeList.startFixedSizeList(builder);\n        FixedSizeList.addListSize(builder, listSize);\n        return FixedSizeList.endFixedSizeList(builder);\n    }\n}\n/**\n * A Map is a logical nested type that is represented as\n *\n * List<entries: Struct<key: K, value: V>>\n *\n * In this layout, the keys and values are each respectively contiguous. We do\n * not constrain the key and value types, so the application is responsible\n * for ensuring that the keys are hashable and unique. Whether the keys are sorted\n * may be set in the metadata for this field.\n *\n * In a field with Map type, the field has a child Struct field, which then\n * has two children: key type and the second the value type. The names of the\n * child fields may be respectively \"entries\", \"key\", and \"value\", but this is\n * not enforced.\n *\n * Map\n *   - child[0] entries: Struct\n *     - child[0] key: K\n *     - child[1] value: V\n *\n * Neither the \"entries\" field nor the \"key\" field may be nullable.\n *\n * The metadata is structured so that Arrow systems without special handling\n * for Map can make Map an alias for List. The \"layout\" attribute for the Map\n * field must have the same contents as a List.\n *\n * @constructor\n */\nexport class Map {\n    bb: flatbuffers.ByteBuffer | null = null;\n\n    bb_pos: number = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Map\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Map {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Map= obj\n     * @returns Map\n     */\n    static getRootAsMap(bb: flatbuffers.ByteBuffer, obj?: Map): Map {\n        return (obj || new Map()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Map= obj\n     * @returns Map\n     */\n    static getSizePrefixedRootAsMap(bb: flatbuffers.ByteBuffer, obj?: Map): Map {\n        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n        return (obj || new Map()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * Set to true if the keys within each value are sorted\n     *\n     * @returns boolean\n     */\n    keysSorted(): boolean {\n        const offset = this.bb!.__offset(this.bb_pos, 4);\n        return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startMap(builder: flatbuffers.Builder) {\n        builder.startObject(1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param boolean keysSorted\n     */\n    static addKeysSorted(builder: flatbuffers.Builder, keysSorted: boolean) {\n        builder.addFieldInt8(0, +keysSorted, +false);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endMap(builder: flatbuffers.Builder): flatbuffers.Offset {\n        const offset = builder.endObject();\n        return offset;\n    }\n\n    static createMap(builder: flatbuffers.Builder, keysSorted: boolean): flatbuffers.Offset {\n        Map.startMap(builder);\n        Map.addKeysSorted(builder, keysSorted);\n        return Map.endMap(builder);\n    }\n}\n/**\n * A union is a complex type with children in Field\n * By default ids in the type vector refer to the offsets in the children\n * optionally typeIds provides an indirection between the child offset and the type id\n * for each child typeIds[offset] is the id used in the type vector\n *\n * @constructor\n */\nexport class Union {\n    bb: flatbuffers.ByteBuffer | null = null;\n\n    bb_pos: number = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Union\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Union {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Union= obj\n     * @returns Union\n     */\n    static getRootAsUnion(bb: flatbuffers.ByteBuffer, obj?: Union): Union {\n        return (obj || new Union()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Union= obj\n     * @returns Union\n     */\n    static getSizePrefixedRootAsUnion(bb: flatbuffers.ByteBuffer, obj?: Union): Union {\n        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n        return (obj || new Union()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns UnionMode\n     */\n    mode(): UnionMode {\n        const offset = this.bb!.__offset(this.bb_pos, 4);\n        return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : UnionMode.Sparse;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    typeIds(index: number): number | null {\n        const offset = this.bb!.__offset(this.bb_pos, 6);\n        return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    typeIdsLength(): number {\n        const offset = this.bb!.__offset(this.bb_pos, 6);\n        return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Int32Array\n     */\n    typeIdsArray(): Int32Array | null {\n        const offset = this.bb!.__offset(this.bb_pos, 6);\n        return offset ? new Int32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startUnion(builder: flatbuffers.Builder) {\n        builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param UnionMode mode\n     */\n    static addMode(builder: flatbuffers.Builder, mode: UnionMode) {\n        builder.addFieldInt16(0, mode, UnionMode.Sparse);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset typeIdsOffset\n     */\n    static addTypeIds(builder: flatbuffers.Builder, typeIdsOffset: flatbuffers.Offset) {\n        builder.addFieldOffset(1, typeIdsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createTypeIdsVector(builder: flatbuffers.Builder, data: number[] | Int32Array): flatbuffers.Offset {\n        builder.startVector(4, data.length, 4);\n        for (let i = data.length - 1; i >= 0; i--) {\n            builder.addInt32(data[i]);\n        }\n        return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startTypeIdsVector(builder: flatbuffers.Builder, numElems: number) {\n        builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endUnion(builder: flatbuffers.Builder): flatbuffers.Offset {\n        const offset = builder.endObject();\n        return offset;\n    }\n\n    static createUnion(builder: flatbuffers.Builder, mode: UnionMode, typeIdsOffset: flatbuffers.Offset): flatbuffers.Offset {\n        Union.startUnion(builder);\n        Union.addMode(builder, mode);\n        Union.addTypeIds(builder, typeIdsOffset);\n        return Union.endUnion(builder);\n    }\n}\n/**\n * @constructor\n */\nexport class Int {\n    bb: flatbuffers.ByteBuffer | null = null;\n\n    bb_pos: number = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Int\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Int {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Int= obj\n     * @returns Int\n     */\n    static getRootAsInt(bb: flatbuffers.ByteBuffer, obj?: Int): Int {\n        return (obj || new Int()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Int= obj\n     * @returns Int\n     */\n    static getSizePrefixedRootAsInt(bb: flatbuffers.ByteBuffer, obj?: Int): Int {\n        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n        return (obj || new Int()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns number\n     */\n    bitWidth(): number {\n        const offset = this.bb!.__offset(this.bb_pos, 4);\n        return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns boolean\n     */\n    isSigned(): boolean {\n        const offset = this.bb!.__offset(this.bb_pos, 6);\n        return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startInt(builder: flatbuffers.Builder) {\n        builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number bitWidth\n     */\n    static addBitWidth(builder: flatbuffers.Builder, bitWidth: number) {\n        builder.addFieldInt32(0, bitWidth, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param boolean isSigned\n     */\n    static addIsSigned(builder: flatbuffers.Builder, isSigned: boolean) {\n        builder.addFieldInt8(1, +isSigned, +false);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endInt(builder: flatbuffers.Builder): flatbuffers.Offset {\n        const offset = builder.endObject();\n        return offset;\n    }\n\n    static createInt(builder: flatbuffers.Builder, bitWidth: number, isSigned: boolean): flatbuffers.Offset {\n        Int.startInt(builder);\n        Int.addBitWidth(builder, bitWidth);\n        Int.addIsSigned(builder, isSigned);\n        return Int.endInt(builder);\n    }\n}\n/**\n * @constructor\n */\nexport class FloatingPoint {\n    bb: flatbuffers.ByteBuffer | null = null;\n\n    bb_pos: number = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns FloatingPoint\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): FloatingPoint {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param FloatingPoint= obj\n     * @returns FloatingPoint\n     */\n    static getRootAsFloatingPoint(bb: flatbuffers.ByteBuffer, obj?: FloatingPoint): FloatingPoint {\n        return (obj || new FloatingPoint()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param FloatingPoint= obj\n     * @returns FloatingPoint\n     */\n    static getSizePrefixedRootAsFloatingPoint(bb: flatbuffers.ByteBuffer, obj?: FloatingPoint): FloatingPoint {\n        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n        return (obj || new FloatingPoint()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns Precision\n     */\n    precision(): Precision {\n        const offset = this.bb!.__offset(this.bb_pos, 4);\n        return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : Precision.HALF;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startFloatingPoint(builder: flatbuffers.Builder) {\n        builder.startObject(1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Precision precision\n     */\n    static addPrecision(builder: flatbuffers.Builder, precision: Precision) {\n        builder.addFieldInt16(0, precision, Precision.HALF);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endFloatingPoint(builder: flatbuffers.Builder): flatbuffers.Offset {\n        const offset = builder.endObject();\n        return offset;\n    }\n\n    static createFloatingPoint(builder: flatbuffers.Builder, precision: Precision): flatbuffers.Offset {\n        FloatingPoint.startFloatingPoint(builder);\n        FloatingPoint.addPrecision(builder, precision);\n        return FloatingPoint.endFloatingPoint(builder);\n    }\n}\n/**\n * Unicode with UTF-8 encoding\n *\n * @constructor\n */\nexport class Utf8 {\n    bb: flatbuffers.ByteBuffer | null = null;\n\n    bb_pos: number = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Utf8\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Utf8 {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Utf8= obj\n     * @returns Utf8\n     */\n    static getRootAsUtf8(bb: flatbuffers.ByteBuffer, obj?: Utf8): Utf8 {\n        return (obj || new Utf8()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Utf8= obj\n     * @returns Utf8\n     */\n    static getSizePrefixedRootAsUtf8(bb: flatbuffers.ByteBuffer, obj?: Utf8): Utf8 {\n        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n        return (obj || new Utf8()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startUtf8(builder: flatbuffers.Builder) {\n        builder.startObject(0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endUtf8(builder: flatbuffers.Builder): flatbuffers.Offset {\n        const offset = builder.endObject();\n        return offset;\n    }\n\n    static createUtf8(builder: flatbuffers.Builder): flatbuffers.Offset {\n        Utf8.startUtf8(builder);\n        return Utf8.endUtf8(builder);\n    }\n}\n/**\n * Opaque binary data\n *\n * @constructor\n */\nexport class Binary {\n    bb: flatbuffers.ByteBuffer | null = null;\n\n    bb_pos: number = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Binary\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Binary {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Binary= obj\n     * @returns Binary\n     */\n    static getRootAsBinary(bb: flatbuffers.ByteBuffer, obj?: Binary): Binary {\n        return (obj || new Binary()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Binary= obj\n     * @returns Binary\n     */\n    static getSizePrefixedRootAsBinary(bb: flatbuffers.ByteBuffer, obj?: Binary): Binary {\n        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n        return (obj || new Binary()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startBinary(builder: flatbuffers.Builder) {\n        builder.startObject(0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n        const offset = builder.endObject();\n        return offset;\n    }\n\n    static createBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n        Binary.startBinary(builder);\n        return Binary.endBinary(builder);\n    }\n}\n/**\n * Same as Utf8, but with 64-bit offsets, allowing to represent\n * extremely large data values.\n *\n * @constructor\n */\nexport class LargeUtf8 {\n    bb: flatbuffers.ByteBuffer | null = null;\n\n    bb_pos: number = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns LargeUtf8\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): LargeUtf8 {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param LargeUtf8= obj\n     * @returns LargeUtf8\n     */\n    static getRootAsLargeUtf8(bb: flatbuffers.ByteBuffer, obj?: LargeUtf8): LargeUtf8 {\n        return (obj || new LargeUtf8()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param LargeUtf8= obj\n     * @returns LargeUtf8\n     */\n    static getSizePrefixedRootAsLargeUtf8(bb: flatbuffers.ByteBuffer, obj?: LargeUtf8): LargeUtf8 {\n        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n        return (obj || new LargeUtf8()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startLargeUtf8(builder: flatbuffers.Builder) {\n        builder.startObject(0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endLargeUtf8(builder: flatbuffers.Builder): flatbuffers.Offset {\n        const offset = builder.endObject();\n        return offset;\n    }\n\n    static createLargeUtf8(builder: flatbuffers.Builder): flatbuffers.Offset {\n        LargeUtf8.startLargeUtf8(builder);\n        return LargeUtf8.endLargeUtf8(builder);\n    }\n}\n/**\n * Same as Binary, but with 64-bit offsets, allowing to represent\n * extremely large data values.\n *\n * @constructor\n */\nexport class LargeBinary {\n    bb: flatbuffers.ByteBuffer | null = null;\n\n    bb_pos: number = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns LargeBinary\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): LargeBinary {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param LargeBinary= obj\n     * @returns LargeBinary\n     */\n    static getRootAsLargeBinary(bb: flatbuffers.ByteBuffer, obj?: LargeBinary): LargeBinary {\n        return (obj || new LargeBinary()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param LargeBinary= obj\n     * @returns LargeBinary\n     */\n    static getSizePrefixedRootAsLargeBinary(bb: flatbuffers.ByteBuffer, obj?: LargeBinary): LargeBinary {\n        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n        return (obj || new LargeBinary()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startLargeBinary(builder: flatbuffers.Builder) {\n        builder.startObject(0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endLargeBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n        const offset = builder.endObject();\n        return offset;\n    }\n\n    static createLargeBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n        LargeBinary.startLargeBinary(builder);\n        return LargeBinary.endLargeBinary(builder);\n    }\n}\n/**\n * @constructor\n */\nexport class FixedSizeBinary {\n    bb: flatbuffers.ByteBuffer | null = null;\n\n    bb_pos: number = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns FixedSizeBinary\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): FixedSizeBinary {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param FixedSizeBinary= obj\n     * @returns FixedSizeBinary\n     */\n    static getRootAsFixedSizeBinary(bb: flatbuffers.ByteBuffer, obj?: FixedSizeBinary): FixedSizeBinary {\n        return (obj || new FixedSizeBinary()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param FixedSizeBinary= obj\n     * @returns FixedSizeBinary\n     */\n    static getSizePrefixedRootAsFixedSizeBinary(bb: flatbuffers.ByteBuffer, obj?: FixedSizeBinary): FixedSizeBinary {\n        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n        return (obj || new FixedSizeBinary()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * Number of bytes per value\n     *\n     * @returns number\n     */\n    byteWidth(): number {\n        const offset = this.bb!.__offset(this.bb_pos, 4);\n        return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startFixedSizeBinary(builder: flatbuffers.Builder) {\n        builder.startObject(1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number byteWidth\n     */\n    static addByteWidth(builder: flatbuffers.Builder, byteWidth: number) {\n        builder.addFieldInt32(0, byteWidth, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endFixedSizeBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n        const offset = builder.endObject();\n        return offset;\n    }\n\n    static createFixedSizeBinary(builder: flatbuffers.Builder, byteWidth: number): flatbuffers.Offset {\n        FixedSizeBinary.startFixedSizeBinary(builder);\n        FixedSizeBinary.addByteWidth(builder, byteWidth);\n        return FixedSizeBinary.endFixedSizeBinary(builder);\n    }\n}\n/**\n * @constructor\n */\nexport class Bool {\n    bb: flatbuffers.ByteBuffer | null = null;\n\n    bb_pos: number = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Bool\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Bool {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Bool= obj\n     * @returns Bool\n     */\n    static getRootAsBool(bb: flatbuffers.ByteBuffer, obj?: Bool): Bool {\n        return (obj || new Bool()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Bool= obj\n     * @returns Bool\n     */\n    static getSizePrefixedRootAsBool(bb: flatbuffers.ByteBuffer, obj?: Bool): Bool {\n        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n        return (obj || new Bool()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startBool(builder: flatbuffers.Builder) {\n        builder.startObject(0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endBool(builder: flatbuffers.Builder): flatbuffers.Offset {\n        const offset = builder.endObject();\n        return offset;\n    }\n\n    static createBool(builder: flatbuffers.Builder): flatbuffers.Offset {\n        Bool.startBool(builder);\n        return Bool.endBool(builder);\n    }\n}\n/**\n * Exact decimal value represented as an integer value in two's\n * complement. Currently only 128-bit (16-byte) and 256-bit (32-byte) integers\n * are used. The representation uses the endianness indicated\n * in the Schema.\n *\n * @constructor\n */\nexport class Decimal {\n    bb: flatbuffers.ByteBuffer | null = null;\n\n    bb_pos: number = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Decimal\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Decimal {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Decimal= obj\n     * @returns Decimal\n     */\n    static getRootAsDecimal(bb: flatbuffers.ByteBuffer, obj?: Decimal): Decimal {\n        return (obj || new Decimal()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Decimal= obj\n     * @returns Decimal\n     */\n    static getSizePrefixedRootAsDecimal(bb: flatbuffers.ByteBuffer, obj?: Decimal): Decimal {\n        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n        return (obj || new Decimal()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * Total number of decimal digits\n     *\n     * @returns number\n     */\n    precision(): number {\n        const offset = this.bb!.__offset(this.bb_pos, 4);\n        return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * Number of digits after the decimal point \".\"\n     *\n     * @returns number\n     */\n    scale(): number {\n        const offset = this.bb!.__offset(this.bb_pos, 6);\n        return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * Number of bits per value. The only accepted widths are 128 and 256.\n     * We use bitWidth for consistency with Int::bitWidth.\n     *\n     * @returns number\n     */\n    bitWidth(): number {\n        const offset = this.bb!.__offset(this.bb_pos, 8);\n        return offset ? this.bb!.readInt32(this.bb_pos + offset) : 128;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startDecimal(builder: flatbuffers.Builder) {\n        builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number precision\n     */\n    static addPrecision(builder: flatbuffers.Builder, precision: number) {\n        builder.addFieldInt32(0, precision, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number scale\n     */\n    static addScale(builder: flatbuffers.Builder, scale: number) {\n        builder.addFieldInt32(1, scale, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number bitWidth\n     */\n    static addBitWidth(builder: flatbuffers.Builder, bitWidth: number) {\n        builder.addFieldInt32(2, bitWidth, 128);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endDecimal(builder: flatbuffers.Builder): flatbuffers.Offset {\n        const offset = builder.endObject();\n        return offset;\n    }\n\n    static createDecimal(builder: flatbuffers.Builder, precision: number, scale: number, bitWidth: number): flatbuffers.Offset {\n        Decimal.startDecimal(builder);\n        Decimal.addPrecision(builder, precision);\n        Decimal.addScale(builder, scale);\n        Decimal.addBitWidth(builder, bitWidth);\n        return Decimal.endDecimal(builder);\n    }\n}\n/**\n * Date is either a 32-bit or 64-bit type representing elapsed time since UNIX\n * epoch (1970-01-01), stored in either of two units:\n *\n * * Milliseconds (64 bits) indicating UNIX time elapsed since the epoch (no\n *   leap seconds), where the values are evenly divisible by 86400000\n * * Days (32 bits) since the UNIX epoch\n *\n * @constructor\n */\nexport class Date {\n    bb: flatbuffers.ByteBuffer | null = null;\n\n    bb_pos: number = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Date\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Date {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Date= obj\n     * @returns Date\n     */\n    static getRootAsDate(bb: flatbuffers.ByteBuffer, obj?: Date): Date {\n        return (obj || new Date()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Date= obj\n     * @returns Date\n     */\n    static getSizePrefixedRootAsDate(bb: flatbuffers.ByteBuffer, obj?: Date): Date {\n        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n        return (obj || new Date()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns DateUnit\n     */\n    unit(): DateUnit {\n        const offset = this.bb!.__offset(this.bb_pos, 4);\n        return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : DateUnit.MILLISECOND;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startDate(builder: flatbuffers.Builder) {\n        builder.startObject(1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param DateUnit unit\n     */\n    static addUnit(builder: flatbuffers.Builder, unit: DateUnit) {\n        builder.addFieldInt16(0, unit, DateUnit.MILLISECOND);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endDate(builder: flatbuffers.Builder): flatbuffers.Offset {\n        const offset = builder.endObject();\n        return offset;\n    }\n\n    static createDate(builder: flatbuffers.Builder, unit: DateUnit): flatbuffers.Offset {\n        Date.startDate(builder);\n        Date.addUnit(builder, unit);\n        return Date.endDate(builder);\n    }\n}\n/**\n * Time type. The physical storage type depends on the unit\n * - SECOND and MILLISECOND: 32 bits\n * - MICROSECOND and NANOSECOND: 64 bits\n *\n * @constructor\n */\nexport class Time {\n    bb: flatbuffers.ByteBuffer | null = null;\n\n    bb_pos: number = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Time\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Time {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Time= obj\n     * @returns Time\n     */\n    static getRootAsTime(bb: flatbuffers.ByteBuffer, obj?: Time): Time {\n        return (obj || new Time()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Time= obj\n     * @returns Time\n     */\n    static getSizePrefixedRootAsTime(bb: flatbuffers.ByteBuffer, obj?: Time): Time {\n        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n        return (obj || new Time()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns TimeUnit\n     */\n    unit(): TimeUnit {\n        const offset = this.bb!.__offset(this.bb_pos, 4);\n        return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : TimeUnit.MILLISECOND;\n    }\n\n    /**\n     * @returns number\n     */\n    bitWidth(): number {\n        const offset = this.bb!.__offset(this.bb_pos, 6);\n        return offset ? this.bb!.readInt32(this.bb_pos + offset) : 32;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTime(builder: flatbuffers.Builder) {\n        builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param TimeUnit unit\n     */\n    static addUnit(builder: flatbuffers.Builder, unit: TimeUnit) {\n        builder.addFieldInt16(0, unit, TimeUnit.MILLISECOND);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number bitWidth\n     */\n    static addBitWidth(builder: flatbuffers.Builder, bitWidth: number) {\n        builder.addFieldInt32(1, bitWidth, 32);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTime(builder: flatbuffers.Builder): flatbuffers.Offset {\n        const offset = builder.endObject();\n        return offset;\n    }\n\n    static createTime(builder: flatbuffers.Builder, unit: TimeUnit, bitWidth: number): flatbuffers.Offset {\n        Time.startTime(builder);\n        Time.addUnit(builder, unit);\n        Time.addBitWidth(builder, bitWidth);\n        return Time.endTime(builder);\n    }\n}\n/**\n * Time elapsed from the Unix epoch, 00:00:00.000 on 1 January 1970, excluding\n * leap seconds, as a 64-bit integer. Note that UNIX time does not include\n * leap seconds.\n *\n * The Timestamp metadata supports both \"time zone naive\" and \"time zone\n * aware\" timestamps. Read about the timezone attribute for more detail\n *\n * @constructor\n */\nexport class Timestamp {\n    bb: flatbuffers.ByteBuffer | null = null;\n\n    bb_pos: number = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Timestamp\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Timestamp {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Timestamp= obj\n     * @returns Timestamp\n     */\n    static getRootAsTimestamp(bb: flatbuffers.ByteBuffer, obj?: Timestamp): Timestamp {\n        return (obj || new Timestamp()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Timestamp= obj\n     * @returns Timestamp\n     */\n    static getSizePrefixedRootAsTimestamp(bb: flatbuffers.ByteBuffer, obj?: Timestamp): Timestamp {\n        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n        return (obj || new Timestamp()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns TimeUnit\n     */\n    unit(): TimeUnit {\n        const offset = this.bb!.__offset(this.bb_pos, 4);\n        return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : TimeUnit.SECOND;\n    }\n\n    /**\n     * The time zone is a string indicating the name of a time zone, one of:\n     *\n     * * As used in the Olson time zone database (the \"tz database\" or\n     *   \"tzdata\"), such as \"America/New_York\"\n     * * An absolute time zone offset of the form +XX:XX or -XX:XX, such as +07:30\n     *\n     * Whether a timezone string is present indicates different semantics about\n     * the data:\n     *\n     * * If the time zone is null or equal to an empty string, the data is \"time\n     *   zone naive\" and shall be displayed *as is* to the user, not localized\n     *   to the locale of the user. This data can be though of as UTC but\n     *   without having \"UTC\" as the time zone, it is not considered to be\n     *   localized to any time zone\n     *\n     * * If the time zone is set to a valid value, values can be displayed as\n     *   \"localized\" to that time zone, even though the underlying 64-bit\n     *   integers are identical to the same data stored in UTC. Converting\n     *   between time zones is a metadata-only operation and does not change the\n     *   underlying values\n     *\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    timezone(): string | null;\n    timezone(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    timezone(optionalEncoding?: any): string | Uint8Array | null {\n        const offset = this.bb!.__offset(this.bb_pos, 6);\n        return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTimestamp(builder: flatbuffers.Builder) {\n        builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param TimeUnit unit\n     */\n    static addUnit(builder: flatbuffers.Builder, unit: TimeUnit) {\n        builder.addFieldInt16(0, unit, TimeUnit.SECOND);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset timezoneOffset\n     */\n    static addTimezone(builder: flatbuffers.Builder, timezoneOffset: flatbuffers.Offset) {\n        builder.addFieldOffset(1, timezoneOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTimestamp(builder: flatbuffers.Builder): flatbuffers.Offset {\n        const offset = builder.endObject();\n        return offset;\n    }\n\n    static createTimestamp(builder: flatbuffers.Builder, unit: TimeUnit, timezoneOffset: flatbuffers.Offset): flatbuffers.Offset {\n        Timestamp.startTimestamp(builder);\n        Timestamp.addUnit(builder, unit);\n        Timestamp.addTimezone(builder, timezoneOffset);\n        return Timestamp.endTimestamp(builder);\n    }\n}\n/**\n * @constructor\n */\nexport class Interval {\n    bb: flatbuffers.ByteBuffer | null = null;\n\n    bb_pos: number = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Interval\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Interval {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Interval= obj\n     * @returns Interval\n     */\n    static getRootAsInterval(bb: flatbuffers.ByteBuffer, obj?: Interval): Interval {\n        return (obj || new Interval()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Interval= obj\n     * @returns Interval\n     */\n    static getSizePrefixedRootAsInterval(bb: flatbuffers.ByteBuffer, obj?: Interval): Interval {\n        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n        return (obj || new Interval()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns IntervalUnit\n     */\n    unit(): IntervalUnit {\n        const offset = this.bb!.__offset(this.bb_pos, 4);\n        return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : IntervalUnit.YEAR_MONTH;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startInterval(builder: flatbuffers.Builder) {\n        builder.startObject(1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param IntervalUnit unit\n     */\n    static addUnit(builder: flatbuffers.Builder, unit: IntervalUnit) {\n        builder.addFieldInt16(0, unit, IntervalUnit.YEAR_MONTH);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endInterval(builder: flatbuffers.Builder): flatbuffers.Offset {\n        const offset = builder.endObject();\n        return offset;\n    }\n\n    static createInterval(builder: flatbuffers.Builder, unit: IntervalUnit): flatbuffers.Offset {\n        Interval.startInterval(builder);\n        Interval.addUnit(builder, unit);\n        return Interval.endInterval(builder);\n    }\n}\n/**\n * @constructor\n */\nexport class Duration {\n    bb: flatbuffers.ByteBuffer | null = null;\n\n    bb_pos: number = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Duration\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Duration {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Duration= obj\n     * @returns Duration\n     */\n    static getRootAsDuration(bb: flatbuffers.ByteBuffer, obj?: Duration): Duration {\n        return (obj || new Duration()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Duration= obj\n     * @returns Duration\n     */\n    static getSizePrefixedRootAsDuration(bb: flatbuffers.ByteBuffer, obj?: Duration): Duration {\n        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n        return (obj || new Duration()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns TimeUnit\n     */\n    unit(): TimeUnit {\n        const offset = this.bb!.__offset(this.bb_pos, 4);\n        return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : TimeUnit.MILLISECOND;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startDuration(builder: flatbuffers.Builder) {\n        builder.startObject(1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param TimeUnit unit\n     */\n    static addUnit(builder: flatbuffers.Builder, unit: TimeUnit) {\n        builder.addFieldInt16(0, unit, TimeUnit.MILLISECOND);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endDuration(builder: flatbuffers.Builder): flatbuffers.Offset {\n        const offset = builder.endObject();\n        return offset;\n    }\n\n    static createDuration(builder: flatbuffers.Builder, unit: TimeUnit): flatbuffers.Offset {\n        Duration.startDuration(builder);\n        Duration.addUnit(builder, unit);\n        return Duration.endDuration(builder);\n    }\n}\n/**\n * ----------------------------------------------------------------------\n * user defined key value pairs to add custom metadata to arrow\n * key namespacing is the responsibility of the user\n *\n * @constructor\n */\nexport class KeyValue {\n    bb: flatbuffers.ByteBuffer | null = null;\n\n    bb_pos: number = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns KeyValue\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): KeyValue {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param KeyValue= obj\n     * @returns KeyValue\n     */\n    static getRootAsKeyValue(bb: flatbuffers.ByteBuffer, obj?: KeyValue): KeyValue {\n        return (obj || new KeyValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param KeyValue= obj\n     * @returns KeyValue\n     */\n    static getSizePrefixedRootAsKeyValue(bb: flatbuffers.ByteBuffer, obj?: KeyValue): KeyValue {\n        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n        return (obj || new KeyValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    key(): string | null;\n    key(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    key(optionalEncoding?: any): string | Uint8Array | null {\n        const offset = this.bb!.__offset(this.bb_pos, 4);\n        return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    value(): string | null;\n    value(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    value(optionalEncoding?: any): string | Uint8Array | null {\n        const offset = this.bb!.__offset(this.bb_pos, 6);\n        return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startKeyValue(builder: flatbuffers.Builder) {\n        builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset keyOffset\n     */\n    static addKey(builder: flatbuffers.Builder, keyOffset: flatbuffers.Offset) {\n        builder.addFieldOffset(0, keyOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueOffset\n     */\n    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\n        builder.addFieldOffset(1, valueOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endKeyValue(builder: flatbuffers.Builder): flatbuffers.Offset {\n        const offset = builder.endObject();\n        return offset;\n    }\n\n    static createKeyValue(builder: flatbuffers.Builder, keyOffset: flatbuffers.Offset, valueOffset: flatbuffers.Offset): flatbuffers.Offset {\n        KeyValue.startKeyValue(builder);\n        KeyValue.addKey(builder, keyOffset);\n        KeyValue.addValue(builder, valueOffset);\n        return KeyValue.endKeyValue(builder);\n    }\n}\n/**\n * @constructor\n */\nexport class DictionaryEncoding {\n    bb: flatbuffers.ByteBuffer | null = null;\n\n    bb_pos: number = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns DictionaryEncoding\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): DictionaryEncoding {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param DictionaryEncoding= obj\n     * @returns DictionaryEncoding\n     */\n    static getRootAsDictionaryEncoding(bb: flatbuffers.ByteBuffer, obj?: DictionaryEncoding): DictionaryEncoding {\n        return (obj || new DictionaryEncoding()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param DictionaryEncoding= obj\n     * @returns DictionaryEncoding\n     */\n    static getSizePrefixedRootAsDictionaryEncoding(bb: flatbuffers.ByteBuffer, obj?: DictionaryEncoding): DictionaryEncoding {\n        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n        return (obj || new DictionaryEncoding()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * The known dictionary id in the application where this data is used. In\n     * the file or streaming formats, the dictionary ids are found in the\n     * DictionaryBatch messages\n     *\n     * @returns flatbuffers.Long\n     */\n    id(): flatbuffers.Long {\n        const offset = this.bb!.__offset(this.bb_pos, 4);\n        return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * The dictionary indices are constrained to be non-negative integers. If\n     * this field is null, the indices must be signed int32. To maximize\n     * cross-language compatibility and performance, implementations are\n     * recommended to prefer signed integer types over unsigned integer types\n     * and to avoid uint64 indices unless they are required by an application.\n     *\n     * @param Int= obj\n     * @returns Int|null\n     */\n    indexType(obj?: Int): Int | null {\n        const offset = this.bb!.__offset(this.bb_pos, 6);\n        return offset ? (obj || new Int()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;\n    }\n\n    /**\n     * By default, dictionaries are not ordered, or the order does not have\n     * semantic meaning. In some statistical, applications, dictionary-encoding\n     * is used to represent ordered categorical data, and we provide a way to\n     * preserve that metadata here\n     *\n     * @returns boolean\n     */\n    isOrdered(): boolean {\n        const offset = this.bb!.__offset(this.bb_pos, 8);\n        return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\n    }\n\n    /**\n     * @returns DictionaryKind\n     */\n    dictionaryKind(): DictionaryKind {\n        const offset = this.bb!.__offset(this.bb_pos, 10);\n        return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : DictionaryKind.DenseArray;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startDictionaryEncoding(builder: flatbuffers.Builder) {\n        builder.startObject(4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long id\n     */\n    static addId(builder: flatbuffers.Builder, id: flatbuffers.Long) {\n        builder.addFieldInt64(0, id, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset indexTypeOffset\n     */\n    static addIndexType(builder: flatbuffers.Builder, indexTypeOffset: flatbuffers.Offset) {\n        builder.addFieldOffset(1, indexTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param boolean isOrdered\n     */\n    static addIsOrdered(builder: flatbuffers.Builder, isOrdered: boolean) {\n        builder.addFieldInt8(2, +isOrdered, +false);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param DictionaryKind dictionaryKind\n     */\n    static addDictionaryKind(builder: flatbuffers.Builder, dictionaryKind: DictionaryKind) {\n        builder.addFieldInt16(3, dictionaryKind, DictionaryKind.DenseArray);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endDictionaryEncoding(builder: flatbuffers.Builder): flatbuffers.Offset {\n        const offset = builder.endObject();\n        return offset;\n    }\n\n    static createDictionaryEncoding(builder: flatbuffers.Builder, id: flatbuffers.Long, indexTypeOffset: flatbuffers.Offset, isOrdered: boolean, dictionaryKind: DictionaryKind): flatbuffers.Offset {\n        DictionaryEncoding.startDictionaryEncoding(builder);\n        DictionaryEncoding.addId(builder, id);\n        DictionaryEncoding.addIndexType(builder, indexTypeOffset);\n        DictionaryEncoding.addIsOrdered(builder, isOrdered);\n        DictionaryEncoding.addDictionaryKind(builder, dictionaryKind);\n        return DictionaryEncoding.endDictionaryEncoding(builder);\n    }\n}\n/**\n * ----------------------------------------------------------------------\n * A field represents a named column in a record / row batch or child of a\n * nested type.\n *\n * @constructor\n */\nexport class Field {\n    bb: flatbuffers.ByteBuffer | null = null;\n\n    bb_pos: number = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Field\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Field {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Field= obj\n     * @returns Field\n     */\n    static getRootAsField(bb: flatbuffers.ByteBuffer, obj?: Field): Field {\n        return (obj || new Field()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Field= obj\n     * @returns Field\n     */\n    static getSizePrefixedRootAsField(bb: flatbuffers.ByteBuffer, obj?: Field): Field {\n        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n        return (obj || new Field()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * Name is not required, in i.e. a List\n     *\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string | null;\n    name(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n    name(optionalEncoding?: any): string | Uint8Array | null {\n        const offset = this.bb!.__offset(this.bb_pos, 4);\n        return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * Whether or not this field can contain nulls. Should be true in general.\n     *\n     * @returns boolean\n     */\n    nullable(): boolean {\n        const offset = this.bb!.__offset(this.bb_pos, 6);\n        return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\n    }\n\n    /**\n     * @returns Type\n     */\n    typeType(): Type {\n        const offset = this.bb!.__offset(this.bb_pos, 8);\n        return offset ? /**  */ (this.bb!.readUint8(this.bb_pos + offset)) : Type.NONE;\n    }\n\n    /**\n     * This is the type of the decoded value if the field is dictionary encoded.\n     *\n     * @param flatbuffers.Table obj\n     * @returns ?flatbuffers.Table\n     */\n    type<T extends flatbuffers.Table>(obj: T): T | null {\n        const offset = this.bb!.__offset(this.bb_pos, 10);\n        return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;\n    }\n\n    /**\n     * Present only if the field is dictionary encoded.\n     *\n     * @param DictionaryEncoding= obj\n     * @returns DictionaryEncoding|null\n     */\n    dictionary(obj?: DictionaryEncoding): DictionaryEncoding | null {\n        const offset = this.bb!.__offset(this.bb_pos, 12);\n        return offset ? (obj || new DictionaryEncoding()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;\n    }\n\n    /**\n     * children apply only to nested data types like Struct, List and Union. For\n     * primitive types children will have length 0.\n     *\n     * @param number index\n     * @param Field= obj\n     * @returns Field\n     */\n    children(index: number, obj?: Field): Field | null {\n        const offset = this.bb!.__offset(this.bb_pos, 14);\n        return offset ? (obj || new Field()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    childrenLength(): number {\n        const offset = this.bb!.__offset(this.bb_pos, 14);\n        return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * User-defined metadata\n     *\n     * @param number index\n     * @param KeyValue= obj\n     * @returns KeyValue\n     */\n    customMetadata(index: number, obj?: KeyValue): KeyValue | null {\n        const offset = this.bb!.__offset(this.bb_pos, 16);\n        return offset ? (obj || new KeyValue()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    customMetadataLength(): number {\n        const offset = this.bb!.__offset(this.bb_pos, 16);\n        return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startField(builder: flatbuffers.Builder) {\n        builder.startObject(7);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n        builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param boolean nullable\n     */\n    static addNullable(builder: flatbuffers.Builder, nullable: boolean) {\n        builder.addFieldInt8(1, +nullable, +false);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Type typeType\n     */\n    static addTypeType(builder: flatbuffers.Builder, typeType: Type) {\n        builder.addFieldInt8(2, typeType, Type.NONE);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset typeOffset\n     */\n    static addType(builder: flatbuffers.Builder, typeOffset: flatbuffers.Offset) {\n        builder.addFieldOffset(3, typeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dictionaryOffset\n     */\n    static addDictionary(builder: flatbuffers.Builder, dictionaryOffset: flatbuffers.Offset) {\n        builder.addFieldOffset(4, dictionaryOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset childrenOffset\n     */\n    static addChildren(builder: flatbuffers.Builder, childrenOffset: flatbuffers.Offset) {\n        builder.addFieldOffset(5, childrenOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createChildrenVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n        builder.startVector(4, data.length, 4);\n        for (let i = data.length - 1; i >= 0; i--) {\n            builder.addOffset(data[i]);\n        }\n        return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startChildrenVector(builder: flatbuffers.Builder, numElems: number) {\n        builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset customMetadataOffset\n     */\n    static addCustomMetadata(builder: flatbuffers.Builder, customMetadataOffset: flatbuffers.Offset) {\n        builder.addFieldOffset(6, customMetadataOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createCustomMetadataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n        builder.startVector(4, data.length, 4);\n        for (let i = data.length - 1; i >= 0; i--) {\n            builder.addOffset(data[i]);\n        }\n        return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startCustomMetadataVector(builder: flatbuffers.Builder, numElems: number) {\n        builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endField(builder: flatbuffers.Builder): flatbuffers.Offset {\n        const offset = builder.endObject();\n        return offset;\n    }\n\n    static createField(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, nullable: boolean, typeType: Type, typeOffset: flatbuffers.Offset, dictionaryOffset: flatbuffers.Offset, childrenOffset: flatbuffers.Offset, customMetadataOffset: flatbuffers.Offset): flatbuffers.Offset {\n        Field.startField(builder);\n        Field.addName(builder, nameOffset);\n        Field.addNullable(builder, nullable);\n        Field.addTypeType(builder, typeType);\n        Field.addType(builder, typeOffset);\n        Field.addDictionary(builder, dictionaryOffset);\n        Field.addChildren(builder, childrenOffset);\n        Field.addCustomMetadata(builder, customMetadataOffset);\n        return Field.endField(builder);\n    }\n}\n/**\n * ----------------------------------------------------------------------\n * A Buffer represents a single contiguous memory segment\n *\n * @constructor\n */\nexport class Buffer {\n    bb: flatbuffers.ByteBuffer | null = null;\n\n    bb_pos: number = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Buffer\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Buffer {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n\n    /**\n     * The relative offset into the shared memory page where the bytes for this\n     * buffer starts\n     *\n     * @returns flatbuffers.Long\n     */\n    offset(): flatbuffers.Long {\n        return this.bb!.readInt64(this.bb_pos);\n    }\n\n    /**\n     * The absolute length (in bytes) of the memory buffer. The memory is found\n     * from offset (inclusive) to offset + length (non-inclusive). When building\n     * messages using the encapsulated IPC message, padding bytes may be written\n     * after a buffer, but such padding bytes do not need to be accounted for in\n     * the size here.\n     *\n     * @returns flatbuffers.Long\n     */\n    length(): flatbuffers.Long {\n        return this.bb!.readInt64(this.bb_pos + 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long offset\n     * @param flatbuffers.Long length\n     * @returns flatbuffers.Offset\n     */\n    static createBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Long, length: flatbuffers.Long): flatbuffers.Offset {\n        builder.prep(8, 16);\n        builder.writeInt64(length);\n        builder.writeInt64(offset);\n        return builder.offset();\n    }\n\n}\n/**\n * ----------------------------------------------------------------------\n * A Schema describes the columns in a row batch\n *\n * @constructor\n */\nexport class Schema {\n    bb: flatbuffers.ByteBuffer | null = null;\n\n    bb_pos: number = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Schema\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Schema {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Schema= obj\n     * @returns Schema\n     */\n    static getRootAsSchema(bb: flatbuffers.ByteBuffer, obj?: Schema): Schema {\n        return (obj || new Schema()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Schema= obj\n     * @returns Schema\n     */\n    static getSizePrefixedRootAsSchema(bb: flatbuffers.ByteBuffer, obj?: Schema): Schema {\n        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n        return (obj || new Schema()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * endianness of the buffer\n     * it is Little Endian by default\n     * if endianness doesn't match the underlying system then the vectors need to be converted\n     *\n     * @returns Endianness\n     */\n    endianness(): Endianness {\n        const offset = this.bb!.__offset(this.bb_pos, 4);\n        return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : Endianness.Little;\n    }\n\n    /**\n     * @param number index\n     * @param Field= obj\n     * @returns Field\n     */\n    fields(index: number, obj?: Field): Field | null {\n        const offset = this.bb!.__offset(this.bb_pos, 6);\n        return offset ? (obj || new Field()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    fieldsLength(): number {\n        const offset = this.bb!.__offset(this.bb_pos, 6);\n        return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param KeyValue= obj\n     * @returns KeyValue\n     */\n    customMetadata(index: number, obj?: KeyValue): KeyValue | null {\n        const offset = this.bb!.__offset(this.bb_pos, 8);\n        return offset ? (obj || new KeyValue()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    customMetadataLength(): number {\n        const offset = this.bb!.__offset(this.bb_pos, 8);\n        return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * Features used in the stream/file.\n     *\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    features(index: number): flatbuffers.Long | null {\n        const offset = this.bb!.__offset(this.bb_pos, 10);\n        return offset ? /**  */ (this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8)) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    featuresLength(): number {\n        const offset = this.bb!.__offset(this.bb_pos, 10);\n        return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSchema(builder: flatbuffers.Builder) {\n        builder.startObject(4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Endianness endianness\n     */\n    static addEndianness(builder: flatbuffers.Builder, endianness: Endianness) {\n        builder.addFieldInt16(0, endianness, Endianness.Little);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset fieldsOffset\n     */\n    static addFields(builder: flatbuffers.Builder, fieldsOffset: flatbuffers.Offset) {\n        builder.addFieldOffset(1, fieldsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createFieldsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n        builder.startVector(4, data.length, 4);\n        for (let i = data.length - 1; i >= 0; i--) {\n            builder.addOffset(data[i]);\n        }\n        return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startFieldsVector(builder: flatbuffers.Builder, numElems: number) {\n        builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset customMetadataOffset\n     */\n    static addCustomMetadata(builder: flatbuffers.Builder, customMetadataOffset: flatbuffers.Offset) {\n        builder.addFieldOffset(2, customMetadataOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createCustomMetadataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n        builder.startVector(4, data.length, 4);\n        for (let i = data.length - 1; i >= 0; i--) {\n            builder.addOffset(data[i]);\n        }\n        return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startCustomMetadataVector(builder: flatbuffers.Builder, numElems: number) {\n        builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset featuresOffset\n     */\n    static addFeatures(builder: flatbuffers.Builder, featuresOffset: flatbuffers.Offset) {\n        builder.addFieldOffset(3, featuresOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createFeaturesVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n        builder.startVector(8, data.length, 8);\n        for (let i = data.length - 1; i >= 0; i--) {\n            builder.addInt64(data[i]);\n        }\n        return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startFeaturesVector(builder: flatbuffers.Builder, numElems: number) {\n        builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSchema(builder: flatbuffers.Builder): flatbuffers.Offset {\n        const offset = builder.endObject();\n        return offset;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset offset\n     */\n    static finishSchemaBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n        builder.finish(offset);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset offset\n     */\n    static finishSizePrefixedSchemaBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n        builder.finish(offset, undefined, true);\n    }\n\n    static createSchema(builder: flatbuffers.Builder, endianness: Endianness, fieldsOffset: flatbuffers.Offset, customMetadataOffset: flatbuffers.Offset, featuresOffset: flatbuffers.Offset): flatbuffers.Offset {\n        Schema.startSchema(builder);\n        Schema.addEndianness(builder, endianness);\n        Schema.addFields(builder, fieldsOffset);\n        Schema.addCustomMetadata(builder, customMetadataOffset);\n        Schema.addFeatures(builder, featuresOffset);\n        return Schema.endSchema(builder);\n    }\n}\n","// automatically generated by the FlatBuffers compiler, do not modify\n\nimport { flatbuffers } from 'flatbuffers';\nimport * as NS13596923344997147894 from './Schema';\n/**\n * @enum {number}\n */\nexport enum CompressionType {\n    LZ4_FRAME = 0,\n    ZSTD = 1\n}\n\n/**\n * Provided for forward compatibility in case we need to support different\n * strategies for compressing the IPC message body (like whole-body\n * compression rather than buffer-level) in the future\n *\n * @enum {number}\n */\nexport enum BodyCompressionMethod {\n    /**\n     * Each constituent buffer is first compressed with the indicated\n     * compressor, and then written with the uncompressed length in the first 8\n     * bytes as a 64-bit little-endian signed integer followed by the compressed\n     * buffer bytes (and then padding as required by the protocol). The\n     * uncompressed length may be set to -1 to indicate that the data that\n     * follows is not compressed, which can be useful for cases where\n     * compression does not yield appreciable savings.\n     */\n    BUFFER = 0\n}\n\n/**\n * ----------------------------------------------------------------------\n * The root Message type\n * This union enables us to easily send different message types without\n * redundant storage, and in the future we can easily add new message types.\n *\n * Arrow implementations do not need to implement all of the message types,\n * which may include experimental metadata types. For maximum compatibility,\n * it is best to send data using RecordBatch\n *\n * @enum {number}\n */\nexport enum MessageHeader {\n    NONE = 0,\n    Schema = 1,\n    DictionaryBatch = 2,\n    RecordBatch = 3,\n    Tensor = 4,\n    SparseTensor = 5\n}\n\n/**\n * ----------------------------------------------------------------------\n * Data structures for describing a table row batch (a collection of\n * equal-length Arrow arrays)\n * Metadata about a field at some level of a nested type tree (but not\n * its children).\n *\n * For example, a List<Int16> with values [[1, 2, 3], null, [4], [5, 6], null]\n * would have {length: 5, null_count: 2} for its List node, and {length: 6,\n * null_count: 0} for its Int16 node, as separate FieldNode structs\n *\n * @constructor\n */\nexport class FieldNode {\n    bb: flatbuffers.ByteBuffer | null = null;\n\n    bb_pos: number = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns FieldNode\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): FieldNode {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n\n    /**\n     * The number of value slots in the Arrow array at this level of a nested\n     * tree\n     *\n     * @returns flatbuffers.Long\n     */\n    length(): flatbuffers.Long {\n        return this.bb!.readInt64(this.bb_pos);\n    }\n\n    /**\n     * The number of observed nulls. Fields with null_count == 0 may choose not\n     * to write their physical validity bitmap out as a materialized buffer,\n     * instead setting the length of the bitmap buffer to 0.\n     *\n     * @returns flatbuffers.Long\n     */\n    nullCount(): flatbuffers.Long {\n        return this.bb!.readInt64(this.bb_pos + 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long length\n     * @param flatbuffers.Long null_count\n     * @returns flatbuffers.Offset\n     */\n    static createFieldNode(builder: flatbuffers.Builder, length: flatbuffers.Long, null_count: flatbuffers.Long): flatbuffers.Offset {\n        builder.prep(8, 16);\n        builder.writeInt64(null_count);\n        builder.writeInt64(length);\n        return builder.offset();\n    }\n\n}\n/**\n * Optional compression for the memory buffers constituting IPC message\n * bodies. Intended for use with RecordBatch but could be used for other\n * message types\n *\n * @constructor\n */\nexport class BodyCompression {\n    bb: flatbuffers.ByteBuffer | null = null;\n\n    bb_pos: number = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns BodyCompression\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): BodyCompression {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param BodyCompression= obj\n     * @returns BodyCompression\n     */\n    static getRootAsBodyCompression(bb: flatbuffers.ByteBuffer, obj?: BodyCompression): BodyCompression {\n        return (obj || new BodyCompression()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param BodyCompression= obj\n     * @returns BodyCompression\n     */\n    static getSizePrefixedRootAsBodyCompression(bb: flatbuffers.ByteBuffer, obj?: BodyCompression): BodyCompression {\n        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n        return (obj || new BodyCompression()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * Compressor library\n     *\n     * @returns CompressionType\n     */\n    codec(): CompressionType {\n        const offset = this.bb!.__offset(this.bb_pos, 4);\n        return offset ? /**  */ (this.bb!.readInt8(this.bb_pos + offset)) : CompressionType.LZ4_FRAME;\n    }\n\n    /**\n     * Indicates the way the record batch body was compressed\n     *\n     * @returns BodyCompressionMethod\n     */\n    method(): BodyCompressionMethod {\n        const offset = this.bb!.__offset(this.bb_pos, 6);\n        return offset ? /**  */ (this.bb!.readInt8(this.bb_pos + offset)) : BodyCompressionMethod.BUFFER;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startBodyCompression(builder: flatbuffers.Builder) {\n        builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param CompressionType codec\n     */\n    static addCodec(builder: flatbuffers.Builder, codec: CompressionType) {\n        builder.addFieldInt8(0, codec, CompressionType.LZ4_FRAME);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param BodyCompressionMethod method\n     */\n    static addMethod(builder: flatbuffers.Builder, method: BodyCompressionMethod) {\n        builder.addFieldInt8(1, method, BodyCompressionMethod.BUFFER);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endBodyCompression(builder: flatbuffers.Builder): flatbuffers.Offset {\n        const offset = builder.endObject();\n        return offset;\n    }\n\n    static createBodyCompression(builder: flatbuffers.Builder, codec: CompressionType, method: BodyCompressionMethod): flatbuffers.Offset {\n        BodyCompression.startBodyCompression(builder);\n        BodyCompression.addCodec(builder, codec);\n        BodyCompression.addMethod(builder, method);\n        return BodyCompression.endBodyCompression(builder);\n    }\n}\n/**\n * A data header describing the shared memory layout of a \"record\" or \"row\"\n * batch. Some systems call this a \"row batch\" internally and others a \"record\n * batch\".\n *\n * @constructor\n */\nexport class RecordBatch {\n    bb: flatbuffers.ByteBuffer | null = null;\n\n    bb_pos: number = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns RecordBatch\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): RecordBatch {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param RecordBatch= obj\n     * @returns RecordBatch\n     */\n    static getRootAsRecordBatch(bb: flatbuffers.ByteBuffer, obj?: RecordBatch): RecordBatch {\n        return (obj || new RecordBatch()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param RecordBatch= obj\n     * @returns RecordBatch\n     */\n    static getSizePrefixedRootAsRecordBatch(bb: flatbuffers.ByteBuffer, obj?: RecordBatch): RecordBatch {\n        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n        return (obj || new RecordBatch()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * number of records / rows. The arrays in the batch should all have this\n     * length\n     *\n     * @returns flatbuffers.Long\n     */\n    length(): flatbuffers.Long {\n        const offset = this.bb!.__offset(this.bb_pos, 4);\n        return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * Nodes correspond to the pre-ordered flattened logical schema\n     *\n     * @param number index\n     * @param FieldNode= obj\n     * @returns FieldNode\n     */\n    nodes(index: number, obj?: FieldNode): FieldNode | null {\n        const offset = this.bb!.__offset(this.bb_pos, 6);\n        return offset ? (obj || new FieldNode()).__init(this.bb!.__vector(this.bb_pos + offset) + index * 16, this.bb!) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodesLength(): number {\n        const offset = this.bb!.__offset(this.bb_pos, 6);\n        return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * Buffers correspond to the pre-ordered flattened buffer tree\n     *\n     * The number of buffers appended to this list depends on the schema. For\n     * example, most primitive arrays will have 2 buffers, 1 for the validity\n     * bitmap and 1 for the values. For struct arrays, there will only be a\n     * single buffer for the validity (nulls) bitmap\n     *\n     * @param number index\n     * @param Buffer= obj\n     * @returns Buffer\n     */\n    buffers(index: number, obj?: NS13596923344997147894.Buffer): NS13596923344997147894.Buffer | null {\n        const offset = this.bb!.__offset(this.bb_pos, 8);\n        return offset ? (obj || new NS13596923344997147894.Buffer()).__init(this.bb!.__vector(this.bb_pos + offset) + index * 16, this.bb!) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    buffersLength(): number {\n        const offset = this.bb!.__offset(this.bb_pos, 8);\n        return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * Optional compression of the message body\n     *\n     * @param BodyCompression= obj\n     * @returns BodyCompression|null\n     */\n    compression(obj?: BodyCompression): BodyCompression | null {\n        const offset = this.bb!.__offset(this.bb_pos, 10);\n        return offset ? (obj || new BodyCompression()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startRecordBatch(builder: flatbuffers.Builder) {\n        builder.startObject(4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long length\n     */\n    static addLength(builder: flatbuffers.Builder, length: flatbuffers.Long) {\n        builder.addFieldInt64(0, length, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodesOffset\n     */\n    static addNodes(builder: flatbuffers.Builder, nodesOffset: flatbuffers.Offset) {\n        builder.addFieldOffset(1, nodesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodesVector(builder: flatbuffers.Builder, numElems: number) {\n        builder.startVector(16, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset buffersOffset\n     */\n    static addBuffers(builder: flatbuffers.Builder, buffersOffset: flatbuffers.Offset) {\n        builder.addFieldOffset(2, buffersOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startBuffersVector(builder: flatbuffers.Builder, numElems: number) {\n        builder.startVector(16, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset compressionOffset\n     */\n    static addCompression(builder: flatbuffers.Builder, compressionOffset: flatbuffers.Offset) {\n        builder.addFieldOffset(3, compressionOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endRecordBatch(builder: flatbuffers.Builder): flatbuffers.Offset {\n        const offset = builder.endObject();\n        return offset;\n    }\n\n    static createRecordBatch(builder: flatbuffers.Builder, length: flatbuffers.Long, nodesOffset: flatbuffers.Offset, buffersOffset: flatbuffers.Offset, compressionOffset: flatbuffers.Offset): flatbuffers.Offset {\n        RecordBatch.startRecordBatch(builder);\n        RecordBatch.addLength(builder, length);\n        RecordBatch.addNodes(builder, nodesOffset);\n        RecordBatch.addBuffers(builder, buffersOffset);\n        RecordBatch.addCompression(builder, compressionOffset);\n        return RecordBatch.endRecordBatch(builder);\n    }\n}\n/**\n * For sending dictionary encoding information. Any Field can be\n * dictionary-encoded, but in this case none of its children may be\n * dictionary-encoded.\n * There is one vector / column per dictionary, but that vector / column\n * may be spread across multiple dictionary batches by using the isDelta\n * flag\n *\n * @constructor\n */\nexport class DictionaryBatch {\n    bb: flatbuffers.ByteBuffer | null = null;\n\n    bb_pos: number = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns DictionaryBatch\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): DictionaryBatch {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param DictionaryBatch= obj\n     * @returns DictionaryBatch\n     */\n    static getRootAsDictionaryBatch(bb: flatbuffers.ByteBuffer, obj?: DictionaryBatch): DictionaryBatch {\n        return (obj || new DictionaryBatch()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param DictionaryBatch= obj\n     * @returns DictionaryBatch\n     */\n    static getSizePrefixedRootAsDictionaryBatch(bb: flatbuffers.ByteBuffer, obj?: DictionaryBatch): DictionaryBatch {\n        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n        return (obj || new DictionaryBatch()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    id(): flatbuffers.Long {\n        const offset = this.bb!.__offset(this.bb_pos, 4);\n        return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param RecordBatch= obj\n     * @returns RecordBatch|null\n     */\n    data(obj?: RecordBatch): RecordBatch | null {\n        const offset = this.bb!.__offset(this.bb_pos, 6);\n        return offset ? (obj || new RecordBatch()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;\n    }\n\n    /**\n     * If isDelta is true the values in the dictionary are to be appended to a\n     * dictionary with the indicated id. If isDelta is false this dictionary\n     * should replace the existing dictionary.\n     *\n     * @returns boolean\n     */\n    isDelta(): boolean {\n        const offset = this.bb!.__offset(this.bb_pos, 8);\n        return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startDictionaryBatch(builder: flatbuffers.Builder) {\n        builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long id\n     */\n    static addId(builder: flatbuffers.Builder, id: flatbuffers.Long) {\n        builder.addFieldInt64(0, id, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dataOffset\n     */\n    static addData(builder: flatbuffers.Builder, dataOffset: flatbuffers.Offset) {\n        builder.addFieldOffset(1, dataOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param boolean isDelta\n     */\n    static addIsDelta(builder: flatbuffers.Builder, isDelta: boolean) {\n        builder.addFieldInt8(2, +isDelta, +false);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endDictionaryBatch(builder: flatbuffers.Builder): flatbuffers.Offset {\n        const offset = builder.endObject();\n        return offset;\n    }\n\n    static createDictionaryBatch(builder: flatbuffers.Builder, id: flatbuffers.Long, dataOffset: flatbuffers.Offset, isDelta: boolean): flatbuffers.Offset {\n        DictionaryBatch.startDictionaryBatch(builder);\n        DictionaryBatch.addId(builder, id);\n        DictionaryBatch.addData(builder, dataOffset);\n        DictionaryBatch.addIsDelta(builder, isDelta);\n        return DictionaryBatch.endDictionaryBatch(builder);\n    }\n}\n/**\n * @constructor\n */\nexport class Message {\n    bb: flatbuffers.ByteBuffer | null = null;\n\n    bb_pos: number = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Message\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Message {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Message= obj\n     * @returns Message\n     */\n    static getRootAsMessage(bb: flatbuffers.ByteBuffer, obj?: Message): Message {\n        return (obj || new Message()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Message= obj\n     * @returns Message\n     */\n    static getSizePrefixedRootAsMessage(bb: flatbuffers.ByteBuffer, obj?: Message): Message {\n        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n        return (obj || new Message()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns MetadataVersion\n     */\n    version(): NS13596923344997147894.MetadataVersion {\n        const offset = this.bb!.__offset(this.bb_pos, 4);\n        return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : NS13596923344997147894.MetadataVersion.V1;\n    }\n\n    /**\n     * @returns MessageHeader\n     */\n    headerType(): MessageHeader {\n        const offset = this.bb!.__offset(this.bb_pos, 6);\n        return offset ? /**  */ (this.bb!.readUint8(this.bb_pos + offset)) : MessageHeader.NONE;\n    }\n\n    /**\n     * @param flatbuffers.Table obj\n     * @returns ?flatbuffers.Table\n     */\n    header<T extends flatbuffers.Table>(obj: T): T | null {\n        const offset = this.bb!.__offset(this.bb_pos, 8);\n        return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    bodyLength(): flatbuffers.Long {\n        const offset = this.bb!.__offset(this.bb_pos, 10);\n        return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param number index\n     * @param KeyValue= obj\n     * @returns KeyValue\n     */\n    customMetadata(index: number, obj?: NS13596923344997147894.KeyValue): NS13596923344997147894.KeyValue | null {\n        const offset = this.bb!.__offset(this.bb_pos, 12);\n        return offset ? (obj || new NS13596923344997147894.KeyValue()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    customMetadataLength(): number {\n        const offset = this.bb!.__offset(this.bb_pos, 12);\n        return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startMessage(builder: flatbuffers.Builder) {\n        builder.startObject(5);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param MetadataVersion version\n     */\n    static addVersion(builder: flatbuffers.Builder, version: NS13596923344997147894.MetadataVersion) {\n        builder.addFieldInt16(0, version, NS13596923344997147894.MetadataVersion.V1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param MessageHeader headerType\n     */\n    static addHeaderType(builder: flatbuffers.Builder, headerType: MessageHeader) {\n        builder.addFieldInt8(1, headerType, MessageHeader.NONE);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset headerOffset\n     */\n    static addHeader(builder: flatbuffers.Builder, headerOffset: flatbuffers.Offset) {\n        builder.addFieldOffset(2, headerOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long bodyLength\n     */\n    static addBodyLength(builder: flatbuffers.Builder, bodyLength: flatbuffers.Long) {\n        builder.addFieldInt64(3, bodyLength, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset customMetadataOffset\n     */\n    static addCustomMetadata(builder: flatbuffers.Builder, customMetadataOffset: flatbuffers.Offset) {\n        builder.addFieldOffset(4, customMetadataOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createCustomMetadataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n        builder.startVector(4, data.length, 4);\n        for (let i = data.length - 1; i >= 0; i--) {\n            builder.addOffset(data[i]);\n        }\n        return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startCustomMetadataVector(builder: flatbuffers.Builder, numElems: number) {\n        builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endMessage(builder: flatbuffers.Builder): flatbuffers.Offset {\n        const offset = builder.endObject();\n        return offset;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset offset\n     */\n    static finishMessageBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n        builder.finish(offset);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset offset\n     */\n    static finishSizePrefixedMessageBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n        builder.finish(offset, undefined, true);\n    }\n\n    static createMessage(builder: flatbuffers.Builder, version: NS13596923344997147894.MetadataVersion, headerType: MessageHeader, headerOffset: flatbuffers.Offset, bodyLength: flatbuffers.Long, customMetadataOffset: flatbuffers.Offset): flatbuffers.Offset {\n        Message.startMessage(builder);\n        Message.addVersion(builder, version);\n        Message.addHeaderType(builder, headerType);\n        Message.addHeader(builder, headerOffset);\n        Message.addBodyLength(builder, bodyLength);\n        Message.addCustomMetadata(builder, customMetadataOffset);\n        return Message.endMessage(builder);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nexport {\n    DateUnit,\n    TimeUnit,\n    Precision,\n    UnionMode,\n    IntervalUnit,\n    MetadataVersion,\n} from './fb/Schema';\n\nexport { MessageHeader } from './fb/Message';\n\n/**\n * Main data type enumeration.\n *\n * Data types in this library are all *logical*. They can be expressed as\n * either a primitive physical type (bytes or bits of some fixed size), a\n * nested type consisting of other data types, or another data type (e.g. a\n * timestamp encoded as an int64).\n *\n * **Note**: Only enum values 0-17 (NONE through Map) are written to an Arrow\n * IPC payload.\n *\n * The rest of the values are specified here so TypeScript can narrow the type\n * signatures further beyond the base Arrow Types. The Arrow DataTypes include\n * metadata like `bitWidth` that impact the type signatures of the values we\n * accept and return.\n *\n * For example, the `Int8Vector` reads 1-byte numbers from an `Int8Array`, an\n * `Int32Vector` reads a 4-byte number from an `Int32Array`, and an `Int64Vector`\n * reads a pair of 4-byte lo, hi 32-bit integers as a zero-copy slice from the\n * underlying `Int32Array`.\n *\n * Library consumers benefit by knowing the narrowest type, since we can ensure\n * the types across all public methods are propagated, and never bail to `any`.\n * These values are _never_ used at runtime, and they will _never_ be written\n * to the flatbuffers metadata of serialized Arrow IPC payloads.\n */\nexport enum Type {\n    /** The default placeholder type */\n    NONE            =  0,\n    /** A NULL type having no physical storage */\n    Null            =  1,\n    /** Signed or unsigned 8, 16, 32, or 64-bit little-endian integer */\n    Int             =  2,\n    /** 2, 4, or 8-byte floating point value */\n    Float           =  3,\n    /** Variable-length bytes (no guarantee of UTF8-ness) */\n    Binary          =  4,\n    /** UTF8 variable-length string as List<Char> */\n    Utf8            =  5,\n    /** Boolean as 1 bit, LSB bit-packed ordering */\n    Bool            =  6,\n    /** Precision-and-scale-based decimal type. Storage type depends on the parameters. */\n    Decimal         =  7,\n    /** int32_t days or int64_t milliseconds since the UNIX epoch */\n    Date            =  8,\n    /** Time as signed 32 or 64-bit integer, representing either seconds, milliseconds, microseconds, or nanoseconds since midnight since midnight */\n    Time            =  9,\n    /** Exact timestamp encoded with int64 since UNIX epoch (Default unit millisecond) */\n    Timestamp       = 10,\n    /** YEAR_MONTH or DAY_TIME interval in SQL style */\n    Interval        = 11,\n    /** A list of some logical data type */\n    List            = 12,\n    /** Struct of logical types */\n    Struct          = 13,\n    /** Union of logical types */\n    Union           = 14,\n    /** Fixed-size binary. Each value occupies the same number of bytes */\n    FixedSizeBinary = 15,\n    /** Fixed-size list. Each value occupies the same number of bytes */\n    FixedSizeList   = 16,\n    /** Map of named logical types */\n    Map             = 17,\n\n    /** Dictionary aka Category type */\n    Dictionary            = -1,\n    Int8                  = -2,\n    Int16                 = -3,\n    Int32                 = -4,\n    Int64                 = -5,\n    Uint8                 = -6,\n    Uint16                = -7,\n    Uint32                = -8,\n    Uint64                = -9,\n    Float16               = -10,\n    Float32               = -11,\n    Float64               = -12,\n    DateDay               = -13,\n    DateMillisecond       = -14,\n    TimestampSecond       = -15,\n    TimestampMillisecond  = -16,\n    TimestampMicrosecond  = -17,\n    TimestampNanosecond   = -18,\n    TimeSecond            = -19,\n    TimeMillisecond       = -20,\n    TimeMicrosecond       = -21,\n    TimeNanosecond        = -22,\n    DenseUnion            = -23,\n    SparseUnion           = -24,\n    IntervalDayTime       = -25,\n    IntervalYearMonth     = -26,\n}\n\nexport enum BufferType {\n    /**\n     * used in List type, Dense Union and variable length primitive types (String, Binary)\n     */\n    OFFSET = 0,\n\n    /**\n     * actual data, either wixed width primitive types in slots or variable width delimited by an OFFSET vector\n     */\n    DATA = 1,\n\n    /**\n     * Bit vector indicating if each value is null\n     */\n    VALIDITY = 2,\n\n    /**\n     * Type vector used in Union type\n     */\n    TYPE = 3\n  }\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/* eslint-disable @typescript-eslint/naming-convention */\n\nimport { Field } from './schema';\nimport { flatbuffers } from 'flatbuffers';\nimport { VectorType as V } from './interfaces';\nimport { TypedArrayConstructor } from './interfaces';\n\nimport Long = flatbuffers.Long;\nimport {\n    Type,\n    Precision, UnionMode,\n    DateUnit, TimeUnit, IntervalUnit\n} from './enum';\n\n/** @ignore */\nexport type TimeBitWidth = 32 | 64;\n/** @ignore */\nexport type IntBitWidth = 8 | 16 | 32 | 64;\n/** @ignore */\nexport type IsSigned = { 'true': true; 'false': false };\n/** @ignore */\nexport type RowLike<T extends { [key: string]: DataType }> =\n      ( Iterable<[string, T[keyof T]['TValue'] | null]> )\n    & { [P in keyof T]: T[P]['TValue'] | null }\n    & { get<K extends keyof T>(key: K): T[K]['TValue'] | null }\n    & { set<K extends keyof T>(key: K, val: T[K]['TValue'] | null): void }\n    ;\n\n/** @ignore */\nexport type MapLike<K extends DataType = any, V extends DataType = any> =\n      { [P in K['TValue']]: V['TValue'] | null }\n    & ( Map<K['TValue'], V['TValue'] | null> )\n    ;\n\nexport interface DataType<TType extends Type = Type, TChildren extends { [key: string]: DataType } = any> {\n    readonly TType: TType;\n    readonly TArray: any;\n    readonly TValue: any;\n    readonly ArrayType: any;\n    readonly children: Field<TChildren[keyof TChildren]>[];\n}\n\n/**\n * An abstract base class for classes that encapsulate metadata about each of\n * the logical types that Arrow can represent.\n */\nexport abstract class DataType<TType extends Type = Type, TChildren extends { [key: string]: DataType } = any> {\n\n    public [Symbol.toStringTag]: string;\n\n    /** @nocollapse */ static            isNull (x: any): x is Null            { return x && x.typeId === Type.Null;            }\n    /** @nocollapse */ static             isInt (x: any): x is Int_            { return x && x.typeId === Type.Int;             }\n    /** @nocollapse */ static           isFloat (x: any): x is Float           { return x && x.typeId === Type.Float;           }\n    /** @nocollapse */ static          isBinary (x: any): x is Binary          { return x && x.typeId === Type.Binary;          }\n    /** @nocollapse */ static            isUtf8 (x: any): x is Utf8            { return x && x.typeId === Type.Utf8;            }\n    /** @nocollapse */ static            isBool (x: any): x is Bool            { return x && x.typeId === Type.Bool;            }\n    /** @nocollapse */ static         isDecimal (x: any): x is Decimal         { return x && x.typeId === Type.Decimal;         }\n    /** @nocollapse */ static            isDate (x: any): x is Date_           { return x && x.typeId === Type.Date;            }\n    /** @nocollapse */ static            isTime (x: any): x is Time_           { return x && x.typeId === Type.Time;            }\n    /** @nocollapse */ static       isTimestamp (x: any): x is Timestamp_      { return x && x.typeId === Type.Timestamp;       }\n    /** @nocollapse */ static        isInterval (x: any): x is Interval_       { return x && x.typeId === Type.Interval;        }\n    /** @nocollapse */ static            isList (x: any): x is List            { return x && x.typeId === Type.List;            }\n    /** @nocollapse */ static          isStruct (x: any): x is Struct          { return x && x.typeId === Type.Struct;          }\n    /** @nocollapse */ static           isUnion (x: any): x is Union_          { return x && x.typeId === Type.Union;           }\n    /** @nocollapse */ static isFixedSizeBinary (x: any): x is FixedSizeBinary { return x && x.typeId === Type.FixedSizeBinary; }\n    /** @nocollapse */ static   isFixedSizeList (x: any): x is FixedSizeList   { return x && x.typeId === Type.FixedSizeList;   }\n    /** @nocollapse */ static             isMap (x: any): x is Map_            { return x && x.typeId === Type.Map;             }\n    /** @nocollapse */ static      isDictionary (x: any): x is Dictionary      { return x && x.typeId === Type.Dictionary;      }\n\n    public get typeId(): TType { return <any> Type.NONE; }\n\n    protected static [Symbol.toStringTag] = ((proto: DataType) => {\n        (<any> proto).children = null;\n        (<any> proto).ArrayType = Array;\n        return proto[Symbol.toStringTag] = 'DataType';\n    })(DataType.prototype);\n}\n\n/** @ignore */\nexport interface Null extends DataType<Type.Null> { TArray: void; TValue: null }\n/** @ignore */\nexport class Null extends DataType<Type.Null> {\n    public toString() { return `Null`; }\n    public get typeId() { return Type.Null as Type.Null; }\n    protected static [Symbol.toStringTag] = ((proto: Null) => {\n        return proto[Symbol.toStringTag] = 'Null';\n    })(Null.prototype);\n}\n\n/** @ignore */\ntype Ints = Type.Int | Type.Int8 | Type.Int16 | Type.Int32 | Type.Int64 | Type.Uint8 | Type.Uint16 | Type.Uint32 | Type.Uint64;\n/** @ignore */\ntype IType = {\n    [Type.Int   ]: { bitWidth: IntBitWidth; isSigned: true | false; TArray: IntArray;    TValue: number | bigint | Int32Array | Uint32Array };\n    [Type.Int8  ]: { bitWidth:           8; isSigned: true;         TArray: Int8Array;   TValue: number };\n    [Type.Int16 ]: { bitWidth:          16; isSigned: true;         TArray: Int16Array;  TValue: number };\n    [Type.Int32 ]: { bitWidth:          32; isSigned: true;         TArray: Int32Array;  TValue: number };\n    [Type.Int64 ]: { bitWidth:          64; isSigned: true;         TArray: Int32Array;  TValue: bigint | Int32Array | Uint32Array };\n    [Type.Uint8 ]: { bitWidth:           8; isSigned: false;        TArray: Uint8Array;  TValue: number };\n    [Type.Uint16]: { bitWidth:          16; isSigned: false;        TArray: Uint16Array; TValue: number };\n    [Type.Uint32]: { bitWidth:          32; isSigned: false;        TArray: Uint32Array; TValue: number };\n    [Type.Uint64]: { bitWidth:          64; isSigned: false;        TArray: Uint32Array; TValue: bigint | Int32Array | Uint32Array };\n};\n\n/** @ignore */\ninterface Int_<T extends Ints = Ints> extends DataType<T> { TArray: IType[T]['TArray']; TValue: IType[T]['TValue'] }\n/** @ignore */\nclass Int_<T extends Ints = Ints> extends DataType<T> {\n    constructor(public readonly isSigned: IType[T]['isSigned'],\n                public readonly bitWidth: IType[T]['bitWidth']) {\n        super();\n    }\n    public get typeId() { return Type.Int as T; }\n    public get ArrayType(): TypedArrayConstructor<IType[T]['TArray']> {\n        switch (this.bitWidth) {\n            case  8: return this.isSigned ?  Int8Array :  Uint8Array;\n            case 16: return this.isSigned ? Int16Array : Uint16Array;\n            case 32: return this.isSigned ? Int32Array : Uint32Array;\n            case 64: return this.isSigned ? Int32Array : Uint32Array;\n        }\n        throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n    }\n    public toString() { return `${this.isSigned ? `I` : `Ui`}nt${this.bitWidth}`; }\n    protected static [Symbol.toStringTag] = ((proto: Int_) => {\n        (<any> proto).isSigned = null;\n        (<any> proto).bitWidth = null;\n        return proto[Symbol.toStringTag] = 'Int';\n    })(Int_.prototype);\n}\n\nexport { Int_ as Int };\n\n/** @ignore */\nexport class Int8 extends Int_<Type.Int8> { constructor() { super(true, 8); } }\n/** @ignore */\nexport class Int16 extends Int_<Type.Int16> { constructor() { super(true, 16); } }\n/** @ignore */\nexport class Int32 extends Int_<Type.Int32> { constructor() { super(true, 32); } }\n/** @ignore */\nexport class Int64 extends Int_<Type.Int64> { constructor() { super(true, 64); } }\n/** @ignore */\nexport class Uint8 extends Int_<Type.Uint8> { constructor() { super(false, 8); } }\n/** @ignore */\nexport class Uint16 extends Int_<Type.Uint16> { constructor() { super(false, 16); } }\n/** @ignore */\nexport class Uint32 extends Int_<Type.Uint32> { constructor() { super(false, 32); } }\n/** @ignore */\nexport class Uint64 extends Int_<Type.Uint64> { constructor() { super(false, 64); } }\n\nObject.defineProperty(Int8.prototype, 'ArrayType', { value: Int8Array });\nObject.defineProperty(Int16.prototype, 'ArrayType', { value: Int16Array });\nObject.defineProperty(Int32.prototype, 'ArrayType', { value: Int32Array });\nObject.defineProperty(Int64.prototype, 'ArrayType', { value: Int32Array });\nObject.defineProperty(Uint8.prototype, 'ArrayType', { value: Uint8Array });\nObject.defineProperty(Uint16.prototype, 'ArrayType', { value: Uint16Array });\nObject.defineProperty(Uint32.prototype, 'ArrayType', { value: Uint32Array });\nObject.defineProperty(Uint64.prototype, 'ArrayType', { value: Uint32Array });\n\n/** @ignore */\ntype Floats = Type.Float | Type.Float16 | Type.Float32 | Type.Float64;\n/** @ignore */\ntype FType = {\n    [Type.Float  ]: { precision: Precision;        TArray: FloatArray;    TValue: number };\n    [Type.Float16]: { precision: Precision.HALF;   TArray: Uint16Array;   TValue: number };\n    [Type.Float32]: { precision: Precision.SINGLE; TArray: Float32Array;  TValue: number };\n    [Type.Float64]: { precision: Precision.DOUBLE; TArray: Float64Array;  TValue: number };\n};\n\n/** @ignore */\nexport interface Float<T extends Floats = Floats> extends DataType<T> { TArray: FType[T]['TArray']; TValue: number }\n/** @ignore */\nexport class Float<T extends Floats = Floats> extends DataType<T> {\n    constructor(public readonly precision: Precision) {\n        super();\n    }\n    public get typeId() { return Type.Float as T; }\n    public get ArrayType(): TypedArrayConstructor<FType[T]['TArray']> {\n        switch (this.precision) {\n            case Precision.HALF: return Uint16Array;\n            case Precision.SINGLE: return Float32Array;\n            case Precision.DOUBLE: return Float64Array;\n        }\n        // @ts-ignore\n        throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n    }\n    public toString() { return `Float${(this.precision << 5) || 16}`; }\n    protected static [Symbol.toStringTag] = ((proto: Float) => {\n        (<any> proto).precision = null;\n        return proto[Symbol.toStringTag] = 'Float';\n    })(Float.prototype);\n}\n\n/** @ignore */\nexport class Float16 extends Float<Type.Float16> { constructor() { super(Precision.HALF); } }\n/** @ignore */\nexport class Float32 extends Float<Type.Float32> { constructor() { super(Precision.SINGLE); } }\n/** @ignore */\nexport class Float64 extends Float<Type.Float64> { constructor() { super(Precision.DOUBLE); } }\n\nObject.defineProperty(Float16.prototype, 'ArrayType', { value: Uint16Array });\nObject.defineProperty(Float32.prototype, 'ArrayType', { value: Float32Array });\nObject.defineProperty(Float64.prototype, 'ArrayType', { value: Float64Array });\n\n/** @ignore */\nexport interface Binary extends DataType<Type.Binary> { TArray: Uint8Array; TValue: Uint8Array; ArrayType: TypedArrayConstructor<Uint8Array> }\n/** @ignore */\nexport class Binary extends DataType<Type.Binary> {\n    constructor() {\n        super();\n    }\n    public get typeId() { return Type.Binary as Type.Binary; }\n    public toString() { return `Binary`; }\n    protected static [Symbol.toStringTag] = ((proto: Binary) => {\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'Binary';\n    })(Binary.prototype);\n}\n\n/** @ignore */\nexport interface Utf8 extends DataType<Type.Utf8> { TArray: Uint8Array; TValue: string; ArrayType: TypedArrayConstructor<Uint8Array> }\n/** @ignore */\nexport class Utf8 extends DataType<Type.Utf8> {\n    constructor() {\n        super();\n    }\n    public get typeId() { return Type.Utf8 as Type.Utf8; }\n    public toString() { return `Utf8`; }\n    protected static [Symbol.toStringTag] = ((proto: Utf8) => {\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'Utf8';\n    })(Utf8.prototype);\n}\n\n/** @ignore */\nexport interface Bool extends DataType<Type.Bool> { TArray: Uint8Array; TValue: boolean; ArrayType: TypedArrayConstructor<Uint8Array> }\n/** @ignore */\nexport class Bool extends DataType<Type.Bool> {\n    constructor() {\n        super();\n    }\n    public get typeId() { return Type.Bool as Type.Bool; }\n    public toString() { return `Bool`; }\n    protected static [Symbol.toStringTag] = ((proto: Bool) => {\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'Bool';\n    })(Bool.prototype);\n}\n\n/** @ignore */\nexport interface Decimal extends DataType<Type.Decimal> { TArray: Uint32Array; TValue: Uint32Array; ArrayType: TypedArrayConstructor<Uint32Array> }\n/** @ignore */\nexport class Decimal extends DataType<Type.Decimal> {\n    constructor(public readonly scale: number,\n                public readonly precision: number) {\n        super();\n    }\n    public get typeId() { return Type.Decimal as Type.Decimal; }\n    public toString() { return `Decimal[${this.precision}e${this.scale > 0 ? `+` : ``}${this.scale}]`; }\n    protected static [Symbol.toStringTag] = ((proto: Decimal) => {\n        (<any> proto).scale = null;\n        (<any> proto).precision = null;\n        (<any> proto).ArrayType = Uint32Array;\n        return proto[Symbol.toStringTag] = 'Decimal';\n    })(Decimal.prototype);\n}\n\n/** @ignore */\nexport type Dates = Type.Date | Type.DateDay | Type.DateMillisecond;\n/** @ignore */\nexport interface Date_<T extends Dates = Dates> extends DataType<T> { TArray: Int32Array; TValue: Date; ArrayType: TypedArrayConstructor<Int32Array> }\n/** @ignore */\nexport class Date_<T extends Dates = Dates> extends DataType<T> {\n    constructor(public readonly unit: DateUnit) {\n        super();\n    }\n    public get typeId() { return Type.Date as T; }\n    public toString() { return `Date${(this.unit + 1) * 32}<${DateUnit[this.unit]}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Date_) => {\n        (<any> proto).unit = null;\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Date';\n    })(Date_.prototype);\n}\n\n/** @ignore */\nexport class DateDay extends Date_<Type.DateDay> { constructor() { super(DateUnit.DAY); } }\n/** @ignore */\nexport class DateMillisecond extends Date_<Type.DateMillisecond> { constructor() { super(DateUnit.MILLISECOND); } }\n\n/** @ignore */\ntype Times = Type.Time | Type.TimeSecond | Type.TimeMillisecond | Type.TimeMicrosecond | Type.TimeNanosecond;\n/** @ignore */\ntype TimesType = {\n    [Type.Time           ]: { unit: TimeUnit;             TValue: number | Int32Array };\n    [Type.TimeSecond     ]: { unit: TimeUnit.SECOND;      TValue: number             };\n    [Type.TimeMillisecond]: { unit: TimeUnit.MILLISECOND; TValue: number             };\n    [Type.TimeMicrosecond]: { unit: TimeUnit.MICROSECOND; TValue: Int32Array         };\n    [Type.TimeNanosecond ]: { unit: TimeUnit.NANOSECOND;  TValue: Int32Array         };\n};\n\n/** @ignore */\ninterface Time_<T extends Times = Times> extends DataType<T> { TArray: Int32Array; TValue: TimesType[T]['TValue']; ArrayType: TypedArrayConstructor<Int32Array> }\n/** @ignore */\nclass Time_<T extends Times = Times> extends DataType<T> {\n    constructor(public readonly unit: TimesType[T]['unit'],\n                public readonly bitWidth: TimeBitWidth) {\n        super();\n    }\n    public get typeId() { return Type.Time as T; }\n    public toString() { return `Time${this.bitWidth}<${TimeUnit[this.unit]}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Time_) => {\n        (<any> proto).unit = null;\n        (<any> proto).bitWidth = null;\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Time';\n    })(Time_.prototype);\n}\n\nexport { Time_ as Time };\n\n/** @ignore */\nexport class TimeSecond extends Time_<Type.TimeSecond> { constructor() { super(TimeUnit.SECOND, 32); } }\n/** @ignore */\nexport class TimeMillisecond extends Time_<Type.TimeMillisecond> { constructor() { super(TimeUnit.MILLISECOND, 32); } }\n/** @ignore */\nexport class TimeMicrosecond extends Time_<Type.TimeMicrosecond> { constructor() { super(TimeUnit.MICROSECOND, 64); } }\n/** @ignore */\nexport class TimeNanosecond extends Time_<Type.TimeNanosecond> { constructor() { super(TimeUnit.NANOSECOND, 64); } }\n\n/** @ignore */\ntype Timestamps = Type.Timestamp | Type.TimestampSecond | Type.TimestampMillisecond | Type.TimestampMicrosecond | Type.TimestampNanosecond;\n/** @ignore */\ninterface Timestamp_<T extends Timestamps = Timestamps> extends DataType<T> { TArray: Int32Array; TValue: number; ArrayType: TypedArrayConstructor<Int32Array> }\n/** @ignore */\nclass Timestamp_<T extends Timestamps = Timestamps> extends DataType<T> {\n    constructor(public readonly unit: TimeUnit,\n                public readonly timezone?: string | null) {\n        super();\n    }\n    public get typeId() { return Type.Timestamp as T; }\n    public toString() { return `Timestamp<${TimeUnit[this.unit]}${this.timezone ? `, ${this.timezone}` : ``}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Timestamp_) => {\n        (<any> proto).unit = null;\n        (<any> proto).timezone = null;\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Timestamp';\n    })(Timestamp_.prototype);\n}\n\nexport { Timestamp_ as Timestamp };\n\n/** @ignore */\nexport class TimestampSecond extends Timestamp_<Type.TimestampSecond> { constructor(timezone?: string | null) { super(TimeUnit.SECOND, timezone); } }\n/** @ignore */\nexport class TimestampMillisecond extends Timestamp_<Type.TimestampMillisecond> { constructor(timezone?: string | null) { super(TimeUnit.MILLISECOND, timezone); } }\n/** @ignore */\nexport class TimestampMicrosecond extends Timestamp_<Type.TimestampMicrosecond> { constructor(timezone?: string | null) { super(TimeUnit.MICROSECOND, timezone); } }\n/** @ignore */\nexport class TimestampNanosecond extends Timestamp_<Type.TimestampNanosecond> { constructor(timezone?: string | null) { super(TimeUnit.NANOSECOND, timezone); } }\n\n/** @ignore */\ntype Intervals = Type.Interval | Type.IntervalDayTime | Type.IntervalYearMonth;\n/** @ignore */\ninterface Interval_<T extends Intervals = Intervals> extends DataType<T> { TArray: Int32Array; TValue: Int32Array; ArrayType: TypedArrayConstructor<Int32Array> }\n/** @ignore */\nclass Interval_<T extends Intervals = Intervals> extends DataType<T> {\n    constructor(public readonly unit: IntervalUnit) {\n        super();\n    }\n    public get typeId() { return Type.Interval as T; }\n    public toString() { return `Interval<${IntervalUnit[this.unit]}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Interval_) => {\n        (<any> proto).unit = null;\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Interval';\n    })(Interval_.prototype);\n}\n\nexport { Interval_ as Interval };\n\n/** @ignore */\nexport class IntervalDayTime extends Interval_<Type.IntervalDayTime> { constructor() { super(IntervalUnit.DAY_TIME); } }\n/** @ignore */\nexport class IntervalYearMonth extends Interval_<Type.IntervalYearMonth> { constructor() { super(IntervalUnit.YEAR_MONTH); } }\n\n/** @ignore */\nexport interface List<T extends DataType = any> extends DataType<Type.List, { [0]: T }>  { TArray: IterableArrayLike<T>; TValue: V<T> }\n/** @ignore */\nexport class List<T extends DataType = any> extends DataType<Type.List, { [0]: T }> {\n    constructor(child: Field<T>) {\n        super();\n        this.children = [child];\n    }\n    public readonly children: Field<T>[];\n    public get typeId() { return Type.List as Type.List; }\n    public toString() { return `List<${this.valueType}>`; }\n    public get valueType(): T { return this.children[0].type as T; }\n    public get valueField(): Field<T> { return this.children[0] as Field<T>; }\n    public get ArrayType(): T['ArrayType'] { return this.valueType.ArrayType; }\n    protected static [Symbol.toStringTag] = ((proto: List) => {\n        (<any> proto).children = null;\n        return proto[Symbol.toStringTag] = 'List';\n    })(List.prototype);\n}\n\n/** @ignore */\nexport interface Struct<T extends { [key: string]: DataType } = any> extends DataType<Type.Struct> { TArray: IterableArrayLike<RowLike<T>>; TValue: RowLike<T>; dataTypes: T }\n/** @ignore */\nexport class Struct<T extends { [key: string]: DataType } = any> extends DataType<Type.Struct, T> {\n    public readonly children: Field<T[keyof T]>[];\n    constructor(children: Field<T[keyof T]>[]) {\n        super();\n        this.children = children;\n    }\n    public get typeId() { return Type.Struct as Type.Struct; }\n    public toString() { return `Struct<{${this.children.map((f) => `${f.name}:${f.type}`).join(`, `)}}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Struct) => {\n        (<any> proto).children = null;\n        return proto[Symbol.toStringTag] = 'Struct';\n    })(Struct.prototype);\n}\n\n/** @ignore */\ntype Unions = Type.Union | Type.DenseUnion | Type.SparseUnion;\n/** @ignore */\ninterface Union_<T extends Unions = Unions> extends DataType<T> { TArray: Int8Array; TValue: any; ArrayType: TypedArrayConstructor<Int8Array> }\n/** @ignore */\nclass Union_<T extends Unions = Unions> extends DataType<T> {\n    public readonly mode: UnionMode;\n    public readonly typeIds: Int32Array;\n    public readonly children: Field<any>[];\n    public readonly typeIdToChildIndex: { [key: number]: number };\n    constructor(mode: UnionMode,\n                typeIds: number[] | Int32Array,\n                children: Field<any>[]) {\n        super();\n        this.mode = mode;\n        this.children = children;\n        this.typeIds = typeIds = Int32Array.from(typeIds);\n        this.typeIdToChildIndex = typeIds.reduce((typeIdToChildIndex, typeId, idx) => {\n            return (typeIdToChildIndex[typeId] = idx) && typeIdToChildIndex || typeIdToChildIndex;\n        }, Object.create(null) as { [key: number]: number });\n    }\n    public get typeId() { return Type.Union as T; }\n    public toString() {\n return `${this[Symbol.toStringTag]}<${\n        this.children.map((x) => `${x.type}`).join(` | `)\n    }>`;\n}\n    protected static [Symbol.toStringTag] = ((proto: Union_) => {\n        (<any> proto).mode = null;\n        (<any> proto).typeIds = null;\n        (<any> proto).children = null;\n        (<any> proto).typeIdToChildIndex = null;\n        (<any> proto).ArrayType = Int8Array;\n        return proto[Symbol.toStringTag] = 'Union';\n    })(Union_.prototype);\n}\n\nexport { Union_ as Union };\n\n/** @ignore */\nexport class DenseUnion extends Union_<Type.DenseUnion> {\n    constructor(typeIds: number[] | Int32Array, children: Field[]) {\n        super(UnionMode.Dense, typeIds, children);\n    }\n}\n\n/** @ignore */\nexport class SparseUnion extends Union_<Type.SparseUnion> {\n    constructor(typeIds: number[] | Int32Array, children: Field[]) {\n        super(UnionMode.Sparse, typeIds, children);\n    }\n}\n\n/** @ignore */\nexport interface FixedSizeBinary extends DataType<Type.FixedSizeBinary> { TArray: Uint8Array; TValue: Uint8Array; ArrayType: TypedArrayConstructor<Uint8Array> }\n/** @ignore */\nexport class FixedSizeBinary extends DataType<Type.FixedSizeBinary> {\n    constructor(public readonly byteWidth: number) {\n        super();\n    }\n    public get typeId() { return Type.FixedSizeBinary as Type.FixedSizeBinary; }\n    public toString() { return `FixedSizeBinary[${this.byteWidth}]`; }\n    protected static [Symbol.toStringTag] = ((proto: FixedSizeBinary) => {\n        (<any> proto).byteWidth = null;\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'FixedSizeBinary';\n    })(FixedSizeBinary.prototype);\n}\n\n/** @ignore */\nexport interface FixedSizeList<T extends DataType = any> extends DataType<Type.FixedSizeList> { TArray: IterableArrayLike<T['TArray']>; TValue: V<T> }\n/** @ignore */\nexport class FixedSizeList<T extends DataType = any> extends DataType<Type.FixedSizeList, { [0]: T }> {\n    public readonly children: Field<T>[];\n    constructor(public readonly listSize: number, child: Field<T>) {\n        super();\n        this.children = [child];\n    }\n    public get typeId() { return Type.FixedSizeList as Type.FixedSizeList; }\n    public get valueType(): T { return this.children[0].type as T; }\n    public get valueField(): Field<T> { return this.children[0] as Field<T>; }\n    public get ArrayType(): T['ArrayType'] { return this.valueType.ArrayType; }\n    public toString() { return `FixedSizeList[${this.listSize}]<${this.valueType}>`; }\n    protected static [Symbol.toStringTag] = ((proto: FixedSizeList) => {\n        (<any> proto).children = null;\n        (<any> proto).listSize = null;\n        return proto[Symbol.toStringTag] = 'FixedSizeList';\n    })(FixedSizeList.prototype);\n}\n\n/** @ignore */\nexport interface Map_<TKey extends DataType = any, TValue extends DataType = any> extends DataType<Type.Map> {\n    TArray: IterableArrayLike<Map<TKey['TValue'], TValue['TValue'] | null>>;\n    TChild: Struct<{ key: TKey; value: TValue }>;\n    TValue: MapLike<TKey, TValue>;\n}\n\n/** @ignore */\nexport class Map_<TKey extends DataType = any, TValue extends DataType = any> extends DataType<Type.Map> {\n    constructor(child: Field<Struct<{ key: TKey; value: TValue }>>, keysSorted = false) {\n        super();\n        this.children = [child];\n        this.keysSorted = keysSorted;\n    }\n    public readonly keysSorted: boolean;\n    public readonly children: Field<Struct<{ key: TKey; value: TValue }>>[];\n    public get typeId() { return Type.Map as Type.Map; }\n    public get keyType(): TKey { return this.children[0].type.children[0].type as TKey; }\n    public get valueType(): TValue { return this.children[0].type.children[1].type as TValue; }\n    public toString() { return `Map<{${this.children[0].type.children.map((f) => `${f.name}:${f.type}`).join(`, `)}}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Map_) => {\n        (<any> proto).children = null;\n        (<any> proto).keysSorted = null;\n        return proto[Symbol.toStringTag] = 'Map_';\n    })(Map_.prototype);\n}\n\n/** @ignore */\nconst getId = ((atomicDictionaryId) => () => ++atomicDictionaryId)(-1);\n\n/** @ignore */\nexport type TKeys = Int8 | Int16 | Int32 | Uint8 | Uint16 | Uint32;\n\n/** @ignore */\nexport interface Dictionary<T extends DataType = any, TKey extends TKeys = TKeys> extends DataType<Type.Dictionary> { TArray: TKey['TArray']; TValue: T['TValue'] }\n/** @ignore */\nexport class Dictionary<T extends DataType = any, TKey extends TKeys = TKeys> extends DataType<Type.Dictionary> {\n    public readonly id: number;\n    public readonly indices: TKey;\n    public readonly dictionary: T;\n    public readonly isOrdered: boolean;\n    constructor(dictionary: T, indices: TKey, id?: Long | number | null, isOrdered?: boolean | null) {\n        super();\n        this.indices = indices;\n        this.dictionary = dictionary;\n        this.isOrdered = isOrdered || false;\n        this.id = id == null ? getId() : typeof id === 'number' ? id : id.low;\n    }\n    public get typeId() { return Type.Dictionary as Type.Dictionary; }\n    public get children() { return this.dictionary.children; }\n    public get valueType(): T { return this.dictionary as T; }\n    public get ArrayType(): T['ArrayType'] { return this.dictionary.ArrayType; }\n    public toString() { return `Dictionary<${this.indices}, ${this.dictionary}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Dictionary) => {\n        (<any> proto).id = null;\n        (<any> proto).indices = null;\n        (<any> proto).isOrdered = null;\n        (<any> proto).dictionary = null;\n        return proto[Symbol.toStringTag] = 'Dictionary';\n    })(Dictionary.prototype);\n}\n\n/** @ignore */\nexport interface IterableArrayLike<T = any> extends ArrayLike<T>, Iterable<T> {}\n/** @ignore */\nexport type FloatArray = Uint16Array | Float32Array | Float64Array;\n/** @ignore */\nexport type IntArray = Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array;\n\n/** @ignore */\nexport function strideForType(type: DataType) {\n    const t: any = type;\n    switch (type.typeId) {\n        case Type.Decimal: return 4;\n        case Type.Timestamp: return 2;\n        case Type.Date: return 1 + (t as Date_).unit;\n        case Type.Interval: return 1 + (t as Interval_).unit;\n        case Type.Int: return 1 + +((t as Int_).bitWidth > 32);\n        case Type.Time: return 1 + +((t as Time_).bitWidth > 32);\n        case Type.FixedSizeList: return (t as FixedSizeList).listSize;\n        case Type.FixedSizeBinary: return (t as FixedSizeBinary).byteWidth;\n        default: return 1;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/** @ignore */\nexport function getBool(_data: any, _index: number, byte: number, bit: number) {\n    return (byte & 1 << bit) !== 0;\n}\n\n/** @ignore */\nexport function getBit(_data: any, _index: number, byte: number, bit: number): 0 | 1 {\n    return (byte & 1 << bit) >> bit as (0 | 1);\n}\n\n/** @ignore */\nexport function setBool(bytes: Uint8Array, index: number, value: any) {\n    return value ?\n        !!(bytes[index >> 3] |=  (1 << (index % 8))) || true :\n        !(bytes[index >> 3] &= ~(1 << (index % 8))) && false ;\n}\n\n/** @ignore */\nexport function truncateBitmap(offset: number, length: number, bitmap: Uint8Array) {\n    const alignedSize = (bitmap.byteLength + 7) & ~7;\n    if (offset > 0 || bitmap.byteLength < alignedSize) {\n        const bytes = new Uint8Array(alignedSize);\n        // If the offset is a multiple of 8 bits, it's safe to slice the bitmap\n        bytes.set(offset % 8 === 0 ? bitmap.subarray(offset >> 3) :\n            // Otherwise iterate each bit from the offset and return a new one\n            packBools(new BitIterator(bitmap, offset, length, null, getBool)).subarray(0, alignedSize));\n        return bytes;\n    }\n    return bitmap;\n}\n\n/** @ignore */\nexport function packBools(values: Iterable<any>) {\n    const xs: number[] = [];\n    let i = 0, bit = 0, byte = 0;\n    for (const value of values) {\n        value && (byte |= 1 << bit);\n        if (++bit === 8) {\n            xs[i++] = byte;\n            byte = bit = 0;\n        }\n    }\n    if (i === 0 || bit > 0) { xs[i++] = byte; }\n    const b = new Uint8Array((xs.length + 7) & ~7);\n    b.set(xs);\n    return b;\n}\n\n/** @ignore */\nexport class BitIterator<T> implements IterableIterator<T> {\n    bit: number;\n    byte: number;\n    byteIndex: number;\n    index: number;\n\n    constructor(\n        private bytes: Uint8Array,\n        begin: number,\n        private length: number,\n        private context: any,\n        private get: (context: any, index: number, byte: number, bit: number) => T\n    ) {\n        this.bit = begin % 8;\n        this.byteIndex = begin >> 3;\n        this.byte = bytes[this.byteIndex++];\n        this.index = 0;\n    }\n\n    next(): IteratorResult<T> {\n        if (this.index < this.length) {\n            if (this.bit === 8) {\n                this.bit = 0;\n                this.byte = this.bytes[this.byteIndex++];\n            }\n            return {\n                value: this.get(this.context, this.index++, this.byte, this.bit++)\n            };\n        }\n        return { done: true, value: null };\n    }\n\n    [Symbol.iterator]() {\n        return this;\n    }\n}\n\n/**\n * Compute the population count (the number of bits set to 1) for a range of bits in a Uint8Array.\n * @param vector The Uint8Array of bits for which to compute the population count.\n * @param lhs The range's left-hand side (or start) bit\n * @param rhs The range's right-hand side (or end) bit\n */\n/** @ignore */\nexport function popcnt_bit_range(data: Uint8Array, lhs: number, rhs: number): number {\n    if (rhs - lhs <= 0) { return 0; }\n    // If the bit range is less than one byte, sum the 1 bits in the bit range\n    if (rhs - lhs < 8) {\n        let sum = 0;\n        for (const bit of new BitIterator(data, lhs, rhs - lhs, data, getBit)) {\n            sum += bit;\n        }\n        return sum;\n    }\n    // Get the next lowest multiple of 8 from the right hand side\n    const rhsInside = rhs >> 3 << 3;\n    // Get the next highest multiple of 8 from the left hand side\n    const lhsInside = lhs + (lhs % 8 === 0 ? 0 : 8 - lhs % 8);\n    return (\n        // Get the popcnt of bits between the left hand side, and the next highest multiple of 8\n        popcnt_bit_range(data, lhs, lhsInside) +\n        // Get the popcnt of bits between the right hand side, and the next lowest multiple of 8\n        popcnt_bit_range(data, rhsInside, rhs) +\n        // Get the popcnt of all bits between the left and right hand sides' multiples of 8\n        popcnt_array(data, lhsInside >> 3, (rhsInside - lhsInside) >> 3)\n    );\n}\n\n/** @ignore */\nexport function popcnt_array(arr: ArrayBufferView, byteOffset?: number, byteLength?: number) {\n    let cnt = 0, pos = byteOffset! | 0;\n    const view = new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n    const len =  byteLength === void 0 ? arr.byteLength : pos + byteLength;\n    while (len - pos >= 4) {\n        cnt += popcnt_uint32(view.getUint32(pos));\n        pos += 4;\n    }\n    while (len - pos >= 2) {\n        cnt += popcnt_uint32(view.getUint16(pos));\n        pos += 2;\n    }\n    while (len - pos >= 1) {\n        cnt += popcnt_uint32(view.getUint8(pos));\n        pos += 1;\n    }\n    return cnt;\n}\n\n/** @ignore */\nexport function popcnt_uint32(uint32: number): number {\n    let i = uint32 | 0;\n    i = i - ((i >>> 1) & 0x55555555);\n    i = (i & 0x33333333) + ((i >>> 2) & 0x33333333);\n    return (((i + (i >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from './vector';\nimport { truncateBitmap } from './util/bit';\nimport { popcnt_bit_range } from './util/bit';\nimport { BufferType, UnionMode, Type } from './enum';\nimport { DataType, SparseUnion, DenseUnion, strideForType } from './type';\nimport { toArrayBufferView, toUint8Array, toInt32Array } from './util/buffer';\nimport {\n    Dictionary,\n    Null, Int, Float,\n    Binary, Bool, Utf8, Decimal,\n    Date_, Time, Timestamp, Interval,\n    List, Struct, Union, FixedSizeBinary, FixedSizeList, Map_,\n} from './type';\n\n// When slicing, we do not know the null count of the sliced range without\n// doing some computation. To avoid doing this eagerly, we set the null count\n// to -1 (any negative number will do). When Vector.nullCount is called the\n// first time, the null count will be computed. See ARROW-33\n/** @ignore */ export type kUnknownNullCount = -1;\n/** @ignore */ export const kUnknownNullCount = -1;\n\n/** @ignore */ export type NullBuffer = Uint8Array | null | undefined;\n/** @ignore */ export type TypeIdsBuffer = Int8Array  | ArrayLike<number> | Iterable<number> | undefined;\n/** @ignore */ export type ValueOffsetsBuffer = Int32Array  | ArrayLike<number> | Iterable<number> | undefined;\n/** @ignore */ export type DataBuffer<T extends DataType> = T['TArray'] | ArrayLike<number> | Iterable<number> | undefined;\n\n/** @ignore */\nexport interface Buffers<T extends DataType> {\n      [BufferType.OFFSET]: Int32Array;\n        [BufferType.DATA]: T['TArray'];\n    [BufferType.VALIDITY]: Uint8Array;\n        [BufferType.TYPE]: T['TArray'];\n}\n\n/** @ignore */\nexport interface Data<T extends DataType = DataType> {\n    readonly TType: T['TType'];\n    readonly TArray: T['TArray'];\n    readonly TValue: T['TValue'];\n}\n\n/** @ignore */\nexport class Data<T extends DataType = DataType> {\n\n    public readonly type: T;\n    public readonly length: number;\n    public readonly offset: number;\n    public readonly stride: number;\n    public readonly childData: Data[];\n\n    /**\n     * The dictionary for this Vector, if any. Only used for Dictionary type.\n     */\n    public dictionary?: Vector;\n\n    public readonly values!: Buffers<T>[BufferType.DATA];\n    public readonly typeIds!: Buffers<T>[BufferType.TYPE];\n    public readonly nullBitmap!: Buffers<T>[BufferType.VALIDITY];\n    public readonly valueOffsets!: Buffers<T>[BufferType.OFFSET];\n\n    public get typeId(): T['TType'] { return this.type.typeId; }\n    public get ArrayType(): T['ArrayType'] { return this.type.ArrayType; }\n    public get buffers() {\n        return [this.valueOffsets, this.values, this.nullBitmap, this.typeIds] as Buffers<T>;\n    }\n    public get byteLength(): number {\n        let byteLength = 0;\n        const { valueOffsets, values, nullBitmap, typeIds } = this;\n        valueOffsets && (byteLength += valueOffsets.byteLength);\n        values       && (byteLength += values.byteLength);\n        nullBitmap   && (byteLength += nullBitmap.byteLength);\n        typeIds      && (byteLength += typeIds.byteLength);\n        return this.childData.reduce((byteLength, child) => byteLength + child.byteLength, byteLength);\n    }\n\n    protected _nullCount: number | kUnknownNullCount;\n\n    public get nullCount() {\n        let nullCount = this._nullCount;\n        let nullBitmap: Uint8Array | undefined;\n        if (nullCount <= kUnknownNullCount && (nullBitmap = this.nullBitmap)) {\n            this._nullCount = nullCount = this.length - popcnt_bit_range(nullBitmap, this.offset, this.offset + this.length);\n        }\n        return nullCount;\n    }\n\n    constructor(type: T, offset: number, length: number, nullCount?: number, buffers?: Partial<Buffers<T>> | Data<T>, childData?: (Data | Vector)[], dictionary?: Vector) {\n        this.type = type;\n        this.dictionary = dictionary;\n        this.offset = Math.floor(Math.max(offset || 0, 0));\n        this.length = Math.floor(Math.max(length || 0, 0));\n        this._nullCount = Math.floor(Math.max(nullCount || 0, -1));\n        this.childData = (childData || []).map((x) => x instanceof Data ? x : x.data) as Data[];\n        let buffer: Buffers<T>[keyof Buffers<T>];\n        if (buffers instanceof Data) {\n            this.stride = buffers.stride;\n            this.values = buffers.values;\n            this.typeIds = buffers.typeIds;\n            this.nullBitmap = buffers.nullBitmap;\n            this.valueOffsets = buffers.valueOffsets;\n        } else {\n            this.stride = strideForType(type);\n            if (buffers) {\n                (buffer = (buffers as Buffers<T>)[0]) && (this.valueOffsets = buffer);\n                (buffer = (buffers as Buffers<T>)[1]) && (this.values = buffer);\n                (buffer = (buffers as Buffers<T>)[2]) && (this.nullBitmap = buffer);\n                (buffer = (buffers as Buffers<T>)[3]) && (this.typeIds = buffer);\n            }\n        }\n    }\n\n    public clone<R extends DataType>(type: R, offset = this.offset, length = this.length, nullCount = this._nullCount, buffers: Buffers<R> = <any> this, childData: (Data | Vector)[] = this.childData) {\n        return new Data(type, offset, length, nullCount, buffers, childData, this.dictionary);\n    }\n\n    public slice(offset: number, length: number): Data<T> {\n        const { stride, typeId, childData } = this;\n        // +true === 1, +false === 0, so this means\n        // we keep nullCount at 0 if it's already 0,\n        // otherwise set to the invalidated flag -1\n        const nullCount = +(this._nullCount === 0) - 1;\n        const childStride = typeId === 16 /* FixedSizeList */ ? stride : 1;\n        const buffers = this._sliceBuffers(offset, length, stride, typeId);\n        return this.clone<T>(this.type, this.offset + offset, length, nullCount, buffers,\n            // Don't slice children if we have value offsets (the variable-width types)\n            (!childData.length || this.valueOffsets) ? childData : this._sliceChildren(childData, childStride * offset, childStride * length));\n    }\n\n    public _changeLengthAndBackfillNullBitmap(newLength: number): Data<T> {\n        if (this.typeId === Type.Null) {\n            return this.clone(this.type, 0, newLength, 0);\n        }\n        const { length, nullCount } = this;\n        // start initialized with 0s (nulls), then fill from 0 to length with 1s (not null)\n        const bitmap = new Uint8Array(((newLength + 63) & ~63) >> 3).fill(255, 0, length >> 3);\n        // set all the bits in the last byte (up to bit `length - length % 8`) to 1 (not null)\n        bitmap[length >> 3] = (1 << (length - (length & ~7))) - 1;\n        // if we have a nullBitmap, truncate + slice and set it over the pre-filled 1s\n        if (nullCount > 0) {\n            bitmap.set(truncateBitmap(this.offset, length, this.nullBitmap), 0);\n        }\n        const buffers = this.buffers;\n        buffers[BufferType.VALIDITY] = bitmap;\n        return this.clone(this.type, 0, newLength, nullCount + (newLength - length), buffers);\n    }\n\n    protected _sliceBuffers(offset: number, length: number, stride: number, typeId: T['TType']): Buffers<T> {\n        let arr: any;\n        const { buffers } = this;\n        // If typeIds exist, slice the typeIds buffer\n        (arr = buffers[BufferType.TYPE]) && (buffers[BufferType.TYPE] = arr.subarray(offset, offset + length));\n        // If offsets exist, only slice the offsets buffer\n        (arr = buffers[BufferType.OFFSET]) && (buffers[BufferType.OFFSET] = arr.subarray(offset, offset + length + 1)) ||\n        // Otherwise if no offsets, slice the data buffer. Don't slice the data vector for Booleans, since the offset goes by bits not bytes\n        (arr = buffers[BufferType.DATA]) && (buffers[BufferType.DATA] = typeId === 6 ? arr : arr.subarray(stride * offset, stride * (offset + length)));\n        return buffers;\n    }\n\n    protected _sliceChildren(childData: Data[], offset: number, length: number): Data[] {\n        return childData.map((child) => child.slice(offset, length));\n    }\n\n    //\n    // Convenience methods for creating Data instances for each of the Arrow Vector types\n    //\n    /** @nocollapse */\n    public static new<T extends DataType>(type: T, offset: number, length: number, nullCount?: number, buffers?: Partial<Buffers<T>> | Data<T>, childData?: (Data | Vector)[], dictionary?: Vector): Data<T> {\n        if (buffers instanceof Data) { buffers = buffers.buffers; } else if (!buffers) { buffers = [] as Partial<Buffers<T>>; }\n        switch (type.typeId) {\n            case Type.Null:            return <unknown> Data.Null(            <unknown> type as Null,            offset, length) as Data<T>;\n            case Type.Int:             return <unknown> Data.Int(             <unknown> type as Int,             offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Dictionary:      return <unknown> Data.Dictionary(      <unknown> type as Dictionary,      offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || [], dictionary!) as Data<T>;\n            case Type.Float:           return <unknown> Data.Float(           <unknown> type as Float,           offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Bool:            return <unknown> Data.Bool(            <unknown> type as Bool,            offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Decimal:         return <unknown> Data.Decimal(         <unknown> type as Decimal,         offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Date:            return <unknown> Data.Date(            <unknown> type as Date_,           offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Time:            return <unknown> Data.Time(            <unknown> type as Time,            offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Timestamp:       return <unknown> Data.Timestamp(       <unknown> type as Timestamp,       offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Interval:        return <unknown> Data.Interval(        <unknown> type as Interval,        offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.FixedSizeBinary: return <unknown> Data.FixedSizeBinary( <unknown> type as FixedSizeBinary, offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Binary:          return <unknown> Data.Binary(          <unknown> type as Binary,          offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.OFFSET] || [], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Utf8:            return <unknown> Data.Utf8(            <unknown> type as Utf8,            offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.OFFSET] || [], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.List:            return <unknown> Data.List(            <unknown> type as List,            offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.OFFSET] || [], (childData || [])[0]) as Data<T>;\n            case Type.FixedSizeList:   return <unknown> Data.FixedSizeList(   <unknown> type as FixedSizeList,   offset, length, nullCount || 0, buffers[BufferType.VALIDITY], (childData || [])[0]) as Data<T>;\n            case Type.Struct:          return <unknown> Data.Struct(          <unknown> type as Struct,          offset, length, nullCount || 0, buffers[BufferType.VALIDITY], childData || []) as Data<T>;\n            case Type.Map:             return <unknown> Data.Map(             <unknown> type as Map_,            offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.OFFSET] || [], (childData || [])[0]) as Data<T>;\n            case Type.Union:           return <unknown> Data.Union(           <unknown> type as Union,           offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.TYPE] || [], buffers[BufferType.OFFSET] || childData, childData) as Data<T>;\n        }\n        throw new Error(`Unrecognized typeId ${type.typeId}`);\n    }\n\n    /** @nocollapse */\n    public static Null<T extends Null>(type: T, offset: number, length: number) {\n        return new Data(type, offset, length, 0);\n    }\n    /** @nocollapse */\n    public static Int<T extends Int>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Dictionary<T extends Dictionary>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>, dictionary: Vector<T['dictionary']>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView<T['TArray']>(type.indices.ArrayType, data), toUint8Array(nullBitmap)], [], dictionary);\n    }\n    /** @nocollapse */\n    public static Float<T extends Float>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Bool<T extends Bool>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Decimal<T extends Decimal>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Date<T extends Date_>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Time<T extends Time>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Timestamp<T extends Timestamp>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Interval<T extends Interval>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static FixedSizeBinary<T extends FixedSizeBinary>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Binary<T extends Binary>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [toInt32Array(valueOffsets), toUint8Array(data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Utf8<T extends Utf8>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [toInt32Array(valueOffsets), toUint8Array(data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static List<T extends List>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, child: Data<T['valueType']> | Vector<T['valueType']>) {\n        return new Data(type, offset, length, nullCount, [toInt32Array(valueOffsets), undefined, toUint8Array(nullBitmap)], child ? [child] : []);\n    }\n    /** @nocollapse */\n    public static FixedSizeList<T extends FixedSizeList>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, child: Data<T['valueType']> | Vector<T['valueType']>) {\n        return new Data(type, offset, length, nullCount, [undefined, undefined, toUint8Array(nullBitmap)], child ? [child] : []);\n    }\n    /** @nocollapse */\n    public static Struct<T extends Struct>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, children: (Data | Vector)[]) {\n        return new Data(type, offset, length, nullCount, [undefined, undefined, toUint8Array(nullBitmap)], children);\n    }\n    /** @nocollapse */\n    public static Map<T extends Map_>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, child: (Data | Vector)) {\n        return new Data(type, offset, length, nullCount, [toInt32Array(valueOffsets), undefined, toUint8Array(nullBitmap)], child ? [child] : []);\n    }\n    public static Union<T extends SparseUnion>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, typeIds: TypeIdsBuffer, children: (Data | Vector)[], _?: any): Data<T>;\n    public static Union<T extends DenseUnion>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, typeIds: TypeIdsBuffer, valueOffsets: ValueOffsetsBuffer, children: (Data | Vector)[]): Data<T>;\n    public static Union<T extends Union>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, typeIds: TypeIdsBuffer, valueOffsetsOrChildren: ValueOffsetsBuffer | (Data | Vector)[], children?: (Data | Vector)[]): Data<T>;\n    /** @nocollapse */\n    public static Union<T extends Union>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, typeIds: TypeIdsBuffer, valueOffsetsOrChildren: ValueOffsetsBuffer | (Data | Vector)[], children?: (Data | Vector)[]) {\n        const buffers = <unknown> [\n            undefined, undefined,\n            toUint8Array(nullBitmap),\n            toArrayBufferView(type.ArrayType, typeIds)\n        ] as Partial<Buffers<T>>;\n        if (type.mode === UnionMode.Sparse) {\n            return new Data(type, offset, length, nullCount, buffers, valueOffsetsOrChildren as (Data | Vector)[]);\n        }\n        buffers[BufferType.OFFSET] = toInt32Array(<ValueOffsetsBuffer> valueOffsetsOrChildren);\n        return new Data(type, offset, length, nullCount, buffers, children);\n    }\n}\n\n(Data.prototype as any).childData = Object.freeze([]);\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/** @ignore */ const undf = void (0);\n\n/** @ignore */\nexport function valueToString(x: any) {\n    if (x === null) { return 'null'; }\n    if (x === undf) { return 'undefined'; }\n    switch (typeof x) {\n        case 'number': return `${x}`;\n        case 'bigint': return `${x}`;\n        case 'string': return `\"${x}\"`;\n    }\n    // If [Symbol.toPrimitive] is implemented (like in BN)\n    // use it instead of JSON.stringify(). This ensures we\n    // print BigInts, Decimals, and Binary in their native\n    // representation\n    if (typeof x[Symbol.toPrimitive] === 'function') {\n        return x[Symbol.toPrimitive]('string');\n    }\n    return ArrayBuffer.isView(x) ? `[${x}]` : JSON.stringify(x);\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { DataType } from '../type';\nimport { valueToString } from '../util/pretty';\nimport { BigIntAvailable } from '../util/compat';\n\n/**\n * Dynamically compile the null values into an `isValid()` function whose\n * implementation is a switch statement. Microbenchmarks in v8 indicate\n * this approach is 25% faster than using an ES6 Map.\n *\n * @example\n * console.log(createIsValidFunction([null, 'N/A', NaN]));\n * `function (x) {\n *     if (x !== x) return false;\n *     switch (x) {\n *         case null:\n *         case \"N/A\":\n *             return false;\n *     }\n *     return true;\n * }`\n *\n * @ignore\n * @param nullValues\n */\nexport function createIsValidFunction<T extends DataType = any, TNull = any>(nullValues?: ReadonlyArray<TNull>) {\n\n    if (!nullValues || nullValues.length <= 0) {\n        // @ts-ignore\n        return function isValid(value: any) { return true; };\n    }\n\n    let fnBody = '';\n    const noNaNs = nullValues.filter((x) => x === x);\n\n    if (noNaNs.length > 0) {\n        fnBody = `\n    switch (x) {${noNaNs.map((x) => `\n        case ${valueToCase(x)}:`).join('')}\n            return false;\n    }`;\n    }\n\n    // NaN doesn't equal anything including itself, so it doesn't work as a\n    // switch case. Instead we must explicitly check for NaN before the switch.\n    if (nullValues.length !== noNaNs.length) {\n        fnBody = `if (x !== x) return false;\\n${fnBody}`;\n    }\n\n    return new Function(`x`, `${fnBody}\\nreturn true;`) as (value: T['TValue'] | TNull) => boolean;\n}\n\n/** @ignore */\nfunction valueToCase(x: any) {\n    if (typeof x !== 'bigint') {\n        return valueToString(x);\n    } else if (BigIntAvailable) {\n        return `${valueToString(x)}n`;\n    }\n    return `\"${valueToString(x)}\"`;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { memcpy } from '../util/buffer';\nimport { BigIntAvailable, BigInt64Array, BigUint64Array } from '../util/compat';\nimport {\n    TypedArray, TypedArrayConstructor,\n    BigIntArray, BigIntArrayConstructor\n} from '../interfaces';\n\n/** @ignore */ type DataValue<T> = T extends TypedArray ? number : T extends BigIntArray ? WideValue<T> : T;\n/** @ignore */ type WideValue<T extends BigIntArray> = T extends BigIntArray ? bigint | Int32Array | Uint32Array : never;\n/** @ignore */ type ArrayCtor<T extends TypedArray | BigIntArray> =\n    T extends TypedArray  ? TypedArrayConstructor<T>  :\n    T extends BigIntArray ? BigIntArrayConstructor<T> :\n    any;\n\n/** @ignore */\nconst roundLengthUpToNearest64Bytes = (len: number, BPE: number) => ((((len * BPE) + 63) & ~63) || 64) / BPE;\n/** @ignore */\nconst sliceOrExtendArray = <T extends TypedArray | BigIntArray>(arr: T, len = 0) => (\n    arr.length >= len ? arr.subarray(0, len) : memcpy(new (arr.constructor as any)(len), arr, 0)\n) as T;\n\n/** @ignore */\nexport interface BufferBuilder<T extends TypedArray | BigIntArray = any, TValue = DataValue<T>> {\n    readonly offset: number;\n}\n\n/** @ignore */\nexport class BufferBuilder<T extends TypedArray | BigIntArray = any, TValue = DataValue<T>> {\n\n    constructor(buffer: T, stride = 1) {\n        this.buffer = buffer;\n        this.stride = stride;\n        this.BYTES_PER_ELEMENT = buffer.BYTES_PER_ELEMENT;\n        this.ArrayType = buffer.constructor as ArrayCtor<T>;\n        this._resize(this.length = buffer.length / stride | 0);\n    }\n\n    public buffer: T;\n    public length: number;\n    public readonly stride: number;\n    public readonly ArrayType: ArrayCtor<T>;\n    public readonly BYTES_PER_ELEMENT: number;\n\n    public get byteLength() { return this.length * this.stride * this.BYTES_PER_ELEMENT | 0; }\n    public get reservedLength() { return this.buffer.length / this.stride; }\n    public get reservedByteLength() { return this.buffer.byteLength; }\n\n    // @ts-ignore\n    public set(index: number, value: TValue) { return this; }\n    public append(value: TValue) { return this.set(this.length, value); }\n    public reserve(extra: number) {\n        if (extra > 0) {\n            this.length += extra;\n            const stride = this.stride;\n            const length = this.length * stride;\n            const reserved = this.buffer.length;\n            if (length >= reserved) {\n                this._resize(reserved === 0\n                    ? roundLengthUpToNearest64Bytes(length * 1, this.BYTES_PER_ELEMENT)\n                    : roundLengthUpToNearest64Bytes(length * 2, this.BYTES_PER_ELEMENT)\n                );\n            }\n        }\n        return this;\n    }\n    public flush(length = this.length) {\n        length = roundLengthUpToNearest64Bytes(length * this.stride, this.BYTES_PER_ELEMENT);\n        const array = sliceOrExtendArray<T>(this.buffer, length);\n        this.clear();\n        return array;\n    }\n    public clear() {\n        this.length = 0;\n        this._resize(0);\n        return this;\n    }\n    protected _resize(newLength: number) {\n        return this.buffer = <T> memcpy(new this.ArrayType(newLength), this.buffer);\n    }\n}\n\n(BufferBuilder.prototype as any).offset = 0;\n\n/** @ignore */\nexport class DataBufferBuilder<T extends TypedArray> extends BufferBuilder<T, number> {\n    public last() { return this.get(this.length - 1); }\n    public get(index: number) { return this.buffer[index]; }\n    public set(index: number, value: number) {\n        this.reserve(index - this.length + 1);\n        this.buffer[index * this.stride] = value;\n        return this;\n    }\n}\n\n/** @ignore */\nexport class BitmapBufferBuilder extends DataBufferBuilder<Uint8Array> {\n\n    constructor(data = new Uint8Array(0)) { super(data, 1 / 8); }\n\n    public numValid = 0;\n    public get numInvalid() { return this.length - this.numValid; }\n    public get(idx: number) { return this.buffer[idx >> 3] >> idx % 8 & 1; }\n    public set(idx: number, val: number) {\n        const { buffer } = this.reserve(idx - this.length + 1);\n        const byte = idx >> 3, bit = idx % 8, cur = buffer[byte] >> bit & 1;\n        // If `val` is truthy and the current bit is 0, flip it to 1 and increment `numValid`.\n        // If `val` is falsey and the current bit is 1, flip it to 0 and decrement `numValid`.\n        val ? cur === 0 && ((buffer[byte] |=  (1 << bit)), ++this.numValid)\n            : cur === 1 && ((buffer[byte] &= ~(1 << bit)), --this.numValid);\n        return this;\n    }\n    public clear() {\n        this.numValid = 0;\n        return super.clear();\n    }\n}\n\n/** @ignore */\nexport class OffsetsBufferBuilder extends DataBufferBuilder<Int32Array> {\n    constructor(data = new Int32Array(1)) { super(data, 1); }\n    public append(value: number) {\n        return this.set(this.length - 1, value);\n    }\n    public set(index: number, value: number) {\n        const offset = this.length - 1;\n        const buffer = this.reserve(index - offset + 1).buffer;\n        if (offset < index++) {\n            buffer.fill(buffer[offset], offset, index);\n        }\n        buffer[index] = buffer[index - 1] + value;\n        return this;\n    }\n    public flush(length = this.length - 1) {\n        if (length > this.length) {\n            this.set(length - 1, 0);\n        }\n        return super.flush(length + 1);\n    }\n}\n\n/** @ignore */\nexport class WideBufferBuilder<T extends TypedArray, R extends BigIntArray> extends BufferBuilder<T, DataValue<T>> {\n    public buffer64!: R;\n    protected _ArrayType64!: BigIntArrayConstructor<R>;\n    public get ArrayType64() {\n        return this._ArrayType64 || (this._ArrayType64 = <BigIntArrayConstructor<R>> (this.buffer instanceof Int32Array ? BigInt64Array : BigUint64Array));\n    }\n    public set(index: number, value: DataValue<T>) {\n        this.reserve(index - this.length + 1);\n        switch (typeof value) {\n            case 'bigint': this.buffer64[index] = value; break;\n            case 'number': this.buffer[index * this.stride] = value; break;\n            default: this.buffer.set(value as TypedArray, index * this.stride);\n        }\n        return this;\n    }\n    protected _resize(newLength: number) {\n        const data = super._resize(newLength);\n        const length = data.byteLength / (this.BYTES_PER_ELEMENT * this.stride);\n        if (BigIntAvailable) {\n            this.buffer64 = new this.ArrayType64(data.buffer, data.byteOffset, length);\n        }\n        return data;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from './vector';\nimport { BufferType } from './enum';\nimport { Data, Buffers } from './data';\nimport { createIsValidFunction } from './builder/valid';\nimport { BuilderType as B, VectorType as V} from './interfaces';\nimport { BufferBuilder, BitmapBufferBuilder, DataBufferBuilder, OffsetsBufferBuilder } from './builder/buffer';\nimport {\n    DataType, strideForType,\n    Float, Int, Decimal, FixedSizeBinary,\n    Date_, Time, Timestamp, Interval,\n    Utf8, Binary, List, Map_\n} from './type';\n\n/**\n * A set of options required to create a `Builder` instance for a given `DataType`.\n * @see {@link Builder}\n */\nexport interface BuilderOptions<T extends DataType = any, TNull = any> {\n    type: T;\n    nullValues?: TNull[] | ReadonlyArray<TNull> | null;\n    children?: { [key: string]: BuilderOptions } | BuilderOptions[];\n}\n\n/**\n * A set of options to create an Iterable or AsyncIterable `Builder` transform function.\n * @see {@link Builder.throughIterable}\n * @see {@link Builder.throughAsyncIterable}\n */\n\nexport interface IterableBuilderOptions<T extends DataType = any, TNull = any> extends BuilderOptions<T, TNull> {\n    highWaterMark?: number;\n    queueingStrategy?: 'bytes' | 'count';\n    dictionaryHashFunction?: (value: any) => string | number;\n    valueToChildTypeId?: (builder: Builder<T, TNull>, value: any, offset: number) => number;\n}\n\n/**\n * An abstract base class for types that construct Arrow Vectors from arbitrary JavaScript values.\n *\n * A `Builder` is responsible for writing arbitrary JavaScript values\n * to ArrayBuffers and/or child Builders according to the Arrow specification\n * for each DataType, creating or resizing the underlying ArrayBuffers as necessary.\n *\n * The `Builder` for each Arrow `DataType` handles converting and appending\n * values for a given `DataType`. The high-level {@link Builder.new `Builder.new()`} convenience\n * method creates the specific `Builder` subclass for the supplied `DataType`.\n *\n * Once created, `Builder` instances support both appending values to the end\n * of the `Builder`, and random-access writes to specific indices\n * (`Builder.prototype.append(value)` is a convenience method for\n * `builder.set(builder.length, value)`). Appending or setting values beyond the\n * Builder's current length may cause the builder to grow its underlying buffers\n * or child Builders (if applicable) to accommodate the new values.\n *\n * After enough values have been written to a `Builder`, `Builder.prototype.flush()`\n * will commit the values to the underlying ArrayBuffers (or child Builders). The\n * internal Builder state will be reset, and an instance of `Data<T>` is returned.\n * Alternatively, `Builder.prototype.toVector()` will flush the `Builder` and return\n * an instance of `Vector<T>` instead.\n *\n * When there are no more values to write, use `Builder.prototype.finish()` to\n * finalize the `Builder`. This does not reset the internal state, so it is\n * necessary to call `Builder.prototype.flush()` or `toVector()` one last time\n * if there are still values queued to be flushed.\n *\n * Note: calling `Builder.prototype.finish()` is required when using a `DictionaryBuilder`,\n * because this is when it flushes the values that have been enqueued in its internal\n * dictionary's `Builder`, and creates the `dictionaryVector` for the `Dictionary` `DataType`.\n *\n * ```ts\n * import { Builder, Utf8 } from 'apache-arrow';\n *\n * const utf8Builder = Builder.new({\n *     type: new Utf8(),\n *     nullValues: [null, 'n/a']\n * });\n *\n * utf8Builder\n *     .append('hello')\n *     .append('n/a')\n *     .append('world')\n *     .append(null);\n *\n * const utf8Vector = utf8Builder.finish().toVector();\n *\n * console.log(utf8Vector.toJSON());\n * // > [\"hello\", null, \"world\", null]\n * ```\n *\n * @typeparam T The `DataType` of this `Builder`.\n * @typeparam TNull The type(s) of values which will be considered null-value sentinels.\n */\nexport abstract class Builder<T extends DataType = any, TNull = any> {\n\n    /**\n     * Create a `Builder` instance based on the `type` property of the supplied `options` object.\n     * @param {BuilderOptions<T, TNull>} options An object with a required `DataType` instance\n     * and other optional parameters to be passed to the `Builder` subclass for the given `type`.\n     *\n     * @typeparam T The `DataType` of the `Builder` to create.\n     * @typeparam TNull The type(s) of values which will be considered null-value sentinels.\n     * @nocollapse\n     */\n    // @ts-ignore\n    public static new<T extends DataType = any, TNull = any>(options: BuilderOptions<T, TNull>): B<T, TNull> {}\n\n    /** @nocollapse */\n    // @ts-ignore\n    public static throughNode<T extends DataType = any, TNull = any>(options: import('./io/node/builder').BuilderDuplexOptions<T, TNull>): import('stream').Duplex {\n        throw new Error(`\"throughNode\" not available in this environment`);\n    }\n    /** @nocollapse */\n    // @ts-ignore\n    public static throughDOM<T extends DataType = any, TNull = any>(options: import('./io/whatwg/builder').BuilderTransformOptions<T, TNull>): import('./io/whatwg/builder').BuilderTransform<T, TNull> {\n        throw new Error(`\"throughDOM\" not available in this environment`);\n    }\n\n    /**\n     * Transform a synchronous `Iterable` of arbitrary JavaScript values into a\n     * sequence of Arrow Vector<T> following the chunking semantics defined in\n     * the supplied `options` argument.\n     *\n     * This function returns a function that accepts an `Iterable` of values to\n     * transform. When called, this function returns an Iterator of `Vector<T>`.\n     *\n     * The resulting `Iterator<Vector<T>>` yields Vectors based on the\n     * `queueingStrategy` and `highWaterMark` specified in the `options` argument.\n     *\n     * * If `queueingStrategy` is `\"count\"` (or omitted), The `Iterator<Vector<T>>`\n     *   will flush the underlying `Builder` (and yield a new `Vector<T>`) once the\n     *   Builder's `length` reaches or exceeds the supplied `highWaterMark`.\n     * * If `queueingStrategy` is `\"bytes\"`, the `Iterator<Vector<T>>` will flush\n     *   the underlying `Builder` (and yield a new `Vector<T>`) once its `byteLength`\n     *   reaches or exceeds the supplied `highWaterMark`.\n     *\n     * @param {IterableBuilderOptions<T, TNull>} options An object of properties which determine the `Builder` to create and the chunking semantics to use.\n     * @returns A function which accepts a JavaScript `Iterable` of values to\n     *          write, and returns an `Iterator` that yields Vectors according\n     *          to the chunking semantics defined in the `options` argument.\n     * @nocollapse\n     */\n    public static throughIterable<T extends DataType = any, TNull = any>(options: IterableBuilderOptions<T, TNull>) {\n        return throughIterable(options);\n    }\n\n    /**\n     * Transform an `AsyncIterable` of arbitrary JavaScript values into a\n     * sequence of Arrow Vector<T> following the chunking semantics defined in\n     * the supplied `options` argument.\n     *\n     * This function returns a function that accepts an `AsyncIterable` of values to\n     * transform. When called, this function returns an AsyncIterator of `Vector<T>`.\n     *\n     * The resulting `AsyncIterator<Vector<T>>` yields Vectors based on the\n     * `queueingStrategy` and `highWaterMark` specified in the `options` argument.\n     *\n     * * If `queueingStrategy` is `\"count\"` (or omitted), The `AsyncIterator<Vector<T>>`\n     *   will flush the underlying `Builder` (and yield a new `Vector<T>`) once the\n     *   Builder's `length` reaches or exceeds the supplied `highWaterMark`.\n     * * If `queueingStrategy` is `\"bytes\"`, the `AsyncIterator<Vector<T>>` will flush\n     *   the underlying `Builder` (and yield a new `Vector<T>`) once its `byteLength`\n     *   reaches or exceeds the supplied `highWaterMark`.\n     *\n     * @param {IterableBuilderOptions<T, TNull>} options An object of properties which determine the `Builder` to create and the chunking semantics to use.\n     * @returns A function which accepts a JavaScript `AsyncIterable` of values\n     *          to write, and returns an `AsyncIterator` that yields Vectors\n     *          according to the chunking semantics defined in the `options`\n     *          argument.\n     * @nocollapse\n     */\n    public static throughAsyncIterable<T extends DataType = any, TNull = any>(options: IterableBuilderOptions<T, TNull>) {\n        return throughAsyncIterable(options);\n    }\n\n    /**\n     * Construct a builder with the given Arrow DataType with optional null values,\n     * which will be interpreted as \"null\" when set or appended to the `Builder`.\n     * @param {{ type: T, nullValues?: any[] }} options A `BuilderOptions` object used to create this `Builder`.\n     */\n    constructor({ 'type': type, 'nullValues': nulls }: BuilderOptions<T, TNull>) {\n        this.type = type;\n        this.children = [];\n        this.nullValues = nulls;\n        this.stride = strideForType(type);\n        this._nulls = new BitmapBufferBuilder();\n        if (nulls && nulls.length > 0) {\n            this._isValid = createIsValidFunction(nulls);\n        }\n    }\n\n    /**\n     * The Builder's `DataType` instance.\n     * @readonly\n     */\n    public type: T;\n    /**\n     * The number of values written to the `Builder` that haven't been flushed yet.\n     * @readonly\n     */\n    public length = 0;\n    /**\n     * A boolean indicating whether `Builder.prototype.finish()` has been called on this `Builder`.\n     * @readonly\n     */\n    public finished = false;\n    /**\n     * The number of elements in the underlying values TypedArray that\n     * represent a single logical element, determined by this Builder's\n     * `DataType`. This is 1 for most types, but is larger when the `DataType`\n     * is `Int64`, `Uint64`, `Decimal`, `DateMillisecond`, certain variants of\n     * `Interval`, `Time`, or `Timestamp`, `FixedSizeBinary`, and `FixedSizeList`.\n     * @readonly\n     */\n    public readonly stride: number;\n    public readonly children: Builder[];\n    /**\n     * The list of null-value sentinels for this `Builder`. When one of these values\n     * is written to the `Builder` (either via `Builder.prototype.set()` or `Builder.prototype.append()`),\n     * a 1-bit is written to this Builder's underlying null BitmapBufferBuilder.\n     * @readonly\n     */\n    public readonly nullValues?: TNull[] | ReadonlyArray<TNull> | null;\n\n    /**\n     * Flush the `Builder` and return a `Vector<T>`.\n     * @returns {Vector<T>} A `Vector<T>` of the flushed values.\n     */\n    public toVector() { return Vector.new(this.flush()); }\n\n    public get ArrayType() { return this.type.ArrayType; }\n    public get nullCount() { return this._nulls.numInvalid; }\n    public get numChildren() { return this.children.length; }\n\n    /**\n     * @returns The aggregate length (in bytes) of the values that have been written.\n     */\n    public get byteLength(): number {\n        let size = 0;\n        this._offsets && (size += this._offsets.byteLength);\n        this._values && (size += this._values.byteLength);\n        this._nulls && (size += this._nulls.byteLength);\n        this._typeIds && (size += this._typeIds.byteLength);\n        return this.children.reduce((size, child) => size + child.byteLength, size);\n    }\n\n    /**\n     * @returns The aggregate number of rows that have been reserved to write new values.\n     */\n    public get reservedLength(): number {\n        return this._nulls.reservedLength;\n    }\n\n    /**\n     * @returns The aggregate length (in bytes) that has been reserved to write new values.\n     */\n    public get reservedByteLength(): number {\n        let size = 0;\n        this._offsets && (size += this._offsets.reservedByteLength);\n        this._values && (size += this._values.reservedByteLength);\n        this._nulls && (size += this._nulls.reservedByteLength);\n        this._typeIds && (size += this._typeIds.reservedByteLength);\n        return this.children.reduce((size, child) => size + child.reservedByteLength, size);\n    }\n\n    protected _offsets!: DataBufferBuilder<Int32Array>;\n    public get valueOffsets() { return this._offsets ? this._offsets.buffer : null; }\n\n    protected _values!: BufferBuilder<T['TArray'], any>;\n    public get values() { return this._values ? this._values.buffer : null; }\n\n    protected _nulls: BitmapBufferBuilder;\n    public get nullBitmap() { return this._nulls ? this._nulls.buffer : null; }\n\n    protected _typeIds!: DataBufferBuilder<Int8Array>;\n    public get typeIds() { return this._typeIds ? this._typeIds.buffer : null; }\n\n    protected _isValid!: (value: T['TValue'] | TNull) => boolean;\n    protected _setValue!: (inst: Builder<T>, index: number, value: T['TValue']) => void;\n\n    /**\n     * Appends a value (or null) to this `Builder`.\n     * This is equivalent to `builder.set(builder.length, value)`.\n     * @param {T['TValue'] | TNull } value The value to append.\n     */\n    public append(value: T['TValue'] | TNull) { return this.set(this.length, value); }\n\n    /**\n     * Validates whether a value is valid (true), or null (false)\n     * @param {T['TValue'] | TNull } value The value to compare against null the value representations\n     */\n    public isValid(value: T['TValue'] | TNull): boolean { return this._isValid(value); }\n\n    /**\n     * Write a value (or null-value sentinel) at the supplied index.\n     * If the value matches one of the null-value representations, a 1-bit is\n     * written to the null `BitmapBufferBuilder`. Otherwise, a 0 is written to\n     * the null `BitmapBufferBuilder`, and the value is passed to\n     * `Builder.prototype.setValue()`.\n     * @param {number} index The index of the value to write.\n     * @param {T['TValue'] | TNull } value The value to write at the supplied index.\n     * @returns {this} The updated `Builder` instance.\n     */\n    public set(index: number, value: T['TValue'] | TNull) {\n        if (this.setValid(index, this.isValid(value))) {\n            this.setValue(index, value);\n        }\n        return this;\n    }\n\n    /**\n     * Write a value to the underlying buffers at the supplied index, bypassing\n     * the null-value check. This is a low-level method that\n     * @param {number} index\n     * @param {T['TValue'] | TNull } value\n     */\n    public setValue(index: number, value: T['TValue']) { this._setValue(this, index, value); }\n    public setValid(index: number, valid: boolean) {\n        this.length = this._nulls.set(index, +valid).length;\n        return valid;\n    }\n\n    // @ts-ignore\n    public addChild(child: Builder, name = `${this.numChildren}`) {\n        throw new Error(`Cannot append children to non-nested type \"${this.type}\"`);\n    }\n\n    /**\n     * Retrieve the child `Builder` at the supplied `index`, or null if no child\n     * exists at that index.\n     * @param {number} index The index of the child `Builder` to retrieve.\n     * @returns {Builder | null} The child Builder at the supplied index or null.\n     */\n    public getChildAt<R extends DataType = any>(index: number): Builder<R> | null {\n        return this.children[index] || null;\n    }\n\n    /**\n     * Commit all the values that have been written to their underlying\n     * ArrayBuffers, including any child Builders if applicable, and reset\n     * the internal `Builder` state.\n     * @returns A `Data<T>` of the buffers and childData representing the values written.\n     */\n    public flush() {\n\n        const buffers: any = [];\n        const values =  this._values;\n        const offsets =  this._offsets;\n        const typeIds =  this._typeIds;\n        const { length, nullCount } = this;\n\n        if (typeIds) { /* Unions */\n            buffers[BufferType.TYPE] = typeIds.flush(length);\n            // DenseUnions\n            offsets && (buffers[BufferType.OFFSET] = offsets.flush(length));\n        } else if (offsets) { /* Variable-width primitives (Binary, Utf8) and Lists */\n            // Binary, Utf8\n            values && (buffers[BufferType.DATA] = values.flush(offsets.last()));\n            buffers[BufferType.OFFSET] = offsets.flush(length);\n        } else if (values) { /* Fixed-width primitives (Int, Float, Decimal, Time, Timestamp, and Interval) */\n            buffers[BufferType.DATA] = values.flush(length);\n        }\n\n        nullCount > 0 && (buffers[BufferType.VALIDITY] = this._nulls.flush(length));\n\n        const data = Data.new<T>(\n            this.type, 0, length, nullCount, buffers as Buffers<T>,\n            this.children.map((child) => child.flush())) as Data<T>;\n\n        this.clear();\n\n        return data;\n    }\n\n    /**\n     * Finalize this `Builder`, and child builders if applicable.\n     * @returns {this} The finalized `Builder` instance.\n     */\n    public finish() {\n        this.finished = true;\n        this.children.forEach((child) => child.finish());\n        return this;\n    }\n\n    /**\n     * Clear this Builder's internal state, including child Builders if applicable, and reset the length to 0.\n     * @returns {this} The cleared `Builder` instance.\n     */\n    public clear() {\n        this.length = 0;\n        this._offsets && (this._offsets.clear());\n        this._values && (this._values.clear());\n        this._nulls && (this._nulls.clear());\n        this._typeIds && (this._typeIds.clear());\n        this.children.forEach((child) => child.clear());\n        return this;\n    }\n}\n\n(Builder.prototype as any).length = 1;\n(Builder.prototype as any).stride = 1;\n(Builder.prototype as any).children = null;\n(Builder.prototype as any).finished = false;\n(Builder.prototype as any).nullValues = null;\n(Builder.prototype as any)._isValid = () => true;\n\n/** @ignore */\nexport abstract class FixedWidthBuilder<T extends Int | Float | FixedSizeBinary | Date_ | Timestamp | Time | Decimal | Interval = any, TNull = any> extends Builder<T, TNull> {\n    constructor(opts: BuilderOptions<T, TNull>) {\n        super(opts);\n        this._values = new DataBufferBuilder(new this.ArrayType(0), this.stride);\n    }\n    public setValue(index: number, value: T['TValue']) {\n        const values = this._values;\n        values.reserve(index - values.length + 1);\n        return super.setValue(index, value);\n    }\n}\n\n/** @ignore */\nexport abstract class VariableWidthBuilder<T extends Binary | Utf8 | List | Map_, TNull = any> extends Builder<T, TNull> {\n    protected _pendingLength = 0;\n    protected _offsets: OffsetsBufferBuilder;\n    protected _pending: Map<number, any> | undefined;\n    constructor(opts: BuilderOptions<T, TNull>) {\n        super(opts);\n        this._offsets = new OffsetsBufferBuilder();\n    }\n    public setValue(index: number, value: T['TValue']) {\n        const pending = this._pending || (this._pending = new Map());\n        const current = pending.get(index);\n        current && (this._pendingLength -= current.length);\n        this._pendingLength += value.length;\n        pending.set(index, value);\n    }\n    public setValid(index: number, isValid: boolean) {\n        if (!super.setValid(index, isValid)) {\n            (this._pending || (this._pending = new Map())).set(index, undefined);\n            return false;\n        }\n        return true;\n    }\n    public clear() {\n        this._pendingLength = 0;\n        this._pending = undefined;\n        return super.clear();\n    }\n    public flush() {\n        this._flush();\n        return super.flush();\n    }\n    public finish() {\n        this._flush();\n        return super.finish();\n    }\n    protected _flush() {\n        const pending = this._pending;\n        const pendingLength = this._pendingLength;\n        this._pendingLength = 0;\n        this._pending = undefined;\n        if (pending && pending.size > 0) {\n            this._flushPending(pending, pendingLength);\n        }\n        return this;\n    }\n    protected abstract _flushPending(pending: Map<number, any>, pendingLength: number): void;\n}\n\n/** @ignore */\ntype ThroughIterable<T extends DataType = any, TNull = any> = (source: Iterable<T['TValue'] | TNull>) => IterableIterator<V<T>>;\n\n/** @ignore */\nfunction throughIterable<T extends DataType = any, TNull = any>(options: IterableBuilderOptions<T, TNull>) {\n    const { ['queueingStrategy']: queueingStrategy = 'count' } = options;\n    const { ['highWaterMark']: highWaterMark = queueingStrategy !== 'bytes' ? 1000 : 2 ** 14 } = options;\n    const sizeProperty: 'length' | 'byteLength' = queueingStrategy !== 'bytes' ? 'length' : 'byteLength';\n    return function*(source: Iterable<T['TValue'] | TNull>) {\n        let numChunks = 0;\n        const builder = Builder.new(options);\n        for (const value of source) {\n            if (builder.append(value)[sizeProperty] >= highWaterMark) {\n                ++numChunks && (yield builder.toVector());\n            }\n        }\n        if (builder.finish().length > 0 || numChunks === 0) {\n            yield builder.toVector();\n        }\n    } as ThroughIterable<T, TNull>;\n}\n\n/** @ignore */\ntype ThroughAsyncIterable<T extends DataType = any, TNull = any> = (source: Iterable<T['TValue'] | TNull> | AsyncIterable<T['TValue'] | TNull>) => AsyncIterableIterator<V<T>>;\n\n/** @ignore */\nfunction throughAsyncIterable<T extends DataType = any, TNull = any>(options: IterableBuilderOptions<T, TNull>) {\n    const { ['queueingStrategy']: queueingStrategy = 'count' } = options;\n    const { ['highWaterMark']: highWaterMark = queueingStrategy !== 'bytes' ? 1000 : 2 ** 14 } = options;\n    const sizeProperty: 'length' | 'byteLength' = queueingStrategy !== 'bytes' ? 'length' : 'byteLength';\n    return async function* (source: Iterable<T['TValue'] | TNull> | AsyncIterable<T['TValue'] | TNull>) {\n        let numChunks = 0;\n        const builder = Builder.new(options);\n        for await (const value of source) {\n            if (builder.append(value)[sizeProperty] >= highWaterMark) {\n                ++numChunks && (yield builder.toVector());\n            }\n        }\n        if (builder.finish().length > 0 || numChunks === 0) {\n            yield builder.toVector();\n        }\n    } as ThroughAsyncIterable<T, TNull>;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Bool } from '../type';\nimport { BitmapBufferBuilder } from './buffer';\nimport { Builder, BuilderOptions } from '../builder';\n\n/** @ignore */\nexport class BoolBuilder<TNull = any> extends Builder<Bool, TNull> {\n    constructor(options: BuilderOptions<Bool, TNull>) {\n        super(options);\n        this._values = new BitmapBufferBuilder();\n    }\n    public setValue(index: number, value: boolean) {\n        this._values.set(index, +value);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Null } from '../type';\nimport { Builder } from '../builder';\n\n/** @ignore */\nexport class NullBuilder<TNull = any> extends Builder<Null, TNull> {\n    // @ts-ignore\n    public setValue(index: number, value: null) {}\n    public setValid(index: number, valid: boolean) {\n        this.length = Math.max(index + 1, this.length);\n        return valid;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { FixedWidthBuilder } from '../builder';\nimport { Date_, DateDay, DateMillisecond } from '../type';\n\n/** @ignore */\nexport class DateBuilder<T extends Date_ = Date_, TNull = any> extends FixedWidthBuilder<T, TNull> {}\n/** @ignore */\nexport class DateDayBuilder<TNull = any> extends DateBuilder<DateDay, TNull> {}\n/** @ignore */\nexport class DateMillisecondBuilder<TNull = any> extends DateBuilder<DateMillisecond, TNull> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Decimal } from '../type';\nimport { FixedWidthBuilder } from '../builder';\n\n/** @ignore */\nexport class DecimalBuilder<TNull = any> extends FixedWidthBuilder<Decimal, TNull> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { IntBuilder } from './int';\nimport { Dictionary, DataType } from '../type';\nimport { Builder, BuilderOptions } from '../builder';\n\ntype DictionaryHashFunction = (x: any) => string | number;\n\nexport interface DictionaryBuilderOptions<T extends DataType = any, TNull = any> extends BuilderOptions<T, TNull> {\n    dictionaryHashFunction?: DictionaryHashFunction;\n}\n\n/** @ignore */\nexport class DictionaryBuilder<T extends Dictionary, TNull = any> extends Builder<T, TNull> {\n\n    protected _dictionaryOffset: number;\n    protected _dictionary?: Vector<T['dictionary']>;\n    protected _keysToIndices: { [key: string]: number };\n    public readonly indices: IntBuilder<T['indices']>;\n    public readonly dictionary: Builder<T['dictionary']>;\n\n    constructor({ 'type': type, 'nullValues': nulls, 'dictionaryHashFunction': hashFn }: DictionaryBuilderOptions<T, TNull>) {\n        super({ type: new Dictionary(type.dictionary, type.indices, type.id, type.isOrdered) as T });\n        this._nulls = <any> null;\n        this._dictionaryOffset = 0;\n        this._keysToIndices = Object.create(null);\n        this.indices = Builder.new({ 'type': this.type.indices, 'nullValues': nulls }) as IntBuilder<T['indices']>;\n        this.dictionary = Builder.new({ 'type': this.type.dictionary, 'nullValues': null }) as Builder<T['dictionary']>;\n        if (typeof hashFn === 'function') {\n            this.valueToKey = hashFn;\n        }\n    }\n\n    public get values() { return this.indices.values; }\n    public get nullCount() { return this.indices.nullCount; }\n    public get nullBitmap() { return this.indices.nullBitmap; }\n    public get byteLength() { return this.indices.byteLength + this.dictionary.byteLength; }\n    public get reservedLength() { return this.indices.reservedLength + this.dictionary.reservedLength; }\n    public get reservedByteLength() { return this.indices.reservedByteLength + this.dictionary.reservedByteLength; }\n    public isValid(value: T['TValue'] | TNull) { return this.indices.isValid(value); }\n    public setValid(index: number, valid: boolean) {\n        const indices = this.indices;\n        valid = indices.setValid(index, valid);\n        this.length = indices.length;\n        return valid;\n    }\n    public setValue(index: number, value: T['TValue']) {\n        const keysToIndices = this._keysToIndices;\n        const key = this.valueToKey(value);\n        let idx = keysToIndices[key];\n        if (idx === undefined) {\n            keysToIndices[key] = idx = this._dictionaryOffset + this.dictionary.append(value).length - 1;\n        }\n        return this.indices.setValue(index, idx);\n    }\n    public flush() {\n        const type = this.type;\n        const prev = this._dictionary;\n        const curr = this.dictionary.toVector();\n        const data = this.indices.flush().clone(type);\n        data.dictionary = prev ? prev.concat(curr) : curr;\n        this.finished || (this._dictionaryOffset += curr.length);\n        this._dictionary = data.dictionary as Vector<T['dictionary']>;\n        this.clear();\n        return data;\n    }\n    public finish() {\n        this.indices.finish();\n        this.dictionary.finish();\n        this._dictionaryOffset = 0;\n        this._keysToIndices = Object.create(null);\n        return super.finish();\n    }\n    public clear() {\n        this.indices.clear();\n        this.dictionary.clear();\n        return super.clear();\n    }\n    public valueToKey(val: any): string | number {\n        return typeof val === 'string' ? val : `${val}`;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { FixedSizeBinary } from '../type';\nimport { FixedWidthBuilder } from '../builder';\n\n/** @ignore */\nexport class FixedSizeBinaryBuilder<TNull = any> extends FixedWidthBuilder<FixedSizeBinary, TNull> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nconst f64 = new Float64Array(1);\nconst u32 = new Uint32Array(f64.buffer);\n\n/**\n * Convert uint16 (logically a float16) to a JS float64. Inspired by numpy's `npy_half_to_double`:\n * https://github.com/numpy/numpy/blob/5a5987291dc95376bb098be8d8e5391e89e77a2c/numpy/core/src/npymath/halffloat.c#L29\n * @param h {number} the uint16 to convert\n * @private\n * @ignore\n */\nexport function uint16ToFloat64(h: number) {\n    const expo = (h & 0x7C00) >> 10;\n    const sigf = (h & 0x03FF) / 1024;\n    const sign = (-1) ** ((h & 0x8000) >> 15);\n    switch (expo) {\n        case 0x1F: return sign * (sigf ? NaN : 1 / 0);\n        case 0x00: return sign * (sigf ? 6.103515625e-5 * sigf : 0);\n    }\n    return sign * (2 ** (expo - 15)) * (1 + sigf);\n}\n\n/**\n * Convert a float64 to uint16 (assuming the float64 is logically a float16). Inspired by numpy's `npy_double_to_half`:\n * https://github.com/numpy/numpy/blob/5a5987291dc95376bb098be8d8e5391e89e77a2c/numpy/core/src/npymath/halffloat.c#L43\n * @param d {number} The float64 to convert\n * @private\n * @ignore\n */\nexport function float64ToUint16(d: number) {\n\n    if (d !== d) { return 0x7E00; } // NaN\n\n    f64[0] = d;\n\n    // Magic numbers:\n    // 0x80000000 = 10000000 00000000 00000000 00000000 -- masks the 32nd bit\n    // 0x7ff00000 = 01111111 11110000 00000000 00000000 -- masks the 21st-31st bits\n    // 0x000fffff = 00000000 00001111 11111111 11111111 -- masks the 1st-20th bit\n\n    const sign = (u32[1] & 0x80000000) >> 16 & 0xFFFF;\n    let expo = (u32[1] & 0x7ff00000), sigf = 0x0000;\n\n    if (expo >= 0x40f00000) {\n        //\n        // If exponent overflowed, the float16 is either NaN or Infinity.\n        // Rules to propagate the sign bit: mantissa > 0 ? NaN : +/-Infinity\n        //\n        // Magic numbers:\n        // 0x40F00000 = 01000000 11110000 00000000 00000000 -- 6-bit exponent overflow\n        // 0x7C000000 = 01111100 00000000 00000000 00000000 -- masks the 27th-31st bits\n        //\n        // returns:\n        // qNaN, aka 32256 decimal, 0x7E00 hex, or 01111110 00000000 binary\n        // sNaN, aka 32000 decimal, 0x7D00 hex, or 01111101 00000000 binary\n        // +inf, aka 31744 decimal, 0x7C00 hex, or 01111100 00000000 binary\n        // -inf, aka 64512 decimal, 0xFC00 hex, or 11111100 00000000 binary\n        //\n        // If mantissa is greater than 23 bits, set to +Infinity like numpy\n        if (u32[0] > 0) {\n            expo = 0x7C00;\n        } else {\n            expo = (expo & 0x7C000000) >> 16;\n            sigf = (u32[1] & 0x000fffff) >> 10;\n        }\n    } else if (expo <= 0x3f000000) {\n        //\n        // If exponent underflowed, the float is either signed zero or subnormal.\n        //\n        // Magic numbers:\n        // 0x3F000000 = 00111111 00000000 00000000 00000000 -- 6-bit exponent underflow\n        //\n        sigf = 0x100000 + (u32[1] & 0x000fffff);\n        sigf = 0x100000 + (sigf << ((expo >> 20) - 998)) >> 21;\n        expo = 0;\n    } else {\n        //\n        // No overflow or underflow, rebase the exponent and round the mantissa\n        // Magic numbers:\n        // 0x200 = 00000010 00000000 -- masks off the 10th bit\n        //\n\n        // Ensure the first mantissa bit (the 10th one) is 1 and round\n        expo = (expo - 0x3f000000) >> 10;\n        sigf = ((u32[1] & 0x000fffff) + 0x200) >> 10;\n    }\n\n    return sign | expo | sigf & 0xFFFF;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { float64ToUint16 } from '../util/math';\nimport { FixedWidthBuilder } from '../builder';\nimport { Float, Float16, Float32, Float64 } from '../type';\n\n/** @ignore */\nexport class FloatBuilder<T extends Float = Float, TNull = any> extends FixedWidthBuilder<T, TNull> {}\n\n/** @ignore */\nexport class Float16Builder<TNull = any> extends FloatBuilder<Float16, TNull> {\n    public setValue(index: number, value: number) {\n        // convert JS float64 to a uint16\n        this._values.set(index, float64ToUint16(value));\n    }\n}\n\n/** @ignore */\nexport class Float32Builder<TNull = any> extends FloatBuilder<Float32, TNull> {\n    public setValue(index: number, value: number) {\n        this._values.set(index, value);\n    }\n}\n\n/** @ignore */\nexport class Float64Builder<TNull = any> extends FloatBuilder<Float64, TNull> {\n    public setValue(index: number, value: number) {\n        this._values.set(index, value);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { ArrayBufferViewInput, toArrayBufferView } from './buffer';\nimport { TypedArray, TypedArrayConstructor } from '../interfaces';\nimport { BigIntArray, BigIntArrayConstructor } from '../interfaces';\nimport { BigIntAvailable, BigInt64Array, BigUint64Array } from './compat';\n\n/** @ignore */\nexport const isArrowBigNumSymbol = Symbol.for('isArrowBigNum');\n\n/** @ignore */ type BigNumArray = IntArray | UintArray;\n/** @ignore */ type IntArray = Int8Array | Int16Array | Int32Array;\n/** @ignore */ type UintArray = Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray;\n\n/** @ignore */\nfunction BigNum(this: any, x: any, ...xs: any) {\n    if (xs.length === 0) {\n        return Object.setPrototypeOf(toArrayBufferView(this['TypedArray'], x), this.constructor.prototype);\n    }\n    return Object.setPrototypeOf(new this['TypedArray'](x, ...xs), this.constructor.prototype);\n}\n\nBigNum.prototype[isArrowBigNumSymbol] = true;\nBigNum.prototype.toJSON = function<T extends BN<BigNumArray>>(this: T) { return `\"${bignumToString(this)}\"`; };\nBigNum.prototype.valueOf = function<T extends BN<BigNumArray>>(this: T) { return bignumToNumber(this); };\nBigNum.prototype.toString = function<T extends BN<BigNumArray>>(this: T) { return bignumToString(this); };\nBigNum.prototype[Symbol.toPrimitive] = function<T extends BN<BigNumArray>>(this: T, hint: 'string' | 'number' | 'default' = 'default') {\n    switch (hint) {\n        case 'number': return bignumToNumber(this);\n        case 'string': return bignumToString(this);\n        case 'default': return bignumToBigInt(this);\n    }\n    // @ts-ignore\n    return bignumToString(this);\n};\n\n/** @ignore */\ntype TypedArrayConstructorArgs =\n    [number | void] |\n    [Iterable<number> | Iterable<bigint>] |\n    [ArrayBufferLike, number | void, number | void] ;\n\n/** @ignore */\nfunction SignedBigNum(this: any, ...args: TypedArrayConstructorArgs) { return BigNum.apply(this, args); }\n/** @ignore */\nfunction UnsignedBigNum(this: any, ...args: TypedArrayConstructorArgs) { return BigNum.apply(this, args); }\n/** @ignore */\nfunction DecimalBigNum(this: any, ...args: TypedArrayConstructorArgs) { return BigNum.apply(this, args); }\n\nObject.setPrototypeOf(SignedBigNum.prototype,   Object.create(Int32Array.prototype));\nObject.setPrototypeOf(UnsignedBigNum.prototype, Object.create(Uint32Array.prototype));\nObject.setPrototypeOf(DecimalBigNum.prototype,  Object.create(Uint32Array.prototype));\nObject.assign(SignedBigNum.prototype,   BigNum.prototype, { 'constructor': SignedBigNum,   'signed': true,  'TypedArray': Int32Array,  'BigIntArray': BigInt64Array  });\nObject.assign(UnsignedBigNum.prototype, BigNum.prototype, { 'constructor': UnsignedBigNum, 'signed': false, 'TypedArray': Uint32Array, 'BigIntArray': BigUint64Array });\nObject.assign(DecimalBigNum.prototype,  BigNum.prototype, { 'constructor': DecimalBigNum,  'signed': true,  'TypedArray': Uint32Array, 'BigIntArray': BigUint64Array });\n\n/** @ignore */\nfunction bignumToNumber<T extends BN<BigNumArray>>(bn: T) {\n    const { buffer, byteOffset, length, 'signed': signed } = bn;\n    const words = new Int32Array(buffer, byteOffset, length);\n    let number = 0, i = 0;\n    const n = words.length;\n    let hi, lo;\n    while (i < n) {\n        lo = words[i++];\n        hi = words[i++];\n        signed || (hi = hi >>> 0);\n        number += (lo >>> 0) + (hi * (i ** 32));\n    }\n    return number;\n}\n\n/** @ignore */\nexport let bignumToString: { <T extends BN<BigNumArray>>(a: T): string };\n/** @ignore */\nexport let bignumToBigInt: { <T extends BN<BigNumArray>>(a: T): bigint };\n\nif (!BigIntAvailable) {\n    bignumToString = decimalToString;\n    bignumToBigInt = <any> bignumToString;\n} else {\n    bignumToBigInt = (<T extends BN<BigNumArray>>(a: T) => a.byteLength === 8 ? new a['BigIntArray'](a.buffer, a.byteOffset, 1)[0] : <any>decimalToString(a));\n    bignumToString = (<T extends BN<BigNumArray>>(a: T) => a.byteLength === 8 ? `${new a['BigIntArray'](a.buffer, a.byteOffset, 1)[0]}` : decimalToString(a));\n}\n\n/** @ignore */\nfunction decimalToString<T extends BN<BigNumArray>>(a: T) {\n    let digits = '';\n    const base64 = new Uint32Array(2);\n    let base32 = new Uint16Array(a.buffer, a.byteOffset, a.byteLength / 2);\n    const checks = new Uint32Array((base32 = new Uint16Array(base32).reverse()).buffer);\n    let i = -1;\n    const n = base32.length - 1;\n    do {\n        for (base64[0] = base32[i = 0]; i < n;) {\n            base32[i++] = base64[1] = base64[0] / 10;\n            base64[0] = ((base64[0] - base64[1] * 10) << 16) + base32[i];\n        }\n        base32[i] = base64[1] = base64[0] / 10;\n        base64[0] = base64[0] - base64[1] * 10;\n        digits = `${base64[0]}${digits}`;\n    } while (checks[0] || checks[1] || checks[2] || checks[3]);\n    return digits ? digits : `0`;\n}\n\n/** @ignore */\nexport class BN<T extends BigNumArray> {\n    /** @nocollapse */\n    public static new<T extends BigNumArray>(num: T, isSigned?: boolean): (T & BN<T>) {\n        switch (isSigned) {\n            case true: return new (<any> SignedBigNum)(num) as (T & BN<T>);\n            case false: return new (<any> UnsignedBigNum)(num) as (T & BN<T>);\n        }\n        switch (num.constructor) {\n            case Int8Array:\n            case Int16Array:\n            case Int32Array:\n            case BigInt64Array:\n                return new (<any> SignedBigNum)(num) as (T & BN<T>);\n        }\n        if (num.byteLength === 16) {\n            return new (<any> DecimalBigNum)(num) as (T & BN<T>);\n        }\n        return new (<any> UnsignedBigNum)(num) as (T & BN<T>);\n    }\n    /** @nocollapse */\n    public static signed<T extends IntArray>(num: T): (T & BN<T>) {\n        return new (<any> SignedBigNum)(num) as (T & BN<T>);\n    }\n    /** @nocollapse */\n    public static unsigned<T extends UintArray>(num: T): (T & BN<T>) {\n        return new (<any> UnsignedBigNum)(num) as (T & BN<T>);\n    }\n    /** @nocollapse */\n    public static decimal<T extends UintArray>(num: T): (T & BN<T>) {\n        return new (<any> DecimalBigNum)(num) as (T & BN<T>);\n    }\n    constructor(num: T, isSigned?: boolean) {\n        return BN.new(num, isSigned) as any;\n    }\n}\n\n/** @ignore */\nexport interface BN<T extends BigNumArray> extends TypedArrayLike<T> {\n\n    new<T extends ArrayBufferViewInput>(buffer: T, signed?: boolean): T;\n\n    readonly signed: boolean;\n    readonly TypedArray: TypedArrayConstructor<TypedArray>;\n    readonly BigIntArray: BigIntArrayConstructor<BigIntArray>;\n\n    [Symbol.toStringTag]:\n        'Int8Array'         |\n        'Int16Array'        |\n        'Int32Array'        |\n        'Uint8Array'        |\n        'Uint16Array'       |\n        'Uint32Array'       |\n        'Uint8ClampedArray';\n\n    /**\n     * Convert the bytes to their (positive) decimal representation for printing\n     */\n    toString(): string;\n    /**\n     * Down-convert the bytes to a 53-bit precision integer. Invoked by JS for\n     * arithmetic operators, like `+`. Easy (and unsafe) way to convert BN to\n     * number via `+bn_inst`\n     */\n    valueOf(): number;\n    /**\n     * Return the JSON representation of the bytes. Must be wrapped in double-quotes,\n     * so it's compatible with JSON.stringify().\n     */\n    toJSON(): string;\n    [Symbol.toPrimitive](hint?: any): number | string | bigint;\n}\n\n/** @ignore */\ninterface TypedArrayLike<T extends BigNumArray> {\n\n    readonly length: number;\n    readonly buffer: ArrayBuffer;\n    readonly byteLength: number;\n    readonly byteOffset: number;\n    readonly BYTES_PER_ELEMENT: number;\n\n    includes(searchElement: number, fromIndex?: number | undefined): boolean;\n    copyWithin(target: number, start: number, end?: number | undefined): this;\n    every(callbackfn: (value: number, index: number, array: T) => boolean, thisArg?: any): boolean;\n    fill(value: number, start?: number | undefined, end?: number | undefined): this;\n    filter(callbackfn: (value: number, index: number, array: T) => boolean, thisArg?: any): T;\n    find(predicate: (value: number, index: number, obj: T) => boolean, thisArg?: any): number | undefined;\n    findIndex(predicate: (value: number, index: number, obj: T) => boolean, thisArg?: any): number;\n    forEach(callbackfn: (value: number, index: number, array: T) => void, thisArg?: any): void;\n    indexOf(searchElement: number, fromIndex?: number | undefined): number;\n    join(separator?: string | undefined): string;\n    lastIndexOf(searchElement: number, fromIndex?: number | undefined): number;\n    map(callbackfn: (value: number, index: number, array: T) => number, thisArg?: any): T;\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: T) => number): number;\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: T) => number, initialValue: number): number;\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: T) => U, initialValue: U): U;\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: T) => number): number;\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: T) => number, initialValue: number): number;\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: T) => U, initialValue: U): U;\n    reverse(): T;\n    set(array: ArrayLike<number>, offset?: number | undefined): void;\n    slice(start?: number | undefined, end?: number | undefined): T;\n    some(callbackfn: (value: number, index: number, array: T) => boolean, thisArg?: any): boolean;\n    sort(compareFn?: ((a: number, b: number) => number) | undefined): this;\n    subarray(begin: number, end?: number | undefined): T;\n    toLocaleString(): string;\n    entries(): IterableIterator<[number, number]>;\n    keys(): IterableIterator<number>;\n    values(): IterableIterator<number>;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { bignumToBigInt } from '../util/bn';\nimport { WideBufferBuilder } from './buffer';\nimport { BigInt64Array } from '../util/compat';\nimport { FixedWidthBuilder, BuilderOptions } from '../builder';\nimport { Int, Int8, Int16, Int32, Int64, Uint8, Uint16, Uint32, Uint64 } from '../type';\n\n/** @ignore */\nexport class IntBuilder<T extends Int = Int, TNull = any> extends FixedWidthBuilder<T, TNull> {\n    public setValue(index: number, value: T['TValue']) {\n        this._values.set(index, value);\n    }\n}\n\n/** @ignore */\nexport class Int8Builder<TNull = any> extends IntBuilder<Int8, TNull> {}\n/** @ignore */\nexport class Int16Builder<TNull = any> extends IntBuilder<Int16, TNull> {}\n/** @ignore */\nexport class Int32Builder<TNull = any> extends IntBuilder<Int32, TNull> {}\n/** @ignore */\nexport class Int64Builder<TNull = any> extends IntBuilder<Int64, TNull> {\n    protected _values: WideBufferBuilder<Int32Array, BigInt64Array>;\n    constructor(options: BuilderOptions<Int64, TNull>) {\n        if (options['nullValues']) {\n            options['nullValues'] = (options['nullValues'] as TNull[]).map(toBigInt);\n        }\n        super(options);\n        this._values = new WideBufferBuilder(new Int32Array(0), 2);\n    }\n    public get values64() { return this._values.buffer64; }\n    public isValid(value: Int32Array | bigint | TNull) { return super.isValid(toBigInt(value)); }\n}\n\n/** @ignore */\nexport class Uint8Builder<TNull = any> extends IntBuilder<Uint8, TNull> {}\n/** @ignore */\nexport class Uint16Builder<TNull = any> extends IntBuilder<Uint16, TNull> {}\n/** @ignore */\nexport class Uint32Builder<TNull = any> extends IntBuilder<Uint32, TNull> {}\n/** @ignore */\nexport class Uint64Builder<TNull = any> extends IntBuilder<Uint64, TNull> {\n    protected _values: WideBufferBuilder<Uint32Array, BigUint64Array>;\n    constructor(options: BuilderOptions<Uint64, TNull>) {\n        if (options['nullValues']) {\n            options['nullValues'] = (options['nullValues'] as TNull[]).map(toBigInt);\n        }\n        super(options);\n        this._values = new WideBufferBuilder(new Uint32Array(0), 2);\n    }\n    public get values64() { return this._values.buffer64; }\n    public isValid(value: Uint32Array | bigint | TNull) { return super.isValid(toBigInt(value)); }\n}\n\nconst toBigInt = ((memo: any) => (value: any) => {\n    if (ArrayBuffer.isView(value)) {\n        memo.buffer = value.buffer;\n        memo.byteOffset = value.byteOffset;\n        memo.byteLength = value.byteLength;\n        value = bignumToBigInt(memo);\n        memo.buffer = null;\n    }\n    return value;\n})({ 'BigIntArray': BigInt64Array });\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { FixedWidthBuilder } from '../builder';\nimport { Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond } from '../type';\n\n/** @ignore */\nexport class TimeBuilder<T extends Time = Time, TNull = any> extends FixedWidthBuilder<T, TNull> {}\n/** @ignore */\nexport class TimeSecondBuilder<TNull = any> extends TimeBuilder<TimeSecond, TNull> {}\n/** @ignore */\nexport class TimeMillisecondBuilder<TNull = any> extends TimeBuilder<TimeMillisecond, TNull> {}\n/** @ignore */\nexport class TimeMicrosecondBuilder<TNull = any> extends TimeBuilder<TimeMicrosecond, TNull> {}\n/** @ignore */\nexport class TimeNanosecondBuilder<TNull = any> extends TimeBuilder<TimeNanosecond, TNull> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { FixedWidthBuilder } from '../builder';\nimport { Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond } from '../type';\n\n/** @ignore */\nexport class TimestampBuilder<T extends Timestamp = Timestamp, TNull = any> extends FixedWidthBuilder<T, TNull> {}\n/** @ignore */\nexport class TimestampSecondBuilder<TNull = any> extends TimestampBuilder<TimestampSecond, TNull> {}\n/** @ignore */\nexport class TimestampMillisecondBuilder<TNull = any> extends TimestampBuilder<TimestampMillisecond, TNull> {}\n/** @ignore */\nexport class TimestampMicrosecondBuilder<TNull = any> extends TimestampBuilder<TimestampMicrosecond, TNull> {}\n/** @ignore */\nexport class TimestampNanosecondBuilder<TNull = any> extends TimestampBuilder<TimestampNanosecond, TNull> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { FixedWidthBuilder } from '../builder';\nimport { Interval, IntervalDayTime, IntervalYearMonth } from '../type';\n\n/** @ignore */\nexport class IntervalBuilder<T extends Interval = Interval, TNull = any> extends FixedWidthBuilder<T, TNull> {}\n/** @ignore */\nexport class IntervalDayTimeBuilder<TNull = any> extends IntervalBuilder<IntervalDayTime, TNull> {}\n/** @ignore */\nexport class IntervalYearMonthBuilder<TNull = any> extends IntervalBuilder<IntervalYearMonth, TNull> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Binary } from '../type';\nimport { toUint8Array } from '../util/buffer';\nimport { BufferBuilder } from './buffer';\nimport { VariableWidthBuilder, BuilderOptions } from '../builder';\n\n/** @ignore */\nexport class BinaryBuilder<TNull = any> extends VariableWidthBuilder<Binary, TNull> {\n    constructor(opts: BuilderOptions<Binary, TNull>) {\n        super(opts);\n        this._values = new BufferBuilder(new Uint8Array(0));\n    }\n    public get byteLength(): number {\n        let size = this._pendingLength + (this.length * 4);\n        this._offsets && (size += this._offsets.byteLength);\n        this._values && (size += this._values.byteLength);\n        this._nulls && (size += this._nulls.byteLength);\n        return size;\n    }\n    public setValue(index: number, value: Uint8Array) {\n        return super.setValue(index, toUint8Array(value));\n    }\n    protected _flushPending(pending: Map<number, Uint8Array | undefined>, pendingLength: number) {\n        const offsets = this._offsets;\n        const data = this._values.reserve(pendingLength).buffer;\n        let index = 0, length = 0, offset = 0, value: Uint8Array | undefined;\n        for ([index, value] of pending) {\n            if (value === undefined) {\n                offsets.set(index, 0);\n            } else {\n                length = value.length;\n                data.set(value, offset);\n                offsets.set(index, length);\n                offset += length;\n            }\n        }\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Utf8 } from '../type';\nimport { encodeUtf8 } from '../util/utf8';\nimport { BinaryBuilder } from './binary';\nimport { BufferBuilder } from './buffer';\nimport { VariableWidthBuilder, BuilderOptions } from '../builder';\n\n/** @ignore */\nexport class Utf8Builder<TNull = any> extends VariableWidthBuilder<Utf8, TNull> {\n    constructor(opts: BuilderOptions<Utf8, TNull>) {\n        super(opts);\n        this._values = new BufferBuilder(new Uint8Array(0));\n    }\n    public get byteLength(): number {\n        let size = this._pendingLength + (this.length * 4);\n        this._offsets && (size += this._offsets.byteLength);\n        this._values && (size += this._values.byteLength);\n        this._nulls && (size += this._nulls.byteLength);\n        return size;\n    }\n    public setValue(index: number, value: string) {\n        return super.setValue(index, encodeUtf8(value) as any);\n    }\n    // @ts-ignore\n    protected _flushPending(pending: Map<number, Uint8Array | undefined>, pendingLength: number): void {}\n}\n\n(Utf8Builder.prototype as any)._flushPending = (BinaryBuilder.prototype as any)._flushPending;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\n\n/** @ignore */\nexport class Run<T extends DataType = any, TNull = any> {\n    protected _values!: ArrayLike<T['TValue'] | TNull>;\n    public get length() { return this._values.length; }\n    public get(index: number) { return this._values[index]; }\n    public clear() { this._values = <any> null; return this; }\n    public bind(values: Vector<T> | ArrayLike<T['TValue'] | TNull>) {\n        if (values instanceof Vector) {\n            return values;\n        }\n        this._values = values;\n        return this as any;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { DataType } from './type';\n\nexport class Schema<T extends { [key: string]: DataType } = any> {\n\n    public readonly fields: Field<T[keyof T]>[];\n    public readonly metadata: Map<string, string>;\n    public readonly dictionaries: Map<number, DataType>;\n\n    constructor(fields: Field[] = [],\n                metadata?: Map<string, string> | null,\n                dictionaries?: Map<number, DataType> | null) {\n        this.fields = (fields || []) as Field<T[keyof T]>[];\n        this.metadata = metadata || new Map();\n        if (!dictionaries) {\n            dictionaries = generateDictionaryMap(fields);\n        }\n        this.dictionaries = dictionaries;\n    }\n    public get [Symbol.toStringTag]() { return 'Schema'; }\n    public toString() {\n        return `Schema<{ ${this.fields.map((f, i) => `${i}: ${f}`).join(', ')} }>`;\n    }\n\n    public select<K extends keyof T = any>(...columnNames: K[]) {\n        const names = columnNames.reduce((xs, x) => (xs[x] = true) && xs, Object.create(null));\n        return new Schema<{ [P in K]: T[P] }>(this.fields.filter((f) => names[f.name]), this.metadata);\n    }\n    public selectAt<K extends T[keyof T] = any>(...columnIndices: number[]) {\n        return new Schema<{ [key: string]: K }>(columnIndices.map((i) => this.fields[i]).filter(Boolean), this.metadata);\n    }\n\n    public assign<R extends { [key: string]: DataType } = any>(schema: Schema<R>): Schema<T & R>;\n    public assign<R extends { [key: string]: DataType } = any>(...fields: (Field<R[keyof R]> | Field<R[keyof R]>[])[]): Schema<T & R>;\n    public assign<R extends { [key: string]: DataType } = any>(...args: (Schema<R> | Field<R[keyof R]> | Field<R[keyof R]>[])[]) {\n\n        const other = (args[0] instanceof Schema\n            ? args[0] as Schema<R>\n            : Array.isArray(args[0])\n                ? new Schema<R>(<Field<R[keyof R]>[]> args[0])\n                : new Schema<R>(<Field<R[keyof R]>[]> args));\n\n        const curFields = [...this.fields] as Field[];\n        const metadata = mergeMaps(mergeMaps(new Map(), this.metadata), other.metadata);\n        const newFields = other.fields.filter((f2) => {\n            const i = curFields.findIndex((f) => f.name === f2.name);\n            return ~i ? (curFields[i] = f2.clone({\n                metadata: mergeMaps(mergeMaps(new Map(), curFields[i].metadata), f2.metadata)\n            })) && false : true;\n        }) as Field[];\n\n        const newDictionaries = generateDictionaryMap(newFields, new Map());\n\n        return new Schema<T & R>(\n            [...curFields, ...newFields], metadata,\n            new Map([...this.dictionaries, ...newDictionaries])\n        );\n    }\n}\n\nexport class Field<T extends DataType = any> {\n\n    public static new<T extends DataType = any>(props: { name: string | number; type: T; nullable?: boolean; metadata?: Map<string, string> | null }): Field<T>;\n    public static new<T extends DataType = any>(name: string | number | Field<T>, type: T, nullable?: boolean, metadata?: Map<string, string> | null): Field<T>;\n    /** @nocollapse */\n    public static new<T extends DataType = any>(...args: any[]) {\n        let [name, type, nullable, metadata] = args;\n        if (args[0] && typeof args[0] === 'object') {\n            ({ name } = args[0]);\n            (type === undefined) && (type = args[0].type);\n            (nullable === undefined) && (nullable = args[0].nullable);\n            (metadata === undefined) && (metadata = args[0].metadata);\n        }\n        return new Field<T>(`${name}`, type, nullable, metadata);\n    }\n\n    public readonly type: T;\n    public readonly name: string;\n    public readonly nullable: boolean;\n    public readonly metadata: Map<string, string>;\n\n    constructor(name: string, type: T, nullable = false, metadata?: Map<string, string> | null) {\n        this.name = name;\n        this.type = type;\n        this.nullable = nullable;\n        this.metadata = metadata || new Map();\n    }\n\n    public get typeId() { return this.type.typeId; }\n    public get [Symbol.toStringTag]() { return 'Field'; }\n    public toString() { return `${this.name}: ${this.type}`; }\n    public clone<R extends DataType = T>(props: { name?: string | number; type?: R; nullable?: boolean; metadata?: Map<string, string> | null }): Field<R>;\n    public clone<R extends DataType = T>(name?: string | number | Field<T>, type?: R, nullable?: boolean, metadata?: Map<string, string> | null): Field<R>;\n    public clone<R extends DataType = T>(...args: any[]) {\n        let [name, type, nullable, metadata] = args;\n        (!args[0] || typeof args[0] !== 'object')\n            ? ([name = this.name, type = this.type, nullable = this.nullable, metadata = this.metadata] = args)\n            : ({name = this.name, type = this.type, nullable = this.nullable, metadata = this.metadata} = args[0]);\n        return Field.new<R>(name, type, nullable, metadata);\n    }\n}\n\n/** @ignore */\nfunction mergeMaps<TKey, TVal>(m1?: Map<TKey, TVal> | null, m2?: Map<TKey, TVal> | null): Map<TKey, TVal> {\n    return new Map([...(m1 || new Map()), ...(m2 || new Map())]);\n}\n\n/** @ignore */\nfunction generateDictionaryMap(fields: Field[], dictionaries = new Map<number, DataType>()): Map<number, DataType> {\n\n    for (let i = -1, n = fields.length; ++i < n;) {\n        const field = fields[i];\n        const type = field.type;\n        if (DataType.isDictionary(type)) {\n            if (!dictionaries.has(type.id)) {\n                dictionaries.set(type.id, type.dictionary);\n            } else if (dictionaries.get(type.id) !== type.dictionary) {\n                throw new Error(`Cannot create Schema containing two different dictionaries with the same Id`);\n            }\n        }\n        if (type.children && type.children.length > 0) {\n            generateDictionaryMap(type.children, dictionaries);\n        }\n    }\n\n    return dictionaries;\n}\n\n// Add these here so they're picked up by the externs creator\n// in the build, and closure-compiler doesn't minify them away\n(Schema.prototype as any).fields = null;\n(Schema.prototype as any).metadata = null;\n(Schema.prototype as any).dictionaries = null;\n\n(Field.prototype as any).type = null;\n(Field.prototype as any).name = null;\n(Field.prototype as any).nullable = null;\n(Field.prototype as any).metadata = null;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Run } from './run';\nimport { Field } from '../schema';\nimport { DataType, List } from '../type';\nimport { OffsetsBufferBuilder } from './buffer';\nimport { Builder, BuilderOptions, VariableWidthBuilder } from '../builder';\n\n/** @ignore */\nexport class ListBuilder<T extends DataType = any, TNull = any> extends VariableWidthBuilder<List<T>, TNull> {\n    protected _run = new Run<T, TNull>();\n    protected _offsets: OffsetsBufferBuilder;\n    constructor(opts: BuilderOptions<List<T>, TNull>) {\n        super(opts);\n        this._offsets = new OffsetsBufferBuilder();\n    }\n    public addChild(child: Builder<T>, name = '0') {\n        if (this.numChildren > 0) {\n            throw new Error('ListBuilder can only have one child.');\n        }\n        this.children[this.numChildren] = child;\n        this.type = new List(new Field(name, child.type, true));\n        return this.numChildren - 1;\n    }\n    public clear() {\n        this._run.clear();\n        return super.clear();\n    }\n    protected _flushPending(pending: Map<number, T['TValue'] | undefined>) {\n        const run = this._run;\n        const offsets = this._offsets;\n        const setValue = this._setValue;\n        let index = 0, value: Uint8Array | undefined;\n        for ([index, value] of pending) {\n            if (value === undefined) {\n                offsets.set(index, 0);\n            } else {\n                offsets.set(index, value.length);\n                setValue(this, index, run.bind(value));\n            }\n        }\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Run } from './run';\nimport { Field } from '../schema';\nimport { Builder } from '../builder';\nimport { DataType, FixedSizeList } from '../type';\n\n/** @ignore */\nexport class FixedSizeListBuilder<T extends DataType = any, TNull = any> extends Builder<FixedSizeList<T>, TNull> {\n    protected _run = new Run<T, TNull>();\n    public setValue(index: number, value: T['TValue']) {\n        super.setValue(index, this._run.bind(value));\n    }\n    public addChild(child: Builder<T>, name = '0') {\n        if (this.numChildren > 0) {\n            throw new Error('FixedSizeListBuilder can only have one child.');\n        }\n        const childIndex = this.children.push(child);\n        this.type = new FixedSizeList(this.type.listSize, new Field(name, child.type, true));\n        return childIndex;\n    }\n    public clear() {\n        this._run.clear();\n        return super.clear();\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Field } from '../schema';\nimport { DataType, Map_, Struct } from '../type';\nimport { Builder, VariableWidthBuilder } from '../builder';\n\n/** @ignore */ type MapValue<K extends DataType = any, V extends DataType = any> = Map_<K, V>['TValue'];\n/** @ignore */ type MapValues<K extends DataType = any, V extends DataType = any> = Map<number, MapValue<K, V> | undefined>;\n/** @ignore */ type MapValueExt<K extends DataType = any, V extends DataType = any> = MapValue<K, V> | { [key: string]: V } | { [key: number]: V } ;\n\n/** @ignore */\nexport class MapBuilder<K extends DataType = any, V extends DataType = any, TNull = any> extends VariableWidthBuilder<Map_<K, V>, TNull> {\n\n    protected _pending: MapValues<K, V> | undefined;\n    public set(index: number, value: MapValueExt<K, V> | TNull) {\n        return super.set(index, value as MapValue<K, V> | TNull);\n    }\n\n    public setValue(index: number, value: MapValueExt<K, V>) {\n        value = value instanceof Map ? value : new Map(Object.entries(value));\n        const pending = this._pending || (this._pending = new Map() as MapValues<K, V>);\n        const current = pending.get(index);\n        current && (this._pendingLength -= current.size);\n        this._pendingLength += value.size;\n        pending.set(index, value);\n    }\n\n    public addChild(child: Builder<Struct<{ key: K; value: V }>>, name = `${this.numChildren}`) {\n        if (this.numChildren > 0) {\n            throw new Error('ListBuilder can only have one child.');\n        }\n        this.children[this.numChildren] = child;\n        this.type = new Map_<K, V>(new Field(name, child.type, true), this.type.keysSorted);\n        return this.numChildren - 1;\n    }\n\n    protected _flushPending(pending: MapValues<K, V>) {\n        const offsets = this._offsets;\n        const setValue = this._setValue;\n        pending.forEach((value, index) => {\n            if (value === undefined) {\n                offsets.set(index, 0);\n            } else {\n                offsets.set(index, value.size);\n                setValue(this, index, value);\n            }\n        });\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Field } from '../schema';\nimport { Builder } from '../builder';\nimport { DataType, Struct } from '../type';\n\n/** @ignore */\nexport class StructBuilder<T extends { [key: string]: DataType } = any, TNull = any> extends Builder<Struct<T>, TNull> {\n    public addChild(child: Builder, name = `${this.numChildren}`) {\n        const childIndex = this.children.push(child);\n        this.type = new Struct([...this.type.children, new Field(name, child.type, true)]);\n        return childIndex;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Field } from '../schema';\nimport { DataBufferBuilder } from './buffer';\nimport { Builder, BuilderOptions } from '../builder';\nimport { Union, SparseUnion, DenseUnion } from '../type';\n\nexport interface UnionBuilderOptions<T extends Union = any, TNull = any> extends BuilderOptions<T, TNull> {\n    valueToChildTypeId?: (builder: UnionBuilder<T, TNull>, value: any, offset: number) => number;\n}\n\n/** @ignore */\nexport abstract class UnionBuilder<T extends Union, TNull = any> extends Builder<T, TNull> {\n\n    protected _typeIds: DataBufferBuilder<Int8Array>;\n\n    constructor(options: UnionBuilderOptions<T, TNull>) {\n        super(options);\n        this._typeIds = new DataBufferBuilder(new Int8Array(0), 1);\n        if (typeof options['valueToChildTypeId'] === 'function') {\n            this._valueToChildTypeId = options['valueToChildTypeId'];\n        }\n    }\n\n    public get typeIdToChildIndex() { return this.type.typeIdToChildIndex; }\n\n    public append(value: T['TValue'] | TNull, childTypeId?: number) {\n        return this.set(this.length, value, childTypeId);\n    }\n\n    public set(index: number, value: T['TValue'] | TNull, childTypeId?: number) {\n        if (childTypeId === undefined) {\n            childTypeId = this._valueToChildTypeId(this, value, index);\n        }\n        if (this.setValid(index, this.isValid(value))) {\n            this.setValue(index, value, childTypeId);\n        }\n        return this;\n    }\n\n    public setValue(index: number, value: T['TValue'], childTypeId?: number) {\n        this._typeIds.set(index, childTypeId!);\n        super.setValue(index, value);\n    }\n\n    public addChild(child: Builder, name = `${this.children.length}`) {\n        const childTypeId = this.children.push(child);\n        const { type: { children, mode, typeIds } } = this;\n        const fields = [...children, new Field(name, child.type)];\n        this.type = <T> new Union(mode, [...typeIds, childTypeId], fields);\n        return childTypeId;\n    }\n\n    /** @ignore */\n    // @ts-ignore\n    protected _valueToChildTypeId(builder: UnionBuilder<T, TNull>, value: any, offset: number): number {\n        throw new Error(`Cannot map UnionBuilder value to child typeId. \\\nPass the \\`childTypeId\\` as the second argument to unionBuilder.append(), \\\nor supply a \\`valueToChildTypeId\\` function as part of the UnionBuilder constructor options.`);\n    }\n}\n\n/** @ignore */\nexport class SparseUnionBuilder<T extends SparseUnion, TNull = any> extends UnionBuilder<T, TNull> {}\n/** @ignore */\nexport class DenseUnionBuilder<T extends DenseUnion, TNull = any> extends UnionBuilder<T, TNull> {\n\n    protected _offsets: DataBufferBuilder<Int32Array>;\n\n    constructor(options: UnionBuilderOptions<T, TNull>) {\n        super(options);\n        this._offsets = new DataBufferBuilder(new Int32Array(0));\n    }\n\n    /** @ignore */\n    public setValue(index: number, value: T['TValue'], childTypeId?: number) {\n        const childIndex = this.type.typeIdToChildIndex[childTypeId!];\n        this._offsets.set(index, this.getChildAt(childIndex)!.length);\n        return super.setValue(index, value, childTypeId);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Vector } from './vector';\nimport { Type, Precision, DateUnit, TimeUnit, IntervalUnit, UnionMode } from './enum';\nimport { DataType, Float, Int, Date_, Interval, Time, Timestamp, Union, } from './type';\n\nexport abstract class Visitor {\n    public visitMany(nodes: any[], ...args: any[][]) {\n        return nodes.map((node, i) => this.visit(node, ...args.map((x) => x[i])));\n    }\n    public visit(...args: any[]) {\n        return this.getVisitFn(args[0], false).apply(this, args);\n    }\n    public getVisitFn(node: any, throwIfNotFound = true) {\n        return getVisitFn(this, node, throwIfNotFound);\n    }\n    public visitNull            (_node: any, ..._args: any[]): any { return null; }\n    public visitBool            (_node: any, ..._args: any[]): any { return null; }\n    public visitInt             (_node: any, ..._args: any[]): any { return null; }\n    public visitFloat           (_node: any, ..._args: any[]): any { return null; }\n    public visitUtf8            (_node: any, ..._args: any[]): any { return null; }\n    public visitBinary          (_node: any, ..._args: any[]): any { return null; }\n    public visitFixedSizeBinary (_node: any, ..._args: any[]): any { return null; }\n    public visitDate            (_node: any, ..._args: any[]): any { return null; }\n    public visitTimestamp       (_node: any, ..._args: any[]): any { return null; }\n    public visitTime            (_node: any, ..._args: any[]): any { return null; }\n    public visitDecimal         (_node: any, ..._args: any[]): any { return null; }\n    public visitList            (_node: any, ..._args: any[]): any { return null; }\n    public visitStruct          (_node: any, ..._args: any[]): any { return null; }\n    public visitUnion           (_node: any, ..._args: any[]): any { return null; }\n    public visitDictionary      (_node: any, ..._args: any[]): any { return null; }\n    public visitInterval        (_node: any, ..._args: any[]): any { return null; }\n    public visitFixedSizeList   (_node: any, ..._args: any[]): any { return null; }\n    public visitMap             (_node: any, ..._args: any[]): any { return null; }\n}\n\n/** @ignore */\nfunction getVisitFn<T extends DataType>(visitor: Visitor, node: any, throwIfNotFound = true) {\n    let fn: any = null;\n    let dtype: T['TType'] = Type.NONE;\n    if      (node instanceof Data    ) dtype = inferDType(node.type as T);\n    else if (node instanceof Vector  ) dtype = inferDType(node.type as T);\n    else if (node instanceof DataType) dtype = inferDType(node      as T);\n    else if (typeof (dtype = node) !== 'number') dtype = Type[node] as any as T['TType'];\n\n    switch (dtype) {\n        case Type.Null:                 fn = visitor.visitNull; break;\n        case Type.Bool:                 fn = visitor.visitBool; break;\n        case Type.Int:                  fn = visitor.visitInt; break;\n        case Type.Int8:                 fn = visitor.visitInt8 || visitor.visitInt; break;\n        case Type.Int16:                fn = visitor.visitInt16 || visitor.visitInt; break;\n        case Type.Int32:                fn = visitor.visitInt32 || visitor.visitInt; break;\n        case Type.Int64:                fn = visitor.visitInt64 || visitor.visitInt; break;\n        case Type.Uint8:                fn = visitor.visitUint8 || visitor.visitInt; break;\n        case Type.Uint16:               fn = visitor.visitUint16 || visitor.visitInt; break;\n        case Type.Uint32:               fn = visitor.visitUint32 || visitor.visitInt; break;\n        case Type.Uint64:               fn = visitor.visitUint64 || visitor.visitInt; break;\n        case Type.Float:                fn = visitor.visitFloat; break;\n        case Type.Float16:              fn = visitor.visitFloat16 || visitor.visitFloat; break;\n        case Type.Float32:              fn = visitor.visitFloat32 || visitor.visitFloat; break;\n        case Type.Float64:              fn = visitor.visitFloat64 || visitor.visitFloat; break;\n        case Type.Utf8:                 fn = visitor.visitUtf8; break;\n        case Type.Binary:               fn = visitor.visitBinary; break;\n        case Type.FixedSizeBinary:      fn = visitor.visitFixedSizeBinary; break;\n        case Type.Date:                 fn = visitor.visitDate; break;\n        case Type.DateDay:              fn = visitor.visitDateDay || visitor.visitDate; break;\n        case Type.DateMillisecond:      fn = visitor.visitDateMillisecond || visitor.visitDate; break;\n        case Type.Timestamp:            fn = visitor.visitTimestamp; break;\n        case Type.TimestampSecond:      fn = visitor.visitTimestampSecond || visitor.visitTimestamp; break;\n        case Type.TimestampMillisecond: fn = visitor.visitTimestampMillisecond || visitor.visitTimestamp; break;\n        case Type.TimestampMicrosecond: fn = visitor.visitTimestampMicrosecond || visitor.visitTimestamp; break;\n        case Type.TimestampNanosecond:  fn = visitor.visitTimestampNanosecond || visitor.visitTimestamp; break;\n        case Type.Time:                 fn = visitor.visitTime; break;\n        case Type.TimeSecond:           fn = visitor.visitTimeSecond || visitor.visitTime; break;\n        case Type.TimeMillisecond:      fn = visitor.visitTimeMillisecond || visitor.visitTime; break;\n        case Type.TimeMicrosecond:      fn = visitor.visitTimeMicrosecond || visitor.visitTime; break;\n        case Type.TimeNanosecond:       fn = visitor.visitTimeNanosecond || visitor.visitTime; break;\n        case Type.Decimal:              fn = visitor.visitDecimal; break;\n        case Type.List:                 fn = visitor.visitList; break;\n        case Type.Struct:               fn = visitor.visitStruct; break;\n        case Type.Union:                fn = visitor.visitUnion; break;\n        case Type.DenseUnion:           fn = visitor.visitDenseUnion || visitor.visitUnion; break;\n        case Type.SparseUnion:          fn = visitor.visitSparseUnion || visitor.visitUnion; break;\n        case Type.Dictionary:           fn = visitor.visitDictionary; break;\n        case Type.Interval:             fn = visitor.visitInterval; break;\n        case Type.IntervalDayTime:      fn = visitor.visitIntervalDayTime || visitor.visitInterval; break;\n        case Type.IntervalYearMonth:    fn = visitor.visitIntervalYearMonth || visitor.visitInterval; break;\n        case Type.FixedSizeList:        fn = visitor.visitFixedSizeList; break;\n        case Type.Map:                  fn = visitor.visitMap; break;\n    }\n    if (typeof fn === 'function') return fn;\n    if (!throwIfNotFound) return () => null;\n    throw new Error(`Unrecognized type '${Type[dtype]}'`);\n}\n\n/** @ignore */\nfunction inferDType<T extends DataType>(type: T): Type {\n    switch (type.typeId) {\n        case Type.Null: return Type.Null;\n        case Type.Int: {\n            const { bitWidth, isSigned } = (type as any as Int);\n            switch (bitWidth) {\n                case  8: return isSigned ? Type.Int8  : Type.Uint8 ;\n                case 16: return isSigned ? Type.Int16 : Type.Uint16;\n                case 32: return isSigned ? Type.Int32 : Type.Uint32;\n                case 64: return isSigned ? Type.Int64 : Type.Uint64;\n            }\n            // @ts-ignore\n            return Type.Int;\n        }\n        case Type.Float:\n            switch((type as any as Float).precision) {\n                case Precision.HALF: return Type.Float16;\n                case Precision.SINGLE: return Type.Float32;\n                case Precision.DOUBLE: return Type.Float64;\n            }\n            // @ts-ignore\n            return Type.Float;\n        case Type.Binary: return Type.Binary;\n        case Type.Utf8: return Type.Utf8;\n        case Type.Bool: return Type.Bool;\n        case Type.Decimal: return Type.Decimal;\n        case Type.Time:\n            switch ((type as any as Time).unit) {\n                case TimeUnit.SECOND: return Type.TimeSecond;\n                case TimeUnit.MILLISECOND: return Type.TimeMillisecond;\n                case TimeUnit.MICROSECOND: return Type.TimeMicrosecond;\n                case TimeUnit.NANOSECOND: return Type.TimeNanosecond;\n            }\n            // @ts-ignore\n            return Type.Time;\n        case Type.Timestamp:\n            switch ((type as any as Timestamp).unit) {\n                case TimeUnit.SECOND: return Type.TimestampSecond;\n                case TimeUnit.MILLISECOND: return Type.TimestampMillisecond;\n                case TimeUnit.MICROSECOND: return Type.TimestampMicrosecond;\n                case TimeUnit.NANOSECOND: return Type.TimestampNanosecond;\n            }\n            // @ts-ignore\n            return Type.Timestamp;\n        case Type.Date:\n            switch ((type as any as Date_).unit) {\n                case DateUnit.DAY: return Type.DateDay;\n                case DateUnit.MILLISECOND: return Type.DateMillisecond;\n            }\n            // @ts-ignore\n            return Type.Date;\n        case Type.Interval:\n            switch ((type as any as Interval).unit) {\n                case IntervalUnit.DAY_TIME: return Type.IntervalDayTime;\n                case IntervalUnit.YEAR_MONTH: return Type.IntervalYearMonth;\n            }\n            // @ts-ignore\n            return Type.Interval;\n        case Type.Map: return Type.Map;\n        case Type.List: return Type.List;\n        case Type.Struct: return Type.Struct;\n        case Type.Union:\n            switch ((type as any as Union).mode) {\n                case UnionMode.Dense: return Type.DenseUnion;\n                case UnionMode.Sparse: return Type.SparseUnion;\n            }\n            // @ts-ignore\n            return Type.Union;\n        case Type.FixedSizeBinary: return Type.FixedSizeBinary;\n        case Type.FixedSizeList: return Type.FixedSizeList;\n        case Type.Dictionary: return Type.Dictionary;\n    }\n    throw new Error(`Unrecognized type '${Type[type.typeId]}'`);\n}\n\nexport interface Visitor {\n    visitNull                  (node: any, ...args: any[]): any;\n    visitBool                  (node: any, ...args: any[]): any;\n    visitInt                   (node: any, ...args: any[]): any;\n    visitInt8?                 (node: any, ...args: any[]): any;\n    visitInt16?                (node: any, ...args: any[]): any;\n    visitInt32?                (node: any, ...args: any[]): any;\n    visitInt64?                (node: any, ...args: any[]): any;\n    visitUint8?                (node: any, ...args: any[]): any;\n    visitUint16?               (node: any, ...args: any[]): any;\n    visitUint32?               (node: any, ...args: any[]): any;\n    visitUint64?               (node: any, ...args: any[]): any;\n    visitFloat                 (node: any, ...args: any[]): any;\n    visitFloat16?              (node: any, ...args: any[]): any;\n    visitFloat32?              (node: any, ...args: any[]): any;\n    visitFloat64?              (node: any, ...args: any[]): any;\n    visitUtf8                  (node: any, ...args: any[]): any;\n    visitBinary                (node: any, ...args: any[]): any;\n    visitFixedSizeBinary       (node: any, ...args: any[]): any;\n    visitDate                  (node: any, ...args: any[]): any;\n    visitDateDay?              (node: any, ...args: any[]): any;\n    visitDateMillisecond?      (node: any, ...args: any[]): any;\n    visitTimestamp             (node: any, ...args: any[]): any;\n    visitTimestampSecond?      (node: any, ...args: any[]): any;\n    visitTimestampMillisecond? (node: any, ...args: any[]): any;\n    visitTimestampMicrosecond? (node: any, ...args: any[]): any;\n    visitTimestampNanosecond?  (node: any, ...args: any[]): any;\n    visitTime                  (node: any, ...args: any[]): any;\n    visitTimeSecond?           (node: any, ...args: any[]): any;\n    visitTimeMillisecond?      (node: any, ...args: any[]): any;\n    visitTimeMicrosecond?      (node: any, ...args: any[]): any;\n    visitTimeNanosecond?       (node: any, ...args: any[]): any;\n    visitDecimal               (node: any, ...args: any[]): any;\n    visitList                  (node: any, ...args: any[]): any;\n    visitStruct                (node: any, ...args: any[]): any;\n    visitUnion                 (node: any, ...args: any[]): any;\n    visitDenseUnion?           (node: any, ...args: any[]): any;\n    visitSparseUnion?          (node: any, ...args: any[]): any;\n    visitDictionary            (node: any, ...args: any[]): any;\n    visitInterval              (node: any, ...args: any[]): any;\n    visitIntervalDayTime?      (node: any, ...args: any[]): any;\n    visitIntervalYearMonth?    (node: any, ...args: any[]): any;\n    visitFixedSizeList         (node: any, ...args: any[]): any;\n    visitMap                   (node: any, ...args: any[]): any;\n}\n\n// Add these here so they're picked up by the externs creator\n// in the build, and closure-compiler doesn't minify them away\n(Visitor.prototype as any).visitInt8 = null;\n(Visitor.prototype as any).visitInt16 = null;\n(Visitor.prototype as any).visitInt32 = null;\n(Visitor.prototype as any).visitInt64 = null;\n(Visitor.prototype as any).visitUint8 = null;\n(Visitor.prototype as any).visitUint16 = null;\n(Visitor.prototype as any).visitUint32 = null;\n(Visitor.prototype as any).visitUint64 = null;\n(Visitor.prototype as any).visitFloat16 = null;\n(Visitor.prototype as any).visitFloat32 = null;\n(Visitor.prototype as any).visitFloat64 = null;\n(Visitor.prototype as any).visitDateDay = null;\n(Visitor.prototype as any).visitDateMillisecond = null;\n(Visitor.prototype as any).visitTimestampSecond = null;\n(Visitor.prototype as any).visitTimestampMillisecond = null;\n(Visitor.prototype as any).visitTimestampMicrosecond = null;\n(Visitor.prototype as any).visitTimestampNanosecond = null;\n(Visitor.prototype as any).visitTimeSecond = null;\n(Visitor.prototype as any).visitTimeMillisecond = null;\n(Visitor.prototype as any).visitTimeMicrosecond = null;\n(Visitor.prototype as any).visitTimeNanosecond = null;\n(Visitor.prototype as any).visitDenseUnion = null;\n(Visitor.prototype as any).visitSparseUnion = null;\n(Visitor.prototype as any).visitIntervalDayTime = null;\n(Visitor.prototype as any).visitIntervalYearMonth = null;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Field } from '../schema';\nimport { Vector } from '../vector';\nimport { Visitor } from '../visitor';\nimport { encodeUtf8 } from '../util/utf8';\nimport { VectorType } from '../interfaces';\nimport { float64ToUint16 } from '../util/math';\nimport { toArrayBufferView } from '../util/buffer';\nimport { Type, UnionMode, Precision, DateUnit, TimeUnit, IntervalUnit } from '../enum';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\n/** @ignore */\nexport interface SetVisitor extends Visitor {\n    visit<T extends VectorType>(node: T, index: number, value: T['TValue']): void;\n    visitMany<T extends VectorType>(nodes: T[], indices: number[], values: T['TValue'][]): void[];\n    getVisitFn<T extends Type>(node: T): (vector: VectorType<T>, index: number, value: VectorType<T>['TValue']) => void;\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): (vector: VectorType<T>, index: number, value: VectorType<T>['TValue']) => void;\n    visitNull                 <T extends Null>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitBool                 <T extends Bool>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitInt                  <T extends Int>                 (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitInt8                 <T extends Int8>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitInt16                <T extends Int16>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitInt32                <T extends Int32>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitInt64                <T extends Int64>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitUint8                <T extends Uint8>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitUint16               <T extends Uint16>              (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitUint32               <T extends Uint32>              (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitUint64               <T extends Uint64>              (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitFloat                <T extends Float>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitFloat16              <T extends Float16>             (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitFloat32              <T extends Float32>             (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitFloat64              <T extends Float64>             (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitUtf8                 <T extends Utf8>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitBinary               <T extends Binary>              (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitFixedSizeBinary      <T extends FixedSizeBinary>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitDate                 <T extends Date_>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitDateDay              <T extends DateDay>             (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitDateMillisecond      <T extends DateMillisecond>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimestamp            <T extends Timestamp>           (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimestampSecond      <T extends TimestampSecond>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimestampMillisecond <T extends TimestampMillisecond>(vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimestampMicrosecond <T extends TimestampMicrosecond>(vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimestampNanosecond  <T extends TimestampNanosecond> (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTime                 <T extends Time>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimeSecond           <T extends TimeSecond>          (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimeMillisecond      <T extends TimeMillisecond>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimeMicrosecond      <T extends TimeMicrosecond>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimeNanosecond       <T extends TimeNanosecond>      (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitDecimal              <T extends Decimal>             (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitList                 <T extends List>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitStruct               <T extends Struct>              (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitUnion                <T extends Union>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitDenseUnion           <T extends DenseUnion>          (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitSparseUnion          <T extends SparseUnion>         (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitDictionary           <T extends Dictionary>          (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitInterval             <T extends Interval>            (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitIntervalDayTime      <T extends IntervalDayTime>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitIntervalYearMonth    <T extends IntervalYearMonth>   (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitFixedSizeList        <T extends FixedSizeList>       (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitMap                  <T extends Map_>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n}\n\n/** @ignore */\nexport class SetVisitor extends Visitor {}\n\n/** @ignore */\nconst setEpochMsToDays = (data: Int32Array, index: number, epochMs: number) => { data[index] = (epochMs / 86400000) | 0; };\n/** @ignore */\nconst setEpochMsToMillisecondsLong = (data: Int32Array, index: number, epochMs: number) => {\n    data[index] = (epochMs % 4294967296) | 0;\n    data[index + 1] = (epochMs / 4294967296) | 0;\n};\n/** @ignore */\nconst setEpochMsToMicrosecondsLong = (data: Int32Array, index: number, epochMs: number) => {\n    data[index] = ((epochMs * 1000) % 4294967296) | 0;\n    data[index + 1] = ((epochMs * 1000) / 4294967296) | 0;\n};\n/** @ignore */\nconst setEpochMsToNanosecondsLong = (data: Int32Array, index: number, epochMs: number) => {\n    data[index] = ((epochMs * 1000000) % 4294967296) | 0;\n    data[index + 1] = ((epochMs * 1000000) / 4294967296) | 0;\n};\n\n/** @ignore */\nconst setVariableWidthBytes = (values: Uint8Array, valueOffsets: Int32Array, index: number, value: Uint8Array) => {\n    const { [index]: x, [index + 1]: y } = valueOffsets;\n    if (x != null && y != null) {\n        values.set(value.subarray(0, y - x), x);\n    }\n};\n\n/** @ignore */\nconst setBool = <T extends Bool>({ offset, values }: VectorType<T>, index: number, val: boolean) => {\n    const idx = offset + index;\n    val ? (values[idx >> 3] |=  (1 << (idx % 8)))  // true\n        : (values[idx >> 3] &= ~(1 << (idx % 8))); // false\n\n};\n\n/** @ignore */ type Numeric1X = Int8 | Int16 | Int32 | Uint8 | Uint16 | Uint32 | Float32 | Float64;\n/** @ignore */ type Numeric2X = Int64 | Uint64;\n\n/** @ignore */\nconst setDateDay         = <T extends DateDay>        ({ values         }: VectorType<T>, index: number, value: T['TValue']): void => { setEpochMsToDays(values, index, value.valueOf()); };\n/** @ignore */\nconst setDateMillisecond = <T extends DateMillisecond>({ values         }: VectorType<T>, index: number, value: T['TValue']): void => { setEpochMsToMillisecondsLong(values, index * 2, value.valueOf()); };\n/** @ignore */\nconst setNumeric         = <T extends Numeric1X>      ({ stride, values }: VectorType<T>, index: number, value: T['TValue']): void => { values[stride * index] = value; };\n/** @ignore */\nconst setFloat16         = <T extends Float16>        ({ stride, values }: VectorType<T>, index: number, value: T['TValue']): void => { values[stride * index] = float64ToUint16(value); };\n/** @ignore */\nconst setNumericX2       = <T extends Numeric2X>      (vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    switch (typeof value) {\n        case 'bigint': vector.values64[index] = value; break;\n        case 'number': vector.values[index * vector.stride] = value; break;\n        default: {\n            const val = value as T['TArray'];\n            const { stride, ArrayType } = vector;\n            const long = toArrayBufferView<T['TArray']>(ArrayType, val);\n            vector.values.set(long.subarray(0, stride), stride * index);\n        }\n    }\n};\n/** @ignore */\nconst setFixedSizeBinary = <T extends FixedSizeBinary>({ stride, values }: VectorType<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, stride), stride * index); };\n\n/** @ignore */\nconst setBinary = <T extends Binary>({ values, valueOffsets }: VectorType<T>, index: number, value: T['TValue']) => setVariableWidthBytes(values, valueOffsets, index, value);\n/** @ignore */\nconst setUtf8 = <T extends Utf8>({ values, valueOffsets }: VectorType<T>, index: number, value: T['TValue']) => {\n    setVariableWidthBytes(values, valueOffsets, index, encodeUtf8(value));\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst setInt = <T extends Int>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    vector.type.bitWidth < 64\n        ? setNumeric(vector as VectorType<Numeric1X>, index, value as Numeric1X['TValue'])\n        : setNumericX2(vector as VectorType<Numeric2X>, index, value as Numeric2X['TValue']);\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst setFloat = <T extends Float>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    vector.type.precision !== Precision.HALF\n        ? setNumeric(vector as VectorType<Numeric1X>, index, value)\n        : setFloat16(vector as VectorType<Float16>, index, value);\n};\n\n/* istanbul ignore next */\nconst setDate = <T extends Date_> (vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    vector.type.unit === DateUnit.DAY\n        ? setDateDay(vector as VectorType<DateDay>, index, value)\n        : setDateMillisecond(vector as VectorType<DateMillisecond>, index, value);\n};\n\n/** @ignore */\nconst setTimestampSecond      = <T extends TimestampSecond>     ({ values }: VectorType<T>, index: number, value: T['TValue']): void => setEpochMsToMillisecondsLong(values, index * 2, value / 1000);\n/** @ignore */\nconst setTimestampMillisecond = <T extends TimestampMillisecond>({ values }: VectorType<T>, index: number, value: T['TValue']): void => setEpochMsToMillisecondsLong(values, index * 2, value);\n/** @ignore */\nconst setTimestampMicrosecond = <T extends TimestampMicrosecond>({ values }: VectorType<T>, index: number, value: T['TValue']): void => setEpochMsToMicrosecondsLong(values, index * 2, value);\n/** @ignore */\nconst setTimestampNanosecond  = <T extends TimestampNanosecond> ({ values }: VectorType<T>, index: number, value: T['TValue']): void => setEpochMsToNanosecondsLong(values, index * 2, value);\n/* istanbul ignore next */\n/** @ignore */\nconst setTimestamp            = <T extends Timestamp>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND:      return      setTimestampSecond(vector as VectorType<TimestampSecond>, index, value);\n        case TimeUnit.MILLISECOND: return setTimestampMillisecond(vector as VectorType<TimestampMillisecond>, index, value);\n        case TimeUnit.MICROSECOND: return setTimestampMicrosecond(vector as VectorType<TimestampMicrosecond>, index, value);\n        case TimeUnit.NANOSECOND:  return  setTimestampNanosecond(vector as VectorType<TimestampNanosecond>, index, value);\n    }\n};\n\n/** @ignore */\nconst setTimeSecond      = <T extends TimeSecond>     ({ values, stride }: VectorType<T>, index: number, value: T['TValue']): void => { values[stride * index] = value; };\n/** @ignore */\nconst setTimeMillisecond = <T extends TimeMillisecond>({ values, stride }: VectorType<T>, index: number, value: T['TValue']): void => { values[stride * index] = value; };\n/** @ignore */\nconst setTimeMicrosecond = <T extends TimeMicrosecond>({ values         }: VectorType<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, 2), 2 * index); };\n/** @ignore */\nconst setTimeNanosecond  = <T extends TimeNanosecond> ({ values         }: VectorType<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, 2), 2 * index); };\n/* istanbul ignore next */\n/** @ignore */\nconst setTime            = <T extends Time>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND:      return      setTimeSecond(vector as VectorType<TimeSecond>, index, value as TimeSecond['TValue']);\n        case TimeUnit.MILLISECOND: return setTimeMillisecond(vector as VectorType<TimeMillisecond>, index, value as TimeMillisecond['TValue']);\n        case TimeUnit.MICROSECOND: return setTimeMicrosecond(vector as VectorType<TimeMicrosecond>, index, value as TimeMicrosecond['TValue']);\n        case TimeUnit.NANOSECOND:  return  setTimeNanosecond(vector as VectorType<TimeNanosecond>, index, value as TimeNanosecond['TValue']);\n    }\n};\n\n/** @ignore */\nconst setDecimal = <T extends Decimal>({ values }: VectorType<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, 4), 4 * index); };\n\n/** @ignore */\nconst setList = <T extends List>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    const values = vector.getChildAt(0)!, valueOffsets = vector.valueOffsets;\n    for (let idx = -1, itr = valueOffsets[index], end = valueOffsets[index + 1]; itr < end;) {\n        values.set(itr++, value.get(++idx));\n    }\n};\n\n/** @ignore */\nconst setMap = <T extends Map_>(vector: VectorType<T>, index: number, value: T['TValue']) => {\n    const values = vector.getChildAt(0)!, valueOffsets = vector.valueOffsets;\n    const entries = value instanceof Map ? [...value] : Object.entries(value);\n    for (let idx = -1, itr = valueOffsets[index], end = valueOffsets[index + 1]; itr < end;) {\n        values.set(itr++, entries[++idx]);\n    }\n};\n\n/** @ignore */ const _setStructArrayValue = (o: number, v: any[]) => (c: Vector | null, _: Field, i: number) => c && c.set(o, v[i]);\n/** @ignore */ const _setStructVectorValue = (o: number, v: Vector) => (c: Vector | null, _: Field, i: number) => c && c.set(o, v.get(i));\n/** @ignore */ const _setStructMapValue = (o: number, v: Map<string, any>) => (c: Vector | null, f: Field, _: number) => c && c.set(o, v.get(f.name));\n/** @ignore */ const _setStructObjectValue = (o: number, v: { [key: string]: any }) => (c: Vector | null, f: Field, _: number) => c && c.set(o, v[f.name]);\n/** @ignore */\nconst setStruct = <T extends Struct>(vector: VectorType<T>, index: number, value: T['TValue']) => {\n\n    const setValue = value instanceof Map    ? _setStructMapValue(index, value)    :\n                     value instanceof Vector ? _setStructVectorValue(index, value) :\n                     Array.isArray(value)    ? _setStructArrayValue(index, value)  :\n                                               _setStructObjectValue(index, value) ;\n\n    vector.type.children.forEach((f: Field, i: number) => setValue(vector.getChildAt(i), f, i));\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst setUnion = <\n    V extends VectorType<Union> | VectorType<DenseUnion> | VectorType<SparseUnion>\n>(vector: V, index: number, value: V['TValue']) => {\n    vector.type.mode === UnionMode.Dense ?\n        setDenseUnion(vector as VectorType<DenseUnion>, index, value) :\n        setSparseUnion(vector as VectorType<SparseUnion>, index, value);\n};\n\n/** @ignore */\nconst setDenseUnion = <T extends DenseUnion>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    const childIndex = vector.typeIdToChildIndex[vector.typeIds[index]];\n    const child = vector.getChildAt(childIndex);\n    child && child.set(vector.valueOffsets[index], value);\n};\n\n/** @ignore */\nconst setSparseUnion = <T extends SparseUnion>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    const childIndex = vector.typeIdToChildIndex[vector.typeIds[index]];\n    const child = vector.getChildAt(childIndex);\n    child && child.set(index, value);\n};\n\n/** @ignore */\nconst setDictionary = <T extends Dictionary>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    const key = vector.getKey(index);\n    if (key !== null) {\n        vector.setValue(key, value);\n    }\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst setIntervalValue = <T extends Interval>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    (vector.type.unit === IntervalUnit.DAY_TIME)\n        ? setIntervalDayTime(vector as VectorType<IntervalDayTime>, index, value)\n        : setIntervalYearMonth(vector as VectorType<IntervalYearMonth>, index, value);\n};\n\n/** @ignore */\nconst setIntervalDayTime = <T extends IntervalDayTime>({ values }: VectorType<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, 2), 2 * index); };\n/** @ignore */\nconst setIntervalYearMonth = <T extends IntervalYearMonth>({ values }: VectorType<T>, index: number, value: T['TValue']): void => { values[index] = (value[0] * 12) + (value[1] % 12); };\n\n/** @ignore */\nconst setFixedSizeList = <T extends FixedSizeList>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    const child = vector.getChildAt(0)!, { stride } = vector;\n    for (let idx = -1, offset = index * stride; ++idx < stride;) {\n        child.set(offset + idx, value.get(idx));\n    }\n};\n\nSetVisitor.prototype.visitBool                 =                 setBool;\nSetVisitor.prototype.visitInt                  =                  setInt;\nSetVisitor.prototype.visitInt8                 =              setNumeric;\nSetVisitor.prototype.visitInt16                =              setNumeric;\nSetVisitor.prototype.visitInt32                =              setNumeric;\nSetVisitor.prototype.visitInt64                =            setNumericX2;\nSetVisitor.prototype.visitUint8                =              setNumeric;\nSetVisitor.prototype.visitUint16               =              setNumeric;\nSetVisitor.prototype.visitUint32               =              setNumeric;\nSetVisitor.prototype.visitUint64               =            setNumericX2;\nSetVisitor.prototype.visitFloat                =                setFloat;\nSetVisitor.prototype.visitFloat16              =              setFloat16;\nSetVisitor.prototype.visitFloat32              =              setNumeric;\nSetVisitor.prototype.visitFloat64              =              setNumeric;\nSetVisitor.prototype.visitUtf8                 =                 setUtf8;\nSetVisitor.prototype.visitBinary               =               setBinary;\nSetVisitor.prototype.visitFixedSizeBinary      =      setFixedSizeBinary;\nSetVisitor.prototype.visitDate                 =                 setDate;\nSetVisitor.prototype.visitDateDay              =              setDateDay;\nSetVisitor.prototype.visitDateMillisecond      =      setDateMillisecond;\nSetVisitor.prototype.visitTimestamp            =            setTimestamp;\nSetVisitor.prototype.visitTimestampSecond      =      setTimestampSecond;\nSetVisitor.prototype.visitTimestampMillisecond = setTimestampMillisecond;\nSetVisitor.prototype.visitTimestampMicrosecond = setTimestampMicrosecond;\nSetVisitor.prototype.visitTimestampNanosecond  =  setTimestampNanosecond;\nSetVisitor.prototype.visitTime                 =                 setTime;\nSetVisitor.prototype.visitTimeSecond           =           setTimeSecond;\nSetVisitor.prototype.visitTimeMillisecond      =      setTimeMillisecond;\nSetVisitor.prototype.visitTimeMicrosecond      =      setTimeMicrosecond;\nSetVisitor.prototype.visitTimeNanosecond       =       setTimeNanosecond;\nSetVisitor.prototype.visitDecimal              =              setDecimal;\nSetVisitor.prototype.visitList                 =                 setList;\nSetVisitor.prototype.visitStruct               =               setStruct;\nSetVisitor.prototype.visitUnion                =                setUnion;\nSetVisitor.prototype.visitDenseUnion           =           setDenseUnion;\nSetVisitor.prototype.visitSparseUnion          =          setSparseUnion;\nSetVisitor.prototype.visitDictionary           =           setDictionary;\nSetVisitor.prototype.visitInterval             =        setIntervalValue;\nSetVisitor.prototype.visitIntervalDayTime      =      setIntervalDayTime;\nSetVisitor.prototype.visitIntervalYearMonth    =    setIntervalYearMonth;\nSetVisitor.prototype.visitFixedSizeList        =        setFixedSizeList;\nSetVisitor.prototype.visitMap                  =                  setMap;\n\n/** @ignore */\nexport const instance = new SetVisitor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { DataType } from '../type';\nimport { Visitor } from '../visitor';\nimport { VectorType, BuilderCtor } from '../interfaces';\nimport { BinaryBuilder } from '../builder/binary';\nimport { BoolBuilder } from '../builder/bool';\nimport { DateBuilder, DateDayBuilder, DateMillisecondBuilder } from '../builder/date';\nimport { DecimalBuilder } from '../builder/decimal';\nimport { DictionaryBuilder } from '../builder/dictionary';\nimport { FixedSizeBinaryBuilder } from '../builder/fixedsizebinary';\nimport { FixedSizeListBuilder } from '../builder/fixedsizelist';\nimport { FloatBuilder, Float16Builder, Float32Builder, Float64Builder } from '../builder/float';\nimport { IntervalBuilder, IntervalDayTimeBuilder, IntervalYearMonthBuilder } from '../builder/interval';\nimport { IntBuilder, Int8Builder, Int16Builder, Int32Builder, Int64Builder, Uint8Builder, Uint16Builder, Uint32Builder, Uint64Builder } from '../builder/int';\nimport { ListBuilder } from '../builder/list';\nimport { MapBuilder } from '../builder/map';\nimport { NullBuilder } from '../builder/null';\nimport { StructBuilder } from '../builder/struct';\nimport { TimestampBuilder, TimestampSecondBuilder, TimestampMillisecondBuilder, TimestampMicrosecondBuilder, TimestampNanosecondBuilder } from '../builder/timestamp';\nimport { TimeBuilder, TimeSecondBuilder, TimeMillisecondBuilder, TimeMicrosecondBuilder, TimeNanosecondBuilder } from '../builder/time';\nimport { UnionBuilder, DenseUnionBuilder, SparseUnionBuilder } from '../builder/union';\nimport { Utf8Builder } from '../builder/utf8';\n\n/** @ignore */\nexport interface GetBuilderCtor extends Visitor {\n    visit<T extends Type>(type: T): BuilderCtor<T>;\n    visitMany<T extends Type>(types: T[]): BuilderCtor<T>[];\n    getVisitFn<T extends Type>(type: T): () => BuilderCtor<T>;\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): () => BuilderCtor<T>;\n}\n\n/** @ignore */\nexport class GetBuilderCtor extends Visitor {\n    public visitNull                 () { return NullBuilder;                 }\n    public visitBool                 () { return BoolBuilder;                 }\n    public visitInt                  () { return IntBuilder;                  }\n    public visitInt8                 () { return Int8Builder;                 }\n    public visitInt16                () { return Int16Builder;                }\n    public visitInt32                () { return Int32Builder;                }\n    public visitInt64                () { return Int64Builder;                }\n    public visitUint8                () { return Uint8Builder;                }\n    public visitUint16               () { return Uint16Builder;               }\n    public visitUint32               () { return Uint32Builder;               }\n    public visitUint64               () { return Uint64Builder;               }\n    public visitFloat                () { return FloatBuilder;                }\n    public visitFloat16              () { return Float16Builder;              }\n    public visitFloat32              () { return Float32Builder;              }\n    public visitFloat64              () { return Float64Builder;              }\n    public visitUtf8                 () { return Utf8Builder;                 }\n    public visitBinary               () { return BinaryBuilder;               }\n    public visitFixedSizeBinary      () { return FixedSizeBinaryBuilder;      }\n    public visitDate                 () { return DateBuilder;                 }\n    public visitDateDay              () { return DateDayBuilder;              }\n    public visitDateMillisecond      () { return DateMillisecondBuilder;      }\n    public visitTimestamp            () { return TimestampBuilder;            }\n    public visitTimestampSecond      () { return TimestampSecondBuilder;      }\n    public visitTimestampMillisecond () { return TimestampMillisecondBuilder; }\n    public visitTimestampMicrosecond () { return TimestampMicrosecondBuilder; }\n    public visitTimestampNanosecond  () { return TimestampNanosecondBuilder;  }\n    public visitTime                 () { return TimeBuilder;                 }\n    public visitTimeSecond           () { return TimeSecondBuilder;           }\n    public visitTimeMillisecond      () { return TimeMillisecondBuilder;      }\n    public visitTimeMicrosecond      () { return TimeMicrosecondBuilder;      }\n    public visitTimeNanosecond       () { return TimeNanosecondBuilder;       }\n    public visitDecimal              () { return DecimalBuilder;              }\n    public visitList                 () { return ListBuilder;                 }\n    public visitStruct               () { return StructBuilder;               }\n    public visitUnion                () { return UnionBuilder;                }\n    public visitDenseUnion           () { return DenseUnionBuilder;           }\n    public visitSparseUnion          () { return SparseUnionBuilder;          }\n    public visitDictionary           () { return DictionaryBuilder;           }\n    public visitInterval             () { return IntervalBuilder;             }\n    public visitIntervalDayTime      () { return IntervalDayTimeBuilder;      }\n    public visitIntervalYearMonth    () { return IntervalYearMonthBuilder;    }\n    public visitFixedSizeList        () { return FixedSizeListBuilder;        }\n    public visitMap                  () { return MapBuilder;                  }\n}\n\n/** @ignore */\nexport const instance = new GetBuilderCtor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/** @ignore */\nexport { Builder, BuilderOptions } from '../builder';\nexport { BoolBuilder } from './bool';\nexport { NullBuilder } from './null';\nexport { DateBuilder, DateDayBuilder, DateMillisecondBuilder } from './date';\nexport { DecimalBuilder } from './decimal';\nexport { DictionaryBuilder } from './dictionary';\nexport { FixedSizeBinaryBuilder } from './fixedsizebinary';\nexport { FloatBuilder, Float16Builder, Float32Builder, Float64Builder } from './float';\nexport { IntBuilder, Int8Builder, Int16Builder, Int32Builder, Int64Builder, Uint8Builder, Uint16Builder, Uint32Builder, Uint64Builder } from './int';\nexport { TimeBuilder, TimeSecondBuilder, TimeMillisecondBuilder, TimeMicrosecondBuilder, TimeNanosecondBuilder } from './time';\nexport { TimestampBuilder, TimestampSecondBuilder, TimestampMillisecondBuilder, TimestampMicrosecondBuilder, TimestampNanosecondBuilder } from './timestamp';\nexport { IntervalBuilder, IntervalDayTimeBuilder, IntervalYearMonthBuilder } from './interval';\nexport { Utf8Builder } from './utf8';\nexport { BinaryBuilder } from './binary';\nexport { ListBuilder } from './list';\nexport { FixedSizeListBuilder } from './fixedsizelist';\nexport { MapBuilder } from './map';\nexport { StructBuilder } from './struct';\nexport { UnionBuilder, SparseUnionBuilder, DenseUnionBuilder } from './union';\n\nimport { Type } from '../enum';\nimport { Field } from '../schema';\nimport { DataType } from '../type';\nimport { Utf8Builder } from './utf8';\nimport { BuilderType as B } from '../interfaces';\nimport { Builder, BuilderOptions } from '../builder';\nimport { instance as setVisitor } from '../visitor/set';\nimport { instance as getBuilderConstructor } from '../visitor/builderctor';\n\n/** @nocollapse */\nBuilder.new = newBuilder;\n\nfunction newBuilder<T extends DataType = any, TNull = any>(options: BuilderOptions<T, TNull>): B<T, TNull> {\n\n    const type = options.type;\n    const builder = new (getBuilderConstructor.getVisitFn<T>(type)())(options) as Builder<T, TNull>;\n\n    if (type.children && type.children.length > 0) {\n\n        const children = options['children'] || [] as BuilderOptions[];\n        const defaultOptions = { 'nullValues': options['nullValues'] };\n        const getChildOptions = Array.isArray(children)\n            ? ((_: Field, i: number) => children[i] || defaultOptions)\n            : (({ name }: Field) => children[name] || defaultOptions);\n\n        type.children.forEach((field, index) => {\n            const { type } = field;\n            const opts = getChildOptions(field, index);\n            builder.children.push(newBuilder({ ...opts, type }));\n        });\n    }\n\n    return builder as B<T, TNull>;\n}\n\n(Object.keys(Type) as any[])\n    .map((T: any) => Type[T] as any)\n    .filter((T: any): T is Type => typeof T === 'number' && T !== Type.NONE)\n    .forEach((typeId) => {\n        const BuilderCtor = getBuilderConstructor.visit(typeId);\n        BuilderCtor.prototype._setValue = setVisitor.getVisitFn(typeId);\n    });\n\n(Utf8Builder.prototype as any)._setValue = setVisitor.visitBinary;\n","// automatically generated by the FlatBuffers compiler, do not modify\n\nimport { flatbuffers } from 'flatbuffers';\nimport * as NS13596923344997147894 from './Schema';\n/**\n * ----------------------------------------------------------------------\n * Arrow File metadata\n *\n *\n * @constructor\n */\nexport class Footer {\n    bb: flatbuffers.ByteBuffer | null = null;\n\n    bb_pos: number = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Footer\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Footer {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Footer= obj\n     * @returns Footer\n     */\n    static getRootAsFooter(bb: flatbuffers.ByteBuffer, obj?: Footer): Footer {\n        return (obj || new Footer()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Footer= obj\n     * @returns Footer\n     */\n    static getSizePrefixedRootAsFooter(bb: flatbuffers.ByteBuffer, obj?: Footer): Footer {\n        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n        return (obj || new Footer()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns MetadataVersion\n     */\n    version(): NS13596923344997147894.MetadataVersion {\n        const offset = this.bb!.__offset(this.bb_pos, 4);\n        return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : NS13596923344997147894.MetadataVersion.V1;\n    }\n\n    /**\n     * @param Schema= obj\n     * @returns Schema|null\n     */\n    schema(obj?: NS13596923344997147894.Schema): NS13596923344997147894.Schema | null {\n        const offset = this.bb!.__offset(this.bb_pos, 6);\n        return offset ? (obj || new NS13596923344997147894.Schema()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;\n    }\n\n    /**\n     * @param number index\n     * @param Block= obj\n     * @returns Block\n     */\n    dictionaries(index: number, obj?: Block): Block | null {\n        const offset = this.bb!.__offset(this.bb_pos, 8);\n        return offset ? (obj || new Block()).__init(this.bb!.__vector(this.bb_pos + offset) + index * 24, this.bb!) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    dictionariesLength(): number {\n        const offset = this.bb!.__offset(this.bb_pos, 8);\n        return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param Block= obj\n     * @returns Block\n     */\n    recordBatches(index: number, obj?: Block): Block | null {\n        const offset = this.bb!.__offset(this.bb_pos, 10);\n        return offset ? (obj || new Block()).__init(this.bb!.__vector(this.bb_pos + offset) + index * 24, this.bb!) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    recordBatchesLength(): number {\n        const offset = this.bb!.__offset(this.bb_pos, 10);\n        return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * User-defined metadata\n     *\n     * @param number index\n     * @param KeyValue= obj\n     * @returns KeyValue\n     */\n    customMetadata(index: number, obj?: NS13596923344997147894.KeyValue): NS13596923344997147894.KeyValue | null {\n        const offset = this.bb!.__offset(this.bb_pos, 12);\n        return offset ? (obj || new NS13596923344997147894.KeyValue()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    customMetadataLength(): number {\n        const offset = this.bb!.__offset(this.bb_pos, 12);\n        return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startFooter(builder: flatbuffers.Builder) {\n        builder.startObject(5);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param MetadataVersion version\n     */\n    static addVersion(builder: flatbuffers.Builder, version: NS13596923344997147894.MetadataVersion) {\n        builder.addFieldInt16(0, version, NS13596923344997147894.MetadataVersion.V1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset schemaOffset\n     */\n    static addSchema(builder: flatbuffers.Builder, schemaOffset: flatbuffers.Offset) {\n        builder.addFieldOffset(1, schemaOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dictionariesOffset\n     */\n    static addDictionaries(builder: flatbuffers.Builder, dictionariesOffset: flatbuffers.Offset) {\n        builder.addFieldOffset(2, dictionariesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDictionariesVector(builder: flatbuffers.Builder, numElems: number) {\n        builder.startVector(24, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset recordBatchesOffset\n     */\n    static addRecordBatches(builder: flatbuffers.Builder, recordBatchesOffset: flatbuffers.Offset) {\n        builder.addFieldOffset(3, recordBatchesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startRecordBatchesVector(builder: flatbuffers.Builder, numElems: number) {\n        builder.startVector(24, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset customMetadataOffset\n     */\n    static addCustomMetadata(builder: flatbuffers.Builder, customMetadataOffset: flatbuffers.Offset) {\n        builder.addFieldOffset(4, customMetadataOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createCustomMetadataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n        builder.startVector(4, data.length, 4);\n        for (let i = data.length - 1; i >= 0; i--) {\n            builder.addOffset(data[i]);\n        }\n        return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startCustomMetadataVector(builder: flatbuffers.Builder, numElems: number) {\n        builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endFooter(builder: flatbuffers.Builder): flatbuffers.Offset {\n        const offset = builder.endObject();\n        return offset;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset offset\n     */\n    static finishFooterBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n        builder.finish(offset);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset offset\n     */\n    static finishSizePrefixedFooterBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n        builder.finish(offset, undefined, true);\n    }\n\n    static createFooter(builder: flatbuffers.Builder, version: NS13596923344997147894.MetadataVersion, schemaOffset: flatbuffers.Offset, dictionariesOffset: flatbuffers.Offset, recordBatchesOffset: flatbuffers.Offset, customMetadataOffset: flatbuffers.Offset): flatbuffers.Offset {\n        Footer.startFooter(builder);\n        Footer.addVersion(builder, version);\n        Footer.addSchema(builder, schemaOffset);\n        Footer.addDictionaries(builder, dictionariesOffset);\n        Footer.addRecordBatches(builder, recordBatchesOffset);\n        Footer.addCustomMetadata(builder, customMetadataOffset);\n        return Footer.endFooter(builder);\n    }\n}\n/**\n * @constructor\n */\nexport class Block {\n    bb: flatbuffers.ByteBuffer | null = null;\n\n    bb_pos: number = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Block\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Block {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n\n    /**\n     * Index to the start of the RecordBlock (note this is past the Message header)\n     *\n     * @returns flatbuffers.Long\n     */\n    offset(): flatbuffers.Long {\n        return this.bb!.readInt64(this.bb_pos);\n    }\n\n    /**\n     * Length of the metadata\n     *\n     * @returns number\n     */\n    metaDataLength(): number {\n        return this.bb!.readInt32(this.bb_pos + 8);\n    }\n\n    /**\n     * Length of the data (this is aligned so there can be a gap between this and\n     * the metadata).\n     *\n     * @returns flatbuffers.Long\n     */\n    bodyLength(): flatbuffers.Long {\n        return this.bb!.readInt64(this.bb_pos + 16);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long offset\n     * @param number metaDataLength\n     * @param flatbuffers.Long bodyLength\n     * @returns flatbuffers.Offset\n     */\n    static createBlock(builder: flatbuffers.Builder, offset: flatbuffers.Long, metaDataLength: number, bodyLength: flatbuffers.Long): flatbuffers.Offset {\n        builder.prep(8, 24);\n        builder.writeInt64(bodyLength);\n        builder.pad(4);\n        builder.writeInt32(metaDataLength);\n        builder.writeInt64(offset);\n        return builder.offset();\n    }\n\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/* eslint-disable @typescript-eslint/naming-convention */\n\nimport {\n    Block as _Block,\n    Footer as _Footer\n} from '../../fb/File';\n\nimport { flatbuffers } from 'flatbuffers';\n\nimport Long = flatbuffers.Long;\nimport Builder = flatbuffers.Builder;\nimport ByteBuffer = flatbuffers.ByteBuffer;\n\nimport { Schema } from '../../schema';\nimport { MetadataVersion } from '../../enum';\nimport { toUint8Array } from '../../util/buffer';\nimport { ArrayBufferViewInput } from '../../util/buffer';\n\n/** @ignore */\nclass Footer_ {\n\n    /** @nocollapse */\n    public static decode(buf: ArrayBufferViewInput) {\n        buf = new ByteBuffer(toUint8Array(buf));\n        const footer = _Footer.getRootAsFooter(buf);\n        const schema = Schema.decode(footer.schema()!);\n        return new OffHeapFooter(schema, footer) as Footer_;\n    }\n\n    /** @nocollapse */\n    public static encode(footer: Footer_) {\n\n        const b: Builder = new Builder();\n        const schemaOffset = Schema.encode(b, footer.schema);\n\n        _Footer.startRecordBatchesVector(b, footer.numRecordBatches);\n        [...footer.recordBatches()].slice().reverse().forEach((rb) => FileBlock.encode(b, rb));\n        const recordBatchesOffset = b.endVector();\n\n        _Footer.startDictionariesVector(b, footer.numDictionaries);\n        [...footer.dictionaryBatches()].slice().reverse().forEach((db) => FileBlock.encode(b, db));\n\n        const dictionaryBatchesOffset = b.endVector();\n\n        _Footer.startFooter(b);\n        _Footer.addSchema(b, schemaOffset);\n        _Footer.addVersion(b, MetadataVersion.V4);\n        _Footer.addRecordBatches(b, recordBatchesOffset);\n        _Footer.addDictionaries(b, dictionaryBatchesOffset);\n        _Footer.finishFooterBuffer(b, _Footer.endFooter(b));\n\n        return b.asUint8Array();\n    }\n\n    protected _recordBatches!: FileBlock[];\n    protected _dictionaryBatches!: FileBlock[];\n    public get numRecordBatches() { return this._recordBatches.length; }\n    public get numDictionaries() { return this._dictionaryBatches.length; }\n\n    constructor(public schema: Schema,\n                public version: MetadataVersion = MetadataVersion.V4,\n                recordBatches?: FileBlock[], dictionaryBatches?: FileBlock[]) {\n        recordBatches && (this._recordBatches = recordBatches);\n        dictionaryBatches && (this._dictionaryBatches = dictionaryBatches);\n    }\n\n    public *recordBatches(): Iterable<FileBlock> {\n        for (let block, i = -1, n = this.numRecordBatches; ++i < n;) {\n            if (block = this.getRecordBatch(i)) { yield block; }\n        }\n    }\n\n    public *dictionaryBatches(): Iterable<FileBlock> {\n        for (let block, i = -1, n = this.numDictionaries; ++i < n;) {\n            if (block = this.getDictionaryBatch(i)) { yield block; }\n        }\n    }\n\n    public getRecordBatch(index: number) {\n        return index >= 0\n            && index < this.numRecordBatches\n            && this._recordBatches[index] || null;\n    }\n\n    public getDictionaryBatch(index: number) {\n        return index >= 0\n            && index < this.numDictionaries\n            && this._dictionaryBatches[index] || null;\n    }\n}\n\nexport { Footer_ as Footer };\n\n/** @ignore */\nclass OffHeapFooter extends Footer_ {\n\n    public get numRecordBatches() { return this._footer.recordBatchesLength(); }\n    public get numDictionaries() { return this._footer.dictionariesLength(); }\n\n    constructor(schema: Schema, protected _footer: _Footer) {\n        super(schema, _footer.version());\n    }\n\n    public getRecordBatch(index: number) {\n        if (index >= 0 && index < this.numRecordBatches) {\n            const fileBlock = this._footer.recordBatches(index);\n            if (fileBlock) { return FileBlock.decode(fileBlock); }\n        }\n        return null;\n    }\n\n    public getDictionaryBatch(index: number) {\n        if (index >= 0 && index < this.numDictionaries) {\n            const fileBlock = this._footer.dictionaries(index);\n            if (fileBlock) { return FileBlock.decode(fileBlock); }\n        }\n        return null;\n    }\n}\n\n/** @ignore */\nexport class FileBlock {\n\n    /** @nocollapse */\n    public static decode(block: _Block) {\n        return new FileBlock(block.metaDataLength(), block.bodyLength(), block.offset());\n    }\n\n    /** @nocollapse */\n    public static encode(b: Builder, fileBlock: FileBlock) {\n        const { metaDataLength } = fileBlock;\n        const offset = new Long(fileBlock.offset, 0);\n        const bodyLength = new Long(fileBlock.bodyLength, 0);\n        return _Block.createBlock(b, offset, metaDataLength, bodyLength);\n    }\n\n    public offset: number;\n    public bodyLength: number;\n    public metaDataLength: number;\n\n    constructor(metaDataLength: number, bodyLength: Long | number, offset: Long | number) {\n        this.metaDataLength = metaDataLength;\n        this.offset = typeof offset === 'number' ? offset : offset.low;\n        this.bodyLength = typeof bodyLength === 'number' ? bodyLength : bodyLength.low;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport streamAdapters from './adapters';\nimport { decodeUtf8 } from '../util/utf8';\nimport { ITERATOR_DONE, Readable, Writable, AsyncQueue } from './interfaces';\nimport { toUint8Array, joinUint8Arrays, ArrayBufferViewInput } from '../util/buffer';\n\nimport {\n    isPromise, isFetchResponse,\n    isIterable, isAsyncIterable,\n    isReadableDOMStream, isReadableNodeStream\n} from '../util/compat';\n\n/** @ignore */\nexport type WritableSink<T> = Writable<T> | WritableStream<T> | NodeJS.WritableStream | null;\n/** @ignore */\nexport type ReadableSource<T> = Readable<T> | PromiseLike<T> | AsyncIterable<T> | ReadableStream<T> | NodeJS.ReadableStream | null;\n\n/** @ignore */\nexport class AsyncByteQueue<T extends ArrayBufferViewInput = Uint8Array> extends AsyncQueue<Uint8Array, T> {\n    public write(value: ArrayBufferViewInput | Uint8Array) {\n        if ((value = toUint8Array(value)).byteLength > 0) {\n            return super.write(value as T);\n        }\n    }\n    public toString(sync: true): string;\n    public toString(sync?: false): Promise<string>;\n    public toString(sync = false) {\n        return sync\n            ? decodeUtf8(this.toUint8Array(true))\n            : this.toUint8Array(false).then(decodeUtf8);\n    }\n    public toUint8Array(sync: true): Uint8Array;\n    public toUint8Array(sync?: false): Promise<Uint8Array>;\n    public toUint8Array(sync = false) {\n        return sync ? joinUint8Arrays(this._values as any[])[0] : (async () => {\n            const buffers = [];\n            let byteLength = 0;\n            for await (const chunk of this) {\n                buffers.push(chunk);\n                byteLength += chunk.byteLength;\n            }\n            return joinUint8Arrays(buffers, byteLength)[0];\n        })();\n    }\n}\n\n/** @ignore */\nexport class ByteStream implements IterableIterator<Uint8Array> {\n    private source!: ByteStreamSource<Uint8Array>;\n    constructor(source?: Iterable<ArrayBufferViewInput> | ArrayBufferViewInput) {\n        if (source) {\n            this.source = new ByteStreamSource(streamAdapters.fromIterable(source));\n        }\n    }\n    [Symbol.iterator]() { return this; }\n    public next(value?: any) { return this.source.next(value); }\n    public throw(value?: any) { return this.source.throw(value); }\n    public return(value?: any) { return this.source.return(value); }\n    public peek(size?: number | null) { return this.source.peek(size); }\n    public read(size?: number | null) { return this.source.read(size); }\n}\n\n/** @ignore */\nexport class AsyncByteStream implements Readable<Uint8Array>, AsyncIterableIterator<Uint8Array> {\n    private source!: AsyncByteStreamSource<Uint8Array>;\n    constructor(source?: PromiseLike<ArrayBufferViewInput> | Response | ReadableStream<ArrayBufferViewInput> | NodeJS.ReadableStream | AsyncIterable<ArrayBufferViewInput> | Iterable<ArrayBufferViewInput>) {\n        if (source instanceof AsyncByteStream) {\n            this.source = (source as AsyncByteStream).source;\n        } else if (source instanceof AsyncByteQueue) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));\n        } else if (isReadableNodeStream(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromNodeStream(source));\n        } else if (isReadableDOMStream<ArrayBufferViewInput>(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromDOMStream(source));\n        } else if (isFetchResponse(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromDOMStream(source.body!));\n        } else if (isIterable<ArrayBufferViewInput>(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromIterable(source));\n        } else if (isPromise<ArrayBufferViewInput>(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));\n        } else if (isAsyncIterable<ArrayBufferViewInput>(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));\n        }\n    }\n    [Symbol.asyncIterator]() { return this; }\n    public next(value?: any) { return this.source.next(value); }\n    public throw(value?: any) { return this.source.throw(value); }\n    public return(value?: any) { return this.source.return(value); }\n    public get closed(): Promise<void> { return this.source.closed; }\n    public cancel(reason?: any) { return this.source.cancel(reason); }\n    public peek(size?: number | null) { return this.source.peek(size); }\n    public read(size?: number | null) { return this.source.read(size); }\n}\n\n/** @ignore */\ntype ByteStreamSourceIterator<T> = Generator<T, null, { cmd: 'peek' | 'read'; size?: number | null }>;\n/** @ignore */\ntype AsyncByteStreamSourceIterator<T> = AsyncGenerator<T, null, { cmd: 'peek' | 'read'; size?: number | null }>;\n\n/** @ignore */\nclass ByteStreamSource<T> {\n    constructor(protected source: ByteStreamSourceIterator<T>) {}\n    public cancel(reason?: any) { this.return(reason); }\n    public peek(size?: number | null): T | null { return this.next(size, 'peek').value; }\n    public read(size?: number | null): T | null { return this.next(size, 'read').value; }\n    public next(size?: number | null, cmd: 'peek' | 'read' = 'read') { return this.source.next({ cmd, size }); }\n    public throw(value?: any) { return Object.create((this.source.throw && this.source.throw(value)) || ITERATOR_DONE); }\n    public return(value?: any) { return Object.create((this.source.return && this.source.return(value)) || ITERATOR_DONE); }\n}\n\n/** @ignore */\nclass AsyncByteStreamSource<T> implements Readable<T> {\n\n    private _closedPromise: Promise<void>;\n    private _closedPromiseResolve?: (value?: any) => void;\n    constructor (protected source: ByteStreamSourceIterator<T> | AsyncByteStreamSourceIterator<T>) {\n        this._closedPromise = new Promise((r) => this._closedPromiseResolve = r);\n    }\n    public async cancel(reason?: any) { await this.return(reason); }\n    public get closed(): Promise<void> { return this._closedPromise; }\n    public async read(size?: number | null): Promise<T | null> { return (await this.next(size, 'read')).value; }\n    public async peek(size?: number | null): Promise<T | null> { return (await this.next(size, 'peek')).value; }\n    public async next(size?: number | null, cmd: 'peek' | 'read' = 'read') { return (await this.source.next({ cmd, size })); }\n    public async throw(value?: any) {\n        const result = (this.source.throw && await this.source.throw(value)) || ITERATOR_DONE;\n        this._closedPromiseResolve && this._closedPromiseResolve();\n        this._closedPromiseResolve = undefined;\n        return Object.create(result);\n    }\n    public async return(value?: any) {\n        const result = (this.source.return && await this.source.return(value)) || ITERATOR_DONE;\n        this._closedPromiseResolve && this._closedPromiseResolve();\n        this._closedPromiseResolve = undefined;\n        return Object.create(result);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { FileHandle } from './interfaces';\nimport { ByteStream, AsyncByteStream } from './stream';\nimport { ArrayBufferViewInput, toUint8Array } from '../util/buffer';\n\n/** @ignore */\nexport class RandomAccessFile extends ByteStream {\n    public size: number;\n    public position = 0;\n    protected buffer: Uint8Array | null;\n    constructor(buffer: ArrayBufferViewInput, byteLength?: number) {\n        super();\n        this.buffer = toUint8Array(buffer);\n        this.size = typeof byteLength === 'undefined' ? this.buffer.byteLength : byteLength;\n    }\n    public readInt32(position: number) {\n        const { buffer, byteOffset } = this.readAt(position, 4);\n        return new DataView(buffer, byteOffset).getInt32(0, true);\n    }\n    public seek(position: number) {\n        this.position = Math.min(position, this.size);\n        return position < this.size;\n    }\n    public read(nBytes?: number | null) {\n        const { buffer, size, position } = this;\n        if (buffer && position < size) {\n            if (typeof nBytes !== 'number') { nBytes = Infinity; }\n            this.position = Math.min(size,\n                 position + Math.min(size - position, nBytes));\n            return buffer.subarray(position, this.position);\n        }\n        return null;\n    }\n    public readAt(position: number, nBytes: number) {\n        const buf = this.buffer;\n        const end = Math.min(this.size, position + nBytes);\n        return buf ? buf.subarray(position, end) : new Uint8Array(nBytes);\n    }\n    public close() { this.buffer && (this.buffer = null); }\n    public throw(value?: any) { this.close(); return { done: true, value }; }\n    public return(value?: any) { this.close(); return { done: true, value }; }\n}\n\n/** @ignore */\nexport class AsyncRandomAccessFile extends AsyncByteStream {\n    public size!: number;\n    public position = 0;\n    public _pending?: Promise<void>;\n    protected _handle: FileHandle | null;\n    constructor(file: FileHandle, byteLength?: number) {\n        super();\n        this._handle = file;\n        if (typeof byteLength === 'number') {\n            this.size = byteLength;\n        } else {\n            this._pending = (async () => {\n                this.size = (await file.stat()).size;\n                delete this._pending;\n            })();\n        }\n    }\n    public async readInt32(position: number) {\n        const { buffer, byteOffset } = await this.readAt(position, 4);\n        return new DataView(buffer, byteOffset).getInt32(0, true);\n    }\n    public async seek(position: number) {\n        this._pending && await this._pending;\n        this.position = Math.min(position, this.size);\n        return position < this.size;\n    }\n    public async read(nBytes?: number | null) {\n        this._pending && await this._pending;\n        const { _handle: file, size, position } = this;\n        if (file && position < size) {\n            if (typeof nBytes !== 'number') { nBytes = Infinity; }\n            let pos = position, offset = 0, bytesRead = 0;\n            const end = Math.min(size, pos + Math.min(size - pos, nBytes));\n            const buffer = new Uint8Array(Math.max(0, (this.position = end) - pos));\n            while ((pos += bytesRead) < end && (offset += bytesRead) < buffer.byteLength) {\n                ({ bytesRead } = await file.read(buffer, offset, buffer.byteLength - offset, pos));\n            }\n            return buffer;\n        }\n        return null;\n    }\n    public async readAt(position: number, nBytes: number) {\n        this._pending && await this._pending;\n        const { _handle: file, size } = this;\n        if (file && (position + nBytes) < size) {\n            const end = Math.min(size, position + nBytes);\n            const buffer = new Uint8Array(end - position);\n            return (await file.read(buffer, 0, nBytes, position)).buffer;\n        }\n        return new Uint8Array(nBytes);\n    }\n    public async close() { const f = this._handle; this._handle = null; f && await f.close(); }\n    public async throw(value?: any) { await this.close(); return { done: true, value }; }\n    public async return(value?: any) { await this.close(); return { done: true, value }; }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/** @ignore */\nconst carryBit16 = 1 << 16;\n\n/** @ignore */\nfunction intAsHex(value: number): string {\n    if (value < 0) {\n        value = 0xFFFFFFFF + value + 1;\n    }\n    return `0x${value.toString(16)}`;\n}\n\n/** @ignore */\nconst kInt32DecimalDigits = 8;\n/** @ignore */\nconst kPowersOfTen = [1,\n                      10,\n                      100,\n                      1000,\n                      10000,\n                      100000,\n                      1000000,\n                      10000000,\n                      100000000];\n\n/** @ignore */\nexport class BaseInt64 {\n    constructor (protected buffer: Uint32Array) {}\n\n    public high(): number { return this.buffer[1]; }\n    public low (): number { return this.buffer[0]; }\n\n    protected _times(other: BaseInt64) {\n        // Break the left and right numbers into 16 bit chunks\n        // so that we can multiply them without overflow.\n        const L = new Uint32Array([\n            this.buffer[1] >>> 16,\n            this.buffer[1] & 0xFFFF,\n            this.buffer[0] >>> 16,\n            this.buffer[0] & 0xFFFF\n        ]);\n\n        const R = new Uint32Array([\n            other.buffer[1] >>> 16,\n            other.buffer[1] & 0xFFFF,\n            other.buffer[0] >>> 16,\n            other.buffer[0] & 0xFFFF\n        ]);\n\n        let product = L[3] * R[3];\n        this.buffer[0] = product & 0xFFFF;\n\n        let sum = product >>> 16;\n\n        product = L[2] * R[3];\n        sum += product;\n\n        product = (L[3] * R[2]) >>> 0;\n        sum += product;\n\n        this.buffer[0] += sum << 16;\n\n        this.buffer[1] = (sum >>> 0 < product ? carryBit16 : 0);\n\n        this.buffer[1] += sum >>> 16;\n        this.buffer[1] += L[1] * R[3] + L[2] * R[2] + L[3] * R[1];\n        this.buffer[1] += (L[0] * R[3] + L[1] * R[2] + L[2] * R[1] + L[3] * R[0]) << 16;\n\n        return this;\n      }\n\n    protected _plus(other: BaseInt64) {\n        const sum = (this.buffer[0] + other.buffer[0]) >>> 0;\n        this.buffer[1] += other.buffer[1];\n        if (sum < (this.buffer[0] >>> 0)) {\n          ++this.buffer[1];\n        }\n        this.buffer[0] = sum;\n    }\n\n    public lessThan(other: BaseInt64): boolean {\n        return this.buffer[1] < other.buffer[1] ||\n            (this.buffer[1] === other.buffer[1] && this.buffer[0] < other.buffer[0]);\n    }\n\n    public equals(other: BaseInt64): boolean {\n        return this.buffer[1] === other.buffer[1] && this.buffer[0] == other.buffer[0];\n    }\n\n    public greaterThan(other: BaseInt64): boolean {\n        return other.lessThan(this);\n    }\n\n    public hex(): string {\n        return `${intAsHex(this.buffer[1])} ${intAsHex(this.buffer[0])}`;\n    }\n}\n\n/** @ignore */\nexport class Uint64 extends BaseInt64 {\n    public times(other: Uint64): Uint64 {\n        this._times(other);\n        return this;\n    }\n\n    public plus(other: Uint64): Uint64 {\n        this._plus(other);\n        return this;\n    }\n\n    /** @nocollapse */\n    public static from(val: any, out_buffer = new Uint32Array(2)): Uint64 {\n        return Uint64.fromString(\n            typeof(val) === 'string' ? val : val.toString(),\n            out_buffer\n        );\n    }\n\n    /** @nocollapse */\n    public static fromNumber(num: number, out_buffer = new Uint32Array(2)): Uint64 {\n        // Always parse numbers as strings - pulling out high and low bits\n        // directly seems to lose precision sometimes\n        // For example:\n        //     > -4613034156400212000 >>> 0\n        //     721782784\n        // The correct lower 32-bits are 721782752\n        return Uint64.fromString(num.toString(), out_buffer);\n    }\n\n    /** @nocollapse */\n    public static fromString(str: string, out_buffer = new Uint32Array(2)): Uint64 {\n        const length = str.length;\n\n        const out = new Uint64(out_buffer);\n        for (let posn = 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                          kInt32DecimalDigits : length - posn;\n            const chunk = new Uint64(new Uint32Array([parseInt(str.substr(posn, group), 10), 0]));\n            const multiple = new Uint64(new Uint32Array([kPowersOfTen[group], 0]));\n\n            out.times(multiple);\n            out.plus(chunk);\n\n            posn += group;\n        }\n\n        return out;\n    }\n\n    /** @nocollapse */\n    public static convertArray(values: (string|number)[]): Uint32Array {\n        const data = new Uint32Array(values.length * 2);\n        for (let i = -1, n = values.length; ++i < n;) {\n            Uint64.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 2 * i * 4, 2));\n        }\n        return data;\n    }\n\n    /** @nocollapse */\n    public static multiply(left: Uint64, right: Uint64): Uint64 {\n        const rtrn = new Uint64(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n\n    /** @nocollapse */\n    public static add(left: Uint64, right: Uint64): Uint64 {\n        const rtrn = new Uint64(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n}\n\n/** @ignore */\nexport class Int64 extends BaseInt64 {\n    public negate(): Int64 {\n        this.buffer[0] = ~this.buffer[0] + 1;\n        this.buffer[1] = ~this.buffer[1];\n\n        if (this.buffer[0] == 0) { ++this.buffer[1]; }\n        return this;\n    }\n\n    public times(other: Int64): Int64 {\n        this._times(other);\n        return this;\n    }\n\n    public plus(other: Int64): Int64 {\n        this._plus(other);\n        return this;\n    }\n\n    public lessThan(other: Int64): boolean {\n        // force high bytes to be signed\n        const this_high = this.buffer[1] << 0;\n        const other_high = other.buffer[1] << 0;\n        return this_high < other_high ||\n            (this_high === other_high && this.buffer[0] < other.buffer[0]);\n    }\n\n    /** @nocollapse */\n    public static from(val: any, out_buffer = new Uint32Array(2)): Int64 {\n        return Int64.fromString(\n            typeof(val) === 'string' ? val : val.toString(),\n            out_buffer\n        );\n    }\n\n    /** @nocollapse */\n    public static fromNumber(num: number, out_buffer = new Uint32Array(2)): Int64 {\n        // Always parse numbers as strings - pulling out high and low bits\n        // directly seems to lose precision sometimes\n        // For example:\n        //     > -4613034156400212000 >>> 0\n        //     721782784\n        // The correct lower 32-bits are 721782752\n        return Int64.fromString(num.toString(), out_buffer);\n    }\n\n    /** @nocollapse */\n    public static fromString(str: string, out_buffer = new Uint32Array(2)): Int64 {\n        // TODO: Assert that out_buffer is 0 and length = 2\n        const negate = str.startsWith('-');\n        const length = str.length;\n\n        const out = new Int64(out_buffer);\n        for (let posn = negate ? 1 : 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                          kInt32DecimalDigits : length - posn;\n            const chunk = new Int64(new Uint32Array([parseInt(str.substr(posn, group), 10), 0]));\n            const multiple = new Int64(new Uint32Array([kPowersOfTen[group], 0]));\n\n            out.times(multiple);\n            out.plus(chunk);\n\n            posn += group;\n        }\n        return negate ? out.negate() : out;\n    }\n\n    /** @nocollapse */\n    public static convertArray(values: (string|number)[]): Uint32Array {\n        const data = new Uint32Array(values.length * 2);\n        for (let i = -1, n = values.length; ++i < n;) {\n            Int64.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 2 * i * 4, 2));\n        }\n        return data;\n    }\n\n    /** @nocollapse */\n    public static multiply(left: Int64, right: Int64): Int64 {\n        const rtrn = new Int64(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n\n    /** @nocollapse */\n    public static add(left: Int64, right: Int64): Int64 {\n        const rtrn = new Int64(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n}\n\n/** @ignore */\nexport class Int128 {\n    constructor (private buffer: Uint32Array) {\n        // buffer[3] MSB (high)\n        // buffer[2]\n        // buffer[1]\n        // buffer[0] LSB (low)\n    }\n\n    public high(): Int64 {\n        return new Int64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));\n    }\n\n    public low(): Int64 {\n        return new Int64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset, 2));\n    }\n\n    public negate(): Int128 {\n        this.buffer[0] = ~this.buffer[0] + 1;\n        this.buffer[1] = ~this.buffer[1];\n        this.buffer[2] = ~this.buffer[2];\n        this.buffer[3] = ~this.buffer[3];\n\n        if (this.buffer[0] == 0) { ++this.buffer[1]; }\n        if (this.buffer[1] == 0) { ++this.buffer[2]; }\n        if (this.buffer[2] == 0) { ++this.buffer[3]; }\n        return this;\n    }\n\n    public times(other: Int128): Int128 {\n        // Break the left and right numbers into 32 bit chunks\n        // so that we can multiply them without overflow.\n        const L0 = new Uint64(new Uint32Array([this.buffer[3],  0]));\n        const L1 = new Uint64(new Uint32Array([this.buffer[2],  0]));\n        const L2 = new Uint64(new Uint32Array([this.buffer[1],  0]));\n        const L3 = new Uint64(new Uint32Array([this.buffer[0],  0]));\n\n        const R0 = new Uint64(new Uint32Array([other.buffer[3], 0]));\n        const R1 = new Uint64(new Uint32Array([other.buffer[2], 0]));\n        const R2 = new Uint64(new Uint32Array([other.buffer[1], 0]));\n        const R3 = new Uint64(new Uint32Array([other.buffer[0], 0]));\n\n        let product = Uint64.multiply(L3, R3);\n        this.buffer[0] = product.low();\n\n        const sum = new Uint64(new Uint32Array([product.high(), 0]));\n\n        product = Uint64.multiply(L2, R3);\n        sum.plus(product);\n\n        product = Uint64.multiply(L3, R2);\n        sum.plus(product);\n\n        this.buffer[1] = sum.low();\n\n        this.buffer[3] = (sum.lessThan(product) ? 1 : 0);\n\n        this.buffer[2] = sum.high();\n        const high = new Uint64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));\n\n        high.plus(Uint64.multiply(L1, R3))\n            .plus(Uint64.multiply(L2, R2))\n            .plus(Uint64.multiply(L3, R1));\n        this.buffer[3] += Uint64.multiply(L0, R3)\n                        .plus(Uint64.multiply(L1, R2))\n                        .plus(Uint64.multiply(L2, R1))\n                        .plus(Uint64.multiply(L3, R0)).low();\n\n        return this;\n    }\n\n    public plus(other: Int128): Int128 {\n        const sums = new Uint32Array(4);\n        sums[3] = (this.buffer[3] + other.buffer[3]) >>> 0;\n        sums[2] = (this.buffer[2] + other.buffer[2]) >>> 0;\n        sums[1] = (this.buffer[1] + other.buffer[1]) >>> 0;\n        sums[0] = (this.buffer[0] + other.buffer[0]) >>> 0;\n\n        if (sums[0] < (this.buffer[0] >>> 0)) {\n            ++sums[1];\n        }\n        if (sums[1] < (this.buffer[1] >>> 0)) {\n            ++sums[2];\n        }\n        if (sums[2] < (this.buffer[2] >>> 0)) {\n            ++sums[3];\n        }\n\n        this.buffer[3] = sums[3];\n        this.buffer[2] = sums[2];\n        this.buffer[1] = sums[1];\n        this.buffer[0] = sums[0];\n\n        return this;\n    }\n\n    public hex(): string {\n        return `${intAsHex(this.buffer[3])} ${intAsHex(this.buffer[2])} ${intAsHex(this.buffer[1])} ${intAsHex(this.buffer[0])}`;\n    }\n\n    /** @nocollapse */\n    public static multiply(left: Int128, right: Int128): Int128 {\n        const rtrn = new Int128(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n\n    /** @nocollapse */\n    public static add(left: Int128, right: Int128): Int128 {\n        const rtrn = new Int128(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n\n    /** @nocollapse */\n    public static from(val: any, out_buffer = new Uint32Array(4)): Int128 {\n        return Int128.fromString(\n            typeof(val) === 'string' ? val : val.toString(),\n            out_buffer\n        );\n    }\n\n    /** @nocollapse */\n    public static fromNumber(num: number, out_buffer = new Uint32Array(4)): Int128 {\n        // Always parse numbers as strings - pulling out high and low bits\n        // directly seems to lose precision sometimes\n        // For example:\n        //     > -4613034156400212000 >>> 0\n        //     721782784\n        // The correct lower 32-bits are 721782752\n        return Int128.fromString(num.toString(), out_buffer);\n    }\n\n    /** @nocollapse */\n    public static fromString(str: string, out_buffer = new Uint32Array(4)): Int128 {\n        // TODO: Assert that out_buffer is 0 and length = 4\n        const negate = str.startsWith('-');\n        const length = str.length;\n\n        const out = new Int128(out_buffer);\n        for (let posn = negate ? 1 : 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                          kInt32DecimalDigits : length - posn;\n            const chunk = new Int128(new Uint32Array([parseInt(str.substr(posn, group), 10), 0, 0, 0]));\n            const multiple = new Int128(new Uint32Array([kPowersOfTen[group], 0, 0, 0]));\n\n            out.times(multiple);\n            out.plus(chunk);\n\n            posn += group;\n        }\n\n        return negate ? out.negate() : out;\n    }\n\n    /** @nocollapse */\n    public static convertArray(values: (string|number)[]): Uint32Array {\n        // TODO: Distinguish between string and number at compile-time\n        const data = new Uint32Array(values.length * 4);\n        for (let i = -1, n = values.length; ++i < n;) {\n            Int128.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 4 * 4 * i, 4));\n        }\n        return data;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport * as type from '../type';\nimport { Field } from '../schema';\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\nimport { Visitor } from '../visitor';\nimport { packBools } from '../util/bit';\nimport { encodeUtf8 } from '../util/utf8';\nimport { Int64, Int128 } from '../util/int';\nimport { UnionMode, DateUnit } from '../enum';\nimport { toArrayBufferView } from '../util/buffer';\nimport { BufferRegion, FieldNode } from '../ipc/metadata/message';\n\n/** @ignore */\nexport interface VectorLoader extends Visitor {\n    visit<T extends DataType>(node: Field<T> | T): Data<T>;\n    visitMany<T extends DataType>(nodes: (Field<T> | T)[]): Data<T>[];\n}\n\n/** @ignore */\nexport class VectorLoader extends Visitor {\n    private bytes: Uint8Array;\n    private nodes: FieldNode[];\n    private nodesIndex = -1;\n    private buffers: BufferRegion[];\n    private buffersIndex = -1;\n    private dictionaries: Map<number, Vector<any>>;\n    constructor(bytes: Uint8Array, nodes: FieldNode[], buffers: BufferRegion[], dictionaries: Map<number, Vector<any>>) {\n        super();\n        this.bytes = bytes;\n        this.nodes = nodes;\n        this.buffers = buffers;\n        this.dictionaries = dictionaries;\n    }\n\n    public visit<T extends DataType>(node: Field<T> | T): Data<T> {\n        return super.visit(node instanceof Field ? node.type : node);\n    }\n\n    public visitNull            <T extends type.Null>            (type: T, { length,           } = this.nextFieldNode()) { return            Data.Null(type, 0, length);                                                                                                                                 }\n    public visitBool            <T extends type.Bool>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Bool(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitInt             <T extends type.Int>             (type: T, { length, nullCount } = this.nextFieldNode()) { return             Data.Int(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitFloat           <T extends type.Float>           (type: T, { length, nullCount } = this.nextFieldNode()) { return           Data.Float(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitUtf8            <T extends type.Utf8>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Utf8(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.readData(type));                                   }\n    public visitBinary          <T extends type.Binary>          (type: T, { length, nullCount } = this.nextFieldNode()) { return          Data.Binary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.readData(type));                                   }\n    public visitFixedSizeBinary <T extends type.FixedSizeBinary> (type: T, { length, nullCount } = this.nextFieldNode()) { return Data.FixedSizeBinary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitDate            <T extends type.Date_>           (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Date(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitTimestamp       <T extends type.Timestamp>       (type: T, { length, nullCount } = this.nextFieldNode()) { return       Data.Timestamp(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitTime            <T extends type.Time>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Time(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitDecimal         <T extends type.Decimal>         (type: T, { length, nullCount } = this.nextFieldNode()) { return         Data.Decimal(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitList            <T extends type.List>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.List(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.visit(type.children[0]));                          }\n    public visitStruct          <T extends type.Struct>          (type: T, { length, nullCount } = this.nextFieldNode()) { return          Data.Struct(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.visitMany(type.children));                                                 }\n    public visitUnion           <T extends type.Union>           (type: T                                              ) { return type.mode === UnionMode.Sparse ? this.visitSparseUnion(type as type.SparseUnion) : this.visitDenseUnion(type as type.DenseUnion);                                      }\n    public visitDenseUnion      <T extends type.DenseUnion>      (type: T, { length, nullCount } = this.nextFieldNode()) { return           Data.Union(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readTypeIds(type), this.readOffsets(type), this.visitMany(type.children)); }\n    public visitSparseUnion     <T extends type.SparseUnion>     (type: T, { length, nullCount } = this.nextFieldNode()) { return           Data.Union(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readTypeIds(type), this.visitMany(type.children));                         }\n    public visitDictionary      <T extends type.Dictionary>      (type: T, { length, nullCount } = this.nextFieldNode()) { return      Data.Dictionary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type.indices), this.readDictionary(type));                        }\n    public visitInterval        <T extends type.Interval>        (type: T, { length, nullCount } = this.nextFieldNode()) { return        Data.Interval(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitFixedSizeList   <T extends type.FixedSizeList>   (type: T, { length, nullCount } = this.nextFieldNode()) { return   Data.FixedSizeList(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.visit(type.children[0]));                                                  }\n    public visitMap             <T extends type.Map_>            (type: T, { length, nullCount } = this.nextFieldNode()) { return             Data.Map(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.visit(type.children[0]));                          }\n\n    protected nextFieldNode() { return this.nodes[++this.nodesIndex]; }\n    protected nextBufferRange() { return this.buffers[++this.buffersIndex]; }\n    protected readNullBitmap<T extends DataType>(type: T, nullCount: number, buffer = this.nextBufferRange()) {\n        return nullCount > 0 && this.readData(type, buffer) || new Uint8Array(0);\n    }\n    protected readOffsets<T extends DataType>(type: T, buffer?: BufferRegion) { return this.readData(type, buffer); }\n    protected readTypeIds<T extends DataType>(type: T, buffer?: BufferRegion) { return this.readData(type, buffer); }\n    protected readData<T extends DataType>(_type: T, { length, offset } = this.nextBufferRange()) {\n        return this.bytes.subarray(offset, offset + length);\n    }\n    protected readDictionary<T extends type.Dictionary>(type: T): Vector<T['dictionary']> {\n        return this.dictionaries.get(type.id)!;\n    }\n}\n\n/** @ignore */\nexport class JSONVectorLoader extends VectorLoader {\n    private sources: any[][];\n    constructor(sources: any[][], nodes: FieldNode[], buffers: BufferRegion[], dictionaries: Map<number, Vector<any>>) {\n        super(new Uint8Array(0), nodes, buffers, dictionaries);\n        this.sources = sources;\n    }\n    protected readNullBitmap<T extends DataType>(_type: T, nullCount: number, { offset } = this.nextBufferRange()) {\n        return nullCount <= 0 ? new Uint8Array(0) : packBools(this.sources[offset]);\n    }\n    protected readOffsets<T extends DataType>(_type: T, { offset } = this.nextBufferRange()) {\n        return toArrayBufferView(Uint8Array, toArrayBufferView(Int32Array, this.sources[offset]));\n    }\n    protected readTypeIds<T extends DataType>(type: T, { offset } = this.nextBufferRange()) {\n        return toArrayBufferView(Uint8Array, toArrayBufferView(type.ArrayType, this.sources[offset]));\n    }\n    protected readData<T extends DataType>(type: T, { offset } = this.nextBufferRange()) {\n        const { sources } = this;\n        if (DataType.isTimestamp(type)) {\n            return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset] as string[]));\n        } else if ((DataType.isInt(type) || DataType.isTime(type)) && type.bitWidth === 64) {\n            return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset] as string[]));\n        } else if (DataType.isDate(type) && type.unit === DateUnit.MILLISECOND) {\n            return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset] as string[]));\n        } else if (DataType.isDecimal(type)) {\n            return toArrayBufferView(Uint8Array, Int128.convertArray(sources[offset] as string[]));\n        } else if (DataType.isBinary(type) || DataType.isFixedSizeBinary(type)) {\n            return binaryDataFromJSON(sources[offset] as string[]);\n        } else if (DataType.isBool(type)) {\n            return packBools(sources[offset] as number[]);\n        } else if (DataType.isUtf8(type)) {\n            return encodeUtf8((sources[offset] as string[]).join(''));\n        }\n        return toArrayBufferView(Uint8Array, toArrayBufferView(type.ArrayType, sources[offset].map((x) => +x)));\n    }\n}\n\n/** @ignore */\nfunction binaryDataFromJSON(values: string[]) {\n    // \"DATA\": [\"49BC7D5B6C47D2\",\"3F5FB6D9322026\"]\n    // There are definitely more efficient ways to do this... but it gets the\n    // job done.\n    const joined = values.join('');\n    const data = new Uint8Array(joined.length / 2);\n    for (let i = 0; i < joined.length; i += 2) {\n        data[i >> 1] = parseInt(joined.substr(i, 2), 16);\n    }\n    return data;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { StructVector } from './struct';\nimport { valueToString } from '../util/pretty';\nimport { DataType, Struct, RowLike } from '../type';\n\n/** @ignore */ const kParent = Symbol.for('parent');\n/** @ignore */ const kRowIndex = Symbol.for('rowIndex');\n/** @ignore */ const kKeyToIdx = Symbol.for('keyToIdx');\n/** @ignore */ const kIdxToVal = Symbol.for('idxToVal');\n/** @ignore */ const kCustomInspect = Symbol.for('nodejs.util.inspect.custom');\n\nabstract class Row<K extends PropertyKey = any, V = any> implements Map<K, V> {\n\n    public readonly size: number;\n    public readonly [Symbol.toStringTag]: string;\n\n    protected [kRowIndex]: number;\n    protected [kParent]: Vector<Struct>;\n    protected [kKeyToIdx]: Map<K, number>;\n    protected [kIdxToVal]: V[];\n\n    constructor(parent: Vector<Struct>, numKeys: number) {\n        this[kParent] = parent;\n        this.size = numKeys;\n    }\n\n    public abstract keys(): IterableIterator<K>;\n    public abstract values(): IterableIterator<V>;\n    public abstract getKey(idx: number): K;\n    public abstract getIndex(key: K): number;\n    public abstract getValue(idx: number): V;\n    public abstract setValue(idx: number, val: V): void;\n\n    public entries() { return this[Symbol.iterator](); }\n\n    public has(key: K) { return this.get(key) !== undefined; }\n\n    public get(key: K) {\n        let val = undefined;\n        if (key !== null && key !== undefined) {\n            const ktoi = this[kKeyToIdx] || (this[kKeyToIdx] = new Map());\n            let idx = ktoi.get(key);\n            if (idx !== undefined) {\n                const itov = this[kIdxToVal] || (this[kIdxToVal] = new Array(this.size));\n                ((val = itov[idx]) !== undefined) || (itov[idx] = val = this.getValue(idx));\n            } else if ((idx = this.getIndex(key)) > -1) {\n                ktoi.set(key, idx);\n                const itov = this[kIdxToVal] || (this[kIdxToVal] = new Array(this.size));\n                ((val = itov[idx]) !== undefined) || (itov[idx] = val = this.getValue(idx));\n            }\n        }\n        return val;\n    }\n\n    public set(key: K, val: V) {\n        if (key !== null && key !== undefined) {\n            const ktoi = this[kKeyToIdx] || (this[kKeyToIdx] = new Map());\n            let idx = ktoi.get(key);\n            if (idx === undefined) {\n                ktoi.set(key, idx = this.getIndex(key));\n            }\n            if (idx > -1) {\n                const itov = this[kIdxToVal] || (this[kIdxToVal] = new Array(this.size));\n                itov[idx] = <any> this.setValue(idx, val);\n            }\n        }\n        return this;\n    }\n\n    public clear(): void { throw new Error(`Clearing ${this[Symbol.toStringTag]} not supported.`); }\n\n    public delete(_: K): boolean { throw new Error(`Deleting ${this[Symbol.toStringTag]} values not supported.`); }\n\n    public *[Symbol.iterator](): IterableIterator<[K, V]> {\n\n        const ki = this.keys();\n        const vi = this.values();\n        const ktoi = this[kKeyToIdx] || (this[kKeyToIdx] = new Map());\n        const itov = this[kIdxToVal] || (this[kIdxToVal] = new Array(this.size));\n\n        for (let k: K, v: V, i = 0, kr: IteratorResult<K>, vr: IteratorResult<V>;\n            !((kr = ki.next()).done || (vr = vi.next()).done);\n            ++i\n        ) {\n            k = kr.value;\n            v = vr.value;\n            itov[i] = v;\n            ktoi.has(k) || ktoi.set(k, i);\n            yield [k, v];\n        }\n    }\n\n    public forEach(callbackfn: (value: V, key: K, map: Map<K, V>) => void, thisArg?: any): void {\n\n        const ki = this.keys();\n        const vi = this.values();\n        const callback = thisArg === undefined ? callbackfn :\n            (v: V, k: K, m: Map<K, V>) => callbackfn.call(thisArg, v, k, m);\n        const ktoi = this[kKeyToIdx] || (this[kKeyToIdx] = new Map());\n        const itov = this[kIdxToVal] || (this[kIdxToVal] = new Array(this.size));\n\n        for (let k: K, v: V, i = 0, kr: IteratorResult<K>, vr: IteratorResult<V>;\n            !((kr = ki.next()).done || (vr = vi.next()).done);\n            ++i\n        ) {\n            k = kr.value;\n            v = vr.value;\n            itov[i] = v;\n            ktoi.has(k) || ktoi.set(k, i);\n            callback(v, k, this);\n        }\n    }\n\n    public toArray() { return [...this.values()]; }\n    public toJSON() {\n        const obj = {} as any;\n        this.forEach((val, key) => obj[key] = val);\n        return obj;\n    }\n\n    public inspect() { return this.toString(); }\n    public [kCustomInspect]() { return this.toString(); }\n    public toString() {\n        const str: string[] = [];\n        this.forEach((val, key) => {\n            key = valueToString(key);\n            val = valueToString(val);\n            str.push(`${key}: ${val}`);\n        });\n        return `{ ${str.join(', ')} }`;\n    }\n\n    protected static [Symbol.toStringTag] = ((proto: Row) => {\n        Object.defineProperties(proto, {\n            'size': { writable: true, enumerable: false, configurable: false, value: 0 },\n            [kParent]: { writable: true, enumerable: false, configurable: false, value: null },\n            [kRowIndex]: { writable: true, enumerable: false, configurable: false, value: -1 },\n        });\n        return (proto as any)[Symbol.toStringTag] = 'Row';\n    })(Row.prototype);\n}\n\nexport class MapRow<K extends DataType = any, V extends DataType = any> extends Row<K['TValue'], V['TValue'] | null> {\n    constructor(slice: Vector<Struct<{ key: K; value: V }>>) {\n        super(slice, slice.length);\n        return createRowProxy(this);\n    }\n    public keys() {\n        return this[kParent].getChildAt(0)![Symbol.iterator]();\n    }\n    public values() {\n        return this[kParent].getChildAt(1)![Symbol.iterator]();\n    }\n    public getKey(idx: number): K['TValue'] {\n        return this[kParent].getChildAt(0)!.get(idx);\n    }\n    public getIndex(key: K['TValue']): number {\n        return this[kParent].getChildAt(0)!.indexOf(key);\n    }\n    public getValue(index: number): V['TValue'] | null {\n        return this[kParent].getChildAt(1)!.get(index);\n    }\n    public setValue(index: number, value: V['TValue'] | null): void {\n        this[kParent].getChildAt(1)!.set(index, value);\n    }\n}\n\nexport class StructRow<T extends { [key: string]: DataType } = any> extends Row<keyof T, T[keyof T]['TValue'] | null> {\n    constructor(parent: StructVector<T>) {\n        super(parent, parent.type.children.length);\n        return defineRowProxyProperties(this);\n    }\n    public *keys() {\n        for (const field of this[kParent].type.children) {\n            yield field.name as keyof T;\n        }\n    }\n    public *values() {\n        for (const field of this[kParent].type.children) {\n            yield (this as RowLike<T>)[field.name];\n        }\n    }\n    public getKey(idx: number): keyof T {\n        return this[kParent].type.children[idx].name as keyof T;\n    }\n    public getIndex(key: keyof T): number {\n        return this[kParent].type.children.findIndex((f) => f.name === key);\n    }\n    public getValue(index: number): T[keyof T]['TValue'] | null {\n        return this[kParent].getChildAt(index)!.get(this[kRowIndex]);\n    }\n    public setValue(index: number, value: T[keyof T]['TValue'] | null): void {\n        return this[kParent].getChildAt(index)!.set(this[kRowIndex], value);\n    }\n}\n\nObject.setPrototypeOf(Row.prototype, Map.prototype);\n\n/** @ignore */\nconst defineRowProxyProperties = (() => {\n    const desc = { enumerable: true, configurable: false, get: null as any, set: null as any };\n    return <T extends Row>(row: T) => {\n        let idx = -1;\n        const ktoi = row[kKeyToIdx] || (row[kKeyToIdx] = new Map());\n        const getter = (key: any) => function(this: T) { return this.get(key); };\n        const setter = (key: any) => function(this: T, val: any) { return this.set(key, val); };\n        for (const key of row.keys()) {\n            ktoi.set(key, ++idx);\n            desc.get = getter(key);\n            desc.set = setter(key);\n            Object.prototype.hasOwnProperty.call(row, key) || (desc.enumerable = true, Object.defineProperty(row, key, desc));\n            Object.prototype.hasOwnProperty.call(row, idx) || (desc.enumerable = false, Object.defineProperty(row, idx, desc));\n        }\n        desc.get = desc.set = null;\n        return row;\n    };\n})();\n\n/** @ignore */\nconst createRowProxy = (() => {\n    if (typeof Proxy === 'undefined') {\n        return defineRowProxyProperties;\n    }\n    const has = Row.prototype.has;\n    const get = Row.prototype.get;\n    const set = Row.prototype.set;\n    const getKey = Row.prototype.getKey;\n    const RowProxyHandler: ProxyHandler<Row> = {\n        isExtensible() { return false; },\n        deleteProperty() { return false; },\n        preventExtensions() { return true; },\n        ownKeys(row: Row) { return [...row.keys()].map((x) => `${x}`); },\n        has(row: Row, key: PropertyKey) {\n            switch (key) {\n                case 'getKey': case 'getIndex': case 'getValue': case 'setValue': case 'toArray': case 'toJSON': case 'inspect':\n                case 'constructor': case 'isPrototypeOf': case 'propertyIsEnumerable': case 'toString': case 'toLocaleString': case 'valueOf':\n                case 'size': case 'has': case 'get': case 'set': case 'clear': case 'delete': case 'keys': case 'values': case 'entries': case 'forEach':\n                case '__proto__': case '__defineGetter__': case '__defineSetter__': case 'hasOwnProperty': case '__lookupGetter__': case '__lookupSetter__':\n                case Symbol.iterator: case Symbol.toStringTag: case kParent: case kRowIndex: case kIdxToVal: case kKeyToIdx: case kCustomInspect:\n                    return true;\n            }\n            if (typeof key === 'number' && !row.has(key)) {\n                key = row.getKey(key);\n            }\n            return row.has(key);\n        },\n        get(row: Row, key: PropertyKey, receiver: any) {\n            switch (key) {\n                case 'getKey': case 'getIndex': case 'getValue': case 'setValue': case 'toArray': case 'toJSON': case 'inspect':\n                case 'constructor': case 'isPrototypeOf': case 'propertyIsEnumerable': case 'toString': case 'toLocaleString': case 'valueOf':\n                case 'size': case 'has': case 'get': case 'set': case 'clear': case 'delete': case 'keys': case 'values': case 'entries': case 'forEach':\n                case '__proto__': case '__defineGetter__': case '__defineSetter__': case 'hasOwnProperty': case '__lookupGetter__': case '__lookupSetter__':\n                case Symbol.iterator: case Symbol.toStringTag: case kParent: case kRowIndex: case kIdxToVal: case kKeyToIdx: case kCustomInspect:\n                    return Reflect.get(row, key, receiver);\n            }\n            if (typeof key === 'number' && !has.call(receiver, key)) {\n                key = getKey.call(receiver, key);\n            }\n            return get.call(receiver, key);\n        },\n        set(row: Row, key: PropertyKey, val: any, receiver: any) {\n            switch (key) {\n                case kParent: case kRowIndex: case kIdxToVal: case kKeyToIdx:\n                    return Reflect.set(row, key, val, receiver);\n                case 'getKey': case 'getIndex': case 'getValue': case 'setValue': case 'toArray': case 'toJSON': case 'inspect':\n                case 'constructor': case 'isPrototypeOf': case 'propertyIsEnumerable': case 'toString': case 'toLocaleString': case 'valueOf':\n                case 'size': case 'has': case 'get': case 'set': case 'clear': case 'delete': case 'keys': case 'values': case 'entries': case 'forEach':\n                case '__proto__': case '__defineGetter__': case '__defineSetter__': case 'hasOwnProperty': case '__lookupGetter__': case '__lookupSetter__':\n                case Symbol.iterator: case Symbol.toStringTag:\n                    return false;\n            }\n            if (typeof key === 'number' && !has.call(receiver, key)) {\n                key = getKey.call(receiver, key);\n            }\n            return has.call(receiver, key) ? !!set.call(receiver, key, val) : false;\n        },\n    };\n    return <T extends Row>(row: T) => new Proxy(row, RowProxyHandler) as T;\n})();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { MapRow, StructRow } from '../vector/row';\nimport { compareArrayLike } from '../util/buffer';\nimport { BigInt, BigIntAvailable } from './compat';\n\n/** @ignore */\ntype RangeLike = { length: number; stride?: number };\n/** @ignore */\ntype ClampThen<T extends RangeLike> = (source: T, index: number) => any;\n/** @ignore */\ntype ClampRangeThen<T extends RangeLike> = (source: T, offset: number, length: number) => any;\n\nexport function clampIndex<T extends RangeLike>(source: T, index: number): number;\nexport function clampIndex<T extends RangeLike, N extends ClampThen<T> = ClampThen<T>>(source: T, index: number, then: N): ReturnType<N>;\n/** @ignore */\nexport function clampIndex<T extends RangeLike, N extends ClampThen<T> = ClampThen<T>>(source: T, index: number, then?: N) {\n    const length = source.length;\n    const adjust = index > -1 ? index : (length + (index % length));\n    return then ? then(source, adjust) : adjust;\n}\n\n/** @ignore */\nlet tmp: number;\nexport function clampRange<T extends RangeLike>(source: T, begin: number | undefined, end: number | undefined): [number, number];\nexport function clampRange<T extends RangeLike, N extends ClampRangeThen<T> = ClampRangeThen<T>>(source: T, begin: number | undefined, end: number | undefined, then: N): ReturnType<N>;\n/** @ignore */\nexport function clampRange<T extends RangeLike, N extends ClampRangeThen<T> = ClampRangeThen<T>>(source: T, begin: number | undefined, end: number | undefined, then?: N) {\n\n    // Adjust args similar to Array.prototype.slice. Normalize begin/end to\n    // clamp between 0 and length, and wrap around on negative indices, e.g.\n    // slice(-1, 5) or slice(5, -1)\n    const { length: len = 0 } = source;\n    let lhs = typeof begin !== 'number' ? 0 : begin;\n    let rhs = typeof end !== 'number' ? len : end;\n    // wrap around on negative start/end positions\n    (lhs < 0) && (lhs = ((lhs % len) + len) % len);\n    (rhs < 0) && (rhs = ((rhs % len) + len) % len);\n    // ensure lhs <= rhs\n    (rhs < lhs) && (tmp = lhs, lhs = rhs, rhs = tmp);\n     // ensure rhs <= length\n    (rhs > len) && (rhs = len);\n\n    return then ? then(source, lhs, rhs) : [lhs, rhs];\n}\n\nconst big0 = BigIntAvailable ? BigInt(0) : 0;\nconst isNaNFast = (value: any) => value !== value;\n\n/** @ignore */\nexport function createElementComparator(search: any) {\n    const typeofSearch = typeof search;\n    // Compare primitives\n    if (typeofSearch !== 'object' || search === null) {\n        // Compare NaN\n        if (isNaNFast(search)) {\n            return isNaNFast;\n        }\n        return typeofSearch !== 'bigint'\n            ? (value: any) => value === search\n            : (value: any) => (big0 + value) === search;\n    }\n    // Compare Dates\n    if (search instanceof Date) {\n        const valueOfSearch = search.valueOf();\n        return (value: any) => value instanceof Date ? (value.valueOf() === valueOfSearch) : false;\n    }\n    // Compare TypedArrays\n    if (ArrayBuffer.isView(search)) {\n        return (value: any) => value ? compareArrayLike(search, value) : false;\n    }\n    // Compare Maps and Rows\n    if (search instanceof Map) { return creatMapComparator(search); }\n    // Compare Array-likes\n    if (Array.isArray(search)) { return createArrayLikeComparator(search); }\n    // Compare Vectors\n    if (search instanceof Vector) { return createVectorComparator(search); }\n    // Compare non-empty Objects\n    return createObjectComparator(search);\n}\n\n/** @ignore */\nfunction createArrayLikeComparator(lhs: ArrayLike<any>) {\n    const comparators = [] as ((x: any) => boolean)[];\n    for (let i = -1, n = lhs.length; ++i < n;) {\n        comparators[i] = createElementComparator(lhs[i]);\n    }\n    return createSubElementsComparator(comparators);\n}\n\n/** @ignore */\nfunction creatMapComparator(lhs: Map<any, any>) {\n    let i = -1;\n    const comparators = [] as ((x: any) => boolean)[];\n    lhs.forEach((v) => comparators[++i] = createElementComparator(v));\n    return createSubElementsComparator(comparators);\n}\n\n/** @ignore */\nfunction createVectorComparator(lhs: Vector<any>) {\n    const comparators = [] as ((x: any) => boolean)[];\n    for (let i = -1, n = lhs.length; ++i < n;) {\n        comparators[i] = createElementComparator(lhs.get(i));\n    }\n    return createSubElementsComparator(comparators);\n}\n\n/** @ignore */\nfunction createObjectComparator(lhs: any) {\n    const keys = Object.keys(lhs);\n    // Only compare non-empty Objects\n    if (keys.length === 0) { return () => false; }\n    const comparators = [] as ((x: any) => boolean)[];\n    for (let i = -1, n = keys.length; ++i < n;) {\n        comparators[i] = createElementComparator(lhs[keys[i]]);\n    }\n    return createSubElementsComparator(comparators, keys);\n}\n\nfunction createSubElementsComparator(comparators: ((x: any) => boolean)[], keys?: Iterable<string>) {\n    return (rhs: any) => {\n        if (!rhs || typeof rhs !== 'object') {\n            return false;\n        }\n        switch (rhs.constructor) {\n            case Array: return compareArray(comparators, rhs);\n            case Map:\n            case MapRow:\n            case StructRow:\n                return compareObject(comparators, rhs, rhs.keys());\n            case Object:\n            case undefined: // support `Object.create(null)` objects\n                return compareObject(comparators, rhs, keys || Object.keys(rhs));\n        }\n        return rhs instanceof Vector ? compareVector(comparators, rhs) : false;\n    };\n}\n\nfunction compareArray(comparators: ((x: any) => boolean)[], arr: any[]) {\n    const n = comparators.length;\n    if (arr.length !== n) { return false; }\n    for (let i = -1; ++i < n;) {\n        if (!(comparators[i](arr[i]))) { return false; }\n    }\n    return true;\n}\n\nfunction compareVector(comparators: ((x: any) => boolean)[], vec: Vector) {\n    const n = comparators.length;\n    if (vec.length !== n) { return false; }\n    for (let i = -1; ++i < n;) {\n        if (!(comparators[i](vec.get(i)))) { return false; }\n    }\n    return true;\n}\n\nfunction compareObject(comparators: ((x: any) => boolean)[], obj: Map<any, any>, keys: Iterable<string>) {\n\n    const lKeyItr = keys[Symbol.iterator]();\n    const rKeyItr = obj instanceof Map ? obj.keys() : Object.keys(obj)[Symbol.iterator]();\n    const rValItr = obj instanceof Map ? obj.values() : Object.values(obj)[Symbol.iterator]();\n\n    let i = 0;\n    const n = comparators.length;\n    let rVal = rValItr.next();\n    let lKey = lKeyItr.next();\n    let rKey = rKeyItr.next();\n\n    for (; i < n && !lKey.done && !rKey.done && !rVal.done;\n         ++i, lKey = lKeyItr.next(), rKey = rKeyItr.next(), rVal = rValItr.next()) {\n        if (lKey.value !== rKey.value || !comparators[i](rVal.value)) {\n            break;\n        }\n    }\n    if (i === n && lKey.done && rKey.done && rVal.done) {\n        return true;\n    }\n    lKeyItr.return && lKeyItr.return();\n    rKeyItr.return && rKeyItr.return();\n    rValItr.return && rValItr.return();\n    return false;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Field } from '../schema';\nimport { Column } from '../column';\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\nimport { Chunked } from '../vector/chunked';\n\ntype RecordBatchCtor = typeof import('../recordbatch').RecordBatch;\n\nconst isArray = Array.isArray;\n\n/** @ignore */\nexport const selectArgs = <T>(Ctor: any, vals: any[]) => _selectArgs(Ctor, vals, [], 0) as T[];\n/** @ignore */\nexport const selectColumnArgs = <T extends { [key: string]: DataType }>(args: any[]) => {\n    const [fields, values] = _selectFieldArgs<T>(args, [[], []]);\n    return values.map((x, i) =>\n        x instanceof Column ? Column.new(x.field.clone(fields[i]), x) :\n        x instanceof Vector ? Column.new(fields[i], x) as Column<T[keyof T]> :\n                              Column.new(fields[i], [] as Vector<T[keyof T]>[]));\n};\n\n/** @ignore */\nexport const selectFieldArgs = <T extends { [key: string]: DataType }>(args: any[]) => _selectFieldArgs<T>(args, [[], []]);\n/** @ignore */\nexport const selectChunkArgs = <T>(Ctor: any, vals: any[]) => _selectChunkArgs(Ctor, vals, [], 0) as T[];\n/** @ignore */\nexport const selectVectorChildrenArgs = <T extends Vector>(Ctor: RecordBatchCtor, vals: any[]) => _selectVectorChildrenArgs(Ctor, vals, [], 0) as T[];\n/** @ignore */\nexport const selectColumnChildrenArgs = <T extends Column>(Ctor: RecordBatchCtor, vals: any[]) => _selectColumnChildrenArgs(Ctor, vals, [], 0) as T[];\n\n/** @ignore */\nfunction _selectArgs<T>(Ctor: any, vals: any[], res: T[], idx: number) {\n    let value: any, j = idx;\n    let i = -1;\n    const n = vals.length;\n    while (++i < n) {\n        if (isArray(value = vals[i])) {\n            j = _selectArgs(Ctor, value, res, j).length;\n        } else if (value instanceof Ctor) { res[j++] = value; }\n    }\n    return res;\n}\n\n/** @ignore */\nfunction _selectChunkArgs<T>(Ctor: any, vals: any[], res: T[], idx: number) {\n    let value: any, j = idx;\n    let i = -1;\n    const n = vals.length;\n    while (++i < n) {\n        if (isArray(value = vals[i])) {\n            j = _selectChunkArgs(Ctor, value, res, j).length;\n        } else if (value instanceof Chunked) {\n            j = _selectChunkArgs(Ctor, value.chunks, res, j).length;\n        } else if (value instanceof Ctor) { res[j++] = value; }\n    }\n    return res;\n}\n\n/** @ignore */\nfunction _selectVectorChildrenArgs<T extends Vector>(Ctor: RecordBatchCtor, vals: any[], res: T[], idx: number) {\n    let value: any, j = idx;\n    let i = -1;\n    const n = vals.length;\n    while (++i < n) {\n        if (isArray(value = vals[i])) {\n            j = _selectVectorChildrenArgs(Ctor, value, res, j).length;\n        } else if (value instanceof Ctor) {\n            j = _selectArgs(Vector, value.schema.fields.map((_, i) => value.getChildAt(i)!), res, j).length;\n        } else if (value instanceof Vector) { res[j++] = value as T; }\n    }\n    return res;\n}\n\n/** @ignore */\nfunction _selectColumnChildrenArgs<T extends Column>(Ctor: RecordBatchCtor, vals: any[], res: T[], idx: number) {\n    let value: any, j = idx;\n    let i = -1;\n    const n = vals.length;\n    while (++i < n) {\n        if (isArray(value = vals[i])) {\n            j = _selectColumnChildrenArgs(Ctor, value, res, j).length;\n        } else if (value instanceof Ctor) {\n            j = _selectArgs(Column, value.schema.fields.map((f, i) => Column.new(f, value.getChildAt(i)!)), res, j).length;\n        } else if (value instanceof Column) { res[j++] = value as T; }\n    }\n    return res;\n}\n\n/** @ignore */\nconst toKeysAndValues = (xs: [any[], any[]], [k, v]: [any, any], i: number) => (xs[0][i] = k, xs[1][i] = v, xs);\n\n/** @ignore */\nfunction _selectFieldArgs<T extends { [key: string]: DataType }>(vals: any[], ret: [Field<T[keyof T]>[], Vector<T[keyof T]>[]]): [Field<T[keyof T]>[], (T[keyof T] | Vector<T[keyof T]>)[]] {\n    let keys: any[];\n    let n: number;\n    switch (n = vals.length) {\n        case 0: return ret;\n        case 1:\n            keys = ret[0];\n            if (!(vals[0])) { return ret; }\n            if (isArray(vals[0])) { return _selectFieldArgs(vals[0], ret); }\n            if (!(vals[0] instanceof Data || vals[0] instanceof Vector || vals[0] instanceof DataType)) {\n                [keys, vals] = Object.entries(vals[0]).reduce(toKeysAndValues, ret);\n            }\n            break;\n        default:\n            !isArray(keys = vals[n - 1])\n                ? (vals = isArray(vals[0]) ? vals[0] : vals, keys = [])\n                : (vals = isArray(vals[0]) ? vals[0] : vals.slice(0, n - 1));\n    }\n\n    let fieldIndex = -1;\n    let valueIndex = -1;\n    let idx = -1;\n    const len = vals.length;\n    let field: number | string | Field<T[keyof T]>;\n    let val: Vector<T[keyof T]> | Data<T[keyof T]>;\n    const [fields, values] = ret as [Field<T[keyof T]>[], any[]];\n\n    while (++idx < len) {\n        val = vals[idx];\n        if (val instanceof Column && (values[++valueIndex] = val)) {\n            fields[++fieldIndex] = val.field.clone(keys[idx], val.type, true);\n        } else {\n            ({ [idx]: field = idx } = keys);\n            if (val instanceof DataType && (values[++valueIndex] = val)) {\n                fields[++fieldIndex] = Field.new(field, val as DataType, true) as Field<T[keyof T]>;\n            } else if (val && val.type && (values[++valueIndex] = val)) {\n                val instanceof Data && (values[valueIndex] = val = Vector.new(val) as Vector);\n                fields[++fieldIndex] = Field.new(field, val.type, true) as Field<T[keyof T]>;\n            }\n        }\n    }\n    return ret;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Field } from '../schema';\nimport { clampRange } from '../util/vector';\nimport { DataType, Dictionary } from '../type';\nimport { selectChunkArgs } from '../util/args';\nimport { DictionaryVector } from './dictionary';\nimport { AbstractVector, Vector } from '../vector';\nimport { Clonable, Sliceable, Applicative } from '../vector';\n\n/** @ignore */\ntype ChunkedDict<T extends DataType> = T extends Dictionary ? Vector<T['dictionary']> : null | never;\n/** @ignore */\ntype ChunkedKeys<T extends DataType> = T extends Dictionary ? Vector<T['indices']> | Chunked<T['indices']> : null | never;\n\n/** @ignore */\nexport type SearchContinuation<T extends Chunked> = (column: T, chunkIndex: number, valueIndex: number) => any;\n\n/** @ignore */\nclass ChunkedIterator<T extends DataType> implements IterableIterator<T['TValue'] | null> {\n    private chunkIndex = 0;\n    private chunkIterator: IterableIterator<T['TValue'] | null>;\n\n    constructor(\n        private chunks: Vector<T>[],\n    ) {\n        this.chunkIterator = this.getChunkIterator();\n    }\n\n    next(): IteratorResult<T['TValue'] | null> {\n        while (this.chunkIndex < this.chunks.length) {\n            const next = this.chunkIterator.next();\n\n            if (!next.done) {\n                return next;\n            }\n\n            if (++this.chunkIndex < this.chunks.length) {\n                this.chunkIterator = this.getChunkIterator();\n            }\n        }\n\n        return {done: true, value: null};\n    }\n\n    getChunkIterator() {\n        return this.chunks[this.chunkIndex][Symbol.iterator]();\n    }\n\n    [Symbol.iterator]() {\n        return this;\n    }\n}\n\n/** @ignore */\nexport class Chunked<T extends DataType = any>\n    extends AbstractVector<T>\n    implements Clonable<Chunked<T>>,\n               Sliceable<Chunked<T>>,\n               Applicative<T, Chunked<T>> {\n\n    /** @nocollapse */\n    public static flatten<T extends DataType>(...vectors: (Vector<T> | Vector<T>[])[]) {\n        return selectChunkArgs<Vector<T>>(Vector, vectors);\n    }\n\n    /** @nocollapse */\n    public static concat<T extends DataType>(...vectors: (Vector<T> | Vector<T>[])[]) {\n        const chunks = Chunked.flatten<T>(...vectors);\n        return new Chunked<T>(chunks[0].type, chunks);\n    }\n\n    protected _type: T;\n    protected _length: number;\n    protected _chunks: Vector<T>[];\n    protected _numChildren: number;\n    protected _children?: Chunked[];\n    protected _nullCount = -1;\n    protected _chunkOffsets: Uint32Array;\n\n    constructor(type: T, chunks: Vector<T>[] = [], offsets = calculateOffsets(chunks)) {\n        super();\n        this._type = type;\n        this._chunks = chunks;\n        this._chunkOffsets = offsets;\n        this._length = offsets[offsets.length - 1];\n        this._numChildren = (this._type.children || []).length;\n    }\n\n    public get type() { return this._type; }\n    public get length() { return this._length; }\n    public get chunks() { return this._chunks; }\n    public get typeId(): T['TType'] { return this._type.typeId; }\n    public get VectorName() { return `Chunked<${this._type}>`; }\n    public get data(): Data<T> {\n        return this._chunks[0] ? this._chunks[0].data : <any> null;\n    }\n\n    public get ArrayType() { return this._type.ArrayType; }\n    public get numChildren() { return this._numChildren; }\n    public get stride() { return this._chunks[0] ? this._chunks[0].stride : 1; }\n    public get byteLength(): number {\n        return this._chunks.reduce((byteLength, chunk) => byteLength + chunk.byteLength, 0);\n    }\n    public get nullCount() {\n        let nullCount = this._nullCount;\n        if (nullCount < 0) {\n            this._nullCount = nullCount = this._chunks.reduce((x, { nullCount }) => x + nullCount, 0);\n        }\n        return nullCount;\n    }\n\n    protected _indices?: ChunkedKeys<T>;\n    public get indices(): ChunkedKeys<T> | null {\n        if (DataType.isDictionary(this._type)) {\n            if (!this._indices) {\n                const chunks = (<any> this._chunks) as DictionaryVector<T, any>[];\n                this._indices = (chunks.length === 1\n                    ? chunks[0].indices\n                    : Chunked.concat(...chunks.map((x) => x.indices))) as ChunkedKeys<T>;\n            }\n            return this._indices;\n        }\n        return null;\n    }\n    public get dictionary(): ChunkedDict<T> | null {\n        if (DataType.isDictionary(this._type)) {\n            return this._chunks[this._chunks.length - 1].data.dictionary as ChunkedDict<T>;\n        }\n        return null;\n    }\n\n    public [Symbol.iterator](): IterableIterator<T['TValue'] | null> {\n        return new ChunkedIterator(this._chunks);\n    }\n\n    public clone(chunks = this._chunks): Chunked<T> {\n        return new Chunked(this._type, chunks);\n    }\n\n    public concat(...others: Vector<T>[]): Chunked<T> {\n        return this.clone(Chunked.flatten(this, ...others));\n    }\n\n    public slice(begin?: number, end?: number): Chunked<T> {\n        return clampRange(this, begin, end, this._sliceInternal);\n    }\n\n    public getChildAt<R extends DataType = any>(index: number): Chunked<R> | null {\n\n        if (index < 0 || index >= this._numChildren) { return null; }\n\n        const columns = this._children || (this._children = []);\n        let child: Chunked<R>, field: Field<R>, chunks: Vector<R>[];\n\n        if (child = columns[index]) { return child; }\n        if (field = ((this._type.children || [])[index] as Field<R>)) {\n            chunks = this._chunks\n                .map((vector) => vector.getChildAt<R>(index))\n                .filter((vec): vec is Vector<R> => vec != null);\n            if (chunks.length > 0) {\n                return (columns[index] = new Chunked<R>(field.type, chunks));\n            }\n        }\n\n        return null;\n    }\n\n    public search(index: number): [number, number] | null;\n    public search<N extends SearchContinuation<Chunked<T>>>(index: number, then?: N): ReturnType<N>;\n    public search<N extends SearchContinuation<Chunked<T>>>(index: number, then?: N) {\n        const idx = index;\n        // binary search to find the child vector and value indices\n        const offsets = this._chunkOffsets;\n        let rhs = offsets.length - 1;\n        // return early if out of bounds, or if there's just one child\n        if (idx < 0            ) { return null; }\n        if (idx >= offsets[rhs]) { return null; }\n        if (rhs <= 1           ) { return then ? then(this, 0, idx) : [0, idx]; }\n        let lhs = 0, pos = 0, mid = 0;\n        do {\n            if (lhs + 1 === rhs) {\n                return then ? then(this, lhs, idx - pos) : [lhs, idx - pos];\n            }\n            mid = lhs + ((rhs - lhs) / 2) | 0;\n            idx >= offsets[mid] ? (lhs = mid) : (rhs = mid);\n        } while (idx < offsets[rhs] && idx >= (pos = offsets[lhs]));\n        return null;\n    }\n\n    public isValid(index: number): boolean {\n        return !!this.search(index, this.isValidInternal);\n    }\n\n    public get(index: number): T['TValue'] | null {\n        return this.search(index, this.getInternal);\n    }\n\n    public set(index: number, value: T['TValue'] | null): void {\n        this.search(index, ({ chunks }, i, j) => chunks[i].set(j, value));\n    }\n\n    public indexOf(element: T['TValue'], offset?: number): number {\n        if (offset && typeof offset === 'number') {\n            return this.search(offset, (self, i, j) => this.indexOfInternal(self, i, j, element))!;\n        }\n        return this.indexOfInternal(this, 0, Math.max(0, offset || 0), element);\n    }\n\n    public toArray(): T['TArray'] {\n        const { chunks } = this;\n        const n = chunks.length;\n        let ArrayType: any = this._type.ArrayType;\n        if (n <= 0) { return new ArrayType(0); }\n        if (n <= 1) { return chunks[0].toArray(); }\n        let len = 0;\n        const src = new Array(n);\n        for (let i = -1; ++i < n;) {\n            len += (src[i] = chunks[i].toArray()).length;\n        }\n        if (ArrayType !== src[0].constructor) {\n            ArrayType = src[0].constructor;\n        }\n        const dst = new ArrayType(len);\n        const set: any = ArrayType === Array ? arraySet : typedSet;\n        for (let i = -1, idx = 0; ++i < n;) {\n            idx = set(src[i], dst, idx);\n        }\n        return dst;\n    }\n\n    protected getInternal({ _chunks }: Chunked<T>, i: number, j: number) { return _chunks[i].get(j); }\n    protected isValidInternal({ _chunks }: Chunked<T>, i: number, j: number) { return _chunks[i].isValid(j); }\n    protected indexOfInternal({ _chunks }: Chunked<T>, chunkIndex: number, fromIndex: number, element: T['TValue']) {\n        let i = chunkIndex - 1;\n        const n = _chunks.length;\n        let start = fromIndex, offset = 0, found = -1;\n        while (++i < n) {\n            if (~(found = _chunks[i].indexOf(element, start))) {\n                return offset + found;\n            }\n            start = 0;\n            offset += _chunks[i].length;\n        }\n        return -1;\n    }\n\n    protected _sliceInternal(self: Chunked<T>, begin: number, end: number) {\n        const slices: Vector<T>[] = [];\n        const { chunks, _chunkOffsets: chunkOffsets } = self;\n        for (let i = -1, n = chunks.length; ++i < n;) {\n            const chunk = chunks[i];\n            const chunkLength = chunk.length;\n            const chunkOffset = chunkOffsets[i];\n            // If the child is to the right of the slice boundary, we can stop\n            if (chunkOffset >= end) { break; }\n            // If the child is to the left of of the slice boundary, exclude\n            if (begin >= chunkOffset + chunkLength) { continue; }\n            // If the child is between both left and right boundaries, include w/o slicing\n            if (chunkOffset >= begin && (chunkOffset + chunkLength) <= end) {\n                slices.push(chunk);\n                continue;\n            }\n            // If the child overlaps one of the slice boundaries, include that slice\n            const from = Math.max(0, begin - chunkOffset);\n            const to = Math.min(end - chunkOffset, chunkLength);\n            slices.push(chunk.slice(from, to) as Vector<T>);\n        }\n        return self.clone(slices);\n    }\n}\n\n/** @ignore */\nfunction calculateOffsets<T extends DataType>(vectors: Vector<T>[]) {\n    const offsets = new Uint32Array((vectors || []).length + 1);\n    let offset = offsets[0] = 0;\n    const length = offsets.length;\n    for (let index = 0; ++index < length;) {\n        offsets[index] = (offset += vectors[index - 1].length);\n    }\n    return offsets;\n}\n\n/** @ignore */\nconst typedSet = (src: TypedArray, dst: TypedArray, offset: number) => {\n    dst.set(src, offset);\n    return (offset + src.length);\n};\n\n/** @ignore */\nconst arraySet = (src: any[], dst: any[], offset: number) => {\n    let idx = offset;\n    for (let i = -1, n = src.length; ++i < n;) {\n        dst[idx++] = src[i];\n    }\n    return idx;\n};\n\n/** @ignore */\ninterface TypedArray extends ArrayBufferView {\n    readonly length: number;\n    readonly [n: number]: number;\n    set(array: ArrayLike<number>, offset?: number): void;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Field } from './schema';\nimport { DataType } from './type';\nimport { Vector } from './vector';\nimport { Clonable, Sliceable, Applicative } from './vector';\nimport { VectorCtorArgs, VectorType as V } from './interfaces';\nimport { Chunked, SearchContinuation } from './vector/chunked';\n\nexport interface Column<T extends DataType = any> {\n    concat(...others: Vector<T>[]): Column<T>;\n    slice(begin?: number, end?: number): Column<T>;\n    clone(chunks?: Vector<T>[], offsets?: Uint32Array): Column<T>;\n}\n\nexport class Column<T extends DataType = any>\n    extends Chunked<T>\n    implements Clonable<Column<T>>,\n               Sliceable<Column<T>>,\n               Applicative<T, Column<T>> {\n\n    public static new<T extends DataType>(data: Data<T>, ...args: VectorCtorArgs<V<T>>): Column<T>;\n    public static new<T extends DataType>(field: string | Field<T>, ...chunks: (Vector<T> | Vector<T>[])[]): Column<T>;\n    public static new<T extends DataType>(field: string | Field<T>, data: Data<T>, ...args: VectorCtorArgs<V<T>>): Column<T>;\n    /** @nocollapse */\n    public static new<T extends DataType = any>(...args: any[]) {\n\n        let [field, data, ...rest] = args as [\n            string | Field<T>,\n            Data<T> | Vector<T> | (Data<T> | Vector<T>)[],\n            ...any[]\n        ];\n\n        if (typeof field !== 'string' && !(field instanceof Field)) {\n            data = <Data<T> | Vector<T> | (Data<T> | Vector<T>)[]> field;\n            field = '';\n        }\n\n        const chunks = Chunked.flatten<T>(\n            Array.isArray(data) ? [...data, ...rest] :\n            data instanceof Vector ? [data, ...rest] :\n            [Vector.new(data, ...rest)]\n        );\n\n        if (typeof field === 'string') {\n            const type = chunks[0].data.type;\n            field = new Field(field, type, true);\n        } else if (!field.nullable && chunks.some(({ nullCount }) => nullCount > 0)) {\n            field = field.clone({ nullable: true });\n        }\n        return new Column(field, chunks);\n    }\n\n    constructor(field: Field<T>, vectors: Vector<T>[] = [], offsets?: Uint32Array) {\n        vectors = Chunked.flatten<T>(...vectors);\n        super(field.type, vectors, offsets);\n        this._field = field;\n        if (vectors.length === 1 && !(this instanceof SingleChunkColumn)) {\n            return new SingleChunkColumn(field, vectors[0], this._chunkOffsets);\n        }\n    }\n\n    protected _field: Field<T>;\n    protected _children?: Column[];\n\n    public get field() { return this._field; }\n    public get name() { return this._field.name; }\n    public get nullable() { return this._field.nullable; }\n    public get metadata() { return this._field.metadata; }\n\n    public clone(chunks = this._chunks) {\n        return new Column(this._field, chunks);\n    }\n\n    public getChildAt<R extends DataType = any>(index: number): Column<R> | null {\n\n        if (index < 0 || index >= this.numChildren) { return null; }\n\n        const columns = this._children || (this._children = []);\n        let column: Column<R>, field: Field<R>, chunks: Vector<R>[];\n\n        if (column = columns[index]) { return column; }\n        if (field = ((this.type.children || [])[index] as Field<R>)) {\n            chunks = this._chunks\n                .map((vector) => vector.getChildAt<R>(index))\n                .filter((vec): vec is Vector<R> => vec != null);\n            if (chunks.length > 0) {\n                return (columns[index] = new Column<R>(field, chunks));\n            }\n        }\n\n        return null;\n    }\n}\n\n/** @ignore */\nclass SingleChunkColumn<T extends DataType = any> extends Column<T> {\n    protected _chunk: Vector<T>;\n    constructor(field: Field<T>, vector: Vector<T>, offsets?: Uint32Array) {\n        super(field, [vector], offsets);\n        this._chunk = vector;\n    }\n    public search(index: number): [number, number] | null;\n    public search<N extends SearchContinuation<Chunked<T>>>(index: number, then?: N): ReturnType<N>;\n    public search<N extends SearchContinuation<Chunked<T>>>(index: number, then?: N) {\n        return then ? then(this, 0, index) : [0, index];\n    }\n    public isValid(index: number): boolean {\n        return this._chunk.isValid(index);\n    }\n    public get(index: number): T['TValue'] | null {\n        return this._chunk.get(index);\n    }\n    public set(index: number, value: T['TValue'] | null): void {\n        this._chunk.set(index, value);\n    }\n    public indexOf(element: T['TValue'], offset?: number): number {\n        return this._chunk.indexOf(element, offset);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { flatbuffers } from 'flatbuffers';\nimport Long = flatbuffers.Long;\nimport Builder = flatbuffers.Builder;\n\nimport * as type from '../type';\nimport { Visitor } from '../visitor';\n\nimport {\n    Null,\n    Int,\n    FloatingPoint,\n    Binary,\n    Bool,\n    Utf8,\n    Decimal,\n    Date,\n    Time,\n    Timestamp,\n    Interval,\n    List,\n    Struct_ as Struct,\n    Union,\n    DictionaryEncoding,\n    FixedSizeBinary,\n    FixedSizeList,\n    Map as Map_,\n} from '../fb/Schema';\n\n/** @ignore */\nexport interface TypeAssembler extends Visitor {\n    visit<T extends type.DataType>(node: T, builder: Builder): number | undefined;\n}\n\n/** @ignore */\nexport class TypeAssembler extends Visitor {\n    public visit<T extends type.DataType>(node: T, builder: Builder): number | undefined {\n        return (node == null || builder == null) ? undefined : super.visit(node, builder);\n    }\n    public visitNull<T extends type.Null>(_node: T, b: Builder) {\n        Null.startNull(b);\n        return Null.endNull(b);\n    }\n    public visitInt<T extends type.Int>(node: T, b: Builder) {\n        Int.startInt(b);\n        Int.addBitWidth(b, node.bitWidth);\n        Int.addIsSigned(b, node.isSigned);\n        return Int.endInt(b);\n    }\n    public visitFloat<T extends type.Float>(node: T, b: Builder) {\n        FloatingPoint.startFloatingPoint(b);\n        FloatingPoint.addPrecision(b, node.precision);\n        return FloatingPoint.endFloatingPoint(b);\n    }\n    public visitBinary<T extends type.Binary>(_node: T, b: Builder) {\n        Binary.startBinary(b);\n        return Binary.endBinary(b);\n    }\n    public visitBool<T extends type.Bool>(_node: T, b: Builder) {\n        Bool.startBool(b);\n        return Bool.endBool(b);\n    }\n    public visitUtf8<T extends type.Utf8>(_node: T, b: Builder) {\n        Utf8.startUtf8(b);\n        return Utf8.endUtf8(b);\n    }\n    public visitDecimal<T extends type.Decimal>(node: T, b: Builder) {\n        Decimal.startDecimal(b);\n        Decimal.addScale(b, node.scale);\n        Decimal.addPrecision(b, node.precision);\n        return Decimal.endDecimal(b);\n    }\n    public visitDate<T extends type.Date_>(node: T, b: Builder) {\n        Date.startDate(b);\n        Date.addUnit(b, node.unit);\n        return Date.endDate(b);\n    }\n    public visitTime<T extends type.Time>(node: T, b: Builder) {\n        Time.startTime(b);\n        Time.addUnit(b, node.unit);\n        Time.addBitWidth(b, node.bitWidth);\n        return Time.endTime(b);\n    }\n    public visitTimestamp<T extends type.Timestamp>(node: T, b: Builder) {\n        const timezone = (node.timezone && b.createString(node.timezone)) || undefined;\n        Timestamp.startTimestamp(b);\n        Timestamp.addUnit(b, node.unit);\n        if (timezone !== undefined) {\n            Timestamp.addTimezone(b, timezone);\n        }\n        return Timestamp.endTimestamp(b);\n    }\n    public visitInterval<T extends type.Interval>(node: T, b: Builder) {\n        Interval.startInterval(b);\n        Interval.addUnit(b, node.unit);\n        return Interval.endInterval(b);\n    }\n    public visitList<T extends type.List>(_node: T, b: Builder) {\n        List.startList(b);\n        return List.endList(b);\n    }\n    public visitStruct<T extends type.Struct>(_node: T, b: Builder) {\n        Struct.startStruct_(b);\n        return Struct.endStruct_(b);\n    }\n    public visitUnion<T extends type.Union>(node: T, b: Builder) {\n        Union.startTypeIdsVector(b, node.typeIds.length);\n        const typeIds = Union.createTypeIdsVector(b, node.typeIds);\n        Union.startUnion(b);\n        Union.addMode(b, node.mode);\n        Union.addTypeIds(b, typeIds);\n        return Union.endUnion(b);\n    }\n    public visitDictionary<T extends type.Dictionary>(node: T, b: Builder) {\n        const indexType = this.visit(node.indices, b);\n        DictionaryEncoding.startDictionaryEncoding(b);\n        DictionaryEncoding.addId(b, new Long(node.id, 0));\n        DictionaryEncoding.addIsOrdered(b, node.isOrdered);\n        if (indexType !== undefined) {\n            DictionaryEncoding.addIndexType(b, indexType);\n        }\n        return DictionaryEncoding.endDictionaryEncoding(b);\n    }\n    public visitFixedSizeBinary<T extends type.FixedSizeBinary>(node: T, b: Builder) {\n        FixedSizeBinary.startFixedSizeBinary(b);\n        FixedSizeBinary.addByteWidth(b, node.byteWidth);\n        return FixedSizeBinary.endFixedSizeBinary(b);\n    }\n    public visitFixedSizeList<T extends type.FixedSizeList>(node: T, b: Builder) {\n        FixedSizeList.startFixedSizeList(b);\n        FixedSizeList.addListSize(b, node.listSize);\n        return FixedSizeList.endFixedSizeList(b);\n    }\n    public visitMap<T extends type.Map_>(node: T, b: Builder) {\n        Map_.startMap(b);\n        Map_.addKeysSorted(b, node.keysSorted);\n        return Map_.endMap(b);\n    }\n}\n\n/** @ignore */\nexport const instance = new TypeAssembler();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/* eslint-disable brace-style */\n\nimport { Schema, Field } from '../../schema';\nimport {\n    DataType, Dictionary, TimeBitWidth,\n    Utf8, Binary, Decimal, FixedSizeBinary,\n    List, FixedSizeList, Map_, Struct, Union,\n    Bool, Null, Int, Float, Date_, Time, Interval, Timestamp, IntBitWidth, Int32, TKeys,\n} from '../../type';\n\nimport { DictionaryBatch, RecordBatch, FieldNode, BufferRegion } from './message';\nimport { TimeUnit, Precision, IntervalUnit, UnionMode, DateUnit } from '../../enum';\n\n/** @ignore */\nexport function schemaFromJSON(_schema: any, dictionaries: Map<number, DataType> = new Map()) {\n    return new Schema(\n        schemaFieldsFromJSON(_schema, dictionaries),\n        customMetadataFromJSON(_schema['customMetadata']),\n        dictionaries\n    );\n}\n\n/** @ignore */\nexport function recordBatchFromJSON(b: any) {\n    return new RecordBatch(\n        b['count'],\n        fieldNodesFromJSON(b['columns']),\n        buffersFromJSON(b['columns'])\n    );\n}\n\n/** @ignore */\nexport function dictionaryBatchFromJSON(b: any) {\n    return new DictionaryBatch(\n        recordBatchFromJSON(b['data']),\n        b['id'], b['isDelta']\n    );\n}\n\n/** @ignore */\nfunction schemaFieldsFromJSON(_schema: any, dictionaries?: Map<number, DataType>) {\n    return (_schema['fields'] || []).filter(Boolean).map((f: any) => Field.fromJSON(f, dictionaries));\n}\n\n/** @ignore */\nfunction fieldChildrenFromJSON(_field: any, dictionaries?: Map<number, DataType>): Field[] {\n    return (_field['children'] || []).filter(Boolean).map((f: any) => Field.fromJSON(f, dictionaries));\n}\n\n/** @ignore */\nfunction fieldNodesFromJSON(xs: any[]): FieldNode[] {\n    return (xs || []).reduce<FieldNode[]>((fieldNodes, column: any) => [\n        ...fieldNodes,\n        new FieldNode(\n            column['count'],\n            nullCountFromJSON(column['VALIDITY'])\n        ),\n        ...fieldNodesFromJSON(column['children'])\n    ], [] as FieldNode[]);\n}\n\n/** @ignore */\nfunction buffersFromJSON(xs: any[], buffers: BufferRegion[] = []): BufferRegion[] {\n    for (let i = -1, n = (xs || []).length; ++i < n;) {\n        const column = xs[i];\n        column['VALIDITY'] && buffers.push(new BufferRegion(buffers.length, column['VALIDITY'].length));\n        column['TYPE'] && buffers.push(new BufferRegion(buffers.length, column['TYPE'].length));\n        column['OFFSET'] && buffers.push(new BufferRegion(buffers.length, column['OFFSET'].length));\n        column['DATA'] && buffers.push(new BufferRegion(buffers.length, column['DATA'].length));\n        buffers = buffersFromJSON(column['children'], buffers);\n    }\n    return buffers;\n}\n\n/** @ignore */\nfunction nullCountFromJSON(validity: number[]) {\n    return (validity || []).reduce((sum, val) => sum + +(val === 0), 0);\n}\n\n/** @ignore */\nexport function fieldFromJSON(_field: any, dictionaries?: Map<number, DataType>) {\n\n    let id: number;\n    let keys: TKeys | null;\n    let field: Field | void;\n    let dictMeta: any;\n    let type: DataType<any>;\n    let dictType: Dictionary;\n\n    // If no dictionary encoding\n    if (!dictionaries || !(dictMeta = _field['dictionary'])) {\n        type = typeFromJSON(_field, fieldChildrenFromJSON(_field, dictionaries));\n        field = new Field(_field['name'], type, _field['nullable'], customMetadataFromJSON(_field['customMetadata']));\n    }\n    // If dictionary encoded and the first time we've seen this dictionary id, decode\n    // the data type and child fields, then wrap in a Dictionary type and insert the\n    // data type into the dictionary types map.\n    else if (!dictionaries.has(id = dictMeta['id'])) {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta['indexType']) ? indexTypeFromJSON(keys) as TKeys : new Int32();\n        dictionaries.set(id, type = typeFromJSON(_field, fieldChildrenFromJSON(_field, dictionaries)));\n        dictType = new Dictionary(type, keys, id, dictMeta['isOrdered']);\n        field = new Field(_field['name'], dictType, _field['nullable'], customMetadataFromJSON(_field['customMetadata']));\n    }\n    // If dictionary encoded, and have already seen this dictionary Id in the schema, then reuse the\n    // data type and wrap in a new Dictionary type and field.\n    else {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta['indexType']) ? indexTypeFromJSON(keys) as TKeys : new Int32();\n        dictType = new Dictionary(dictionaries.get(id)!, keys, id, dictMeta['isOrdered']);\n        field = new Field(_field['name'], dictType, _field['nullable'], customMetadataFromJSON(_field['customMetadata']));\n    }\n    return field || null;\n}\n\n/** @ignore */\nfunction customMetadataFromJSON(_metadata?: Record<string, string>) {\n    return new Map<string, string>(Object.entries(_metadata || {}));\n}\n\n/** @ignore */\nfunction indexTypeFromJSON(_type: any) {\n    return new Int(_type['isSigned'], _type['bitWidth']);\n}\n\n/** @ignore */\nfunction typeFromJSON(f: any, children?: Field[]): DataType<any> {\n\n    const typeId = f['type']['name'];\n\n    switch (typeId) {\n        case 'NONE':   return new Null();\n        case 'null':   return new Null();\n        case 'binary': return new Binary();\n        case 'utf8':   return new Utf8();\n        case 'bool':   return new Bool();\n        case 'list':   return new List((children || [])[0]);\n        case 'struct': return new Struct(children || []);\n        case 'struct_': return new Struct(children || []);\n    }\n\n    switch (typeId) {\n        case 'int': {\n            const t = f['type'];\n            return new Int(t['isSigned'], t['bitWidth'] as IntBitWidth);\n        }\n        case 'floatingpoint': {\n            const t = f['type'];\n            return new Float(Precision[t['precision']] as any);\n        }\n        case 'decimal': {\n            const t = f['type'];\n            return new Decimal(t['scale'], t['precision']);\n        }\n        case 'date': {\n            const t = f['type'];\n            return new Date_(DateUnit[t['unit']] as any);\n        }\n        case 'time': {\n            const t = f['type'];\n            return new Time(TimeUnit[t['unit']] as any, t['bitWidth'] as TimeBitWidth);\n        }\n        case 'timestamp': {\n            const t = f['type'];\n            return new Timestamp(TimeUnit[t['unit']] as any, t['timezone']);\n        }\n        case 'interval': {\n            const t = f['type'];\n            return new Interval(IntervalUnit[t['unit']] as any);\n        }\n        case 'union': {\n            const t = f['type'];\n            return new Union(UnionMode[t['mode']] as any, (t['typeIds'] || []), children || []);\n        }\n        case 'fixedsizebinary': {\n            const t = f['type'];\n            return new FixedSizeBinary(t['byteWidth']);\n        }\n        case 'fixedsizelist': {\n            const t = f['type'];\n            return new FixedSizeList(t['listSize'], (children || [])[0]);\n        }\n        case 'map': {\n            const t = f['type'];\n            return new Map_((children || [])[0], t['keysSorted']);\n        }\n    }\n    throw new Error(`Unrecognized type: \"${typeId}\"`);\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/* eslint-disable brace-style */\n\nimport { flatbuffers } from 'flatbuffers';\n\nimport {\n    Type,\n    Int as _Int,\n    Field as _Field,\n    Schema as _Schema,\n    Buffer as _Buffer,\n    KeyValue as _KeyValue,\n    Endianness as _Endianness,\n    DictionaryEncoding as _DictionaryEncoding,\n    FloatingPoint as _FloatingPoint,\n    Decimal as _Decimal,\n    Date as _Date,\n    Time as _Time,\n    Timestamp as _Timestamp,\n    Interval as _Interval,\n    Union as _Union,\n    FixedSizeBinary as _FixedSizeBinary,\n    FixedSizeList as _FixedSizeList,\n    Map as _Map,\n} from '../../fb/Schema';\n\nimport {\n    Message as _Message,\n    FieldNode as _FieldNode,\n    RecordBatch as _RecordBatch,\n    DictionaryBatch as _DictionaryBatch,\n} from '../../fb/Message';\n\nimport { Schema, Field } from '../../schema';\nimport { toUint8Array } from '../../util/buffer';\nimport { ArrayBufferViewInput } from '../../util/buffer';\nimport { MessageHeader, MetadataVersion } from '../../enum';\nimport { instance as typeAssembler } from '../../visitor/typeassembler';\nimport { fieldFromJSON, schemaFromJSON, recordBatchFromJSON, dictionaryBatchFromJSON } from './json';\n\nimport Long = flatbuffers.Long;\nimport Builder = flatbuffers.Builder;\nimport ByteBuffer = flatbuffers.ByteBuffer;\n\nimport {\n    DataType, Dictionary, TimeBitWidth,\n    Utf8, Binary, Decimal, FixedSizeBinary,\n    List, FixedSizeList, Map_, Struct, Union,\n    Bool, Null, Int, Float, Date_, Time, Interval, Timestamp, IntBitWidth, Int32, TKeys,\n} from '../../type';\n\n/**\n * @ignore\n * @private\n **/\nexport class Message<T extends MessageHeader = any> {\n\n    /** @nocollapse */\n    public static fromJSON<T extends MessageHeader>(msg: any, headerType: T): Message<T> {\n        const message = new Message(0, MetadataVersion.V4, headerType);\n        message._createHeader = messageHeaderFromJSON(msg, headerType);\n        return message;\n    }\n\n    /** @nocollapse */\n    public static decode(buf: ArrayBufferViewInput) {\n        buf = new ByteBuffer(toUint8Array(buf));\n        const _message = _Message.getRootAsMessage(buf);\n        const bodyLength: Long = _message.bodyLength()!;\n        const version: MetadataVersion = _message.version();\n        const headerType: MessageHeader = _message.headerType();\n        const message = new Message(bodyLength, version, headerType);\n        message._createHeader = decodeMessageHeader(_message, headerType);\n        return message;\n    }\n\n    /** @nocollapse */\n    public static encode<T extends MessageHeader>(message: Message<T>) {\n        const b = new Builder();\n        let headerOffset = -1;\n        if (message.isSchema()) {\n            headerOffset = Schema.encode(b, message.header() as Schema);\n        } else if (message.isRecordBatch()) {\n            headerOffset = RecordBatch.encode(b, message.header() as RecordBatch);\n        } else if (message.isDictionaryBatch()) {\n            headerOffset = DictionaryBatch.encode(b, message.header() as DictionaryBatch);\n        }\n        _Message.startMessage(b);\n        _Message.addVersion(b, MetadataVersion.V4);\n        _Message.addHeader(b, headerOffset);\n        _Message.addHeaderType(b, message.headerType);\n        _Message.addBodyLength(b, new Long(message.bodyLength, 0));\n        _Message.finishMessageBuffer(b, _Message.endMessage(b));\n        return b.asUint8Array();\n    }\n\n    /** @nocollapse */\n    public static from(header: Schema | RecordBatch | DictionaryBatch, bodyLength = 0) {\n        if (header instanceof Schema) {\n            return new Message(0, MetadataVersion.V4, MessageHeader.Schema, header);\n        }\n        if (header instanceof RecordBatch) {\n            return new Message(bodyLength, MetadataVersion.V4, MessageHeader.RecordBatch, header);\n        }\n        if (header instanceof DictionaryBatch) {\n            return new Message(bodyLength, MetadataVersion.V4, MessageHeader.DictionaryBatch, header);\n        }\n        throw new Error(`Unrecognized Message header: ${header}`);\n    }\n\n    public body: Uint8Array;\n    protected _headerType: T;\n    protected _bodyLength: number;\n    protected _version: MetadataVersion;\n    public get type() { return this.headerType; }\n    public get version() { return this._version; }\n    public get headerType() { return this._headerType; }\n    public get bodyLength() { return this._bodyLength; }\n    protected _createHeader!: MessageHeaderDecoder;\n    public header() { return this._createHeader<T>(); }\n    public isSchema(): this is Message<MessageHeader.Schema> { return this.headerType === MessageHeader.Schema; }\n    public isRecordBatch(): this is Message<MessageHeader.RecordBatch> { return this.headerType === MessageHeader.RecordBatch; }\n    public isDictionaryBatch(): this is Message<MessageHeader.DictionaryBatch> { return this.headerType === MessageHeader.DictionaryBatch; }\n\n    constructor(bodyLength: Long | number, version: MetadataVersion, headerType: T, header?: any) {\n        this._version = version;\n        this._headerType = headerType;\n        this.body = new Uint8Array(0);\n        header && (this._createHeader = () => header);\n        this._bodyLength = typeof bodyLength === 'number' ? bodyLength : bodyLength.low;\n    }\n}\n\n/**\n * @ignore\n * @private\n **/\nexport class RecordBatch {\n    protected _length: number;\n    protected _nodes: FieldNode[];\n    protected _buffers: BufferRegion[];\n    public get nodes() { return this._nodes; }\n    public get length() { return this._length; }\n    public get buffers() { return this._buffers; }\n    constructor(length: Long | number, nodes: FieldNode[], buffers: BufferRegion[]) {\n        this._nodes = nodes;\n        this._buffers = buffers;\n        this._length = typeof length === 'number' ? length : length.low;\n    }\n}\n\n/**\n * @ignore\n * @private\n **/\nexport class DictionaryBatch {\n\n    protected _id: number;\n    protected _isDelta: boolean;\n    protected _data: RecordBatch;\n    public get id() { return this._id; }\n    public get data() { return this._data; }\n    public get isDelta() { return this._isDelta; }\n    public get length(): number { return this.data.length; }\n    public get nodes(): FieldNode[] { return this.data.nodes; }\n    public get buffers(): BufferRegion[] { return this.data.buffers; }\n\n    constructor(data: RecordBatch, id: Long | number, isDelta = false) {\n        this._data = data;\n        this._isDelta = isDelta;\n        this._id = typeof id === 'number' ? id : id.low;\n    }\n}\n\n/**\n * @ignore\n * @private\n **/\nexport class BufferRegion {\n    public offset: number;\n    public length: number;\n    constructor(offset: Long | number, length: Long | number) {\n        this.offset = typeof offset === 'number' ? offset : offset.low;\n        this.length = typeof length === 'number' ? length : length.low;\n    }\n}\n\n/**\n * @ignore\n * @private\n **/\nexport class FieldNode {\n    public length: number;\n    public nullCount: number;\n    constructor(length: Long | number, nullCount: Long | number) {\n        this.length = typeof length === 'number' ? length : length.low;\n        this.nullCount = typeof nullCount === 'number' ? nullCount : nullCount.low;\n    }\n}\n\n/** @ignore */\nfunction messageHeaderFromJSON(message: any, type: MessageHeader) {\n    return (() => {\n        switch (type) {\n            case MessageHeader.Schema: return Schema.fromJSON(message);\n            case MessageHeader.RecordBatch: return RecordBatch.fromJSON(message);\n            case MessageHeader.DictionaryBatch: return DictionaryBatch.fromJSON(message);\n        }\n        throw new Error(`Unrecognized Message type: { name: ${MessageHeader[type]}, type: ${type} }`);\n    }) as MessageHeaderDecoder;\n}\n\n/** @ignore */\nfunction decodeMessageHeader(message: _Message, type: MessageHeader) {\n    return (() => {\n        switch (type) {\n            case MessageHeader.Schema: return Schema.decode(message.header(new _Schema())!);\n            case MessageHeader.RecordBatch: return RecordBatch.decode(message.header(new _RecordBatch())!, message.version());\n            case MessageHeader.DictionaryBatch: return DictionaryBatch.decode(message.header(new _DictionaryBatch())!, message.version());\n        }\n        throw new Error(`Unrecognized Message type: { name: ${MessageHeader[type]}, type: ${type} }`);\n    }) as MessageHeaderDecoder;\n}\n\nField['encode'] = encodeField;\nField['decode'] = decodeField;\nField['fromJSON'] = fieldFromJSON;\n\nSchema['encode'] = encodeSchema;\nSchema['decode'] = decodeSchema;\nSchema['fromJSON'] = schemaFromJSON;\n\nRecordBatch['encode'] = encodeRecordBatch;\nRecordBatch['decode'] = decodeRecordBatch;\nRecordBatch['fromJSON'] = recordBatchFromJSON;\n\nDictionaryBatch['encode'] = encodeDictionaryBatch;\nDictionaryBatch['decode'] = decodeDictionaryBatch;\nDictionaryBatch['fromJSON'] = dictionaryBatchFromJSON;\n\nFieldNode['encode'] = encodeFieldNode;\nFieldNode['decode'] = decodeFieldNode;\n\nBufferRegion['encode'] = encodeBufferRegion;\nBufferRegion['decode'] = decodeBufferRegion;\n\ndeclare module '../../schema' {\n    namespace Field {\n        export { encodeField as encode };\n        export { decodeField as decode };\n        export { fieldFromJSON as fromJSON };\n    }\n    namespace Schema {\n        export { encodeSchema as encode };\n        export { decodeSchema as decode };\n        export { schemaFromJSON as fromJSON };\n    }\n}\n\ndeclare module './message' {\n    namespace RecordBatch {\n        export { encodeRecordBatch as encode };\n        export { decodeRecordBatch as decode };\n        export { recordBatchFromJSON as fromJSON };\n    }\n    namespace DictionaryBatch {\n        export { encodeDictionaryBatch as encode };\n        export { decodeDictionaryBatch as decode };\n        export { dictionaryBatchFromJSON as fromJSON };\n    }\n    namespace FieldNode {\n        export { encodeFieldNode as encode };\n        export { decodeFieldNode as decode };\n    }\n    namespace BufferRegion {\n        export { encodeBufferRegion as encode };\n        export { decodeBufferRegion as decode };\n    }\n}\n\n/** @ignore */\nfunction decodeSchema(_schema: _Schema, dictionaries: Map<number, DataType> = new Map()) {\n    const fields = decodeSchemaFields(_schema, dictionaries);\n    return new Schema(fields, decodeCustomMetadata(_schema), dictionaries);\n}\n\n/** @ignore */\nfunction decodeRecordBatch(batch: _RecordBatch, version = MetadataVersion.V4) {\n    return new RecordBatch(batch.length(), decodeFieldNodes(batch), decodeBuffers(batch, version));\n}\n\n/** @ignore */\nfunction decodeDictionaryBatch(batch: _DictionaryBatch, version = MetadataVersion.V4) {\n    return new DictionaryBatch(RecordBatch.decode(batch.data()!, version), batch.id(), batch.isDelta());\n}\n\n/** @ignore */\nfunction decodeBufferRegion(b: _Buffer) {\n    return new BufferRegion(b.offset(), b.length());\n}\n\n/** @ignore */\nfunction decodeFieldNode(f: _FieldNode) {\n    return new FieldNode(f.length(), f.nullCount());\n}\n\n/** @ignore */\nfunction decodeFieldNodes(batch: _RecordBatch) {\n    const nodes = [] as FieldNode[];\n    for (let f, i = -1, j = -1, n = batch.nodesLength(); ++i < n;) {\n        if (f = batch.nodes(i)) {\n            nodes[++j] = FieldNode.decode(f);\n        }\n    }\n    return nodes;\n}\n\n/** @ignore */\nfunction decodeBuffers(batch: _RecordBatch, version: MetadataVersion) {\n    const bufferRegions = [] as BufferRegion[];\n    for (let b, i = -1, j = -1, n = batch.buffersLength(); ++i < n;) {\n        if (b = batch.buffers(i)) {\n        // If this Arrow buffer was written before version 4,\n        // advance the buffer's bb_pos 8 bytes to skip past\n        // the now-removed page_id field\n        if (version < MetadataVersion.V4) {\n                b.bb_pos += (8 * (i + 1));\n            }\n            bufferRegions[++j] = BufferRegion.decode(b);\n        }\n    }\n    return bufferRegions;\n}\n\n/** @ignore */\nfunction decodeSchemaFields(schema: _Schema, dictionaries?: Map<number, DataType>) {\n    const fields = [] as Field[];\n    for (let f, i = -1, j = -1, n = schema.fieldsLength(); ++i < n;) {\n        if (f = schema.fields(i)) {\n            fields[++j] = Field.decode(f, dictionaries);\n        }\n    }\n    return fields;\n}\n\n/** @ignore */\nfunction decodeFieldChildren(field: _Field, dictionaries?: Map<number, DataType>): Field[] {\n    const children = [] as Field[];\n    for (let f, i = -1, j = -1, n = field.childrenLength(); ++i < n;) {\n        if (f = field.children(i)) {\n            children[++j] = Field.decode(f, dictionaries);\n        }\n    }\n    return children;\n}\n\n/** @ignore */\nfunction decodeField(f: _Field, dictionaries?: Map<number, DataType>) {\n\n    let id: number;\n    let field: Field | void;\n    let type: DataType<any>;\n    let keys: _Int | TKeys | null;\n    let dictType: Dictionary;\n    let dictMeta: _DictionaryEncoding | null;\n\n    // If no dictionary encoding\n    if (!dictionaries || !(dictMeta = f.dictionary())) {\n        type = decodeFieldType(f, decodeFieldChildren(f, dictionaries));\n        field = new Field(f.name()!, type, f.nullable(), decodeCustomMetadata(f));\n    }\n    // If dictionary encoded and the first time we've seen this dictionary id, decode\n    // the data type and child fields, then wrap in a Dictionary type and insert the\n    // data type into the dictionary types map.\n    else if (!dictionaries.has(id = dictMeta.id().low)) {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta.indexType()) ? decodeIndexType(keys) as TKeys : new Int32();\n        dictionaries.set(id, type = decodeFieldType(f, decodeFieldChildren(f, dictionaries)));\n        dictType = new Dictionary(type, keys, id, dictMeta.isOrdered());\n        field = new Field(f.name()!, dictType, f.nullable(), decodeCustomMetadata(f));\n    }\n    // If dictionary encoded, and have already seen this dictionary Id in the schema, then reuse the\n    // data type and wrap in a new Dictionary type and field.\n    else {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta.indexType()) ? decodeIndexType(keys) as TKeys : new Int32();\n        dictType = new Dictionary(dictionaries.get(id)!, keys, id, dictMeta.isOrdered());\n        field = new Field(f.name()!, dictType, f.nullable(), decodeCustomMetadata(f));\n    }\n    return field || null;\n}\n\n/** @ignore */\nfunction decodeCustomMetadata(parent?: _Schema | _Field | null) {\n    const data = new Map<string, string>();\n    if (parent) {\n        for (let entry, key, i = -1, n = parent.customMetadataLength() | 0; ++i < n;) {\n            if ((entry = parent.customMetadata(i)) && (key = entry.key()) != null) {\n                data.set(key, entry.value()!);\n            }\n        }\n    }\n    return data;\n}\n\n/** @ignore */\nfunction decodeIndexType(_type: _Int) {\n    return new Int(_type.isSigned(), _type.bitWidth() as IntBitWidth);\n}\n\n/** @ignore */\nfunction decodeFieldType(f: _Field, children?: Field[]): DataType<any> {\n\n    const typeId = f.typeType();\n\n    switch (typeId) {\n        case Type['NONE']:     return new Null();\n        case Type['Null']:     return new Null();\n        case Type['Binary']:   return new Binary();\n        case Type['Utf8']:     return new Utf8();\n        case Type['Bool']:     return new Bool();\n        case Type['List']:    return new List((children || [])[0]);\n        case Type['Struct_']: return new Struct(children || []);\n    }\n\n    switch (typeId) {\n        case Type['Int']: {\n            const t = f.type(new _Int())!;\n            return new Int(t.isSigned(), t.bitWidth());\n        }\n        case Type['FloatingPoint']: {\n            const t = f.type(new _FloatingPoint())!;\n            return new Float(t.precision());\n        }\n        case Type['Decimal']: {\n            const t = f.type(new _Decimal())!;\n            return new Decimal(t.scale(), t.precision());\n        }\n        case Type['Date']: {\n            const t = f.type(new _Date())!;\n            return new Date_(t.unit());\n        }\n        case Type['Time']: {\n            const t = f.type(new _Time())!;\n            return new Time(t.unit(), t.bitWidth() as TimeBitWidth);\n        }\n        case Type['Timestamp']: {\n            const t = f.type(new _Timestamp())!;\n            return new Timestamp(t.unit(), t.timezone());\n        }\n        case Type['Interval']: {\n            const t = f.type(new _Interval())!;\n            return new Interval(t.unit());\n        }\n        case Type['Union']: {\n            const t = f.type(new _Union())!;\n            return new Union(t.mode(), t.typeIdsArray() || [], children || []);\n        }\n        case Type['FixedSizeBinary']: {\n            const t = f.type(new _FixedSizeBinary())!;\n            return new FixedSizeBinary(t.byteWidth());\n        }\n        case Type['FixedSizeList']: {\n            const t = f.type(new _FixedSizeList())!;\n            return new FixedSizeList(t.listSize(), (children || [])[0]);\n        }\n        case Type['Map']: {\n            const t = f.type(new _Map())!;\n            return new Map_((children || [])[0], t.keysSorted());\n        }\n    }\n    throw new Error(`Unrecognized type: \"${Type[typeId]}\" (${typeId})`);\n}\n\n/** @ignore */\nfunction encodeSchema(b: Builder, schema: Schema) {\n\n    const fieldOffsets = schema.fields.map((f) => Field.encode(b, f));\n\n    _Schema.startFieldsVector(b, fieldOffsets.length);\n\n    const fieldsVectorOffset = _Schema.createFieldsVector(b, fieldOffsets);\n\n    const metadataOffset = !(schema.metadata && schema.metadata.size > 0) ? -1 :\n        _Schema.createCustomMetadataVector(b, [...schema.metadata].map(([k, v]) => {\n            const key = b.createString(`${k}`);\n            const val = b.createString(`${v}`);\n            _KeyValue.startKeyValue(b);\n            _KeyValue.addKey(b, key);\n            _KeyValue.addValue(b, val);\n            return _KeyValue.endKeyValue(b);\n        }));\n\n    _Schema.startSchema(b);\n    _Schema.addFields(b, fieldsVectorOffset);\n    _Schema.addEndianness(b, platformIsLittleEndian ? _Endianness.Little : _Endianness.Big);\n\n    if (metadataOffset !== -1) { _Schema.addCustomMetadata(b, metadataOffset); }\n\n    return _Schema.endSchema(b);\n}\n\n/** @ignore */\nfunction encodeField(b: Builder, field: Field) {\n\n    let nameOffset = -1;\n    let typeOffset = -1;\n    let dictionaryOffset = -1;\n\n    const type = field.type;\n    let typeId: Type = <any> field.typeId;\n\n    if (!DataType.isDictionary(type)) {\n        typeOffset = typeAssembler.visit(type, b)!;\n    } else {\n        typeId = type.dictionary.typeId;\n        dictionaryOffset = typeAssembler.visit(type, b)!;\n        typeOffset = typeAssembler.visit(type.dictionary, b)!;\n    }\n\n    const childOffsets = (type.children || []).map((f: Field) => Field.encode(b, f));\n    const childrenVectorOffset = _Field.createChildrenVector(b, childOffsets);\n\n    const metadataOffset = !(field.metadata && field.metadata.size > 0) ? -1 :\n        _Field.createCustomMetadataVector(b, [...field.metadata].map(([k, v]) => {\n            const key = b.createString(`${k}`);\n            const val = b.createString(`${v}`);\n            _KeyValue.startKeyValue(b);\n            _KeyValue.addKey(b, key);\n            _KeyValue.addValue(b, val);\n            return _KeyValue.endKeyValue(b);\n        }));\n\n    if (field.name) {\n        nameOffset = b.createString(field.name);\n    }\n\n    _Field.startField(b);\n    _Field.addType(b, typeOffset);\n    _Field.addTypeType(b, typeId);\n    _Field.addChildren(b, childrenVectorOffset);\n    _Field.addNullable(b, !!field.nullable);\n\n    if (nameOffset !== -1) { _Field.addName(b, nameOffset); }\n    if (dictionaryOffset !== -1) { _Field.addDictionary(b, dictionaryOffset); }\n    if (metadataOffset !== -1) { _Field.addCustomMetadata(b, metadataOffset); }\n\n    return _Field.endField(b);\n}\n\n/** @ignore */\nfunction encodeRecordBatch(b: Builder, recordBatch: RecordBatch) {\n\n    const nodes = recordBatch.nodes || [];\n    const buffers = recordBatch.buffers || [];\n\n    _RecordBatch.startNodesVector(b, nodes.length);\n    nodes.slice().reverse().forEach((n) => FieldNode.encode(b, n));\n\n    const nodesVectorOffset = b.endVector();\n\n    _RecordBatch.startBuffersVector(b, buffers.length);\n    buffers.slice().reverse().forEach((b_) => BufferRegion.encode(b, b_));\n\n    const buffersVectorOffset = b.endVector();\n\n    _RecordBatch.startRecordBatch(b);\n    _RecordBatch.addLength(b, new Long(recordBatch.length, 0));\n    _RecordBatch.addNodes(b, nodesVectorOffset);\n    _RecordBatch.addBuffers(b, buffersVectorOffset);\n    return _RecordBatch.endRecordBatch(b);\n}\n\n/** @ignore */\nfunction encodeDictionaryBatch(b: Builder, dictionaryBatch: DictionaryBatch) {\n    const dataOffset = RecordBatch.encode(b, dictionaryBatch.data);\n    _DictionaryBatch.startDictionaryBatch(b);\n    _DictionaryBatch.addId(b, new Long(dictionaryBatch.id, 0));\n    _DictionaryBatch.addIsDelta(b, dictionaryBatch.isDelta);\n    _DictionaryBatch.addData(b, dataOffset);\n    return _DictionaryBatch.endDictionaryBatch(b);\n}\n\n/** @ignore */\nfunction encodeFieldNode(b: Builder, node: FieldNode) {\n    return _FieldNode.createFieldNode(b, new Long(node.length, 0), new Long(node.nullCount, 0));\n}\n\n/** @ignore */\nfunction encodeBufferRegion(b: Builder, node: BufferRegion) {\n    return _Buffer.createBuffer(b, new Long(node.offset, 0), new Long(node.length, 0));\n}\n\n/** @ignore */\nconst platformIsLittleEndian = (function() {\n    const buffer = new ArrayBuffer(2);\n    new DataView(buffer).setInt16(0, 256, true /* littleEndian */);\n    // Int16Array uses the platform's endianness.\n    return new Int16Array(buffer)[0] === 256;\n})();\n\n/** @ignore */\ntype MessageHeaderDecoder = <T extends MessageHeader>() => T extends MessageHeader.Schema ? Schema\n                                                         : T extends MessageHeader.RecordBatch ? RecordBatch\n                                                         : T extends MessageHeader.DictionaryBatch ? DictionaryBatch : never;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { MessageHeader } from '../enum';\nimport { flatbuffers } from 'flatbuffers';\nimport ByteBuffer = flatbuffers.ByteBuffer;\nimport { Message } from './metadata/message';\nimport { isFileHandle } from '../util/compat';\nimport { AsyncRandomAccessFile } from '../io/file';\nimport { toUint8Array, ArrayBufferViewInput } from '../util/buffer';\nimport { ByteStream, ReadableSource, AsyncByteStream } from '../io/stream';\nimport { ArrowJSON, ArrowJSONLike, ITERATOR_DONE, FileHandle } from '../io/interfaces';\n\n/** @ignore */ const invalidMessageType       = (type: MessageHeader) => `Expected ${MessageHeader[type]} Message in stream, but was null or length 0.`;\n/** @ignore */ const nullMessage              = (type: MessageHeader) => `Header pointer of flatbuffer-encoded ${MessageHeader[type]} Message is null or length 0.`;\n/** @ignore */ const invalidMessageMetadata   = (expected: number, actual: number) => `Expected to read ${expected} metadata bytes, but only read ${actual}.`;\n/** @ignore */ const invalidMessageBodyLength = (expected: number, actual: number) => `Expected to read ${expected} bytes for message body, but only read ${actual}.`;\n\n/** @ignore */\nexport class MessageReader implements IterableIterator<Message> {\n    protected source: ByteStream;\n    constructor(source: ByteStream | ArrayBufferViewInput | Iterable<ArrayBufferViewInput>) {\n        this.source = source instanceof ByteStream ? source : new ByteStream(source);\n    }\n    public [Symbol.iterator](): IterableIterator<Message> { return this as IterableIterator<Message>; }\n    public next(): IteratorResult<Message> {\n        let r;\n        if ((r = this.readMetadataLength()).done) { return ITERATOR_DONE; }\n        // ARROW-6313: If the first 4 bytes are continuation indicator (-1), read\n        // the next 4 for the 32-bit metadata length. Otherwise, assume this is a\n        // pre-v0.15 message, where the first 4 bytes are the metadata length.\n        if ((r.value === -1) &&\n            (r = this.readMetadataLength()).done) { return ITERATOR_DONE; }\n        if ((r = this.readMetadata(r.value)).done) { return ITERATOR_DONE; }\n        return (<any> r) as IteratorResult<Message>;\n    }\n    public throw(value?: any) { return this.source.throw(value); }\n    public return(value?: any) { return this.source.return(value); }\n    public readMessage<T extends MessageHeader>(type?: T | null) {\n        let r: IteratorResult<Message<T>>;\n        if ((r = this.next()).done) { return null; }\n        if ((type != null) && r.value.headerType !== type) {\n            throw new Error(invalidMessageType(type));\n        }\n        return r.value;\n    }\n    public readMessageBody(bodyLength: number): Uint8Array {\n        if (bodyLength <= 0) { return new Uint8Array(0); }\n        const buf = toUint8Array(this.source.read(bodyLength));\n        if (buf.byteLength < bodyLength) {\n            throw new Error(invalidMessageBodyLength(bodyLength, buf.byteLength));\n        }\n        // 1. Work around bugs in fs.ReadStream's internal Buffer pooling, see: https://github.com/nodejs/node/issues/24817\n        // 2. Work around https://github.com/whatwg/streams/blob/0ebe4b042e467d9876d80ae045de3843092ad797/reference-implementation/lib/helpers.js#L126\n        return /* 1. */ (buf.byteOffset % 8 === 0) &&\n               /* 2. */ (buf.byteOffset + buf.byteLength) <= buf.buffer.byteLength ? buf : buf.slice();\n    }\n    public readSchema(throwIfNull = false) {\n        const type = MessageHeader.Schema;\n        const message = this.readMessage(type);\n        const schema = message && message.header();\n        if (throwIfNull && !schema) {\n            throw new Error(nullMessage(type));\n        }\n        return schema;\n    }\n    protected readMetadataLength(): IteratorResult<number> {\n        const buf = this.source.read(PADDING);\n        const bb = buf && new ByteBuffer(buf);\n        const len = bb && bb.readInt32(0) || 0;\n        return { done: len === 0, value: len };\n    }\n    protected readMetadata(metadataLength: number): IteratorResult<Message> {\n        const buf = this.source.read(metadataLength);\n        if (!buf) { return ITERATOR_DONE; }\n        if (buf.byteLength < metadataLength) {\n            throw new Error(invalidMessageMetadata(metadataLength, buf.byteLength));\n        }\n        return { done: false, value: Message.decode(buf) };\n    }\n}\n\n/** @ignore */\nexport class AsyncMessageReader implements AsyncIterableIterator<Message> {\n    protected source: AsyncByteStream;\n    constructor(source: ReadableSource<Uint8Array>);\n    constructor(source: FileHandle, byteLength?: number);\n    constructor(source: any, byteLength?: number) {\n        this.source = source instanceof AsyncByteStream ? source\n            : isFileHandle(source)\n            ? new AsyncRandomAccessFile(source, byteLength!)\n            : new AsyncByteStream(source);\n    }\n    public [Symbol.asyncIterator](): AsyncIterableIterator<Message> { return this as AsyncIterableIterator<Message>; }\n    public async next(): Promise<IteratorResult<Message>> {\n        let r;\n        if ((r = await this.readMetadataLength()).done) { return ITERATOR_DONE; }\n        // ARROW-6313: If the first 4 bytes are continuation indicator (-1), read\n        // the next 4 for the 32-bit metadata length. Otherwise, assume this is a\n        // pre-v0.15 message, where the first 4 bytes are the metadata length.\n        if ((r.value === -1) &&\n            (r = await this.readMetadataLength()).done) { return ITERATOR_DONE; }\n        if ((r = await this.readMetadata(r.value)).done) { return ITERATOR_DONE; }\n        return (<any> r) as IteratorResult<Message>;\n    }\n    public async throw(value?: any) { return await this.source.throw(value); }\n    public async return(value?: any) { return await this.source.return(value); }\n    public async readMessage<T extends MessageHeader>(type?: T | null) {\n        let r: IteratorResult<Message<T>>;\n        if ((r = await this.next()).done) { return null; }\n        if ((type != null) && r.value.headerType !== type) {\n            throw new Error(invalidMessageType(type));\n        }\n        return r.value;\n    }\n    public async readMessageBody(bodyLength: number): Promise<Uint8Array> {\n        if (bodyLength <= 0) { return new Uint8Array(0); }\n        const buf = toUint8Array(await this.source.read(bodyLength));\n        if (buf.byteLength < bodyLength) {\n            throw new Error(invalidMessageBodyLength(bodyLength, buf.byteLength));\n        }\n        // 1. Work around bugs in fs.ReadStream's internal Buffer pooling, see: https://github.com/nodejs/node/issues/24817\n        // 2. Work around https://github.com/whatwg/streams/blob/0ebe4b042e467d9876d80ae045de3843092ad797/reference-implementation/lib/helpers.js#L126\n        return /* 1. */ (buf.byteOffset % 8 === 0) &&\n               /* 2. */ (buf.byteOffset + buf.byteLength) <= buf.buffer.byteLength ? buf : buf.slice();\n    }\n    public async readSchema(throwIfNull = false) {\n        const type = MessageHeader.Schema;\n        const message = await this.readMessage(type);\n        const schema = message && message.header();\n        if (throwIfNull && !schema) {\n            throw new Error(nullMessage(type));\n        }\n        return schema;\n    }\n    protected async readMetadataLength(): Promise<IteratorResult<number>> {\n        const buf = await this.source.read(PADDING);\n        const bb = buf && new ByteBuffer(buf);\n        const len = bb && bb.readInt32(0) || 0;\n        return { done: len === 0, value: len };\n    }\n    protected async readMetadata(metadataLength: number): Promise<IteratorResult<Message>> {\n        const buf = await this.source.read(metadataLength);\n        if (!buf) { return ITERATOR_DONE; }\n        if (buf.byteLength < metadataLength) {\n            throw new Error(invalidMessageMetadata(metadataLength, buf.byteLength));\n        }\n        return { done: false, value: Message.decode(buf) };\n    }\n}\n\n/** @ignore */\nexport class JSONMessageReader extends MessageReader {\n    private _schema = false;\n    private _json: ArrowJSON;\n    private _body: any[] = [];\n    private _batchIndex = 0;\n    private _dictionaryIndex = 0;\n    constructor(source: ArrowJSON | ArrowJSONLike) {\n        super(new Uint8Array(0));\n        this._json = source instanceof ArrowJSON ? source : new ArrowJSON(source);\n    }\n    public next() {\n        const { _json } = this;\n        if (!this._schema) {\n            this._schema = true;\n            const message = Message.fromJSON(_json.schema, MessageHeader.Schema);\n            return { done: false, value: message };\n        }\n        if (this._dictionaryIndex < _json.dictionaries.length) {\n            const batch = _json.dictionaries[this._dictionaryIndex++];\n            this._body = batch['data']['columns'];\n            const message = Message.fromJSON(batch, MessageHeader.DictionaryBatch);\n            return { done: false, value: message };\n        }\n        if (this._batchIndex < _json.batches.length) {\n            const batch = _json.batches[this._batchIndex++];\n            this._body = batch['columns'];\n            const message = Message.fromJSON(batch, MessageHeader.RecordBatch);\n            return { done: false, value: message };\n        }\n        this._body = [];\n        return ITERATOR_DONE;\n    }\n    public readMessageBody(_bodyLength?: number) {\n        return flattenDataSources(this._body) as any;\n        function flattenDataSources(xs: any[]): any[][] {\n            return (xs || []).reduce<any[][]>((buffers, column: any) => [\n                ...buffers,\n                ...(column['VALIDITY'] && [column['VALIDITY']] || []),\n                ...(column['TYPE'] && [column['TYPE']] || []),\n                ...(column['OFFSET'] && [column['OFFSET']] || []),\n                ...(column['DATA'] && [column['DATA']] || []),\n                ...flattenDataSources(column['children'])\n            ], [] as any[][]);\n        }\n    }\n    public readMessage<T extends MessageHeader>(type?: T | null) {\n        let r: IteratorResult<Message<T>>;\n        if ((r = this.next()).done) { return null; }\n        if ((type != null) && r.value.headerType !== type) {\n            throw new Error(invalidMessageType(type));\n        }\n        return r.value;\n    }\n    public readSchema() {\n        const type = MessageHeader.Schema;\n        const message = this.readMessage(type);\n        const schema = message && message.header();\n        if (!message || !schema) {\n            throw new Error(nullMessage(type));\n        }\n        return schema;\n    }\n}\n\n/** @ignore */\nexport const PADDING = 4;\n/** @ignore */\nexport const MAGIC_STR = 'ARROW1';\n/** @ignore */\nexport const MAGIC = new Uint8Array(MAGIC_STR.length);\n\nfor (let i = 0; i < MAGIC_STR.length; i += 1 | 0) {\n    MAGIC[i] = MAGIC_STR.charCodeAt(i);\n}\n\n/** @ignore */\nexport function checkForMagicArrowString(buffer: Uint8Array, index = 0) {\n    for (let i = -1, n = MAGIC.length; ++i < n;) {\n        if (MAGIC[i] !== buffer[index + i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n/** @ignore */\nexport const magicLength = MAGIC.length;\n/** @ignore */\nexport const magicAndPadding = magicLength + PADDING;\n/** @ignore */\nexport const magicX2AndPadding = magicLength * 2 + PADDING;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Visitor } from '../visitor';\nimport { VectorType } from '../interfaces';\nimport { Schema, Field } from '../schema';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\n/** @ignore */\nexport interface TypeComparator extends Visitor {\n    visit<T extends DataType>(type: T, other?: DataType | null): other is T;\n    visitMany<T extends DataType>(nodes: T[], others?: DataType[] | null): boolean[];\n    getVisitFn<T extends DataType>(node: VectorType<T> |  Data<T> | T): (other?: DataType | null) => other is T;\n    visitNull                 <T extends Null>                 (type: T, other?: DataType | null): other is T;\n    visitBool                 <T extends Bool>                 (type: T, other?: DataType | null): other is T;\n    visitInt                  <T extends Int>                  (type: T, other?: DataType | null): other is T;\n    visitInt8                 <T extends Int8>                 (type: T, other?: DataType | null): other is T;\n    visitInt16                <T extends Int16>                (type: T, other?: DataType | null): other is T;\n    visitInt32                <T extends Int32>                (type: T, other?: DataType | null): other is T;\n    visitInt64                <T extends Int64>                (type: T, other?: DataType | null): other is T;\n    visitUint8                <T extends Uint8>                (type: T, other?: DataType | null): other is T;\n    visitUint16               <T extends Uint16>               (type: T, other?: DataType | null): other is T;\n    visitUint32               <T extends Uint32>               (type: T, other?: DataType | null): other is T;\n    visitUint64               <T extends Uint64>               (type: T, other?: DataType | null): other is T;\n    visitFloat                <T extends Float>                (type: T, other?: DataType | null): other is T;\n    visitFloat16              <T extends Float16>              (type: T, other?: DataType | null): other is T;\n    visitFloat32              <T extends Float32>              (type: T, other?: DataType | null): other is T;\n    visitFloat64              <T extends Float64>              (type: T, other?: DataType | null): other is T;\n    visitUtf8                 <T extends Utf8>                 (type: T, other?: DataType | null): other is T;\n    visitBinary               <T extends Binary>               (type: T, other?: DataType | null): other is T;\n    visitFixedSizeBinary      <T extends FixedSizeBinary>      (type: T, other?: DataType | null): other is T;\n    visitDate                 <T extends Date_>                (type: T, other?: DataType | null): other is T;\n    visitDateDay              <T extends DateDay>              (type: T, other?: DataType | null): other is T;\n    visitDateMillisecond      <T extends DateMillisecond>      (type: T, other?: DataType | null): other is T;\n    visitTimestamp            <T extends Timestamp>            (type: T, other?: DataType | null): other is T;\n    visitTimestampSecond      <T extends TimestampSecond>      (type: T, other?: DataType | null): other is T;\n    visitTimestampMillisecond <T extends TimestampMillisecond> (type: T, other?: DataType | null): other is T;\n    visitTimestampMicrosecond <T extends TimestampMicrosecond> (type: T, other?: DataType | null): other is T;\n    visitTimestampNanosecond  <T extends TimestampNanosecond>  (type: T, other?: DataType | null): other is T;\n    visitTime                 <T extends Time>                 (type: T, other?: DataType | null): other is T;\n    visitTimeSecond           <T extends TimeSecond>           (type: T, other?: DataType | null): other is T;\n    visitTimeMillisecond      <T extends TimeMillisecond>      (type: T, other?: DataType | null): other is T;\n    visitTimeMicrosecond      <T extends TimeMicrosecond>      (type: T, other?: DataType | null): other is T;\n    visitTimeNanosecond       <T extends TimeNanosecond>       (type: T, other?: DataType | null): other is T;\n    visitDecimal              <T extends Decimal>              (type: T, other?: DataType | null): other is T;\n    visitList                 <T extends List>                 (type: T, other?: DataType | null): other is T;\n    visitStruct               <T extends Struct>               (type: T, other?: DataType | null): other is T;\n    visitUnion                <T extends Union>                (type: T, other?: DataType | null): other is T;\n    visitDenseUnion           <T extends DenseUnion>           (type: T, other?: DataType | null): other is T;\n    visitSparseUnion          <T extends SparseUnion>          (type: T, other?: DataType | null): other is T;\n    visitDictionary           <T extends Dictionary>           (type: T, other?: DataType | null): other is T;\n    visitInterval             <T extends Interval>             (type: T, other?: DataType | null): other is T;\n    visitIntervalDayTime      <T extends IntervalDayTime>      (type: T, other?: DataType | null): other is T;\n    visitIntervalYearMonth    <T extends IntervalYearMonth>    (type: T, other?: DataType | null): other is T;\n    visitFixedSizeList        <T extends FixedSizeList>        (type: T, other?: DataType | null): other is T;\n    visitMap                  <T extends Map_>                 (type: T, other?: DataType | null): other is T;\n}\n\n/** @ignore */\nexport class TypeComparator extends Visitor {\n    compareSchemas<T extends { [key: string]: DataType }>(schema: Schema<T>, other?: Schema | null): other is Schema<T> {\n        return (schema === other) || (\n            other instanceof schema.constructor &&\n            this.compareManyFields(schema.fields, other.fields)\n        );\n    }\n    compareManyFields<T extends { [key: string]: DataType }>(fields: Field<T[keyof T]>[], others?: Field[] | null): others is Field<T[keyof T]>[] {\n        return (fields === others) || (\n            Array.isArray(fields) &&\n            Array.isArray(others) &&\n            fields.length === others.length &&\n            fields.every((f, i) => this.compareFields(f, others[i]))\n        );\n    }\n    compareFields<T extends DataType = any>(field: Field<T>, other?: Field | null): other is Field<T> {\n        return (field === other) || (\n            other instanceof field.constructor &&\n            field.name === other.name &&\n            field.nullable === other.nullable &&\n            this.visit(field.type, other.type)\n        );\n    }\n}\n\nfunction compareConstructor<T extends DataType>(type: T, other?: DataType | null): other is T {\n    return other instanceof type.constructor;\n}\n\nfunction compareAny<T extends DataType>(type: T, other?: DataType | null): other is T {\n    return (type === other) || compareConstructor(type, other);\n}\n\nfunction compareInt<T extends Int>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.bitWidth === other.bitWidth &&\n        type.isSigned === other.isSigned\n    );\n}\n\nfunction compareFloat<T extends Float>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.precision === other.precision\n    );\n}\n\nfunction compareFixedSizeBinary<T extends FixedSizeBinary>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.byteWidth === other.byteWidth\n    );\n}\n\nfunction compareDate<T extends Date_>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.unit === other.unit\n    );\n}\n\nfunction compareTimestamp<T extends Timestamp>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.unit === other.unit &&\n        type.timezone === other.timezone\n    );\n}\n\nfunction compareTime<T extends Time>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.unit === other.unit &&\n        type.bitWidth === other.bitWidth\n    );\n}\n\nfunction compareList<T extends List>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.children.length === other.children.length &&\n        instance.compareManyFields(type.children, other.children)\n    );\n}\n\nfunction compareStruct<T extends Struct>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.children.length === other.children.length &&\n        instance.compareManyFields(type.children, other.children)\n    );\n}\n\nfunction compareUnion<T extends Union>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.mode === other.mode &&\n        type.typeIds.every((x, i) => x === other.typeIds[i]) &&\n        instance.compareManyFields(type.children, other.children)\n    );\n}\n\nfunction compareDictionary<T extends Dictionary>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.id === other.id &&\n        type.isOrdered === other.isOrdered &&\n        instance.visit(<any> type.indices, other.indices) &&\n        instance.visit(type.dictionary, other.dictionary)\n    );\n}\n\nfunction compareInterval<T extends Interval>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.unit === other.unit\n    );\n}\n\nfunction compareFixedSizeList<T extends FixedSizeList>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.listSize === other.listSize &&\n        type.children.length === other.children.length &&\n        instance.compareManyFields(type.children, other.children)\n    );\n}\n\nfunction compareMap<T extends Map_>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.keysSorted === other.keysSorted &&\n        type.children.length === other.children.length &&\n        instance.compareManyFields(type.children, other.children)\n    );\n}\n\nTypeComparator.prototype.visitNull                 =             compareAny;\nTypeComparator.prototype.visitBool                 =             compareAny;\nTypeComparator.prototype.visitInt                  =             compareInt;\nTypeComparator.prototype.visitInt8                 =             compareInt;\nTypeComparator.prototype.visitInt16                =             compareInt;\nTypeComparator.prototype.visitInt32                =             compareInt;\nTypeComparator.prototype.visitInt64                =             compareInt;\nTypeComparator.prototype.visitUint8                =             compareInt;\nTypeComparator.prototype.visitUint16               =             compareInt;\nTypeComparator.prototype.visitUint32               =             compareInt;\nTypeComparator.prototype.visitUint64               =             compareInt;\nTypeComparator.prototype.visitFloat                =           compareFloat;\nTypeComparator.prototype.visitFloat16              =           compareFloat;\nTypeComparator.prototype.visitFloat32              =           compareFloat;\nTypeComparator.prototype.visitFloat64              =           compareFloat;\nTypeComparator.prototype.visitUtf8                 =             compareAny;\nTypeComparator.prototype.visitBinary               =             compareAny;\nTypeComparator.prototype.visitFixedSizeBinary      = compareFixedSizeBinary;\nTypeComparator.prototype.visitDate                 =            compareDate;\nTypeComparator.prototype.visitDateDay              =            compareDate;\nTypeComparator.prototype.visitDateMillisecond      =            compareDate;\nTypeComparator.prototype.visitTimestamp            =       compareTimestamp;\nTypeComparator.prototype.visitTimestampSecond      =       compareTimestamp;\nTypeComparator.prototype.visitTimestampMillisecond =       compareTimestamp;\nTypeComparator.prototype.visitTimestampMicrosecond =       compareTimestamp;\nTypeComparator.prototype.visitTimestampNanosecond  =       compareTimestamp;\nTypeComparator.prototype.visitTime                 =            compareTime;\nTypeComparator.prototype.visitTimeSecond           =            compareTime;\nTypeComparator.prototype.visitTimeMillisecond      =            compareTime;\nTypeComparator.prototype.visitTimeMicrosecond      =            compareTime;\nTypeComparator.prototype.visitTimeNanosecond       =            compareTime;\nTypeComparator.prototype.visitDecimal              =             compareAny;\nTypeComparator.prototype.visitList                 =            compareList;\nTypeComparator.prototype.visitStruct               =          compareStruct;\nTypeComparator.prototype.visitUnion                =           compareUnion;\nTypeComparator.prototype.visitDenseUnion           =           compareUnion;\nTypeComparator.prototype.visitSparseUnion          =           compareUnion;\nTypeComparator.prototype.visitDictionary           =      compareDictionary;\nTypeComparator.prototype.visitInterval             =        compareInterval;\nTypeComparator.prototype.visitIntervalDayTime      =        compareInterval;\nTypeComparator.prototype.visitIntervalYearMonth    =        compareInterval;\nTypeComparator.prototype.visitFixedSizeList        =   compareFixedSizeList;\nTypeComparator.prototype.visitMap                  =             compareMap;\n\n/** @ignore */\nexport const instance = new TypeComparator();\n\nexport function compareSchemas<T extends { [key: string]: DataType }>(schema: Schema<T>, other?: Schema | null): other is Schema<T> {\n    return instance.compareSchemas(schema, other);\n}\n\nexport function compareFields<T extends DataType = any>(field: Field<T>, other?: Field | null): other is Field<T> {\n    return instance.compareFields(field, other);\n}\n\nexport function compareTypes<A extends DataType = any>(type: A, other?: DataType): other is A {\n    return instance.visit(type, other);\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { Visitor } from '../visitor';\nimport { Type, UnionMode } from '../enum';\nimport { RecordBatch } from '../recordbatch';\nimport { VectorType as V } from '../interfaces';\nimport { rebaseValueOffsets } from '../util/buffer';\nimport { packBools, truncateBitmap } from '../util/bit';\nimport { selectVectorChildrenArgs } from '../util/args';\nimport { BufferRegion, FieldNode } from '../ipc/metadata/message';\nimport {\n    DataType, Dictionary,\n    Float, Int, Date_, Interval, Time, Timestamp, Union,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n} from '../type';\n\n/** @ignore */\nexport interface VectorAssembler extends Visitor {\n    visit<T extends Vector>(node: T): this;\n    visitMany<T extends Vector>(nodes: T[]): this[];\n    getVisitFn<T extends Type>(node: T): (vector: V<T>) => this;\n    getVisitFn<T extends DataType>(node: V<T> | Data<T> | T): (vector: V<T>) => this;\n\n    visitBool                 <T extends Bool>            (vector: V<T>): this;\n    visitInt                  <T extends Int>             (vector: V<T>): this;\n    visitFloat                <T extends Float>           (vector: V<T>): this;\n    visitUtf8                 <T extends Utf8>            (vector: V<T>): this;\n    visitBinary               <T extends Binary>          (vector: V<T>): this;\n    visitFixedSizeBinary      <T extends FixedSizeBinary> (vector: V<T>): this;\n    visitDate                 <T extends Date_>           (vector: V<T>): this;\n    visitTimestamp            <T extends Timestamp>       (vector: V<T>): this;\n    visitTime                 <T extends Time>            (vector: V<T>): this;\n    visitDecimal              <T extends Decimal>         (vector: V<T>): this;\n    visitList                 <T extends List>            (vector: V<T>): this;\n    visitStruct               <T extends Struct>          (vector: V<T>): this;\n    visitUnion                <T extends Union>           (vector: V<T>): this;\n    visitInterval             <T extends Interval>        (vector: V<T>): this;\n    visitFixedSizeList        <T extends FixedSizeList>   (vector: V<T>): this;\n    visitMap                  <T extends Map_>            (vector: V<T>): this;\n}\n\n/** @ignore */\nexport class VectorAssembler extends Visitor {\n\n    /** @nocollapse */\n    public static assemble<T extends Vector | RecordBatch>(...args: (T | T[])[]) {\n        const assembler = new VectorAssembler();\n        const vectorChildren = selectVectorChildrenArgs(RecordBatch, args);\n        const [assembleResult = assembler] = assembler.visitMany(vectorChildren);\n        return assembleResult;\n    }\n\n    private constructor() { super(); }\n\n    public visit<T extends Vector>(vector: T): this {\n        if (!DataType.isDictionary(vector.type)) {\n            const { data, length, nullCount } = vector;\n            if (length > 2147483647) {\n                /* istanbul ignore next */\n                throw new RangeError('Cannot write arrays larger than 2^31 - 1 in length');\n            }\n            if (!DataType.isNull(vector.type)) {\n                addBuffer.call(this, nullCount <= 0\n                    ? new Uint8Array(0) // placeholder validity buffer\n                    : truncateBitmap(data.offset, length, data.nullBitmap)\n                );\n            }\n            this.nodes.push(new FieldNode(length, nullCount));\n        }\n        return super.visit(vector);\n    }\n\n    public visitNull<T extends Null>(_nullV: V<T>) {\n        return this;\n    }\n    public visitDictionary<T extends Dictionary>(vector: V<T>) {\n        // Assemble the indices here, Dictionary assembled separately.\n        return this.visit(vector.indices);\n    }\n\n    public get nodes() { return this._nodes; }\n    public get buffers() { return this._buffers; }\n    public get byteLength() { return this._byteLength; }\n    public get bufferRegions() { return this._bufferRegions; }\n\n    protected _byteLength = 0;\n    protected _nodes: FieldNode[] = [];\n    protected _buffers: ArrayBufferView[] = [];\n    protected _bufferRegions: BufferRegion[] = [];\n}\n\n/** @ignore */\nfunction addBuffer(this: VectorAssembler, values: ArrayBufferView) {\n    const byteLength = (values.byteLength + 7) & ~7; // Round up to a multiple of 8\n    this.buffers.push(values);\n    this.bufferRegions.push(new BufferRegion(this._byteLength, byteLength));\n    this._byteLength += byteLength;\n    return this;\n}\n\n/** @ignore */\nfunction assembleUnion<T extends Union>(this: VectorAssembler, vector: V<T>) {\n    const { type, length, typeIds, valueOffsets } = vector;\n    // All Union Vectors have a typeIds buffer\n    addBuffer.call(this, typeIds);\n    // If this is a Sparse Union, treat it like all other Nested types\n    if (type.mode === UnionMode.Sparse) {\n        return assembleNestedVector.call(this, vector);\n    } else if (type.mode === UnionMode.Dense) {\n        // If this is a Dense Union, add the valueOffsets buffer and potentially slice the children\n        if (vector.offset <= 0) {\n            // If the Vector hasn't been sliced, write the existing valueOffsets\n            addBuffer.call(this, valueOffsets);\n            // We can treat this like all other Nested types\n            return assembleNestedVector.call(this, vector);\n        } else {\n            // A sliced Dense Union is an unpleasant case. Because the offsets are different for\n            // each child vector, we need to \"rebase\" the valueOffsets for each child\n            // Union typeIds are not necessary 0-indexed\n            const maxChildTypeId = typeIds.reduce((x, y) => Math.max(x, y), typeIds[0]);\n            const childLengths = new Int32Array(maxChildTypeId + 1);\n            // Set all to -1 to indicate that we haven't observed a first occurrence of a particular child yet\n            const childOffsets = new Int32Array(maxChildTypeId + 1).fill(-1);\n            const shiftedOffsets = new Int32Array(length);\n            // If we have a non-zero offset, then the value offsets do not start at\n            // zero. We must a) create a new offsets array with shifted offsets and\n            // b) slice the values array accordingly\n            const unshiftedOffsets = rebaseValueOffsets(-valueOffsets[0], length, valueOffsets);\n            for (let typeId, shift, index = -1; ++index < length;) {\n                if ((shift = childOffsets[typeId = typeIds[index]]) === -1) {\n                    shift = childOffsets[typeId] = unshiftedOffsets[typeId];\n                }\n                shiftedOffsets[index] = unshiftedOffsets[index] - shift;\n                ++childLengths[typeId];\n            }\n            addBuffer.call(this, shiftedOffsets);\n            // Slice and visit children accordingly\n            for (let child: Vector | null, childIndex = -1, numChildren = type.children.length; ++childIndex < numChildren;) {\n                if (child = vector.getChildAt(childIndex)) {\n                    const typeId = type.typeIds[childIndex];\n                    const childLength = Math.min(length, childLengths[typeId]);\n                    this.visit(child.slice(childOffsets[typeId], childLength));\n                }\n            }\n        }\n    }\n    return this;\n}\n\n/** @ignore */\nfunction assembleBoolVector<T extends Bool>(this: VectorAssembler, vector: V<T>) {\n    // Bool vector is a special case of FlatVector, as its data buffer needs to stay packed\n    let values: Uint8Array;\n    if (vector.nullCount >= vector.length) {\n        // If all values are null, just insert a placeholder empty data buffer (fastest path)\n        return addBuffer.call(this, new Uint8Array(0));\n    } else if ((values = vector.values) instanceof Uint8Array) {\n        // If values is already a Uint8Array, slice the bitmap (fast path)\n        return addBuffer.call(this, truncateBitmap(vector.offset, vector.length, values));\n    }\n    // Otherwise if the underlying data *isn't* a Uint8Array, enumerate the\n    // values as bools and re-pack them into a Uint8Array. This code isn't\n    // reachable unless you're trying to manipulate the Data internals,\n    // we we're only doing this for safety.\n    /* istanbul ignore next */\n    return addBuffer.call(this, packBools(vector));\n}\n\n/** @ignore */\nfunction assembleFlatVector<T extends Int | Float | FixedSizeBinary | Date_ | Timestamp | Time | Decimal | Interval>(this: VectorAssembler, vector: V<T>) {\n    return addBuffer.call(this, vector.values.subarray(0, vector.length * vector.stride));\n}\n\n/** @ignore */\nfunction assembleFlatListVector<T extends Utf8 | Binary>(this: VectorAssembler, vector: V<T>) {\n    const { length, values, valueOffsets } = vector;\n    const firstOffset = valueOffsets[0];\n    const lastOffset = valueOffsets[length];\n    const byteLength = Math.min(lastOffset - firstOffset, values.byteLength - firstOffset);\n    // Push in the order FlatList types read their buffers\n    addBuffer.call(this, rebaseValueOffsets(-valueOffsets[0], length, valueOffsets)); // valueOffsets buffer first\n    addBuffer.call(this, values.subarray(firstOffset, firstOffset + byteLength)); // sliced values buffer second\n    return this;\n}\n\n/** @ignore */\nfunction assembleListVector<T extends Map_ | List | FixedSizeList>(this: VectorAssembler, vector: V<T>) {\n    const { length, valueOffsets } = vector;\n    // If we have valueOffsets (MapVector, ListVector), push that buffer first\n    if (valueOffsets) {\n        addBuffer.call(this, rebaseValueOffsets(valueOffsets[0], length, valueOffsets));\n    }\n    // Then insert the List's values child\n    return this.visit(vector.getChildAt(0)!);\n}\n\n/** @ignore */\nfunction assembleNestedVector<T extends Struct | Union>(this: VectorAssembler, vector: V<T>) {\n    return this.visitMany(vector.type.children.map((_, i) => vector.getChildAt(i)!).filter(Boolean))[0];\n}\n\nVectorAssembler.prototype.visitBool            =     assembleBoolVector;\nVectorAssembler.prototype.visitInt             =     assembleFlatVector;\nVectorAssembler.prototype.visitFloat           =     assembleFlatVector;\nVectorAssembler.prototype.visitUtf8            = assembleFlatListVector;\nVectorAssembler.prototype.visitBinary          = assembleFlatListVector;\nVectorAssembler.prototype.visitFixedSizeBinary =     assembleFlatVector;\nVectorAssembler.prototype.visitDate            =     assembleFlatVector;\nVectorAssembler.prototype.visitTimestamp       =     assembleFlatVector;\nVectorAssembler.prototype.visitTime            =     assembleFlatVector;\nVectorAssembler.prototype.visitDecimal         =     assembleFlatVector;\nVectorAssembler.prototype.visitList            =     assembleListVector;\nVectorAssembler.prototype.visitStruct          =   assembleNestedVector;\nVectorAssembler.prototype.visitUnion           =          assembleUnion;\nVectorAssembler.prototype.visitInterval        =     assembleFlatVector;\nVectorAssembler.prototype.visitFixedSizeList   =     assembleListVector;\nVectorAssembler.prototype.visitMap             =     assembleListVector;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport * as type from '../type';\nimport { Visitor } from '../visitor';\nimport { Type as ArrowType } from '../fb/Schema';\nimport { Precision, DateUnit, TimeUnit, IntervalUnit, UnionMode } from '../enum';\n\n/** @ignore */\nexport interface JSONTypeAssembler extends Visitor {\n    visit<T extends type.DataType>(node: T): Record<string, unknown> | undefined;\n}\n\n/** @ignore */\nexport class JSONTypeAssembler extends Visitor {\n    public visit<T extends type.DataType>(node: T): Record<string, unknown> | undefined {\n        return node == null ? undefined : super.visit(node);\n    }\n    public visitNull<T extends type.Null>({ typeId }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    public visitInt<T extends type.Int>({ typeId, bitWidth, isSigned }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'bitWidth': bitWidth, 'isSigned': isSigned };\n    }\n    public visitFloat<T extends type.Float>({ typeId, precision }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'precision': Precision[precision] };\n    }\n    public visitBinary<T extends type.Binary>({ typeId }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    public visitBool<T extends type.Bool>({ typeId }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    public visitUtf8<T extends type.Utf8>({ typeId }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    public visitDecimal<T extends type.Decimal>({ typeId, scale, precision }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'scale': scale, 'precision': precision };\n    }\n    public visitDate<T extends type.Date_>({ typeId, unit }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'unit': DateUnit[unit] };\n    }\n    public visitTime<T extends type.Time>({ typeId, unit, bitWidth }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'unit': TimeUnit[unit], bitWidth };\n    }\n    public visitTimestamp<T extends type.Timestamp>({ typeId, timezone, unit }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'unit': TimeUnit[unit], timezone };\n    }\n    public visitInterval<T extends type.Interval>({ typeId, unit }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'unit': IntervalUnit[unit] };\n    }\n    public visitList<T extends type.List>({ typeId }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    public visitStruct<T extends type.Struct>({ typeId }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    public visitUnion<T extends type.Union>({ typeId, mode, typeIds }: T) {\n        return {\n            'name': ArrowType[typeId].toLowerCase(),\n            'mode': UnionMode[mode],\n            'typeIds': [...typeIds]\n        };\n    }\n    public visitDictionary<T extends type.Dictionary>(node: T) {\n        return this.visit(node.dictionary);\n    }\n    public visitFixedSizeBinary<T extends type.FixedSizeBinary>({ typeId, byteWidth }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'byteWidth': byteWidth };\n    }\n    public visitFixedSizeList<T extends type.FixedSizeList>({ typeId, listSize }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'listSize': listSize };\n    }\n    public visitMap<T extends type.Map_>({ typeId, keysSorted }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'keysSorted': keysSorted };\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BN } from '../util/bn';\nimport { Column } from '../column';\nimport { Vector } from '../vector';\nimport { Visitor } from '../visitor';\nimport { BufferType } from '../enum';\nimport { RecordBatch } from '../recordbatch';\nimport { VectorType as V } from '../interfaces';\nimport { UnionMode, DateUnit, TimeUnit } from '../enum';\nimport { BitIterator, getBit, getBool } from '../util/bit';\nimport { selectColumnChildrenArgs } from '../util/args';\nimport {\n    DataType,\n    Float, Int, Date_, Interval, Time, Timestamp, Union,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n} from '../type';\n\n/** @ignore */\nexport interface JSONVectorAssembler extends Visitor {\n\n    visit     <T extends Column>  (node: T  ): Record<string, unknown>;\n    visitMany <T extends Column>  (cols: T[]): Record<string, unknown>[];\n    getVisitFn<T extends DataType>(node: Column<T>): (column: Column<T>) => { name: string; count: number; VALIDITY: (0 | 1)[]; DATA?: any[]; OFFSET?: number[]; TYPE?: number[]; children?: any[] };\n\n    visitNull                 <T extends Null>            (vector: V<T>): Record<string, never>;\n    visitBool                 <T extends Bool>            (vector: V<T>): { DATA: boolean[] };\n    visitInt                  <T extends Int>             (vector: V<T>): { DATA: (number | string)[]  };\n    visitFloat                <T extends Float>           (vector: V<T>): { DATA: number[]  };\n    visitUtf8                 <T extends Utf8>            (vector: V<T>): { DATA: string[]; OFFSET: number[] };\n    visitBinary               <T extends Binary>          (vector: V<T>): { DATA: string[]; OFFSET: number[] };\n    visitFixedSizeBinary      <T extends FixedSizeBinary> (vector: V<T>): { DATA: string[]  };\n    visitDate                 <T extends Date_>           (vector: V<T>): { DATA: number[]  };\n    visitTimestamp            <T extends Timestamp>       (vector: V<T>): { DATA: string[]  };\n    visitTime                 <T extends Time>            (vector: V<T>): { DATA: number[]  };\n    visitDecimal              <T extends Decimal>         (vector: V<T>): { DATA: string[]  };\n    visitList                 <T extends List>            (vector: V<T>): { children: any[]; OFFSET: number[] };\n    visitStruct               <T extends Struct>          (vector: V<T>): { children: any[] };\n    visitUnion                <T extends Union>           (vector: V<T>): { children: any[]; TYPE: number[]  };\n    visitInterval             <T extends Interval>        (vector: V<T>): { DATA: number[]  };\n    visitFixedSizeList        <T extends FixedSizeList>   (vector: V<T>): { children: any[] };\n    visitMap                  <T extends Map_>            (vector: V<T>): { children: any[] };\n}\n\n/** @ignore */\nexport class JSONVectorAssembler extends Visitor {\n\n    /** @nocollapse */\n    public static assemble<T extends Column | RecordBatch>(...args: (T | T[])[]) {\n        return new JSONVectorAssembler().visitMany(selectColumnChildrenArgs(RecordBatch, args));\n    }\n\n    public visit<T extends Column>(column: T) {\n        const { data, name, length } = column;\n        const { offset, nullCount, nullBitmap } = data;\n        const type = DataType.isDictionary(column.type) ? column.type.indices : column.type;\n        const buffers = Object.assign([], data.buffers, { [BufferType.VALIDITY]: undefined });\n        return {\n            'name': name,\n            'count': length,\n            'VALIDITY': DataType.isNull(type) ? undefined\n                : nullCount <= 0 ? Array.from({ length }, () => 1)\n                : [...new BitIterator(nullBitmap, offset, length, null, getBit)],\n            ...super.visit(Vector.new(data.clone(type, offset, length, 0, buffers)))\n        };\n    }\n    public visitNull() { return {}; }\n    public visitBool<T extends Bool>({ values, offset, length }: V<T>) {\n        return { 'DATA': [...new BitIterator(values, offset, length, null, getBool)] };\n    }\n    public visitInt<T extends Int>(vector: V<T>) {\n        return {\n            'DATA': vector.type.bitWidth < 64\n                ? [...vector.values]\n                : [...bigNumsToStrings(vector.values as (Int32Array | Uint32Array), 2)]\n        };\n    }\n    public visitFloat<T extends Float>(vector: V<T>) {\n        return { 'DATA': [...vector.values] };\n    }\n    public visitUtf8<T extends Utf8>(vector: V<T>) {\n        return { 'DATA': [...vector], 'OFFSET': [...vector.valueOffsets] };\n    }\n    public visitBinary<T extends Binary>(vector: V<T>) {\n        return { 'DATA': [...binaryToString(vector)], OFFSET: [...vector.valueOffsets] };\n    }\n    public visitFixedSizeBinary<T extends FixedSizeBinary>(vector: V<T>) {\n        return { 'DATA': [...binaryToString(vector)] };\n    }\n    public visitDate<T extends Date_>(vector: V<T>) {\n        return {\n            'DATA': vector.type.unit === DateUnit.DAY\n                ? [...vector.values]\n                : [...bigNumsToStrings(vector.values, 2)]\n        };\n    }\n    public visitTimestamp<T extends Timestamp>(vector: V<T>) {\n        return { 'DATA': [...bigNumsToStrings(vector.values, 2)] };\n    }\n    public visitTime<T extends Time>(vector: V<T>) {\n        return {\n            'DATA': vector.type.unit < TimeUnit.MICROSECOND\n                ? [...vector.values]\n                : [...bigNumsToStrings(vector.values, 2)]\n        };\n    }\n    public visitDecimal<T extends Decimal>(vector: V<T>) {\n        return { 'DATA': [...bigNumsToStrings(vector.values, 4)] };\n    }\n    public visitList<T extends List>(vector: V<T>) {\n        return {\n            'OFFSET': [...vector.valueOffsets],\n            'children': vector.type.children.map((f, i) =>\n                this.visit(new Column(f, [vector.getChildAt(i)!])))\n        };\n    }\n    public visitStruct<T extends Struct>(vector: V<T>) {\n        return {\n            'children': vector.type.children.map((f, i) =>\n                this.visit(new Column(f, [vector.getChildAt(i)!])))\n        };\n    }\n    public visitUnion<T extends Union>(vector: V<T>) {\n        return {\n            'TYPE': [...vector.typeIds],\n            'OFFSET': vector.type.mode === UnionMode.Dense ? [...vector.valueOffsets] : undefined,\n            'children': vector.type.children.map((f, i) => this.visit(new Column(f, [vector.getChildAt(i)!])))\n        };\n    }\n    public visitInterval<T extends Interval>(vector: V<T>) {\n        return { 'DATA': [...vector.values] };\n    }\n    public visitFixedSizeList<T extends FixedSizeList>(vector: V<T>) {\n        return {\n            'children': vector.type.children.map((f, i) =>\n                this.visit(new Column(f, [vector.getChildAt(i)!])))\n        };\n    }\n    public visitMap<T extends Map_>(vector: V<T>) {\n        return {\n            'OFFSET': [...vector.valueOffsets],\n            'children': vector.type.children.map((f, i) =>\n                this.visit(new Column(f, [vector.getChildAt(i)!])))\n        };\n    }\n}\n\n/** @ignore */\nfunction* binaryToString(vector: Vector<Binary> | Vector<FixedSizeBinary>) {\n    for (const octets of vector as Iterable<Uint8Array>) {\n        yield octets.reduce((str, byte) => {\n            return `${str}${('0' + (byte & 0xFF).toString(16)).slice(-2)}`;\n        }, '').toUpperCase();\n    }\n}\n\n/** @ignore */\nfunction* bigNumsToStrings(values: Uint32Array | Int32Array, stride: number) {\n    for (let i = -1, n = values.length / stride; ++i < n;) {\n        yield `${BN.new(values.subarray((i + 0) * stride, (i + 1) * stride), false)}`;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Table } from '../table';\nimport { MAGIC } from './message';\nimport { Vector } from '../vector';\nimport { Column } from '../column';\nimport { DataType } from '../type';\nimport { Schema, Field } from '../schema';\nimport { Message } from './metadata/message';\nimport * as metadata from './metadata/message';\nimport { FileBlock, Footer } from './metadata/file';\nimport { MessageHeader, MetadataVersion } from '../enum';\nimport { compareSchemas } from '../visitor/typecomparator';\nimport { WritableSink, AsyncByteQueue } from '../io/stream';\nimport { VectorAssembler } from '../visitor/vectorassembler';\nimport { JSONTypeAssembler } from '../visitor/jsontypeassembler';\nimport { JSONVectorAssembler } from '../visitor/jsonvectorassembler';\nimport { ArrayBufferViewInput, toUint8Array } from '../util/buffer';\nimport { RecordBatch, _InternalEmptyPlaceholderRecordBatch } from '../recordbatch';\nimport { Writable, ReadableInterop, ReadableDOMStreamOptions } from '../io/interfaces';\nimport { isPromise, isAsyncIterable, isWritableDOMStream, isWritableNodeStream, isIterable, isObject } from '../util/compat';\n\nexport interface RecordBatchStreamWriterOptions {\n    /**\n     *\n     */\n    autoDestroy?: boolean;\n    /**\n     * A flag indicating whether the RecordBatchWriter should construct pre-0.15.0\n     * encapsulated IPC Messages, which reserves  4 bytes for the Message metadata\n     * length instead of 8.\n     * @see https://issues.apache.org/jira/browse/ARROW-6313\n     */\n    writeLegacyIpcFormat?: boolean;\n}\n\nexport class RecordBatchWriter<T extends { [key: string]: DataType } = any> extends ReadableInterop<Uint8Array> implements Writable<RecordBatch<T>> {\n\n    /** @nocollapse */\n    // @ts-ignore\n    public static throughNode(options?: import('stream').DuplexOptions & { autoDestroy: boolean }): import('stream').Duplex {\n        throw new Error(`\"throughNode\" not available in this environment`);\n    }\n    /** @nocollapse */\n    public static throughDOM<T extends { [key: string]: DataType }>(\n        // @ts-ignore\n        writableStrategy?: QueuingStrategy<RecordBatch<T>> & { autoDestroy: boolean },\n        // @ts-ignore\n        readableStrategy?: { highWaterMark?: number; size?: any }\n    ): { writable: WritableStream<Table<T> | RecordBatch<T>>; readable: ReadableStream<Uint8Array> } {\n        throw new Error(`\"throughDOM\" not available in this environment`);\n    }\n\n    constructor(options?: RecordBatchStreamWriterOptions) {\n        super();\n        isObject(options) || (options = { autoDestroy: true, writeLegacyIpcFormat: false });\n        this._autoDestroy = (typeof options.autoDestroy === 'boolean') ? options.autoDestroy : true;\n        this._writeLegacyIpcFormat = (typeof options.writeLegacyIpcFormat === 'boolean') ? options.writeLegacyIpcFormat : false;\n    }\n\n    protected _position = 0;\n    protected _started = false;\n    protected _autoDestroy: boolean;\n    protected _writeLegacyIpcFormat: boolean;\n    // @ts-ignore\n    protected _sink = new AsyncByteQueue();\n    protected _schema: Schema | null = null;\n    protected _dictionaryBlocks: FileBlock[] = [];\n    protected _recordBatchBlocks: FileBlock[] = [];\n    protected _dictionaryDeltaOffsets = new Map<number, number>();\n\n    public toString(sync: true): string;\n    public toString(sync?: false): Promise<string>;\n    public toString(sync: any = false) {\n        return this._sink.toString(sync) as Promise<string> | string;\n    }\n    public toUint8Array(sync: true): Uint8Array;\n    public toUint8Array(sync?: false): Promise<Uint8Array>;\n    public toUint8Array(sync: any = false) {\n        return this._sink.toUint8Array(sync) as Promise<Uint8Array> | Uint8Array;\n    }\n\n    public writeAll(input: Table<T> | Iterable<RecordBatch<T>>): this;\n    public writeAll(input: AsyncIterable<RecordBatch<T>>): Promise<this>;\n    public writeAll(input: PromiseLike<AsyncIterable<RecordBatch<T>>>): Promise<this>;\n    public writeAll(input: PromiseLike<Table<T> | Iterable<RecordBatch<T>>>): Promise<this>;\n    public writeAll(input: PromiseLike<any> | Table<T> | Iterable<RecordBatch<T>> | AsyncIterable<RecordBatch<T>>) {\n        if (isPromise<any>(input)) {\n            return input.then((x) => this.writeAll(x));\n        } else if (isAsyncIterable<RecordBatch<T>>(input)) {\n            return writeAllAsync(this, input);\n        }\n        return writeAll(this, <any> input);\n    }\n\n    public get closed() { return this._sink.closed; }\n    public [Symbol.asyncIterator]() { return this._sink[Symbol.asyncIterator](); }\n    public toDOMStream(options?: ReadableDOMStreamOptions) { return this._sink.toDOMStream(options); }\n    public toNodeStream(options?: import('stream').ReadableOptions) { return this._sink.toNodeStream(options); }\n\n    public close() {\n        return this.reset()._sink.close();\n    }\n    public abort(reason?: any) {\n        return this.reset()._sink.abort(reason);\n    }\n    public finish() {\n        this._autoDestroy ? this.close() : this.reset(this._sink, this._schema);\n        return this;\n    }\n    public reset(sink: WritableSink<ArrayBufferViewInput> = this._sink, schema: Schema<T> | null = null) {\n        if ((sink === this._sink) || (sink instanceof AsyncByteQueue)) {\n            this._sink = sink as AsyncByteQueue;\n        } else {\n            this._sink = new AsyncByteQueue();\n            if (sink && isWritableDOMStream(sink)) {\n                this.toDOMStream({ type: 'bytes' }).pipeTo(sink);\n            } else if (sink && isWritableNodeStream(sink)) {\n                this.toNodeStream({ objectMode: false }).pipe(sink);\n            }\n        }\n\n        if (this._started && this._schema) {\n            this._writeFooter(this._schema);\n        }\n\n        this._started = false;\n        this._dictionaryBlocks = [];\n        this._recordBatchBlocks = [];\n        this._dictionaryDeltaOffsets = new Map();\n\n        if (!schema || !(compareSchemas(schema, this._schema))) {\n            if (schema === null) {\n                this._position = 0;\n                this._schema = null;\n            } else {\n                this._started = true;\n                this._schema = schema;\n                this._writeSchema(schema);\n            }\n        }\n\n        return this;\n    }\n\n    public write(payload?: Table<T> | RecordBatch<T> | Iterable<RecordBatch<T>> | null) {\n        let schema: Schema<T> | null = null;\n\n        if (!this._sink) {\n            throw new Error(`RecordBatchWriter is closed`);\n        } else if (payload === null || payload === undefined) {\n            return this.finish() && undefined;\n        } else if (payload instanceof Table && !(schema = payload.schema)) {\n            return this.finish() && undefined;\n        } else if (payload instanceof RecordBatch && !(schema = payload.schema)) {\n            return this.finish() && undefined;\n        }\n\n        if (schema && !compareSchemas(schema, this._schema)) {\n            if (this._started && this._autoDestroy) {\n                return this.close();\n            }\n            this.reset(this._sink, schema);\n        }\n\n        if (payload instanceof RecordBatch) {\n            if (!(payload instanceof _InternalEmptyPlaceholderRecordBatch)) {\n                this._writeRecordBatch(payload);\n            }\n        } else if (payload instanceof Table) {\n            this.writeAll(payload.chunks);\n        } else if (isIterable(payload)) {\n            this.writeAll(payload);\n        }\n    }\n\n    protected _writeMessage<T extends MessageHeader>(message: Message<T>, alignment = 8) {\n        const a = alignment - 1;\n        const buffer = Message.encode(message);\n        const flatbufferSize = buffer.byteLength;\n        const prefixSize = !this._writeLegacyIpcFormat ? 8 : 4;\n        const alignedSize = (flatbufferSize + prefixSize + a) & ~a;\n        const nPaddingBytes = alignedSize - flatbufferSize - prefixSize;\n\n        if (message.headerType === MessageHeader.RecordBatch) {\n            this._recordBatchBlocks.push(new FileBlock(alignedSize, message.bodyLength, this._position));\n        } else if (message.headerType === MessageHeader.DictionaryBatch) {\n            this._dictionaryBlocks.push(new FileBlock(alignedSize, message.bodyLength, this._position));\n        }\n\n        // If not in legacy pre-0.15.0 mode, write the stream continuation indicator\n        if (!this._writeLegacyIpcFormat) {\n            this._write(Int32Array.of(-1));\n        }\n        // Write the flatbuffer size prefix including padding\n        this._write(Int32Array.of(alignedSize - prefixSize));\n        // Write the flatbuffer\n        if (flatbufferSize > 0) { this._write(buffer); }\n        // Write any padding\n        return this._writePadding(nPaddingBytes);\n    }\n\n    protected _write(chunk: ArrayBufferViewInput) {\n        if (this._started) {\n            const buffer = toUint8Array(chunk);\n            if (buffer && buffer.byteLength > 0) {\n                this._sink.write(buffer);\n                this._position += buffer.byteLength;\n            }\n        }\n        return this;\n    }\n\n    protected _writeSchema(schema: Schema<T>) {\n        return this._writeMessage(Message.from(schema));\n    }\n\n    // @ts-ignore\n    protected _writeFooter(schema: Schema<T>) {\n        // eos bytes\n        return this._writeLegacyIpcFormat\n            ? this._write(Int32Array.of(0))\n            : this._write(Int32Array.of(-1, 0));\n    }\n\n    protected _writeMagic() {\n        return this._write(MAGIC);\n    }\n\n    protected _writePadding(nBytes: number) {\n        return nBytes > 0 ? this._write(new Uint8Array(nBytes)) : this;\n    }\n\n    protected _writeRecordBatch(batch: RecordBatch<T>) {\n        const { byteLength, nodes, bufferRegions, buffers } = VectorAssembler.assemble(batch);\n        const recordBatch = new metadata.RecordBatch(batch.length, nodes, bufferRegions);\n        const message = Message.from(recordBatch, byteLength);\n        return this\n            ._writeDictionaries(batch)\n            ._writeMessage(message)\n            ._writeBodyBuffers(buffers);\n    }\n\n    protected _writeDictionaryBatch(dictionary: Vector, id: number, isDelta = false) {\n        this._dictionaryDeltaOffsets.set(id, dictionary.length + (this._dictionaryDeltaOffsets.get(id) || 0));\n        const { byteLength, nodes, bufferRegions, buffers } = VectorAssembler.assemble(dictionary);\n        const recordBatch = new metadata.RecordBatch(dictionary.length, nodes, bufferRegions);\n        const dictionaryBatch = new metadata.DictionaryBatch(recordBatch, id, isDelta);\n        const message = Message.from(dictionaryBatch, byteLength);\n        return this\n            ._writeMessage(message)\n            ._writeBodyBuffers(buffers);\n    }\n\n    protected _writeBodyBuffers(buffers: ArrayBufferView[]) {\n        let buffer: ArrayBufferView;\n        let size: number, padding: number;\n        for (let i = -1, n = buffers.length; ++i < n;) {\n            if ((buffer = buffers[i]) && (size = buffer.byteLength) > 0) {\n                this._write(buffer);\n                if ((padding = ((size + 7) & ~7) - size) > 0) {\n                    this._writePadding(padding);\n                }\n            }\n        }\n        return this;\n    }\n\n    protected _writeDictionaries(batch: RecordBatch<T>) {\n        for (let [id, dictionary] of batch.dictionaries) {\n            let offset = this._dictionaryDeltaOffsets.get(id) || 0;\n            if (offset === 0 || (dictionary = dictionary.slice(offset)).length > 0) {\n                const chunks = 'chunks' in dictionary ? (dictionary as any).chunks : [dictionary];\n                for (const chunk of chunks) {\n                    this._writeDictionaryBatch(chunk, id, offset > 0);\n                    offset += chunk.length;\n                }\n            }\n        }\n        return this;\n    }\n}\n\n/** @ignore */\nexport class RecordBatchStreamWriter<T extends { [key: string]: DataType } = any> extends RecordBatchWriter<T> {\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: Table<T> | Iterable<RecordBatch<T>>, options?: RecordBatchStreamWriterOptions): RecordBatchStreamWriter<T>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: AsyncIterable<RecordBatch<T>>, options?: RecordBatchStreamWriterOptions): Promise<RecordBatchStreamWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: PromiseLike<AsyncIterable<RecordBatch<T>>>, options?: RecordBatchStreamWriterOptions): Promise<RecordBatchStreamWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: PromiseLike<Table<T> | Iterable<RecordBatch<T>>>, options?: RecordBatchStreamWriterOptions): Promise<RecordBatchStreamWriter<T>>;\n    /** @nocollapse */\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: any, options?: RecordBatchStreamWriterOptions) {\n        const writer = new RecordBatchStreamWriter<T>(options);\n        if (isPromise<any>(input)) {\n            return input.then((x) => writer.writeAll(x));\n        } else if (isAsyncIterable<RecordBatch<T>>(input)) {\n            return writeAllAsync(writer, input);\n        }\n        return writeAll(writer, input);\n    }\n}\n\n/** @ignore */\nexport class RecordBatchFileWriter<T extends { [key: string]: DataType } = any> extends RecordBatchWriter<T> {\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: Table<T> | Iterable<RecordBatch<T>>): RecordBatchFileWriter<T>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: AsyncIterable<RecordBatch<T>>): Promise<RecordBatchFileWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: PromiseLike<AsyncIterable<RecordBatch<T>>>): Promise<RecordBatchFileWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: PromiseLike<Table<T> | Iterable<RecordBatch<T>>>): Promise<RecordBatchFileWriter<T>>;\n    /** @nocollapse */\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: any) {\n        const writer = new RecordBatchFileWriter<T>();\n        if (isPromise<any>(input)) {\n            return input.then((x) => writer.writeAll(x));\n        } else if (isAsyncIterable<RecordBatch<T>>(input)) {\n            return writeAllAsync(writer, input);\n        }\n        return writeAll(writer, input);\n    }\n\n    constructor() {\n        super();\n        this._autoDestroy = true;\n    }\n\n    // @ts-ignore\n    protected _writeSchema(schema: Schema<T>) {\n        return this._writeMagic()._writePadding(2);\n    }\n\n    protected _writeFooter(schema: Schema<T>) {\n        const buffer = Footer.encode(new Footer(\n            schema, MetadataVersion.V4,\n            this._recordBatchBlocks, this._dictionaryBlocks\n        ));\n        return super\n            ._writeFooter(schema) // EOS bytes for sequential readers\n            ._write(buffer) // Write the flatbuffer\n            ._write(Int32Array.of(buffer.byteLength)) // then the footer size suffix\n            ._writeMagic(); // then the magic suffix\n    }\n}\n\n/** @ignore */\nexport class RecordBatchJSONWriter<T extends { [key: string]: DataType } = any> extends RecordBatchWriter<T> {\n\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: Table<T> | Iterable<RecordBatch<T>>): RecordBatchJSONWriter<T>;\n    // @ts-ignore\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: AsyncIterable<RecordBatch<T>>): Promise<RecordBatchJSONWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: PromiseLike<AsyncIterable<RecordBatch<T>>>): Promise<RecordBatchJSONWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: PromiseLike<Table<T> | Iterable<RecordBatch<T>>>): Promise<RecordBatchJSONWriter<T>>;\n    /** @nocollapse */\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: any) {\n        return new RecordBatchJSONWriter<T>().writeAll(input as any);\n    }\n\n    private _recordBatches: RecordBatch[];\n    private _dictionaries: RecordBatch[];\n\n    constructor() {\n        super();\n        this._autoDestroy = true;\n        this._recordBatches = [];\n        this._dictionaries = [];\n    }\n\n    protected _writeMessage() { return this; }\n    // @ts-ignore\n    protected _writeFooter(schema: Schema<T>) { return this; }\n    protected _writeSchema(schema: Schema<T>) {\n        return this._write(`{\\n  \"schema\": ${\n            JSON.stringify({ fields: schema.fields.map(fieldToJSON) }, null, 2)\n        }`);\n    }\n    protected _writeDictionaries(batch: RecordBatch<T>) {\n        if (batch.dictionaries.size > 0) {\n            this._dictionaries.push(batch);\n        }\n        return this;\n    }\n    protected _writeDictionaryBatch(dictionary: Vector, id: number, isDelta = false) {\n        this._dictionaryDeltaOffsets.set(id, dictionary.length + (this._dictionaryDeltaOffsets.get(id) || 0));\n        this._write(this._dictionaryBlocks.length === 0 ? `    ` : `,\\n    `);\n        this._write(`${dictionaryBatchToJSON(dictionary, id, isDelta)}`);\n        this._dictionaryBlocks.push(new FileBlock(0, 0, 0));\n        return this;\n    }\n    protected _writeRecordBatch(batch: RecordBatch<T>) {\n        this._writeDictionaries(batch);\n        this._recordBatches.push(batch);\n        return this;\n    }\n    public close() {\n\n        if (this._dictionaries.length > 0) {\n            this._write(`,\\n  \"dictionaries\": [\\n`);\n            for (const batch of this._dictionaries) {\n                super._writeDictionaries(batch);\n            }\n            this._write(`\\n  ]`);\n        }\n\n        if (this._recordBatches.length > 0) {\n            for (let i = -1, n = this._recordBatches.length; ++i < n;) {\n                this._write(i === 0 ? `,\\n  \"batches\": [\\n    ` : `,\\n    `);\n                this._write(`${recordBatchToJSON(this._recordBatches[i])}`);\n                this._recordBatchBlocks.push(new FileBlock(0, 0, 0));\n            }\n            this._write(`\\n  ]`);\n        }\n\n        if (this._schema) {\n            this._write(`\\n}`);\n        }\n\n        this._dictionaries = [];\n        this._recordBatches = [];\n\n        return super.close();\n    }\n}\n\n/** @ignore */\nfunction writeAll<T extends { [key: string]: DataType } = any>(writer: RecordBatchWriter<T>, input: Table<T> | Iterable<RecordBatch<T>>) {\n    let chunks = input as Iterable<RecordBatch<T>>;\n    if (input instanceof Table) {\n        chunks = input.chunks;\n        writer.reset(undefined, input.schema);\n    }\n    for (const batch of chunks) {\n        writer.write(batch);\n    }\n    return writer.finish();\n}\n\n/** @ignore */\nasync function writeAllAsync<T extends { [key: string]: DataType } = any>(writer: RecordBatchWriter<T>, batches: AsyncIterable<RecordBatch<T>>) {\n    for await (const batch of batches) {\n        writer.write(batch);\n    }\n    return writer.finish();\n}\n\n/** @ignore */\nfunction fieldToJSON({ name, type, nullable }: Field): Record<string, unknown> {\n    const assembler = new JSONTypeAssembler();\n    return {\n        'name': name, 'nullable': nullable,\n        'type': assembler.visit(type),\n        'children': (type.children || []).map(fieldToJSON),\n        'dictionary': !DataType.isDictionary(type) ? undefined : {\n            'id': type.id,\n            'isOrdered': type.isOrdered,\n            'indexType': assembler.visit(type.indices)\n        }\n    };\n}\n\n/** @ignore */\nfunction dictionaryBatchToJSON(dictionary: Vector, id: number, isDelta = false) {\n    const field = new Field(`${id}`, dictionary.type, dictionary.nullCount > 0);\n    const columns = JSONVectorAssembler.assemble(new Column(field, [dictionary]));\n    return JSON.stringify({\n        'id': id,\n        'isDelta': isDelta,\n        'data': {\n            'count': dictionary.length,\n            'columns': columns\n        }\n    }, null, 2);\n}\n\n/** @ignore */\nfunction recordBatchToJSON(records: RecordBatch) {\n    return JSON.stringify({\n        'count': records.length,\n        'columns': JSONVectorAssembler.assemble(records)\n    }, null, 2);\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Column } from '../column';\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\nimport { Data, Buffers } from '../data';\nimport { Schema, Field } from '../schema';\nimport { Chunked } from '../vector/chunked';\nimport { RecordBatch } from '../recordbatch';\n\nconst noopBuf = new Uint8Array(0);\nconst nullBufs = (bitmapLength: number) => <unknown> [\n    noopBuf, noopBuf, new Uint8Array(bitmapLength), noopBuf\n] as Buffers<any>;\n\n/** @ignore */\nexport function ensureSameLengthData<T extends { [key: string]: DataType } = any>(\n    schema: Schema<T>,\n    chunks: Data<T[keyof T]>[],\n    batchLength = chunks.reduce((l, c) => Math.max(l, c.length), 0)\n) {\n    let data: Data<T[keyof T]>;\n    let field: Field<T[keyof T]>;\n    let i = -1;\n    const n = chunks.length;\n    const fields = [...schema.fields];\n    const batchData = [] as Data<T[keyof T]>[];\n    const bitmapLength = ((batchLength + 63) & ~63) >> 3;\n    while (++i < n) {\n        if ((data = chunks[i]) && data.length === batchLength) {\n            batchData[i] = data;\n        } else {\n            (field = fields[i]).nullable || (fields[i] = fields[i].clone({ nullable: true }) as Field<T[keyof T]>);\n            batchData[i] = data ? data._changeLengthAndBackfillNullBitmap(batchLength)\n                : Data.new(field.type, 0, batchLength, batchLength, nullBufs(bitmapLength)) as Data<T[keyof T]>;\n        }\n    }\n    return [new Schema<T>(fields), batchLength, batchData] as [Schema<T>, number, Data<T[keyof T]>[]];\n}\n\n/** @ignore */\nexport function distributeColumnsIntoRecordBatches<T extends { [key: string]: DataType } = any>(columns: Column<T[keyof T]>[]): [Schema<T>, RecordBatch<T>[]] {\n    return distributeVectorsIntoRecordBatches<T>(new Schema<T>(columns.map(({ field }) => field)), columns);\n}\n\n/** @ignore */\nexport function distributeVectorsIntoRecordBatches<T extends { [key: string]: DataType } = any>(schema: Schema<T>, vecs: (Vector<T[keyof T]> | Chunked<T[keyof T]>)[]): [Schema<T>, RecordBatch<T>[]] {\n    return uniformlyDistributeChunksAcrossRecordBatches<T>(schema, vecs.map((v) => v instanceof Chunked ? v.chunks.map((c) => c.data) : [v.data]));\n}\n\n/** @ignore */\nfunction uniformlyDistributeChunksAcrossRecordBatches<T extends { [key: string]: DataType } = any>(schema: Schema<T>, columns: Data<T[keyof T]>[][]): [Schema<T>, RecordBatch<T>[]] {\n\n    const fields = [...schema.fields];\n    const batchArgs = [] as [number, Data<T[keyof T]>[]][];\n    const memo = { numBatches: columns.reduce((n, c) => Math.max(n, c.length), 0) };\n\n    let numBatches = 0, batchLength = 0;\n    let i = -1;\n    const numColumns = columns.length;\n    let child: Data<T[keyof T]>, childData: Data<T[keyof T]>[] = [];\n\n    while (memo.numBatches-- > 0) {\n\n        for (batchLength = Number.POSITIVE_INFINITY, i = -1; ++i < numColumns;) {\n            childData[i] = child = columns[i].shift()!;\n            batchLength = Math.min(batchLength, child ? child.length : batchLength);\n        }\n\n        if (isFinite(batchLength)) {\n            childData = distributeChildData(fields, batchLength, childData, columns, memo);\n            if (batchLength > 0) {\n                batchArgs[numBatches++] = [batchLength, childData.slice()];\n            }\n        }\n    }\n    return [\n        schema = new Schema<T>(fields, schema.metadata),\n        batchArgs.map((xs) => new RecordBatch(schema, ...xs))\n    ];\n}\n\n/** @ignore */\nfunction distributeChildData<T extends { [key: string]: DataType } = any>(fields: Field<T[keyof T]>[], batchLength: number, childData: Data<T[keyof T]>[], columns: Data<T[keyof T]>[][], memo: { numBatches: number }) {\n    let data: Data<T[keyof T]>;\n    let field: Field<T[keyof T]>;\n    let length = 0, i = -1;\n    const n = columns.length;\n    const bitmapLength = ((batchLength + 63) & ~63) >> 3;\n    while (++i < n) {\n        if ((data = childData[i]) && ((length = data.length) >= batchLength)) {\n            if (length === batchLength) {\n                childData[i] = data;\n            } else {\n                childData[i] = data.slice(0, batchLength);\n                data = data.slice(batchLength, length - batchLength);\n                memo.numBatches = Math.max(memo.numBatches, columns[i].unshift(data));\n            }\n        } else {\n            (field = fields[i]).nullable || (fields[i] = field.clone({ nullable: true }) as Field<T[keyof T]>);\n            childData[i] = data ? data._changeLengthAndBackfillNullBitmap(batchLength)\n                : Data.new(field.type, 0, batchLength, batchLength, nullBufs(bitmapLength)) as Data<T[keyof T]>;\n        }\n    }\n    return childData;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { DataType } from '../type';\nimport { Chunked } from './chunked';\nimport { clampRange } from '../util/vector';\nimport { VectorType as V } from '../interfaces';\nimport { AbstractVector, Vector, Clonable, Sliceable, Applicative } from '../vector';\n\n/** @ignore */\nexport interface BaseVector<T extends DataType = any> extends Clonable<V<T>>, Sliceable<V<T>>, Applicative<T, Chunked<T>> {\n    slice(begin?: number, end?: number): V<T>;\n    concat(...others: Vector<T>[]): Chunked<T>;\n    clone<R extends DataType = T>(data: Data<R>, children?: Vector<R>[]): V<R>;\n}\n\n/** @ignore */\nexport abstract class BaseVector<T extends DataType = any> extends AbstractVector<T>\n    implements Clonable<V<T>>, Sliceable<V<T>>, Applicative<T, Chunked<T>> {\n\n    protected _children?: Vector[];\n\n    constructor(data: Data<T>, children?: Vector[]) {\n        super();\n        this._children = children;\n        this.numChildren = data.childData.length;\n        this._bindDataAccessors(this.data = data);\n    }\n\n    public readonly data: Data<T>;\n    public readonly numChildren: number;\n\n    public get type() { return this.data.type; }\n    public get typeId() { return this.data.typeId; }\n    public get length() { return this.data.length; }\n    public get offset() { return this.data.offset; }\n    public get stride() { return this.data.stride; }\n    public get nullCount() { return this.data.nullCount; }\n    public get byteLength() { return this.data.byteLength; }\n    public get VectorName() { return `${Type[this.typeId]}Vector`; }\n\n    public get ArrayType(): T['ArrayType'] { return this.type.ArrayType; }\n\n    public get values() { return this.data.values; }\n    public get typeIds() { return this.data.typeIds; }\n    public get nullBitmap() { return this.data.nullBitmap; }\n    public get valueOffsets() { return this.data.valueOffsets; }\n\n    public get [Symbol.toStringTag]() { return `${this.VectorName}<${this.type[Symbol.toStringTag]}>`; }\n\n    public clone<R extends DataType = T>(data: Data<R>, children = this._children) {\n        return Vector.new<R>(data, children) as any;\n    }\n\n    public concat(...others: Vector<T>[]) {\n        return Chunked.concat<T>(this, ...others);\n    }\n\n    public slice(begin?: number, end?: number) {\n        // Adjust args similar to Array.prototype.slice. Normalize begin/end to\n        // clamp between 0 and length, and wrap around on negative indices, e.g.\n        // slice(-1, 5) or slice(5, -1)\n        return clampRange(this, begin, end, this._sliceInternal);\n    }\n\n    public isValid(index: number): boolean {\n        if (this.nullCount > 0) {\n            const idx = this.offset + index;\n            const val = this.nullBitmap[idx >> 3];\n            const mask = (val & (1 << (idx % 8)));\n            return mask !== 0;\n        }\n        return true;\n    }\n\n    public getChildAt<R extends DataType = any>(index: number): Vector<R> | null {\n        return index < 0 || index >= this.numChildren ? null : (\n            (this._children || (this._children = []))[index] ||\n            (this._children[index] = Vector.new<R>(this.data.childData[index] as Data<R>))\n        ) as Vector<R>;\n    }\n\n    public toJSON(): any { return [...this]; }\n\n    protected _sliceInternal(self: this, begin: number, end: number) {\n        return self.clone(self.data.slice(begin, end - begin), null!);\n    }\n\n    // @ts-ignore\n    protected _bindDataAccessors(data: Data<T>) {\n        // Implementation in src/vectors/index.ts due to circular dependency/packaging shenanigans\n    }\n}\n\n(BaseVector.prototype as any)[Symbol.isConcatSpreadable] = true;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { Binary, Utf8 } from '../type';\n\n/** @ignore */\nexport class BinaryVector extends BaseVector<Binary> {\n    public asUtf8() {\n        return Vector.new(this.data.clone(new Utf8()));\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Bool } from '../type';\nimport { Chunked } from './chunked';\nimport { BaseVector } from './base';\nimport { VectorBuilderOptions } from './index';\nimport { vectorFromValuesWithType } from './index';\nimport { VectorBuilderOptionsAsync } from './index';\n\n/** @ignore */\nexport class BoolVector extends BaseVector<Bool> {\n    public static from<TNull = any>(input: Iterable<boolean | TNull>): BoolVector;\n    public static from<TNull = any>(input: AsyncIterable<boolean | TNull>): Promise<BoolVector>;\n    public static from<TNull = any>(input: VectorBuilderOptions<Bool, boolean | TNull>): Chunked<Bool>;\n    public static from<TNull = any>(input: VectorBuilderOptionsAsync<Bool, boolean | TNull>): Promise<Chunked<Bool>>;\n    /** @nocollapse */\n    public static from<TNull = any>(input: Iterable<boolean | TNull> | AsyncIterable<boolean | TNull> | VectorBuilderOptions<Bool, boolean | TNull> | VectorBuilderOptionsAsync<Bool, boolean | TNull>) {\n        return vectorFromValuesWithType(() => new Bool(), input);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { DateUnit } from '../enum';\nimport { Chunked } from './chunked';\nimport { BaseVector } from './base';\nimport { VectorType as V } from '../interfaces';\nimport { VectorBuilderOptions } from './index';\nimport { vectorFromValuesWithType } from './index';\nimport { VectorBuilderOptionsAsync } from './index';\nimport { Date_, DateDay, DateMillisecond  } from '../type';\n\n/** @ignore */\ntype FromArgs<T extends Date_> = [Iterable<Date>, T['unit']];\n\n/** @ignore */\nexport class DateVector<T extends Date_ = Date_> extends BaseVector<T> {\n    public static from<T extends DateUnit.DAY>(...args: FromArgs<DateDay>): V<DateDay>;\n    public static from<T extends DateUnit.MILLISECOND>(...args: FromArgs<DateMillisecond>): V<DateMillisecond>;\n    public static from<T extends Date_, TNull = any>(input: Iterable<Date | TNull>): V<T>;\n    public static from<T extends Date_, TNull = any>(input: AsyncIterable<Date | TNull>): Promise<V<T>>;\n    public static from<T extends Date_, TNull = any>(input: VectorBuilderOptions<T, Date | TNull>): Chunked<T>;\n    public static from<T extends Date_, TNull = any>(input: VectorBuilderOptionsAsync<T, Date | TNull>): Promise<Chunked<T>>;\n    /** @nocollapse */\n    public static from<T extends Date_, TNull = any>(...args: FromArgs<T> | [Iterable<Date | TNull> | AsyncIterable<Date | TNull> | VectorBuilderOptions<T, Date | TNull> | VectorBuilderOptionsAsync<T, Date | TNull>]) {\n        if (args.length === 2) {\n            return vectorFromValuesWithType(() => args[1] === DateUnit.DAY ? new DateDay() : new DateMillisecond() as T, args[0]);\n        }\n        return vectorFromValuesWithType(() => new DateMillisecond() as T, args[0]);\n    }\n}\n\n/** @ignore */\nexport class DateDayVector extends DateVector<DateDay> {}\n\n/** @ignore */\nexport class DateMillisecondVector extends DateVector<DateMillisecond> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Decimal } from '../type';\nimport { BaseVector } from './base';\n\n/** @ignore */\nexport class DecimalVector extends BaseVector<Decimal> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { VectorType as V } from '../interfaces';\nimport { VectorBuilderOptions } from './index';\nimport { vectorFromValuesWithType } from './index';\nimport { VectorBuilderOptionsAsync } from './index';\nimport { DataType, Dictionary, TKeys } from '../type';\n\n/** @ignore */\ntype FromArgs<T extends DataType = any, TKey extends TKeys = TKeys> = [Vector<T>, TKey, ArrayLike<number> | TKey['TArray']];\n\n/** @ignore */\nexport class DictionaryVector<T extends DataType = any, TKey extends TKeys = TKeys> extends BaseVector<Dictionary<T, TKey>> {\n    public static from<T extends DataType = any, TKey extends TKeys = TKeys>(...args: FromArgs<T, TKey>): V<Dictionary<T, TKey>>;\n    public static from<T extends DataType = any, TKey extends TKeys = TKeys>(input: VectorBuilderOptions<Dictionary<T, TKey>>): Vector<Dictionary<T, TKey>>;\n    public static from<T extends DataType = any, TKey extends TKeys = TKeys>(input: VectorBuilderOptionsAsync<Dictionary<T, TKey>>): Promise<Vector<Dictionary<T, TKey>>>;\n    /** @nocollapse */\n    public static from<T extends DataType = any, TKey extends TKeys = TKeys>(...args: any[]) {\n        if (args.length === 3) {\n            const [values, indices, keys] = args as FromArgs<T, TKey>;\n            const type = new Dictionary(values.type, indices, null, null);\n            return Vector.new(Data.Dictionary(type, 0, keys.length, 0, null, keys, values));\n        }\n        return vectorFromValuesWithType(() => args[0].type, args[0]);\n    }\n\n    constructor(data: Data<Dictionary<T, TKey>>) {\n        super(data);\n        this.indices = Vector.new(data.clone(this.type.indices));\n    }\n\n    public readonly indices: V<TKey>;\n\n    public get dictionary() { return <Vector<T>> this.data.dictionary; }\n    public reverseLookup(value: T) { return this.dictionary.indexOf(value); }\n    public getKey(idx: number): TKey['TValue'] | null { return this.indices.get(idx); }\n    public getValue(key: number): T['TValue'] | null { return this.dictionary.get(key); }\n    public setKey(idx: number, key: TKey['TValue'] | null) { return this.indices.set(idx, key); }\n    public setValue(key: number, value: T['TValue'] | null) { return this.dictionary.set(key, value); }\n}\n\n(DictionaryVector.prototype as any).indices = null;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { FixedSizeBinary } from '../type';\n\n/** @ignore */\nexport class FixedSizeBinaryVector extends BaseVector<FixedSizeBinary> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { DataType, FixedSizeList } from '../type';\n\n/** @ignore */\nexport class FixedSizeListVector<T extends DataType = any> extends BaseVector<FixedSizeList<T>> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { Chunked } from './chunked';\nimport { BaseVector } from './base';\nimport { VectorBuilderOptions } from './index';\nimport { vectorFromValuesWithType } from './index';\nimport { VectorBuilderOptionsAsync } from './index';\nimport { Float, Float16, Float32, Float64, FloatArray } from '../type';\nimport { VectorType as V, TypedArrayConstructor } from '../interfaces';\n\n/** @ignore */\ntype FloatVectorConstructors =\n    typeof FloatVector   |\n    typeof Float16Vector |\n    typeof Float32Vector |\n    typeof Float64Vector ;\n\n/** @ignore */\ntype FromInput<T extends Float, TNull = any> =\n    FloatArray                          |\n    Iterable<T['TValue'] | TNull>       |\n    AsyncIterable<T['TValue'] | TNull>  |\n    VectorBuilderOptions<T, TNull>      |\n    VectorBuilderOptionsAsync<T, TNull> ;\n\n/** @ignore */\ntype FloatArrayCtor = TypedArrayConstructor<FloatArray>;\n\n/** @ignore */\nexport class FloatVector<T extends Float = Float> extends BaseVector<T> {\n\n    // Guaranteed zero-copy variants\n    public static from(this: typeof FloatVector, input: Uint16Array): Float16Vector;\n    public static from(this: typeof FloatVector, input: Float32Array): Float32Vector;\n    public static from(this: typeof FloatVector, input: Float64Array): Float64Vector;\n\n    // Zero-copy if input is a TypedArray of the same type as the\n    // Vector that from is called on, otherwise uses the Builders\n    public static from<TNull = any>(this: typeof Float16Vector,  input: FromInput<Float16, TNull>): Float16Vector;\n    public static from<TNull = any>(this: typeof Float32Vector,  input: FromInput<Float32, TNull>): Float32Vector;\n    public static from<TNull = any>(this: typeof Float64Vector,  input: FromInput<Float64, TNull>): Float64Vector;\n\n    // Not zero-copy\n    public static from<T extends Float, TNull = any>(this: typeof FloatVector, input: Iterable<T['TValue'] | TNull>): V<T>;\n    public static from<T extends Float, TNull = any>(this: typeof FloatVector, input: AsyncIterable<T['TValue'] | TNull>): Promise<V<T>>;\n    public static from<T extends Float, TNull = any>(this: typeof FloatVector, input: VectorBuilderOptions<T, TNull>): Chunked<T>;\n    public static from<T extends Float, TNull = any>(this: typeof FloatVector, input: VectorBuilderOptionsAsync<T, TNull>): Promise<Chunked<T>>;\n    /** @nocollapse */\n    public static from<T extends Float, TNull = any>(this: FloatVectorConstructors, input: FromInput<T, TNull>) {\n\n        let ArrowType = vectorTypeToDataType(this);\n\n        if ((input instanceof ArrayBuffer) || ArrayBuffer.isView(input)) {\n            const InputType = arrayTypeToDataType(input.constructor as FloatArrayCtor) || ArrowType;\n            // Special case, infer the Arrow DataType from the input if calling the base\n            // FloatVector.from with a TypedArray, e.g. `FloatVector.from(new Float32Array())`\n            if (ArrowType === null) {\n                ArrowType = InputType;\n            }\n            // If the DataType inferred from the Vector constructor matches the\n            // DataType inferred from the input arguments, return zero-copy view\n            if (ArrowType && ArrowType === InputType) {\n                const type = new ArrowType();\n                const length = input.byteLength / type.ArrayType.BYTES_PER_ELEMENT;\n                // If the ArrowType is Float16 but the input type isn't a Uint16Array,\n                // let the Float16Builder handle casting the input values to Uint16s.\n                if (!convertTo16Bit(ArrowType, input.constructor)) {\n                    return Vector.new(Data.Float(type, 0, length, 0, null, input as FloatArray));\n                }\n            }\n        }\n\n        if (ArrowType) {\n            // If the DataType inferred from the Vector constructor is different than\n            // the DataType inferred from the input TypedArray, or if input isn't a\n            // TypedArray, use the Builders to construct the result Vector\n            return vectorFromValuesWithType(() => new ArrowType!() as T, input);\n        }\n\n        if ((input instanceof DataView) || (input instanceof ArrayBuffer)) {\n            throw new TypeError(`Cannot infer float type from instance of ${input.constructor.name}`);\n        }\n\n        throw new TypeError('Unrecognized FloatVector input');\n    }\n}\n\n/** @ignore */\nexport class Float16Vector extends FloatVector<Float16> {\n    // Since JS doesn't have half floats, `toArray()` returns a zero-copy slice\n    // of the underlying Uint16Array data. This behavior ensures we don't incur\n    // extra compute or copies if you're calling `toArray()` in order to create\n    // a buffer for something like WebGL. Buf if you're using JS and want typed\n    // arrays of 4-to-8-byte precision, these methods will enumerate the values\n    // and clamp to the desired byte lengths.\n    public toFloat32Array() { return new Float32Array(this as Iterable<number>); }\n    public toFloat64Array() { return new Float64Array(this as Iterable<number>); }\n}\n\n/** @ignore */\nexport class Float32Vector extends FloatVector<Float32> {}\n/** @ignore */\nexport class Float64Vector extends FloatVector<Float64> {}\n\nconst convertTo16Bit = (typeCtor: any, dataCtor: any) => {\n    return (typeCtor === Float16) && (dataCtor !== Uint16Array);\n};\n\n/** @ignore */\nconst arrayTypeToDataType = (ctor: FloatArrayCtor) => {\n    switch (ctor) {\n        case Uint16Array:    return Float16;\n        case Float32Array:   return Float32;\n        case Float64Array:   return Float64;\n        default: return null;\n    }\n};\n\n/** @ignore */\nconst vectorTypeToDataType = (ctor: FloatVectorConstructors) => {\n    switch (ctor) {\n        case Float16Vector: return Float16;\n        case Float32Vector: return Float32;\n        case Float64Vector: return Float64;\n        default: return null;\n    }\n};\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { Interval, IntervalDayTime, IntervalYearMonth } from '../type';\n\n/** @ignore */\nexport class IntervalVector<T extends Interval = Interval> extends BaseVector<T> {}\n/** @ignore */\nexport class IntervalDayTimeVector extends IntervalVector<IntervalDayTime> {}\n/** @ignore */\nexport class IntervalYearMonthVector extends IntervalVector<IntervalYearMonth> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { Chunked } from './chunked';\nimport { BaseVector } from './base';\nimport { VectorBuilderOptions } from './index';\nimport { vectorFromValuesWithType } from './index';\nimport { VectorBuilderOptionsAsync } from './index';\nimport { BigInt64Array, BigUint64Array } from '../util/compat';\nimport { toBigInt64Array, toBigUint64Array } from '../util/buffer';\nimport { Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64, IntArray } from '../type';\nimport { VectorType as V, TypedArrayConstructor, BigIntArrayConstructor, BigIntArray } from '../interfaces';\n\n/** @ignore */\ntype IntVectorConstructors =\n    typeof IntVector    |\n    typeof Int8Vector   |\n    typeof Int16Vector  |\n    typeof Int32Vector  |\n    typeof Uint8Vector  |\n    typeof Uint16Vector |\n    typeof Uint32Vector |\n    typeof Int64Vector  |\n    typeof Uint64Vector ;\n\n/** @ignore */\ntype FromInput<T extends Int, TNull = any> =\n    IntArray | BigIntArray              |\n    Iterable<T['TValue'] | TNull>       |\n    AsyncIterable<T['TValue'] | TNull>  |\n    VectorBuilderOptions<T, TNull>      |\n    VectorBuilderOptionsAsync<T, TNull> ;\n\n/** @ignore */\ntype FromArgs<T extends Int, TNull = any> = [FromInput<T, TNull>, boolean?];\n\n/** @ignore */\ntype IntArrayCtor = TypedArrayConstructor<IntArray> | BigIntArrayConstructor<BigIntArray>;\n\n/** @ignore */\nexport class IntVector<T extends Int = Int> extends BaseVector<T> {\n\n    // Guaranteed zero-copy variants\n    public static from(this: typeof IntVector, input: Int8Array): Int8Vector;\n    public static from(this: typeof IntVector, input: Int16Array): Int16Vector;\n    public static from(this: typeof IntVector, input: Int32Array): Int32Vector;\n    public static from(this: typeof IntVector, input: BigInt64Array): Int64Vector;\n    public static from(this: typeof IntVector, input: Int32Array, is64bit: true): Int64Vector;\n    public static from(this: typeof IntVector, input: Uint8Array): Uint8Vector;\n    public static from(this: typeof IntVector, input: Uint16Array): Uint16Vector;\n    public static from(this: typeof IntVector, input: Uint32Array): Uint32Vector;\n    public static from(this: typeof IntVector, input: BigUint64Array): Uint64Vector;\n    public static from(this: typeof IntVector, input: Uint32Array, is64bit: true): Uint64Vector;\n\n    // Zero-copy if input is a TypedArray of the same type as the\n    // Vector that from is called on, otherwise uses the Builders\n    public static from<TNull = any>(this: typeof Int8Vector,   input: FromInput<Int8, TNull>): Int8Vector;\n    public static from<TNull = any>(this: typeof Int16Vector,  input: FromInput<Int16, TNull>): Int16Vector;\n    public static from<TNull = any>(this: typeof Int32Vector,  input: FromInput<Int32, TNull>): Int32Vector;\n    public static from<TNull = any>(this: typeof Int64Vector,  input: FromInput<Int64, TNull>): Int64Vector;\n    public static from<TNull = any>(this: typeof Uint8Vector,  input: FromInput<Uint8, TNull>): Uint8Vector;\n    public static from<TNull = any>(this: typeof Uint16Vector, input: FromInput<Uint16, TNull>): Uint16Vector;\n    public static from<TNull = any>(this: typeof Uint32Vector, input: FromInput<Uint32, TNull>): Uint32Vector;\n    public static from<TNull = any>(this: typeof Uint64Vector, input: FromInput<Uint64, TNull>): Uint64Vector;\n\n    // Not zero-copy\n    public static from<T extends Int, TNull = any>(this: typeof IntVector, input: Iterable<T['TValue'] | TNull>): V<T>;\n    public static from<T extends Int, TNull = any>(this: typeof IntVector, input: AsyncIterable<T['TValue'] | TNull>): Promise<V<T>>;\n    public static from<T extends Int, TNull = any>(this: typeof IntVector, input: VectorBuilderOptions<T, TNull>): Chunked<T>;\n    public static from<T extends Int, TNull = any>(this: typeof IntVector, input: VectorBuilderOptionsAsync<T, TNull>): Promise<Chunked<T>>;\n    /** @nocollapse */\n    public static from<T extends Int, TNull = any>(this: IntVectorConstructors, ...args: FromArgs<T, TNull>) {\n\n        const [input, is64bit = false] = args;\n        let ArrowType = vectorTypeToDataType(this, is64bit);\n\n        if ((input instanceof ArrayBuffer) || ArrayBuffer.isView(input)) {\n            const InputType = arrayTypeToDataType(input.constructor as IntArrayCtor, is64bit) || ArrowType;\n            // Special case, infer the Arrow DataType from the input if calling the base\n            // IntVector.from with a TypedArray, e.g. `IntVector.from(new Int32Array())`\n            if (ArrowType === null) {\n                ArrowType = InputType;\n            }\n            // If the DataType inferred from the Vector constructor matches the\n            // DataType inferred from the input arguments, return zero-copy view\n            if (ArrowType && ArrowType === InputType) {\n                const type = new ArrowType();\n                let length = input.byteLength / type.ArrayType.BYTES_PER_ELEMENT;\n                // If the ArrowType is 64bit but the input type is 32bit pairs, update the logical length\n                if (convert32To64Bit(ArrowType, input.constructor)) {\n                    length *= 0.5;\n                }\n                return Vector.new(Data.Int(type, 0, length, 0, null, input as IntArray));\n            }\n        }\n\n        if (ArrowType) {\n            // If the DataType inferred from the Vector constructor is different than\n            // the DataType inferred from the input TypedArray, or if input isn't a\n            // TypedArray, use the Builders to construct the result Vector\n            return vectorFromValuesWithType(() => new ArrowType!() as T, input);\n        }\n\n        if ((input instanceof DataView) || (input instanceof ArrayBuffer)) {\n            throw new TypeError(`Cannot infer integer type from instance of ${input.constructor.name}`);\n        }\n\n        throw new TypeError('Unrecognized IntVector input');\n    }\n}\n\n/** @ignore */\nexport class Int8Vector extends IntVector<Int8> {}\n/** @ignore */\nexport class Int16Vector extends IntVector<Int16> {}\n/** @ignore */\nexport class Int32Vector extends IntVector<Int32> {}\n/** @ignore */\nexport class Int64Vector extends IntVector<Int64> {\n    public toBigInt64Array() {\n        return toBigInt64Array(this.values);\n    }\n    private _values64!: BigInt64Array;\n    public get values64(): BigInt64Array {\n        return this._values64 || (this._values64 = this.toBigInt64Array());\n    }\n}\n\n/** @ignore */\nexport class Uint8Vector extends IntVector<Uint8> {}\n/** @ignore */\nexport class Uint16Vector extends IntVector<Uint16> {}\n/** @ignore */\nexport class Uint32Vector extends IntVector<Uint32> {}\n/** @ignore */\nexport class Uint64Vector extends IntVector<Uint64> {\n    public toBigUint64Array() {\n        return toBigUint64Array(this.values);\n    }\n    private _values64!: BigUint64Array;\n    public get values64(): BigUint64Array {\n        return this._values64 || (this._values64 = this.toBigUint64Array());\n    }\n}\n\nconst convert32To64Bit = (typeCtor: any, dataCtor: any) => {\n    return (typeCtor === Int64 || typeCtor === Uint64) &&\n           (dataCtor === Int32Array || dataCtor === Uint32Array);\n};\n\n/** @ignore */\nconst arrayTypeToDataType = (ctor: IntArrayCtor, is64bit: boolean) => {\n    switch (ctor) {\n        case Int8Array:      return Int8;\n        case Int16Array:     return Int16;\n        case Int32Array:     return is64bit ? Int64 : Int32;\n        case BigInt64Array:  return Int64;\n        case Uint8Array:     return Uint8;\n        case Uint16Array:    return Uint16;\n        case Uint32Array:    return is64bit ? Uint64 : Uint32;\n        case BigUint64Array: return Uint64;\n        default: return null;\n    }\n};\n\n/** @ignore */\nconst vectorTypeToDataType = (ctor: IntVectorConstructors, is64bit: boolean) => {\n    switch (ctor) {\n        case Int8Vector:   return Int8;\n        case Int16Vector:  return Int16;\n        case Int32Vector:  return is64bit ? Int64 : Int32;\n        case Int64Vector:  return Int64;\n        case Uint8Vector:  return Uint8;\n        case Uint16Vector: return Uint16;\n        case Uint32Vector: return is64bit ? Uint64 : Uint32;\n        case Uint64Vector: return Uint64;\n        default: return null;\n    }\n};\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { DataType, List } from '../type';\n\n/** @ignore */\nexport class ListVector<T extends DataType = any> extends BaseVector<List<T>> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { MapRow } from './row';\nimport { Field } from '../schema';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { DataType, Map_, Struct, List } from '../type';\n\n/** @ignore */\nexport class MapVector<K extends DataType = any, V extends DataType = any> extends BaseVector<Map_<K, V>> {\n    public asList() {\n        const child = this.type.children[0] as Field<Struct<{ key: K; value: V }>>;\n        return Vector.new(this.data.clone(new List<Struct<{ key: K; value: V }>>(child)));\n    }\n    public bind(index: number): Map_<K, V>['TValue'] {\n        const child = this.getChildAt<Struct<{ key: K; value: V }>>(0)!;\n        const { [index]: begin, [index + 1]: end } = this.valueOffsets;\n        return new MapRow(child.slice(begin, end));\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Null } from '../type';\nimport { BaseVector } from './base';\n\n/** @ignore */\nexport class NullVector extends BaseVector<Null> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { StructRow } from './row';\nimport { BaseVector } from './base';\nimport { DataType, Struct } from '../type';\n\n/** @ignore */ const kRowIndex = Symbol.for('rowIndex');\n/** @ignore */\nexport class StructVector<T extends { [key: string]: DataType } = any> extends BaseVector<Struct<T>> {\n    private _row!: StructRow<T>;\n    public bind(index: number): Struct<T>['TValue'] {\n        const proto = this._row || (this._row = new StructRow<T>(this));\n        const bound = Object.create(proto);\n        bound[kRowIndex] = index;\n        return bound;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond } from '../type';\n\n/** @ignore */\nexport class TimestampVector<T extends Timestamp = Timestamp> extends BaseVector<T> {}\n/** @ignore */\nexport class TimestampSecondVector extends TimestampVector<TimestampSecond> {}\n/** @ignore */\nexport class TimestampMillisecondVector extends TimestampVector<TimestampMillisecond> {}\n/** @ignore */\nexport class TimestampMicrosecondVector extends TimestampVector<TimestampMicrosecond> {}\n/** @ignore */\nexport class TimestampNanosecondVector extends TimestampVector<TimestampNanosecond> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond } from '../type';\n\n/** @ignore */\nexport class TimeVector<T extends Time = Time> extends BaseVector<T> {}\n/** @ignore */\nexport class TimeSecondVector extends TimeVector<TimeSecond> {}\n/** @ignore */\nexport class TimeMillisecondVector extends TimeVector<TimeMillisecond> {}\n/** @ignore */\nexport class TimeMicrosecondVector extends TimeVector<TimeMicrosecond> {}\n/** @ignore */\nexport class TimeNanosecondVector extends TimeVector<TimeNanosecond> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { Union, DenseUnion, SparseUnion} from '../type';\n\n/** @ignore */\nexport class UnionVector<T extends Union = Union> extends BaseVector<T> {\n    public get typeIdToChildIndex() { return this.data.type.typeIdToChildIndex; }\n}\n\n/** @ignore */\nexport class DenseUnionVector extends UnionVector<DenseUnion> {\n    public get valueOffsets() { return this.data.valueOffsets!; }\n}\n\n/** @ignore */\nexport class SparseUnionVector extends UnionVector<SparseUnion> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { Chunked } from './chunked';\nimport { BaseVector } from './base';\nimport { Binary, Utf8 } from '../type';\nimport { VectorBuilderOptions } from './index';\nimport { vectorFromValuesWithType } from './index';\nimport { VectorBuilderOptionsAsync } from './index';\n\n/** @ignore */\nexport class Utf8Vector extends BaseVector<Utf8> {\n    public static from<TNull = any>(input: Iterable<string | TNull>): Utf8Vector;\n    public static from<TNull = any>(input: AsyncIterable<string | TNull>): Promise<Utf8Vector>;\n    public static from<TNull = any>(input: VectorBuilderOptions<Utf8, string | TNull>): Chunked<Utf8>;\n    public static from<TNull = any>(input: VectorBuilderOptionsAsync<Utf8, string | TNull>): Promise<Chunked<Utf8>>;\n    /** @nocollapse */\n    public static from<TNull = any>(input: Iterable<string | TNull> | AsyncIterable<string | TNull> | VectorBuilderOptions<Utf8, string | TNull> | VectorBuilderOptionsAsync<Utf8, string | TNull>) {\n        return vectorFromValuesWithType(() => new Utf8(), input);\n    }\n    public asBinary() {\n        return Vector.new(this.data.clone(new Binary()));\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/** @ignore */\nexport function partial0<T>(visit: (node: T) => any) {\n    return function(this: T) { return visit(this); };\n}\n\n/** @ignore */\nexport function partial1<T>(visit: (node: T, a: any) => any) {\n    return function(this: T, a: any) { return visit(this, a); };\n}\n\n/** @ignore */\nexport function partial2<T>(visit: (node: T, a: any, b: any) => any) {\n    return function(this: T, a: any, b: any) { return visit(this, a, b); };\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { BN } from '../util/bn';\nimport { Visitor } from '../visitor';\nimport { decodeUtf8 } from '../util/utf8';\nimport { VectorType } from '../interfaces';\nimport { uint16ToFloat64 } from '../util/math';\nimport { Type, UnionMode, Precision, DateUnit, TimeUnit, IntervalUnit } from '../enum';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\n/** @ignore */\nexport interface GetVisitor extends Visitor {\n    visit<T extends VectorType>  (node: T, index: number): T['TValue'];\n    visitMany<T extends VectorType>  (nodes: T[], indices: number[]): T['TValue'][];\n    getVisitFn<T extends Type>    (node: T): (vector: VectorType<T>, index: number) => VectorType<T>['TValue'];\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): (vector: VectorType<T>, index: number) => VectorType<T>['TValue'];\n    visitNull                 <T extends Null>                 (vector: VectorType<T>, index: number): T['TValue'];\n    visitBool                 <T extends Bool>                 (vector: VectorType<T>, index: number): T['TValue'];\n    visitInt                  <T extends Int>                  (vector: VectorType<T>, index: number): T['TValue'];\n    visitInt8                 <T extends Int8>                 (vector: VectorType<T>, index: number): T['TValue'];\n    visitInt16                <T extends Int16>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitInt32                <T extends Int32>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitInt64                <T extends Int64>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitUint8                <T extends Uint8>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitUint16               <T extends Uint16>               (vector: VectorType<T>, index: number): T['TValue'];\n    visitUint32               <T extends Uint32>               (vector: VectorType<T>, index: number): T['TValue'];\n    visitUint64               <T extends Uint64>               (vector: VectorType<T>, index: number): T['TValue'];\n    visitFloat                <T extends Float>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitFloat16              <T extends Float16>              (vector: VectorType<T>, index: number): T['TValue'];\n    visitFloat32              <T extends Float32>              (vector: VectorType<T>, index: number): T['TValue'];\n    visitFloat64              <T extends Float64>              (vector: VectorType<T>, index: number): T['TValue'];\n    visitUtf8                 <T extends Utf8>                 (vector: VectorType<T>, index: number): T['TValue'];\n    visitBinary               <T extends Binary>               (vector: VectorType<T>, index: number): T['TValue'];\n    visitFixedSizeBinary      <T extends FixedSizeBinary>      (vector: VectorType<T>, index: number): T['TValue'];\n    visitDate                 <T extends Date_>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitDateDay              <T extends DateDay>              (vector: VectorType<T>, index: number): T['TValue'];\n    visitDateMillisecond      <T extends DateMillisecond>      (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimestamp            <T extends Timestamp>            (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimestampSecond      <T extends TimestampSecond>      (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimestampMillisecond <T extends TimestampMillisecond> (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimestampMicrosecond <T extends TimestampMicrosecond> (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimestampNanosecond  <T extends TimestampNanosecond>  (vector: VectorType<T>, index: number): T['TValue'];\n    visitTime                 <T extends Time>                 (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimeSecond           <T extends TimeSecond>           (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimeMillisecond      <T extends TimeMillisecond>      (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimeMicrosecond      <T extends TimeMicrosecond>      (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimeNanosecond       <T extends TimeNanosecond>       (vector: VectorType<T>, index: number): T['TValue'];\n    visitDecimal              <T extends Decimal>              (vector: VectorType<T>, index: number): T['TValue'];\n    visitList                 <T extends List>                 (vector: VectorType<T>, index: number): T['TValue'];\n    visitStruct               <T extends Struct>               (vector: VectorType<T>, index: number): T['TValue'];\n    visitUnion                <T extends Union>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitDenseUnion           <T extends DenseUnion>           (vector: VectorType<T>, index: number): T['TValue'];\n    visitSparseUnion          <T extends SparseUnion>          (vector: VectorType<T>, index: number): T['TValue'];\n    visitDictionary           <T extends Dictionary>           (vector: VectorType<T>, index: number): T['TValue'];\n    visitInterval             <T extends Interval>             (vector: VectorType<T>, index: number): T['TValue'];\n    visitIntervalDayTime      <T extends IntervalDayTime>      (vector: VectorType<T>, index: number): T['TValue'];\n    visitIntervalYearMonth    <T extends IntervalYearMonth>    (vector: VectorType<T>, index: number): T['TValue'];\n    visitFixedSizeList        <T extends FixedSizeList>        (vector: VectorType<T>, index: number): T['TValue'];\n    visitMap                  <T extends Map_>                 (vector: VectorType<T>, index: number): T['TValue'];\n}\n\n/** @ignore */\nexport class GetVisitor extends Visitor {}\n\n/** @ignore */const epochDaysToMs = (data: Int32Array, index: number) => 86400000 * data[index];\n/** @ignore */const epochMillisecondsLongToMs = (data: Int32Array, index: number) => 4294967296 * (data[index + 1]) + (data[index] >>> 0);\n/** @ignore */const epochMicrosecondsLongToMs = (data: Int32Array, index: number) => 4294967296 * (data[index + 1] / 1000) + ((data[index] >>> 0) / 1000);\n/** @ignore */const epochNanosecondsLongToMs = (data: Int32Array, index: number) => 4294967296 * (data[index + 1] / 1000000) + ((data[index] >>> 0) / 1000000);\n\n/** @ignore */const epochMillisecondsToDate = (epochMs: number) => new Date(epochMs);\n/** @ignore */const epochDaysToDate = (data: Int32Array, index: number) => epochMillisecondsToDate(epochDaysToMs(data, index));\n/** @ignore */const epochMillisecondsLongToDate = (data: Int32Array, index: number) => epochMillisecondsToDate(epochMillisecondsLongToMs(data, index));\n\n/** @ignore */\nconst getNull = <T extends Null>(_vector: VectorType<T>, _index: number): T['TValue'] => null;\n/** @ignore */\nconst getVariableWidthBytes = (values: Uint8Array, valueOffsets: Int32Array, index: number) => {\n    const { [index]: x, [index + 1]: y } = valueOffsets;\n    return x != null && y != null ? values.subarray(x, y) : null as any;\n};\n\n/** @ignore */\nconst getBool = <T extends Bool>({ offset, values }: VectorType<T>, index: number): T['TValue'] => {\n    const idx = offset + index;\n    const byte = values[idx >> 3];\n    return (byte & 1 << (idx % 8)) !== 0;\n};\n\n/** @ignore */\ntype Numeric1X = Int8 | Int16 | Int32 | Uint8 | Uint16 | Uint32 | Float32 | Float64;\n/** @ignore */\ntype Numeric2X = Int64 | Uint64;\n\n/** @ignore */\nconst getDateDay         = <T extends DateDay>        ({ values         }: VectorType<T>, index: number): T['TValue'] => epochDaysToDate(values, index);\n/** @ignore */\nconst getDateMillisecond = <T extends DateMillisecond>({ values         }: VectorType<T>, index: number): T['TValue'] => epochMillisecondsLongToDate(values, index * 2);\n/** @ignore */\nconst getNumeric         = <T extends Numeric1X>      ({ stride, values }: VectorType<T>, index: number): T['TValue'] => values[stride * index];\n/** @ignore */\nconst getFloat16         = <T extends Float16>        ({ stride, values }: VectorType<T>, index: number): T['TValue'] => uint16ToFloat64(values[stride * index]);\n/** @ignore */\nconst getBigInts         = <T extends Numeric2X>({ stride, values, type }: VectorType<T>, index: number): T['TValue'] => <any> BN.new(values.subarray(stride * index, stride * (index + 1)), type.isSigned);\n/** @ignore */\nconst getFixedSizeBinary = <T extends FixedSizeBinary>({ stride, values }: VectorType<T>, index: number): T['TValue'] => values.subarray(stride * index, stride * (index + 1));\n\n/** @ignore */\nconst getBinary = <T extends Binary>({ values, valueOffsets }: VectorType<T>, index: number): T['TValue'] => getVariableWidthBytes(values, valueOffsets, index);\n/** @ignore */\nconst getUtf8 = <T extends Utf8>({ values, valueOffsets }: VectorType<T>, index: number): T['TValue'] => {\n    const bytes = getVariableWidthBytes(values, valueOffsets, index);\n    return bytes !== null ? decodeUtf8(bytes) : null as any;\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst getInt = <T extends Int>(vector: VectorType<T>, index: number): T['TValue'] => (\n    vector.type.bitWidth < 64\n        ? getNumeric(vector as VectorType<Numeric1X>, index)\n        : getBigInts(vector as VectorType<Numeric2X>, index)\n);\n\n/* istanbul ignore next */\n/** @ignore */\nconst getFloat = <T extends Float> (vector: VectorType<T>, index: number): T['TValue'] => (\n    vector.type.precision !== Precision.HALF\n        ? getNumeric(vector as VectorType<Numeric1X>, index)\n        : getFloat16(vector as VectorType<Float16>, index)\n);\n\n/* istanbul ignore next */\n/** @ignore */\nconst getDate = <T extends Date_> (vector: VectorType<T>, index: number): T['TValue'] => (\n    vector.type.unit === DateUnit.DAY\n        ? getDateDay(vector as VectorType<DateDay>, index)\n        : getDateMillisecond(vector as VectorType<DateMillisecond>, index)\n);\n\n/** @ignore */\nconst getTimestampSecond      = <T extends TimestampSecond>     ({ values }: VectorType<T>, index: number): T['TValue'] => 1000 * epochMillisecondsLongToMs(values, index * 2);\n/** @ignore */\nconst getTimestampMillisecond = <T extends TimestampMillisecond>({ values }: VectorType<T>, index: number): T['TValue'] => epochMillisecondsLongToMs(values, index * 2);\n/** @ignore */\nconst getTimestampMicrosecond = <T extends TimestampMicrosecond>({ values }: VectorType<T>, index: number): T['TValue'] => epochMicrosecondsLongToMs(values, index * 2);\n/** @ignore */\nconst getTimestampNanosecond  = <T extends TimestampNanosecond> ({ values }: VectorType<T>, index: number): T['TValue'] => epochNanosecondsLongToMs(values, index * 2);\n/* istanbul ignore next */\n/** @ignore */\nconst getTimestamp            = <T extends Timestamp>(vector: VectorType<T>, index: number): T['TValue'] => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND:      return      getTimestampSecond(vector as VectorType<TimestampSecond>, index);\n        case TimeUnit.MILLISECOND: return getTimestampMillisecond(vector as VectorType<TimestampMillisecond>, index);\n        case TimeUnit.MICROSECOND: return getTimestampMicrosecond(vector as VectorType<TimestampMicrosecond>, index);\n        case TimeUnit.NANOSECOND:  return  getTimestampNanosecond(vector as VectorType<TimestampNanosecond>, index);\n    }\n};\n\n/** @ignore */\nconst getTimeSecond      = <T extends TimeSecond>     ({ values, stride }: VectorType<T>, index: number): T['TValue'] => values[stride * index];\n/** @ignore */\nconst getTimeMillisecond = <T extends TimeMillisecond>({ values, stride }: VectorType<T>, index: number): T['TValue'] => values[stride * index];\n/** @ignore */\nconst getTimeMicrosecond = <T extends TimeMicrosecond>({ values         }: VectorType<T>, index: number): T['TValue'] => BN.signed(values.subarray(2 * index, 2 * (index + 1)));\n/** @ignore */\nconst getTimeNanosecond  = <T extends TimeNanosecond> ({ values         }: VectorType<T>, index: number): T['TValue'] => BN.signed(values.subarray(2 * index, 2 * (index + 1)));\n/* istanbul ignore next */\n/** @ignore */\nconst getTime            = <T extends Time>(vector: VectorType<T>, index: number): T['TValue'] => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND:      return      getTimeSecond(vector as VectorType<TimeSecond>, index);\n        case TimeUnit.MILLISECOND: return getTimeMillisecond(vector as VectorType<TimeMillisecond>, index);\n        case TimeUnit.MICROSECOND: return getTimeMicrosecond(vector as VectorType<TimeMicrosecond>, index);\n        case TimeUnit.NANOSECOND:  return  getTimeNanosecond(vector as VectorType<TimeNanosecond>, index);\n    }\n};\n\n/** @ignore */\nconst getDecimal = <T extends Decimal>({ values }: VectorType<T>, index: number): T['TValue'] => BN.decimal(values.subarray(4 * index, 4 * (index + 1)));\n\n/** @ignore */\nconst getList = <T extends List>(vector: VectorType<T>, index: number): T['TValue'] => {\n    const child = vector.getChildAt(0)!, { valueOffsets, stride } = vector;\n    return child.slice(valueOffsets[index * stride], valueOffsets[(index * stride) + 1]) as T['TValue'];\n};\n\n/** @ignore */\nconst getMap = <T extends Map_>(vector: VectorType<T>, index: number): T['TValue'] => {\n    return vector.bind(index) as T['TValue'];\n};\n\n/** @ignore */\nconst getStruct = <T extends Struct>(vector: VectorType<T>, index: number): T['TValue'] => {\n    return vector.bind(index) as T['TValue'];\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst getUnion = <\n    V extends VectorType<Union> | VectorType<DenseUnion> | VectorType<SparseUnion>\n>(vector: V, index: number): V['TValue'] => {\n    return vector.type.mode === UnionMode.Dense ?\n        getDenseUnion(vector as VectorType<DenseUnion>, index) :\n        getSparseUnion(vector as VectorType<SparseUnion>, index);\n};\n\n/** @ignore */\nconst getDenseUnion = <T extends DenseUnion>(vector: VectorType<T>, index: number): T['TValue'] => {\n    const childIndex = vector.typeIdToChildIndex[vector.typeIds[index]];\n    const child = vector.getChildAt(childIndex);\n    return child ? child.get(vector.valueOffsets[index]) : null;\n};\n\n/** @ignore */\nconst getSparseUnion = <T extends SparseUnion>(vector: VectorType<T>, index: number): T['TValue'] => {\n    const childIndex = vector.typeIdToChildIndex[vector.typeIds[index]];\n    const child = vector.getChildAt(childIndex);\n    return child ? child.get(index) : null;\n};\n\n/** @ignore */\nconst getDictionary = <T extends Dictionary>(vector: VectorType<T>, index: number): T['TValue'] => {\n    return vector.getValue(vector.getKey(index)!);\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst getInterval = <T extends Interval>(vector: VectorType<T>, index: number): T['TValue'] =>\n    (vector.type.unit === IntervalUnit.DAY_TIME)\n        ? getIntervalDayTime(vector as VectorType<IntervalDayTime>, index)\n        : getIntervalYearMonth(vector as VectorType<IntervalYearMonth>, index);\n\n/** @ignore */\nconst getIntervalDayTime = <T extends IntervalDayTime>({ values }: VectorType<T>, index: number): T['TValue'] => values.subarray(2 * index, 2 * (index + 1));\n\n/** @ignore */\nconst getIntervalYearMonth = <T extends IntervalYearMonth>({ values }: VectorType<T>, index: number): T['TValue'] => {\n    const interval = values[index];\n    const int32s = new Int32Array(2);\n    int32s[0] = interval / 12 | 0; /* years */\n    int32s[1] = interval % 12 | 0; /* months */\n    return int32s;\n};\n\n/** @ignore */\nconst getFixedSizeList = <T extends FixedSizeList>(vector: VectorType<T>, index: number): T['TValue'] => {\n    const child = vector.getChildAt(0)!, { stride } = vector;\n    return child.slice(index * stride, (index + 1) * stride) as T['TValue'];\n};\n\nGetVisitor.prototype.visitNull                 =                 getNull;\nGetVisitor.prototype.visitBool                 =                 getBool;\nGetVisitor.prototype.visitInt                  =                  getInt;\nGetVisitor.prototype.visitInt8                 =              getNumeric;\nGetVisitor.prototype.visitInt16                =              getNumeric;\nGetVisitor.prototype.visitInt32                =              getNumeric;\nGetVisitor.prototype.visitInt64                =              getBigInts;\nGetVisitor.prototype.visitUint8                =              getNumeric;\nGetVisitor.prototype.visitUint16               =              getNumeric;\nGetVisitor.prototype.visitUint32               =              getNumeric;\nGetVisitor.prototype.visitUint64               =              getBigInts;\nGetVisitor.prototype.visitFloat                =                getFloat;\nGetVisitor.prototype.visitFloat16              =              getFloat16;\nGetVisitor.prototype.visitFloat32              =              getNumeric;\nGetVisitor.prototype.visitFloat64              =              getNumeric;\nGetVisitor.prototype.visitUtf8                 =                 getUtf8;\nGetVisitor.prototype.visitBinary               =               getBinary;\nGetVisitor.prototype.visitFixedSizeBinary      =      getFixedSizeBinary;\nGetVisitor.prototype.visitDate                 =                 getDate;\nGetVisitor.prototype.visitDateDay              =              getDateDay;\nGetVisitor.prototype.visitDateMillisecond      =      getDateMillisecond;\nGetVisitor.prototype.visitTimestamp            =            getTimestamp;\nGetVisitor.prototype.visitTimestampSecond      =      getTimestampSecond;\nGetVisitor.prototype.visitTimestampMillisecond = getTimestampMillisecond;\nGetVisitor.prototype.visitTimestampMicrosecond = getTimestampMicrosecond;\nGetVisitor.prototype.visitTimestampNanosecond  =  getTimestampNanosecond;\nGetVisitor.prototype.visitTime                 =                 getTime;\nGetVisitor.prototype.visitTimeSecond           =           getTimeSecond;\nGetVisitor.prototype.visitTimeMillisecond      =      getTimeMillisecond;\nGetVisitor.prototype.visitTimeMicrosecond      =      getTimeMicrosecond;\nGetVisitor.prototype.visitTimeNanosecond       =       getTimeNanosecond;\nGetVisitor.prototype.visitDecimal              =              getDecimal;\nGetVisitor.prototype.visitList                 =                 getList;\nGetVisitor.prototype.visitStruct               =               getStruct;\nGetVisitor.prototype.visitUnion                =                getUnion;\nGetVisitor.prototype.visitDenseUnion           =           getDenseUnion;\nGetVisitor.prototype.visitSparseUnion          =          getSparseUnion;\nGetVisitor.prototype.visitDictionary           =           getDictionary;\nGetVisitor.prototype.visitInterval             =             getInterval;\nGetVisitor.prototype.visitIntervalDayTime      =      getIntervalDayTime;\nGetVisitor.prototype.visitIntervalYearMonth    =    getIntervalYearMonth;\nGetVisitor.prototype.visitFixedSizeList        =        getFixedSizeList;\nGetVisitor.prototype.visitMap                  =                  getMap;\n\n/** @ignore */\nexport const instance = new GetVisitor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { Visitor } from '../visitor';\nimport { VectorType } from '../interfaces';\nimport { getBool, BitIterator } from '../util/bit';\nimport { createElementComparator } from '../util/vector';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\n/** @ignore */\nexport interface IndexOfVisitor extends Visitor {\n    visit<T extends VectorType>  (node: T, value: T['TValue'] | null, index?: number): number;\n    visitMany <T extends VectorType>  (nodes: T[], values: (T['TValue'] | null)[], indices: (number | undefined)[]): number[];\n    getVisitFn<T extends Type>    (node: T): (vector: VectorType<T>, value: VectorType<T>['TValue'] | null, index?: number) => number;\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): (vector: VectorType<T>, value:         T['TValue'] | null, index?: number) => number;\n    visitNull                 <T extends Null>                (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitBool                 <T extends Bool>                (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitInt                  <T extends Int>                 (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitInt8                 <T extends Int8>                (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitInt16                <T extends Int16>               (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitInt32                <T extends Int32>               (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitInt64                <T extends Int64>               (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitUint8                <T extends Uint8>               (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitUint16               <T extends Uint16>              (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitUint32               <T extends Uint32>              (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitUint64               <T extends Uint64>              (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitFloat                <T extends Float>               (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitFloat16              <T extends Float16>             (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitFloat32              <T extends Float32>             (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitFloat64              <T extends Float64>             (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitUtf8                 <T extends Utf8>                (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitBinary               <T extends Binary>              (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitFixedSizeBinary      <T extends FixedSizeBinary>     (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitDate                 <T extends Date_>               (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitDateDay              <T extends DateDay>             (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitDateMillisecond      <T extends DateMillisecond>     (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimestamp            <T extends Timestamp>           (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimestampSecond      <T extends TimestampSecond>     (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimestampMillisecond <T extends TimestampMillisecond>(vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimestampMicrosecond <T extends TimestampMicrosecond>(vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimestampNanosecond  <T extends TimestampNanosecond> (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTime                 <T extends Time>                (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimeSecond           <T extends TimeSecond>          (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimeMillisecond      <T extends TimeMillisecond>     (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimeMicrosecond      <T extends TimeMicrosecond>     (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimeNanosecond       <T extends TimeNanosecond>      (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitDecimal              <T extends Decimal>             (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitList                 <T extends List>                (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitStruct               <T extends Struct>              (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitUnion                <T extends Union>               (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitDenseUnion           <T extends DenseUnion>          (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitSparseUnion          <T extends SparseUnion>         (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitDictionary           <T extends Dictionary>          (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitInterval             <T extends Interval>            (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitIntervalDayTime      <T extends IntervalDayTime>     (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitIntervalYearMonth    <T extends IntervalYearMonth>   (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitFixedSizeList        <T extends FixedSizeList>       (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitMap                  <T extends Map_>                (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n}\n\n/** @ignore */\nexport class IndexOfVisitor extends Visitor {}\n\n/** @ignore */\nfunction nullIndexOf(vector: VectorType<Null>, searchElement?: null) {\n    // if you're looking for nulls and the vector isn't empty, we've got 'em!\n    return searchElement === null && vector.length > 0 ? 0 : -1;\n}\n\n/** @ignore */\nfunction indexOfNull<T extends DataType>(vector: VectorType<T>, fromIndex?: number): number {\n    const { nullBitmap } = vector.data;\n    if (!nullBitmap || vector.nullCount <= 0) {\n        return -1;\n    }\n    let i = 0;\n    for (const isValid of new BitIterator(nullBitmap, vector.data.offset + (fromIndex || 0), vector.length, nullBitmap, getBool)) {\n        if (!isValid) { return i; }\n        ++i;\n    }\n    return -1;\n}\n\n/** @ignore */\nfunction indexOfValue<T extends DataType>(vector: VectorType<T>, searchElement?: T['TValue'] | null, fromIndex?: number): number {\n    if (searchElement === undefined) { return -1; }\n    if (searchElement === null) { return indexOfNull(vector, fromIndex); }\n    const compare = createElementComparator(searchElement);\n    for (let i = (fromIndex || 0) - 1, n = vector.length; ++i < n;) {\n        if (compare(vector.get(i))) {\n            return i;\n        }\n    }\n    return -1;\n}\n\n/** @ignore */\nfunction indexOfUnion<T extends DataType>(vector: VectorType<T>, searchElement?: T['TValue'] | null, fromIndex?: number): number {\n    // Unions are special -- they do have a nullBitmap, but so can their children.\n    // If the searchElement is null, we don't know whether it came from the Union's\n    // bitmap or one of its childrens'. So we don't interrogate the Union's bitmap,\n    // since that will report the wrong index if a child has a null before the Union.\n    const compare = createElementComparator(searchElement);\n    for (let i = (fromIndex || 0) - 1, n = vector.length; ++i < n;) {\n        if (compare(vector.get(i))) {\n            return i;\n        }\n    }\n    return -1;\n}\n\nIndexOfVisitor.prototype.visitNull                 =  nullIndexOf;\nIndexOfVisitor.prototype.visitBool                 = indexOfValue;\nIndexOfVisitor.prototype.visitInt                  = indexOfValue;\nIndexOfVisitor.prototype.visitInt8                 = indexOfValue;\nIndexOfVisitor.prototype.visitInt16                = indexOfValue;\nIndexOfVisitor.prototype.visitInt32                = indexOfValue;\nIndexOfVisitor.prototype.visitInt64                = indexOfValue;\nIndexOfVisitor.prototype.visitUint8                = indexOfValue;\nIndexOfVisitor.prototype.visitUint16               = indexOfValue;\nIndexOfVisitor.prototype.visitUint32               = indexOfValue;\nIndexOfVisitor.prototype.visitUint64               = indexOfValue;\nIndexOfVisitor.prototype.visitFloat                = indexOfValue;\nIndexOfVisitor.prototype.visitFloat16              = indexOfValue;\nIndexOfVisitor.prototype.visitFloat32              = indexOfValue;\nIndexOfVisitor.prototype.visitFloat64              = indexOfValue;\nIndexOfVisitor.prototype.visitUtf8                 = indexOfValue;\nIndexOfVisitor.prototype.visitBinary               = indexOfValue;\nIndexOfVisitor.prototype.visitFixedSizeBinary      = indexOfValue;\nIndexOfVisitor.prototype.visitDate                 = indexOfValue;\nIndexOfVisitor.prototype.visitDateDay              = indexOfValue;\nIndexOfVisitor.prototype.visitDateMillisecond      = indexOfValue;\nIndexOfVisitor.prototype.visitTimestamp            = indexOfValue;\nIndexOfVisitor.prototype.visitTimestampSecond      = indexOfValue;\nIndexOfVisitor.prototype.visitTimestampMillisecond = indexOfValue;\nIndexOfVisitor.prototype.visitTimestampMicrosecond = indexOfValue;\nIndexOfVisitor.prototype.visitTimestampNanosecond  = indexOfValue;\nIndexOfVisitor.prototype.visitTime                 = indexOfValue;\nIndexOfVisitor.prototype.visitTimeSecond           = indexOfValue;\nIndexOfVisitor.prototype.visitTimeMillisecond      = indexOfValue;\nIndexOfVisitor.prototype.visitTimeMicrosecond      = indexOfValue;\nIndexOfVisitor.prototype.visitTimeNanosecond       = indexOfValue;\nIndexOfVisitor.prototype.visitDecimal              = indexOfValue;\nIndexOfVisitor.prototype.visitList                 = indexOfValue;\nIndexOfVisitor.prototype.visitStruct               = indexOfValue;\nIndexOfVisitor.prototype.visitUnion                = indexOfValue;\nIndexOfVisitor.prototype.visitDenseUnion           = indexOfUnion;\nIndexOfVisitor.prototype.visitSparseUnion          = indexOfUnion;\nIndexOfVisitor.prototype.visitDictionary           = indexOfValue;\nIndexOfVisitor.prototype.visitInterval             = indexOfValue;\nIndexOfVisitor.prototype.visitIntervalDayTime      = indexOfValue;\nIndexOfVisitor.prototype.visitIntervalYearMonth    = indexOfValue;\nIndexOfVisitor.prototype.visitFixedSizeList        = indexOfValue;\nIndexOfVisitor.prototype.visitMap                  = indexOfValue;\n\n/** @ignore */\nexport const instance = new IndexOfVisitor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { Visitor } from '../visitor';\nimport { VectorType } from '../interfaces';\nimport { BitIterator } from '../util/bit';\nimport { instance as getVisitor } from './get';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\n/** @ignore */\nexport interface IteratorVisitor extends Visitor {\n    visit<T extends VectorType>(node: T): IterableIterator<T['TValue'] | null>;\n    visitMany <T extends VectorType>(nodes: T[]): IterableIterator<T['TValue'] | null>[];\n    getVisitFn<T extends Type>(node: T): (vector: VectorType<T>) => IterableIterator<VectorType<T>['TValue'] | null>;\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): (vector: VectorType<T>) => IterableIterator<VectorType<T>['TValue'] | null>;\n    visitNull                 <T extends Null>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitBool                 <T extends Bool>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitInt                  <T extends Int>                  (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitInt8                 <T extends Int8>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitInt16                <T extends Int16>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitInt32                <T extends Int32>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitInt64                <T extends Int64>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitUint8                <T extends Uint8>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitUint16               <T extends Uint16>               (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitUint32               <T extends Uint32>               (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitUint64               <T extends Uint64>               (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitFloat                <T extends Float>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitFloat16              <T extends Float16>              (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitFloat32              <T extends Float32>              (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitFloat64              <T extends Float64>              (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitUtf8                 <T extends Utf8>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitBinary               <T extends Binary>               (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitFixedSizeBinary      <T extends FixedSizeBinary>      (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitDate                 <T extends Date_>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitDateDay              <T extends DateDay>              (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitDateMillisecond      <T extends DateMillisecond>      (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestamp            <T extends Timestamp>            (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestampSecond      <T extends TimestampSecond>      (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestampMillisecond <T extends TimestampMillisecond> (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestampMicrosecond <T extends TimestampMicrosecond> (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestampNanosecond  <T extends TimestampNanosecond>  (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTime                 <T extends Time>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimeSecond           <T extends TimeSecond>           (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimeMillisecond      <T extends TimeMillisecond>      (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimeMicrosecond      <T extends TimeMicrosecond>      (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimeNanosecond       <T extends TimeNanosecond>       (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitDecimal              <T extends Decimal>              (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitList                 <T extends List>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitStruct               <T extends Struct>               (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitUnion                <T extends Union>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitDenseUnion           <T extends DenseUnion>           (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitSparseUnion          <T extends SparseUnion>          (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitDictionary           <T extends Dictionary>           (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitInterval             <T extends Interval>             (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitIntervalDayTime      <T extends IntervalDayTime>      (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitIntervalYearMonth    <T extends IntervalYearMonth>    (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitFixedSizeList        <T extends FixedSizeList>        (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitMap                  <T extends Map_>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n}\n\n/** @ignore */\nexport class IteratorVisitor extends Visitor {}\n\n/** @ignore */\nfunction nullableIterator<T extends DataType>(vector: VectorType<T>): IterableIterator<T['TValue'] | null> {\n    const getFn = getVisitor.getVisitFn(vector);\n    return new BitIterator<T['TValue'] | null>(\n        vector.data.nullBitmap, vector.data.offset, vector.length, vector,\n        (vec: VectorType<T>, idx: number, nullByte: number, nullBit: number) =>\n            ((nullByte & 1 << nullBit) !== 0) ? getFn(vec, idx) : null\n    );\n}\n\n/** @ignore */\nclass VectorIterator<T extends DataType> implements IterableIterator<T['TValue'] | null> {\n    private index = 0;\n\n    constructor(\n        private vector: VectorType<T>,\n        private getFn: (vector: VectorType<T>, index: number) => VectorType<T>['TValue']\n    ) {}\n\n    next(): IteratorResult<T['TValue'] | null> {\n        if (this.index < this.vector.length) {\n            return {\n                value: this.getFn(this.vector, this.index++)\n            };\n        }\n\n        return {done: true, value: null};\n    }\n\n    [Symbol.iterator]() {\n        return this;\n    }\n}\n\n/** @ignore */\nfunction vectorIterator<T extends DataType>(vector: VectorType<T>): IterableIterator<T['TValue'] | null> {\n\n    // If nullable, iterate manually\n    if (vector.nullCount > 0) {\n        return nullableIterator<T>(vector);\n    }\n\n    const { type, typeId, length } = vector;\n\n    // Fast case, defer to native iterators if possible\n    if (vector.stride === 1 && (\n        (typeId === Type.Timestamp) ||\n        (typeId === Type.Int && (type as Int).bitWidth !== 64) ||\n        (typeId === Type.Time && (type as Time).bitWidth !== 64) ||\n        (typeId === Type.Float && (type as Float).precision > 0 /* Precision.HALF */)\n    )) {\n        return vector.data.values.subarray(0, length)[Symbol.iterator]();\n    }\n\n    // Otherwise, iterate manually\n    return new VectorIterator(vector, getVisitor.getVisitFn(vector));\n}\n\nIteratorVisitor.prototype.visitNull                 = vectorIterator;\nIteratorVisitor.prototype.visitBool                 = vectorIterator;\nIteratorVisitor.prototype.visitInt                  = vectorIterator;\nIteratorVisitor.prototype.visitInt8                 = vectorIterator;\nIteratorVisitor.prototype.visitInt16                = vectorIterator;\nIteratorVisitor.prototype.visitInt32                = vectorIterator;\nIteratorVisitor.prototype.visitInt64                = vectorIterator;\nIteratorVisitor.prototype.visitUint8                = vectorIterator;\nIteratorVisitor.prototype.visitUint16               = vectorIterator;\nIteratorVisitor.prototype.visitUint32               = vectorIterator;\nIteratorVisitor.prototype.visitUint64               = vectorIterator;\nIteratorVisitor.prototype.visitFloat                = vectorIterator;\nIteratorVisitor.prototype.visitFloat16              = vectorIterator;\nIteratorVisitor.prototype.visitFloat32              = vectorIterator;\nIteratorVisitor.prototype.visitFloat64              = vectorIterator;\nIteratorVisitor.prototype.visitUtf8                 = vectorIterator;\nIteratorVisitor.prototype.visitBinary               = vectorIterator;\nIteratorVisitor.prototype.visitFixedSizeBinary      = vectorIterator;\nIteratorVisitor.prototype.visitDate                 = vectorIterator;\nIteratorVisitor.prototype.visitDateDay              = vectorIterator;\nIteratorVisitor.prototype.visitDateMillisecond      = vectorIterator;\nIteratorVisitor.prototype.visitTimestamp            = vectorIterator;\nIteratorVisitor.prototype.visitTimestampSecond      = vectorIterator;\nIteratorVisitor.prototype.visitTimestampMillisecond = vectorIterator;\nIteratorVisitor.prototype.visitTimestampMicrosecond = vectorIterator;\nIteratorVisitor.prototype.visitTimestampNanosecond  = vectorIterator;\nIteratorVisitor.prototype.visitTime                 = vectorIterator;\nIteratorVisitor.prototype.visitTimeSecond           = vectorIterator;\nIteratorVisitor.prototype.visitTimeMillisecond      = vectorIterator;\nIteratorVisitor.prototype.visitTimeMicrosecond      = vectorIterator;\nIteratorVisitor.prototype.visitTimeNanosecond       = vectorIterator;\nIteratorVisitor.prototype.visitDecimal              = vectorIterator;\nIteratorVisitor.prototype.visitList                 = vectorIterator;\nIteratorVisitor.prototype.visitStruct               = vectorIterator;\nIteratorVisitor.prototype.visitUnion                = vectorIterator;\nIteratorVisitor.prototype.visitDenseUnion           = vectorIterator;\nIteratorVisitor.prototype.visitSparseUnion          = vectorIterator;\nIteratorVisitor.prototype.visitDictionary           = vectorIterator;\nIteratorVisitor.prototype.visitInterval             = vectorIterator;\nIteratorVisitor.prototype.visitIntervalDayTime      = vectorIterator;\nIteratorVisitor.prototype.visitIntervalYearMonth    = vectorIterator;\nIteratorVisitor.prototype.visitFixedSizeList        = vectorIterator;\nIteratorVisitor.prototype.visitMap                  = vectorIterator;\n\n/** @ignore */\nexport const instance = new IteratorVisitor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { Visitor } from '../visitor';\nimport { VectorType } from '../interfaces';\nimport { instance as iteratorVisitor } from './iterator';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\n/** @ignore */\nexport interface ToArrayVisitor extends Visitor {\n    visit<T extends VectorType>(node: T): T['TArray'];\n    visitMany<T extends VectorType>(nodes: T[]): T['TArray'][];\n    getVisitFn<T extends Type>(node: T): (vector: VectorType<T>) => VectorType<T>['TArray'];\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): (vector: VectorType<T>) => VectorType<T>['TArray'];\n    visitNull                                    <T extends Null>                (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitBool                                    <T extends Bool>                (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitInt                                     <T extends Int>                 (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitInt8                                    <T extends Int8>                (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitInt16                                   <T extends Int16>               (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitInt32                                   <T extends Int32>               (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitInt64                                   <T extends Int64>               (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitUint8                                   <T extends Uint8>               (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitUint16                                  <T extends Uint16>              (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitUint32                                  <T extends Uint32>              (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitUint64                                  <T extends Uint64>              (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitFloat                                   <T extends Float>               (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitFloat16                                 <T extends Float16>             (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitFloat32                                 <T extends Float32>             (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitFloat64                                 <T extends Float64>             (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitUtf8                                    <T extends Utf8>                (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitBinary                                  <T extends Binary>              (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitFixedSizeBinary                         <T extends FixedSizeBinary>     (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitDate                                    <T extends Date_>               (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitDateDay                                 <T extends DateDay>             (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitDateMillisecond                         <T extends DateMillisecond>     (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTimestamp                               <T extends Timestamp>           (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTimestampSecond                         <T extends TimestampSecond>     (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTimestampMillisecond                    <T extends TimestampMillisecond>(vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTimestampMicrosecond                    <T extends TimestampMicrosecond>(vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTimestampNanosecond                     <T extends TimestampNanosecond> (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTime                                    <T extends Time>                (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTimeSecond                              <T extends TimeSecond>          (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTimeMillisecond                         <T extends TimeMillisecond>     (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTimeMicrosecond                         <T extends TimeMicrosecond>     (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTimeNanosecond                          <T extends TimeNanosecond>      (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitDecimal                                 <T extends Decimal>             (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitList                <R extends DataType, T extends List<R>>             (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitStruct                                  <T extends Struct>              (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitUnion                                   <T extends Union>               (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitDenseUnion                              <T extends DenseUnion>          (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitSparseUnion                             <T extends SparseUnion>         (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitDictionary          <R extends DataType, T extends Dictionary<R>>       (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitInterval                                <T extends Interval>            (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitIntervalDayTime                         <T extends IntervalDayTime>     (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitIntervalYearMonth                       <T extends IntervalYearMonth>   (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitFixedSizeList       <R extends DataType, T extends FixedSizeList<R>>    (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitMap                                     <T extends Map_>                (vector: VectorType<T>): VectorType<T>['TArray'];\n}\n\n/** @ignore */\nexport class ToArrayVisitor extends Visitor {}\n\n/** @ignore */\nfunction arrayOfVector<T extends DataType>(vector: VectorType<T>): T['TArray'] {\n\n    const { type, length, stride } = vector;\n\n    // Fast case, return subarray if possible\n    switch (type.typeId) {\n        case Type.Int:\n        case Type.Float: case Type.Decimal:\n        case Type.Time: case Type.Timestamp:\n            return vector.data.values.subarray(0, length * stride);\n    }\n\n    // Otherwise if not primitive, slow copy\n    return [...iteratorVisitor.visit(vector)] as T['TArray'];\n}\n\nToArrayVisitor.prototype.visitNull                 = arrayOfVector;\nToArrayVisitor.prototype.visitBool                 = arrayOfVector;\nToArrayVisitor.prototype.visitInt                  = arrayOfVector;\nToArrayVisitor.prototype.visitInt8                 = arrayOfVector;\nToArrayVisitor.prototype.visitInt16                = arrayOfVector;\nToArrayVisitor.prototype.visitInt32                = arrayOfVector;\nToArrayVisitor.prototype.visitInt64                = arrayOfVector;\nToArrayVisitor.prototype.visitUint8                = arrayOfVector;\nToArrayVisitor.prototype.visitUint16               = arrayOfVector;\nToArrayVisitor.prototype.visitUint32               = arrayOfVector;\nToArrayVisitor.prototype.visitUint64               = arrayOfVector;\nToArrayVisitor.prototype.visitFloat                = arrayOfVector;\nToArrayVisitor.prototype.visitFloat16              = arrayOfVector;\nToArrayVisitor.prototype.visitFloat32              = arrayOfVector;\nToArrayVisitor.prototype.visitFloat64              = arrayOfVector;\nToArrayVisitor.prototype.visitUtf8                 = arrayOfVector;\nToArrayVisitor.prototype.visitBinary               = arrayOfVector;\nToArrayVisitor.prototype.visitFixedSizeBinary      = arrayOfVector;\nToArrayVisitor.prototype.visitDate                 = arrayOfVector;\nToArrayVisitor.prototype.visitDateDay              = arrayOfVector;\nToArrayVisitor.prototype.visitDateMillisecond      = arrayOfVector;\nToArrayVisitor.prototype.visitTimestamp            = arrayOfVector;\nToArrayVisitor.prototype.visitTimestampSecond      = arrayOfVector;\nToArrayVisitor.prototype.visitTimestampMillisecond = arrayOfVector;\nToArrayVisitor.prototype.visitTimestampMicrosecond = arrayOfVector;\nToArrayVisitor.prototype.visitTimestampNanosecond  = arrayOfVector;\nToArrayVisitor.prototype.visitTime                 = arrayOfVector;\nToArrayVisitor.prototype.visitTimeSecond           = arrayOfVector;\nToArrayVisitor.prototype.visitTimeMillisecond      = arrayOfVector;\nToArrayVisitor.prototype.visitTimeMicrosecond      = arrayOfVector;\nToArrayVisitor.prototype.visitTimeNanosecond       = arrayOfVector;\nToArrayVisitor.prototype.visitDecimal              = arrayOfVector;\nToArrayVisitor.prototype.visitList                 = arrayOfVector;\nToArrayVisitor.prototype.visitStruct               = arrayOfVector;\nToArrayVisitor.prototype.visitUnion                = arrayOfVector;\nToArrayVisitor.prototype.visitDenseUnion           = arrayOfVector;\nToArrayVisitor.prototype.visitSparseUnion          = arrayOfVector;\nToArrayVisitor.prototype.visitDictionary           = arrayOfVector;\nToArrayVisitor.prototype.visitInterval             = arrayOfVector;\nToArrayVisitor.prototype.visitIntervalDayTime      = arrayOfVector;\nToArrayVisitor.prototype.visitIntervalYearMonth    = arrayOfVector;\nToArrayVisitor.prototype.visitFixedSizeList        = arrayOfVector;\nToArrayVisitor.prototype.visitMap                  = arrayOfVector;\n\n/** @ignore */\nexport const instance = new ToArrayVisitor();\n","/* istanbul ignore file */\n\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Visitor } from '../visitor';\nimport { VectorType } from '../interfaces';\nimport { Type, TimeUnit } from '../enum';\nimport { Schema, Field } from '../schema';\nimport {\n    DataType, Dictionary,\n    Float, Int, Date_, Interval, Time, Timestamp,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary,\n    List, FixedSizeList, Map_, Struct, Union,\n} from '../type';\n\n/** @ignore */ const sum = (x: number, y: number) => x + y;\n/** @ignore */ const variableWidthColumnErrorMessage = (type: DataType) => `Cannot compute the byte width of variable-width column ${type}`;\n\n/** @ignore */\nexport interface ByteWidthVisitor extends Visitor {\n    visit<T extends DataType>(node: T): number;\n    visitMany<T extends DataType>(nodes: T[]): number[];\n    getVisitFn<T extends Type>    (node: T): (type: DataType<T>) => number;\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): (type: T) => number;\n}\n\n/** @ignore */\nexport class ByteWidthVisitor extends Visitor {\n    public visitNull            (____: Null            ) { return 0; }\n    public visitInt             (type: Int             ) { return type.bitWidth / 8; }\n    public visitFloat           (type: Float           ) { return type.ArrayType.BYTES_PER_ELEMENT; }\n    public visitBinary          (type: Binary          ) { throw new Error(variableWidthColumnErrorMessage(type)); }\n    public visitUtf8            (type: Utf8            ) { throw new Error(variableWidthColumnErrorMessage(type)); }\n    public visitBool            (____: Bool            ) { return 1 / 8; }\n    public visitDecimal         (____: Decimal         ) { return 16; }\n    public visitDate            (type: Date_           ) { return (type.unit + 1) * 4; }\n    public visitTime            (type: Time            ) { return type.bitWidth / 8; }\n    public visitTimestamp       (type: Timestamp       ) { return type.unit === TimeUnit.SECOND ? 4 : 8; }\n    public visitInterval        (type: Interval        ) { return (type.unit + 1) * 4; }\n    public visitList            (type: List            ) { throw new Error(variableWidthColumnErrorMessage(type)); }\n    public visitStruct          (type: Struct          ) { return this.visitFields(type.children).reduce(sum, 0); }\n    public visitUnion           (type: Union           ) { return this.visitFields(type.children).reduce(sum, 0); }\n    public visitFixedSizeBinary (type: FixedSizeBinary ) { return type.byteWidth; }\n    public visitFixedSizeList   (type: FixedSizeList   ) { return type.listSize * this.visitFields(type.children).reduce(sum, 0); }\n    public visitMap             (type: Map_            ) { return this.visitFields(type.children).reduce(sum, 0); }\n    public visitDictionary      (type: Dictionary      ) { return this.visit(type.indices); }\n    public visitFields          (fields: Field[]       ) { return (fields || []).map((field) => this.visit(field.type)); }\n    public visitSchema          (schema: Schema        ) { return this.visitFields(schema.fields).reduce(sum, 0); }\n}\n\n/** @ignore */\nexport const instance = new ByteWidthVisitor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { DataType } from '../type';\nimport { Visitor } from '../visitor';\nimport { VectorType, VectorCtor } from '../interfaces';\n\nimport { BinaryVector } from '../vector/binary';\nimport { BoolVector } from '../vector/bool';\nimport { DateVector, DateDayVector, DateMillisecondVector } from '../vector/date';\nimport { DecimalVector } from '../vector/decimal';\nimport { DictionaryVector } from '../vector/dictionary';\nimport { FixedSizeBinaryVector } from '../vector/fixedsizebinary';\nimport { FixedSizeListVector } from '../vector/fixedsizelist';\nimport { FloatVector, Float16Vector, Float32Vector, Float64Vector } from '../vector/float';\nimport { IntervalVector, IntervalDayTimeVector, IntervalYearMonthVector } from '../vector/interval';\nimport { IntVector, Int8Vector, Int16Vector, Int32Vector, Int64Vector, Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector } from '../vector/int';\nimport { ListVector } from '../vector/list';\nimport { MapVector } from '../vector/map';\nimport { NullVector } from '../vector/null';\nimport { StructVector } from '../vector/struct';\nimport { TimestampVector, TimestampSecondVector, TimestampMillisecondVector, TimestampMicrosecondVector, TimestampNanosecondVector } from '../vector/timestamp';\nimport { TimeVector, TimeSecondVector, TimeMillisecondVector, TimeMicrosecondVector, TimeNanosecondVector } from '../vector/time';\nimport { UnionVector, DenseUnionVector, SparseUnionVector } from '../vector/union';\nimport { Utf8Vector } from '../vector/utf8';\n\n/** @ignore */\nexport interface GetVectorConstructor extends Visitor {\n    visit<T extends Type>(node: T): VectorCtor<T>;\n    visitMany <T extends Type>(nodes: T[]): VectorCtor<T>[];\n    getVisitFn<T extends Type>(node: T): () => VectorCtor<T>;\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): () => VectorCtor<T>;\n}\n\n/** @ignore */\nexport class GetVectorConstructor extends Visitor {\n    public visitNull                 () { return NullVector; }\n    public visitBool                 () { return BoolVector; }\n    public visitInt                  () { return IntVector; }\n    public visitInt8                 () { return Int8Vector; }\n    public visitInt16                () { return Int16Vector; }\n    public visitInt32                () { return Int32Vector; }\n    public visitInt64                () { return Int64Vector; }\n    public visitUint8                () { return Uint8Vector; }\n    public visitUint16               () { return Uint16Vector; }\n    public visitUint32               () { return Uint32Vector; }\n    public visitUint64               () { return Uint64Vector; }\n    public visitFloat                () { return FloatVector; }\n    public visitFloat16              () { return Float16Vector; }\n    public visitFloat32              () { return Float32Vector; }\n    public visitFloat64              () { return Float64Vector; }\n    public visitUtf8                 () { return Utf8Vector; }\n    public visitBinary               () { return BinaryVector; }\n    public visitFixedSizeBinary      () { return FixedSizeBinaryVector; }\n    public visitDate                 () { return DateVector; }\n    public visitDateDay              () { return DateDayVector; }\n    public visitDateMillisecond      () { return DateMillisecondVector; }\n    public visitTimestamp            () { return TimestampVector; }\n    public visitTimestampSecond      () { return TimestampSecondVector; }\n    public visitTimestampMillisecond () { return TimestampMillisecondVector; }\n    public visitTimestampMicrosecond () { return TimestampMicrosecondVector; }\n    public visitTimestampNanosecond  () { return TimestampNanosecondVector; }\n    public visitTime                 () { return TimeVector; }\n    public visitTimeSecond           () { return TimeSecondVector; }\n    public visitTimeMillisecond      () { return TimeMillisecondVector; }\n    public visitTimeMicrosecond      () { return TimeMicrosecondVector; }\n    public visitTimeNanosecond       () { return TimeNanosecondVector; }\n    public visitDecimal              () { return DecimalVector; }\n    public visitList                 () { return ListVector; }\n    public visitStruct               () { return StructVector; }\n    public visitUnion                () { return UnionVector; }\n    public visitDenseUnion           () { return DenseUnionVector; }\n    public visitSparseUnion          () { return SparseUnionVector; }\n    public visitDictionary           () { return DictionaryVector; }\n    public visitInterval             () { return IntervalVector; }\n    public visitIntervalDayTime      () { return IntervalDayTimeVector; }\n    public visitIntervalYearMonth    () { return IntervalYearMonthVector; }\n    public visitFixedSizeList        () { return FixedSizeListVector; }\n    public visitMap                  () { return MapVector; }\n}\n\n/** @ignore */\nexport const instance = new GetVectorConstructor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nexport { Vector } from '../vector';\nexport { BaseVector } from './base';\nexport { BinaryVector } from './binary';\nexport { BoolVector } from './bool';\nexport { Chunked } from './chunked';\nexport { DateVector, DateDayVector, DateMillisecondVector } from './date';\nexport { DecimalVector } from './decimal';\nexport { DictionaryVector } from './dictionary';\nexport { FixedSizeBinaryVector } from './fixedsizebinary';\nexport { FixedSizeListVector } from './fixedsizelist';\nexport { FloatVector, Float16Vector, Float32Vector, Float64Vector } from './float';\nexport { IntervalVector, IntervalDayTimeVector, IntervalYearMonthVector } from './interval';\nexport { IntVector, Int8Vector, Int16Vector, Int32Vector, Int64Vector, Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector } from './int';\nexport { ListVector } from './list';\nexport { MapVector } from './map';\nexport { NullVector } from './null';\nexport { StructVector } from './struct';\nexport { TimestampVector, TimestampSecondVector, TimestampMillisecondVector, TimestampMicrosecondVector, TimestampNanosecondVector } from './timestamp';\nexport { TimeVector, TimeSecondVector, TimeMillisecondVector, TimeMicrosecondVector, TimeNanosecondVector } from './time';\nexport { UnionVector, DenseUnionVector, SparseUnionVector } from './union';\nexport { Utf8Vector } from './utf8';\nexport { MapRow, StructRow } from './row';\n\nimport * as fn from '../util/fn';\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\nimport { Chunked } from './chunked';\nimport { BaseVector } from './base';\nimport { setBool } from '../util/bit';\nimport { isIterable, isAsyncIterable } from '../util/compat';\nimport { Builder, IterableBuilderOptions } from '../builder';\nimport { VectorType as V, VectorCtorArgs } from '../interfaces';\nimport { instance as getVisitor } from '../visitor/get';\nimport { instance as setVisitor } from '../visitor/set';\nimport { instance as indexOfVisitor } from '../visitor/indexof';\nimport { instance as toArrayVisitor } from '../visitor/toarray';\nimport { instance as iteratorVisitor } from '../visitor/iterator';\nimport { instance as byteWidthVisitor } from '../visitor/bytewidth';\nimport { instance as getVectorConstructor } from '../visitor/vectorctor';\n\ndeclare module '../vector' {\n    namespace Vector {\n        export { newVector as new };\n        export { vectorFrom as from };\n    }\n}\n\ndeclare module './base' {\n    namespace BaseVector {\n        export { vectorFrom as from };\n    }\n    interface BaseVector<T extends DataType> {\n        get(index: number): T['TValue'] | null;\n        set(index: number, value: T['TValue'] | null): void;\n        indexOf(value: T['TValue'] | null, fromIndex?: number): number;\n        toArray(): T['TArray'];\n        getByteWidth(): number;\n        [Symbol.iterator](): IterableIterator<T['TValue'] | null>;\n    }\n}\n\n/** @nocollapse */\nVector.new = newVector;\n\n/** @nocollapse */\nVector.from = vectorFrom;\n\n/** @ignore */\nfunction newVector<T extends DataType>(data: Data<T>, ...args: VectorCtorArgs<V<T>>): V<T> {\n    return new (getVectorConstructor.getVisitFn<T>(data)())(data, ...args) as V<T>;\n}\n\n/** @ignore */\nexport interface VectorBuilderOptions<T extends DataType, TNull = any> extends IterableBuilderOptions<T, TNull> { values: Iterable<T['TValue'] | TNull> }\n/** @ignore */\nexport interface VectorBuilderOptionsAsync<T extends DataType, TNull = any> extends IterableBuilderOptions<T, TNull> { values: AsyncIterable<T['TValue'] | TNull> }\n\n/** @ignore */\nexport function vectorFromValuesWithType<T extends DataType, TNull = any>(newDataType: () => T, input: Iterable<T['TValue'] | TNull> | AsyncIterable<T['TValue'] | TNull> | VectorBuilderOptions<T, TNull> | VectorBuilderOptionsAsync<T, TNull>) {\n    if (isIterable(input)) {\n        return Vector.from({ 'nullValues': [null, undefined], type: newDataType(), 'values': input }) as V<T>;\n    } else if (isAsyncIterable(input)) {\n        return Vector.from({ 'nullValues': [null, undefined], type: newDataType(), 'values': input }) as Promise<V<T>>;\n    }\n    const {\n        'values': values = [],\n        'type': type = newDataType(),\n        'nullValues': nullValues = [null, undefined],\n    } = { ...input };\n    return isIterable(values)\n        ? Vector.from({ nullValues, ...input, type } as VectorBuilderOptions<T, TNull>)\n        : Vector.from({ nullValues, ...input, type } as VectorBuilderOptionsAsync<T, TNull>);\n}\n\n/** @ignore */\nfunction vectorFrom<T extends DataType = any, TNull = any>(input: VectorBuilderOptions<T, TNull>): Vector<T>;\nfunction vectorFrom<T extends DataType = any, TNull = any>(input: VectorBuilderOptionsAsync<T, TNull>): Promise<Vector<T>>;\nfunction vectorFrom<T extends DataType = any, TNull = any>(input: VectorBuilderOptions<T, TNull> | VectorBuilderOptionsAsync<T, TNull>) {\n    const { 'values': values = [], ...options } = { 'nullValues': [null, undefined], ...input } as VectorBuilderOptions<T, TNull> | VectorBuilderOptionsAsync<T, TNull>;\n    if (isIterable<T['TValue'] | TNull>(values)) {\n        const chunks = [...Builder.throughIterable(options)(values)];\n        return (chunks.length === 1 ? chunks[0] : Chunked.concat<T>(chunks)) as Vector<T>;\n    }\n    return (async (chunks: V<T>[]) => {\n        const transform = Builder.throughAsyncIterable(options);\n        for await (const chunk of transform(values)) {\n            chunks.push(chunk);\n        }\n        return (chunks.length === 1 ? chunks[0] : Chunked.concat<T>(chunks)) as Vector<T>;\n    })([]);\n}\n\n//\n// We provide the following method implementations for code navigability purposes only.\n// They're overridden at runtime below with the specific Visitor implementation for each type,\n// short-circuiting the usual Visitor traversal and reducing intermediate lookups and calls.\n// This comment is here to remind you to not set breakpoints in these function bodies, or to inform\n// you why the breakpoints you have already set are not being triggered. Have a great day!\n//\n\nBaseVector.prototype.get = function baseVectorGet<T extends DataType>(this: BaseVector<T>, index: number): T['TValue'] | null {\n    return getVisitor.visit(this, index);\n};\n\nBaseVector.prototype.set = function baseVectorSet<T extends DataType>(this: BaseVector<T>, index: number, value: T['TValue'] | null): void {\n    return setVisitor.visit(this, index, value);\n};\n\nBaseVector.prototype.indexOf = function baseVectorIndexOf<T extends DataType>(this: BaseVector<T>, value: T['TValue'] | null, fromIndex?: number): number {\n    return indexOfVisitor.visit(this, value, fromIndex);\n};\n\nBaseVector.prototype.toArray = function baseVectorToArray<T extends DataType>(this: BaseVector<T>): T['TArray'] {\n    return toArrayVisitor.visit(this);\n};\n\nBaseVector.prototype.getByteWidth = function baseVectorGetByteWidth<T extends DataType>(this: BaseVector<T>): number {\n    return byteWidthVisitor.visit(this.type);\n};\n\nBaseVector.prototype[Symbol.iterator] = function baseVectorSymbolIterator<T extends DataType>(this: BaseVector<T>): IterableIterator<T['TValue'] | null> {\n    return iteratorVisitor.visit(this);\n};\n\n(BaseVector.prototype as any)._bindDataAccessors = bindBaseVectorDataAccessors;\n\n// Perf: bind and assign the operator Visitor methods to each of the Vector subclasses for each Type\n(Object.keys(Type) as any[])\n    .map((T: any) => Type[T] as any)\n    .filter((T: any): T is Type => typeof T === 'number')\n    .filter((typeId) => typeId !== Type.NONE)\n    .forEach((typeId) => {\n        const VectorCtor = getVectorConstructor.visit(typeId);\n        VectorCtor.prototype['get'] = fn.partial1(getVisitor.getVisitFn(typeId));\n        VectorCtor.prototype['set'] = fn.partial2(setVisitor.getVisitFn(typeId));\n        VectorCtor.prototype['indexOf'] = fn.partial2(indexOfVisitor.getVisitFn(typeId));\n        VectorCtor.prototype['toArray'] = fn.partial0(toArrayVisitor.getVisitFn(typeId));\n        VectorCtor.prototype['getByteWidth'] = partialType0(byteWidthVisitor.getVisitFn(typeId));\n        VectorCtor.prototype[Symbol.iterator] = fn.partial0(iteratorVisitor.getVisitFn(typeId));\n    });\n\n/** @ignore */\nfunction partialType0<T extends Vector>(visit: (node: T['type']) => any) {\n    return function(this: T) { return visit(this.type); };\n}\n\n/** @ignore */\nfunction wrapNullableGet<T extends DataType, V extends Vector<T>, F extends (i: number) => any>(fn: F): (...args: Parameters<F>) => ReturnType<F> {\n    return function(this: V, i: number) { return this.isValid(i) ? fn.call(this, i) : null; };\n}\n\n/** @ignore */\nfunction wrapNullableSet<T extends DataType, V extends BaseVector<T>, F extends (i: number, a: any) => void>(fn: F): (...args: Parameters<F>) => void {\n    return function(this: V, i: number, a: any) {\n        if (setBool(this.nullBitmap, this.offset + i, !(a === null || a === undefined))) {\n            fn.call(this, i, a);\n        }\n    };\n}\n\n/** @ignore */\nfunction bindBaseVectorDataAccessors<T extends DataType>(this: BaseVector<T>) {\n    const nullBitmap = this.nullBitmap;\n    if (nullBitmap && nullBitmap.byteLength > 0) {\n        this.get = wrapNullableGet(this.get);\n        this.set = wrapNullableSet(this.set);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Column } from './column';\nimport { Schema, Field } from './schema';\nimport { RecordBatch, _InternalEmptyPlaceholderRecordBatch } from './recordbatch';\nimport { DataFrame } from './compute/dataframe';\nimport { RecordBatchReader } from './ipc/reader';\nimport { DataType, RowLike, Struct } from './type';\nimport { selectColumnArgs, selectArgs } from './util/args';\nimport { Clonable, Sliceable, Applicative } from './vector';\nimport { isPromise, isIterable, isAsyncIterable } from './util/compat';\nimport { RecordBatchFileWriter, RecordBatchStreamWriter } from './ipc/writer';\nimport { distributeColumnsIntoRecordBatches, distributeVectorsIntoRecordBatches } from './util/recordbatch';\nimport { Vector, Chunked, StructVector, VectorBuilderOptions, VectorBuilderOptionsAsync } from './vector/index';\n\ntype VectorMap = { [key: string]: Vector };\ntype Fields<T extends { [key: string]: DataType }> = (keyof T)[] | Field<T[keyof T]>[];\ntype ChildData<T extends { [key: string]: DataType }> = Data<T[keyof T]>[] | Vector<T[keyof T]>[];\ntype Columns<T extends { [key: string]: DataType }> = Column<T[keyof T]>[] | Column<T[keyof T]>[][];\n\nexport interface Table<T extends { [key: string]: DataType } = any> {\n\n    get(index: number): Struct<T>['TValue'];\n    [Symbol.iterator](): IterableIterator<RowLike<T>>;\n\n    slice(begin?: number, end?: number): Table<T>;\n    concat(...others: Vector<Struct<T>>[]): Table<T>;\n    clone(chunks?: RecordBatch<T>[], offsets?: Uint32Array): Table<T>;\n\n    scan(next: import('./compute/dataframe').NextFunc, bind?: import('./compute/dataframe').BindFunc): void;\n    scanReverse(next: import('./compute/dataframe').NextFunc, bind?: import('./compute/dataframe').BindFunc): void;\n    countBy(name: import('./compute/predicate').Col | string): import('./compute/dataframe').CountByResult;\n    filter(predicate: import('./compute/predicate').Predicate): import('./compute/dataframe').FilteredDataFrame<T>;\n}\n\nexport class Table<T extends { [key: string]: DataType } = any>\n    extends Chunked<Struct<T>>\n    implements DataFrame<T>,\n               Clonable<Table<T>>,\n               Sliceable<Table<T>>,\n               Applicative<Struct<T>, Table<T>> {\n\n    /** @nocollapse */\n    public static empty<T extends { [key: string]: DataType } = Record<string, never>>(schema = new Schema<T>([])) { return new Table<T>(schema, []); }\n\n    public static from(): Table<Record<string, never>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: RecordBatchReader<T>): Table<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg0): Table<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg2): Table<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg1): Promise<Table<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg3): Promise<Table<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg4): Promise<Table<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg5): Promise<Table<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: PromiseLike<RecordBatchReader<T>>): Promise<Table<T>>;\n    public static from<T extends { [key: string]: DataType } = any, TNull = any>(options: VectorBuilderOptions<Struct<T>, TNull>): Table<T>;\n    public static from<T extends { [key: string]: DataType } = any, TNull = any>(options: VectorBuilderOptionsAsync<Struct<T>, TNull>): Promise<Table<T>>;\n    /** @nocollapse */\n    public static from<T extends { [key: string]: DataType } = any, TNull = any>(input?: any) {\n\n        if (!input) { return Table.empty(); }\n\n        if (typeof input === 'object') {\n            const table = isIterable(input['values']) ? tableFromIterable<T, TNull>(input)\n                 : isAsyncIterable(input['values']) ? tableFromAsyncIterable<T, TNull>(input)\n                                                    : null;\n            if (table !== null) { return table; }\n        }\n\n        let reader = RecordBatchReader.from<T>(input) as RecordBatchReader<T> | Promise<RecordBatchReader<T>>;\n\n        if (isPromise<RecordBatchReader<T>>(reader)) {\n            return (async () => await Table.from(await reader))();\n        }\n        if (reader.isSync() && (reader = reader.open())) {\n            return !reader.schema ? Table.empty() : new Table<T>(reader.schema, [...reader]);\n        }\n        return (async (opening) => {\n            const reader = await opening;\n            const schema = reader.schema;\n            const batches: RecordBatch[] = [];\n            if (schema) {\n                for await (const batch of reader) {\n                    batches.push(batch);\n                }\n                return new Table<T>(schema, batches);\n            }\n            return Table.empty();\n        })(reader.open());\n    }\n\n    /** @nocollapse */\n    public static async fromAsync<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArgs): Promise<Table<T>> {\n        return await Table.from<T>(source as any);\n    }\n\n    /** @nocollapse */\n    public static fromStruct<T extends { [key: string]: DataType } = any>(vector: Vector<Struct<T>>) {\n        return Table.new<T>(vector.data.childData as Data<T[keyof T]>[], vector.type.children);\n    }\n\n    /**\n     * @summary Create a new Table from a collection of Columns or Vectors,\n     * with an optional list of names or Fields.\n     *\n     *\n     * `Table.new` accepts an Object of\n     * Columns or Vectors, where the keys will be used as the field names\n     * for the Schema:\n     * ```ts\n     * const i32s = Int32Vector.from([1, 2, 3]);\n     * const f32s = Float32Vector.from([.1, .2, .3]);\n     * const table = Table.new({ i32: i32s, f32: f32s });\n     * assert(table.schema.fields[0].name === 'i32');\n     * ```\n     *\n     * It also accepts a a list of Vectors with an optional list of names or\n     * Fields for the resulting Schema. If the list is omitted or a name is\n     * missing, the numeric index of each Vector will be used as the name:\n     * ```ts\n     * const i32s = Int32Vector.from([1, 2, 3]);\n     * const f32s = Float32Vector.from([.1, .2, .3]);\n     * const table = Table.new([i32s, f32s], ['i32']);\n     * assert(table.schema.fields[0].name === 'i32');\n     * assert(table.schema.fields[1].name === '1');\n     * ```\n     *\n     * If the supplied arguments are Columns, `Table.new` will infer the Schema\n     * from the Columns:\n     * ```ts\n     * const i32s = Column.new('i32', Int32Vector.from([1, 2, 3]));\n     * const f32s = Column.new('f32', Float32Vector.from([.1, .2, .3]));\n     * const table = Table.new(i32s, f32s);\n     * assert(table.schema.fields[0].name === 'i32');\n     * assert(table.schema.fields[1].name === 'f32');\n     * ```\n     *\n     * If the supplied Vector or Column lengths are unequal, `Table.new` will\n     * extend the lengths of the shorter Columns, allocating additional bytes\n     * to represent the additional null slots. The memory required to allocate\n     * these additional bitmaps can be computed as:\n     * ```ts\n     * let additionalBytes = 0;\n     * for (let vec in shorter_vectors) {\n     *     additionalBytes += (((longestLength - vec.length) + 63) & ~63) >> 3;\n     * }\n     * ```\n     *\n     * For example, an additional null bitmap for one million null values would require\n     * 125,000 bytes (`((1e6 + 63) & ~63) >> 3`), or approx. `0.11MiB`\n     */\n    public static new<T extends { [key: string]: DataType } = any>(...columns: Columns<T>): Table<T>;\n    public static new<T extends VectorMap = any>(children: T): Table<{ [P in keyof T]: T[P]['type'] }>;\n    public static new<T extends { [key: string]: DataType } = any>(children: ChildData<T>, fields?: Fields<T>): Table<T>;\n    /** @nocollapse */\n    public static new(...cols: any[]) {\n        return new Table(...distributeColumnsIntoRecordBatches(selectColumnArgs(cols)));\n    }\n\n    constructor(batches: RecordBatch<T>[]);\n    constructor(...batches: RecordBatch<T>[]);\n    constructor(schema: Schema<T>, batches: RecordBatch<T>[]);\n    constructor(schema: Schema<T>, ...batches: RecordBatch<T>[]);\n    constructor(...args: any[]) {\n\n        let schema: Schema<T> = null!;\n\n        if (args[0] instanceof Schema) { schema = args.shift(); }\n\n        const chunks = selectArgs<RecordBatch<T>>(RecordBatch, args);\n\n        if (!schema && !(schema = chunks[0] && chunks[0].schema)) {\n            throw new TypeError('Table must be initialized with a Schema or at least one RecordBatch');\n        }\n\n        chunks[0] || (chunks[0] = new _InternalEmptyPlaceholderRecordBatch(schema));\n\n        super(new Struct(schema.fields), chunks);\n\n        this._schema = schema;\n        this._chunks = chunks;\n    }\n\n    protected _schema: Schema<T>;\n    // List of inner RecordBatches\n    protected _chunks: RecordBatch<T>[];\n    protected _children?: Column<T[keyof T]>[];\n\n    public get schema() { return this._schema; }\n    public get length() { return this._length; }\n    public get chunks() { return this._chunks; }\n    public get numCols() { return this._numChildren; }\n\n    public clone(chunks = this._chunks) {\n        return new Table<T>(this._schema, chunks);\n    }\n\n    public getColumn<R extends keyof T>(name: R): Column<T[R]> {\n        return this.getColumnAt(this.getColumnIndex(name)) as Column<T[R]>;\n    }\n    public getColumnAt<R extends DataType = any>(index: number): Column<R> | null {\n        return this.getChildAt(index);\n    }\n    public getColumnIndex<R extends keyof T>(name: R) {\n        return this._schema.fields.findIndex((f) => f.name === name);\n    }\n    public getChildAt<R extends DataType = any>(index: number): Column<R> | null {\n        if (index < 0 || index >= this.numChildren) { return null; }\n        let field: Field<R>, child: Column<R>;\n        const fields = (this._schema as Schema<any>).fields;\n        const columns = this._children || (this._children = []) as Column[];\n        if (child = columns[index]) { return child as Column<R>; }\n        if (field = fields[index]) {\n            const chunks = this._chunks\n                .map((chunk) => chunk.getChildAt<R>(index))\n                .filter((vec): vec is Vector<R> => vec != null);\n            if (chunks.length > 0) {\n                return (columns[index] = new Column<R>(field, chunks));\n            }\n        }\n        return null;\n    }\n\n    // @ts-ignore\n    public serialize(encoding = 'binary', stream = true) {\n        const Writer = !stream\n            ? RecordBatchFileWriter\n            : RecordBatchStreamWriter;\n        return Writer.writeAll(this).toUint8Array(true);\n    }\n    public count(): number {\n        return this._length;\n    }\n    public select<K extends keyof T = any>(...columnNames: K[]) {\n        const nameToIndex = this._schema.fields.reduce((m, f, i) => m.set(f.name as K, i), new Map<K, number>());\n        return this.selectAt(...columnNames.map((columnName) => nameToIndex.get(columnName)!).filter((x) => x > -1));\n    }\n    public selectAt<K extends T[keyof T] = any>(...columnIndices: number[]) {\n        const schema = this._schema.selectAt<K>(...columnIndices);\n        return new Table(schema, this._chunks.map(({ length, data: { childData } }) => {\n            return new RecordBatch(schema, length, columnIndices.map((i) => childData[i]).filter(Boolean));\n        }));\n    }\n    public assign<R extends { [key: string]: DataType } = any>(other: Table<R>) {\n\n        const fields = this._schema.fields;\n        const [indices, oldToNew] = other.schema.fields.reduce((memo, f2, newIdx) => {\n            const [indices, oldToNew] = memo;\n            const i = fields.findIndex((f) => f.name === f2.name);\n            ~i ? (oldToNew[i] = newIdx) : indices.push(newIdx);\n            return memo;\n        }, [[], []] as number[][]);\n\n        const schema = this._schema.assign(other.schema);\n        const columns = [\n            ...fields.map((_f, i, _fs, j = oldToNew[i]) =>\n                (j === undefined ? this.getColumnAt(i) : other.getColumnAt(j))!),\n            ...indices.map((i) => other.getColumnAt(i)!)\n        ].filter(Boolean) as Column<(T & R)[keyof T | keyof R]>[];\n\n        return new Table<T & R>(...distributeVectorsIntoRecordBatches<any>(schema, columns));\n    }\n}\n\nfunction tableFromIterable<T extends { [key: string]: DataType } = any, TNull = any>(input: VectorBuilderOptions<Struct<T>, TNull>) {\n    const { type } = input;\n    if (type instanceof Struct) {\n        return Table.fromStruct(StructVector.from(input as VectorBuilderOptions<Struct<T>, TNull>));\n    }\n    return null;\n}\n\nfunction tableFromAsyncIterable<T extends { [key: string]: DataType } = any, TNull = any>(input: VectorBuilderOptionsAsync<Struct<T>, TNull>) {\n    const { type } = input;\n    if (type instanceof Struct) {\n        return StructVector.from(input as VectorBuilderOptionsAsync<Struct<T>, TNull>).then((vector) => Table.fromStruct(vector));\n    }\n    return null;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Table } from './table';\nimport { Vector } from './vector';\nimport { Visitor } from './visitor';\nimport { Schema, Field } from './schema';\nimport { isIterable } from './util/compat';\nimport { Chunked } from './vector/chunked';\nimport { selectFieldArgs } from './util/args';\nimport { DataType, Struct, Dictionary } from './type';\nimport { ensureSameLengthData } from './util/recordbatch';\nimport { Clonable, Sliceable, Applicative } from './vector';\nimport { StructVector, VectorBuilderOptions, VectorBuilderOptionsAsync } from './vector/index';\n\ntype VectorMap = { [key: string]: Vector };\ntype Fields<T extends { [key: string]: DataType }> = (keyof T)[] | Field<T[keyof T]>[];\ntype ChildData<T extends { [key: string]: DataType }> = (Data<T[keyof T]> | Vector<T[keyof T]>)[];\n\nexport interface RecordBatch<T extends { [key: string]: DataType } = any> {\n    concat(...others: Vector<Struct<T>>[]): Table<T>;\n    slice(begin?: number, end?: number): RecordBatch<T>;\n    clone(data: Data<Struct<T>>, children?: Vector[]): RecordBatch<T>;\n}\n\nexport class RecordBatch<T extends { [key: string]: DataType } = any>\n    extends StructVector<T>\n    implements Clonable<RecordBatch<T>>,\n               Sliceable<RecordBatch<T>>,\n               Applicative<Struct<T>, Table<T>> {\n\n    public static from<T extends { [key: string]: DataType } = any, TNull = any>(options: VectorBuilderOptions<Struct<T>, TNull>): Table<T>;\n    public static from<T extends { [key: string]: DataType } = any, TNull = any>(options: VectorBuilderOptionsAsync<Struct<T>, TNull>): Promise<Table<T>>;\n    /** @nocollapse */\n    public static from<T extends { [key: string]: DataType } = any, TNull = any>(options: VectorBuilderOptions<Struct<T>, TNull> | VectorBuilderOptionsAsync<Struct<T>, TNull>) {\n        if (isIterable<(Struct<T>)['TValue'] | TNull>(options['values'])) {\n            return Table.from(options as VectorBuilderOptions<Struct<T>, TNull>);\n        }\n        return Table.from(options as VectorBuilderOptionsAsync<Struct<T>, TNull>);\n    }\n\n    public static new<T extends VectorMap = any>(children: T): RecordBatch<{ [P in keyof T]: T[P]['type'] }>;\n    public static new<T extends { [key: string]: DataType } = any>(children: ChildData<T>, fields?: Fields<T>): RecordBatch<T>;\n    /** @nocollapse */\n    public static new<T extends { [key: string]: DataType } = any>(...args: any[]) {\n        const [fs, xs] = selectFieldArgs<T>(args);\n        const vs = xs.filter((x): x is Vector<T[keyof T]> => x instanceof Vector);\n        return new RecordBatch(...ensureSameLengthData(new Schema<T>(fs), vs.map((x) => x.data)));\n    }\n\n    protected _schema: Schema;\n    protected _dictionaries?: Map<number, Vector>;\n\n    constructor(schema: Schema<T>, length: number, children: (Data | Vector)[]);\n    constructor(schema: Schema<T>, data: Data<Struct<T>>, children?: Vector[]);\n    constructor(...args: any[]) {\n        let data: Data<Struct<T>>;\n        const schema = args[0] as Schema<T>;\n        let children: Vector[] | undefined;\n        if (args[1] instanceof Data) {\n            [, data, children] = (args as [any, Data<Struct<T>>, Vector<T[keyof T]>[]?]);\n        } else {\n            const fields = schema.fields as Field<T[keyof T]>[];\n            const [, length, childData] = args as [any, number, Data<T[keyof T]>[]];\n            data = Data.Struct(new Struct<T>(fields), 0, length, 0, null, childData);\n        }\n        super(data, children);\n        this._schema = schema;\n    }\n\n    public clone(data: Data<Struct<T>>, children = this._children) {\n        return new RecordBatch<T>(this._schema, data, children);\n    }\n\n    public concat(...others: Vector<Struct<T>>[]): Table<T> {\n        const schema = this._schema, chunks = Chunked.flatten(this, ...others);\n        return new Table(schema, chunks.map(({ data }) => new RecordBatch(schema, data)));\n    }\n\n    public get schema() { return this._schema; }\n    public get numCols() { return this._schema.fields.length; }\n    public get dictionaries() {\n        return this._dictionaries || (this._dictionaries = DictionaryCollector.collect(this));\n    }\n\n    public select<K extends keyof T = any>(...columnNames: K[]) {\n        const nameToIndex = this._schema.fields.reduce((m, f, i) => m.set(f.name as K, i), new Map<K, number>());\n        return this.selectAt(...columnNames.map((columnName) => nameToIndex.get(columnName)!).filter((x) => x > -1));\n    }\n    public selectAt<K extends T[keyof T] = any>(...columnIndices: number[]) {\n        const schema = this._schema.selectAt(...columnIndices);\n        const childData = columnIndices.map((i) => this.data.childData[i]).filter(Boolean);\n        return new RecordBatch<{ [key: string]: K }>(schema, this.length, childData);\n    }\n}\n\n/**\n * An internal class used by the `RecordBatchReader` and `RecordBatchWriter`\n * implementations to differentiate between a stream with valid zero-length\n * RecordBatches, and a stream with a Schema message, but no RecordBatches.\n * @see https://github.com/apache/arrow/pull/4373\n * @ignore\n * @private\n */\n/* eslint-disable @typescript-eslint/naming-convention */\nexport class _InternalEmptyPlaceholderRecordBatch<T extends { [key: string]: DataType } = any> extends RecordBatch<T> {\n    constructor(schema: Schema<T>) {\n        super(schema, 0, schema.fields.map((f) => Data.new(f.type, 0, 0, 0)));\n    }\n}\n\n/** @ignore */\nclass DictionaryCollector extends Visitor {\n    public dictionaries = new Map<number, Vector>();\n    public static collect<T extends RecordBatch>(batch: T) {\n        return new DictionaryCollector().visit(\n            batch.data, new Struct(batch.schema.fields)\n        ).dictionaries;\n    }\n    public visit(data: Data, type: DataType) {\n        if (DataType.isDictionary(type)) {\n            return this.visitDictionary(data, type);\n        } else {\n            data.childData.forEach((child, i) =>\n                this.visit(child, type.children[i].type));\n        }\n        return this;\n    }\n    public visitDictionary(data: Data, type: Dictionary) {\n        const dictionary = data.dictionary;\n        if (dictionary && dictionary.length > 0) {\n            this.dictionaries.set(type.id, dictionary);\n        }\n        return this;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\nimport { MessageHeader } from '../enum';\nimport { Footer } from './metadata/file';\nimport { Schema, Field } from '../schema';\nimport streamAdapters from '../io/adapters';\nimport { Message } from './metadata/message';\nimport * as metadata from './metadata/message';\nimport { ArrayBufferViewInput } from '../util/buffer';\nimport { ByteStream, AsyncByteStream } from '../io/stream';\nimport { RandomAccessFile, AsyncRandomAccessFile } from '../io/file';\nimport { VectorLoader, JSONVectorLoader } from '../visitor/vectorloader';\nimport { RecordBatch, _InternalEmptyPlaceholderRecordBatch } from '../recordbatch';\nimport {\n    FileHandle,\n    ArrowJSONLike,\n    ITERATOR_DONE,\n    ReadableInterop,\n} from '../io/interfaces';\nimport {\n    MessageReader, AsyncMessageReader, JSONMessageReader,\n    checkForMagicArrowString, magicLength, magicAndPadding, magicX2AndPadding\n} from './message';\nimport {\n    isPromise,\n    isIterable, isAsyncIterable,\n    isIteratorResult, isArrowJSON,\n    isFileHandle, isFetchResponse,\n    isReadableDOMStream, isReadableNodeStream\n} from '../util/compat';\n\n/** @ignore */ export type FromArg0 = ArrowJSONLike;\n/** @ignore */ export type FromArg1 = PromiseLike<ArrowJSONLike>;\n/** @ignore */ export type FromArg2 = Iterable<ArrayBufferViewInput> | ArrayBufferViewInput;\n/** @ignore */ export type FromArg3 = PromiseLike<Iterable<ArrayBufferViewInput> | ArrayBufferViewInput>;\n/** @ignore */ export type FromArg4 = Response | NodeJS.ReadableStream | ReadableStream<ArrayBufferViewInput> | AsyncIterable<ArrayBufferViewInput>;\n/** @ignore */ export type FromArg5 = FileHandle | PromiseLike<FileHandle> | PromiseLike<FromArg4>;\n/** @ignore */ export type FromArgs = FromArg0 | FromArg1 | FromArg2 | FromArg3 | FromArg4 | FromArg5;\n\n/** @ignore */ type OpenOptions = { autoDestroy?: boolean };\n/** @ignore */ type RecordBatchReaders<T extends { [key: string]: DataType } = any> = RecordBatchFileReader<T> | RecordBatchStreamReader<T>;\n/** @ignore */ type AsyncRecordBatchReaders<T extends { [key: string]: DataType } = any> = AsyncRecordBatchFileReader<T> | AsyncRecordBatchStreamReader<T>;\n/** @ignore */ type RecordBatchFileReaders<T extends { [key: string]: DataType } = any> = RecordBatchFileReader<T> | AsyncRecordBatchFileReader<T>;\n/** @ignore */ type RecordBatchStreamReaders<T extends { [key: string]: DataType } = any> = RecordBatchStreamReader<T> | AsyncRecordBatchStreamReader<T>;\n\nexport class RecordBatchReader<T extends { [key: string]: DataType } = any> extends ReadableInterop<RecordBatch<T>> {\n\n    protected _impl: RecordBatchReaderImpls<T>;\n    protected constructor(impl: RecordBatchReaderImpls<T>) {\n        super();\n        this._impl = impl;\n    }\n\n    public get closed() { return this._impl.closed; }\n    public get schema() { return this._impl.schema; }\n    public get autoDestroy() { return this._impl.autoDestroy; }\n    public get dictionaries() { return this._impl.dictionaries; }\n    public get numDictionaries() { return this._impl.numDictionaries; }\n    public get numRecordBatches() { return this._impl.numRecordBatches; }\n    public get footer(): Footer | null { return this._impl.isFile() ? this._impl.footer : null; }\n\n    public isSync(): this is RecordBatchReaders<T> { return this._impl.isSync(); }\n    public isAsync(): this is AsyncRecordBatchReaders<T> { return this._impl.isAsync(); }\n    public isFile(): this is RecordBatchFileReaders<T> { return this._impl.isFile(); }\n    public isStream(): this is RecordBatchStreamReaders<T> { return this._impl.isStream(); }\n\n    public next() {\n        return this._impl.next();\n    }\n    public throw(value?: any) {\n        return this._impl.throw(value);\n    }\n    public return(value?: any) {\n        return this._impl.return(value);\n    }\n    public cancel() {\n        return this._impl.cancel();\n    }\n    public reset(schema?: Schema<T> | null): this {\n        this._impl.reset(schema);\n        this._DOMStream = undefined;\n        this._nodeStream = undefined;\n        return this;\n    }\n    public open(options?: OpenOptions) {\n        const opening = this._impl.open(options);\n        return isPromise(opening) ? opening.then(() => this) : this;\n    }\n    public readRecordBatch(index: number): RecordBatch<T> | null | Promise<RecordBatch<T> | null> {\n        return this._impl.isFile() ? this._impl.readRecordBatch(index) : null;\n    }\n    public [Symbol.iterator](): IterableIterator<RecordBatch<T>> {\n        return (<IterableIterator<RecordBatch<T>>> this._impl)[Symbol.iterator]();\n    }\n    public [Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>> {\n        return (<AsyncIterableIterator<RecordBatch<T>>> this._impl)[Symbol.asyncIterator]();\n    }\n    public toDOMStream() {\n        return streamAdapters.toDOMStream<RecordBatch<T>>(\n            (this.isSync()\n                ? { [Symbol.iterator]: () => this } as Iterable<RecordBatch<T>>\n                : { [Symbol.asyncIterator]: () => this } as AsyncIterable<RecordBatch<T>>));\n    }\n    public toNodeStream() {\n        return streamAdapters.toNodeStream<RecordBatch<T>>(\n            (this.isSync()\n                ? { [Symbol.iterator]: () => this } as Iterable<RecordBatch<T>>\n                : { [Symbol.asyncIterator]: () => this } as AsyncIterable<RecordBatch<T>>),\n            { objectMode: true });\n    }\n\n    /** @nocollapse */\n    // @ts-ignore\n    public static throughNode(options?: import('stream').DuplexOptions & { autoDestroy: boolean }): import('stream').Duplex {\n        throw new Error(`\"throughNode\" not available in this environment`);\n    }\n    /** @nocollapse */\n    public static throughDOM<T extends { [key: string]: DataType }>(\n        // @ts-ignore\n        writableStrategy?: ByteLengthQueuingStrategy,\n        // @ts-ignore\n        readableStrategy?: { autoDestroy: boolean }\n    ): { writable: WritableStream<Uint8Array>; readable: ReadableStream<RecordBatch<T>> } {\n        throw new Error(`\"throughDOM\" not available in this environment`);\n    }\n\n    public static from<T extends RecordBatchReader>(source: T): T;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg0): RecordBatchStreamReader<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg1): Promise<RecordBatchStreamReader<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg2): RecordBatchFileReader<T> | RecordBatchStreamReader<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg3): Promise<RecordBatchFileReader<T> | RecordBatchStreamReader<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg4): Promise<RecordBatchFileReader<T> | AsyncRecordBatchReaders<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg5): Promise<AsyncRecordBatchFileReader<T> | AsyncRecordBatchStreamReader<T>>;\n    /** @nocollapse */\n    public static from<T extends { [key: string]: DataType } = any>(source: any) {\n        if (source instanceof RecordBatchReader) {\n            return source;\n        } else if (isArrowJSON(source)) {\n            return fromArrowJSON<T>(source);\n        } else if (isFileHandle(source)) {\n            return fromFileHandle<T>(source);\n        } else if (isPromise<any>(source)) {\n            return (async () => await RecordBatchReader.from<any>(await source))();\n        } else if (isFetchResponse(source) || isReadableDOMStream(source) || isReadableNodeStream(source) || isAsyncIterable(source)) {\n            return fromAsyncByteStream<T>(new AsyncByteStream(source));\n        }\n        return fromByteStream<T>(new ByteStream(source));\n    }\n\n    public static readAll<T extends RecordBatchReader>(source: T): T extends RecordBatchReaders ? IterableIterator<T> : AsyncIterableIterator<T>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg0): IterableIterator<RecordBatchStreamReader<T>>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg1): AsyncIterableIterator<RecordBatchStreamReader<T>>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg2): IterableIterator<RecordBatchFileReader<T> | RecordBatchStreamReader<T>>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg3): AsyncIterableIterator<RecordBatchFileReader<T> | RecordBatchStreamReader<T>>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg4): AsyncIterableIterator<RecordBatchFileReader<T> | AsyncRecordBatchReaders<T>>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg5): AsyncIterableIterator<AsyncRecordBatchFileReader<T> | AsyncRecordBatchStreamReader<T>>;\n    /** @nocollapse */\n    public static readAll<T extends { [key: string]: DataType } = any>(source: any) {\n        if (source instanceof RecordBatchReader) {\n            return source.isSync() ? readAllSync(source) : readAllAsync(source as AsyncRecordBatchReaders<T>);\n        } else if (isArrowJSON(source) || ArrayBuffer.isView(source) || isIterable<ArrayBufferViewInput>(source) || isIteratorResult(source)) {\n            return readAllSync<T>(source) as IterableIterator<RecordBatchReaders<T>>;\n        }\n        return readAllAsync<T>(source) as AsyncIterableIterator<RecordBatchReaders<T> | AsyncRecordBatchReaders<T>>;\n    }\n}\n\n//\n// Since TS is a structural type system, we define the following subclass stubs\n// so that concrete types exist to associate with with the interfaces below.\n//\n// The implementation for each RecordBatchReader is hidden away in the set of\n// `RecordBatchReaderImpl` classes in the second half of this file. This allows\n// us to export a single RecordBatchReader class, and swap out the impl based\n// on the io primitives or underlying arrow (JSON, file, or stream) at runtime.\n//\n// Async/await makes our job a bit harder, since it forces everything to be\n// either fully sync or fully async. This is why the logic for the reader impls\n// has been duplicated into both sync and async variants. Since the RBR\n// delegates to its impl, an RBR with an AsyncRecordBatchFileReaderImpl for\n// example will return async/await-friendly Promises, but one with a (sync)\n// RecordBatchStreamReaderImpl will always return values. Nothing should be\n// different about their logic, aside from the async handling. This is also why\n// this code looks highly structured, as it should be nearly identical and easy\n// to follow.\n//\n\n/** @ignore */\nexport class RecordBatchStreamReader<T extends { [key: string]: DataType } = any> extends RecordBatchReader<T> {\n    constructor(protected _impl: RecordBatchStreamReaderImpl<T>) { super (_impl); }\n    public [Symbol.iterator]() { return (this._impl as IterableIterator<RecordBatch<T>>)[Symbol.iterator](); }\n    public async *[Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>> { yield* this[Symbol.iterator](); }\n}\n/** @ignore */\nexport class AsyncRecordBatchStreamReader<T extends { [key: string]: DataType } = any> extends RecordBatchReader<T> {\n    constructor(protected _impl: AsyncRecordBatchStreamReaderImpl<T>) { super (_impl); }\n    public [Symbol.iterator](): IterableIterator<RecordBatch<T>> { throw new Error(`AsyncRecordBatchStreamReader is not Iterable`); }\n    public [Symbol.asyncIterator]() { return (this._impl as AsyncIterableIterator<RecordBatch<T>>)[Symbol.asyncIterator](); }\n}\n/** @ignore */\nexport class RecordBatchFileReader<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReader<T> {\n    constructor(protected _impl: RecordBatchFileReaderImpl<T>) { super (_impl); }\n}\n/** @ignore */\nexport class AsyncRecordBatchFileReader<T extends { [key: string]: DataType } = any> extends AsyncRecordBatchStreamReader<T> {\n    constructor(protected _impl: AsyncRecordBatchFileReaderImpl<T>) { super (_impl); }\n}\n\n//\n// Now override the return types for each sync/async RecordBatchReader variant\n//\n\n/** @ignore */\nexport interface RecordBatchStreamReader<T extends { [key: string]: DataType } = any> extends RecordBatchReader<T> {\n    open(options?: OpenOptions | undefined): this;\n    cancel(): void;\n    throw(value?: any): IteratorResult<any>;\n    return(value?: any): IteratorResult<any>;\n    next(value?: any): IteratorResult<RecordBatch<T>>;\n}\n\n/** @ignore */\nexport interface AsyncRecordBatchStreamReader<T extends { [key: string]: DataType } = any> extends RecordBatchReader<T> {\n    open(options?: OpenOptions | undefined): Promise<this>;\n    cancel(): Promise<void>;\n    throw(value?: any): Promise<IteratorResult<any>>;\n    return(value?: any): Promise<IteratorResult<any>>;\n    next(value?: any): Promise<IteratorResult<RecordBatch<T>>>;\n}\n\n/** @ignore */\nexport interface RecordBatchFileReader<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReader<T> {\n    readRecordBatch(index: number): RecordBatch<T> | null;\n}\n\n/** @ignore */\nexport interface AsyncRecordBatchFileReader<T extends { [key: string]: DataType } = any> extends AsyncRecordBatchStreamReader<T> {\n    readRecordBatch(index: number): Promise<RecordBatch<T> | null>;\n}\n\n/** @ignore */\ntype RecordBatchReaderImpls<T extends { [key: string]: DataType } = any> =\n     RecordBatchJSONReaderImpl<T> |\n     RecordBatchFileReaderImpl<T> |\n     RecordBatchStreamReaderImpl<T> |\n     AsyncRecordBatchFileReaderImpl<T> |\n     AsyncRecordBatchStreamReaderImpl<T>;\n\n/** @ignore */\ninterface RecordBatchReaderImpl<T extends { [key: string]: DataType } = any> {\n\n    closed: boolean;\n    schema: Schema<T>;\n    autoDestroy: boolean;\n    dictionaries: Map<number, Vector>;\n\n    isFile(): this is RecordBatchFileReaders<T>;\n    isStream(): this is RecordBatchStreamReaders<T>;\n    isSync(): this is RecordBatchReaders<T>;\n    isAsync(): this is AsyncRecordBatchReaders<T>;\n\n    reset(schema?: Schema<T> | null): this;\n}\n\n/** @ignore */\ninterface RecordBatchStreamReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchReaderImpl<T> {\n\n    open(options?: OpenOptions): this;\n    cancel(): void;\n\n    throw(value?: any): IteratorResult<any>;\n    return(value?: any): IteratorResult<any>;\n    next(value?: any): IteratorResult<RecordBatch<T>>;\n\n    [Symbol.iterator](): IterableIterator<RecordBatch<T>>;\n}\n\n/** @ignore */\ninterface AsyncRecordBatchStreamReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchReaderImpl<T> {\n\n    open(options?: OpenOptions): Promise<this>;\n    cancel(): Promise<void>;\n\n    throw(value?: any): Promise<IteratorResult<any>>;\n    return(value?: any): Promise<IteratorResult<any>>;\n    next(value?: any): Promise<IteratorResult<RecordBatch<T>>>;\n\n    [Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>>;\n}\n\n/** @ignore */\ninterface RecordBatchFileReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReaderImpl<T> {\n    readRecordBatch(index: number): RecordBatch<T> | null;\n}\n\n/** @ignore */\ninterface AsyncRecordBatchFileReaderImpl<T extends { [key: string]: DataType } = any> extends AsyncRecordBatchStreamReaderImpl<T> {\n    readRecordBatch(index: number): Promise<RecordBatch<T> | null>;\n}\n\n/** @ignore */\nabstract class RecordBatchReaderImpl<T extends { [key: string]: DataType } = any> implements RecordBatchReaderImpl<T> {\n\n    public schema!: Schema<T>;\n    public closed = false;\n    public autoDestroy = true;\n    public dictionaries: Map<number, Vector>;\n\n    protected _dictionaryIndex = 0;\n    protected _recordBatchIndex = 0;\n    public get numDictionaries() { return this._dictionaryIndex; }\n    public get numRecordBatches() { return this._recordBatchIndex; }\n\n    constructor(dictionaries = new Map<number, Vector>()) {\n        this.dictionaries = dictionaries;\n    }\n\n    public isSync(): this is RecordBatchReaders<T> { return false; }\n    public isAsync(): this is AsyncRecordBatchReaders<T> { return false; }\n    public isFile(): this is RecordBatchFileReaders<T> { return false; }\n    public isStream(): this is RecordBatchStreamReaders<T> { return false; }\n\n    public reset(schema?: Schema<T> | null) {\n        this._dictionaryIndex = 0;\n        this._recordBatchIndex = 0;\n        this.schema = <any> schema;\n        this.dictionaries = new Map();\n        return this;\n    }\n\n    protected _loadRecordBatch(header: metadata.RecordBatch, body: any) {\n        return new RecordBatch<T>(this.schema, header.length, this._loadVectors(header, body, this.schema.fields));\n    }\n    protected _loadDictionaryBatch(header: metadata.DictionaryBatch, body: any) {\n        const { id, isDelta, data } = header;\n        const { dictionaries, schema } = this;\n        const dictionary = dictionaries.get(id);\n        if (isDelta || !dictionary) {\n            const type = schema.dictionaries.get(id)!;\n            return (dictionary && isDelta ? dictionary.concat(\n                Vector.new(this._loadVectors(data, body, [type])[0])) :\n                Vector.new(this._loadVectors(data, body, [type])[0])) as Vector;\n        }\n        return dictionary;\n    }\n    protected _loadVectors(header: metadata.RecordBatch, body: any, types: (Field | DataType)[]) {\n        return new VectorLoader(body, header.nodes, header.buffers, this.dictionaries).visitMany(types);\n    }\n}\n\n/** @ignore */\nclass RecordBatchStreamReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchReaderImpl<T> implements IterableIterator<RecordBatch<T>> {\n\n    protected _reader: MessageReader;\n    protected _handle: ByteStream | ArrowJSONLike;\n\n    constructor(source: ByteStream | ArrowJSONLike, dictionaries?: Map<number, Vector>) {\n        super(dictionaries);\n        this._reader = !isArrowJSON(source)\n            ? new MessageReader(this._handle = source)\n            : new JSONMessageReader(this._handle = source);\n    }\n\n    public isSync(): this is RecordBatchReaders<T> { return true; }\n    public isStream(): this is RecordBatchStreamReaders<T> { return true; }\n    public [Symbol.iterator](): IterableIterator<RecordBatch<T>> {\n        return this as IterableIterator<RecordBatch<T>>;\n    }\n    public cancel() {\n        if (!this.closed && (this.closed = true)) {\n            this.reset()._reader.return();\n            this._reader = <any> null;\n            this.dictionaries = <any> null;\n        }\n    }\n    public open(options?: OpenOptions) {\n        if (!this.closed) {\n            this.autoDestroy = shouldAutoDestroy(this, options);\n            if (!(this.schema || (this.schema = this._reader.readSchema()!))) {\n                this.cancel();\n            }\n        }\n        return this;\n    }\n    public throw(value?: any): IteratorResult<any> {\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\n            return this.reset()._reader.throw(value);\n        }\n        return ITERATOR_DONE;\n    }\n    public return(value?: any): IteratorResult<any> {\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\n            return this.reset()._reader.return(value);\n        }\n        return ITERATOR_DONE;\n    }\n    public next(): IteratorResult<RecordBatch<T>> {\n        if (this.closed) { return ITERATOR_DONE; }\n        let message: Message | null;\n        const { _reader: reader } = this;\n        while (message = this._readNextMessageAndValidate()) {\n            if (message.isSchema()) {\n                this.reset(message.header());\n            } else if (message.isRecordBatch()) {\n                this._recordBatchIndex++;\n                const header = message.header();\n                const buffer = reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return { done: false, value: recordBatch };\n            } else if (message.isDictionaryBatch()) {\n                this._dictionaryIndex++;\n                const header = message.header();\n                const buffer = reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n        if (this.schema && this._recordBatchIndex === 0) {\n            this._recordBatchIndex++;\n            return { done: false, value: new _InternalEmptyPlaceholderRecordBatch<T>(this.schema) };\n        }\n        return this.return();\n    }\n    protected _readNextMessageAndValidate<T extends MessageHeader>(type?: T | null) {\n        return this._reader.readMessage<T>(type);\n    }\n}\n\n/** @ignore */\nclass AsyncRecordBatchStreamReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchReaderImpl<T> implements AsyncIterableIterator<RecordBatch<T>> {\n\n    protected _handle: AsyncByteStream;\n    protected _reader: AsyncMessageReader;\n\n    constructor(source: AsyncByteStream, dictionaries?: Map<number, Vector>) {\n        super(dictionaries);\n        this._reader = new AsyncMessageReader(this._handle = source);\n    }\n    public isAsync(): this is AsyncRecordBatchReaders<T> { return true; }\n    public isStream(): this is RecordBatchStreamReaders<T> { return true; }\n    public [Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>> {\n        return this as AsyncIterableIterator<RecordBatch<T>>;\n    }\n    public async cancel() {\n        if (!this.closed && (this.closed = true)) {\n            await this.reset()._reader.return();\n            this._reader = <any> null;\n            this.dictionaries = <any> null;\n        }\n    }\n    public async open(options?: OpenOptions) {\n        if (!this.closed) {\n            this.autoDestroy = shouldAutoDestroy(this, options);\n            if (!(this.schema || (this.schema = (await this._reader.readSchema())!))) {\n                await this.cancel();\n            }\n        }\n        return this;\n    }\n    public async throw(value?: any): Promise<IteratorResult<any>> {\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\n            return await this.reset()._reader.throw(value);\n        }\n        return ITERATOR_DONE;\n    }\n    public async return(value?: any): Promise<IteratorResult<any>> {\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\n            return await this.reset()._reader.return(value);\n        }\n        return ITERATOR_DONE;\n    }\n    public async next() {\n        if (this.closed) { return ITERATOR_DONE; }\n        let message: Message | null;\n        const { _reader: reader } = this;\n        while (message = await this._readNextMessageAndValidate()) {\n            if (message.isSchema()) {\n                await this.reset(message.header());\n            } else if (message.isRecordBatch()) {\n                this._recordBatchIndex++;\n                const header = message.header();\n                const buffer = await reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return { done: false, value: recordBatch };\n            } else if (message.isDictionaryBatch()) {\n                this._dictionaryIndex++;\n                const header = message.header();\n                const buffer = await reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n        if (this.schema && this._recordBatchIndex === 0) {\n            this._recordBatchIndex++;\n            return { done: false, value: new _InternalEmptyPlaceholderRecordBatch<T>(this.schema) };\n        }\n        return await this.return();\n    }\n    protected async _readNextMessageAndValidate<T extends MessageHeader>(type?: T | null) {\n        return await this._reader.readMessage<T>(type);\n    }\n}\n\n/** @ignore */\nclass RecordBatchFileReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReaderImpl<T> {\n\n    protected _footer?: Footer;\n    protected _handle!: RandomAccessFile;\n    public get footer() { return this._footer!; }\n    public get numDictionaries() { return this._footer ? this._footer.numDictionaries : 0; }\n    public get numRecordBatches() { return this._footer ? this._footer.numRecordBatches : 0; }\n\n    constructor(source: RandomAccessFile | ArrayBufferViewInput, dictionaries?: Map<number, Vector>) {\n        super(source instanceof RandomAccessFile ? source : new RandomAccessFile(source), dictionaries);\n    }\n    public isSync(): this is RecordBatchReaders<T> { return true; }\n    public isFile(): this is RecordBatchFileReaders<T> { return true; }\n    public open(options?: OpenOptions) {\n        if (!this.closed && !this._footer) {\n            this.schema = (this._footer = this._readFooter()).schema;\n            for (const block of this._footer.dictionaryBatches()) {\n                block && this._readDictionaryBatch(this._dictionaryIndex++);\n            }\n        }\n        return super.open(options);\n    }\n    public readRecordBatch(index: number) {\n        if (this.closed) { return null; }\n        if (!this._footer) { this.open(); }\n        const block = this._footer && this._footer.getRecordBatch(index);\n        if (block && this._handle.seek(block.offset)) {\n            const message = this._reader.readMessage(MessageHeader.RecordBatch);\n            if (message && message.isRecordBatch()) {\n                const header = message.header();\n                const buffer = this._reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return recordBatch;\n            }\n        }\n        return null;\n    }\n    protected _readDictionaryBatch(index: number) {\n        const block = this._footer && this._footer.getDictionaryBatch(index);\n        if (block && this._handle.seek(block.offset)) {\n            const message = this._reader.readMessage(MessageHeader.DictionaryBatch);\n            if (message && message.isDictionaryBatch()) {\n                const header = message.header();\n                const buffer = this._reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n    }\n    protected _readFooter() {\n        const { _handle } = this;\n        const offset = _handle.size - magicAndPadding;\n        const length = _handle.readInt32(offset);\n        const buffer = _handle.readAt(offset - length, length);\n        return Footer.decode(buffer);\n    }\n    protected _readNextMessageAndValidate<T extends MessageHeader>(type?: T | null): Message<T> | null {\n        if (!this._footer) { this.open(); }\n        if (this._footer && this._recordBatchIndex < this.numRecordBatches) {\n            const block = this._footer && this._footer.getRecordBatch(this._recordBatchIndex);\n            if (block && this._handle.seek(block.offset)) {\n                return this._reader.readMessage(type);\n            }\n        }\n        return null;\n    }\n}\n\n/** @ignore */\nclass AsyncRecordBatchFileReaderImpl<T extends { [key: string]: DataType } = any> extends AsyncRecordBatchStreamReaderImpl<T>\n    implements AsyncRecordBatchFileReaderImpl<T> {\n\n    protected _footer?: Footer;\n    protected _handle!: AsyncRandomAccessFile;\n    public get footer() { return this._footer!; }\n    public get numDictionaries() { return this._footer ? this._footer.numDictionaries : 0; }\n    public get numRecordBatches() { return this._footer ? this._footer.numRecordBatches : 0; }\n\n    constructor(source: FileHandle, byteLength?: number, dictionaries?: Map<number, Vector>);\n    constructor(source: FileHandle | AsyncRandomAccessFile, dictionaries?: Map<number, Vector>);\n    constructor(source: FileHandle | AsyncRandomAccessFile, ...rest: any[]) {\n        const byteLength = typeof rest[0] !== 'number' ? <number> rest.shift() : undefined;\n        const dictionaries = rest[0] instanceof Map ? <Map<number, Vector>> rest.shift() : undefined;\n        super(source instanceof AsyncRandomAccessFile ? source : new AsyncRandomAccessFile(source, byteLength), dictionaries);\n    }\n    public isFile(): this is RecordBatchFileReaders<T> { return true; }\n    public isAsync(): this is AsyncRecordBatchReaders<T> { return true; }\n    public async open(options?: OpenOptions) {\n        if (!this.closed && !this._footer) {\n            this.schema = (this._footer = await this._readFooter()).schema;\n            for (const block of this._footer.dictionaryBatches()) {\n                block && await this._readDictionaryBatch(this._dictionaryIndex++);\n            }\n        }\n        return await super.open(options);\n    }\n    public async readRecordBatch(index: number) {\n        if (this.closed) { return null; }\n        if (!this._footer) { await this.open(); }\n        const block = this._footer && this._footer.getRecordBatch(index);\n        if (block && (await this._handle.seek(block.offset))) {\n            const message = await this._reader.readMessage(MessageHeader.RecordBatch);\n            if (message && message.isRecordBatch()) {\n                const header = message.header();\n                const buffer = await this._reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return recordBatch;\n            }\n        }\n        return null;\n    }\n    protected async _readDictionaryBatch(index: number) {\n        const block = this._footer && this._footer.getDictionaryBatch(index);\n        if (block && (await this._handle.seek(block.offset))) {\n            const message = await this._reader.readMessage(MessageHeader.DictionaryBatch);\n            if (message && message.isDictionaryBatch()) {\n                const header = message.header();\n                const buffer = await this._reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n    }\n    protected async _readFooter() {\n        const { _handle } = this;\n        _handle._pending && await _handle._pending;\n        const offset = _handle.size - magicAndPadding;\n        const length = await _handle.readInt32(offset);\n        const buffer = await _handle.readAt(offset - length, length);\n        return Footer.decode(buffer);\n    }\n    protected async _readNextMessageAndValidate<T extends MessageHeader>(type?: T | null): Promise<Message<T> | null> {\n        if (!this._footer) { await this.open(); }\n        if (this._footer && this._recordBatchIndex < this.numRecordBatches) {\n            const block = this._footer.getRecordBatch(this._recordBatchIndex);\n            if (block && await this._handle.seek(block.offset)) {\n                return await this._reader.readMessage(type);\n            }\n        }\n        return null;\n    }\n}\n\n/** @ignore */\nclass RecordBatchJSONReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReaderImpl<T> {\n    constructor(source: ArrowJSONLike, dictionaries?: Map<number, Vector>) {\n        super(source, dictionaries);\n    }\n    protected _loadVectors(header: metadata.RecordBatch, body: any, types: (Field | DataType)[]) {\n        return new JSONVectorLoader(body, header.nodes, header.buffers, this.dictionaries).visitMany(types);\n    }\n}\n\n//\n// Define some helper functions and static implementations down here. There's\n// a bit of branching in the static methods that can lead to the same routines\n// being executed, so we've broken those out here for readability.\n//\n\n/** @ignore */\nfunction shouldAutoDestroy(self: { autoDestroy: boolean }, options?: OpenOptions) {\n    return options && (typeof options['autoDestroy'] === 'boolean') ? options['autoDestroy'] : self['autoDestroy'];\n}\n\n/** @ignore */\nfunction* readAllSync<T extends { [key: string]: DataType } = any>(source: RecordBatchReaders<T> | FromArg0 | FromArg2) {\n    const reader = RecordBatchReader.from<T>(<any> source) as RecordBatchReaders<T>;\n    try {\n        if (!reader.open({ autoDestroy: false }).closed) {\n            do { yield reader; } while (!(reader.reset().open()).closed);\n        }\n    } finally { reader.cancel(); }\n}\n\n/** @ignore */\nasync function* readAllAsync<T extends { [key: string]: DataType } = any>(source: AsyncRecordBatchReaders<T> | FromArg1 | FromArg3 | FromArg4 | FromArg5) {\n    const reader = await RecordBatchReader.from<T>(<any> source) as RecordBatchReader<T>;\n    try {\n        if (!(await reader.open({ autoDestroy: false })).closed) {\n            do { yield reader; } while (!(await reader.reset().open()).closed);\n        }\n    } finally { await reader.cancel(); }\n}\n\n/** @ignore */\nfunction fromArrowJSON<T extends { [key: string]: DataType }>(source: ArrowJSONLike) {\n    return new RecordBatchStreamReader(new RecordBatchJSONReaderImpl<T>(source));\n}\n\n/** @ignore */\nfunction fromByteStream<T extends { [key: string]: DataType }>(source: ByteStream) {\n    const bytes = source.peek((magicLength + 7) & ~7);\n    return bytes && bytes.byteLength >= 4 ? !checkForMagicArrowString(bytes)\n        ? new RecordBatchStreamReader(new RecordBatchStreamReaderImpl<T>(source))\n        : new RecordBatchFileReader(new RecordBatchFileReaderImpl<T>(source.read()))\n        : new RecordBatchStreamReader(new RecordBatchStreamReaderImpl<T>(function*(): any {}()));\n}\n\n/** @ignore */\nasync function fromAsyncByteStream<T extends { [key: string]: DataType }>(source: AsyncByteStream) {\n    const bytes = await source.peek((magicLength + 7) & ~7);\n    return bytes && bytes.byteLength >= 4 ? !checkForMagicArrowString(bytes)\n        ? new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl<T>(source))\n        : new RecordBatchFileReader(new RecordBatchFileReaderImpl<T>(await source.read()))\n        : new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl<T>(async function*(): any {}()));\n}\n\n/** @ignore */\nasync function fromFileHandle<T extends { [key: string]: DataType }>(source: FileHandle) {\n    const { size } = await source.stat();\n    const file = new AsyncRandomAccessFile(source, size);\n    if (size >= magicX2AndPadding) {\n        if (checkForMagicArrowString(await file.readAt(0, (magicLength + 7) & ~7))) {\n            return new AsyncRecordBatchFileReader(new AsyncRecordBatchFileReaderImpl<T>(file));\n        }\n    }\n    return new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl<T>(file));\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { DataType } from '../../type';\nimport { Vector } from '../../vector';\nimport { VectorType as V } from '../../interfaces';\nimport { Builder, BuilderOptions } from '../../builder/index';\n\n/** @ignore */\nexport interface BuilderTransformOptions<T extends DataType = any, TNull = any> extends BuilderOptions<T, TNull> {\n    queueingStrategy?: 'bytes' | 'count';\n    dictionaryHashFunction?: (value: any) => string | number;\n    readableStrategy?: { highWaterMark?: number; size?: any; type?: 'bytes' };\n    writableStrategy?: { highWaterMark?: number; size?: any; type?: 'bytes' };\n    valueToChildTypeId?: (builder: Builder<T, TNull>, value: any, offset: number) => number;\n}\n\n/** @ignore */\nexport function builderThroughDOMStream<T extends DataType = any, TNull = any>(options: BuilderTransformOptions<T, TNull>) {\n    return new BuilderTransform(options);\n}\n\n/** @ignore */\nexport class BuilderTransform<T extends DataType = any, TNull = any> {\n\n    public readable: ReadableStream<V<T>>;\n    public writable: WritableStream<T['TValue'] | TNull>;\n    public _controller: ReadableStreamDefaultController<V<T>> | null;\n\n    private _numChunks = 0;\n    private _finished = false;\n    private _bufferedSize = 0;\n    private _builder: Builder<T, TNull>;\n    private _getSize: (builder: Builder<T, TNull>) => number;\n\n    constructor(options: BuilderTransformOptions<T, TNull>) {\n\n        // Access properties by string indexers to defeat closure compiler\n\n        const {\n            ['readableStrategy']: readableStrategy,\n            ['writableStrategy']: writableStrategy,\n            ['queueingStrategy']: queueingStrategy = 'count',\n            ...builderOptions\n        } = options;\n\n        this._controller = null;\n        this._builder = Builder.new<T, TNull>(builderOptions);\n        this._getSize = queueingStrategy !== 'bytes' ? chunkLength : chunkByteLength;\n\n        const { ['highWaterMark']: readableHighWaterMark = queueingStrategy === 'bytes' ? 2 ** 14 : 1000 } = { ...readableStrategy };\n        const { ['highWaterMark']: writableHighWaterMark = queueingStrategy === 'bytes' ? 2 ** 14 : 1000 } = { ...writableStrategy };\n\n        this['readable'] = new ReadableStream<V<T>>({\n            ['cancel']: ()  => { this._builder.clear(); },\n            ['pull']: (c) => { this._maybeFlush(this._builder, this._controller = c); },\n            ['start']: (c) => { this._maybeFlush(this._builder, this._controller = c); },\n        }, {\n            'highWaterMark': readableHighWaterMark,\n            'size': queueingStrategy !== 'bytes' ? chunkLength : chunkByteLength,\n        });\n\n        this['writable'] = new WritableStream({\n            ['abort']: () => { this._builder.clear(); },\n            ['write']: () => { this._maybeFlush(this._builder, this._controller); },\n            ['close']: () => { this._maybeFlush(this._builder.finish(), this._controller); },\n        }, {\n            'highWaterMark': writableHighWaterMark,\n            'size': (value: T['TValue'] | TNull) => this._writeValueAndReturnChunkSize(value),\n        });\n    }\n\n    private _writeValueAndReturnChunkSize(value: T['TValue'] | TNull) {\n        const bufferedSize = this._bufferedSize;\n        this._bufferedSize = this._getSize(this._builder.append(value));\n        return this._bufferedSize - bufferedSize;\n    }\n\n    private _maybeFlush(builder: Builder<T, TNull>, controller: ReadableStreamDefaultController<V<T>> | null) {\n        if (controller === null) { return; }\n        if (this._bufferedSize >= controller.desiredSize!) {\n            ++this._numChunks && this._enqueue(controller, builder.toVector());\n        }\n        if (builder.finished) {\n            if (builder.length > 0 || this._numChunks === 0) {\n                ++this._numChunks && this._enqueue(controller, builder.toVector());\n            }\n            if (!this._finished && (this._finished = true)) {\n                this._enqueue(controller, null);\n            }\n        }\n    }\n\n    private _enqueue(controller: ReadableStreamDefaultController<V<T>>, chunk: V<T> | null) {\n        this._bufferedSize = 0;\n        this._controller = null;\n        chunk === null ? controller.close() : controller.enqueue(chunk);\n    }\n}\n\n/** @ignore */ const chunkLength = <T extends DataType = any>(chunk: Vector<T> | Builder<T>) => chunk.length;\n/** @ignore */ const chunkByteLength = <T extends DataType = any>(chunk: Vector<T> | Builder<T>) => chunk.byteLength;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { DataType } from '../../type';\nimport { RecordBatch } from '../../recordbatch';\nimport { AsyncByteQueue } from '../../io/stream';\nimport { RecordBatchReader } from '../../ipc/reader';\n\n/** @ignore */\nexport function recordBatchReaderThroughDOMStream<T extends { [key: string]: DataType } = any>(writableStrategy?: ByteLengthQueuingStrategy, readableStrategy?: { autoDestroy: boolean }) {\n\n    const queue = new AsyncByteQueue();\n    let reader: RecordBatchReader<T> | null = null;\n\n    const readable = new ReadableStream<RecordBatch<T>>({\n        async cancel() { await queue.close(); },\n        async start(controller) { await next(controller, reader || (reader = await open())); },\n        async pull(controller) { reader ? await next(controller, reader) : controller.close(); }\n    });\n\n    return { writable: new WritableStream(queue, { 'highWaterMark': 2 ** 14, ...writableStrategy }), readable };\n\n    async function open() {\n        return await (await RecordBatchReader.from<T>(queue)).open(readableStrategy);\n    }\n\n    async function next(controller: ReadableStreamDefaultController<RecordBatch<T>>, reader: RecordBatchReader<T>) {\n        let size = controller.desiredSize;\n        let r: IteratorResult<RecordBatch<T>> | null = null;\n        while (!(r = await reader.next()).done) {\n            controller.enqueue(r.value);\n            if (size != null && --size <= 0) {\n                return;\n            }\n        }\n        controller.close();\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { DataType } from '../../type';\nimport { RecordBatch } from '../../recordbatch';\nimport { AsyncByteStream } from '../../io/stream';\nimport { RecordBatchWriter } from '../../ipc/writer';\n\n/** @ignore */\nexport function recordBatchWriterThroughDOMStream<T extends { [key: string]: DataType } = any>(\n    this: typeof RecordBatchWriter,\n    writableStrategy?: QueuingStrategy<RecordBatch<T>> & { autoDestroy: boolean },\n    readableStrategy?: { highWaterMark?: number; size?: any }\n) {\n\n    const writer = new this<T>(writableStrategy);\n    const reader = new AsyncByteStream(writer);\n    const readable = new ReadableStream({\n        type: 'bytes',\n        async cancel() { await reader.cancel(); },\n        async pull(controller) { await next(controller); },\n        async start(controller) { await next(controller); },\n    }, { 'highWaterMark': 2 ** 14, ...readableStrategy });\n\n    return { writable: new WritableStream(writer, writableStrategy), readable };\n\n    async function next(controller: ReadableStreamDefaultController<Uint8Array>) {\n        let buf: Uint8Array | null = null;\n        let size = controller.desiredSize;\n        while (buf = await reader.read(size || null)) {\n            controller.enqueue(buf);\n            if (size != null && (size -= buf.byteLength) <= 0) { return; }\n        }\n        controller.close();\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { RecordBatch } from '../recordbatch';\nimport { DictionaryVector } from '../vector/dictionary';\n\n/** @ignore */\nexport type ValueFunc<T> = (idx: number, cols: RecordBatch) => T | null;\n/** @ignore */\nexport type PredicateFunc = (idx: number, cols: RecordBatch) => boolean;\n\n/** @ignore */\nexport abstract class Value<T> {\n    eq(other: Value<T> | T): Predicate {\n        if (!(other instanceof Value)) { other = new Literal(other); }\n        return new Equals(this, other);\n    }\n    le(other: Value<T> | T): Predicate {\n        if (!(other instanceof Value)) { other = new Literal(other); }\n        return new LTeq(this, other);\n    }\n    ge(other: Value<T> | T): Predicate {\n        if (!(other instanceof Value)) { other = new Literal(other); }\n        return new GTeq(this, other);\n    }\n    lt(other: Value<T> | T): Predicate {\n        return new Not(this.ge(other));\n    }\n    gt(other: Value<T> | T): Predicate {\n        return new Not(this.le(other));\n    }\n    ne(other: Value<T> | T): Predicate {\n        return new Not(this.eq(other));\n    }\n}\n\n/** @ignore */\nexport class Literal<T= any> extends Value<T> {\n    constructor(public v: T) { super(); }\n}\n\n/** @ignore */\nexport class Col<T= any> extends Value<T> {\n    public vector!: Vector;\n    public colidx!: number;\n\n    constructor(public name: string) { super(); }\n    bind(batch: RecordBatch): (idx: number, batch?: RecordBatch) => any {\n        if (!this.colidx) {\n            // Assume column index doesn't change between calls to bind\n            //this.colidx = cols.findIndex(v => v.name.indexOf(this.name) != -1);\n            this.colidx = -1;\n            const fields = batch.schema.fields;\n            for (let idx = -1; ++idx < fields.length;) {\n                if (fields[idx].name === this.name) {\n                    this.colidx = idx;\n                    break;\n                }\n            }\n            if (this.colidx < 0) { throw new Error(`Failed to bind Col \"${this.name}\"`); }\n        }\n\n        const vec = this.vector = batch.getChildAt(this.colidx)!;\n        return (idx: number) => vec.get(idx);\n    }\n}\n\n/** @ignore */\nexport abstract class Predicate {\n    abstract bind(batch: RecordBatch): PredicateFunc;\n    and(...expr: Predicate[]): And { return new And(this, ...expr); }\n    or(...expr: Predicate[]): Or { return new Or(this, ...expr); }\n    not(): Predicate { return new Not(this); }\n}\n\n/** @ignore */\nexport abstract class ComparisonPredicate<T= any> extends Predicate {\n    constructor(public readonly left: Value<T>, public readonly right: Value<T>) {\n        super();\n    }\n\n    bind(batch: RecordBatch) {\n        if (this.left instanceof Literal) {\n            if (this.right instanceof Literal) {\n                return this._bindLitLit(batch, this.left, this.right);\n            } else { // right is a Col\n\n                return this._bindLitCol(batch, this.left, this.right as Col);\n            }\n        } else { // left is a Col\n            if (this.right instanceof Literal) {\n                return this._bindColLit(batch, this.left as Col, this.right);\n            } else { // right is a Col\n                return this._bindColCol(batch, this.left as Col, this.right as Col);\n            }\n        }\n    }\n\n    protected abstract _bindLitLit(batch: RecordBatch, left: Literal, right: Literal): PredicateFunc;\n    protected abstract _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc;\n    protected abstract _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc;\n    protected abstract _bindLitCol(batch: RecordBatch, lit: Literal, col: Col): PredicateFunc;\n}\n\n/** @ignore */\nexport abstract class CombinationPredicate extends Predicate {\n    readonly children: Predicate[];\n    constructor(...children: Predicate[]) {\n        super();\n        this.children = children;\n    }\n}\n// add children to prototype so it doesn't get mangled in es2015/umd\n(<any> CombinationPredicate.prototype).children = Object.freeze([]); // freeze for safety\n\n/** @ignore */\nexport class And extends CombinationPredicate {\n    constructor(...children: Predicate[]) {\n        // Flatten any Ands\n        children = children.reduce((accum: Predicate[], p: Predicate): Predicate[] => {\n            return accum.concat(p instanceof And ? p.children : p);\n        }, []);\n        super(...children);\n    }\n    bind(batch: RecordBatch) {\n        const bound = this.children.map((p) => p.bind(batch));\n        return (idx: number, batch: RecordBatch) => bound.every((p) => p(idx, batch));\n    }\n}\n\n/** @ignore */\nexport class Or extends CombinationPredicate {\n    constructor(...children: Predicate[]) {\n        // Flatten any Ors\n        children = children.reduce((accum: Predicate[], p: Predicate): Predicate[] => {\n            return accum.concat(p instanceof Or ? p.children : p);\n        }, []);\n        super(...children);\n    }\n    bind(batch: RecordBatch) {\n        const bound = this.children.map((p) => p.bind(batch));\n        return (idx: number, batch: RecordBatch) => bound.some((p) => p(idx, batch));\n    }\n}\n\n/** @ignore */\nexport class Equals extends ComparisonPredicate {\n    // Helpers used to cache dictionary reverse lookups between calls to bind\n    private lastDictionary: Vector|undefined;\n    private lastKey: number|undefined;\n\n    protected _bindLitLit(_batch: RecordBatch, left: Literal, right: Literal): PredicateFunc {\n        const rtrn: boolean = left.v == right.v;\n        return () => rtrn;\n    }\n\n    protected _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx: number, batch: RecordBatch) => left_func(idx, batch) == right_func(idx, batch);\n    }\n\n    protected _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc {\n        const col_func = col.bind(batch);\n        if (col.vector instanceof DictionaryVector) {\n            let key: any;\n            const vector = col.vector as DictionaryVector;\n            if (vector.dictionary !== this.lastDictionary) {\n                key = vector.reverseLookup(lit.v);\n                this.lastDictionary = vector.dictionary;\n                this.lastKey = key;\n            } else {\n                key = this.lastKey;\n            }\n\n            if (key === -1) {\n                // the value doesn't exist in the dictionary - always return\n                // false\n                // TODO: special-case of PredicateFunc that encapsulates this\n                // \"always false\" behavior. That way filtering operations don't\n                // have to bother checking\n                return () => false;\n            } else {\n                return (idx: number) => {\n                    return vector.getKey(idx) === key;\n                };\n            }\n        } else {\n            return (idx: number, cols: RecordBatch) => col_func(idx, cols) == lit.v;\n        }\n    }\n\n    protected _bindLitCol(batch: RecordBatch, lit: Literal, col: Col) {\n        // Equals is commutative\n        return this._bindColLit(batch, col, lit);\n    }\n}\n\n/** @ignore */\nexport class LTeq extends ComparisonPredicate {\n    protected _bindLitLit(_batch: RecordBatch, left: Literal, right: Literal): PredicateFunc {\n        const rtrn: boolean = left.v <= right.v;\n        return () => rtrn;\n    }\n\n    protected _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx: number, cols: RecordBatch) => left_func(idx, cols) <= right_func(idx, cols);\n    }\n\n    protected _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => col_func(idx, cols) <= lit.v;\n    }\n\n    protected _bindLitCol(batch: RecordBatch, lit: Literal, col: Col) {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => lit.v <= col_func(idx, cols);\n    }\n}\n\n/** @ignore */\nexport class GTeq extends ComparisonPredicate {\n    protected _bindLitLit(_batch: RecordBatch, left: Literal, right: Literal): PredicateFunc {\n        const rtrn: boolean = left.v >= right.v;\n        return () => rtrn;\n    }\n\n    protected _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx: number, cols: RecordBatch) => left_func(idx, cols) >= right_func(idx, cols);\n    }\n\n    protected _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => col_func(idx, cols) >= lit.v;\n    }\n\n    protected _bindLitCol(batch: RecordBatch, lit: Literal, col: Col) {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => lit.v >= col_func(idx, cols);\n    }\n}\n\n/** @ignore */\nexport class Not extends Predicate {\n    constructor(public readonly child: Predicate) {\n        super();\n    }\n\n    bind(batch: RecordBatch) {\n        const func = this.child.bind(batch);\n        return (idx: number, batch: RecordBatch) => !func(idx, batch);\n    }\n}\n\n/** @ignore */\nexport class CustomPredicate extends Predicate {\n    constructor(private next: PredicateFunc, private bind_: (batch: RecordBatch) => void) {\n        super();\n    }\n\n    bind(batch: RecordBatch) {\n        this.bind_(batch);\n        return this.next;\n    }\n}\n\nexport function lit(v: any): Value<any> { return new Literal(v); }\nexport function col(n: string): Col<any> { return new Col(n); }\nexport function and(...p: Predicate[]): And { return new And(...p); }\nexport function or(...p: Predicate[]): Or { return new Or(...p); }\nexport function custom(next: PredicateFunc, bind: (batch: RecordBatch) => void) {\n    return new CustomPredicate(next, bind);\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Table } from '../table';\nimport { Vector } from '../vector';\nimport { IntVector } from '../vector/int';\nimport { Field, Schema } from '../schema';\nimport { Predicate, Col, PredicateFunc } from './predicate';\nimport { RecordBatch } from '../recordbatch';\nimport { VectorType as V } from '../interfaces';\nimport { DataType, Int, Struct, Dictionary } from '../type';\n\n/** @ignore */\nexport type BindFunc = (batch: RecordBatch) => void;\n/** @ignore */\nexport type NextFunc = (idx: number, batch: RecordBatch) => void;\n\nTable.prototype.countBy = function(this: Table, name: Col | string) { return new DataFrame(this.chunks).countBy(name); };\nTable.prototype.scan = function(this: Table, next: NextFunc, bind?: BindFunc) { return new DataFrame(this.chunks).scan(next, bind); };\nTable.prototype.scanReverse = function(this: Table, next: NextFunc, bind?: BindFunc) { return new DataFrame(this.chunks).scanReverse(next, bind); };\nTable.prototype.filter = function(this: Table, predicate: Predicate): FilteredDataFrame { return new DataFrame(this.chunks).filter(predicate); };\n\nexport class DataFrame<T extends { [key: string]: DataType } = any> extends Table<T> {\n    public filter(predicate: Predicate): FilteredDataFrame<T> {\n        return new FilteredDataFrame<T>(this.chunks, predicate);\n    }\n    public scan(next: NextFunc, bind?: BindFunc) {\n        const batches = this.chunks, numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            if (bind) { bind(batch); }\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                next(index, batch);\n            }\n        }\n    }\n    public scanReverse(next: NextFunc, bind?: BindFunc) {\n        const batches = this.chunks, numBatches = batches.length;\n        for (let batchIndex = numBatches; --batchIndex >= 0;) {\n            // load batches\n            const batch = batches[batchIndex];\n            if (bind) { bind(batch); }\n            // yield all indices\n            for (let index = batch.length; --index >= 0;) {\n                next(index, batch);\n            }\n        }\n    }\n    public countBy(name: Col | string) {\n        const batches = this.chunks, numBatches = batches.length;\n        const count_by = typeof name === 'string' ? new Col(name) : name as Col;\n        // Assume that all dictionary batches are deltas, which means that the\n        // last record batch has the most complete dictionary\n        count_by.bind(batches[numBatches - 1]);\n        const vector = count_by.vector as V<Dictionary>;\n        if (!DataType.isDictionary(vector.type)) {\n            throw new Error('countBy currently only supports dictionary-encoded columns');\n        }\n\n        const countByteLength = Math.ceil(Math.log(vector.length) / Math.log(256));\n        const CountsArrayType = countByteLength == 4 ? Uint32Array :\n                                countByteLength >= 2 ? Uint16Array : Uint8Array;\n\n        const counts = new CountsArrayType(vector.dictionary.length);\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            // rebind the countBy Col\n            count_by.bind(batch);\n            const keys = (count_by.vector as V<Dictionary>).indices;\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                const key = keys.get(index);\n                if (key !== null) { counts[key]++; }\n            }\n        }\n        return new CountByResult(vector.dictionary, IntVector.from(counts));\n    }\n}\n\n/** @ignore */\nexport class CountByResult<T extends DataType = any, TCount extends Int = Int> extends Table<{ values: T;  counts: TCount }> {\n    constructor(values: Vector<T>, counts: V<TCount>) {\n        type R = { values: T; counts: TCount };\n        const schema = new Schema<R>([\n            new Field('values', values.type),\n            new Field('counts', counts.type)\n        ]);\n        super(new RecordBatch<R>(schema, counts.length, [values, counts]));\n    }\n    public toJSON(): Record<string, unknown> {\n        const values = this.getColumnAt(0)!;\n        const counts = this.getColumnAt(1)!;\n        const result = {} as { [k: string]: number | null };\n        for (let i = -1; ++i < this.length;) {\n            result[values.get(i)] = counts.get(i);\n        }\n        return result;\n    }\n}\n\n/** @ignore */\nclass FilteredBatchIterator<T extends { [key: string]: DataType }> implements IterableIterator<Struct<T>['TValue']> {\n    private batchIndex = 0;\n    private batch: RecordBatch<T>;\n    private index = 0;\n    private predicateFunc: PredicateFunc;\n\n    constructor(\n        private batches: RecordBatch<T>[],\n        private predicate: Predicate\n    ) {\n        // TODO: bind batches lazily\n        // If predicate doesn't match anything in the batch we don't need\n        // to bind the callback\n        this.batch = this.batches[this.batchIndex];\n        this.predicateFunc = this.predicate.bind(this.batch);\n    }\n\n    next(): IteratorResult<Struct<T>['TValue']> {\n        while (this.batchIndex < this.batches.length) {\n            while (this.index < this.batch.length) {\n                if (this.predicateFunc(this.index, this.batch)) {\n                    return {\n                        value: this.batch.get(this.index++) as any,\n                    };\n                }\n                this.index++;\n            }\n\n            if (++this.batchIndex < this.batches.length) {\n                this.index = 0;\n                this.batch = this.batches[this.batchIndex];\n                this.predicateFunc = this.predicate.bind(this.batch);\n            }\n        }\n\n        return {done: true, value: null};\n    }\n\n    [Symbol.iterator]() {\n        return this;\n    }\n}\n\n/** @ignore */\nexport class FilteredDataFrame<T extends { [key: string]: DataType } = any> extends DataFrame<T> {\n    private _predicate: Predicate;\n    constructor (batches: RecordBatch<T>[], predicate: Predicate) {\n        super(batches);\n        this._predicate = predicate;\n    }\n    public scan(next: NextFunc, bind?: BindFunc) {\n        // inlined version of this:\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) next(idx, columns);\n        // });\n        const batches = this._chunks;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this._predicate.bind(batch);\n            let isBound = false;\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) {\n                    // bind batches lazily - if predicate doesn't match anything\n                    // in the batch we don't need to call bind on the batch\n                    if (bind && !isBound) {\n                        bind(batch);\n                        isBound = true;\n                    }\n                    next(index, batch);\n                }\n            }\n        }\n    }\n    public scanReverse(next: NextFunc, bind?: BindFunc) {\n        const batches = this._chunks;\n        const numBatches = batches.length;\n        for (let batchIndex = numBatches; --batchIndex >= 0;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this._predicate.bind(batch);\n            let isBound = false;\n            // yield all indices\n            for (let index = batch.length; --index >= 0;) {\n                if (predicate(index, batch)) {\n                    // bind batches lazily - if predicate doesn't match anything\n                    // in the batch we don't need to call bind on the batch\n                    if (bind && !isBound) {\n                        bind(batch);\n                        isBound = true;\n                    }\n                    next(index, batch);\n                }\n            }\n        }\n    }\n    public count(): number {\n        // inlined version of this:\n        // let sum = 0;\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) ++sum;\n        // });\n        // return sum;\n        let sum = 0;\n        const batches = this._chunks;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this._predicate.bind(batch);\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) { ++sum; }\n            }\n        }\n        return sum;\n    }\n\n    public [Symbol.iterator](): IterableIterator<Struct<T>['TValue']> {\n        // inlined version of this:\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) next(idx, columns);\n        // });\n        return new FilteredBatchIterator<T>(this._chunks, this._predicate);\n    }\n    public filter(predicate: Predicate): FilteredDataFrame<T> {\n        return new FilteredDataFrame<T>(\n            this._chunks,\n            this._predicate.and(predicate)\n        );\n    }\n    public countBy(name: Col | string) {\n        const batches = this._chunks, numBatches = batches.length;\n        const count_by = typeof name === 'string' ? new Col(name) : name as Col;\n        // Assume that all dictionary batches are deltas, which means that the\n        // last record batch has the most complete dictionary\n        count_by.bind(batches[numBatches - 1]);\n        const vector = count_by.vector as V<Dictionary>;\n        if (!DataType.isDictionary(vector.type)) {\n            throw new Error('countBy currently only supports dictionary-encoded columns');\n        }\n\n        const countByteLength = Math.ceil(Math.log(vector.length) / Math.log(256));\n        const CountsArrayType = countByteLength == 4 ? Uint32Array :\n                                countByteLength >= 2 ? Uint16Array : Uint8Array;\n\n        const counts = new CountsArrayType(vector.dictionary.length);\n\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this._predicate.bind(batch);\n            // rebind the countBy Col\n            count_by.bind(batch);\n            const keys = (count_by.vector as V<Dictionary>).indices;\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                const key = keys.get(index);\n                if (key !== null && predicate(index, batch)) { counts[key]++; }\n            }\n        }\n        return new CountByResult(vector.dictionary, IntVector.from(counts));\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nexport {\n    DateUnit,\n    TimeUnit,\n    Precision,\n    UnionMode,\n    IntervalUnit,\n    MetadataVersion,\n} from './fb/Schema';\n\nexport { MessageHeader } from './fb/Message';\n\nexport { Type, BufferType } from './enum';\n\nexport { Data } from './data';\nexport {\n    DataType,\n    Null,\n    Bool,\n    Int, Int8, Int16, Int32, Int64, Uint8, Uint16, Uint32, Uint64,\n    Float, Float16, Float32, Float64,\n    Utf8,\n    Binary,\n    FixedSizeBinary,\n    Date_, DateDay, DateMillisecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Decimal,\n    List,\n    Struct,\n    Union, DenseUnion, SparseUnion,\n    Dictionary,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    FixedSizeList,\n    Map_,\n} from './type';\n\nexport { Table } from './table';\nexport { Column } from './column';\nexport { Visitor } from './visitor';\nexport { Schema, Field } from './schema';\nexport {\n    Vector,\n    BaseVector,\n    BinaryVector,\n    BoolVector,\n    Chunked,\n    DateVector, DateDayVector, DateMillisecondVector,\n    DecimalVector,\n    DictionaryVector,\n    FixedSizeBinaryVector,\n    FixedSizeListVector,\n    FloatVector, Float16Vector, Float32Vector, Float64Vector,\n    IntervalVector, IntervalDayTimeVector, IntervalYearMonthVector,\n    IntVector, Int8Vector, Int16Vector, Int32Vector, Int64Vector, Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector,\n    ListVector,\n    MapVector,\n    NullVector,\n    StructVector,\n    TimestampVector, TimestampSecondVector, TimestampMillisecondVector, TimestampMicrosecondVector, TimestampNanosecondVector,\n    TimeVector, TimeSecondVector, TimeMillisecondVector, TimeMicrosecondVector, TimeNanosecondVector,\n    UnionVector, DenseUnionVector, SparseUnionVector,\n    Utf8Vector,\n} from './vector/index';\n\nexport {\n    Builder,\n    BinaryBuilder,\n    BoolBuilder,\n    DateBuilder, DateDayBuilder, DateMillisecondBuilder,\n    DecimalBuilder,\n    DictionaryBuilder,\n    FixedSizeBinaryBuilder,\n    FixedSizeListBuilder,\n    FloatBuilder, Float16Builder, Float32Builder, Float64Builder,\n    IntervalBuilder, IntervalDayTimeBuilder, IntervalYearMonthBuilder,\n    IntBuilder, Int8Builder, Int16Builder, Int32Builder, Int64Builder, Uint8Builder, Uint16Builder, Uint32Builder, Uint64Builder,\n    ListBuilder,\n    MapBuilder,\n    NullBuilder,\n    StructBuilder,\n    TimestampBuilder, TimestampSecondBuilder, TimestampMillisecondBuilder, TimestampMicrosecondBuilder, TimestampNanosecondBuilder,\n    TimeBuilder, TimeSecondBuilder, TimeMillisecondBuilder, TimeMicrosecondBuilder, TimeNanosecondBuilder,\n    UnionBuilder, DenseUnionBuilder, SparseUnionBuilder,\n    Utf8Builder,\n} from './builder/index';\n\nexport { ByteStream, AsyncByteStream, AsyncByteQueue, ReadableSource, WritableSink } from './io/stream';\nexport { RecordBatchReader, RecordBatchFileReader, RecordBatchStreamReader, AsyncRecordBatchFileReader, AsyncRecordBatchStreamReader } from './ipc/reader';\nexport { RecordBatchWriter, RecordBatchFileWriter, RecordBatchStreamWriter, RecordBatchJSONWriter } from './ipc/writer';\nexport { MessageReader, AsyncMessageReader, JSONMessageReader } from './ipc/message';\nexport { Message } from './ipc/metadata/message';\nexport { RecordBatch } from './recordbatch';\nexport { ArrowJSONLike, FileHandle, Readable, Writable, ReadableWritable, ReadableDOMStreamOptions } from './io/interfaces';\nexport { DataFrame, FilteredDataFrame, CountByResult, BindFunc, NextFunc } from './compute/dataframe';\n\nimport * as util_bn_ from './util/bn';\nimport * as util_int_ from './util/int';\nimport * as util_bit_ from './util/bit';\nimport * as util_math_ from './util/math';\nimport * as util_buffer_ from './util/buffer';\nimport * as util_vector_ from './util/vector';\nimport * as predicate from './compute/predicate';\nimport { compareSchemas, compareFields, compareTypes } from './visitor/typecomparator';\n\nexport { predicate };\n/** @ignore */\nexport const util = {\n    ...util_bn_,\n    ...util_int_,\n    ...util_bit_,\n    ...util_math_,\n    ...util_buffer_,\n    ...util_vector_,\n    compareSchemas,\n    compareFields,\n    compareTypes,\n};\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport streamAdapters from './io/adapters';\nimport { Builder } from './builder/index';\nimport { RecordBatchReader, RecordBatchFileReader, RecordBatchStreamReader, } from './ipc/reader';\nimport { RecordBatchWriter, RecordBatchFileWriter, RecordBatchStreamWriter, } from './ipc/writer';\nimport { toDOMStream } from './io/whatwg/iterable';\nimport { builderThroughDOMStream } from './io/whatwg/builder';\nimport { recordBatchReaderThroughDOMStream } from './io/whatwg/reader';\nimport { recordBatchWriterThroughDOMStream } from './io/whatwg/writer';\n\nstreamAdapters.toDOMStream = toDOMStream;\nBuilder['throughDOM'] = builderThroughDOMStream;\nRecordBatchReader['throughDOM'] = recordBatchReaderThroughDOMStream;\nRecordBatchFileReader['throughDOM'] = recordBatchReaderThroughDOMStream;\nRecordBatchStreamReader['throughDOM'] = recordBatchReaderThroughDOMStream;\nRecordBatchWriter['throughDOM'] = recordBatchWriterThroughDOMStream;\nRecordBatchFileWriter['throughDOM'] = recordBatchWriterThroughDOMStream;\nRecordBatchStreamWriter['throughDOM'] = recordBatchWriterThroughDOMStream;\n\nexport {\n    DateUnit, IntervalUnit, MessageHeader, MetadataVersion, Precision, TimeUnit, Type, UnionMode, BufferType,\n    Data,\n    DataType,\n    Null,\n    Bool,\n    Int, Int8, Int16, Int32, Int64, Uint8, Uint16, Uint32, Uint64,\n    Float, Float16, Float32, Float64,\n    Utf8,\n    Binary,\n    FixedSizeBinary,\n    Date_, DateDay, DateMillisecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Decimal,\n    List,\n    Struct,\n    Union, DenseUnion, SparseUnion,\n    Dictionary,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    FixedSizeList,\n    Map_,\n    Table,\n    Column,\n    Schema, Field,\n    Visitor,\n    Vector,\n    BaseVector,\n    BinaryVector,\n    BoolVector,\n    Chunked,\n    DateVector, DateDayVector, DateMillisecondVector,\n    DecimalVector,\n    DictionaryVector,\n    FixedSizeBinaryVector,\n    FixedSizeListVector,\n    FloatVector, Float16Vector, Float32Vector, Float64Vector,\n    IntervalVector, IntervalDayTimeVector, IntervalYearMonthVector,\n    IntVector, Int8Vector, Int16Vector, Int32Vector, Int64Vector, Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector,\n    ListVector,\n    MapVector,\n    NullVector,\n    StructVector,\n    TimestampVector, TimestampSecondVector, TimestampMillisecondVector, TimestampMicrosecondVector, TimestampNanosecondVector,\n    TimeVector, TimeSecondVector, TimeMillisecondVector, TimeMicrosecondVector, TimeNanosecondVector,\n    UnionVector, DenseUnionVector, SparseUnionVector,\n    Utf8Vector,\n    ByteStream, AsyncByteStream, AsyncByteQueue, ReadableSource, WritableSink,\n    RecordBatchReader, RecordBatchFileReader, RecordBatchStreamReader, AsyncRecordBatchFileReader, AsyncRecordBatchStreamReader,\n    RecordBatchWriter, RecordBatchFileWriter, RecordBatchStreamWriter, RecordBatchJSONWriter,\n    MessageReader, AsyncMessageReader, JSONMessageReader,\n    Message,\n    RecordBatch,\n    ArrowJSONLike, FileHandle, Readable, Writable, ReadableWritable, ReadableDOMStreamOptions,\n    DataFrame, FilteredDataFrame, CountByResult, BindFunc, NextFunc,\n    predicate,\n    util,\n    Builder,\n    BinaryBuilder,\n    BoolBuilder,\n    DateBuilder, DateDayBuilder, DateMillisecondBuilder,\n    DecimalBuilder,\n    DictionaryBuilder,\n    FixedSizeBinaryBuilder,\n    FixedSizeListBuilder,\n    FloatBuilder, Float16Builder, Float32Builder, Float64Builder,\n    IntervalBuilder, IntervalDayTimeBuilder, IntervalYearMonthBuilder,\n    IntBuilder, Int8Builder, Int16Builder, Int32Builder, Int64Builder, Uint8Builder, Uint16Builder, Uint32Builder, Uint64Builder,\n    ListBuilder,\n    MapBuilder,\n    NullBuilder,\n    StructBuilder,\n    TimestampBuilder, TimestampSecondBuilder, TimestampMillisecondBuilder, TimestampMicrosecondBuilder, TimestampNanosecondBuilder,\n    TimeBuilder, TimeSecondBuilder, TimeMillisecondBuilder, TimeMicrosecondBuilder, TimeNanosecondBuilder,\n    UnionBuilder, DenseUnionBuilder, SparseUnionBuilder,\n    Utf8Builder,\n} from './Arrow';\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { toUint8Array } from '../../util/buffer';\nimport { ReadableDOMStreamOptions } from '../../io/interfaces';\nimport { isIterable, isAsyncIterable } from '../../util/compat';\n\n/** @ignore */\ntype SourceIterator<T> = Generator<T, void, number | null>;\n/** @ignore */\ntype AsyncSourceIterator<T> = AsyncGenerator<T, void, number | null>;\n\n/** @ignore */\nexport function toDOMStream<T>(source: Iterable<T> | AsyncIterable<T>, options?: ReadableDOMStreamOptions): ReadableStream<T> {\n    if (isAsyncIterable<T>(source)) { return asyncIterableAsReadableDOMStream(source, options); }\n    if (isIterable<T>(source)) { return iterableAsReadableDOMStream(source, options); }\n    /* istanbul ignore next */\n    throw new Error(`toDOMStream() must be called with an Iterable or AsyncIterable`);\n}\n\n/** @ignore */\nfunction iterableAsReadableDOMStream<T>(source: Iterable<T>, options?: ReadableDOMStreamOptions) {\n\n    let it: SourceIterator<T> | null = null;\n    const bm = (options && options.type === 'bytes') || false;\n    const hwm = options && options.highWaterMark || (2 ** 24);\n\n    return new ReadableStream<T>({\n        ...options as any,\n        start(controller) { next(controller, it || (it = source[Symbol.iterator]() as SourceIterator<T>)); },\n        pull(controller) { it ? (next(controller, it)) : controller.close(); },\n        cancel() { (it && (it.return && it.return()) || true) && (it = null); }\n    }, { highWaterMark: bm ? hwm : undefined, ...options });\n\n    function next(controller: ReadableStreamDefaultController<T>, it: SourceIterator<T>) {\n        let buf: Uint8Array;\n        let r: IteratorResult<T> | null = null;\n        let size = controller.desiredSize || null;\n        while (!(r = it.next(bm ? size : null)).done) {\n            if (ArrayBuffer.isView(r.value) && (buf = toUint8Array(r.value))) {\n                size != null && bm && (size = size - buf.byteLength + 1);\n                r.value = <any> buf;\n            }\n            controller.enqueue(r.value);\n            if (size != null && --size <= 0) { return; }\n        }\n        controller.close();\n    }\n}\n\n/** @ignore */\nfunction asyncIterableAsReadableDOMStream<T>(source: AsyncIterable<T>, options?: ReadableDOMStreamOptions) {\n\n    let it: AsyncSourceIterator<T> | null = null;\n    const bm = (options && options.type === 'bytes') || false;\n    const hwm = options && options.highWaterMark || (2 ** 24);\n\n    return new ReadableStream<T>({\n        ...options as any,\n        async start(controller) { await next(controller, it || (it = source[Symbol.asyncIterator]() as AsyncSourceIterator<T>)); },\n        async pull(controller) { it ? (await next(controller, it)) : controller.close(); },\n        async cancel() { (it && (it.return && await it.return()) || true) && (it = null); },\n    }, { highWaterMark: bm ? hwm : undefined, ...options });\n\n    async function next(controller: ReadableStreamDefaultController<T>, it: AsyncSourceIterator<T>) {\n        let buf: Uint8Array;\n        let r: IteratorResult<T> | null = null;\n        let size = controller.desiredSize || null;\n        while (!(r = await it.next(bm ? size : null)).done) {\n            if (ArrayBuffer.isView(r.value) && (buf = toUint8Array(r.value))) {\n                size != null && bm && (size = size - buf.byteLength + 1);\n                r.value = <any> buf;\n            }\n            controller.enqueue(r.value);\n            if (size != null && --size <= 0) { return; }\n        }\n        controller.close();\n    }\n}\n"],"sourceRoot":""}