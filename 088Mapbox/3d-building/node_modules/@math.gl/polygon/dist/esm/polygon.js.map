{"version":3,"sources":["../../src/polygon.ts"],"names":["isArray","getPolygonSignedArea","forEachSegmentInPolygon","modifyPolygonWindingDirection","getPolygonSignedAreaPoints","forEachSegmentInPolygonPoints","modifyPolygonWindingDirectionPoints","Polygon","constructor","points","options","isFlatArray","start","end","length","size","isClosed","Object","freeze","getSignedArea","getArea","Math","abs","getWindingDirection","sign","forEachSegment","visitor","x1","y1","x2","y2","i1","i2","modifyWindingDirection","direction"],"mappings":";AACA,SAAQA,OAAR,QAAsB,eAAtB;AAIA,SACEC,oBADF,EAEEC,uBAFF,EAGEC,6BAHF,EAIEC,0BAJF,EAKEC,6BALF,EAMEC,mCANF,QAOO,iBAPP;AAgBA,eAAe,MAAMC,OAAN,CAAc;AAK3BC,EAAAA,WAAW,CAACC,MAAD,EAAoCC,OAAuB,GAAG,EAA9D,EAAkE;AAAA;;AAAA;;AAAA;;AAC3E,SAAKD,MAAL,GAAcA,MAAd;AACA,SAAKE,WAAL,GAAmB,CAACX,OAAO,CAACS,MAAM,CAAC,CAAD,CAAP,CAA3B;AAEA,SAAKC,OAAL,GAAe;AACbE,MAAAA,KAAK,EAAEF,OAAO,CAACE,KAAR,IAAiB,CADX;AAEbC,MAAAA,GAAG,EAAEH,OAAO,CAACG,GAAR,IAAeJ,MAAM,CAACK,MAFd;AAGbC,MAAAA,IAAI,EAAEL,OAAO,CAACK,IAAR,IAAgB,CAHT;AAIbC,MAAAA,QAAQ,EAAEN,OAAO,CAACM;AAJL,KAAf;AAOAC,IAAAA,MAAM,CAACC,MAAP,CAAc,IAAd;AACD;;AAMDC,EAAAA,aAAa,GAAW;AACtB,QAAI,KAAKR,WAAT,EAAsB,OAAOV,oBAAoB,CAAC,KAAKQ,MAAN,EAA8B,KAAKC,OAAnC,CAA3B;AAEtB,WAAON,0BAA0B,CAAC,KAAKK,MAAN,EAA4B,KAAKC,OAAjC,CAAjC;AACD;;AAMDU,EAAAA,OAAO,GAAW;AAChB,WAAOC,IAAI,CAACC,GAAL,CAAS,KAAKH,aAAL,EAAT,CAAP;AACD;;AAMDI,EAAAA,mBAAmB,GAAW;AAC5B,WAAOF,IAAI,CAACG,IAAL,CAAU,KAAKL,aAAL,EAAV,CAAP;AACD;;AAMDM,EAAAA,cAAc,CAACC,OAAD,EAAsC;AAClD,QAAI,KAAKf,WAAT,EAAsB;AACpBT,MAAAA,uBAAuB,CACrB,KAAKO,MADgB,EAGrB,CAACkB,EAAD,EAAKC,EAAL,EAASC,EAAT,EAAaC,EAAb,EAAiBC,EAAjB,EAAqBC,EAArB,KAA4B;AAE1BN,QAAAA,OAAO,CAAC,CAACC,EAAD,EAAKC,EAAL,CAAD,EAAW,CAACC,EAAD,EAAKC,EAAL,CAAX,EAAqBC,EAArB,EAAyBC,EAAzB,CAAP;AACD,OANoB,EAOrB,KAAKtB,OAPgB,CAAvB;AASD,KAVD,MAUO;AACLL,MAAAA,6BAA6B,CAAC,KAAKI,MAAN,EAA4BiB,OAA5B,EAAqC,KAAKhB,OAA1C,CAA7B;AACD;AACF;;AAODuB,EAAAA,sBAAsB,CAACC,SAAD,EAA6B;AACjD,QAAI,KAAKvB,WAAT,EAAsB;AACpB,aAAOR,6BAA6B,CAAC,KAAKM,MAAN,EAA8ByB,SAA9B,EAAyC,KAAKxB,OAA9C,CAApC;AACD;;AACD,WAAOJ,mCAAmC,CAAC,KAAKG,MAAN,EAA4ByB,SAA5B,EAAuC,KAAKxB,OAA5C,CAA1C;AACD;;AA3E0B","sourcesContent":["/* eslint-disable no-undef, no-console */\nimport {isArray} from '@math.gl/core';\nimport type {SegmentVisitorPoints} from './polygon-utils';\nimport type {NumericArray} from '@math.gl/core';\n\nimport {\n  getPolygonSignedArea,\n  forEachSegmentInPolygon,\n  modifyPolygonWindingDirection,\n  getPolygonSignedAreaPoints,\n  forEachSegmentInPolygonPoints,\n  modifyPolygonWindingDirectionPoints\n} from './polygon-utils';\n\nexport type PolygonOptions = {\n  start?: number;\n  end?: number;\n  size?: number;\n  isClosed?: boolean;\n};\n\nexport default class Polygon {\n  points: NumericArray | number[][];\n  isFlatArray: boolean;\n  options: PolygonOptions;\n\n  constructor(points: NumericArray | number[][], options: PolygonOptions = {}) {\n    this.points = points;\n    this.isFlatArray = !isArray(points[0]);\n\n    this.options = {\n      start: options.start || 0,\n      end: options.end || points.length,\n      size: options.size || 2,\n      isClosed: options.isClosed\n    };\n\n    Object.freeze(this);\n  }\n\n  /**\n   * Returns signed area of the polygon.\n   * @returns Signed area of the polygon.\n   */\n  getSignedArea(): number {\n    if (this.isFlatArray) return getPolygonSignedArea(this.points as NumericArray, this.options);\n\n    return getPolygonSignedAreaPoints(this.points as number[][], this.options);\n  }\n\n  /**\n   * Returns absolute area of the polygon.\n   * @returns Absolute area of the polygon.\n   */\n  getArea(): number {\n    return Math.abs(this.getSignedArea());\n  }\n\n  /**\n   * Returns winding direction of the polygon.\n   * @returns Winding direction of the polygon. 1 is for clockwise, -1 for counterclockwise winding direction.\n   */\n  getWindingDirection(): number {\n    return Math.sign(this.getSignedArea());\n  }\n\n  /**\n   * Calls the visitor callback for each segment in the polygon.\n   * @param visitor A callback to call for each segment.\n   */\n  forEachSegment(visitor: SegmentVisitorPoints): void {\n    if (this.isFlatArray) {\n      forEachSegmentInPolygon(\n        this.points as NumericArray,\n        // eslint-disable-next-line max-params\n        (x1, y1, x2, y2, i1, i2) => {\n          // TODO @igorDykhta original visitor uses arrays for each point, but with flat arrays performance degrades if we allocate points for each segment\n          visitor([x1, y1], [x2, y2], i1, i2);\n        },\n        this.options\n      );\n    } else {\n      forEachSegmentInPolygonPoints(this.points as number[][], visitor, this.options);\n    }\n  }\n\n  /**\n   * Checks winding direction of the polygon and reverses the polygon in case of opposite winding direction.\n   * @param direction Requested winding direction. 1 is for clockwise, -1 for counterclockwise winding direction.\n   * @return Returns true if the winding direction was changed.\n   */\n  modifyWindingDirection(direction: number): boolean {\n    if (this.isFlatArray) {\n      return modifyPolygonWindingDirection(this.points as NumericArray, direction, this.options);\n    }\n    return modifyPolygonWindingDirectionPoints(this.points as number[][], direction, this.options);\n  }\n}\n"],"file":"polygon.js"}