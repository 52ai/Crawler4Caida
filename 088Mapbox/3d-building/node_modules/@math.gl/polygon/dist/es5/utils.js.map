{"version":3,"sources":["../../src/utils.ts"],"names":["push","target","source","size","length","startIndex","isDuplicate","i","copy","getPointAtIndex","positions","index","offset","out","startI"],"mappings":";;;;;;;;;AAEO,SAASA,IAAT,CAAcC,MAAd,EAAgCC,MAAhC,EAA2D;AAChE,MAAMC,IAAI,GAAGD,MAAM,CAACE,MAApB;AACA,MAAMC,UAAU,GAAGJ,MAAM,CAACG,MAA1B;;AAGA,MAAIC,UAAU,GAAG,CAAjB,EAAoB;AAClB,QAAIC,WAAW,GAAG,IAAlB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,IAApB,EAA0BI,CAAC,EAA3B,EAA+B;AAC7B,UAAIN,MAAM,CAACI,UAAU,GAAGF,IAAb,GAAoBI,CAArB,CAAN,KAAkCL,MAAM,CAACK,CAAD,CAA5C,EAAiD;AAC/CD,QAAAA,WAAW,GAAG,KAAd;AACA;AACD;AACF;;AACD,QAAIA,WAAJ,EAAiB;AACf,aAAO,KAAP;AACD;AACF;;AAED,OAAK,IAAIC,EAAC,GAAG,CAAb,EAAgBA,EAAC,GAAGJ,IAApB,EAA0BI,EAAC,EAA3B,EAA+B;AAC7BN,IAAAA,MAAM,CAACI,UAAU,GAAGE,EAAd,CAAN,GAAyBL,MAAM,CAACK,EAAD,CAA/B;AACD;;AACD,SAAO,IAAP;AACD;;AAEM,SAASC,IAAT,CAAcP,MAAd,EAAgCC,MAAhC,EAAsE;AAC3E,MAAMC,IAAI,GAAGD,MAAM,CAACE,MAApB;;AACA,OAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,IAApB,EAA0BI,CAAC,EAA3B,EAA+B;AAC7BN,IAAAA,MAAM,CAACM,CAAD,CAAN,GAAYL,MAAM,CAACK,CAAD,CAAlB;AACD;AACF;;AAEM,SAASE,eAAT,CACLC,SADK,EAELC,KAFK,EAGLR,IAHK,EAILS,MAJK,EAMK;AAAA,MADVC,GACU,uEADM,EACN;AACV,MAAMC,MAAM,GAAGF,MAAM,GAAGD,KAAK,GAAGR,IAAhC;;AACA,OAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,IAApB,EAA0BI,CAAC,EAA3B,EAA+B;AAC7BM,IAAAA,GAAG,CAACN,CAAD,CAAH,GAASG,SAAS,CAACI,MAAM,GAAGP,CAAV,CAAlB;AACD;;AACD,SAAOM,GAAP;AACD","sourcesContent":["import type {NumericArray} from '@math.gl/core';\n\nexport function push(target: number[], source: number[]): boolean {\n  const size = source.length;\n  const startIndex = target.length;\n\n  // dedupe, if source is the same point as the last vertex\n  if (startIndex > 0) {\n    let isDuplicate = true;\n    for (let i = 0; i < size; i++) {\n      if (target[startIndex - size + i] !== source[i]) {\n        isDuplicate = false;\n        break;\n      }\n    }\n    if (isDuplicate) {\n      return false;\n    }\n  }\n\n  for (let i = 0; i < size; i++) {\n    target[startIndex + i] = source[i];\n  }\n  return true;\n}\n\nexport function copy(target: number[], source: Readonly<NumericArray>): void {\n  const size = source.length;\n  for (let i = 0; i < size; i++) {\n    target[i] = source[i];\n  }\n}\n\nexport function getPointAtIndex(\n  positions: Readonly<NumericArray>,\n  index: number,\n  size: number,\n  offset: number,\n  out: number[] = []\n): number[] {\n  const startI = offset + index * size;\n  for (let i = 0; i < size; i++) {\n    out[i] = positions[startI + i];\n  }\n  return out;\n}\n"],"file":"utils.js"}