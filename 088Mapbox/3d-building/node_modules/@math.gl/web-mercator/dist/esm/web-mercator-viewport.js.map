{"version":3,"sources":["../../src/web-mercator-viewport.ts"],"names":["createMat4","zoomToScale","pixelsToWorld","lngLatToWorld","worldToLngLat","worldToPixels","altitudeToFovy","fovyToAltitude","DEFAULT_ALTITUDE","getProjectionMatrix","getDistanceScales","getViewMatrix","fitBounds","getBounds","mat4","vec2","vec3","WebMercatorViewport","constructor","props","width","height","viewport","equals","projectionMatrix","viewMatrix","lngLatZ","options","topLeft","worldPosition","projectPosition","coord","pixelProjectionMatrix","x","y","y2","length","xyz","targetZ","undefined","z","targetZWorld","distanceScales","unitsPerMeter","pixelUnprojectionMatrix","X","Y","Z","unprojectPosition","Number","isFinite","metersPerUnit","altitude","fovy","latitude","longitude","zoom","pitch","bearing","position","nearZMultiplier","farZMultiplier","scale","Math","max","center","push","add","mul","meterOffset","_initMatrices","Object","freeze","vpm","multiply","viewProjectionMatrix","m","translate","mInverse","invert","Error","projectFlat","lngLat","unprojectFlat","xy","getMapCenterByLngLatPosition","pos","fromLocation","toLocation","negate","newCenter","bounds","assign","corners","getBoundingRegion","west","min","map","p","east","south","north","getLocationAtPoint"],"mappings":"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","sourcesContent":["// View and Projection Matrix calculations for mapbox-js style map view properties\nimport {createMat4} from './math-utils';\n\nimport {\n  zoomToScale,\n  pixelsToWorld,\n  lngLatToWorld,\n  worldToLngLat,\n  worldToPixels,\n  altitudeToFovy,\n  fovyToAltitude,\n  DEFAULT_ALTITUDE,\n  getProjectionMatrix,\n  getDistanceScales,\n  getViewMatrix,\n  DistanceScales\n} from './web-mercator-utils';\nimport fitBounds from './fit-bounds';\nimport getBounds from './get-bounds';\nimport type {FitBoundsOptions} from './fit-bounds';\n\nimport * as mat4 from 'gl-matrix/mat4';\nimport * as vec2 from 'gl-matrix/vec2';\nimport * as vec3 from 'gl-matrix/vec3';\n\n/**\n   * @param width=1 - Width of \"viewport\" or window\n   * @param height=1 - Height of \"viewport\" or window\n   * @param scale=1 - Either use scale or zoom\n   * @param pitch=0 - Camera angle in degrees (0 is straight down)\n   * @param bearing=0 - Map rotation in degrees (0 means north is up)\n   * @param fovy= - Field of view of camera in degrees\n   * @param altitude= - Altitude of camera in screen units                                                               \n   *\n   * Web mercator projection short-hand parameters\n   * @param latitude - Center of viewport on map\n   * @param longitude - Center of viewport on map\n   * @param zoom - Scale = Math.pow(2,zoom) on map\n\n   * Notes:\n   *  - Only one of center or [latitude, longitude] can be specified\n   *  - [latitude, longitude] can only be specified when \"mercator\" is true\n   *  - Altitude has a default value that matches assumptions in mapbox-gl\n   *  - Field of view is independent from altitude, provide `altitudeToFovy(1.5)` (default value) to match assumptions in mapbox-gl\n   *  - width and height are forced to 1 if supplied as 0, to avoid\n   *    division by zero. This is intended to reduce the burden of apps to\n   *    to check values before instantiating a Viewport.\n */\nexport type WebMercatorViewportProps = {\n  // Map state\n  width: number;\n  height: number;\n  latitude?: number;\n  longitude?: number;\n  position?: number[];\n  zoom?: number;\n  pitch?: number;\n  bearing?: number;\n  altitude?: number;\n  fovy?: number;\n  nearZMultiplier?: number;\n  farZMultiplier?: number;\n};\n\n/**\n * The WebMercatorViewport class creates\n * - view/projection matrices\n * - \"uniform values\" (for shaders) from mercator params\n *\n * Note: Instances are immutable in the sense that they only have accessors.\n * A new viewport instance should be created if any parameters have changed.\n */\nexport default class WebMercatorViewport {\n  readonly latitude: number;\n  readonly longitude: number;\n  readonly zoom: number;\n  readonly pitch: number;\n  readonly bearing: number;\n  readonly altitude: number;\n  readonly fovy: number;\n\n  readonly meterOffset: number[];\n  readonly center: number[];\n\n  readonly width: number;\n  readonly height: number;\n  readonly scale: number;\n  readonly distanceScales: DistanceScales;\n\n  readonly viewMatrix: number[];\n  readonly projectionMatrix: number[];\n\n  viewProjectionMatrix: number[];\n  pixelProjectionMatrix: number[];\n  pixelUnprojectionMatrix: number[];\n\n  /**\n   * @classdesc\n   * Creates view/projection matrices from mercator params\n   * Note: The Viewport is immutable in the sense that it only has accessors.\n   * A new viewport instance should be created if any parameters have changed.\n   */\n  // eslint-disable-next-line max-statements\n  constructor(props: WebMercatorViewportProps = {width: 1, height: 1}) {\n    let {\n      // Map state\n      width,\n      height,\n      altitude = null,\n      fovy = null\n    } = props;\n    const {\n      latitude = 0,\n      longitude = 0,\n      zoom = 0,\n      pitch = 0,\n      bearing = 0,\n      position = null,\n      nearZMultiplier = 0.02,\n      farZMultiplier = 1.01\n    } = props;\n\n    // Silently allow apps to send in 0,0 to facilitate isomorphic render etc\n    width = width || 1;\n    height = height || 1;\n\n    // `fovy` & `altitude` are independent parameters, one for the\n    // projection and the latter for the view matrix. In the past,\n    // the `fovy` was always derived from the `altitude`\n    if (fovy === null && altitude === null) {\n      altitude = DEFAULT_ALTITUDE;\n      fovy = altitudeToFovy(altitude);\n    } else if (fovy === null) {\n      fovy = altitudeToFovy(altitude);\n    } else if (altitude === null) {\n      altitude = fovyToAltitude(fovy);\n    }\n\n    const scale = zoomToScale(zoom);\n    // Altitude - prevent division by 0\n    // TODO - just throw an Error instead?\n    altitude = Math.max(0.75, altitude);\n\n    const distanceScales = getDistanceScales({longitude, latitude});\n\n    const center: number[] = lngLatToWorld([longitude, latitude]);\n    center.push(0);\n\n    if (position) {\n      vec3.add(center, center, vec3.mul([], position, distanceScales.unitsPerMeter));\n    }\n\n    this.projectionMatrix = getProjectionMatrix({\n      width,\n      height,\n      scale,\n      center,\n      pitch,\n      fovy,\n      nearZMultiplier,\n      farZMultiplier\n    });\n\n    this.viewMatrix = getViewMatrix({\n      height,\n      scale,\n      center,\n      pitch,\n      bearing,\n      altitude\n    });\n\n    // Save parameters\n    this.width = width;\n    this.height = height;\n    this.scale = scale;\n\n    this.latitude = latitude;\n    this.longitude = longitude;\n    this.zoom = zoom;\n    this.pitch = pitch;\n    this.bearing = bearing;\n    this.altitude = altitude;\n    this.fovy = fovy;\n    this.center = center;\n    this.meterOffset = position || [0, 0, 0];\n\n    this.distanceScales = distanceScales;\n\n    this._initMatrices();\n\n    Object.freeze(this);\n  }\n\n  _initMatrices(): void {\n    const {width, height, projectionMatrix, viewMatrix} = this;\n\n    // Note: As usual, matrix operations should be applied in \"reverse\" order\n    // since vectors will be multiplied in from the right during transformation\n    const vpm = createMat4();\n    mat4.multiply(vpm, vpm, projectionMatrix);\n    mat4.multiply(vpm, vpm, viewMatrix);\n    this.viewProjectionMatrix = vpm;\n\n    // Calculate matrices and scales needed for projection\n    /**\n     * Builds matrices that converts preprojected lngLats to screen pixels\n     * and vice versa.\n     * Note: Currently returns bottom-left coordinates!\n     * Note: Starts with the GL projection matrix and adds steps to the\n     *       scale and translate that matrix onto the window.\n     * Note: WebGL controls clip space to screen projection with gl.viewport\n     *       and does not need this step.\n     */\n    const m = createMat4();\n\n    // matrix for conversion from location to screen coordinates\n    mat4.scale(m, m, [width / 2, -height / 2, 1]);\n    mat4.translate(m, m, [1, -1, 0]);\n    mat4.multiply(m, m, vpm);\n\n    const mInverse = mat4.invert(createMat4(), m);\n    if (!mInverse) {\n      throw new Error('Pixel project matrix not invertible');\n    }\n\n    this.pixelProjectionMatrix = m;\n    this.pixelUnprojectionMatrix = mInverse;\n  }\n\n  /** Two viewports are equal if width and height are identical, and if\n   * their view and projection matrices are (approximately) equal.\n   */\n  equals = (viewport: WebMercatorViewport | null): boolean => {\n    if (!(viewport instanceof WebMercatorViewport)) {\n      return false;\n    }\n\n    return (\n      viewport.width === this.width &&\n      viewport.height === this.height &&\n      mat4.equals(viewport.projectionMatrix, this.projectionMatrix) &&\n      mat4.equals(viewport.viewMatrix, this.viewMatrix)\n    );\n  };\n\n  /**\n   * Projects xyz (possibly latitude and longitude) to pixel coordinates in window\n   * using viewport projection parameters\n   * - [longitude, latitude] to [x, y]\n   * - [longitude, latitude, Z] => [x, y, z]\n   * Note: By default, returns top-left coordinates for canvas/SVG type render\n   *\n   * @param lngLatZ - [lng, lat] or [lng, lat, Z]\n   * @param options - options\n   * @param options.topLeft=true - Whether projected coords are top left\n   * @return - screen coordinates [x, y] or [x, y, z], z as pixel depth\n   */\n  project = (lngLatZ: number[], options: {topLeft?: boolean} = {}): number[] => {\n    const {topLeft = true} = options;\n    const worldPosition = this.projectPosition(lngLatZ);\n    const coord = worldToPixels(worldPosition, this.pixelProjectionMatrix);\n\n    const [x, y] = coord;\n    const y2 = topLeft ? y : this.height - y;\n    return lngLatZ.length === 2 ? [x, y2] : [x, y2, coord[2]];\n  };\n\n  /**\n   * Unproject pixel coordinates on screen onto world coordinates, possibly `[lon, lat]` on map.\n   *\n   * - [x, y] => [lng, lat]\n   * - [x, y, z] => [lng, lat, Z]\n   *\n   * @param xyz - screen coordinates, z as pixel depth\n   * @param options - options\n   * @param options.topLeft=true - Whether projected coords are top left\n   * @param options.targetZ=0 - If pixel depth is unknown, targetZ is used as\n   *   the elevation plane to unproject onto\n   * @return - [lng, lat, Z] or [X, Y, Z]\n   */\n  unproject = (xyz: number[], options: {topLeft?: boolean; targetZ?: number} = {}): number[] => {\n    const {topLeft = true, targetZ = undefined} = options;\n    const [x, y, z] = xyz;\n\n    const y2 = topLeft ? y : this.height - y;\n    const targetZWorld = targetZ && targetZ * this.distanceScales.unitsPerMeter[2];\n    const coord = pixelsToWorld([x, y2, z], this.pixelUnprojectionMatrix, targetZWorld);\n    const [X, Y, Z] = this.unprojectPosition(coord);\n\n    if (Number.isFinite(z)) {\n      return [X, Y, Z];\n    }\n    return Number.isFinite(targetZ) ? [X, Y, targetZ] : [X, Y];\n  };\n\n  // NON_LINEAR PROJECTION HOOKS\n  // Used for web meractor projection\n\n  projectPosition = (xyz: number[]): [number, number, number] => {\n    const [X, Y] = lngLatToWorld(xyz);\n    const Z = (xyz[2] || 0) * this.distanceScales.unitsPerMeter[2];\n    return [X, Y, Z];\n  };\n\n  unprojectPosition = (xyz: number[]): [number, number, number] => {\n    const [X, Y] = worldToLngLat(xyz);\n    const Z = (xyz[2] || 0) * this.distanceScales.metersPerUnit[2];\n    return [X, Y, Z];\n  };\n\n  /**\n   * Project [lng,lat] on sphere onto [x,y] on 512*512 Mercator Zoom 0 tile.\n   * Performs the nonlinear part of the web mercator projection.\n   * Remaining projection is done with 4x4 matrices which also handles\n   * perspective.\n   *\n   * @param lngLat - [lng, lat] coordinates\n   *   Specifies a point on the sphere to project onto the map.\n   * @return [x,y] coordinates.\n   */\n  projectFlat(lngLat: number[]): number[] {\n    return lngLatToWorld(lngLat);\n  }\n\n  /**\n   * Unproject world point [x,y] on map onto {lat, lon} on sphere\n   *\n   * @param xy - array with [x,y] members\n   *  representing point on projected map plane\n   * @return - array with [lat,lon] of point on sphere.\n   *   Has toArray method if you need a GeoJSON Array.\n   *   Per cartographic tradition, lat and lon are specified as degrees.\n   */\n  unprojectFlat(xy: number[]): number[] {\n    return worldToLngLat(xy);\n  }\n\n  /**\n   * Get the map center that place a given [lng, lat] coordinate at screen point [x, y]\n   * @param opt\n   * @param opt.lngLat - [lng,lat] coordinates\n   *   Specifies a point on the sphere.\n   * @param opt.pos - [x,y] coordinates\n   *   Specifies a point on the screen.\n   * @return [lng,lat] new map center.\n   */\n  getMapCenterByLngLatPosition({lngLat, pos}: {lngLat: number[]; pos: number[]}): number[] {\n    const fromLocation = pixelsToWorld(pos, this.pixelUnprojectionMatrix);\n    const toLocation = lngLatToWorld(lngLat);\n    const translate = vec2.add([], toLocation, vec2.negate([], fromLocation));\n    const newCenter = vec2.add([], this.center, translate);\n    return worldToLngLat(newCenter);\n  }\n\n  /**\n   * Returns a new viewport that fit around the given rectangle.\n   * Only supports non-perspective mode.\n   * @param bounds - [[lon, lat], [lon, lat]]\n   * @param [options]\n   * @param [options.padding] - The amount of padding in pixels to add to the given bounds.\n   * @param [options.offset] - The center of the given bounds relative to the map's center,\n   *    [x, y] measured in pixels.\n   * @returns {WebMercatorViewport}\n   */\n  fitBounds(\n    bounds: [[number, number], [number, number]],\n    options: Omit<FitBoundsOptions, 'width' | 'height' | 'bounds'> = {}\n  ): WebMercatorViewport {\n    const {width, height} = this;\n    const {longitude, latitude, zoom} = fitBounds(Object.assign({width, height, bounds}, options));\n    return new WebMercatorViewport({width, height, longitude, latitude, zoom});\n  }\n\n  /**\n   * Returns the bounding box of the viewport.\n   * @param [options]\n   * @param [options.z] - The altitude at which the bounds should be calculated.\n   * @returns {Array} bounds - [[lon, lat], [lon, lat]]\n   */\n  getBounds(options?: {z?: number}): number[][] {\n    const corners = this.getBoundingRegion(options);\n\n    const west = Math.min(...corners.map((p) => p[0]));\n    const east = Math.max(...corners.map((p) => p[0]));\n    const south = Math.min(...corners.map((p) => p[1]));\n    const north = Math.max(...corners.map((p) => p[1]));\n    return [\n      [west, south],\n      [east, north]\n    ];\n  }\n\n  /**\n   * Returns the bounding box of the viewport.\n   * @param [options]\n   * @param [options.z] - The altitude at which the bounds should be calculated.\n   * @returns {Array} an array of 4 points that define the visible region\n   */\n  getBoundingRegion(options: {z?: number} = {}): number[][] {\n    return getBounds(this, options.z || 0);\n  }\n\n  // DEPRECATED\n\n  /** @deprecated Legacy method name */\n  getLocationAtPoint({lngLat, pos}: {lngLat: number[]; pos: number[]}): number[] {\n    return this.getMapCenterByLngLatPosition({lngLat, pos});\n  }\n}\n"],"file":"web-mercator-viewport.js"}