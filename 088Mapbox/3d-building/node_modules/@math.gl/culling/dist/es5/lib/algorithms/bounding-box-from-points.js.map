{"version":3,"sources":["../../../../src/lib/algorithms/bounding-box-from-points.ts"],"names":["scratchVector2","Vector3","scratchVector3","scratchVector4","scratchVector5","scratchVector6","scratchCovarianceResult","Matrix3","scratchEigenResult","diagonal","unitary","makeOrientedBoundingBoxFromPoints","positions","result","OrientedBoundingBox","length","halfAxes","center","meanPoint","position","add","invLength","multiplyByScalar","exx","exy","exz","eyy","eyz","ezz","p","copy","subtract","x","y","z","covarianceMatrix","rotation","v1","getColumn","v2","v3","u1","Number","MAX_VALUE","u2","u3","l1","l2","l3","Math","max","dot","min","scale","set","scaleMatrix","multiplyRight","makeAxisAlignedBoundingBoxFromPoints","AxisAlignedBoundingBox","minimum","maximum","halfDiagonal","minimumX","minimumY","minimumZ","maximumX","maximumY","maximumZ"],"mappings":"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","sourcesContent":["// This file is derived from the Cesium math library under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\nimport {Vector3, Matrix3} from '@math.gl/core';\nimport computeEigenDecomposition from './compute-eigen-decomposition';\nimport OrientedBoundingBox from '../bounding-volumes/oriented-bounding-box';\nimport AxisAlignedBoundingBox from '../bounding-volumes/axis-aligned-bounding-box';\n\nconst scratchVector2 = new Vector3();\n\nconst scratchVector3 = new Vector3();\n\nconst scratchVector4 = new Vector3();\n\nconst scratchVector5 = new Vector3();\n\nconst scratchVector6 = new Vector3();\n\nconst scratchCovarianceResult = new Matrix3();\n\nconst scratchEigenResult = {\n  diagonal: new Matrix3(),\n  unitary: new Matrix3()\n};\n\n/**\n * Computes an instance of an OrientedBoundingBox of the given positions.\n *\n * This is an implementation of Stefan Gottschalk's Collision Queries using Oriented Bounding Boxes solution (PHD thesis).\n * Reference: http://gamma.cs.unc.edu/users/gottschalk/main.pdf\n */\n/* eslint-disable max-statements */\nexport function makeOrientedBoundingBoxFromPoints(\n  positions: number[][],\n  result: OrientedBoundingBox = new OrientedBoundingBox()\n): OrientedBoundingBox {\n  if (!positions || positions.length === 0) {\n    result.halfAxes = new Matrix3([0, 0, 0, 0, 0, 0, 0, 0, 0]);\n    result.center = new Vector3();\n    return result;\n  }\n\n  const length = positions.length;\n  const meanPoint = new Vector3(0, 0, 0);\n  for (const position of positions) {\n    meanPoint.add(position);\n  }\n  const invLength = 1.0 / length;\n  meanPoint.multiplyByScalar(invLength);\n\n  let exx = 0.0;\n  let exy = 0.0;\n  let exz = 0.0;\n  let eyy = 0.0;\n  let eyz = 0.0;\n  let ezz = 0.0;\n\n  for (const position of positions) {\n    const p = scratchVector2.copy(position).subtract(meanPoint);\n    exx += p.x * p.x;\n    exy += p.x * p.y;\n    exz += p.x * p.z;\n    eyy += p.y * p.y;\n    eyz += p.y * p.z;\n    ezz += p.z * p.z;\n  }\n\n  exx *= invLength;\n  exy *= invLength;\n  exz *= invLength;\n  eyy *= invLength;\n  eyz *= invLength;\n  ezz *= invLength;\n\n  const covarianceMatrix = scratchCovarianceResult;\n  covarianceMatrix[0] = exx;\n  covarianceMatrix[1] = exy;\n  covarianceMatrix[2] = exz;\n  covarianceMatrix[3] = exy;\n  covarianceMatrix[4] = eyy;\n  covarianceMatrix[5] = eyz;\n  covarianceMatrix[6] = exz;\n  covarianceMatrix[7] = eyz;\n  covarianceMatrix[8] = ezz;\n\n  const {unitary} = computeEigenDecomposition(covarianceMatrix, scratchEigenResult);\n  const rotation = result.halfAxes.copy(unitary);\n\n  let v1 = rotation.getColumn(0, scratchVector4);\n  let v2 = rotation.getColumn(1, scratchVector5);\n  let v3 = rotation.getColumn(2, scratchVector6);\n\n  let u1 = -Number.MAX_VALUE;\n  let u2 = -Number.MAX_VALUE;\n  let u3 = -Number.MAX_VALUE;\n  let l1 = Number.MAX_VALUE;\n  let l2 = Number.MAX_VALUE;\n  let l3 = Number.MAX_VALUE;\n\n  for (const position of positions) {\n    scratchVector2.copy(position);\n\n    u1 = Math.max(scratchVector2.dot(v1), u1);\n    u2 = Math.max(scratchVector2.dot(v2), u2);\n    u3 = Math.max(scratchVector2.dot(v3), u3);\n\n    l1 = Math.min(scratchVector2.dot(v1), l1);\n    l2 = Math.min(scratchVector2.dot(v2), l2);\n    l3 = Math.min(scratchVector2.dot(v3), l3);\n  }\n\n  v1 = v1.multiplyByScalar(0.5 * (l1 + u1));\n  v2 = v2.multiplyByScalar(0.5 * (l2 + u2));\n  v3 = v3.multiplyByScalar(0.5 * (l3 + u3));\n\n  result.center.copy(v1).add(v2).add(v3);\n\n  const scale = scratchVector3.set(u1 - l1, u2 - l2, u3 - l3).multiplyByScalar(0.5);\n  const scaleMatrix = new Matrix3([scale[0], 0, 0, 0, scale[1], 0, 0, 0, scale[2]]);\n  result.halfAxes.multiplyRight(scaleMatrix);\n\n  return result;\n}\n\n/**\n * Computes an instance of an AxisAlignedBoundingBox. The box is determined by\n * finding the points spaced the farthest apart on the x, y, and z axes.\n */\nexport function makeAxisAlignedBoundingBoxFromPoints(\n  positions: readonly number[][],\n  result: AxisAlignedBoundingBox = new AxisAlignedBoundingBox()\n): AxisAlignedBoundingBox {\n  if (!positions || positions.length === 0) {\n    result.minimum.set(0, 0, 0);\n    result.maximum.set(0, 0, 0);\n    result.center.set(0, 0, 0);\n    result.halfDiagonal.set(0, 0, 0);\n    return result;\n  }\n\n  let minimumX = positions[0][0];\n  let minimumY = positions[0][1];\n  let minimumZ = positions[0][2];\n\n  let maximumX = positions[0][0];\n  let maximumY = positions[0][1];\n  let maximumZ = positions[0][2];\n\n  for (const p of positions) {\n    const x = p[0];\n    const y = p[1];\n    const z = p[2];\n\n    minimumX = Math.min(x, minimumX);\n    maximumX = Math.max(x, maximumX);\n    minimumY = Math.min(y, minimumY);\n    maximumY = Math.max(y, maximumY);\n    minimumZ = Math.min(z, minimumZ);\n    maximumZ = Math.max(z, maximumZ);\n  }\n\n  result.minimum.set(minimumX, minimumY, minimumZ);\n  result.maximum.set(maximumX, maximumY, maximumZ);\n  result.center.copy(result.minimum).add(result.maximum).scale(0.5);\n  result.halfDiagonal.copy(result.maximum).subtract(result.center);\n\n  return result;\n}\n"],"file":"bounding-box-from-points.js"}