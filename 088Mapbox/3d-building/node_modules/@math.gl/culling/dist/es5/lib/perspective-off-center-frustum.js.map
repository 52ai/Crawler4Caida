{"version":3,"sources":["../../../src/lib/perspective-off-center-frustum.ts"],"names":["scratchPlaneUpVector","Vector3","scratchPlaneRightVector","scratchPlaneNearCenter","scratchPlaneFarCenter","scratchPlaneNormal","PerspectiveOffCenterFrustum","options","CullingVolume","Plane","Matrix4","near","far","left","_left","undefined","right","_right","top","_top","bottom","_bottom","_near","_far","other","_update","_perspectiveMatrix","_infinitePerspective","position","direction","up","planes","_cullingVolume","copy","normalize","cross","nearCenter","multiplyByScalar","add","farCenter","normal","subtract","fromPointNormal","negate","drawingBufferWidth","drawingBufferHeight","distance","result","Number","isFinite","inverseNear","tanTheta","pixelHeight","pixelWidth","x","y","frustum","Infinity"],"mappings":"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","sourcesContent":["// This file is derived from the Cesium math library under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\n// Note: This class is still an experimental export, mainly used by other test cases\n// - It has not been fully adapted to math.gl conventions\n// - Documentation has not been ported\n\nimport {Vector3, Vector2, Matrix4, assert, NumericArray} from '@math.gl/core';\nimport CullingVolume from './culling-volume';\nimport Plane from './plane';\n\nconst scratchPlaneUpVector = new Vector3();\nconst scratchPlaneRightVector = new Vector3();\nconst scratchPlaneNearCenter = new Vector3();\nconst scratchPlaneFarCenter = new Vector3();\nconst scratchPlaneNormal = new Vector3();\n\ntype PerspectiveOffCenterFrustumOptions = {\n  left?: number;\n  right?: number;\n  top?: number;\n  bottom?: number;\n  near?: number;\n  far?: number;\n};\n\nexport default class PerspectiveOffCenterFrustum {\n  /**\n   * Defines the left clipping plane.\n   * @type {Number}\n   * @default undefined\n   */\n  left?: number;\n  private _left?: number;\n  /**\n   * Defines the right clipping plane.\n   * @type {Number}\n   * @default undefined\n   */\n  right?: number;\n  private _right?: number;\n  /**\n   * Defines the top clipping plane.\n   * @type {Number}\n   * @default undefined\n   */\n  top?: number;\n  private _top?: number;\n  /**\n   * Defines the bottom clipping plane.\n   * @type {Number}\n   * @default undefined\n   */\n  bottom?: number;\n  private _bottom?: number;\n  /**\n   * The distance of the near plane.\n   * @type {Number}\n   * @default 1.0\n   */\n  near: number;\n  private _near: number;\n  /**\n   * The distance of the far plane.\n   * @type {Number}\n   * @default 500000000.0\n   */\n  far: number;\n  private _far: number;\n\n  private _cullingVolume = new CullingVolume([\n    new Plane(),\n    new Plane(),\n    new Plane(),\n    new Plane(),\n    new Plane(),\n    new Plane()\n  ]);\n  private _perspectiveMatrix = new Matrix4();\n  private _infinitePerspective = new Matrix4();\n\n  /**\n   * The viewing frustum is defined by 6 planes.\n   * Each plane is represented by a {@link Vector4} object, where the x, y, and z components\n   * define the unit vector normal to the plane, and the w component is the distance of the\n   * plane from the origin/camera position.\n   *\n   * @alias PerspectiveOffCenterFrustum\n   *\n   * @example\n   * const frustum = new PerspectiveOffCenterFrustum({\n   *     left : -1.0,\n   *     right : 1.0,\n   *     top : 1.0,\n   *     bottom : -1.0,\n   *     near : 1.0,\n   *     far : 100.0\n   * });\n   *\n   * @see PerspectiveFrustum\n   */\n  constructor(options: PerspectiveOffCenterFrustumOptions = {}) {\n    const {near = 1.0, far = 500000000.0} = options;\n\n    this.left = options.left;\n    this._left = undefined;\n\n    this.right = options.right;\n    this._right = undefined;\n\n    this.top = options.top;\n    this._top = undefined;\n\n    this.bottom = options.bottom;\n    this._bottom = undefined;\n\n    this.near = near;\n    this._near = near;\n\n    this.far = far;\n    this._far = far;\n  }\n\n  /**\n   * Returns a duplicate of a PerspectiveOffCenterFrustum instance.\n   * @returns {PerspectiveOffCenterFrustum} A new PerspectiveFrustum instance.\n   * */\n  clone(): PerspectiveOffCenterFrustum {\n    return new PerspectiveOffCenterFrustum({\n      right: this.right,\n      left: this.left,\n      top: this.top,\n      bottom: this.bottom,\n      near: this.near,\n      far: this.far\n    });\n  }\n\n  /**\n   * Compares the provided PerspectiveOffCenterFrustum componentwise and returns\n   * <code>true</code> if they are equal, <code>false</code> otherwise.\n   *\n   * @returns {Boolean} <code>true</code> if they are equal, <code>false</code> otherwise.\n   */\n  equals(other: PerspectiveOffCenterFrustum): boolean {\n    return (\n      other &&\n      other instanceof PerspectiveOffCenterFrustum &&\n      this.right === other.right &&\n      this.left === other.left &&\n      this.top === other.top &&\n      this.bottom === other.bottom &&\n      this.near === other.near &&\n      this.far === other.far\n    );\n  }\n\n  /**\n   * Gets the perspective projection matrix computed from the view frustum.\n   * @memberof PerspectiveOffCenterFrustum.prototype\n   * @type {Matrix4}\n   *\n   * @see PerspectiveOffCenterFrustum#infiniteProjectionMatrix\n   */\n  get projectionMatrix(): Matrix4 {\n    this._update();\n    return this._perspectiveMatrix;\n  }\n\n  /**\n   * Gets the perspective projection matrix computed from the view frustum with an infinite far plane.\n   * @memberof PerspectiveOffCenterFrustum.prototype\n   * @type {Matrix4}\n   *\n   * @see PerspectiveOffCenterFrustum#projectionMatrix\n   */\n  get infiniteProjectionMatrix(): Matrix4 {\n    this._update();\n    return this._infinitePerspective;\n  }\n\n  /**\n   * Creates a culling volume for this frustum.\n   * @returns {CullingVolume} A culling volume at the given position and orientation.\n   *\n   * @example\n   * // Check if a bounding volume intersects the frustum.\n   * const cullingVolume = frustum.computeCullingVolume(cameraPosition, cameraDirection, cameraUp);\n   * const intersect = cullingVolume.computeVisibility(boundingVolume);\n   */\n  // eslint-disable-next-line complexity, max-statements\n  computeCullingVolume(\n    /** A Vector3 defines the eye position. */\n    position: Readonly<NumericArray>,\n    /** A Vector3 defines the view direction. */\n    direction: Readonly<NumericArray>,\n    /** A Vector3 defines the up direction. */\n    up: Readonly<NumericArray>\n  ): CullingVolume {\n    assert(position, 'position is required.');\n    assert(direction, 'direction is required.');\n    assert(up, 'up is required.');\n\n    const planes = this._cullingVolume.planes;\n\n    up = scratchPlaneUpVector.copy(up).normalize();\n    const right = scratchPlaneRightVector.copy(direction).cross(up).normalize();\n\n    const nearCenter = scratchPlaneNearCenter\n      .copy(direction)\n      .multiplyByScalar(this.near)\n      .add(position);\n\n    const farCenter = scratchPlaneFarCenter\n      .copy(direction)\n      .multiplyByScalar(this.far)\n      .add(position);\n\n    let normal = scratchPlaneNormal;\n\n    // Left plane computation\n    normal.copy(right).multiplyByScalar(this.left).add(nearCenter).subtract(position).cross(up);\n\n    planes[0].fromPointNormal(position, normal);\n\n    // Right plane computation\n    normal\n      .copy(right)\n      .multiplyByScalar(this.right)\n      .add(nearCenter)\n      .subtract(position)\n      .cross(up)\n      .negate();\n\n    planes[1].fromPointNormal(position, normal);\n\n    // Bottom plane computation\n    normal\n      .copy(up)\n      .multiplyByScalar(this.bottom)\n      .add(nearCenter)\n      .subtract(position)\n      .cross(right)\n      .negate();\n\n    planes[2].fromPointNormal(position, normal);\n\n    // Top plane computation\n    normal.copy(up).multiplyByScalar(this.top).add(nearCenter).subtract(position).cross(right);\n\n    planes[3].fromPointNormal(position, normal);\n\n    normal = new Vector3().copy(direction);\n\n    // Near plane computation\n    planes[4].fromPointNormal(nearCenter, normal);\n\n    // Far plane computation\n    normal.negate();\n\n    planes[5].fromPointNormal(farCenter, normal);\n\n    return this._cullingVolume;\n  }\n\n  /**\n   * Returns the pixel's width and height in meters.\n   *\n   * @returns {Vector2} The modified result parameter or a new instance of {@link Vector2} with the pixel's width and height in the x and y properties, respectively.\n   *\n   * @exception {DeveloperError} drawingBufferWidth must be greater than zero.\n   * @exception {DeveloperError} drawingBufferHeight must be greater than zero.\n   *\n   * @example\n   * // Example 1\n   * // Get the width and height of a pixel.\n   * const pixelSize = camera.frustum.getPixelDimensions(scene.drawingBufferWidth, scene.drawingBufferHeight, 1.0, new Vector2());\n   *\n   * @example\n   * // Example 2\n   * // Get the width and height of a pixel if the near plane was set to 'distance'.\n   * // For example, get the size of a pixel of an image on a billboard.\n   * const position = camera.position;\n   * const direction = camera.direction;\n   * const toCenter = Vector3.subtract(primitive.boundingVolume.center, position, new Vector3());      // vector from camera to a primitive\n   * const toCenterProj = Vector3.multiplyByScalar(direction, Vector3.dot(direction, toCenter), new Vector3()); // project vector onto camera direction vector\n   * const distance = Vector3.magnitude(toCenterProj);\n   * const pixelSize = camera.frustum.getPixelDimensions(scene.drawingBufferWidth, scene.drawingBufferHeight, distance, new Vector2());\n   */\n  getPixelDimensions(\n    /** The width of the drawing buffer. */\n    drawingBufferWidth: number,\n    /** The height of the drawing buffer. */\n    drawingBufferHeight: number,\n    /** The distance to the near plane in meters. */\n    distance: number,\n    /** The object onto which to store the result. */\n    result: Vector2\n  ): Vector2 {\n    this._update();\n\n    assert(Number.isFinite(drawingBufferWidth) && Number.isFinite(drawingBufferHeight));\n    // 'Both drawingBufferWidth and drawingBufferHeight are required.'\n    assert(drawingBufferWidth > 0);\n    // 'drawingBufferWidth must be greater than zero.'\n    assert(drawingBufferHeight > 0);\n    // 'drawingBufferHeight must be greater than zero.'\n    assert(distance > 0);\n    // 'distance is required.');\n    assert(result);\n    // 'A result object is required.');\n\n    const inverseNear = 1.0 / this.near;\n    let tanTheta = this.top * inverseNear;\n    const pixelHeight = (2.0 * distance * tanTheta) / drawingBufferHeight;\n    tanTheta = this.right * inverseNear;\n    const pixelWidth = (2.0 * distance * tanTheta) / drawingBufferWidth;\n\n    result.x = pixelWidth;\n    result.y = pixelHeight;\n    return result;\n  }\n\n  // eslint-disable-next-line complexity, max-statements\n  private _update() {\n    assert(\n      Number.isFinite(this.right) &&\n        Number.isFinite(this.left) &&\n        Number.isFinite(this.top) &&\n        Number.isFinite(this.bottom) &&\n        Number.isFinite(this.near) &&\n        Number.isFinite(this.far)\n    );\n    // throw new DeveloperError('right, left, top, bottom, near, or far parameters are not set.');\n\n    const {top, bottom, right, left, near, far} = this;\n\n    if (\n      top !== this._top ||\n      bottom !== this._bottom ||\n      left !== this._left ||\n      right !== this._right ||\n      near !== this._near ||\n      far !== this._far\n    ) {\n      assert(\n        this.near > 0 && this.near < this.far,\n        'near must be greater than zero and less than far.'\n      );\n\n      this._left = left;\n      this._right = right;\n      this._top = top;\n      this._bottom = bottom;\n      this._near = near;\n      this._far = far;\n      this._perspectiveMatrix = new Matrix4().frustum({\n        left,\n        right,\n        bottom,\n        top,\n        near,\n        far\n      });\n      this._infinitePerspective = new Matrix4().frustum({\n        left,\n        right,\n        bottom,\n        top,\n        near,\n        far: Infinity\n      });\n    }\n  }\n}\n"],"file":"perspective-off-center-frustum.js"}