{"version":3,"sources":["../../../../src/lib/algorithms/compute-eigen-decomposition.ts"],"names":["scratchMatrix","Matrix3","scratchUnitary","scratchDiagonal","jMatrix","jMatrixTranspose","computeEigenDecomposition","matrix","result","EIGEN_TOLERANCE","_MathUtils","EPSILON20","EIGEN_MAX_SWEEPS","count","sweep","unitaryMatrix","diagonalMatrix","identity","copy","epsilon","computeFrobeniusNorm","offDiagonalFrobeniusNorm","shurDecomposition","transpose","multiplyRight","multiplyLeft","unitary","toTarget","diagonal","norm","i","temp","Math","sqrt","rowVal","colVal","getElementIndex","tolerance","EPSILON15","maxDiagonal","rotAxis","abs","p","q","c","s","qq","pp","qp","tau","t","IDENTITY","to"],"mappings":"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","sourcesContent":["// This file is derived from the Cesium math library under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\nimport {Matrix3, _MathUtils} from '@math.gl/core';\n\nconst scratchMatrix = new Matrix3();\nconst scratchUnitary = new Matrix3();\nconst scratchDiagonal = new Matrix3();\n\nconst jMatrix = new Matrix3();\nconst jMatrixTranspose = new Matrix3();\n\nexport type EigenDecomposition = {\n  unitary: Matrix3;\n  diagonal: Matrix3;\n};\n\n/**\n * Computes the eigenvectors and eigenvalues of a symmetric matrix.\n *\n * - Returns a diagonal matrix and unitary matrix such that:\n * `matrix = unitary matrix * diagonal matrix * transpose(unitary matrix)`\n * - The values along the diagonal of the diagonal matrix are the eigenvalues. The columns\n * of the unitary matrix are the corresponding eigenvectors.\n * - This routine was created based upon Matrix Computations, 3rd ed., by Golub and Van Loan,\n * section 8.4.3 The Classical Jacobi Algorithm\n *\n * @param matrix The 3x3 matrix to decompose into diagonal and unitary matrix. Expected to be symmetric.\n * @param result Optional object with unitary and diagonal properties which are matrices onto which to store the result.\n * @returns An object with unitary and diagonal properties which are the unitary and diagonal matrices, respectively.\n *\n * @example\n * const a = //... symmetric matrix\n * const result = {\n *   unitary : new Matrix3(),\n *   diagonal : new Matrix3()\n * };\n * computeEigenDecomposition(a, result);\n *\n * const unitaryTranspose = Matrix3.transpose(result.unitary, new Matrix3());\n * const b = Matrix3.multiply(result.unitary, result.diagonal, new Matrix3());\n * Matrix3.multiply(b, unitaryTranspose, b); // b is now equal to a\n *\n * const lambda = result.diagonal.getColumn(0, new Vector3()).x;  // first eigenvalue\n * const v = result.unitary.getColumn(0, new Vector3());          // first eigenvector\n * const c = v.multiplyByScalar(lambda);                          // equal to v.transformByMatrix3(a)\n */\nexport default function computeEigenDecomposition(\n  matrix: number[],\n  // @ts-expect-error accept empty object type\n  result: EigenDecomposition = {}\n): EigenDecomposition {\n  const EIGEN_TOLERANCE = _MathUtils.EPSILON20;\n  const EIGEN_MAX_SWEEPS = 10;\n\n  let count = 0;\n  let sweep = 0;\n\n  const unitaryMatrix = scratchUnitary;\n  const diagonalMatrix = scratchDiagonal;\n\n  unitaryMatrix.identity();\n  diagonalMatrix.copy(matrix);\n\n  const epsilon = EIGEN_TOLERANCE * computeFrobeniusNorm(diagonalMatrix);\n\n  while (sweep < EIGEN_MAX_SWEEPS && offDiagonalFrobeniusNorm(diagonalMatrix) > epsilon) {\n    shurDecomposition(diagonalMatrix, jMatrix);\n\n    jMatrixTranspose.copy(jMatrix).transpose();\n\n    diagonalMatrix.multiplyRight(jMatrix);\n    diagonalMatrix.multiplyLeft(jMatrixTranspose);\n    unitaryMatrix.multiplyRight(jMatrix);\n\n    if (++count > 2) {\n      ++sweep;\n      count = 0;\n    }\n  }\n\n  result.unitary = unitaryMatrix.toTarget(result.unitary);\n  result.diagonal = diagonalMatrix.toTarget(result.diagonal);\n\n  return result;\n}\n\nfunction computeFrobeniusNorm(matrix: Matrix3): number {\n  let norm = 0.0;\n  for (let i = 0; i < 9; ++i) {\n    const temp = matrix[i];\n    norm += temp * temp;\n  }\n  return Math.sqrt(norm);\n}\n\nconst rowVal = [1, 0, 0];\nconst colVal = [2, 2, 1];\n\n// Computes the \"off-diagonal\" Frobenius norm.\n// Assumes matrix is symmetric.\nfunction offDiagonalFrobeniusNorm(matrix: Matrix3): number {\n  let norm = 0.0;\n  for (let i = 0; i < 3; ++i) {\n    const temp = matrix[scratchMatrix.getElementIndex(colVal[i], rowVal[i])];\n    norm += 2.0 * temp * temp;\n  }\n  return Math.sqrt(norm);\n}\n\n// The routine takes a matrix, which is assumed to be symmetric, and\n// finds the largest off-diagonal term, and then creates\n// a matrix (result) which can be used to help reduce it\n//\n// This routine was created based upon Matrix Computations, 3rd ed., by Golub and Van Loan,\n// section 8.4.2 The 2by2 Symmetric Schur Decomposition.\n//\n// eslint-disable-next-line max-statements\nfunction shurDecomposition(matrix: Matrix3, result: Matrix3): Matrix3 {\n  const tolerance = _MathUtils.EPSILON15;\n\n  let maxDiagonal = 0.0;\n  let rotAxis = 1;\n\n  // find pivot (rotAxis) based on max diagonal of matrix\n  for (let i = 0; i < 3; ++i) {\n    const temp = Math.abs(matrix[scratchMatrix.getElementIndex(colVal[i], rowVal[i])]);\n    if (temp > maxDiagonal) {\n      rotAxis = i;\n      maxDiagonal = temp;\n    }\n  }\n\n  const p = rowVal[rotAxis];\n  const q = colVal[rotAxis];\n\n  let c = 1.0;\n  let s = 0.0;\n\n  if (Math.abs(matrix[scratchMatrix.getElementIndex(q, p)]) > tolerance) {\n    const qq = matrix[scratchMatrix.getElementIndex(q, q)];\n    const pp = matrix[scratchMatrix.getElementIndex(p, p)];\n    const qp = matrix[scratchMatrix.getElementIndex(q, p)];\n\n    const tau = (qq - pp) / 2.0 / qp;\n    let t;\n\n    if (tau < 0.0) {\n      t = -1.0 / (-tau + Math.sqrt(1.0 + tau * tau));\n    } else {\n      t = 1.0 / (tau + Math.sqrt(1.0 + tau * tau));\n    }\n\n    c = 1.0 / Math.sqrt(1.0 + t * t);\n    s = t * c;\n  }\n\n  // Copy into result\n  Matrix3.IDENTITY.to(result);\n  result[scratchMatrix.getElementIndex(p, p)] = result[scratchMatrix.getElementIndex(q, q)] = c;\n  result[scratchMatrix.getElementIndex(q, p)] = s;\n  result[scratchMatrix.getElementIndex(p, q)] = -s;\n\n  return result;\n}\n"],"file":"compute-eigen-decomposition.js"}