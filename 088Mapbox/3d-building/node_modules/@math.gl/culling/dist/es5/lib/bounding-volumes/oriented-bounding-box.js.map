{"version":3,"sources":["../../../../src/lib/bounding-volumes/oriented-bounding-box.ts"],"names":["scratchVector3","Vector3","scratchOffset","scratchVectorU","scratchVectorV","scratchVectorW","scratchCorner","scratchToCenter","MATRIX3","COLUMN0ROW0","COLUMN0ROW1","COLUMN0ROW2","COLUMN1ROW0","COLUMN1ROW1","COLUMN1ROW2","COLUMN2ROW0","COLUMN2ROW1","COLUMN2ROW2","OrientedBoundingBox","center","halfAxes","from","Matrix3","xAxis","getColumn","yAxis","zAxis","len","normXAxis","normalize","normYAxis","normZAxis","Quaternion","fromMatrix3","halfSize","quaternion","quaternionObject","directionsMatrix","fromQuaternion","right","Boolean","equals","result","BoundingSphere","u","v","w","cornerVector","copy","add","radius","magnitude","plane","normal","normalX","x","normalY","y","normalZ","z","radEffective","Math","abs","distanceToPlane","dot","distance","INTERSECTION","OUTSIDE","INSIDE","INTERSECTING","point","sqrt","distanceSquaredTo","offset","subtract","uHalf","vHalf","wHalf","distanceSquared","d","position","direction","minDist","Number","POSITIVE_INFINITY","maxDist","NEGATIVE_INFINITY","corner","toCenter","mag","min","max","transformation","transformAsPoint","Error"],"mappings":"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","sourcesContent":["// This file is derived from the Cesium math library under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\nimport {Vector3, Matrix3, Matrix4, Quaternion, NumericArray} from '@math.gl/core';\nimport type {BoundingVolume} from './bounding-volume';\nimport BoundingSphere from './bounding-sphere';\nimport type Plane from '../plane';\nimport {INTERSECTION} from '../../constants';\n\nconst scratchVector3 = new Vector3();\nconst scratchOffset = new Vector3();\nconst scratchVectorU = new Vector3();\nconst scratchVectorV = new Vector3();\nconst scratchVectorW = new Vector3();\nconst scratchCorner = new Vector3();\nconst scratchToCenter = new Vector3();\n\nconst MATRIX3 = {\n  COLUMN0ROW0: 0,\n  COLUMN0ROW1: 1,\n  COLUMN0ROW2: 2,\n  COLUMN1ROW0: 3,\n  COLUMN1ROW1: 4,\n  COLUMN1ROW2: 5,\n  COLUMN2ROW0: 6,\n  COLUMN2ROW1: 7,\n  COLUMN2ROW2: 8\n};\n\n/**\n * An OrientedBoundingBox of some object is a closed and convex cuboid.\n * It can provide a tighter bounding volume than `BoundingSphere` or\n * `AxisAlignedBoundingBox` in many cases.\n */\nexport default class OrientedBoundingBox implements BoundingVolume {\n  center: Vector3;\n  halfAxes: Matrix3;\n\n  /**\n   * An OrientedBoundingBox of some object is a closed and convex cuboid.\n   * It can provide a tighter bounding volume than\n   * `BoundingSphere` or `AxisAlignedBoundingBox` in many cases.\n   */\n  constructor(center?: readonly number[], halfAxes?: readonly number[]);\n  constructor(center: Readonly<NumericArray> = [0, 0, 0], halfAxes = [0, 0, 0, 0, 0, 0, 0, 0, 0]) {\n    this.center = new Vector3().from(center);\n    this.halfAxes = new Matrix3(halfAxes);\n  }\n\n  /** Returns an array with three halfSizes for the bounding box */\n  get halfSize(): number[] {\n    const xAxis = this.halfAxes.getColumn(0);\n    const yAxis = this.halfAxes.getColumn(1);\n    const zAxis = this.halfAxes.getColumn(2);\n    return [new Vector3(xAxis).len(), new Vector3(yAxis).len(), new Vector3(zAxis).len()];\n  }\n\n  /** Returns a quaternion describing the orientation of the bounding box */\n  get quaternion(): Quaternion {\n    const xAxis = this.halfAxes.getColumn(0);\n    const yAxis = this.halfAxes.getColumn(1);\n    const zAxis = this.halfAxes.getColumn(2);\n    const normXAxis = new Vector3(xAxis).normalize();\n    const normYAxis = new Vector3(yAxis).normalize();\n    const normZAxis = new Vector3(zAxis).normalize();\n    return new Quaternion().fromMatrix3(new Matrix3([...normXAxis, ...normYAxis, ...normZAxis]));\n  }\n\n  /**\n   * Create OrientedBoundingBox from quaternion based OBB,\n   */\n  fromCenterHalfSizeQuaternion(\n    center: number[],\n    halfSize: number[],\n    quaternion: number[]\n  ): OrientedBoundingBox {\n    const quaternionObject = new Quaternion(quaternion);\n    const directionsMatrix = new Matrix3().fromQuaternion(quaternionObject);\n    directionsMatrix[0] = directionsMatrix[0] * halfSize[0];\n    directionsMatrix[1] = directionsMatrix[1] * halfSize[0];\n    directionsMatrix[2] = directionsMatrix[2] * halfSize[0];\n    directionsMatrix[3] = directionsMatrix[3] * halfSize[1];\n    directionsMatrix[4] = directionsMatrix[4] * halfSize[1];\n    directionsMatrix[5] = directionsMatrix[5] * halfSize[1];\n    directionsMatrix[6] = directionsMatrix[6] * halfSize[2];\n    directionsMatrix[7] = directionsMatrix[7] * halfSize[2];\n    directionsMatrix[8] = directionsMatrix[8] * halfSize[2];\n    this.center = new Vector3().from(center);\n    this.halfAxes = directionsMatrix;\n    return this;\n  }\n\n  /** Duplicates a OrientedBoundingBox instance. */\n  clone(): OrientedBoundingBox {\n    return new OrientedBoundingBox(this.center, this.halfAxes);\n  }\n\n  /** Compares the provided OrientedBoundingBox component wise and returns */\n  equals(right: OrientedBoundingBox): boolean {\n    return (\n      this === right ||\n      (Boolean(right) && this.center.equals(right.center) && this.halfAxes.equals(right.halfAxes))\n    );\n  }\n\n  /** Computes a tight-fitting bounding sphere enclosing the provided oriented bounding box. */\n  getBoundingSphere(result = new BoundingSphere()): BoundingSphere {\n    const halfAxes = this.halfAxes;\n    const u = halfAxes.getColumn(0, scratchVectorU);\n    const v = halfAxes.getColumn(1, scratchVectorV);\n    const w = halfAxes.getColumn(2, scratchVectorW);\n\n    // Calculate \"corner\" vector\n    const cornerVector = scratchVector3.copy(u).add(v).add(w);\n\n    result.center.copy(this.center);\n    result.radius = cornerVector.magnitude();\n\n    return result;\n  }\n\n  /** Determines which side of a plane the oriented bounding box is located. */\n  intersectPlane(plane: Plane): number {\n    const center = this.center;\n    const normal = plane.normal;\n    const halfAxes = this.halfAxes;\n\n    const normalX = normal.x;\n    const normalY = normal.y;\n    const normalZ = normal.z;\n\n    // Plane is used as if it is its normal; the first three components are assumed to be normalized\n    const radEffective =\n      Math.abs(\n        normalX * halfAxes[MATRIX3.COLUMN0ROW0] +\n          normalY * halfAxes[MATRIX3.COLUMN0ROW1] +\n          normalZ * halfAxes[MATRIX3.COLUMN0ROW2]\n      ) +\n      Math.abs(\n        normalX * halfAxes[MATRIX3.COLUMN1ROW0] +\n          normalY * halfAxes[MATRIX3.COLUMN1ROW1] +\n          normalZ * halfAxes[MATRIX3.COLUMN1ROW2]\n      ) +\n      Math.abs(\n        normalX * halfAxes[MATRIX3.COLUMN2ROW0] +\n          normalY * halfAxes[MATRIX3.COLUMN2ROW1] +\n          normalZ * halfAxes[MATRIX3.COLUMN2ROW2]\n      );\n    const distanceToPlane = normal.dot(center) + plane.distance;\n\n    if (distanceToPlane <= -radEffective) {\n      // The entire box is on the negative side of the plane normal\n      return INTERSECTION.OUTSIDE;\n    } else if (distanceToPlane >= radEffective) {\n      // The entire box is on the positive side of the plane normal\n      return INTERSECTION.INSIDE;\n    }\n    return INTERSECTION.INTERSECTING;\n  }\n\n  /** Computes the estimated distance from the closest point on a bounding box to a point. */\n  distanceTo(point: readonly number[]): number {\n    return Math.sqrt(this.distanceSquaredTo(point));\n  }\n\n  /**\n   * Computes the estimated distance squared from the closest point\n   * on a bounding box to a point.\n   * See Geometric Tools for Computer Graphics 10.4.2\n   */\n  distanceSquaredTo(point: readonly number[]): number {\n    // Computes the estimated distance squared from the\n    // closest point on a bounding box to a point.\n    // See Geometric Tools for Computer Graphics 10.4.2\n    const offset = scratchOffset.from(point).subtract(this.center);\n\n    const halfAxes = this.halfAxes;\n    const u = halfAxes.getColumn(0, scratchVectorU);\n    const v = halfAxes.getColumn(1, scratchVectorV);\n    const w = halfAxes.getColumn(2, scratchVectorW);\n\n    const uHalf = u.magnitude();\n    const vHalf = v.magnitude();\n    const wHalf = w.magnitude();\n\n    u.normalize();\n    v.normalize();\n    w.normalize();\n\n    let distanceSquared = 0.0;\n    let d;\n\n    d = Math.abs(offset.dot(u)) - uHalf;\n    if (d > 0) {\n      distanceSquared += d * d;\n    }\n\n    d = Math.abs(offset.dot(v)) - vHalf;\n    if (d > 0) {\n      distanceSquared += d * d;\n    }\n\n    d = Math.abs(offset.dot(w)) - wHalf;\n    if (d > 0) {\n      distanceSquared += d * d;\n    }\n\n    return distanceSquared;\n  }\n\n  /**\n   * The distances calculated by the vector from the center of the bounding box\n   * to position projected onto direction.\n   *\n   * - If you imagine the infinite number of planes with normal direction,\n   *   this computes the smallest distance to the closest and farthest planes\n   *   from `position` that intersect the bounding box.\n   *\n   * @param position The position to calculate the distance from.\n   * @param direction The direction from position.\n   * @param result An Interval (array of length 2) to store the nearest and farthest distances.\n   * @returns Interval (array of length 2) with nearest and farthest distances\n   *   on the bounding box from position in direction.\n   */\n  // eslint-disable-next-line max-statements\n  computePlaneDistances(\n    position: readonly number[],\n    direction: Vector3,\n    result: number[] = [-0, -0]\n  ): number[] {\n    let minDist = Number.POSITIVE_INFINITY;\n    let maxDist = Number.NEGATIVE_INFINITY;\n\n    const center = this.center;\n    const halfAxes = this.halfAxes;\n\n    const u = halfAxes.getColumn(0, scratchVectorU);\n    const v = halfAxes.getColumn(1, scratchVectorV);\n    const w = halfAxes.getColumn(2, scratchVectorW);\n\n    // project first corner\n    const corner = scratchCorner.copy(u).add(v).add(w).add(center);\n\n    const toCenter = scratchToCenter.copy(corner).subtract(position);\n    let mag = direction.dot(toCenter);\n\n    minDist = Math.min(mag, minDist);\n    maxDist = Math.max(mag, maxDist);\n\n    // project second corner\n    corner.copy(center).add(u).add(v).subtract(w);\n\n    toCenter.copy(corner).subtract(position);\n    mag = direction.dot(toCenter);\n\n    minDist = Math.min(mag, minDist);\n    maxDist = Math.max(mag, maxDist);\n\n    // project third corner\n    corner.copy(center).add(u).subtract(v).add(w);\n\n    toCenter.copy(corner).subtract(position);\n    mag = direction.dot(toCenter);\n\n    minDist = Math.min(mag, minDist);\n    maxDist = Math.max(mag, maxDist);\n\n    // project fourth corner\n    corner.copy(center).add(u).subtract(v).subtract(w);\n\n    toCenter.copy(corner).subtract(position);\n    mag = direction.dot(toCenter);\n\n    minDist = Math.min(mag, minDist);\n    maxDist = Math.max(mag, maxDist);\n\n    // project fifth corner\n    center.copy(corner).subtract(u).add(v).add(w);\n\n    toCenter.copy(corner).subtract(position);\n    mag = direction.dot(toCenter);\n\n    minDist = Math.min(mag, minDist);\n    maxDist = Math.max(mag, maxDist);\n\n    // project sixth corner\n    center.copy(corner).subtract(u).add(v).subtract(w);\n\n    toCenter.copy(corner).subtract(position);\n    mag = direction.dot(toCenter);\n\n    minDist = Math.min(mag, minDist);\n    maxDist = Math.max(mag, maxDist);\n\n    // project seventh corner\n    center.copy(corner).subtract(u).subtract(v).add(w);\n\n    toCenter.copy(corner).subtract(position);\n    mag = direction.dot(toCenter);\n\n    minDist = Math.min(mag, minDist);\n    maxDist = Math.max(mag, maxDist);\n\n    // project eighth corner\n    center.copy(corner).subtract(u).subtract(v).subtract(w);\n\n    toCenter.copy(corner).subtract(position);\n    mag = direction.dot(toCenter);\n\n    minDist = Math.min(mag, minDist);\n    maxDist = Math.max(mag, maxDist);\n\n    result[0] = minDist;\n    result[1] = maxDist;\n    return result;\n  }\n\n  /**\n   * Applies a 4x4 affine transformation matrix to a bounding sphere.\n   * @param transform The transformation matrix to apply to the bounding sphere.\n   * @returns itself, i.e. the modified BoundingVolume.\n   */\n  transform(transformation: readonly number[]): this {\n    this.center.transformAsPoint(transformation);\n\n    const xAxis = this.halfAxes.getColumn(0, scratchVectorU);\n    xAxis.transformAsPoint(transformation);\n\n    const yAxis = this.halfAxes.getColumn(1, scratchVectorV);\n    yAxis.transformAsPoint(transformation);\n\n    const zAxis = this.halfAxes.getColumn(2, scratchVectorW);\n    zAxis.transformAsPoint(transformation);\n\n    this.halfAxes = new Matrix3([...xAxis, ...yAxis, ...zAxis]);\n    return this;\n  }\n\n  getTransform(): Matrix4 {\n    // const modelMatrix = Matrix4.fromRotationTranslation(this.boundingVolume.halfAxes, this.boundingVolume.center);\n    // return modelMatrix;\n    throw new Error('not implemented');\n  }\n}\n"],"file":"oriented-bounding-box.js"}