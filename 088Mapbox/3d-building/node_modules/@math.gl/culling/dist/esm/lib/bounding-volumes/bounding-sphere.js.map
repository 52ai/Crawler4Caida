{"version":3,"sources":["../../../../src/lib/bounding-volumes/bounding-sphere.ts"],"names":["Vector3","mat4","INTERSECTION","scratchVector","scratchVector2","BoundingSphere","constructor","center","radius","fromCenterRadius","from","fromCornerPoints","corner","oppositeCorner","add","scale","distance","equals","right","Boolean","clone","union","boundingSphere","leftCenter","leftRadius","rightCenter","rightRadius","toRightCenter","copy","subtract","centerSeparation","magnitude","halfDistanceBetweenTangentPoints","expand","point","scratchPoint","transform","getScaling","Math","max","distanceSquaredTo","d","distanceTo","delta","len","intersectPlane","plane","normal","distanceToPlane","dot","OUTSIDE","INTERSECTING","INSIDE"],"mappings":"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","sourcesContent":["// This file is derived from the Cesium math library under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\nimport {NumericArray, Vector3} from '@math.gl/core';\nimport * as mat4 from 'gl-matrix/mat4';\nimport {INTERSECTION} from '../../constants';\nimport {BoundingVolume} from './bounding-volume';\nimport Plane from '../plane';\n\nconst scratchVector = new Vector3();\nconst scratchVector2 = new Vector3();\n\n/** A BoundingSphere */\nexport default class BoundingSphere implements BoundingVolume {\n  center: Vector3;\n  radius: number;\n\n  /** Creates a bounding sphere */\n  constructor(center: readonly number[] = [0, 0, 0], radius: number = 0.0) {\n    this.radius = -0;\n    this.center = new Vector3();\n    this.fromCenterRadius(center, radius);\n  }\n\n  /** Sets the bounding sphere from `center` and `radius`. */\n  fromCenterRadius(center: readonly number[], radius: number): this {\n    this.center.from(center);\n    this.radius = radius;\n    return this;\n  }\n\n  /**\n   * Computes a bounding sphere from the corner points of an axis-aligned bounding box.  The sphere\n   * tightly and fully encompasses the box.\n   */\n  fromCornerPoints(corner: readonly number[], oppositeCorner: readonly number[]): this {\n    oppositeCorner = scratchVector.from(oppositeCorner);\n    this.center = new Vector3().from(corner).add(oppositeCorner).scale(0.5);\n    this.radius = this.center.distance(oppositeCorner);\n    return this;\n  }\n\n  /** Compares the provided BoundingSphere component wise */\n  equals(right: BoundingSphere): boolean {\n    return (\n      this === right ||\n      (Boolean(right) && this.center.equals(right.center) && this.radius === right.radius)\n    );\n  }\n\n  /** Duplicates a BoundingSphere instance. */\n  clone(): BoundingSphere {\n    return new BoundingSphere(this.center, this.radius);\n  }\n\n  /** Computes a bounding sphere that contains both the left and right bounding spheres. */\n  union(boundingSphere: BoundingSphere): BoundingSphere {\n    const leftCenter = this.center;\n    const leftRadius = this.radius;\n    const rightCenter = boundingSphere.center;\n    const rightRadius = boundingSphere.radius;\n\n    const toRightCenter = scratchVector.copy(rightCenter).subtract(leftCenter);\n    const centerSeparation = toRightCenter.magnitude();\n\n    if (leftRadius >= centerSeparation + rightRadius) {\n      // Left sphere wins.\n      return this.clone();\n    }\n\n    if (rightRadius >= centerSeparation + leftRadius) {\n      // Right sphere wins.\n      return boundingSphere.clone();\n    }\n\n    // There are two tangent points, one on far side of each sphere.\n    const halfDistanceBetweenTangentPoints = (leftRadius + centerSeparation + rightRadius) * 0.5;\n\n    // Compute the center point halfway between the two tangent points.\n    scratchVector2\n      .copy(toRightCenter)\n      .scale((-leftRadius + halfDistanceBetweenTangentPoints) / centerSeparation)\n      .add(leftCenter);\n\n    this.center.copy(scratchVector2);\n    this.radius = halfDistanceBetweenTangentPoints;\n\n    return this;\n  }\n\n  /** Computes a bounding sphere by enlarging the provided sphere to contain the provided point. */\n  expand(point: readonly number[]): this {\n    const scratchPoint = scratchVector.from(point);\n    const radius = scratchPoint.subtract(this.center).magnitude();\n    if (radius > this.radius) {\n      this.radius = radius;\n    }\n    return this;\n  }\n\n  // BoundingVolume interface\n\n  /**\n   * Applies a 4x4 affine transformation matrix to a bounding sphere.\n   * @param sphere The bounding sphere to apply the transformation to.\n   * @param transform The transformation matrix to apply to the bounding sphere.\n   * @returns self.\n   */\n  transform(transform: readonly number[]): this {\n    this.center.transform(transform);\n    const scale = mat4.getScaling(scratchVector, transform);\n    this.radius = Math.max(scale[0], Math.max(scale[1], scale[2])) * this.radius;\n    return this;\n  }\n\n  /** Computes the estimated distance squared from the closest point on a bounding sphere to a point. */\n  distanceSquaredTo(point: Readonly<NumericArray>): number {\n    const d = this.distanceTo(point);\n    return d * d;\n  }\n\n  /** Computes the estimated distance from the closest point on a bounding sphere to a point. */\n  distanceTo(point: Readonly<NumericArray>): number {\n    const scratchPoint = scratchVector.from(point);\n    const delta = scratchPoint.subtract(this.center);\n    return Math.max(0, delta.len() - this.radius);\n  }\n\n  /** Determines which side of a plane a sphere is located. */\n  intersectPlane(plane: Plane): number {\n    const center = this.center;\n    const radius = this.radius;\n    const normal = plane.normal;\n    const distanceToPlane = normal.dot(center) + plane.distance;\n\n    // The center point is negative side of the plane normal\n    if (distanceToPlane < -radius) {\n      return INTERSECTION.OUTSIDE;\n    }\n    // The center point is positive side of the plane, but radius extends beyond it; partial overlap\n    if (distanceToPlane < radius) {\n      return INTERSECTION.INTERSECTING;\n    }\n    // The center point and radius is positive side of the plane\n    return INTERSECTION.INSIDE;\n  }\n}\n"],"file":"bounding-sphere.js"}