{"version":3,"sources":["../../../src/ellipsoid/ellipsoid.ts"],"names":["Vector3","Matrix4","assert","equals","_MathUtils","vec3","WGS84_RADIUS_X","WGS84_RADIUS_Y","WGS84_RADIUS_Z","fromCartographicToRadians","toCartographicFromRadians","scaleToGeodeticSurface","localFrameToFixedFrame","scratchVector","scratchNormal","scratchK","scratchPosition","scratchHeight","scratchCartesian","wgs84","Ellipsoid","constructor","x","y","z","EPSILON1","radii","radiiSquared","radiiToTheFourth","oneOverRadii","oneOverRadiiSquared","minimumRadius","Math","min","maximumRadius","max","squaredXOverSquaredZ","Object","freeze","right","Boolean","toString","cartographicToCartesian","cartographic","result","normal","k","height","geodeticSurfaceNormalCartographic","copy","scale","gamma","sqrt","dot","add","to","cartesianToCartographic","cartesian","from","point","undefined","geodeticSurfaceNormal","h","subtract","longitude","atan2","latitude","asin","sign","length","eastNorthUpToFixedFrame","origin","firstAxis","secondAxis","thirdAxis","geocentricSurfaceNormal","normalize","cartographicVectorRadians","cosLatitude","cos","set","sin","scaleToGeocentricSurface","positionX","positionY","positionZ","beta","multiplyScalar","transformPositionToScaledSpace","position","transformPositionFromScaledSpace","getSurfaceNormalIntersectionWithZAxis","buffer","EPSILON15","abs"],"mappings":"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","sourcesContent":["// This file is derived from the Cesium math library under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\n/* eslint-disable */\nimport {\n  Vector3,\n  Matrix4,\n  toRadians,\n  toDegrees,\n  assert,\n  equals,\n  _MathUtils,\n  NumericArray\n} from '@math.gl/core';\nimport * as vec3 from 'gl-matrix/vec3';\n\nimport {WGS84_RADIUS_X, WGS84_RADIUS_Y, WGS84_RADIUS_Z} from '../constants';\nimport {fromCartographicToRadians, toCartographicFromRadians} from '../type-utils';\n\nimport scaleToGeodeticSurface from './helpers/scale-to-geodetic-surface';\nimport localFrameToFixedFrame from './helpers/ellipsoid-transform';\n\nconst scratchVector = new Vector3();\nconst scratchNormal = new Vector3();\nconst scratchK = new Vector3();\nconst scratchPosition = new Vector3();\nconst scratchHeight = new Vector3();\nconst scratchCartesian = new Vector3();\n\nlet wgs84;\n\n/**\n * A quadratic surface defined in Cartesian coordinates by the equation\n * `(x / a)^2 + (y / b)^2 + (z / c)^2 = 1`.  Primarily used\n * to represent the shape of planetary bodies.\n */\nexport default class Ellipsoid {\n  /** An Ellipsoid instance initialized to the WGS84 standard. */\n  static readonly WGS84: Ellipsoid = new Ellipsoid(WGS84_RADIUS_X, WGS84_RADIUS_Y, WGS84_RADIUS_Z);\n\n  readonly radii: Vector3;\n  readonly radiiSquared: Vector3;\n  readonly radiiToTheFourth: Vector3;\n  readonly oneOverRadii: Vector3;\n  readonly oneOverRadiiSquared: Vector3;\n  readonly minimumRadius: number;\n  readonly maximumRadius: number;\n  readonly centerToleranceSquared: number = _MathUtils.EPSILON1;\n  readonly squaredXOverSquaredZ: number;\n\n  /** Creates an Ellipsoid from a Cartesian specifying the radii in x, y, and z directions. */\n  constructor(x: number, y: number, z: number);\n  constructor();\n\n  constructor(x = 0.0, y = 0.0, z = 0.0) {\n    assert(x >= 0.0);\n    assert(y >= 0.0);\n    assert(z >= 0.0);\n\n    this.radii = new Vector3(x, y, z);\n\n    this.radiiSquared = new Vector3(x * x, y * y, z * z);\n\n    this.radiiToTheFourth = new Vector3(x * x * x * x, y * y * y * y, z * z * z * z);\n\n    this.oneOverRadii = new Vector3(\n      x === 0.0 ? 0.0 : 1.0 / x,\n      y === 0.0 ? 0.0 : 1.0 / y,\n      z === 0.0 ? 0.0 : 1.0 / z\n    );\n\n    this.oneOverRadiiSquared = new Vector3(\n      x === 0.0 ? 0.0 : 1.0 / (x * x),\n      y === 0.0 ? 0.0 : 1.0 / (y * y),\n      z === 0.0 ? 0.0 : 1.0 / (z * z)\n    );\n\n    this.minimumRadius = Math.min(x, y, z);\n\n    this.maximumRadius = Math.max(x, y, z);\n\n    if (this.radiiSquared.z !== 0) {\n      this.squaredXOverSquaredZ = this.radiiSquared.x / this.radiiSquared.z;\n    }\n\n    Object.freeze(this);\n  }\n\n  /** Compares this Ellipsoid against the provided Ellipsoid componentwise */\n  equals(right: Ellipsoid): boolean {\n    return this === right || Boolean(right && this.radii.equals(right.radii));\n  }\n\n  /** Creates a string representing this Ellipsoid in the format '(radii.x, radii.y, radii.z)'. */\n  toString(): string {\n    return this.radii.toString();\n  }\n\n  /** Converts the provided cartographic to Cartesian representation. */\n  cartographicToCartesian(cartographic: number[], result: Vector3): Vector3;\n  cartographicToCartesian(cartographic: number[], result?: number[]): number[];\n\n  cartographicToCartesian(cartographic, result = [0, 0, 0]) {\n    const normal = scratchNormal;\n    const k = scratchK;\n\n    const [, , height] = cartographic;\n    this.geodeticSurfaceNormalCartographic(cartographic, normal);\n    k.copy(this.radiiSquared).scale(normal);\n\n    const gamma = Math.sqrt(normal.dot(k));\n    k.scale(1 / gamma);\n\n    normal.scale(height);\n\n    k.add(normal);\n\n    return k.to(result);\n  }\n\n  /** Converts the provided cartesian to cartographic (lng/lat/z) representation.\n   * The cartesian is undefined at the center of the ellipsoid. */\n  cartesianToCartographic(cartesian: number[], result: Vector3): Vector3;\n  cartesianToCartographic(cartesian: number[], result?: number[]): number[];\n\n  cartesianToCartographic(cartesian, result = [0, 0, 0]) {\n    scratchCartesian.from(cartesian);\n    const point = this.scaleToGeodeticSurface(scratchCartesian, scratchPosition);\n\n    if (!point) {\n      return undefined;\n    }\n\n    const normal = this.geodeticSurfaceNormal(point, scratchNormal);\n\n    const h = scratchHeight;\n    h.copy(scratchCartesian).subtract(point);\n\n    const longitude = Math.atan2(normal.y, normal.x);\n    const latitude = Math.asin(normal.z);\n    const height = Math.sign(vec3.dot(h, scratchCartesian)) * vec3.length(h);\n\n    return toCartographicFromRadians([longitude, latitude, height], result);\n  }\n\n  /** Computes a 4x4 transformation matrix from a reference frame with an east-north-up axes\n   * centered at the provided origin to the provided ellipsoid's fixed reference frame. */\n  eastNorthUpToFixedFrame(origin: number[], result?: Matrix4): Matrix4;\n  eastNorthUpToFixedFrame(origin: number[], result: number[]): number[];\n\n  eastNorthUpToFixedFrame(origin, result = new Matrix4()) {\n    return localFrameToFixedFrame(this, 'east', 'north', 'up', origin, result);\n  }\n\n  /** Computes a 4x4 transformation matrix from a reference frame centered at\n   * the provided origin to the ellipsoid's fixed reference frame.\n   */\n  localFrameToFixedFrame(\n    firstAxis: string,\n    secondAxis: string,\n    thirdAxis: string,\n    origin: Readonly<NumericArray>,\n    result?: Matrix4\n  ): Matrix4;\n  localFrameToFixedFrame<Matrix4T>(\n    firstAxis: string,\n    secondAxis: string,\n    thirdAxis: string,\n    origin: Readonly<NumericArray>,\n    result: number[]\n  ): number[];\n\n  // Computes a 4x4 transformation matrix from a reference frame centered at\n  // the provided origin to the ellipsoid's fixed reference frame.\n  localFrameToFixedFrame(firstAxis, secondAxis, thirdAxis, origin, result = new Matrix4()) {\n    return localFrameToFixedFrame(this, firstAxis, secondAxis, thirdAxis, origin, result);\n  }\n\n  /** Computes the unit vector directed from the center of this ellipsoid toward\n   * the provided Cartesian position. */\n  geocentricSurfaceNormal(cartesian: number[], result?: number[]): number[];\n  geocentricSurfaceNormal<NumArray>(cartesian: number[], result: NumArray): NumArray;\n  geocentricSurfaceNormal(cartesian, result = [0, 0, 0]) {\n    return scratchVector.from(cartesian).normalize().to(result);\n  }\n\n  /** Computes the normal of the plane tangent to the surface of the ellipsoid at provided position. */\n  geodeticSurfaceNormalCartographic<NumArray>(cartographic: number[], result: NumArray): NumArray;\n  geodeticSurfaceNormalCartographic(cartographic: number[]): number[];\n  geodeticSurfaceNormalCartographic(cartographic, result = [0, 0, 0]) {\n    const cartographicVectorRadians = fromCartographicToRadians(cartographic);\n\n    const longitude = cartographicVectorRadians[0];\n    const latitude = cartographicVectorRadians[1];\n\n    const cosLatitude = Math.cos(latitude);\n\n    scratchVector\n      .set(cosLatitude * Math.cos(longitude), cosLatitude * Math.sin(longitude), Math.sin(latitude))\n      .normalize();\n\n    return scratchVector.to(result);\n  }\n\n  /** Computes the normal of the plane tangent to the surface of the ellipsoid at the provided position. */\n  geodeticSurfaceNormal<NumArrayT>(cartesian: number[], result: NumArrayT): NumArrayT;\n  geodeticSurfaceNormal(cartesian: number[]): number[];\n  geodeticSurfaceNormal(cartesian, result = [0, 0, 0]) {\n    return scratchVector.from(cartesian).scale(this.oneOverRadiiSquared).normalize().to(result);\n  }\n\n  /** Scales the provided Cartesian position along the geodetic surface normal\n   * so that it is on the surface of this ellipsoid.  If the position is\n   * at the center of the ellipsoid, this function returns undefined. */\n  scaleToGeodeticSurface(cartesian: number[], result?: number[]): number[] {\n    return scaleToGeodeticSurface(cartesian, this, result);\n  }\n\n  /** Scales the provided Cartesian position along the geocentric surface normal\n   * so that it is on the surface of this ellipsoid. */\n  scaleToGeocentricSurface(cartesian: number[], result: number[] = [0, 0, 0]): number[] {\n    scratchPosition.from(cartesian);\n\n    const positionX = scratchPosition.x;\n    const positionY = scratchPosition.y;\n    const positionZ = scratchPosition.z;\n    const oneOverRadiiSquared = this.oneOverRadiiSquared;\n\n    const beta =\n      1.0 /\n      Math.sqrt(\n        positionX * positionX * oneOverRadiiSquared.x +\n          positionY * positionY * oneOverRadiiSquared.y +\n          positionZ * positionZ * oneOverRadiiSquared.z\n      );\n\n    return scratchPosition.multiplyScalar(beta).to(result);\n  }\n\n  /** Transforms a Cartesian X, Y, Z position to the ellipsoid-scaled space by multiplying\n   * its components by the result of `Ellipsoid#oneOverRadii` */\n  transformPositionToScaledSpace(position: number[], result: number[] = [0, 0, 0]): number[] {\n    return scratchPosition.from(position).scale(this.oneOverRadii).to(result);\n  }\n\n  /** Transforms a Cartesian X, Y, Z position from the ellipsoid-scaled space by multiplying\n   * its components by the result of `Ellipsoid#radii`. */\n  transformPositionFromScaledSpace(position: number[], result: number[] = [0, 0, 0]): number[] {\n    return scratchPosition.from(position).scale(this.radii).to(result);\n  }\n\n  /** Computes a point which is the intersection of the surface normal with the z-axis. */\n  getSurfaceNormalIntersectionWithZAxis(\n    position: number[],\n    buffer: number = 0,\n    result: number[] = [0, 0, 0]\n  ): number[] {\n    // Ellipsoid must be an ellipsoid of revolution (radii.x == radii.y)\n    assert(equals(this.radii.x, this.radii.y, _MathUtils.EPSILON15));\n    assert(this.radii.z > 0);\n\n    scratchPosition.from(position);\n    const z = scratchPosition.z * (1 - this.squaredXOverSquaredZ);\n\n    if (Math.abs(z) >= this.radii.z - buffer) {\n      return undefined;\n    }\n\n    return scratchPosition.set(0.0, 0.0, z).to(result);\n  }\n}\n"],"file":"ellipsoid.js"}