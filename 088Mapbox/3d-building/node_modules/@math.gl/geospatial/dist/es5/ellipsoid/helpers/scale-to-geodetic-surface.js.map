{"version":3,"sources":["../../../../src/ellipsoid/helpers/scale-to-geodetic-surface.ts"],"names":["scratchVector","Vector3","scaleToGeodeticSurfaceIntersection","scaleToGeodeticSurfaceGradient","scaleToGeodeticSurface","cartesian","ellipsoid","result","oneOverRadii","oneOverRadiiSquared","centerToleranceSquared","from","positionX","x","positionY","y","positionZ","z","oneOverRadiiX","oneOverRadiiY","oneOverRadiiZ","x2","y2","z2","squaredNorm","ratio","Math","sqrt","Number","isFinite","undefined","intersection","copy","scale","to","oneOverRadiiSquaredX","oneOverRadiiSquaredY","oneOverRadiiSquaredZ","gradient","set","lambda","len","correction","xMultiplier","yMultiplier","zMultiplier","func","xMultiplier2","yMultiplier2","zMultiplier2","xMultiplier3","yMultiplier3","zMultiplier3","denominator","derivative","abs","_MathUtils","EPSILON12"],"mappings":"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","sourcesContent":["/* eslint-disable */\nimport {Vector3, _MathUtils} from '@math.gl/core';\nimport type Ellipsoid from '../ellipsoid';\n\nconst scratchVector = new Vector3();\nconst scaleToGeodeticSurfaceIntersection = new Vector3();\nconst scaleToGeodeticSurfaceGradient = new Vector3();\n\n// Scales the provided Cartesian position along the geodetic surface normal\n// so that it is on the surface of this ellipsoid.  If the position is\n// at the center of the ellipsoid, this function returns undefined.\nexport default function scaleToGeodeticSurface(\n  cartesian: number[],\n  ellipsoid: Ellipsoid,\n  result: number[] = []\n): number[] {\n  const {oneOverRadii, oneOverRadiiSquared, centerToleranceSquared} = ellipsoid;\n\n  scratchVector.from(cartesian);\n\n  const positionX = scratchVector.x;\n  const positionY = scratchVector.y;\n  const positionZ = scratchVector.z;\n\n  const oneOverRadiiX = oneOverRadii.x;\n  const oneOverRadiiY = oneOverRadii.y;\n  const oneOverRadiiZ = oneOverRadii.z;\n\n  const x2 = positionX * positionX * oneOverRadiiX * oneOverRadiiX;\n  const y2 = positionY * positionY * oneOverRadiiY * oneOverRadiiY;\n  const z2 = positionZ * positionZ * oneOverRadiiZ * oneOverRadiiZ;\n\n  // Compute the squared ellipsoid norm.\n  const squaredNorm = x2 + y2 + z2;\n  const ratio = Math.sqrt(1.0 / squaredNorm);\n\n  // When very close to center or at center\n  if (!Number.isFinite(ratio)) {\n    return undefined;\n  }\n\n  // As an initial approximation, assume that the radial intersection is the projection point.\n  const intersection = scaleToGeodeticSurfaceIntersection;\n  intersection.copy(cartesian).scale(ratio);\n\n  // If the position is near the center, the iteration will not converge.\n  if (squaredNorm < centerToleranceSquared) {\n    return intersection.to(result);\n  }\n\n  const oneOverRadiiSquaredX = oneOverRadiiSquared.x;\n  const oneOverRadiiSquaredY = oneOverRadiiSquared.y;\n  const oneOverRadiiSquaredZ = oneOverRadiiSquared.z;\n\n  // Use the gradient at the intersection point in place of the true unit normal.\n  // The difference in magnitude will be absorbed in the multiplier.\n  const gradient = scaleToGeodeticSurfaceGradient;\n  gradient.set(\n    intersection.x * oneOverRadiiSquaredX * 2.0,\n    intersection.y * oneOverRadiiSquaredY * 2.0,\n    intersection.z * oneOverRadiiSquaredZ * 2.0\n  );\n\n  // Compute the initial guess at the normal vector multiplier, lambda.\n  let lambda = ((1.0 - ratio) * scratchVector.len()) / (0.5 * gradient.len());\n  let correction = 0.0;\n\n  let xMultiplier;\n  let yMultiplier;\n  let zMultiplier;\n  let func;\n\n  do {\n    lambda -= correction;\n\n    xMultiplier = 1.0 / (1.0 + lambda * oneOverRadiiSquaredX);\n    yMultiplier = 1.0 / (1.0 + lambda * oneOverRadiiSquaredY);\n    zMultiplier = 1.0 / (1.0 + lambda * oneOverRadiiSquaredZ);\n\n    const xMultiplier2 = xMultiplier * xMultiplier;\n    const yMultiplier2 = yMultiplier * yMultiplier;\n    const zMultiplier2 = zMultiplier * zMultiplier;\n\n    const xMultiplier3 = xMultiplier2 * xMultiplier;\n    const yMultiplier3 = yMultiplier2 * yMultiplier;\n    const zMultiplier3 = zMultiplier2 * zMultiplier;\n\n    func = x2 * xMultiplier2 + y2 * yMultiplier2 + z2 * zMultiplier2 - 1.0;\n\n    // \"denominator\" here refers to the use of this expression in the velocity and acceleration\n    // computations in the sections to follow.\n    const denominator =\n      x2 * xMultiplier3 * oneOverRadiiSquaredX +\n      y2 * yMultiplier3 * oneOverRadiiSquaredY +\n      z2 * zMultiplier3 * oneOverRadiiSquaredZ;\n\n    const derivative = -2.0 * denominator;\n\n    correction = func / derivative;\n  } while (Math.abs(func) > _MathUtils.EPSILON12);\n\n  return scratchVector.scale([xMultiplier, yMultiplier, zMultiplier]).to(result);\n}\n"],"file":"scale-to-geodetic-surface.js"}