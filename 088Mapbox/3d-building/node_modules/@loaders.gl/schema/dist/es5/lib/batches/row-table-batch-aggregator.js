"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _rowUtils = require("../utils/row-utils");

var DEFAULT_ROW_COUNT = 100;

var RowTableBatchAggregator = function () {
  function RowTableBatchAggregator(schema, options) {
    (0, _classCallCheck2.default)(this, RowTableBatchAggregator);
    (0, _defineProperty2.default)(this, "schema", void 0);
    (0, _defineProperty2.default)(this, "options", void 0);
    (0, _defineProperty2.default)(this, "length", 0);
    (0, _defineProperty2.default)(this, "objectRows", null);
    (0, _defineProperty2.default)(this, "arrayRows", null);
    (0, _defineProperty2.default)(this, "cursor", 0);
    (0, _defineProperty2.default)(this, "_headers", []);
    this.options = options;
    this.schema = schema;

    if (!Array.isArray(schema)) {
      this._headers = [];

      for (var key in schema) {
        this._headers[schema[key].index] = schema[key].name;
      }
    }
  }

  (0, _createClass2.default)(RowTableBatchAggregator, [{
    key: "rowCount",
    value: function rowCount() {
      return this.length;
    }
  }, {
    key: "addArrayRow",
    value: function addArrayRow(row, cursor) {
      if (Number.isFinite(cursor)) {
        this.cursor = cursor;
      }

      switch (this.options.shape) {
        case 'object-row-table':
          var rowObject = (0, _rowUtils.convertToObjectRow)(row, this._headers);
          this.addObjectRow(rowObject, cursor);
          break;

        case 'array-row-table':
          this.arrayRows = this.arrayRows || new Array(DEFAULT_ROW_COUNT);
          this.arrayRows[this.length] = row;
          this.length++;
          break;
      }
    }
  }, {
    key: "addObjectRow",
    value: function addObjectRow(row, cursor) {
      if (Number.isFinite(cursor)) {
        this.cursor = cursor;
      }

      switch (this.options.shape) {
        case 'array-row-table':
          var rowArray = (0, _rowUtils.convertToArrayRow)(row, this._headers);
          this.addArrayRow(rowArray, cursor);
          break;

        case 'object-row-table':
          this.objectRows = this.objectRows || new Array(DEFAULT_ROW_COUNT);
          this.objectRows[this.length] = row;
          this.length++;
          break;
      }
    }
  }, {
    key: "getBatch",
    value: function getBatch() {
      var rows = this.arrayRows || this.objectRows;

      if (!rows) {
        return null;
      }

      rows = rows.slice(0, this.length);
      this.arrayRows = null;
      this.objectRows = null;
      return {
        shape: this.options.shape,
        batchType: 'data',
        data: rows,
        length: this.length,
        schema: this.schema,
        cursor: this.cursor
      };
    }
  }]);
  return RowTableBatchAggregator;
}();

exports.default = RowTableBatchAggregator;
//# sourceMappingURL=row-table-batch-aggregator.js.map