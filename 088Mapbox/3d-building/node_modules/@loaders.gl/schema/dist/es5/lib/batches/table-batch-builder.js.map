{"version":3,"sources":["../../../../src/lib/batches/table-batch-builder.ts"],"names":["DEFAULT_OPTIONS","shape","batchSize","batchDebounceMs","limit","_limitMB","ERR_MESSAGE","TableBatchBuilder","schema","options","Date","now","Boolean","totalLength","totalBytes","row","limitReached","rowBytes","_estimateRowMB","Array","isArray","addArrayRow","addObjectRow","aggregator","TableBatchType","_getTableBatchType","chunk","ArrayBuffer","bytesUsed","byteLength","length","isChunkComplete","_isFull","_getBatch","Object","keys","rowCount","lastBatchEmittedMs","normalizedBatch","getBatch","count","batchCount","assign","BaseTableBatchAggregator","RowTableBatchAggregator","ColumnarTableBatchAggregator","ArrowBatch","Error"],"mappings":"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","sourcesContent":["import type {Schema} from '../schema/schema';\nimport type {TableBatch} from '../../category/table/table-types';\nimport type {TableBatchAggregator, TableBatchConstructor} from './table-batch-aggregator';\nimport BaseTableBatchAggregator from './base-table-batch-aggregator';\nimport RowTableBatchAggregator from './row-table-batch-aggregator';\nimport ColumnarTableBatchAggregator from './columnar-table-batch-aggregator';\n\n// TODO define interface instead\ntype TableBatchBuilderOptions = {\n  shape: 'row-table' | 'array-row-table' | 'object-row-table' | 'columnar-table' | 'arrow-table';\n  batchSize?: number | 'auto';\n  batchDebounceMs?: number;\n  limit: number;\n  _limitMB: number;\n};\n\ntype GetBatchOptions = {\n  bytesUsed?: number;\n  [key: string]: any;\n};\n\nconst DEFAULT_OPTIONS: Required<TableBatchBuilderOptions> = {\n  shape: 'array-row-table',\n  batchSize: 'auto',\n  batchDebounceMs: 0,\n  limit: 0,\n  _limitMB: 0\n};\n\nconst ERR_MESSAGE = 'TableBatchBuilder';\n\n/** Incrementally builds batches from a stream of rows */\nexport default class TableBatchBuilder {\n  schema: Schema;\n  options: Required<TableBatchBuilderOptions>;\n\n  private aggregator: TableBatchAggregator | null = null;\n  private batchCount: number = 0;\n  private bytesUsed: number = 0;\n  private isChunkComplete: boolean = false;\n  private lastBatchEmittedMs: number = Date.now();\n  private totalLength: number = 0;\n  private totalBytes: number = 0;\n  private rowBytes: number = 0;\n\n  static ArrowBatch?: TableBatchConstructor;\n\n  constructor(schema: Schema, options?: TableBatchBuilderOptions) {\n    this.schema = schema;\n    this.options = {...DEFAULT_OPTIONS, ...options};\n  }\n\n  limitReached(): boolean {\n    if (Boolean(this.options?.limit) && this.totalLength >= this.options.limit) {\n      return true;\n    }\n    if (Boolean(this.options?._limitMB) && this.totalBytes / 1e6 >= this.options._limitMB) {\n      return true;\n    }\n    return false;\n  }\n\n  /** @deprecated Use addArrayRow or addObjectRow */\n  addRow(row: any[] | {[columnName: string]: any}): void {\n    if (this.limitReached()) {\n      return;\n    }\n    this.totalLength++;\n    this.rowBytes = this.rowBytes || this._estimateRowMB(row);\n    this.totalBytes += this.rowBytes;\n    if (Array.isArray(row)) {\n      this.addArrayRow(row);\n    } else {\n      this.addObjectRow(row);\n    }\n  }\n\n  /** Add one row to the batch */\n  protected addArrayRow(row: any[]) {\n    if (!this.aggregator) {\n      const TableBatchType = this._getTableBatchType();\n      this.aggregator = new TableBatchType(this.schema, this.options);\n    }\n    this.aggregator.addArrayRow(row);\n  }\n\n  /** Add one row to the batch */\n  protected addObjectRow(row: {[columnName: string]: any}): void {\n    if (!this.aggregator) {\n      const TableBatchType = this._getTableBatchType();\n      this.aggregator = new TableBatchType(this.schema, this.options);\n    }\n    this.aggregator.addObjectRow(row);\n  }\n\n  /** Mark an incoming raw memory chunk has completed */\n  chunkComplete(chunk: ArrayBuffer | string): void {\n    if (chunk instanceof ArrayBuffer) {\n      this.bytesUsed += chunk.byteLength;\n    }\n    if (typeof chunk === 'string') {\n      this.bytesUsed += chunk.length;\n    }\n    this.isChunkComplete = true;\n  }\n\n  getFullBatch(options?: GetBatchOptions): TableBatch | null {\n    return this._isFull() ? this._getBatch(options) : null;\n  }\n\n  getFinalBatch(options?: GetBatchOptions): TableBatch | null {\n    return this._getBatch(options);\n  }\n\n  // INTERNAL\n\n  _estimateRowMB(row: any[] | object): number {\n    return Array.isArray(row) ? row.length * 8 : Object.keys(row).length * 8;\n  }\n\n  private _isFull(): boolean {\n    // No batch, not ready\n    if (!this.aggregator || this.aggregator.rowCount() === 0) {\n      return false;\n    }\n\n    // if batchSize === 'auto' we wait for chunk to complete\n    // if batchSize === number, ensure we have enough rows\n    if (this.options.batchSize === 'auto') {\n      if (!this.isChunkComplete) {\n        return false;\n      }\n    } else if (this.options.batchSize > this.aggregator.rowCount()) {\n      return false;\n    }\n\n    // Debounce batches\n    if (this.options.batchDebounceMs > Date.now() - this.lastBatchEmittedMs) {\n      return false;\n    }\n\n    // Emit batch\n    this.isChunkComplete = false;\n    this.lastBatchEmittedMs = Date.now();\n    return true;\n  }\n\n  /**\n   * bytesUsed can be set via chunkComplete or via getBatch*\n   */\n  private _getBatch(options?: GetBatchOptions): TableBatch | null {\n    if (!this.aggregator) {\n      return null;\n    }\n\n    // TODO - this can overly increment bytes used?\n    if (options?.bytesUsed) {\n      this.bytesUsed = options.bytesUsed;\n    }\n    const normalizedBatch = this.aggregator.getBatch() as TableBatch;\n    normalizedBatch.count = this.batchCount;\n    normalizedBatch.bytesUsed = this.bytesUsed;\n    Object.assign(normalizedBatch, options);\n\n    this.batchCount++;\n    this.aggregator = null;\n    return normalizedBatch;\n  }\n\n  private _getTableBatchType(): TableBatchConstructor {\n    switch (this.options.shape) {\n      case 'row-table':\n        return BaseTableBatchAggregator;\n      case 'array-row-table':\n      case 'object-row-table':\n        return RowTableBatchAggregator;\n      case 'columnar-table':\n        return ColumnarTableBatchAggregator;\n      case 'arrow-table':\n        if (!TableBatchBuilder.ArrowBatch) {\n          throw new Error(ERR_MESSAGE);\n        }\n        return TableBatchBuilder.ArrowBatch;\n      default:\n        throw new Error(ERR_MESSAGE);\n    }\n  }\n}\n"],"file":"table-batch-builder.js"}