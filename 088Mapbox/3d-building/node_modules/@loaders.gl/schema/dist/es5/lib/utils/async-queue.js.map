{"version":3,"sources":["../../../../src/lib/utils/async-queue.ts"],"names":["ArrayQueue","value","push","shift","Array","Symbol","asyncIterator","AsyncQueue","_values","_settlers","_closed","length","dequeue","resolve","done","Error","settler","reject","enqueue","Promise","takeAsync","asyncIterable","count","Infinity","result","iterator","next"],"mappings":"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","sourcesContent":["// From https://github.com/rauschma/async-iter-demo/tree/master/src under MIT license\n// http://2ality.com/2016/10/asynchronous-iteration.html\n\nclass ArrayQueue<T> extends Array<T> {\n  enqueue(value: T) {\n    // Add at the end\n    return this.push(value);\n  }\n  dequeue(): T {\n    // Remove first element\n    return this.shift() as T;\n  }\n}\n\nexport default class AsyncQueue<T> {\n  private _values: ArrayQueue<T | Error>;\n  private _settlers: ArrayQueue<{resolve: (value: any) => void; reject: (reason?: any) => void}>;\n  private _closed: boolean;\n\n  constructor() {\n    // enqueues > dequeues\n    this._values = new ArrayQueue<T>();\n    // dequeues > enqueues\n    this._settlers = new ArrayQueue<{\n      resolve: (value: any) => void;\n      reject: (reason?: any) => void;\n    }>();\n    this._closed = false;\n  }\n\n  close(): void {\n    while (this._settlers.length > 0) {\n      this._settlers.dequeue().resolve({done: true});\n    }\n    this._closed = true;\n  }\n\n  [Symbol.asyncIterator](): AsyncIterator<T> {\n    return this;\n  }\n\n  enqueue(value: T | Error): void {\n    if (this._closed) {\n      throw new Error('Closed');\n    }\n\n    if (this._settlers.length > 0) {\n      if (this._values.length > 0) {\n        throw new Error('Illegal internal state');\n      }\n      const settler = this._settlers.dequeue();\n      if (value instanceof Error) {\n        settler.reject(value);\n      } else {\n        settler.resolve({value});\n      }\n    } else {\n      this._values.enqueue(value);\n    }\n  }\n\n  /**\n   * @returns a Promise for an IteratorResult\n   */\n  next(): Promise<any> {\n    if (this._values.length > 0) {\n      const value = this._values.dequeue();\n      if (value instanceof Error) {\n        return Promise.reject(value);\n      }\n      return Promise.resolve({value});\n    }\n\n    if (this._closed) {\n      if (this._settlers.length > 0) {\n        throw new Error('Illegal internal state');\n      }\n      return Promise.resolve({done: true});\n    }\n    // Wait for new values to be enqueued\n    return new Promise((resolve, reject) => {\n      this._settlers.enqueue({resolve, reject});\n    });\n  }\n}\n\n/**\n * @returns a Promise for an Array with the elements in `asyncIterable`\n */\nexport async function takeAsync(\n  asyncIterable: AsyncIterable<any>,\n  count = Infinity\n): Promise<any[]> {\n  const result: Array<any> = [];\n  const iterator = asyncIterable[Symbol.asyncIterator]();\n  while (result.length < count) {\n    const {value, done} = await iterator.next();\n    if (done) {\n      break;\n    }\n    result.push(value);\n  }\n  return result;\n}\n"],"file":"async-queue.js"}