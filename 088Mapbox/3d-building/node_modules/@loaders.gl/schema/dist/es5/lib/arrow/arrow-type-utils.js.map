{"version":3,"sources":["../../../../src/lib/arrow/arrow-type-utils.ts"],"names":["getArrowType","array","constructor","Int8Array","Int8","Uint8Array","Uint8","Int16Array","Int16","Uint16Array","Uint16","Int32Array","Int32","Uint32Array","Uint32","Float32Array","Float32","Float64Array","Float64","Error","getArrowVector","Int8Vector","from","Uint8Vector","Int16Vector","Uint16Vector","Int32Vector","Uint32Vector","Float32Vector","Float64Vector"],"mappings":";;;;;;;;AACA;;AAqBO,SAASA,YAAT,CAAsBC,KAAtB,EAAmD;AACxD,UAAQA,KAAK,CAACC,WAAd;AACE,SAAKC,SAAL;AACE,aAAO,IAAIC,WAAJ,EAAP;;AACF,SAAKC,UAAL;AACE,aAAO,IAAIC,YAAJ,EAAP;;AACF,SAAKC,UAAL;AACE,aAAO,IAAIC,YAAJ,EAAP;;AACF,SAAKC,WAAL;AACE,aAAO,IAAIC,aAAJ,EAAP;;AACF,SAAKC,UAAL;AACE,aAAO,IAAIC,YAAJ,EAAP;;AACF,SAAKC,WAAL;AACE,aAAO,IAAIC,aAAJ,EAAP;;AACF,SAAKC,YAAL;AACE,aAAO,IAAIC,cAAJ,EAAP;;AACF,SAAKC,YAAL;AACE,aAAO,IAAIC,cAAJ,EAAP;;AACF;AACE,YAAM,IAAIC,KAAJ,CAAU,0BAAV,CAAN;AAlBJ;AAoBD;;AAEM,SAASC,cAAT,CAAwBnB,KAAxB,EAA2D;AAChE,UAAQA,KAAK,CAACC,WAAd;AACE,SAAKC,SAAL;AACE,aAAOkB,kBAAWC,IAAX,CAAgBrB,KAAhB,CAAP;;AACF,SAAKI,UAAL;AACE,aAAOkB,mBAAYD,IAAZ,CAAiBrB,KAAjB,CAAP;;AACF,SAAKM,UAAL;AACE,aAAOiB,mBAAYF,IAAZ,CAAiBrB,KAAjB,CAAP;;AACF,SAAKQ,WAAL;AACE,aAAOgB,oBAAaH,IAAb,CAAkBrB,KAAlB,CAAP;;AACF,SAAKU,UAAL;AACE,aAAOe,mBAAYJ,IAAZ,CAAiBrB,KAAjB,CAAP;;AACF,SAAKY,WAAL;AACE,aAAOc,oBAAaL,IAAb,CAAkBrB,KAAlB,CAAP;;AACF,SAAKc,YAAL;AACE,aAAOa,qBAAcN,IAAd,CAAmBrB,KAAnB,CAAP;;AACF,SAAKgB,YAAL;AACE,aAAOY,qBAAcP,IAAd,CAAmBrB,KAAnB,CAAP;;AACF;AACE,YAAM,IAAIkB,KAAJ,CAAU,0BAAV,CAAN;AAlBJ;AAoBD","sourcesContent":["import type {TypedArray} from '../../types';\nimport {\n  DataType,\n  Float32,\n  Float64,\n  Int16,\n  Int32,\n  Int8,\n  Uint16,\n  Uint32,\n  Uint8,\n  Int8Vector,\n  Uint8Vector,\n  Int16Vector,\n  Uint16Vector,\n  Int32Vector,\n  Uint32Vector,\n  Float32Vector,\n  Float64Vector\n} from 'apache-arrow/Arrow.dom';\nimport {AbstractVector} from 'apache-arrow/vector';\n\nexport function getArrowType(array: TypedArray): DataType {\n  switch (array.constructor) {\n    case Int8Array:\n      return new Int8();\n    case Uint8Array:\n      return new Uint8();\n    case Int16Array:\n      return new Int16();\n    case Uint16Array:\n      return new Uint16();\n    case Int32Array:\n      return new Int32();\n    case Uint32Array:\n      return new Uint32();\n    case Float32Array:\n      return new Float32();\n    case Float64Array:\n      return new Float64();\n    default:\n      throw new Error('array type not supported');\n  }\n}\n\nexport function getArrowVector(array: TypedArray): AbstractVector {\n  switch (array.constructor) {\n    case Int8Array:\n      return Int8Vector.from(array);\n    case Uint8Array:\n      return Uint8Vector.from(array);\n    case Int16Array:\n      return Int16Vector.from(array);\n    case Uint16Array:\n      return Uint16Vector.from(array);\n    case Int32Array:\n      return Int32Vector.from(array);\n    case Uint32Array:\n      return Uint32Vector.from(array);\n    case Float32Array:\n      return Float32Vector.from(array);\n    case Float64Array:\n      return Float64Vector.from(array);\n    default:\n      throw new Error('array type not supported');\n  }\n}\n"],"file":"arrow-type-utils.js"}