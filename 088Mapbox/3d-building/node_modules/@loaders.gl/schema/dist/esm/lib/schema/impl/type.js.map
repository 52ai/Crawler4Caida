{"version":3,"sources":["../../../../../src/lib/schema/impl/type.ts"],"names":["Type","DataType","isNull","x","typeId","Null","isInt","Int","isFloat","Float","isBinary","Binary","isUtf8","Utf8","isBool","Bool","isDecimal","Decimal","isDate","Date","isTime","Time","isTimestamp","Timestamp","isInterval","Interval","isList","List","isStruct","Struct","isUnion","Union","isFixedSizeBinary","FixedSizeBinary","isFixedSizeList","FixedSizeList","isMap","Map","isDictionary","Dictionary","NONE","compareTo","other","Symbol","toStringTag","toString","constructor","isSigned","bitWidth","Int8","Int16","Int32","Int64","Uint8","Uint16","Uint32","Uint64","Precision","HALF","SINGLE","DOUBLE","precision","Float16","Float32","Float64","DateUnit","DAY","MILLISECOND","unit","DateDay","DateMillisecond","TimeUnit","SECOND","MICROSECOND","NANOSECOND","TimeSecond","TimeMillisecond","timezone","TimestampSecond","TimestampMillisecond","TimestampMicrosecond","TimestampNanosecond","IntervalUnit","DAY_TIME","YEAR_MONTH","IntervalDayTime","IntervalYearMonth","listSize","child","children","valueType","type","valueField","map","f","name","join"],"mappings":";;;;AAGA,SAAQA,IAAR,QAAmB,QAAnB;AAIA,SAAQA,IAAR,QAAmB,QAAnB;AAmBA,OAAO,MAAMC,QAAN,CAAe;AACP,SAANC,MAAM,CAACC,CAAD,EAAkB;AAC7B,WAAOA,CAAC,IAAIA,CAAC,CAACC,MAAF,KAAaJ,IAAI,CAACK,IAA9B;AACD;;AACW,SAALC,KAAK,CAACH,CAAD,EAAkB;AAC5B,WAAOA,CAAC,IAAIA,CAAC,CAACC,MAAF,KAAaJ,IAAI,CAACO,GAA9B;AACD;;AACa,SAAPC,OAAO,CAACL,CAAD,EAAkB;AAC9B,WAAOA,CAAC,IAAIA,CAAC,CAACC,MAAF,KAAaJ,IAAI,CAACS,KAA9B;AACD;;AACc,SAARC,QAAQ,CAACP,CAAD,EAAkB;AAC/B,WAAOA,CAAC,IAAIA,CAAC,CAACC,MAAF,KAAaJ,IAAI,CAACW,MAA9B;AACD;;AACY,SAANC,MAAM,CAACT,CAAD,EAAkB;AAC7B,WAAOA,CAAC,IAAIA,CAAC,CAACC,MAAF,KAAaJ,IAAI,CAACa,IAA9B;AACD;;AACY,SAANC,MAAM,CAACX,CAAD,EAAkB;AAC7B,WAAOA,CAAC,IAAIA,CAAC,CAACC,MAAF,KAAaJ,IAAI,CAACe,IAA9B;AACD;;AACe,SAATC,SAAS,CAACb,CAAD,EAAkB;AAChC,WAAOA,CAAC,IAAIA,CAAC,CAACC,MAAF,KAAaJ,IAAI,CAACiB,OAA9B;AACD;;AACY,SAANC,MAAM,CAACf,CAAD,EAAkB;AAC7B,WAAOA,CAAC,IAAIA,CAAC,CAACC,MAAF,KAAaJ,IAAI,CAACmB,IAA9B;AACD;;AACY,SAANC,MAAM,CAACjB,CAAD,EAAkB;AAC7B,WAAOA,CAAC,IAAIA,CAAC,CAACC,MAAF,KAAaJ,IAAI,CAACqB,IAA9B;AACD;;AACiB,SAAXC,WAAW,CAACnB,CAAD,EAAkB;AAClC,WAAOA,CAAC,IAAIA,CAAC,CAACC,MAAF,KAAaJ,IAAI,CAACuB,SAA9B;AACD;;AACgB,SAAVC,UAAU,CAACrB,CAAD,EAAkB;AACjC,WAAOA,CAAC,IAAIA,CAAC,CAACC,MAAF,KAAaJ,IAAI,CAACyB,QAA9B;AACD;;AACY,SAANC,MAAM,CAACvB,CAAD,EAAkB;AAC7B,WAAOA,CAAC,IAAIA,CAAC,CAACC,MAAF,KAAaJ,IAAI,CAAC2B,IAA9B;AACD;;AACc,SAARC,QAAQ,CAACzB,CAAD,EAAkB;AAC/B,WAAOA,CAAC,IAAIA,CAAC,CAACC,MAAF,KAAaJ,IAAI,CAAC6B,MAA9B;AACD;;AACa,SAAPC,OAAO,CAAC3B,CAAD,EAAkB;AAC9B,WAAOA,CAAC,IAAIA,CAAC,CAACC,MAAF,KAAaJ,IAAI,CAAC+B,KAA9B;AACD;;AACuB,SAAjBC,iBAAiB,CAAC7B,CAAD,EAAkB;AACxC,WAAOA,CAAC,IAAIA,CAAC,CAACC,MAAF,KAAaJ,IAAI,CAACiC,eAA9B;AACD;;AACqB,SAAfC,eAAe,CAAC/B,CAAD,EAAkB;AACtC,WAAOA,CAAC,IAAIA,CAAC,CAACC,MAAF,KAAaJ,IAAI,CAACmC,aAA9B;AACD;;AACW,SAALC,KAAK,CAACjC,CAAD,EAAkB;AAC5B,WAAOA,CAAC,IAAIA,CAAC,CAACC,MAAF,KAAaJ,IAAI,CAACqC,GAA9B;AACD;;AACkB,SAAZC,YAAY,CAACnC,CAAD,EAAkB;AACnC,WAAOA,CAAC,IAAIA,CAAC,CAACC,MAAF,KAAaJ,IAAI,CAACuC,UAA9B;AACD;;AAES,MAANnC,MAAM,GAAS;AACjB,WAAOJ,IAAI,CAACwC,IAAZ;AACD;;AAODC,EAAAA,SAAS,CAACC,KAAD,EAA2B;AAElC,WAAO,SAASA,KAAhB;AACD;;AApEmB;AAyEtB,OAAO,MAAMrC,IAAN,SAAmBJ,QAAnB,CAA4B;AACvB,MAANG,MAAM,GAAS;AACjB,WAAOJ,IAAI,CAACK,IAAZ;AACD;;AACsB,OAAlBsC,MAAM,CAACC,WAAW,IAAY;AACjC,WAAO,MAAP;AACD;;AACDC,EAAAA,QAAQ,GAAW;AACjB,WAAO,MAAP;AACD;;AATgC;AAcnC,OAAO,MAAM9B,IAAN,SAAmBd,QAAnB,CAA4B;AACvB,MAANG,MAAM,GAAS;AACjB,WAAOJ,IAAI,CAACe,IAAZ;AACD;;AAIsB,OAAlB4B,MAAM,CAACC,WAAW,IAAY;AACjC,WAAO,MAAP;AACD;;AACDC,EAAAA,QAAQ,GAAW;AACjB,WAAO,MAAP;AACD;;AAZgC;sBA0C5BF,MAAM,CAACC,W;AAzBd,OAAO,MAAMrC,GAAN,SAAkBN,QAAlB,CAA2B;AAGhC6C,EAAAA,WAAW,CAACC,QAAD,EAAWC,QAAX,EAAqB;AAC9B;;AAD8B;;AAAA;;AAE9B,SAAKD,QAAL,GAAgBA,QAAhB;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACD;;AACS,MAAN5C,MAAM,GAAS;AACjB,WAAOJ,IAAI,CAACO,GAAZ;AACD;;AAeD,8BAAmC;AACjC,WAAO,KAAP;AACD;;AACDsC,EAAAA,QAAQ,GAAW;AACjB,qBAAU,KAAKE,QAAL,GAAgB,GAAhB,GAAsB,IAAhC,eAAyC,KAAKC,QAA9C;AACD;;AA9B+B;AAiClC,OAAO,MAAMC,IAAN,SAAmB1C,GAAnB,CAAuB;AAC5BuC,EAAAA,WAAW,GAAG;AACZ,UAAM,IAAN,EAAY,CAAZ;AACD;;AAH2B;AAK9B,OAAO,MAAMI,KAAN,SAAoB3C,GAApB,CAAwB;AAC7BuC,EAAAA,WAAW,GAAG;AACZ,UAAM,IAAN,EAAY,EAAZ;AACD;;AAH4B;AAK/B,OAAO,MAAMK,KAAN,SAAoB5C,GAApB,CAAwB;AAC7BuC,EAAAA,WAAW,GAAG;AACZ,UAAM,IAAN,EAAY,EAAZ;AACD;;AAH4B;AAK/B,OAAO,MAAMM,KAAN,SAAoB7C,GAApB,CAAwB;AAC7BuC,EAAAA,WAAW,GAAG;AACZ,UAAM,IAAN,EAAY,EAAZ;AACD;;AAH4B;AAK/B,OAAO,MAAMO,KAAN,SAAoB9C,GAApB,CAAwB;AAC7BuC,EAAAA,WAAW,GAAG;AACZ,UAAM,KAAN,EAAa,CAAb;AACD;;AAH4B;AAK/B,OAAO,MAAMQ,MAAN,SAAqB/C,GAArB,CAAyB;AAC9BuC,EAAAA,WAAW,GAAG;AACZ,UAAM,KAAN,EAAa,EAAb;AACD;;AAH6B;AAKhC,OAAO,MAAMS,MAAN,SAAqBhD,GAArB,CAAyB;AAC9BuC,EAAAA,WAAW,GAAG;AACZ,UAAM,KAAN,EAAa,EAAb;AACD;;AAH6B;AAKhC,OAAO,MAAMU,MAAN,SAAqBjD,GAArB,CAAyB;AAC9BuC,EAAAA,WAAW,GAAG;AACZ,UAAM,KAAN,EAAa,EAAb;AACD;;AAH6B;AAQhC,MAAMW,SAAS,GAAG;AAChBC,EAAAA,IAAI,EAAE,EADU;AAEhBC,EAAAA,MAAM,EAAE,EAFQ;AAGhBC,EAAAA,MAAM,EAAE;AAHQ,CAAlB;uBA2BOjB,MAAM,CAACC,W;AArBd,OAAO,MAAMnC,KAAN,SAAoBR,QAApB,CAA6B;AAElC6C,EAAAA,WAAW,CAACe,SAAD,EAAY;AACrB;;AADqB;;AAErB,SAAKA,SAAL,GAAiBA,SAAjB;AACD;;AACS,MAANzD,MAAM,GAAS;AACjB,WAAOJ,IAAI,CAACS,KAAZ;AACD;;AAaD,+BAAmC;AACjC,WAAO,OAAP;AACD;;AACDoC,EAAAA,QAAQ,GAAW;AACjB,0BAAe,KAAKgB,SAApB;AACD;;AA1BiC;AA6BpC,OAAO,MAAMC,OAAN,SAAsBrD,KAAtB,CAA4B;AACjCqC,EAAAA,WAAW,GAAG;AACZ,UAAMW,SAAS,CAACC,IAAhB;AACD;;AAHgC;AAKnC,OAAO,MAAMK,OAAN,SAAsBtD,KAAtB,CAA4B;AACjCqC,EAAAA,WAAW,GAAG;AACZ,UAAMW,SAAS,CAACE,MAAhB;AACD;;AAHgC;AAKnC,OAAO,MAAMK,OAAN,SAAsBvD,KAAtB,CAA4B;AACjCqC,EAAAA,WAAW,GAAG;AACZ,UAAMW,SAAS,CAACG,MAAhB;AACD;;AAHgC;AAMnC,OAAO,MAAMjD,MAAN,SAAqBV,QAArB,CAA8B;AACnC6C,EAAAA,WAAW,GAAG;AACZ;AACD;;AACS,MAAN1C,MAAM,GAAG;AACX,WAAOJ,IAAI,CAACW,MAAZ;AACD;;AACDkC,EAAAA,QAAQ,GAAG;AACT,WAAO,QAAP;AACD;;AACsB,OAAlBF,MAAM,CAACC,WAAW,IAAI;AACzB,WAAO,QAAP;AACD;;AAZkC;AAiBrC,OAAO,MAAM/B,IAAN,SAAmBZ,QAAnB,CAA4B;AACvB,MAANG,MAAM,GAAS;AACjB,WAAOJ,IAAI,CAACa,IAAZ;AACD;;AAIsB,OAAlB8B,MAAM,CAACC,WAAW,IAAY;AACjC,WAAO,MAAP;AACD;;AACDC,EAAAA,QAAQ,GAAW;AACjB,WAAO,MAAP;AACD;;AAZgC;AAiBnC,MAAMoB,QAAQ,GAAG;AACfC,EAAAA,GAAG,EAAE,CADU;AAEfC,EAAAA,WAAW,EAAE;AAFE,CAAjB;uBAiBOxB,MAAM,CAACC,W;AAZd,OAAO,MAAMzB,IAAN,SAAmBlB,QAAnB,CAA4B;AAEjC6C,EAAAA,WAAW,CAACsB,IAAD,EAAO;AAChB;;AADgB;;AAEhB,SAAKA,IAAL,GAAYA,IAAZ;AACD;;AACS,MAANhE,MAAM,GAAS;AACjB,WAAOJ,IAAI,CAACmB,IAAZ;AACD;;AAID,+BAAmC;AACjC,WAAO,MAAP;AACD;;AACD0B,EAAAA,QAAQ,GAAW;AACjB,yBAAc,CAAC,KAAKuB,IAAL,GAAY,CAAb,IAAkB,EAAhC,cAAsCH,QAAQ,CAAC,KAAKG,IAAN,CAA9C;AACD;;AAjBgC;AAoBnC,OAAO,MAAMC,OAAN,SAAsBlD,IAAtB,CAA2B;AAChC2B,EAAAA,WAAW,GAAG;AACZ,UAAMmB,QAAQ,CAACC,GAAf;AACD;;AAH+B;AAKlC,OAAO,MAAMI,eAAN,SAA8BnD,IAA9B,CAAmC;AACxC2B,EAAAA,WAAW,GAAG;AACZ,UAAMmB,QAAQ,CAACE,WAAf;AACD;;AAHuC;AAM1C,MAAMI,QAAQ,GAAG;AACfC,EAAAA,MAAM,EAAE,CADO;AAEfL,EAAAA,WAAW,EAAE,GAFE;AAGfM,EAAAA,WAAW,EAAE,GAHE;AAIfC,EAAAA,UAAU,EAAE;AAJG,CAAjB;uBAsBO/B,MAAM,CAACC,W;AAfd,OAAO,MAAMvB,IAAN,SAAmBpB,QAAnB,CAA4B;AAIjC6C,EAAAA,WAAW,CAACsB,IAAD,EAAYpB,QAAZ,EAA8B;AACvC;;AADuC;;AAAA;;AAEvC,SAAKoB,IAAL,GAAYA,IAAZ;AACA,SAAKpB,QAAL,GAAgBA,QAAhB;AACD;;AACS,MAAN5C,MAAM,GAAS;AACjB,WAAOJ,IAAI,CAACqB,IAAZ;AACD;;AACDwB,EAAAA,QAAQ,GAAW;AACjB,yBAAc,KAAKG,QAAnB,cAA+BuB,QAAQ,CAAC,KAAKH,IAAN,CAAvC;AACD;;AACD,+BAAmC;AACjC,WAAO,MAAP;AACD;;AAjBgC;AAuBnC,OAAO,MAAMO,UAAN,SAAyBtD,IAAzB,CAA8B;AACnCyB,EAAAA,WAAW,GAAG;AACZ,UAAMyB,QAAQ,CAACC,MAAf,EAAuB,EAAvB;AACD;;AAHkC;AAKrC,OAAO,MAAMI,eAAN,SAA8BvD,IAA9B,CAAmC;AACxCyB,EAAAA,WAAW,GAAG;AACZ,UAAMyB,QAAQ,CAACJ,WAAf,EAA4B,EAA5B;AACD;;AAHuC;uBAuBnCxB,MAAM,CAACC,W;AAfd,OAAO,MAAMrB,SAAN,SAAwBtB,QAAxB,CAAiC;AAItC6C,EAAAA,WAAW,CAACsB,IAAD,EAAYS,QAAQ,GAAG,IAAvB,EAA6B;AACtC;;AADsC;;AAAA;;AAEtC,SAAKT,IAAL,GAAYA,IAAZ;AACA,SAAKS,QAAL,GAAgBA,QAAhB;AACD;;AACS,MAANzE,MAAM,GAAS;AACjB,WAAOJ,IAAI,CAACuB,SAAZ;AACD;;AAID,+BAAmC;AACjC,WAAO,WAAP;AACD;;AACDsB,EAAAA,QAAQ,GAAW;AACjB,+BAAoB0B,QAAQ,CAAC,KAAKH,IAAN,CAA5B,SAA0C,KAAKS,QAAL,eAAqB,KAAKA,QAA1B,IAAuC,EAAjF;AACD;;AApBqC;AAuBxC,OAAO,MAAMC,eAAN,SAA8BvD,SAA9B,CAAwC;AAC7CuB,EAAAA,WAAW,CAAC+B,QAAQ,GAAG,IAAZ,EAAkB;AAC3B,UAAMN,QAAQ,CAACC,MAAf,EAAuBK,QAAvB;AACD;;AAH4C;AAK/C,OAAO,MAAME,oBAAN,SAAmCxD,SAAnC,CAA6C;AAClDuB,EAAAA,WAAW,CAAC+B,QAAQ,GAAG,IAAZ,EAAkB;AAC3B,UAAMN,QAAQ,CAACJ,WAAf,EAA4BU,QAA5B;AACD;;AAHiD;AAKpD,OAAO,MAAMG,oBAAN,SAAmCzD,SAAnC,CAA6C;AAClDuB,EAAAA,WAAW,CAAC+B,QAAQ,GAAG,IAAZ,EAAkB;AAC3B,UAAMN,QAAQ,CAACE,WAAf,EAA4BI,QAA5B;AACD;;AAHiD;AAKpD,OAAO,MAAMI,mBAAN,SAAkC1D,SAAlC,CAA4C;AACjDuB,EAAAA,WAAW,CAAC+B,QAAQ,GAAG,IAAZ,EAAkB;AAC3B,UAAMN,QAAQ,CAACG,UAAf,EAA2BG,QAA3B;AACD;;AAHgD;AAMnD,MAAMK,YAAY,GAAG;AACnBC,EAAAA,QAAQ,EAAE,CADS;AAEnBC,EAAAA,UAAU,EAAE;AAFO,CAArB;uBAiBOzC,MAAM,CAACC,W;AAZd,OAAO,MAAMnB,QAAN,SAAuBxB,QAAvB,CAAgC;AAErC6C,EAAAA,WAAW,CAACsB,IAAD,EAAe;AACxB;;AADwB;;AAExB,SAAKA,IAAL,GAAYA,IAAZ;AACD;;AACS,MAANhE,MAAM,GAAS;AACjB,WAAOJ,IAAI,CAACyB,QAAZ;AACD;;AAID,+BAAmC;AACjC,WAAO,UAAP;AACD;;AACDoB,EAAAA,QAAQ,GAAW;AACjB,8BAAmBqC,YAAY,CAAC,KAAKd,IAAN,CAA/B;AACD;;AAjBoC;AAoBvC,OAAO,MAAMiB,eAAN,SAA8B5D,QAA9B,CAAuC;AAC5CqB,EAAAA,WAAW,GAAG;AACZ,UAAMoC,YAAY,CAACC,QAAnB;AACD;;AAH2C;AAK9C,OAAO,MAAMG,iBAAN,SAAgC7D,QAAhC,CAAyC;AAC9CqB,EAAAA,WAAW,GAAG;AACZ,UAAMoC,YAAY,CAACE,UAAnB;AACD;;AAH6C;uBA2BzCzC,MAAM,CAACC,W;AArBd,OAAO,MAAMT,aAAN,SAA4BlC,QAA5B,CAAqC;AAI1C6C,EAAAA,WAAW,CAACyC,QAAD,EAAmBC,KAAnB,EAAiC;AAC1C;;AAD0C;;AAAA;;AAE1C,SAAKD,QAAL,GAAgBA,QAAhB;AACA,SAAKE,QAAL,GAAgB,CAACD,KAAD,CAAhB;AACD;;AACS,MAANpF,MAAM,GAAS;AACjB,WAAOJ,IAAI,CAACmC,aAAZ;AACD;;AACY,MAATuD,SAAS,GAAG;AACd,WAAO,KAAKD,QAAL,CAAc,CAAd,EAAiBE,IAAxB;AACD;;AACa,MAAVC,UAAU,GAAG;AACf,WAAO,KAAKH,QAAL,CAAc,CAAd,CAAP;AACD;;AAID,+BAAmC;AACjC,WAAO,eAAP;AACD;;AACD5C,EAAAA,QAAQ,GAAW;AACjB,mCAAwB,KAAK0C,QAA7B,eAA0C,KAAKG,SAA/C;AACD;;AA1ByC;uBA2CrC/C,MAAM,CAACC,W;AAdd,OAAO,MAAMf,MAAN,SAAqB5B,QAArB,CAA8B;AAGnC6C,EAAAA,WAAW,CAAC2C,QAAD,EAAoB;AAC7B;;AAD6B;;AAE7B,SAAKA,QAAL,GAAgBA,QAAhB;AACD;;AAEgB,MAANrF,MAAM,GAAG;AAClB,WAAOJ,IAAI,CAAC6B,MAAZ;AACD;;AACMgB,EAAAA,QAAQ,GAAG;AAChB,6BAAkB,KAAK4C,QAAL,CAAcI,GAAd,CAAmBC,CAAD,cAAUA,CAAC,CAACC,IAAZ,cAAoBD,CAAC,CAACH,IAAtB,CAAlB,EAAgDK,IAAhD,CAAqD,IAArD,CAAlB;AACD;;AACD,+BAAmC;AACjC,WAAO,QAAP;AACD;;AAhBkC","sourcesContent":["// This code is adapted from ArrowJS https://github.com/apache/arrow\n// under Apache license http://www.apache.org/licenses/LICENSE-2.0\n\nimport {Type} from './enum';\n\nimport Field from './field';\n\nexport {Type} from './enum';\n\nexport type TypedIntArray =\n  | Int8Array\n  | Uint8Array\n  | Int16Array\n  | Uint16Array\n  | Int32Array\n  | Uint32Array\n  | Int32Array\n  | Uint32Array\n  | Uint8ClampedArray;\n\nexport type TypedFloatArray = Float32Array | Float64Array;\n\nexport type TypedArray = TypedIntArray | TypedFloatArray;\n\nexport type AnyArrayType = Array<any> | TypedIntArray | TypedFloatArray;\n\nexport class DataType {\n  static isNull(x: any): boolean {\n    return x && x.typeId === Type.Null;\n  }\n  static isInt(x: any): boolean {\n    return x && x.typeId === Type.Int;\n  }\n  static isFloat(x: any): boolean {\n    return x && x.typeId === Type.Float;\n  }\n  static isBinary(x: any): boolean {\n    return x && x.typeId === Type.Binary;\n  }\n  static isUtf8(x: any): boolean {\n    return x && x.typeId === Type.Utf8;\n  }\n  static isBool(x: any): boolean {\n    return x && x.typeId === Type.Bool;\n  }\n  static isDecimal(x: any): boolean {\n    return x && x.typeId === Type.Decimal;\n  }\n  static isDate(x: any): boolean {\n    return x && x.typeId === Type.Date;\n  }\n  static isTime(x: any): boolean {\n    return x && x.typeId === Type.Time;\n  }\n  static isTimestamp(x: any): boolean {\n    return x && x.typeId === Type.Timestamp;\n  }\n  static isInterval(x: any): boolean {\n    return x && x.typeId === Type.Interval;\n  }\n  static isList(x: any): boolean {\n    return x && x.typeId === Type.List;\n  }\n  static isStruct(x: any): boolean {\n    return x && x.typeId === Type.Struct;\n  }\n  static isUnion(x: any): boolean {\n    return x && x.typeId === Type.Union;\n  }\n  static isFixedSizeBinary(x: any): boolean {\n    return x && x.typeId === Type.FixedSizeBinary;\n  }\n  static isFixedSizeList(x: any): boolean {\n    return x && x.typeId === Type.FixedSizeList;\n  }\n  static isMap(x: any): boolean {\n    return x && x.typeId === Type.Map;\n  }\n  static isDictionary(x: any): boolean {\n    return x && x.typeId === Type.Dictionary;\n  }\n\n  get typeId(): Type {\n    return Type.NONE;\n  }\n\n  // get ArrayType(): AnyArrayType {\n  //   return Int8Array;\n  // }\n\n  // get ArrayType() { return Array; }\n  compareTo(other: DataType): boolean {\n    // TODO\n    return this === other; // comparer.visit(this, other);\n  }\n}\n\n// NULL\n\nexport class Null extends DataType {\n  get typeId(): Type {\n    return Type.Null;\n  }\n  get [Symbol.toStringTag](): string {\n    return 'Null';\n  }\n  toString(): string {\n    return 'Null';\n  }\n}\n\n// BOOLEANS\n\nexport class Bool extends DataType {\n  get typeId(): Type {\n    return Type.Bool;\n  }\n  // get ArrayType() {\n  //   return Uint8Array;\n  // }\n  get [Symbol.toStringTag](): string {\n    return 'Bool';\n  }\n  toString(): string {\n    return 'Bool';\n  }\n}\n\n// INTS\n\nexport class Int extends DataType {\n  readonly isSigned: boolean;\n  readonly bitWidth: number;\n  constructor(isSigned, bitWidth) {\n    super();\n    this.isSigned = isSigned;\n    this.bitWidth = bitWidth;\n  }\n  get typeId(): Type {\n    return Type.Int;\n  }\n  // get ArrayType() {\n  //   switch (this.bitWidth) {\n  //     case 8:\n  //       return this.isSigned ? Int8Array : Uint8Array;\n  //     case 16:\n  //       return this.isSigned ? Int16Array : Uint16Array;\n  //     case 32:\n  //       return this.isSigned ? Int32Array : Uint32Array;\n  //     case 64:\n  //       return this.isSigned ? Int32Array : Uint32Array;\n  //     default:\n  //       throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n  //   }\n  // }\n  get [Symbol.toStringTag](): string {\n    return 'Int';\n  }\n  toString(): string {\n    return `${this.isSigned ? 'I' : 'Ui'}nt${this.bitWidth}`;\n  }\n}\n\nexport class Int8 extends Int {\n  constructor() {\n    super(true, 8);\n  }\n}\nexport class Int16 extends Int {\n  constructor() {\n    super(true, 16);\n  }\n}\nexport class Int32 extends Int {\n  constructor() {\n    super(true, 32);\n  }\n}\nexport class Int64 extends Int {\n  constructor() {\n    super(true, 64);\n  }\n}\nexport class Uint8 extends Int {\n  constructor() {\n    super(false, 8);\n  }\n}\nexport class Uint16 extends Int {\n  constructor() {\n    super(false, 16);\n  }\n}\nexport class Uint32 extends Int {\n  constructor() {\n    super(false, 32);\n  }\n}\nexport class Uint64 extends Int {\n  constructor() {\n    super(false, 64);\n  }\n}\n\n// FLOATS\n\nconst Precision = {\n  HALF: 16,\n  SINGLE: 32,\n  DOUBLE: 64\n};\n\nexport class Float extends DataType {\n  readonly precision: number;\n  constructor(precision) {\n    super();\n    this.precision = precision;\n  }\n  get typeId(): Type {\n    return Type.Float;\n  }\n  // get ArrayType() {\n  //   switch (this.precision) {\n  //     case Precision.HALF:\n  //       return Uint16Array;\n  //     case Precision.SINGLE:\n  //       return Float32Array;\n  //     case Precision.DOUBLE:\n  //       return Float64Array;\n  //     default:\n  //       throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n  //   }\n  // }\n  get [Symbol.toStringTag](): string {\n    return 'Float';\n  }\n  toString(): string {\n    return `Float${this.precision}`;\n  }\n}\n\nexport class Float16 extends Float {\n  constructor() {\n    super(Precision.HALF);\n  }\n}\nexport class Float32 extends Float {\n  constructor() {\n    super(Precision.SINGLE);\n  }\n}\nexport class Float64 extends Float {\n  constructor() {\n    super(Precision.DOUBLE);\n  }\n}\n\nexport class Binary extends DataType {\n  constructor() {\n    super();\n  }\n  get typeId() {\n    return Type.Binary;\n  }\n  toString() {\n    return 'Binary';\n  }\n  get [Symbol.toStringTag]() {\n    return 'Binary';\n  }\n}\n\n// STRINGS\n\nexport class Utf8 extends DataType {\n  get typeId(): Type {\n    return Type.Utf8;\n  }\n  // get ArrayType() {\n  //   return Uint8Array;\n  // }\n  get [Symbol.toStringTag](): string {\n    return 'Utf8';\n  }\n  toString(): string {\n    return 'Utf8';\n  }\n}\n\n// DATES, TIMES AND INTERVALS\n\nconst DateUnit = {\n  DAY: 0,\n  MILLISECOND: 1\n};\n\nexport class Date extends DataType {\n  readonly unit: number;\n  constructor(unit) {\n    super();\n    this.unit = unit;\n  }\n  get typeId(): Type {\n    return Type.Date;\n  }\n  // get ArrayType() {\n  //   return Int32Array;\n  // }\n  get [Symbol.toStringTag](): string {\n    return 'Date';\n  }\n  toString(): string {\n    return `Date${(this.unit + 1) * 32}<${DateUnit[this.unit]}>`;\n  }\n}\n\nexport class DateDay extends Date {\n  constructor() {\n    super(DateUnit.DAY);\n  }\n}\nexport class DateMillisecond extends Date {\n  constructor() {\n    super(DateUnit.MILLISECOND);\n  }\n}\n\nconst TimeUnit = {\n  SECOND: 1,\n  MILLISECOND: 1e3,\n  MICROSECOND: 1e6,\n  NANOSECOND: 1e9\n};\n\nexport class Time extends DataType {\n  readonly unit: any;\n  readonly bitWidth: number;\n\n  constructor(unit: any, bitWidth: number) {\n    super();\n    this.unit = unit;\n    this.bitWidth = bitWidth;\n  }\n  get typeId(): Type {\n    return Type.Time;\n  }\n  toString(): string {\n    return `Time${this.bitWidth}<${TimeUnit[this.unit]}>`;\n  }\n  get [Symbol.toStringTag](): string {\n    return 'Time';\n  }\n  // get ArrayType() {\n  //   return Int32Array;\n  // }\n}\n\nexport class TimeSecond extends Time {\n  constructor() {\n    super(TimeUnit.SECOND, 32);\n  }\n}\nexport class TimeMillisecond extends Time {\n  constructor() {\n    super(TimeUnit.MILLISECOND, 32);\n  }\n}\n// export class TimeMicrosecond extends Time { constructor() { super(TimeUnit.MICROSECOND, 64); } }\n// export class TimeNanosecond extends Time { constructor() { super(TimeUnit.NANOSECOND, 64); } }\n\nexport class Timestamp extends DataType {\n  readonly unit: any;\n  readonly timezone: any;\n\n  constructor(unit: any, timezone = null) {\n    super();\n    this.unit = unit;\n    this.timezone = timezone;\n  }\n  get typeId(): Type {\n    return Type.Timestamp;\n  }\n  // get ArrayType() {\n  //   return Int32Array;\n  // }\n  get [Symbol.toStringTag](): string {\n    return 'Timestamp';\n  }\n  toString(): string {\n    return `Timestamp<${TimeUnit[this.unit]}${this.timezone ? `, ${this.timezone}` : ''}>`;\n  }\n}\n\nexport class TimestampSecond extends Timestamp {\n  constructor(timezone = null) {\n    super(TimeUnit.SECOND, timezone);\n  }\n}\nexport class TimestampMillisecond extends Timestamp {\n  constructor(timezone = null) {\n    super(TimeUnit.MILLISECOND, timezone);\n  }\n}\nexport class TimestampMicrosecond extends Timestamp {\n  constructor(timezone = null) {\n    super(TimeUnit.MICROSECOND, timezone);\n  }\n}\nexport class TimestampNanosecond extends Timestamp {\n  constructor(timezone = null) {\n    super(TimeUnit.NANOSECOND, timezone);\n  }\n}\n\nconst IntervalUnit = {\n  DAY_TIME: 0,\n  YEAR_MONTH: 1\n};\n\nexport class Interval extends DataType {\n  readonly unit: number;\n  constructor(unit: number) {\n    super();\n    this.unit = unit;\n  }\n  get typeId(): Type {\n    return Type.Interval;\n  }\n  // get ArrayType() {\n  //   return Int32Array;\n  // }\n  get [Symbol.toStringTag](): string {\n    return 'Interval';\n  }\n  toString(): string {\n    return `Interval<${IntervalUnit[this.unit]}>`;\n  }\n}\n\nexport class IntervalDayTime extends Interval {\n  constructor() {\n    super(IntervalUnit.DAY_TIME);\n  }\n}\nexport class IntervalYearMonth extends Interval {\n  constructor() {\n    super(IntervalUnit.YEAR_MONTH);\n  }\n}\n\nexport class FixedSizeList extends DataType {\n  readonly listSize: number;\n  readonly children: Field[];\n\n  constructor(listSize: number, child: Field) {\n    super();\n    this.listSize = listSize;\n    this.children = [child];\n  }\n  get typeId(): Type {\n    return Type.FixedSizeList;\n  }\n  get valueType() {\n    return this.children[0].type;\n  }\n  get valueField() {\n    return this.children[0];\n  }\n  // get ArrayType() {\n  //   return this.valueType.ArrayType;\n  // }\n  get [Symbol.toStringTag](): string {\n    return 'FixedSizeList';\n  }\n  toString(): string {\n    return `FixedSizeList[${this.listSize}]<${this.valueType}>`;\n  }\n}\n\nexport class Struct extends DataType {\n  public readonly children: Field[];\n\n  constructor(children: Field[]) {\n    super();\n    this.children = children;\n  }\n\n  public get typeId() {\n    return Type.Struct;\n  }\n  public toString() {\n    return `Struct<{${this.children.map((f) => `${f.name}:${f.type}`).join(', ')}}>`;\n  }\n  get [Symbol.toStringTag](): string {\n    return 'Struct';\n  }\n}\n"],"file":"type.js"}