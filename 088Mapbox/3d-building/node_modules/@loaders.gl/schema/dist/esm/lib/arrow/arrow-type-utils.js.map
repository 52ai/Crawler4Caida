{"version":3,"sources":["../../../../src/lib/arrow/arrow-type-utils.ts"],"names":["Float32","Float64","Int16","Int32","Int8","Uint16","Uint32","Uint8","Int8Vector","Uint8Vector","Int16Vector","Uint16Vector","Int32Vector","Uint32Vector","Float32Vector","Float64Vector","getArrowType","array","constructor","Int8Array","Uint8Array","Int16Array","Uint16Array","Int32Array","Uint32Array","Float32Array","Float64Array","Error","getArrowVector","from"],"mappings":"AACA,SAEEA,OAFF,EAGEC,OAHF,EAIEC,KAJF,EAKEC,KALF,EAMEC,IANF,EAOEC,MAPF,EAQEC,MARF,EASEC,KATF,EAUEC,UAVF,EAWEC,WAXF,EAYEC,WAZF,EAaEC,YAbF,EAcEC,WAdF,EAeEC,YAfF,EAgBEC,aAhBF,EAiBEC,aAjBF,QAkBO,wBAlBP;AAqBA,OAAO,SAASC,YAAT,CAAsBC,KAAtB,EAAmD;AACxD,UAAQA,KAAK,CAACC,WAAd;AACE,SAAKC,SAAL;AACE,aAAO,IAAIf,IAAJ,EAAP;;AACF,SAAKgB,UAAL;AACE,aAAO,IAAIb,KAAJ,EAAP;;AACF,SAAKc,UAAL;AACE,aAAO,IAAInB,KAAJ,EAAP;;AACF,SAAKoB,WAAL;AACE,aAAO,IAAIjB,MAAJ,EAAP;;AACF,SAAKkB,UAAL;AACE,aAAO,IAAIpB,KAAJ,EAAP;;AACF,SAAKqB,WAAL;AACE,aAAO,IAAIlB,MAAJ,EAAP;;AACF,SAAKmB,YAAL;AACE,aAAO,IAAIzB,OAAJ,EAAP;;AACF,SAAK0B,YAAL;AACE,aAAO,IAAIzB,OAAJ,EAAP;;AACF;AACE,YAAM,IAAI0B,KAAJ,CAAU,0BAAV,CAAN;AAlBJ;AAoBD;AAED,OAAO,SAASC,cAAT,CAAwBX,KAAxB,EAA2D;AAChE,UAAQA,KAAK,CAACC,WAAd;AACE,SAAKC,SAAL;AACE,aAAOX,UAAU,CAACqB,IAAX,CAAgBZ,KAAhB,CAAP;;AACF,SAAKG,UAAL;AACE,aAAOX,WAAW,CAACoB,IAAZ,CAAiBZ,KAAjB,CAAP;;AACF,SAAKI,UAAL;AACE,aAAOX,WAAW,CAACmB,IAAZ,CAAiBZ,KAAjB,CAAP;;AACF,SAAKK,WAAL;AACE,aAAOX,YAAY,CAACkB,IAAb,CAAkBZ,KAAlB,CAAP;;AACF,SAAKM,UAAL;AACE,aAAOX,WAAW,CAACiB,IAAZ,CAAiBZ,KAAjB,CAAP;;AACF,SAAKO,WAAL;AACE,aAAOX,YAAY,CAACgB,IAAb,CAAkBZ,KAAlB,CAAP;;AACF,SAAKQ,YAAL;AACE,aAAOX,aAAa,CAACe,IAAd,CAAmBZ,KAAnB,CAAP;;AACF,SAAKS,YAAL;AACE,aAAOX,aAAa,CAACc,IAAd,CAAmBZ,KAAnB,CAAP;;AACF;AACE,YAAM,IAAIU,KAAJ,CAAU,0BAAV,CAAN;AAlBJ;AAoBD","sourcesContent":["import type {TypedArray} from '../../types';\nimport {\n  DataType,\n  Float32,\n  Float64,\n  Int16,\n  Int32,\n  Int8,\n  Uint16,\n  Uint32,\n  Uint8,\n  Int8Vector,\n  Uint8Vector,\n  Int16Vector,\n  Uint16Vector,\n  Int32Vector,\n  Uint32Vector,\n  Float32Vector,\n  Float64Vector\n} from 'apache-arrow/Arrow.dom';\nimport {AbstractVector} from 'apache-arrow/vector';\n\nexport function getArrowType(array: TypedArray): DataType {\n  switch (array.constructor) {\n    case Int8Array:\n      return new Int8();\n    case Uint8Array:\n      return new Uint8();\n    case Int16Array:\n      return new Int16();\n    case Uint16Array:\n      return new Uint16();\n    case Int32Array:\n      return new Int32();\n    case Uint32Array:\n      return new Uint32();\n    case Float32Array:\n      return new Float32();\n    case Float64Array:\n      return new Float64();\n    default:\n      throw new Error('array type not supported');\n  }\n}\n\nexport function getArrowVector(array: TypedArray): AbstractVector {\n  switch (array.constructor) {\n    case Int8Array:\n      return Int8Vector.from(array);\n    case Uint8Array:\n      return Uint8Vector.from(array);\n    case Int16Array:\n      return Int16Vector.from(array);\n    case Uint16Array:\n      return Uint16Vector.from(array);\n    case Int32Array:\n      return Int32Vector.from(array);\n    case Uint32Array:\n      return Uint32Vector.from(array);\n    case Float32Array:\n      return Float32Vector.from(array);\n    case Float64Array:\n      return Float64Vector.from(array);\n    default:\n      throw new Error('array type not supported');\n  }\n}\n"],"file":"arrow-type-utils.js"}