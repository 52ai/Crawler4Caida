"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const DEFAULT_ROW_COUNT = 100;
class RowTableBatchAggregator {
    constructor(schema, options) {
        this.length = 0;
        this.rows = null;
        this.cursor = 0;
        this._headers = [];
        this.options = options;
        this.schema = schema;
        // schema is an array if there're no headers
        // object if there are headers
        if (!Array.isArray(schema)) {
            this._headers = [];
            for (const key in schema) {
                this._headers[schema[key].index] = schema[key].name;
            }
        }
    }
    rowCount() {
        return this.length;
    }
    addArrayRow(row, cursor) {
        if (Number.isFinite(cursor)) {
            this.cursor = cursor;
        }
        this.rows = this.rows || new Array(DEFAULT_ROW_COUNT);
        this.rows[this.length] = row;
        this.length++;
    }
    addObjectRow(row, cursor) {
        if (Number.isFinite(cursor)) {
            this.cursor = cursor;
        }
        this.rows = this.rows || new Array(DEFAULT_ROW_COUNT);
        this.rows[this.length] = row;
        this.length++;
    }
    getBatch() {
        let rows = this.rows;
        if (!rows) {
            return null;
        }
        rows = rows.slice(0, this.length);
        this.rows = null;
        const batch = {
            shape: this.options.shape,
            batchType: 'data',
            data: rows,
            length: this.length,
            schema: this.schema,
            cursor: this.cursor
        };
        return batch;
    }
}
exports.default = RowTableBatchAggregator;
