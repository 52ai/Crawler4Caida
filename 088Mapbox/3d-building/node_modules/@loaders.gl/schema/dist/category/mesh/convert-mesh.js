"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertMeshToColumnarTable = exports.convertMesh = void 0;
const mesh_to_arrow_table_1 = require("./mesh-to-arrow-table");
/**
 * Convert a mesh to a specific shape
 */
function convertMesh(mesh, shape, options) {
    switch (shape || 'mesh') {
        case 'mesh':
            return mesh;
        case 'columnar-table':
            return convertMeshToColumnarTable(mesh);
        case 'arrow-table':
            return {
                shape: 'arrow-table',
                data: (0, mesh_to_arrow_table_1.convertMeshToArrowTable)(mesh)
            };
        default:
            throw new Error(`Unsupported shape ${options?.shape}`);
    }
}
exports.convertMesh = convertMesh;
/**
 * Convert a loaders.gl Mesh to a Columnar Table
 * @param mesh
 * @returns
 */
function convertMeshToColumnarTable(mesh) {
    const columns = {};
    for (const [columnName, attribute] of Object.entries(mesh.attributes)) {
        columns[columnName] = attribute.value;
    }
    return {
        shape: 'columnar-table',
        schema: mesh.schema,
        data: columns
    };
}
exports.convertMeshToColumnarTable = convertMeshToColumnarTable;
