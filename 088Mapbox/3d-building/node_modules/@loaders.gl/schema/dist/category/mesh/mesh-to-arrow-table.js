"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertMeshToArrowTable = void 0;
const Arrow_dom_1 = require("apache-arrow/Arrow.dom");
const arrow_type_utils_1 = require("../../lib/arrow/arrow-type-utils");
const deduce_mesh_schema_1 = require("./deduce-mesh-schema");
/**
 * * Convert a loaders.gl Mesh to an Apache Arrow Table
 * @param mesh
 * @param metadata
 * @param batchSize
 * @returns
 */
function convertMeshToArrowTable(mesh, batchSize) {
    const vectors = [];
    const fields = [];
    for (const attributeKey in mesh.attributes) {
        const attribute = mesh.attributes[attributeKey];
        const { value, size = 1 } = attribute;
        const type = (0, arrow_type_utils_1.getArrowType)(value);
        const vector = (0, arrow_type_utils_1.getArrowVector)(value);
        const listType = new Arrow_dom_1.FixedSizeList(size, new Arrow_dom_1.Field('value', type));
        const field = new Arrow_dom_1.Field(attributeKey, listType, false, (0, deduce_mesh_schema_1.makeMeshAttributeMetadata)(attribute));
        const data = new Arrow_dom_1.Data(listType, 0, value.length / size, 0, undefined, [vector]);
        const listVector = new Arrow_dom_1.FixedSizeListVector(data);
        vectors.push(listVector);
        fields.push(field);
    }
    const schema = new Arrow_dom_1.Schema(fields, mesh?.schema?.metadata || new Map());
    const recordBatch = new Arrow_dom_1.RecordBatch(schema, vectors[0].length, vectors);
    const table = new Arrow_dom_1.Table(schema, recordBatch);
    return table;
}
exports.convertMeshToArrowTable = convertMeshToArrowTable;
