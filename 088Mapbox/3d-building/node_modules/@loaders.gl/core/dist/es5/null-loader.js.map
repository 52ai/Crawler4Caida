{"version":3,"sources":["../../src/null-loader.ts"],"names":["VERSION","NullWorkerLoader","name","id","module","version","worker","mimeTypes","extensions","tests","options","null","parseSync","arrayBuffer","context","echoParameters","JSON","parse","stringify","NullLoader","parseInBatches","asyncIterator","batch","generator"],"mappings":";;;;;;;;;;;;;;;;;;;AAEA,IAAMA,OAAO,GAAG,mBAAuB,WAAvB,aAAmD,QAAnE;AAOO,IAAMC,gBAAwB,GAAG;AACtCC,EAAAA,IAAI,EAAE,aADgC;AAEtCC,EAAAA,EAAE,EAAE,MAFkC;AAGtCC,EAAAA,MAAM,EAAE,MAH8B;AAItCC,EAAAA,OAAO,EAAEL,OAJ6B;AAKtCM,EAAAA,MAAM,EAAE,IAL8B;AAMtCC,EAAAA,SAAS,EAAE,CAAC,qBAAD,CAN2B;AAOtCC,EAAAA,UAAU,EAAE,CAAC,MAAD,CAP0B;AAQtCC,EAAAA,KAAK,EAAE,CAAC;AAAA,WAAM,KAAN;AAAA,GAAD,CAR+B;AAStCC,EAAAA,OAAO,EAAE;AACPC,IAAAA,IAAI,EAAE;AADC;AAT6B,CAAjC;;;AAkBP,SAASC,SAAT,CAAmBC,WAAnB,EAAgCH,OAAhC,EAAyCI,OAAzC,EAAkD;AAChD,MAAI,CAACJ,OAAO,CAACC,IAAR,CAAaI,cAAlB,EAAkC,OAAO,IAAP;AAClCD,EAAAA,OAAO,GAAGA,OAAO,IAAIE,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeJ,OAAf,CAAX,CAArB;AACA,SAAO;AAACD,IAAAA,WAAW,EAAXA,WAAD;AAAcH,IAAAA,OAAO,EAAPA,OAAd;AAAuBI,IAAAA,OAAO,EAAPA;AAAvB,GAAP;AACD;;AAKM,IAAMK,UAA4B,GAAG;AAC1CjB,EAAAA,IAAI,EAAE,aADoC;AAE1CC,EAAAA,EAAE,EAAE,MAFsC;AAG1CC,EAAAA,MAAM,EAAE,MAHkC;AAI1CC,EAAAA,OAAO,EAAEL,OAJiC;AAK1CO,EAAAA,SAAS,EAAE,CAAC,qBAAD,CAL+B;AAM1CC,EAAAA,UAAU,EAAE,CAAC,MAAD,CAN8B;AAO1CS,EAAAA,KAAK;AAAA,2EAAE,iBAAOJ,WAAP,EAAoBH,OAApB,EAA6BI,OAA7B;AAAA;AAAA;AAAA;AAAA;AAAA,+CAAyCF,SAAS,CAACC,WAAD,EAAcH,OAAd,EAAuBI,OAAvB,CAAlD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA,KAPqC;AAQ1CF,EAAAA,SAAS,EAATA,SAR0C;AAS1CQ,EAAAA,cAAc;AAAA,iFAAE,kBAA0BC,aAA1B,EAAyCX,OAAzC,EAAkDI,OAAlD;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uDACYO,aADZ;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AACGC,cAAAA,KADH;AAAA;AAEZ,qBAAMV,SAAS,CAACU,KAAD,EAAQZ,OAAR,EAAiBI,OAAjB,CAAf;;AAFY;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAF;;AAAA,aAAkBS,SAAlB;AAAA;AAAA;;AAAA,WAAkBA,SAAlB;AAAA,KAT4B;AAc1Cd,EAAAA,KAAK,EAAE,CAAC;AAAA,WAAM,KAAN;AAAA,GAAD,CAdmC;AAe1CC,EAAAA,OAAO,EAAE;AACPC,IAAAA,IAAI,EAAE;AACJI,MAAAA,cAAc,EAAE;AADZ;AADC;AAfiC,CAArC","sourcesContent":["// __VERSION__ is injected by babel-plugin-version-inline\n// @ts-ignore TS2304: Cannot find name '__VERSION__'.\nconst VERSION = typeof __VERSION__ !== 'undefined' ? __VERSION__ : 'latest';\n\nimport {Loader, LoaderWithParser} from '@loaders.gl/loader-utils';\n\n/**\n * Loads any data and returns null (or optionally passes through data unparsed)\n */\nexport const NullWorkerLoader: Loader = {\n  name: 'Null loader',\n  id: 'null',\n  module: 'core',\n  version: VERSION,\n  worker: true,\n  mimeTypes: ['application/x.empty'],\n  extensions: ['null'],\n  tests: [() => false],\n  options: {\n    null: {}\n  }\n};\n\n/**\n * Returns arguments passed to the parse API in a format that can be transfered to a\n * web worker. The `context` parameter is stripped using JSON.stringify & parse.\n */\nfunction parseSync(arrayBuffer, options, context) {\n  if (!options.null.echoParameters) return null;\n  context = context && JSON.parse(JSON.stringify(context));\n  return {arrayBuffer, options, context};\n}\n\n/**\n * Loads any data and returns null (or optionally passes through data unparsed)\n */\nexport const NullLoader: LoaderWithParser = {\n  name: 'Null loader',\n  id: 'null',\n  module: 'core',\n  version: VERSION,\n  mimeTypes: ['application/x.empty'],\n  extensions: ['null'],\n  parse: async (arrayBuffer, options, context) => parseSync(arrayBuffer, options, context),\n  parseSync,\n  parseInBatches: async function* generator(asyncIterator, options, context) {\n    for await (const batch of asyncIterator) {\n      yield parseSync(batch, options, context);\n    }\n  },\n  tests: [() => false],\n  options: {\n    null: {\n      echoParameters: false\n    }\n  }\n};\n"],"file":"null-loader.js"}