{"version":3,"sources":["../../../../src/iterators/make-iterator/make-blob-iterator.ts"],"names":["DEFAULT_CHUNK_SIZE","makeBlobIterator","blob","options","chunkSize","offset","size","end","slice","arrayBuffer","chunk"],"mappings":";;;;;;;;;;;;;;;AAEA,IAAMA,kBAAkB,GAAG,OAAO,IAAlC;;SAQuBC,gB;;;;;kFAAhB,iBACLC,IADK,EAELC,OAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAICC,YAAAA,SAJD,GAIa,CAAAD,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEC,SAAT,KAAsBJ,kBAJnC;AAMDK,YAAAA,MANC,GAMQ,CANR;;AAAA;AAAA,kBAOEA,MAAM,GAAGH,IAAI,CAACI,IAPhB;AAAA;AAAA;AAAA;;AAQGC,YAAAA,GARH,GAQSF,MAAM,GAAGD,SARlB;AAAA;AAAA,sDAUiBF,IAAI,CAACM,KAAL,CAAWH,MAAX,EAAmBE,GAAnB,EAAwBE,WAAxB,EAVjB;;AAAA;AAUGC,YAAAA,KAVH;AAYHL,YAAAA,MAAM,GAAGE,GAAT;AAZG;AAaH,mBAAMG,KAAN;;AAbG;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import type {IteratorOptions} from './make-iterator';\n\nconst DEFAULT_CHUNK_SIZE = 1024 * 1024; // 1MB â€” biggest value that keeps UI responsive\n\n/**\n * Returns an iterator that breaks a big Blob into chunks and yields them one-by-one\n * @param blob Blob or File object\n * @param options\n * @param options.chunkSize\n */\nexport async function* makeBlobIterator(\n  blob: Blob,\n  options?: IteratorOptions\n): AsyncIterable<ArrayBuffer> {\n  const chunkSize = options?.chunkSize || DEFAULT_CHUNK_SIZE;\n\n  let offset = 0;\n  while (offset < blob.size) {\n    const end = offset + chunkSize;\n\n    const chunk = await blob.slice(offset, end).arrayBuffer();\n\n    offset = end;\n    yield chunk;\n  }\n}\n"],"file":"make-blob-iterator.js"}