{"version":3,"sources":["../../../../src/iterators/make-stream/make-dom-stream.ts"],"names":["makeStream","source","options","iterator","Symbol","asyncIterator","ReadableStream","type","pull","controller","next","done","value","close","enqueue","Uint8Array","error","cancel","return","highWaterMark"],"mappings":";;;;;;;;;;;;;;;;;;;AAaO,SAASA,UAAT,CACLC,MADK,EAELC,OAFK,EAGW;AAChB,MAAMC,QAAQ,GAAGF,MAAM,CAACG,MAAM,CAACC,aAAR,CAAN,GACZJ,MAAD,CAAuCG,MAAM,CAACC,aAA9C,GADa,GAEZJ,MAAD,CAAkCG,MAAM,CAACD,QAAzC,GAFJ;AAIA,SAAO,IAAIG,cAAJ,CACL;AAKEC,IAAAA,IAAI,EAAE,OALR;AAOQC,IAAAA,IAPR,gBAOaC,UAPb,EAOyB;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAESN,QAAQ,CAACO,IAAT,EAFT;;AAAA;AAAA;AAEZC,gBAAAA,IAFY,wBAEZA,IAFY;AAENC,gBAAAA,KAFM,wBAENA,KAFM;;AAGnB,oBAAID,IAAJ,EAAU;AACRF,kBAAAA,UAAU,CAACI,KAAX;AACD,iBAFD,MAEO;AAELJ,kBAAAA,UAAU,CAACK,OAAX,CAAmB,IAAIC,UAAJ,CAAeH,KAAf,CAAnB;AACD;;AARkB;AAAA;;AAAA;AAAA;AAAA;AAUnBH,gBAAAA,UAAU,CAACO,KAAX;;AAVmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYtB,KAnBH;AAqBQC,IAAAA,MArBR,oBAqBiB;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACPd,QADO,aACPA,QADO,2CACPA,QAAQ,CAAEe,MADH,qDACP,sBAAAf,QAAQ,CADD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEd;AAvBH,GADK;AA6BHgB,IAAAA,aAAa,WAAE,CAAF,EAAO,EAAP;AA7BV,KA8BAjB,OA9BA,EAAP;AAiCD","sourcesContent":["export type MakeStreamOptions = {\n  /** Stream allocates an arrayBuffer. Enables use of a default reader. */\n  autoAllocateChunkSize?: number;\n  /** Total number of chunks in queue before back pressure is applied */\n  highWaterMark?: number;\n};\n\n/**\n * Builds a DOM stream from an iterator\n * This stream is currently used in browsers only,\n * but note that Web stream support is present in Node from Node 16\n * https://nodejs.org/api/webstreams.html#webstreams_web_streams_api\n */\nexport function makeStream<ArrayBuffer>(\n  source: Iterable<ArrayBuffer> | AsyncIterable<ArrayBuffer>,\n  options?: MakeStreamOptions\n): ReadableStream {\n  const iterator = source[Symbol.asyncIterator]\n    ? (source as AsyncIterable<ArrayBuffer>)[Symbol.asyncIterator]()\n    : (source as Iterable<ArrayBuffer>)[Symbol.iterator]();\n\n  return new ReadableStream<Uint8Array>(\n    {\n      // Create a byte stream (enables `Response(stream).arrayBuffer()`)\n      // Only supported on Chrome\n      // See: https://developer.mozilla.org/en-US/docs/Web/API/ReadableByteStreamController\n      // @ts-expect-error Only Chrome supports byte streams\n      type: 'bytes',\n\n      async pull(controller) {\n        try {\n          const {done, value} = await iterator.next();\n          if (done) {\n            controller.close();\n          } else {\n            // TODO - ignores controller.desiredSize\n            controller.enqueue(new Uint8Array(value));\n          }\n        } catch (error) {\n          controller.error(error);\n        }\n      },\n\n      async cancel() {\n        await iterator?.return?.();\n      }\n    },\n    // options: QueingStrategy<Uint8Array>\n    {\n      // This is bytes, not chunks\n      highWaterMark: 2 ** 24,\n      ...options\n    }\n  );\n}\n"],"file":"make-dom-stream.js"}