"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.timedBatchIterator = timedBatchIterator;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _awaitAsyncGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/awaitAsyncGenerator"));

var _wrapAsyncGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/wrapAsyncGenerator"));

var _asyncIterator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncIterator"));

function timedBatchIterator(_x, _x2) {
  return _timedBatchIterator.apply(this, arguments);
}

function _timedBatchIterator() {
  _timedBatchIterator = (0, _wrapAsyncGenerator2.default)(_regenerator.default.mark(function _callee(batchIterator, timeout) {
    var start, batches, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, batch;

    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            start = Date.now();
            batches = [];
            _iteratorNormalCompletion = true;
            _didIteratorError = false;
            _context.prev = 4;
            _iterator = (0, _asyncIterator2.default)(batchIterator);

          case 6:
            _context.next = 8;
            return (0, _awaitAsyncGenerator2.default)(_iterator.next());

          case 8:
            _step = _context.sent;
            _iteratorNormalCompletion = _step.done;
            _context.next = 12;
            return (0, _awaitAsyncGenerator2.default)(_step.value);

          case 12:
            _value = _context.sent;

            if (_iteratorNormalCompletion) {
              _context.next = 24;
              break;
            }

            batch = _value;
            batches.push(batch);

            if (!(Date.now() - start > timeout)) {
              _context.next = 21;
              break;
            }

            _context.next = 19;
            return batches;

          case 19:
            start = Date.now();
            batches = [];

          case 21:
            _iteratorNormalCompletion = true;
            _context.next = 6;
            break;

          case 24:
            _context.next = 30;
            break;

          case 26:
            _context.prev = 26;
            _context.t0 = _context["catch"](4);
            _didIteratorError = true;
            _iteratorError = _context.t0;

          case 30:
            _context.prev = 30;
            _context.prev = 31;

            if (!(!_iteratorNormalCompletion && _iterator.return != null)) {
              _context.next = 35;
              break;
            }

            _context.next = 35;
            return (0, _awaitAsyncGenerator2.default)(_iterator.return());

          case 35:
            _context.prev = 35;

            if (!_didIteratorError) {
              _context.next = 38;
              break;
            }

            throw _iteratorError;

          case 38:
            return _context.finish(35);

          case 39:
            return _context.finish(30);

          case 40:
            if (!batches) {
              _context.next = 43;
              break;
            }

            _context.next = 43;
            return batches;

          case 43:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[4, 26, 30, 40], [31,, 35, 39]]);
  }));
  return _timedBatchIterator.apply(this, arguments);
}
//# sourceMappingURL=timed-batch-iterator.js.map