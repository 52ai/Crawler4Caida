{"version":3,"sources":["../../../../src/lib/progress/fetch-progress.ts"],"names":["fetchProgress","response","onProgress","onDone","onError","ok","body","contentLength","headers","get","totalBytes","parseInt","ReadableStream","getReader","progressStream","start","controller","reader","read","Response","loadedBytes","done","value","close","byteLength","percent","Math","round","enqueue","error"],"mappings":";;;;;;;;;;;;;SAK8BA,a;;;;;6EAAf,kBACbC,QADa,EAEbC,UAFa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGbC,YAAAA,MAHa,8DAGJ,YAAM,CAAE,CAHJ;AAIbC,YAAAA,OAJa,8DAIH,YAAM,CAAE,CAJL;AAAA;AAAA,mBAMIH,QANJ;;AAAA;AAMbA,YAAAA,QANa;;AAAA,gBAORA,QAAQ,CAACI,EAPD;AAAA;AAAA;AAAA;;AAAA,8CASJJ,QATI;;AAAA;AAWPK,YAAAA,IAXO,GAWAL,QAAQ,CAACK,IAXT;;AAAA,gBAYRA,IAZQ;AAAA;AAAA;AAAA;;AAAA,8CAcJL,QAdI;;AAAA;AAgBPM,YAAAA,aAhBO,GAgBSN,QAAQ,CAACO,OAAT,CAAiBC,GAAjB,CAAqB,gBAArB,KAA0C,CAhBnD;AAiBPC,YAAAA,UAjBO,GAiBMH,aAAa,IAAII,QAAQ,CAACJ,aAAD,CAjB/B;;AAAA,gBAkBPA,aAAa,GAAG,CAlBT;AAAA;AAAA;AAAA;;AAAA,8CAmBJN,QAnBI;;AAAA;AAAA,kBAsBT,OAAOW,cAAP,KAA0B,WAA1B,IAAyC,CAACN,IAAI,CAACO,SAtBtC;AAAA;AAAA;AAAA;;AAAA,8CAuBJZ,QAvBI;;AAAA;AA2BPa,YAAAA,cA3BO,GA2BU,IAAIF,cAAJ,CAAmB;AAClCG,cAAAA,KADkC,iBAC5BC,UAD4B,EAChB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAChBC,0BAAAA,MADgB,GACPX,IAAI,CAACO,SAAL,EADO;AAAA;AAAA,iCAEhBK,IAAI,CAACF,UAAD,EAAaC,MAAb,EAAqB,CAArB,EAAwBP,UAAxB,EAAoCR,UAApC,EAAgDC,MAAhD,EAAwDC,OAAxD,CAFY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGvB;AAJuC,aAAnB,CA3BV;AAAA,8CAkCN,IAAIe,QAAJ,CAAaL,cAAb,CAlCM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAwCAI,I;;;;;oEAAf,kBAAoBF,UAApB,EAAgCC,MAAhC,EAAwCG,WAAxC,EAAqDV,UAArD,EAAiER,UAAjE,EAA6EC,MAA7E,EAAqFC,OAArF;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEgCa,MAAM,CAACC,IAAP,EAFhC;;AAAA;AAAA;AAEWG,YAAAA,IAFX,sBAEWA,IAFX;AAEiBC,YAAAA,KAFjB,sBAEiBA,KAFjB;;AAAA,iBAGQD,IAHR;AAAA;AAAA;AAAA;;AAIMlB,YAAAA,MAAM;AACNa,YAAAA,UAAU,CAACO,KAAX;AALN;;AAAA;AAQIH,YAAAA,WAAW,IAAIE,KAAK,CAACE,UAArB;AACMC,YAAAA,OATV,GASoBC,IAAI,CAACC,KAAL,CAAYP,WAAW,GAAGV,UAAf,GAA6B,GAAxC,CATpB;AAUIR,YAAAA,UAAU,CAACuB,OAAD,EAAU;AAACL,cAAAA,WAAW,EAAXA,WAAD;AAAcV,cAAAA,UAAU,EAAVA;AAAd,aAAV,CAAV;AACAM,YAAAA,UAAU,CAACY,OAAX,CAAmBN,KAAnB;AAXJ;AAAA,mBAYUJ,IAAI,CAACF,UAAD,EAAaC,MAAb,EAAqBG,WAArB,EAAkCV,UAAlC,EAA8CR,UAA9C,EAA0DC,MAA1D,EAAkEC,OAAlE,CAZd;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAcIY,YAAAA,UAAU,CAACa,KAAX;AACAzB,YAAAA,OAAO,cAAP;;AAfJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["// Forked from github AnthumChris/fetch-progress-indicators under MIT license\n\n/**\n * Intercepts the Response stream and creates a new Response\n */\nexport default async function fetchProgress(\n  response: Response | Promise<Response>,\n  onProgress: any, // TODO better callback types\n  onDone = () => {},\n  onError = () => {}\n) {\n  response = await response;\n  if (!response.ok) {\n    // ERROR checking needs to be done separately\n    return response;\n  }\n  const body = response.body;\n  if (!body) {\n    // 'ReadableStream not yet supported in this browser.\n    return response;\n  }\n  const contentLength = response.headers.get('content-length') || 0;\n  const totalBytes = contentLength && parseInt(contentLength);\n  if (!(contentLength > 0)) {\n    return response;\n  }\n  // Currently override only implemented in browser\n  if (typeof ReadableStream === 'undefined' || !body.getReader) {\n    return response;\n  }\n\n  // Create a new stream that invisbly wraps original stream\n  const progressStream = new ReadableStream({\n    async start(controller) {\n      const reader = body.getReader();\n      await read(controller, reader, 0, totalBytes, onProgress, onDone, onError);\n    }\n  });\n\n  return new Response(progressStream);\n}\n\n// Forward to original streams controller\n// TODO - this causes a crazy deep \"async stack\"... rewrite as async iterator?\n// eslint-disable-next-line max-params\nasync function read(controller, reader, loadedBytes, totalBytes, onProgress, onDone, onError) {\n  try {\n    const {done, value} = await reader.read();\n    if (done) {\n      onDone();\n      controller.close();\n      return;\n    }\n    loadedBytes += value.byteLength;\n    const percent = Math.round((loadedBytes / totalBytes) * 100);\n    onProgress(percent, {loadedBytes, totalBytes});\n    controller.enqueue(value);\n    await read(controller, reader, loadedBytes, totalBytes, onProgress, onDone, onError);\n  } catch (error) {\n    controller.error(error);\n    onError(error);\n  }\n}\n"],"file":"fetch-progress.js"}