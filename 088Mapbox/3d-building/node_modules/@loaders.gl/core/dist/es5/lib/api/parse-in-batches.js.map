{"version":3,"sources":["../../../../src/lib/api/parse-in-batches.ts"],"names":["parseInBatches","data","loaders","options","context","Array","isArray","undefined","url","loader","parse","parseWithLoaderInBatches","makeMetadataBatchIterator","iterator","metadataBatch","parseToOutputIterator","outputIterator","metadata","batchType","_loader","_context","bytesUsed","parseChunkInBatches","transformedIterator","arrayBuffer","mimeType","mimeTypes","parsedData","batch","shape","length","inputIterator","applyInputTransforms","transforms","iteratorChain","transformBatches"],"mappings":"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","sourcesContent":["import type {Batch} from '@loaders.gl/schema';\nimport type {\n  BatchableDataType,\n  Loader,\n  LoaderWithParser,\n  LoaderContext,\n  LoaderOptions\n} from '@loaders.gl/loader-utils';\nimport {assert, concatenateArrayBuffersAsync} from '@loaders.gl/loader-utils';\nimport {isLoaderObject} from '../loader-utils/normalize-loader';\nimport {normalizeOptions} from '../loader-utils/option-utils';\nimport {getLoaderContext} from '../loader-utils/loader-context';\nimport {getAsyncIterableFromData} from '../loader-utils/get-data';\nimport {getResourceUrlAndType} from '../utils/resource-utils';\nimport {selectLoader} from './select-loader';\n\n// Ensure `parse` is available in context if loader falls back to `parse`\nimport {parse} from './parse';\n\n/**\n * Parses `data` using a specified loader\n * @param data\n * @param loaders\n * @param options\n * @param context\n */\nexport async function parseInBatches(\n  data: BatchableDataType,\n  loaders?: Loader | Loader[] | LoaderOptions,\n  options?: LoaderOptions,\n  context?: LoaderContext\n): Promise<AsyncIterable<any>> {\n  assert(!context || typeof context === 'object'); // parseInBatches no longer accepts final url\n\n  // Signature: parseInBatches(data, options, url) - Uses registered loaders\n  if (!Array.isArray(loaders) && !isLoaderObject(loaders)) {\n    context = undefined; // context not supported in short signature\n    options = loaders as LoaderOptions;\n    loaders = undefined;\n  }\n\n  data = await data; // Resolve any promise\n  options = options || {};\n\n  // Extract a url for auto detection\n  const {url} = getResourceUrlAndType(data);\n\n  // Chooses a loader and normalizes it\n  // Note - only uses URL and contentType for streams and iterator inputs\n  const loader = await selectLoader(data as ArrayBuffer, loaders as Loader[], options);\n  // Note: if options.nothrow was set, it is possible that no loader was found, if so just return null\n  if (!loader) {\n    // @ts-ignore\n    return null;\n  }\n\n  // Normalize options\n  // @ts-ignore\n  options = normalizeOptions(options, loader, loaders, url);\n  // @ts-ignore\n  context = getLoaderContext(\n    // @ts-ignore\n    {url, parseInBatches, parse, loaders: loaders as Loader[]},\n    options,\n    context\n  );\n\n  return await parseWithLoaderInBatches(loader as LoaderWithParser, data, options, context);\n}\n\n/**\n * Loader has been selected and context has been prepared, see if we need to emit a metadata batch\n */\nasync function parseWithLoaderInBatches(\n  loader: LoaderWithParser,\n  data: BatchableDataType,\n  options: LoaderOptions,\n  context: LoaderContext\n): Promise<AsyncIterable<any>> {\n  const outputIterator = await parseToOutputIterator(loader, data, options, context);\n\n  // Generate metadata batch if requested\n  if (!options.metadata) {\n    return outputIterator;\n  }\n\n  const metadataBatch = {\n    batchType: 'metadata',\n    metadata: {\n      _loader: loader,\n      _context: context\n    },\n    // Populate with some default fields to avoid crashing\n    data: [],\n    bytesUsed: 0\n  };\n\n  async function* makeMetadataBatchIterator(iterator) {\n    yield metadataBatch;\n    yield* iterator;\n  }\n\n  return makeMetadataBatchIterator(outputIterator);\n}\n\n/**\n * Prep work is done, now it is time to start parsing into an output operator\n * The approach depends on which parse function the loader exposes\n * `parseInBatches` (preferred), `parse` (fallback)\n */\nasync function parseToOutputIterator(\n  loader: LoaderWithParser,\n  data: BatchableDataType,\n  options: LoaderOptions,\n  context: LoaderContext\n): Promise<AsyncIterable<any>> {\n  // Get an iterator from the input\n  const inputIterator = await getAsyncIterableFromData(data, options);\n\n  // Apply any iterator transforms (options.transforms)\n  const transformedIterator = await applyInputTransforms(inputIterator, options?.transforms || []);\n\n  // If loader supports parseInBatches, we are done\n  if (loader.parseInBatches) {\n    return loader.parseInBatches(transformedIterator, options, context);\n  }\n\n  // Fallback: load atomically using `parse` concatenating input iterator into single chunk\n  async function* parseChunkInBatches() {\n    const arrayBuffer = await concatenateArrayBuffersAsync(transformedIterator);\n    // Call `parse` instead of `loader.parse` to ensure we can call workers etc.\n    const parsedData = await parse(\n      arrayBuffer,\n      loader,\n      // TODO - Hack: supply loaders MIME type to ensure we match it\n      {...options, mimeType: loader.mimeTypes[0]},\n      context\n    );\n    // yield a single batch, the output from loader.parse()\n    // TODO - run through batch builder to apply options etc...\n    const batch: Batch = {\n      mimeType: loader.mimeTypes[0],\n      shape: Array.isArray(parsedData) ? 'row-table' : 'unknown',\n      batchType: 'data',\n      data: parsedData,\n      length: Array.isArray(parsedData) ? parsedData.length : 1\n    };\n    yield batch;\n  }\n\n  return parseChunkInBatches();\n}\n\ntype TransformBatches = (\n  asyncIterator: AsyncIterable<ArrayBuffer> | Iterable<ArrayBuffer>\n) => AsyncIterable<ArrayBuffer>;\n\n/**\n * Create an iterator chain with any transform iterators (crypto, decompression)\n * @param inputIterator\n * @param options\n */\nasync function applyInputTransforms(\n  inputIterator: AsyncIterable<ArrayBuffer> | Iterable<ArrayBuffer>,\n  transforms: TransformBatches[] = []\n): Promise<AsyncIterable<ArrayBuffer> | Iterable<ArrayBuffer>> {\n  let iteratorChain = inputIterator;\n  for await (const transformBatches of transforms) {\n    iteratorChain = transformBatches(iteratorChain);\n  }\n  return iteratorChain;\n}\n"],"file":"parse-in-batches.js"}