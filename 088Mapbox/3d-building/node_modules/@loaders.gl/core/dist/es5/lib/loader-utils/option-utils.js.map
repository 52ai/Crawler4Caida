{"version":3,"sources":["../../../../src/lib/loader-utils/option-utils.ts"],"names":["getGlobalLoaderState","globalThis","loaders","_state","getGlobalLoaderOptions","state","globalOptions","DEFAULT_LOADER_OPTIONS","setGlobalOptions","options","normalizeOptionsInternal","normalizeOptions","loader","url","Array","isArray","validateOptions","getFetchFunction","context","fetchOptions","fetch","fetchFile","validateOptionsObject","REMOVED_LOADER_OPTIONS","idOptions","id","loaderOptions","deprecatedOptions","defaultOptions","loaderName","prefix","key","isSubOptions","isBaseUriOption","isWorkerUrlOption","probeLog","warn","suggestion","findSimilarOption","optionKey","lowerCaseOptionKey","toLowerCase","bestSuggestion","lowerCaseKey","isPartialMatch","startsWith","loaderDefaultOptions","mergedOptions","addUrlOptions","log","NullLog","mergeNestedFields","value","baseUri"],"mappings":"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","sourcesContent":["import type {Loader, LoaderContext, LoaderOptions} from '@loaders.gl/loader-utils';\nimport {isPureObject, isObject} from '../../javascript-utils/is-type';\nimport {fetchFile} from '../fetch/fetch-file';\nimport {probeLog, NullLog} from './loggers';\nimport {DEFAULT_LOADER_OPTIONS, REMOVED_LOADER_OPTIONS} from './option-defaults';\n/**\n * Global state for loaders.gl. Stored on `global.loaders._state`\n */\ntype GlobalLoaderState = {\n  loaderRegistry: Loader[];\n  globalOptions: {[key: string]: any};\n};\n\n/**\n * Helper for safely accessing global loaders.gl variables\n * Wraps initialization of global variable in function to defeat overly aggressive tree-shakers\n */\nexport function getGlobalLoaderState(): GlobalLoaderState {\n  // @ts-ignore\n  globalThis.loaders = globalThis.loaders || {};\n  // @ts-ignore\n  const {loaders} = globalThis;\n\n  // Add _state object to keep separate from modules added to globalThis.loaders\n  loaders._state = loaders._state || {};\n  return loaders._state;\n}\n\n/**\n * Store global loader options on the global object to increase chances of cross loaders-version interoperability\n * NOTE: This use case is not reliable but can help when testing new versions of loaders.gl with existing frameworks\n * @returns global loader options merged with default loader options\n */\nexport const getGlobalLoaderOptions = () => {\n  const state = getGlobalLoaderState();\n  // Ensure all default loader options from this library are mentioned\n  state.globalOptions = state.globalOptions || {...DEFAULT_LOADER_OPTIONS};\n  return state.globalOptions;\n};\n\n/**\n * Set global loader options\n * @param options\n */\nexport function setGlobalOptions(options: object): void {\n  const state = getGlobalLoaderState();\n  const globalOptions = getGlobalLoaderOptions();\n  state.globalOptions = normalizeOptionsInternal(globalOptions, options);\n}\n\n/**\n * Merges options with global opts and loader defaults, also injects baseUri\n * @param options\n * @param loader\n * @param loaders\n * @param url\n */\nexport function normalizeOptions(\n  options: object,\n  loader: Loader,\n  loaders?: Loader[],\n  url?: string\n): object {\n  loaders = loaders || [];\n  loaders = Array.isArray(loaders) ? loaders : [loaders];\n\n  validateOptions(options, loaders);\n  return normalizeOptionsInternal(loader, options, url);\n}\n\n/**\n * Gets the current fetch function from options and context\n * @param options\n * @param context\n */\nexport function getFetchFunction(\n  options?: LoaderOptions,\n  context?: Omit<LoaderContext, 'fetch'> & Partial<Pick<LoaderContext, 'fetch'>>\n) {\n  const globalOptions = getGlobalLoaderOptions();\n\n  const fetchOptions = options || globalOptions;\n\n  // options.fetch can be a function\n  if (typeof fetchOptions.fetch === 'function') {\n    return fetchOptions.fetch;\n  }\n\n  // options.fetch can be an options object\n  if (isObject(fetchOptions.fetch)) {\n    return (url) => fetchFile(url, fetchOptions);\n  }\n\n  // else refer to context (from parent loader) if available\n  if (context?.fetch) {\n    return context?.fetch;\n  }\n\n  // else return the default fetch function\n  return fetchFile;\n}\n\n// VALIDATE OPTIONS\n\n/**\n * Warn for unsupported options\n * @param options\n * @param loaders\n */\nfunction validateOptions(options: LoaderOptions, loaders: Loader[]) {\n  // Check top level options\n  validateOptionsObject(options, null, DEFAULT_LOADER_OPTIONS, REMOVED_LOADER_OPTIONS, loaders);\n  for (const loader of loaders) {\n    // Get the scoped, loader specific options from the user supplied options\n    const idOptions = (options && options[loader.id]) || {};\n\n    // Get scoped, loader specific default and deprecated options from the selected loader\n    const loaderOptions = (loader.options && loader.options[loader.id]) || {};\n    const deprecatedOptions =\n      (loader.deprecatedOptions && loader.deprecatedOptions[loader.id]) || {};\n\n    // Validate loader specific options\n    validateOptionsObject(idOptions, loader.id, loaderOptions, deprecatedOptions, loaders);\n  }\n}\n\n// eslint-disable-next-line max-params, complexity\nfunction validateOptionsObject(\n  options,\n  id: string | null,\n  defaultOptions,\n  deprecatedOptions,\n  loaders: Loader[]\n) {\n  const loaderName = id || 'Top level';\n  const prefix = id ? `${id}.` : '';\n\n  for (const key in options) {\n    // If top level option value is an object it could options for a loader, so ignore\n    const isSubOptions = !id && isObject(options[key]);\n    const isBaseUriOption = key === 'baseUri' && !id;\n    const isWorkerUrlOption = key === 'workerUrl' && id;\n    // <loader>.workerUrl requires special handling as it is now auto-generated and no longer specified as a default option.\n    if (!(key in defaultOptions) && !isBaseUriOption && !isWorkerUrlOption) {\n      // Issue deprecation warnings\n      if (key in deprecatedOptions) {\n        probeLog.warn(\n          `${loaderName} loader option \\'${prefix}${key}\\' no longer supported, use \\'${deprecatedOptions[key]}\\'`\n        )();\n      } else if (!isSubOptions) {\n        const suggestion = findSimilarOption(key, loaders);\n        probeLog.warn(\n          `${loaderName} loader option \\'${prefix}${key}\\' not recognized. ${suggestion}`\n        )();\n      }\n    }\n  }\n}\n\nfunction findSimilarOption(optionKey, loaders) {\n  const lowerCaseOptionKey = optionKey.toLowerCase();\n  let bestSuggestion = '';\n  for (const loader of loaders) {\n    for (const key in loader.options) {\n      if (optionKey === key) {\n        return `Did you mean \\'${loader.id}.${key}\\'?`;\n      }\n      const lowerCaseKey = key.toLowerCase();\n      const isPartialMatch =\n        lowerCaseOptionKey.startsWith(lowerCaseKey) || lowerCaseKey.startsWith(lowerCaseOptionKey);\n      if (isPartialMatch) {\n        bestSuggestion = bestSuggestion || `Did you mean \\'${loader.id}.${key}\\'?`;\n      }\n    }\n  }\n  return bestSuggestion;\n}\n\nfunction normalizeOptionsInternal(loader, options, url?: string) {\n  const loaderDefaultOptions = loader.options || {};\n\n  const mergedOptions = {...loaderDefaultOptions};\n\n  addUrlOptions(mergedOptions, url);\n\n  // LOGGING: options.log can be set to `null` to defeat logging\n  if (mergedOptions.log === null) {\n    mergedOptions.log = new NullLog();\n  }\n\n  mergeNestedFields(mergedOptions, getGlobalLoaderOptions());\n  mergeNestedFields(mergedOptions, options);\n\n  return mergedOptions;\n}\n\n// Merge nested options objects\nfunction mergeNestedFields(mergedOptions, options) {\n  for (const key in options) {\n    // Check for nested options\n    // object in options => either no key in defaultOptions or object in defaultOptions\n    if (key in options) {\n      const value = options[key];\n      if (isPureObject(value) && isPureObject(mergedOptions[key])) {\n        mergedOptions[key] = {\n          ...mergedOptions[key],\n          ...options[key]\n        };\n      } else {\n        mergedOptions[key] = options[key];\n      }\n    }\n    // else: No need to merge nested opts, and the initial merge already copied over the nested options\n  }\n}\n\n// Harvest information from the url\n// TODO - baseUri should be a directory, i.e. remove file component from baseUri\n// TODO - extract extension?\n// TODO - extract query parameters?\n// TODO - should these be injected on context instead of options?\nfunction addUrlOptions(options, url?: string) {\n  if (url && !('baseUri' in options)) {\n    options.baseUri = url;\n  }\n}\n"],"file":"option-utils.js"}