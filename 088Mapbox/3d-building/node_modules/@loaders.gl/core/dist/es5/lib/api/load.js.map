{"version":3,"sources":["../../../../src/lib/api/load.ts"],"names":["load","url","loaders","options","context","Array","isArray","undefined","fetch","data"],"mappings":";;;;;;;;;;;;;AACA;;AACA;;AACA;;AAEA;;SAYsBA,I;;;;;oEAAf,iBACLC,GADK,EAELC,OAFK,EAGLC,OAHK,EAILC,OAJK;AAAA;AAAA;AAAA;AAAA;AAAA;AAOL,gBAAI,CAACC,KAAK,CAACC,OAAN,CAAcJ,OAAd,CAAD,IAA2B,CAAC,qCAAeA,OAAf,CAAhC,EAAyD;AACvDE,cAAAA,OAAO,GAAGG,SAAV;AACAJ,cAAAA,OAAO,GAAGD,OAAV;AACAA,cAAAA,OAAO,GAAGK,SAAV;AACD;;AAGKC,YAAAA,KAdD,GAcS,mCAAiBL,OAAjB,CAdT;AAiBDM,YAAAA,IAjBC,GAiBMR,GAjBN;;AAAA,kBAmBD,OAAOA,GAAP,KAAe,QAnBd;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAoBUO,KAAK,CAACP,GAAD,CApBf;;AAAA;AAoBHQ,YAAAA,IApBG;;AAAA;AAAA,iBAwBD,oBAAOR,GAAP,CAxBC;AAAA;AAAA;AAAA;;AAAA;AAAA,mBA0BUO,KAAK,CAACP,GAAD,CA1Bf;;AAAA;AA0BHQ,YAAAA,IA1BG;;AAAA;AAAA;AAAA,mBA8BQ,kBAAMA,IAAN,EAAYP,OAAZ,EAAqBC,OAArB,CA9BR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import type {DataType, Loader, LoaderContext, LoaderOptions} from '@loaders.gl/loader-utils';\nimport {isBlob} from '../../javascript-utils/is-type';\nimport {isLoaderObject} from '../loader-utils/normalize-loader';\nimport {getFetchFunction} from '../loader-utils/option-utils';\n\nimport {parse} from './parse';\n\n/**\n * Parses `data` using a specified loader\n * Note: Load does duplicate a lot of parse.\n * it can also call fetchFile on string urls, which `parse` won't do.\n * @param data\n * @param loaders\n * @param options\n * @param context\n */\n// implementation signature\nexport async function load(\n  url: string | DataType,\n  loaders?: Loader | Loader[] | LoaderOptions,\n  options?: LoaderOptions,\n  context?: LoaderContext\n): Promise<any> {\n  // Signature: load(url, options)\n  if (!Array.isArray(loaders) && !isLoaderObject(loaders)) {\n    context = undefined; // context not supported in short signature\n    options = loaders as LoaderOptions;\n    loaders = undefined;\n  }\n\n  // Select fetch function\n  const fetch = getFetchFunction(options);\n\n  // at this point, `url` could be already loaded binary data\n  let data = url;\n  // url is a string, fetch the url\n  if (typeof url === 'string') {\n    data = await fetch(url);\n    // URL is Blob or File, fetchFile handles it (alt: we could generate ObjectURL here)\n  }\n\n  if (isBlob(url)) {\n    // The fetch response object will contain blob.name\n    data = await fetch(url);\n  }\n\n  // Data is loaded (at least we have a `Response` object) so time to hand over to `parse`\n  return await parse(data, loaders, options);\n}\n"],"file":"load.js"}