{"version":3,"sources":["../../../../src/lib/loader-utils/option-utils.ts"],"names":["isPureObject","isObject","fetchFile","probeLog","NullLog","DEFAULT_LOADER_OPTIONS","REMOVED_LOADER_OPTIONS","getGlobalLoaderState","globalThis","loaders","_state","getGlobalLoaderOptions","state","globalOptions","setGlobalOptions","options","normalizeOptionsInternal","normalizeOptions","loader","url","Array","isArray","validateOptions","getFetchFunction","context","fetchOptions","fetch","validateOptionsObject","idOptions","id","loaderOptions","deprecatedOptions","defaultOptions","loaderName","prefix","key","isSubOptions","isBaseUriOption","isWorkerUrlOption","warn","suggestion","findSimilarOption","optionKey","lowerCaseOptionKey","toLowerCase","bestSuggestion","lowerCaseKey","isPartialMatch","startsWith","loaderDefaultOptions","mergedOptions","addUrlOptions","log","mergeNestedFields","value","baseUri"],"mappings":"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","sourcesContent":["import type {Loader, LoaderContext, LoaderOptions} from '@loaders.gl/loader-utils';\nimport {isPureObject, isObject} from '../../javascript-utils/is-type';\nimport {fetchFile} from '../fetch/fetch-file';\nimport {probeLog, NullLog} from './loggers';\nimport {DEFAULT_LOADER_OPTIONS, REMOVED_LOADER_OPTIONS} from './option-defaults';\n/**\n * Global state for loaders.gl. Stored on `global.loaders._state`\n */\ntype GlobalLoaderState = {\n  loaderRegistry: Loader[];\n  globalOptions: {[key: string]: any};\n};\n\n/**\n * Helper for safely accessing global loaders.gl variables\n * Wraps initialization of global variable in function to defeat overly aggressive tree-shakers\n */\nexport function getGlobalLoaderState(): GlobalLoaderState {\n  // @ts-ignore\n  globalThis.loaders = globalThis.loaders || {};\n  // @ts-ignore\n  const {loaders} = globalThis;\n\n  // Add _state object to keep separate from modules added to globalThis.loaders\n  loaders._state = loaders._state || {};\n  return loaders._state;\n}\n\n/**\n * Store global loader options on the global object to increase chances of cross loaders-version interoperability\n * NOTE: This use case is not reliable but can help when testing new versions of loaders.gl with existing frameworks\n * @returns global loader options merged with default loader options\n */\nexport const getGlobalLoaderOptions = () => {\n  const state = getGlobalLoaderState();\n  // Ensure all default loader options from this library are mentioned\n  state.globalOptions = state.globalOptions || {...DEFAULT_LOADER_OPTIONS};\n  return state.globalOptions;\n};\n\n/**\n * Set global loader options\n * @param options\n */\nexport function setGlobalOptions(options: object): void {\n  const state = getGlobalLoaderState();\n  const globalOptions = getGlobalLoaderOptions();\n  state.globalOptions = normalizeOptionsInternal(globalOptions, options);\n}\n\n/**\n * Merges options with global opts and loader defaults, also injects baseUri\n * @param options\n * @param loader\n * @param loaders\n * @param url\n */\nexport function normalizeOptions(\n  options: object,\n  loader: Loader,\n  loaders?: Loader[],\n  url?: string\n): object {\n  loaders = loaders || [];\n  loaders = Array.isArray(loaders) ? loaders : [loaders];\n\n  validateOptions(options, loaders);\n  return normalizeOptionsInternal(loader, options, url);\n}\n\n/**\n * Gets the current fetch function from options and context\n * @param options\n * @param context\n */\nexport function getFetchFunction(\n  options?: LoaderOptions,\n  context?: Omit<LoaderContext, 'fetch'> & Partial<Pick<LoaderContext, 'fetch'>>\n) {\n  const globalOptions = getGlobalLoaderOptions();\n\n  const fetchOptions = options || globalOptions;\n\n  // options.fetch can be a function\n  if (typeof fetchOptions.fetch === 'function') {\n    return fetchOptions.fetch;\n  }\n\n  // options.fetch can be an options object\n  if (isObject(fetchOptions.fetch)) {\n    return (url) => fetchFile(url, fetchOptions);\n  }\n\n  // else refer to context (from parent loader) if available\n  if (context?.fetch) {\n    return context?.fetch;\n  }\n\n  // else return the default fetch function\n  return fetchFile;\n}\n\n// VALIDATE OPTIONS\n\n/**\n * Warn for unsupported options\n * @param options\n * @param loaders\n */\nfunction validateOptions(options: LoaderOptions, loaders: Loader[]) {\n  // Check top level options\n  validateOptionsObject(options, null, DEFAULT_LOADER_OPTIONS, REMOVED_LOADER_OPTIONS, loaders);\n  for (const loader of loaders) {\n    // Get the scoped, loader specific options from the user supplied options\n    const idOptions = (options && options[loader.id]) || {};\n\n    // Get scoped, loader specific default and deprecated options from the selected loader\n    const loaderOptions = (loader.options && loader.options[loader.id]) || {};\n    const deprecatedOptions =\n      (loader.deprecatedOptions && loader.deprecatedOptions[loader.id]) || {};\n\n    // Validate loader specific options\n    validateOptionsObject(idOptions, loader.id, loaderOptions, deprecatedOptions, loaders);\n  }\n}\n\n// eslint-disable-next-line max-params, complexity\nfunction validateOptionsObject(\n  options,\n  id: string | null,\n  defaultOptions,\n  deprecatedOptions,\n  loaders: Loader[]\n) {\n  const loaderName = id || 'Top level';\n  const prefix = id ? `${id}.` : '';\n\n  for (const key in options) {\n    // If top level option value is an object it could options for a loader, so ignore\n    const isSubOptions = !id && isObject(options[key]);\n    const isBaseUriOption = key === 'baseUri' && !id;\n    const isWorkerUrlOption = key === 'workerUrl' && id;\n    // <loader>.workerUrl requires special handling as it is now auto-generated and no longer specified as a default option.\n    if (!(key in defaultOptions) && !isBaseUriOption && !isWorkerUrlOption) {\n      // Issue deprecation warnings\n      if (key in deprecatedOptions) {\n        probeLog.warn(\n          `${loaderName} loader option \\'${prefix}${key}\\' no longer supported, use \\'${deprecatedOptions[key]}\\'`\n        )();\n      } else if (!isSubOptions) {\n        const suggestion = findSimilarOption(key, loaders);\n        probeLog.warn(\n          `${loaderName} loader option \\'${prefix}${key}\\' not recognized. ${suggestion}`\n        )();\n      }\n    }\n  }\n}\n\nfunction findSimilarOption(optionKey, loaders) {\n  const lowerCaseOptionKey = optionKey.toLowerCase();\n  let bestSuggestion = '';\n  for (const loader of loaders) {\n    for (const key in loader.options) {\n      if (optionKey === key) {\n        return `Did you mean \\'${loader.id}.${key}\\'?`;\n      }\n      const lowerCaseKey = key.toLowerCase();\n      const isPartialMatch =\n        lowerCaseOptionKey.startsWith(lowerCaseKey) || lowerCaseKey.startsWith(lowerCaseOptionKey);\n      if (isPartialMatch) {\n        bestSuggestion = bestSuggestion || `Did you mean \\'${loader.id}.${key}\\'?`;\n      }\n    }\n  }\n  return bestSuggestion;\n}\n\nfunction normalizeOptionsInternal(loader, options, url?: string) {\n  const loaderDefaultOptions = loader.options || {};\n\n  const mergedOptions = {...loaderDefaultOptions};\n\n  addUrlOptions(mergedOptions, url);\n\n  // LOGGING: options.log can be set to `null` to defeat logging\n  if (mergedOptions.log === null) {\n    mergedOptions.log = new NullLog();\n  }\n\n  mergeNestedFields(mergedOptions, getGlobalLoaderOptions());\n  mergeNestedFields(mergedOptions, options);\n\n  return mergedOptions;\n}\n\n// Merge nested options objects\nfunction mergeNestedFields(mergedOptions, options) {\n  for (const key in options) {\n    // Check for nested options\n    // object in options => either no key in defaultOptions or object in defaultOptions\n    if (key in options) {\n      const value = options[key];\n      if (isPureObject(value) && isPureObject(mergedOptions[key])) {\n        mergedOptions[key] = {\n          ...mergedOptions[key],\n          ...options[key]\n        };\n      } else {\n        mergedOptions[key] = options[key];\n      }\n    }\n    // else: No need to merge nested opts, and the initial merge already copied over the nested options\n  }\n}\n\n// Harvest information from the url\n// TODO - baseUri should be a directory, i.e. remove file component from baseUri\n// TODO - extract extension?\n// TODO - extract query parameters?\n// TODO - should these be injected on context instead of options?\nfunction addUrlOptions(options, url?: string) {\n  if (url && !('baseUri' in options)) {\n    options.baseUri = url;\n  }\n}\n"],"file":"option-utils.js"}