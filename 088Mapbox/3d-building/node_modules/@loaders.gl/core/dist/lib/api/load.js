"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.load = void 0;
const is_type_1 = require("../../javascript-utils/is-type");
const normalize_loader_1 = require("../loader-utils/normalize-loader");
const option_utils_1 = require("../loader-utils/option-utils");
const parse_1 = require("./parse");
/**
 * Parses `data` using a specified loader
 * Note: Load does duplicate a lot of parse.
 * it can also call fetchFile on string urls, which `parse` won't do.
 * @param data
 * @param loaders
 * @param options
 * @param context
 */
// implementation signature
async function load(url, loaders, options, context) {
    // Signature: load(url, options)
    if (!Array.isArray(loaders) && !(0, normalize_loader_1.isLoaderObject)(loaders)) {
        context = undefined; // context not supported in short signature
        options = loaders;
        loaders = undefined;
    }
    // Select fetch function
    const fetch = (0, option_utils_1.getFetchFunction)(options);
    // at this point, `url` could be already loaded binary data
    let data = url;
    // url is a string, fetch the url
    if (typeof url === 'string') {
        data = await fetch(url);
        // URL is Blob or File, fetchFile handles it (alt: we could generate ObjectURL here)
    }
    if ((0, is_type_1.isBlob)(url)) {
        // The fetch response object will contain blob.name
        data = await fetch(url);
    }
    // Data is loaded (at least we have a `Response` object) so time to hand over to `parse`
    return await (0, parse_1.parse)(data, loaders, options);
}
exports.load = load;
