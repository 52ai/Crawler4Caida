"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports._typecheckCSVLoader = exports.CSVLoader = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _schema = require("@loaders.gl/schema");

var _papaparse = _interopRequireDefault(require("./papaparse/papaparse"));

var _asyncIteratorStreamer = _interopRequireDefault(require("./papaparse/async-iterator-streamer"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var VERSION = typeof "3.2.6" !== 'undefined' ? "3.2.6" : 'latest';
var DEFAULT_CSV_LOADER_OPTIONS = {
  csv: {
    shape: 'object-row-table',
    optimizeMemoryUsage: false,
    header: 'auto',
    columnPrefix: 'column',
    quoteChar: '"',
    escapeChar: '"',
    dynamicTyping: true,
    comments: false,
    skipEmptyLines: true,
    delimitersToGuess: [',', '\t', '|', ';']
  }
};
var CSVLoader = {
  id: 'csv',
  module: 'csv',
  name: 'CSV',
  version: VERSION,
  extensions: ['csv', 'tsv', 'dsv'],
  mimeTypes: ['text/csv', 'text/tab-separated-values', 'text/dsv'],
  category: 'table',
  parse: function () {
    var _parse = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee(arrayBuffer, options) {
      return _regenerator.default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", parseCSV(new TextDecoder().decode(arrayBuffer), options));

            case 1:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    function parse(_x, _x2) {
      return _parse.apply(this, arguments);
    }

    return parse;
  }(),
  parseText: function parseText(text, options) {
    return parseCSV(text, options);
  },
  parseInBatches: parseCSVInBatches,
  options: DEFAULT_CSV_LOADER_OPTIONS
};
exports.CSVLoader = CSVLoader;

function parseCSV(_x3, _x4) {
  return _parseCSV.apply(this, arguments);
}

function _parseCSV() {
  _parseCSV = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee2(csvText, options) {
    var csvOptions, firstRow, header, parseWithHeader, papaparseConfig, result, rows, headerRow;
    return _regenerator.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            csvOptions = _objectSpread(_objectSpread({}, DEFAULT_CSV_LOADER_OPTIONS.csv), options === null || options === void 0 ? void 0 : options.csv);
            firstRow = readFirstRow(csvText);
            header = csvOptions.header === 'auto' ? isHeaderRow(firstRow) : Boolean(csvOptions.header);
            parseWithHeader = header;
            papaparseConfig = _objectSpread(_objectSpread({}, csvOptions), {}, {
              header: parseWithHeader,
              download: false,
              transformHeader: parseWithHeader ? duplicateColumnTransformer() : undefined,
              error: function error(e) {
                throw new Error(e);
              }
            });
            result = _papaparse.default.parse(csvText, papaparseConfig);
            rows = result.data;
            headerRow = result.meta.fields || generateHeader(csvOptions.columnPrefix, firstRow.length);
            _context2.t0 = csvOptions.shape;
            _context2.next = _context2.t0 === 'object-row-table' ? 11 : _context2.t0 === 'array-row-table' ? 13 : 15;
            break;

          case 11:
            rows = rows.map(function (row) {
              return Array.isArray(row) ? (0, _schema.convertToObjectRow)(row, headerRow) : row;
            });
            return _context2.abrupt("break", 15);

          case 13:
            rows = rows.map(function (row) {
              return Array.isArray(row) ? row : (0, _schema.convertToArrayRow)(row, headerRow);
            });
            return _context2.abrupt("break", 15);

          case 15:
            return _context2.abrupt("return", rows);

          case 16:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _parseCSV.apply(this, arguments);
}

function parseCSVInBatches(asyncIterator, options) {
  var _options;

  options = _objectSpread({}, options);

  if (options.batchSize === 'auto') {
    options.batchSize = 4000;
  }

  var csvOptions = _objectSpread(_objectSpread({}, DEFAULT_CSV_LOADER_OPTIONS.csv), (_options = options) === null || _options === void 0 ? void 0 : _options.csv);

  var asyncQueue = new _schema.AsyncQueue();
  var isFirstRow = true;
  var headerRow = null;
  var tableBatchBuilder = null;
  var schema = null;

  var config = _objectSpread(_objectSpread({}, csvOptions), {}, {
    header: false,
    download: false,
    chunkSize: 1024 * 1024 * 5,
    skipEmptyLines: false,
    step: function step(results) {
      var row = results.data;

      if (csvOptions.skipEmptyLines) {
        var collapsedRow = row.flat().join('').trim();

        if (collapsedRow === '') {
          return;
        }
      }

      var bytesUsed = results.meta.cursor;

      if (isFirstRow && !headerRow) {
        var header = csvOptions.header === 'auto' ? isHeaderRow(row) : Boolean(csvOptions.header);

        if (header) {
          headerRow = row.map(duplicateColumnTransformer());
          return;
        }
      }

      if (isFirstRow) {
        isFirstRow = false;

        if (!headerRow) {
          headerRow = generateHeader(csvOptions.columnPrefix, row.length);
        }

        schema = deduceSchema(row, headerRow);
      }

      if (csvOptions.optimizeMemoryUsage) {
        row = JSON.parse(JSON.stringify(row));
      }

      tableBatchBuilder = tableBatchBuilder || new _schema.TableBatchBuilder(schema, _objectSpread({
        shape: csvOptions.shape || 'array-row-table'
      }, options));

      try {
        tableBatchBuilder.addRow(row);
        var batch = tableBatchBuilder && tableBatchBuilder.getFullBatch({
          bytesUsed: bytesUsed
        });

        if (batch) {
          asyncQueue.enqueue(batch);
        }
      } catch (error) {
        asyncQueue.enqueue(error);
      }
    },
    complete: function complete(results) {
      try {
        var bytesUsed = results.meta.cursor;
        var batch = tableBatchBuilder && tableBatchBuilder.getFinalBatch({
          bytesUsed: bytesUsed
        });

        if (batch) {
          asyncQueue.enqueue(batch);
        }
      } catch (error) {
        asyncQueue.enqueue(error);
      }

      asyncQueue.close();
    }
  });

  _papaparse.default.parse(asyncIterator, config, _asyncIteratorStreamer.default);

  return asyncQueue;
}

function isHeaderRow(row) {
  return row && row.every(function (value) {
    return typeof value === 'string';
  });
}

function readFirstRow(csvText) {
  var result = _papaparse.default.parse(csvText, {
    download: false,
    dynamicTyping: true,
    preview: 1
  });

  return result.data[0];
}

function duplicateColumnTransformer() {
  var observedColumns = new Set();
  return function (col) {
    var colName = col;
    var counter = 1;

    while (observedColumns.has(colName)) {
      colName = "".concat(col, ".").concat(counter);
      counter++;
    }

    observedColumns.add(colName);
    return colName;
  };
}

function generateHeader(columnPrefix) {
  var count = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var headers = [];

  for (var i = 0; i < count; i++) {
    headers.push("".concat(columnPrefix).concat(i + 1));
  }

  return headers;
}

function deduceSchema(row, headerRow) {
  var schema = headerRow ? {} : [];

  for (var i = 0; i < row.length; i++) {
    var columnName = headerRow && headerRow[i] || i;
    var value = row[i];

    switch ((0, _typeof2.default)(value)) {
      case 'number':
      case 'boolean':
        schema[columnName] = {
          name: String(columnName),
          index: i,
          type: Float32Array
        };
        break;

      case 'string':
      default:
        schema[columnName] = {
          name: String(columnName),
          index: i,
          type: Array
        };
    }
  }

  return schema;
}

var _typecheckCSVLoader = CSVLoader;
exports._typecheckCSVLoader = _typecheckCSVLoader;
//# sourceMappingURL=csv-loader.js.map