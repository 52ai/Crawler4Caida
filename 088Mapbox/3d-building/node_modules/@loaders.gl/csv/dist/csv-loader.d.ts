import type { LoaderWithParser, LoaderOptions } from '@loaders.gl/loader-utils';
import type { Batch } from '@loaders.gl/schema';
export declare type CSVLoaderOptions = LoaderOptions & {
    csv?: {
        shape?: 'array-row-table' | 'object-row-table' | 'columnar-table';
        /** optimizes memory usage but increases parsing time. */
        optimizeMemoryUsage?: boolean;
        columnPrefix?: string;
        header?: 'auto';
        quoteChar?: string;
        escapeChar?: string;
        dynamicTyping?: boolean;
        comments?: boolean;
        skipEmptyLines?: boolean | 'greedy';
        delimitersToGuess?: string[];
    };
};
export declare const CSVLoader: {
    id: string;
    module: string;
    name: string;
    version: any;
    extensions: string[];
    mimeTypes: string[];
    category: string;
    parse: (arrayBuffer: ArrayBuffer, options?: CSVLoaderOptions | undefined) => Promise<any>;
    parseText: (text: string, options?: CSVLoaderOptions | undefined) => Promise<any>;
    parseInBatches: typeof parseCSVInBatches;
    options: CSVLoaderOptions;
};
declare function parseCSVInBatches(asyncIterator: AsyncIterable<ArrayBuffer> | Iterable<ArrayBuffer>, options?: CSVLoaderOptions): AsyncIterable<Batch>;
export declare const _typecheckCSVLoader: LoaderWithParser;
export {};
//# sourceMappingURL=csv-loader.d.ts.map