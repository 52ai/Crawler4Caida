{"version":3,"sources":["../../../src/tileset/tileset-cache.ts"],"names":["defined","x","undefined","TilesetCache","_list","DoublyLinkedList","_sentinel","add","_trimTiles","splice","tail","tile","node","_cacheNode","tileset","addCallback","unloadCallback","remove","trimTiles","list","maximumMemoryUsageInBytes","maximumMemoryUsage","sentinel","head","gpuMemoryUsageInBytes","item","next","unloadTile"],"mappings":";;;;;;;;;;;;;;;AAGA;;AAEA,SAASA,OAAT,CAAiBC,CAAjB,EAAoB;AAClB,SAAOA,CAAC,KAAKC,SAAN,IAAmBD,CAAC,KAAK,IAAhC;AACD;;IAOoBE,Y;AAKnB,0BAAc;AAAA;AAAA;AAAA;AAAA;AAGZ,SAAKC,KAAL,GAAa,IAAIC,yBAAJ,EAAb;AACA,SAAKC,SAAL,GAAiB,KAAKF,KAAL,CAAWG,GAAX,CAAe,UAAf,CAAjB;AACA,SAAKC,UAAL,GAAkB,KAAlB;AACD;;;;WAED,iBAAQ;AAIN,WAAKJ,KAAL,CAAWK,MAAX,CAAkB,KAAKL,KAAL,CAAWM,IAA7B,EAAmC,KAAKJ,SAAxC;AACD;;;WAED,eAAMK,IAAN,EAAY;AACV,UAAMC,IAAI,GAAGD,IAAI,CAACE,UAAlB;;AACA,UAAIb,OAAO,CAACY,IAAD,CAAX,EAAmB;AACjB,aAAKR,KAAL,CAAWK,MAAX,CAAkB,KAAKH,SAAvB,EAAkCM,IAAlC;AACD;AACF;;;WAED,aAAIE,OAAJ,EAAaH,IAAb,EAAmBI,WAAnB,EAAgC;AAC9B,UAAI,CAACf,OAAO,CAACW,IAAI,CAACE,UAAN,CAAZ,EAA+B;AAC7BF,QAAAA,IAAI,CAACE,UAAL,GAAkB,KAAKT,KAAL,CAAWG,GAAX,CAAeI,IAAf,CAAlB;;AAEA,YAAII,WAAJ,EAAiB;AACfA,UAAAA,WAAW,CAACD,OAAD,EAAUH,IAAV,CAAX;AACD;AACF;AACF;;;WAED,oBAAWG,OAAX,EAAoBH,IAApB,EAA0BK,cAA1B,EAA2C;AACzC,UAAMJ,IAAI,GAAGD,IAAI,CAACE,UAAlB;;AACA,UAAI,CAACb,OAAO,CAACY,IAAD,CAAZ,EAAoB;AAClB;AACD;;AAED,WAAKR,KAAL,CAAWa,MAAX,CAAkBL,IAAlB;;AACAD,MAAAA,IAAI,CAACE,UAAL,GAAkBX,SAAlB;;AACA,UAAIc,cAAJ,EAAoB;AAClBA,QAAAA,cAAc,CAACF,OAAD,EAAUH,IAAV,CAAd;AACD;AACF;;;WAED,qBAAYG,OAAZ,EAAqBE,cAArB,EAAqC;AACnC,UAAME,SAAS,GAAG,KAAKV,UAAvB;AACA,WAAKA,UAAL,GAAkB,KAAlB;AAEA,UAAMW,IAAI,GAAG,KAAKf,KAAlB;AAEA,UAAMgB,yBAAyB,GAAGN,OAAO,CAACO,kBAAR,GAA6B,IAA7B,GAAoC,IAAtE;AAKA,UAAMC,QAAQ,GAAG,KAAKhB,SAAtB;AACA,UAAIM,IAAI,GAAGO,IAAI,CAACI,IAAhB;;AAEA,aACEX,IAAI,KAAKU,QAAT,KACCR,OAAO,CAACU,qBAAR,GAAgCJ,yBAAhC,IAA6DF,SAD9D,CADF,EAGE;AAEA,YAAMP,IAAI,GAAGC,IAAI,CAACa,IAAlB;AAEAb,QAAAA,IAAI,GAAGA,IAAI,CAACc,IAAZ;AACA,aAAKC,UAAL,CAAgBb,OAAhB,EAAyBH,IAAzB,EAA+BK,cAA/B;AACD;AACF;;;WAED,gBAAO;AACL,WAAKR,UAAL,GAAkB,IAAlB;AACD","sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\nimport DoublyLinkedList from '../utils/doubly-linked-list';\n\nfunction defined(x) {\n  return x !== undefined && x !== null;\n}\n\n/**\n * Stores tiles with content loaded.\n *\n * @private\n */\nexport default class TilesetCache {\n  private _list: DoublyLinkedList;\n  private _sentinel: any;\n  private _trimTiles: boolean;\n\n  constructor() {\n    // [head, sentinel) -> tiles that weren't selected this frame and may be removed from the cache\n    // (sentinel, tail] -> tiles that were selected this frame\n    this._list = new DoublyLinkedList();\n    this._sentinel = this._list.add('sentinel');\n    this._trimTiles = false;\n  }\n\n  reset() {\n    // Move sentinel node to the tail so, at the start of the frame, all tiles\n    // may be potentially replaced.  Tiles are moved to the right of the sentinel\n    // when they are selected so they will not be replaced.\n    this._list.splice(this._list.tail, this._sentinel);\n  }\n\n  touch(tile) {\n    const node = tile._cacheNode;\n    if (defined(node)) {\n      this._list.splice(this._sentinel, node);\n    }\n  }\n\n  add(tileset, tile, addCallback) {\n    if (!defined(tile._cacheNode)) {\n      tile._cacheNode = this._list.add(tile);\n\n      if (addCallback) {\n        addCallback(tileset, tile);\n      }\n    }\n  }\n\n  unloadTile(tileset, tile, unloadCallback?) {\n    const node = tile._cacheNode;\n    if (!defined(node)) {\n      return;\n    }\n\n    this._list.remove(node);\n    tile._cacheNode = undefined;\n    if (unloadCallback) {\n      unloadCallback(tileset, tile);\n    }\n  }\n\n  unloadTiles(tileset, unloadCallback) {\n    const trimTiles = this._trimTiles;\n    this._trimTiles = false;\n\n    const list = this._list;\n\n    const maximumMemoryUsageInBytes = tileset.maximumMemoryUsage * 1024 * 1024;\n\n    // Traverse the list only to the sentinel since tiles/nodes to the\n    // right of the sentinel were used this frame.\n    // The sub-list to the left of the sentinel is ordered from LRU to MRU.\n    const sentinel = this._sentinel;\n    let node = list.head;\n\n    while (\n      node !== sentinel &&\n      (tileset.gpuMemoryUsageInBytes > maximumMemoryUsageInBytes || trimTiles)\n    ) {\n      // @ts-expect-error\n      const tile = node.item;\n      // @ts-expect-error\n      node = node.next;\n      this.unloadTile(tileset, tile, unloadCallback);\n    }\n  }\n\n  trim() {\n    this._trimTiles = true;\n  }\n}\n"],"file":"tileset-cache.js"}