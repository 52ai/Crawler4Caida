{"version":3,"sources":["../../../src/tileset/tile-3d.ts"],"names":["scratchVector","Vector3","defined","x","undefined","TileHeader","tileset","header","parentHeader","extendedId","id","url","parent","refine","_getRefine","type","contentUrl","lodMetricType","lodMetricValue","boundingVolume","content","contentState","TILE_CONTENT_STATE","UNLOADED","gpuMemoryUsageInBytes","children","hasEmptyContent","hasTilesetContent","depth","viewportIds","userData","extensions","_priority","_touchedFrame","_visitedFrame","_selectedFrame","_requestedFrame","_screenSpaceError","_cacheNode","_frameNumber","traverser","TilesetTraverser","_shouldRefine","_distanceToCamera","_centerZDepth","_visible","_inRequestVolume","_stackLength","_selectionDepth","_initialTransform","Matrix4","transform","_initializeLodMetric","_initializeTransforms","_initializeBoundingVolumes","_initializeContent","_initializeRenderingState","_lodJudge","_expireDate","_expiredContent","Object","seal","length","READY","Boolean","contentReady","hasRenderContent","contentFailed","contentUnloaded","EXPIRED","FAILED","frameState","useParentLodMetric","TILESET_TYPE","I3S","TILES3D","Error","_traverser","skipLevelOfDetail","options","maySkipTile","TILE_REFINEMENT","ADD","isVisible","useParentScreenSpaceError","screenSpaceError","rootScreenSpaceError","root","Math","max","expired","contentExpired","LOADING","_requestScheduler","scheduleRequest","_getPriority","bind","requestToken","getTileUrl","loader","loadOptions","isTileset","_getLoaderSpecificOptions","contentLoader","_isTileset","_initializeTileHeaders","_onContentLoaded","done","destroy","frameNumber","parentVisibilityPlaneMask","_visibilityPlaneMask","CullingVolume","MASK_INDETERMINATE","updateTransforms","parentTransform","computedTransform","modelMatrix","_updateTransform","distanceToTile","getScreenSpaceError","visibility","MASK_OUTSIDE","insideViewerRequestVolume","cullingVolume","computeVisibilityWithPlaneMask","sqrt","distanceSquaredTo","camera","position","subVectors","center","direction","dot","viewerRequestVolume","_viewerRequestVolume","now","Date","lessThan","extras","console","warn","tileHeader","clone","multiplyRight","parentInitialTransform","_contentBoundingVolume","_updateBoundingVolume","_tileset","_tile","level","REPLACE","indexOf","disableSkipLevelOfDetail","didTransformChange","equals","loaderId","i3s","tile","isTileHeader"],"mappings":"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","sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\nimport {Vector3, Matrix4} from '@math.gl/core';\nimport {CullingVolume} from '@math.gl/culling';\n\nimport {load} from '@loaders.gl/core';\nimport {TILE_REFINEMENT, TILE_CONTENT_STATE, TILESET_TYPE} from '../constants';\n\nimport {FrameState} from './helpers/frame-state';\nimport {createBoundingVolume} from './helpers/bounding-volume';\nimport {getTiles3DScreenSpaceError} from './helpers/tiles-3d-lod';\nimport {getProjectedRadius} from './helpers/i3s-lod';\nimport {get3dTilesOptions} from './helpers/3d-tiles-options';\nimport TilesetTraverser from './traversers/tileset-traverser';\n\n// Note: circular dependency\nimport type Tileset3D from './tileset-3d';\n\nconst scratchVector = new Vector3();\n\nfunction defined(x) {\n  return x !== undefined && x !== null;\n}\n\n/**\n * @param tileset - Tileset3D instance\n * @param header - tile header - JSON loaded from a dataset\n * @param parentHeader - parent TileHeader instance\n * @param extendedId - optional ID to separate copies of a tile for different viewports.\n *                              const extendedId = `${tile.id}-${frameState.viewport.id}`;\n */\nexport type TileHeaderProps = {\n  tileset: Tileset3D;\n  header: Object;\n  parentHeader: TileHeader;\n  extendedId: string;\n};\n\n/**\n * A Tile3DHeader represents a tile as Tileset3D. When a tile is first created, its content is not loaded;\n * the content is loaded on-demand when needed based on the view.\n * Do not construct this directly, instead access tiles through {@link Tileset3D#tileVisible}.\n */\nexport default class TileHeader {\n  tileset: Tileset3D;\n  header: any;\n  id: string;\n  url: string;\n  parent: TileHeader;\n  refine: number;\n  type: string;\n  contentUrl: string;\n  lodMetricType: string;\n  lodMetricValue: number;\n  boundingVolume: any;\n  content: any;\n  contentState: any;\n  gpuMemoryUsageInBytes: number;\n  children: TileHeader[];\n  depth: number;\n  viewportIds: any[];\n  transform: Matrix4;\n  extensions: any;\n\n  // Container to store application specific data\n  userData: {[key: string]: any};\n  computedTransform: any;\n  hasEmptyContent: boolean;\n  hasTilesetContent: boolean;\n\n  traverser: object;\n\n  // @ts-ignore\n  private _cacheNode: any;\n  private _frameNumber: any;\n  // TODO i3s specific, needs to remove\n  // @ts-ignore\n  private _lodJudge: any;\n  // TODO Cesium 3d tiles specific\n  private _expireDate: any;\n  private _expiredContent: any;\n  // @ts-ignore\n  private _shouldRefine: boolean;\n\n  // Members this are updated every frame for tree traversal and rendering optimizations:\n  // @ts-ignore\n  private _distanceToCamera: number;\n  // @ts-ignore\n  private _centerZDepth: number;\n  private _screenSpaceError: number;\n  private _visibilityPlaneMask: any;\n  private _visible?: boolean;\n  private _inRequestVolume: boolean;\n\n  // @ts-ignore\n  private _stackLength: number;\n  // @ts-ignore\n  private _selectionDepth: number;\n\n  // @ts-ignore\n  private _touchedFrame: number;\n  // @ts-ignore\n  private _visitedFrame: number;\n  private _selectedFrame: number;\n  // @ts-ignore\n  private _requestedFrame: number;\n\n  // @ts-ignore\n  private _priority: number;\n\n  private _contentBoundingVolume: any;\n  private _viewerRequestVolume: any;\n\n  _initialTransform: Matrix4;\n\n  /**\n   * @constructs\n   * Create a TileHeader instance\n   * @param tileset - Tileset3D instance\n   * @param header - tile header - JSON loaded from a dataset\n   * @param parentHeader - parent TileHeader instance\n   * @param extendedId - optional ID to separate copies of a tile for different viewports.\n   *    const extendedId = `${tile.id}-${frameState.viewport.id}`;\n   */\n  // eslint-disable-next-line max-statements\n  constructor(\n    tileset: Tileset3D,\n    header: {[key: string]: any},\n    parentHeader?: TileHeader,\n    extendedId = ''\n  ) {\n    // PUBLIC MEMBERS\n    // original tile data\n    this.header = header;\n\n    // The tileset containing this tile.\n    this.tileset = tileset;\n    this.id = extendedId || header.id;\n    this.url = header.url;\n\n    // This tile's parent or `undefined` if this tile is the root.\n    // @ts-ignore\n    this.parent = parentHeader;\n    this.refine = this._getRefine(header.refine);\n    this.type = header.type;\n    this.contentUrl = header.contentUrl;\n\n    // The error, in meters, introduced if this tile is rendered and its children are not.\n    this.lodMetricType = 'geometricError';\n    this.lodMetricValue = 0;\n\n    // Specifies the type of refine that is used when traversing this tile for rendering.\n    this.boundingVolume = null;\n\n    // The tile's content.  This represents the actual tile's payload,\n    // not the content's metadata in the tileset JSON file.\n    this.content = null;\n    this.contentState = TILE_CONTENT_STATE.UNLOADED;\n    this.gpuMemoryUsageInBytes = 0;\n\n    // The tile's children - an array of Tile3D objects.\n    this.children = [];\n\n    this.hasEmptyContent = false;\n    this.hasTilesetContent = false;\n\n    this.depth = 0;\n    this.viewportIds = [];\n\n    // Container to store application specific data\n    this.userData = {};\n    this.extensions = null;\n\n    // PRIVATE MEMBERS\n    this._priority = 0;\n    this._touchedFrame = 0;\n    this._visitedFrame = 0;\n    this._selectedFrame = 0;\n    this._requestedFrame = 0;\n    this._screenSpaceError = 0;\n\n    this._cacheNode = null;\n    this._frameNumber = null;\n    this._cacheNode = null;\n\n    this.traverser = new TilesetTraverser({});\n    this._shouldRefine = false;\n    this._distanceToCamera = 0;\n    this._centerZDepth = 0;\n    this._visible = undefined;\n    this._inRequestVolume = false;\n    this._stackLength = 0;\n    this._selectionDepth = 0;\n    this._initialTransform = new Matrix4();\n    this.transform = new Matrix4();\n\n    this._initializeLodMetric(header);\n    this._initializeTransforms(header);\n    this._initializeBoundingVolumes(header);\n    this._initializeContent(header);\n    this._initializeRenderingState(header);\n\n    // TODO i3s specific, needs to remove\n    this._lodJudge = null;\n\n    // TODO Cesium 3d tiles specific\n    this._expireDate = null;\n    this._expiredContent = null;\n\n    Object.seal(this);\n  }\n\n  destroy() {\n    this.header = null;\n  }\n\n  isDestroyed() {\n    return this.header === null;\n  }\n\n  get selected() {\n    return this._selectedFrame === this.tileset._frameNumber;\n  }\n\n  get isVisible() {\n    return this._visible;\n  }\n\n  get isVisibleAndInRequestVolume() {\n    return this._visible && this._inRequestVolume;\n  }\n\n  /** Returns true if tile is not an empty tile and not an external tileset */\n  get hasRenderContent() {\n    return !this.hasEmptyContent && !this.hasTilesetContent;\n  }\n\n  /** Returns true if tile has children */\n  get hasChildren() {\n    return this.children.length > 0 || (this.header.children && this.header.children.length > 0);\n  }\n\n  /**\n   * Determines if the tile's content is ready. This is automatically `true` for\n   * tiles with empty content.\n   */\n  get contentReady() {\n    return this.contentState === TILE_CONTENT_STATE.READY || this.hasEmptyContent;\n  }\n\n  /**\n   * Determines if the tile has available content to render.  `true` if the tile's\n   * content is ready or if it has expired content this renders while new content loads; otherwise,\n   */\n  get contentAvailable() {\n    return Boolean(\n      (this.contentReady && this.hasRenderContent) || (this._expiredContent && !this.contentFailed)\n    );\n  }\n\n  /** Returns true if tile has renderable content but it's unloaded */\n  get hasUnloadedContent() {\n    return this.hasRenderContent && this.contentUnloaded;\n  }\n\n  /**\n   * Determines if the tile's content has not be requested. `true` if tile's\n   * content has not be requested; otherwise, `false`.\n   */\n  get contentUnloaded() {\n    return this.contentState === TILE_CONTENT_STATE.UNLOADED;\n  }\n\n  /**\n   * Determines if the tile's content is expired. `true` if tile's\n   * content is expired; otherwise, `false`.\n   */\n  get contentExpired() {\n    return this.contentState === TILE_CONTENT_STATE.EXPIRED;\n  }\n\n  // Determines if the tile's content failed to load.  `true` if the tile's\n  // content failed to load; otherwise, `false`.\n  get contentFailed() {\n    return this.contentState === TILE_CONTENT_STATE.FAILED;\n  }\n\n  /** Get the tile's screen space error. */\n  getScreenSpaceError(frameState, useParentLodMetric) {\n    switch (this.tileset.type) {\n      case TILESET_TYPE.I3S:\n        return getProjectedRadius(this, frameState);\n      case TILESET_TYPE.TILES3D:\n        return getTiles3DScreenSpaceError(this, frameState, useParentLodMetric);\n      default:\n        // eslint-disable-next-line\n        throw new Error('Unsupported tileset type');\n    }\n  }\n\n  /**\n   * Make tile unselected than means it won't be shown\n   * but it can be still loaded in memory\n   */\n  unselect(): void {\n    this._selectedFrame = 0;\n  }\n\n  /*\n   * If skipLevelOfDetail is off try to load child tiles as soon as possible so that their parent can refine sooner.\n   * Tiles are prioritized by screen space error.\n   */\n  // eslint-disable-next-line complexity\n  _getPriority() {\n    const traverser = this.tileset._traverser;\n    const {skipLevelOfDetail} = traverser.options;\n\n    /*\n     * Tiles that are outside of the camera's frustum could be skipped if we are in 'ADD' mode\n     * or if we are using 'Skip Traversal' in 'REPLACE' mode.\n     * Otherewise, all 'touched' child tiles have to be loaded and displayed,\n     * this may include tiles that are outide of the camera frustum (so that we can hide the parent tile).\n     */\n    const maySkipTile = this.refine === TILE_REFINEMENT.ADD || skipLevelOfDetail;\n\n    // Check if any reason to abort\n    if (maySkipTile && !this.isVisible && this._visible !== undefined) {\n      return -1;\n    }\n    // Condition used in `cancelOutOfViewRequests` function in CesiumJS/Cesium3DTileset.js\n    if (this.tileset._frameNumber - this._touchedFrame >= 1) {\n      return -1;\n    }\n    if (this.contentState === TILE_CONTENT_STATE.UNLOADED) {\n      return -1;\n    }\n\n    // Based on the priority function `getPriorityReverseScreenSpaceError` in CesiumJS. Scheduling priority is based on the parent's screen space error when possible.\n    const parent = this.parent;\n    const useParentScreenSpaceError =\n      parent && (!maySkipTile || this._screenSpaceError === 0.0 || parent.hasTilesetContent);\n    const screenSpaceError = useParentScreenSpaceError\n      ? parent._screenSpaceError\n      : this._screenSpaceError;\n\n    const rootScreenSpaceError = traverser.root ? traverser.root._screenSpaceError : 0.0;\n\n    // Map higher SSE to lower values (e.g. root tile is highest priority)\n    return Math.max(rootScreenSpaceError - screenSpaceError, 0);\n  }\n\n  /**\n   *  Requests the tile's content.\n   * The request may not be made if the Request Scheduler can't prioritize it.\n   */\n  // eslint-disable-next-line max-statements, complexity\n  async loadContent(): Promise<boolean> {\n    if (this.hasEmptyContent) {\n      return false;\n    }\n\n    if (this.content) {\n      return true;\n    }\n\n    const expired = this.contentExpired;\n\n    if (expired) {\n      this._expireDate = null;\n    }\n\n    this.contentState = TILE_CONTENT_STATE.LOADING;\n\n    const requestToken = await this.tileset._requestScheduler.scheduleRequest(\n      this.id,\n      this._getPriority.bind(this)\n    );\n\n    if (!requestToken) {\n      // cancelled\n      this.contentState = TILE_CONTENT_STATE.UNLOADED;\n      return false;\n    }\n\n    try {\n      const contentUrl = this.tileset.getTileUrl(this.contentUrl);\n      // The content can be a binary tile ot a JSON tileset\n      const loader = this.tileset.loader;\n      const options = {\n        ...this.tileset.loadOptions,\n        [loader.id]: {\n          ...this.tileset.loadOptions[loader.id],\n          isTileset: this.type === 'json',\n          ...this._getLoaderSpecificOptions(loader.id)\n        }\n      };\n\n      this.content = await load(contentUrl, loader, options);\n\n      if (this.tileset.options.contentLoader) {\n        await this.tileset.options.contentLoader(this);\n      }\n\n      if (this._isTileset()) {\n        // Add tile headers for the nested tilset's subtree\n        // Async update of the tree should be fine since there would never be edits to the same node\n        // TODO - we need to capture the child tileset's URL\n        this.tileset._initializeTileHeaders(this.content, this);\n      }\n\n      this.contentState = TILE_CONTENT_STATE.READY;\n      this._onContentLoaded();\n      return true;\n    } catch (error) {\n      // Tile is unloaded before the content finishes loading\n      this.contentState = TILE_CONTENT_STATE.FAILED;\n      throw error;\n    } finally {\n      requestToken.done();\n    }\n  }\n\n  // Unloads the tile's content.\n  unloadContent() {\n    if (this.content && this.content.destroy) {\n      this.content.destroy();\n    }\n    this.content = null;\n    if (this.header.content && this.header.content.destroy) {\n      this.header.content.destroy();\n    }\n    this.header.content = null;\n    this.contentState = TILE_CONTENT_STATE.UNLOADED;\n    return true;\n  }\n\n  /**\n   * Update the tile's visibility\n   * @param {Object} frameState - frame state for tile culling\n   * @param {string[]} viewportIds - a list of viewport ids that show this tile\n   * @return {void}\n   */\n  updateVisibility(frameState, viewportIds) {\n    if (this._frameNumber === frameState.frameNumber) {\n      // Return early if visibility has already been checked during the traversal.\n      // The visibility may have already been checked if the cullWithChildrenBounds optimization is used.\n      return;\n    }\n\n    const parent = this.parent;\n    const parentVisibilityPlaneMask = parent\n      ? parent._visibilityPlaneMask\n      : CullingVolume.MASK_INDETERMINATE;\n\n    if (this.tileset._traverser.options.updateTransforms) {\n      const parentTransform = parent ? parent.computedTransform : this.tileset.modelMatrix;\n      this._updateTransform(parentTransform);\n    }\n\n    this._distanceToCamera = this.distanceToTile(frameState);\n    this._screenSpaceError = this.getScreenSpaceError(frameState, false);\n    this._visibilityPlaneMask = this.visibility(frameState, parentVisibilityPlaneMask); // Use parent's plane mask to speed up visibility test\n    this._visible = this._visibilityPlaneMask !== CullingVolume.MASK_OUTSIDE;\n    this._inRequestVolume = this.insideViewerRequestVolume(frameState);\n\n    this._frameNumber = frameState.frameNumber;\n    this.viewportIds = viewportIds;\n  }\n\n  // Determines whether the tile's bounding volume intersects the culling volume.\n  // @param {FrameState} frameState The frame state.\n  // @param {Number} parentVisibilityPlaneMask The parent's plane mask to speed up the visibility check.\n  // @returns {Number} A plane mask as described above in {@link CullingVolume#computeVisibilityWithPlaneMask}.\n  visibility(frameState, parentVisibilityPlaneMask) {\n    const {cullingVolume} = frameState;\n    const {boundingVolume} = this;\n\n    // TODO Cesium specific - restore clippingPlanes\n    // const {clippingPlanes, clippingPlanesOriginMatrix} = tileset;\n    // if (clippingPlanes && clippingPlanes.enabled) {\n    //   const intersection = clippingPlanes.computeIntersectionWithBoundingVolume(\n    //     boundingVolume,\n    //     clippingPlanesOriginMatrix\n    //   );\n    //   this._isClipped = intersection !== Intersect.INSIDE;\n    //   if (intersection === Intersect.OUTSIDE) {\n    //     return CullingVolume.MASK_OUTSIDE;\n    //   }\n    // }\n\n    // return cullingVolume.computeVisibilityWithPlaneMask(boundingVolume, parentVisibilityPlaneMask);\n    return cullingVolume.computeVisibilityWithPlaneMask(boundingVolume, parentVisibilityPlaneMask);\n  }\n\n  // Assuming the tile's bounding volume intersects the culling volume, determines\n  // whether the tile's content's bounding volume intersects the culling volume.\n  // @param {FrameState} frameState The frame state.\n  // @returns {Intersect} The result of the intersection: the tile's content is completely outside, completely inside, or intersecting the culling volume.\n  contentVisibility() {\n    return true;\n\n    // TODO restore\n    /*\n    // Assumes the tile's bounding volume intersects the culling volume already, so\n    // just return Intersect.INSIDE if there is no content bounding volume.\n    if (!defined(this.contentBoundingVolume)) {\n      return Intersect.INSIDE;\n    }\n\n    if (this._visibilityPlaneMask === CullingVolume.MASK_INSIDE) {\n      // The tile's bounding volume is completely inside the culling volume so\n      // the content bounding volume must also be inside.\n      return Intersect.INSIDE;\n    }\n\n    // PERFORMANCE_IDEA: is it possible to burn less CPU on this test since we know the\n    // tile's (not the content's) bounding volume intersects the culling volume?\n    const cullingVolume = frameState.cullingVolume;\n    const boundingVolume = tile.contentBoundingVolume;\n\n    const tileset = this.tileset;\n    const clippingPlanes = tileset.clippingPlanes;\n    if (defined(clippingPlanes) && clippingPlanes.enabled) {\n      const intersection = clippingPlanes.computeIntersectionWithBoundingVolume(\n        boundingVolume,\n        tileset.clippingPlanesOriginMatrix\n      );\n      this._isClipped = intersection !== Intersect.INSIDE;\n      if (intersection === Intersect.OUTSIDE) {\n        return Intersect.OUTSIDE;\n      }\n    }\n\n    return cullingVolume.computeVisibility(boundingVolume);\n    */\n  }\n\n  /**\n   * Computes the (potentially approximate) distance from the closest point of the tile's bounding volume to the camera.\n   * @param frameState The frame state.\n   * @returns {Number} The distance, in meters, or zero if the camera is inside the bounding volume.\n   */\n  distanceToTile(frameState: FrameState): number {\n    const boundingVolume = this.boundingVolume;\n    return Math.sqrt(Math.max(boundingVolume.distanceSquaredTo(frameState.camera.position), 0));\n  }\n\n  /**\n   * Computes the tile's camera-space z-depth.\n   * @param frameState The frame state.\n   * @returns The distance, in meters.\n   */\n  cameraSpaceZDepth({camera}): number {\n    const boundingVolume = this.boundingVolume; // Gets the underlying OrientedBoundingBox or BoundingSphere\n    scratchVector.subVectors(boundingVolume.center, camera.position);\n    return camera.direction.dot(scratchVector);\n  }\n\n  /**\n   * Checks if the camera is inside the viewer request volume.\n   * @param {FrameState} frameState The frame state.\n   * @returns {Boolean} Whether the camera is inside the volume.\n   */\n  insideViewerRequestVolume(frameState: FrameState) {\n    const viewerRequestVolume = this._viewerRequestVolume;\n    return (\n      !viewerRequestVolume || viewerRequestVolume.distanceSquaredTo(frameState.camera.position) <= 0\n    );\n  }\n\n  // TODO Cesium specific\n\n  // Update whether the tile has expired.\n  updateExpiration() {\n    if (defined(this._expireDate) && this.contentReady && !this.hasEmptyContent) {\n      const now = Date.now();\n      // @ts-ignore Date.lessThan - replace with ms compare?\n      if (Date.lessThan(this._expireDate, now)) {\n        this.contentState = TILE_CONTENT_STATE.EXPIRED;\n        this._expiredContent = this.content;\n      }\n    }\n  }\n\n  get extras() {\n    return this.header.extras;\n  }\n\n  // INTERNAL METHODS\n\n  _initializeLodMetric(header) {\n    if ('lodMetricType' in header) {\n      this.lodMetricType = header.lodMetricType;\n    } else {\n      this.lodMetricType = (this.parent && this.parent.lodMetricType) || this.tileset.lodMetricType;\n      // eslint-disable-next-line\n      console.warn(`3D Tile: Required prop lodMetricType is undefined. Using parent lodMetricType`);\n    }\n\n    // This is used to compute screen space error, i.e., the error measured in pixels.\n    if ('lodMetricValue' in header) {\n      this.lodMetricValue = header.lodMetricValue;\n    } else {\n      this.lodMetricValue =\n        (this.parent && this.parent.lodMetricValue) || this.tileset.lodMetricValue;\n      // eslint-disable-next-line\n      console.warn(\n        '3D Tile: Required prop lodMetricValue is undefined. Using parent lodMetricValue'\n      );\n    }\n  }\n\n  _initializeTransforms(tileHeader) {\n    // The local transform of this tile.\n    this.transform = tileHeader.transform ? new Matrix4(tileHeader.transform) : new Matrix4();\n\n    const parent = this.parent;\n    const tileset = this.tileset;\n\n    const parentTransform =\n      parent && parent.computedTransform\n        ? parent.computedTransform.clone()\n        : tileset.modelMatrix.clone();\n    this.computedTransform = new Matrix4(parentTransform).multiplyRight(this.transform);\n\n    const parentInitialTransform =\n      parent && parent._initialTransform ? parent._initialTransform.clone() : new Matrix4();\n    this._initialTransform = new Matrix4(parentInitialTransform).multiplyRight(this.transform);\n  }\n\n  _initializeBoundingVolumes(tileHeader) {\n    this._contentBoundingVolume = null;\n    this._viewerRequestVolume = null;\n\n    this._updateBoundingVolume(tileHeader);\n  }\n\n  _initializeContent(tileHeader) {\n    // Empty tile by default\n    this.content = {_tileset: this.tileset, _tile: this};\n    this.hasEmptyContent = true;\n    this.contentState = TILE_CONTENT_STATE.UNLOADED;\n\n    // When `true`, the tile's content points to an external tileset.\n    // This is `false` until the tile's content is loaded.\n    this.hasTilesetContent = false;\n\n    if (tileHeader.contentUrl) {\n      this.content = null;\n      this.hasEmptyContent = false;\n    }\n  }\n\n  // TODO - remove anything not related to basic visibility detection\n  _initializeRenderingState(header) {\n    this.depth = header.level || (this.parent ? this.parent.depth + 1 : 0);\n    this._shouldRefine = false;\n\n    // Members this are updated every frame for tree traversal and rendering optimizations:\n    this._distanceToCamera = 0;\n    this._centerZDepth = 0;\n    this._screenSpaceError = 0;\n    this._visibilityPlaneMask = CullingVolume.MASK_INDETERMINATE;\n    this._visible = undefined;\n    this._inRequestVolume = false;\n\n    this._stackLength = 0;\n    this._selectionDepth = 0;\n\n    this._frameNumber = 0;\n    this._touchedFrame = 0;\n    this._visitedFrame = 0;\n    this._selectedFrame = 0;\n    this._requestedFrame = 0;\n\n    this._priority = 0.0;\n  }\n\n  _getRefine(refine) {\n    // Inherit from parent tile if omitted.\n    return refine || (this.parent && this.parent.refine) || TILE_REFINEMENT.REPLACE;\n  }\n\n  _isTileset() {\n    return this.contentUrl.indexOf('.json') !== -1;\n  }\n\n  _onContentLoaded() {\n    // Vector and Geometry tile rendering do not support the skip LOD optimization.\n    switch (this.content && this.content.type) {\n      case 'vctr':\n      case 'geom':\n        // @ts-ignore\n        this.tileset._traverser.disableSkipLevelOfDetail = true;\n        break;\n      default:\n    }\n\n    // The content may be tileset json\n    if (this._isTileset()) {\n      this.hasTilesetContent = true;\n    }\n  }\n\n  _updateBoundingVolume(header) {\n    // Update the bounding volumes\n    this.boundingVolume = createBoundingVolume(\n      header.boundingVolume,\n      this.computedTransform,\n      this.boundingVolume\n    );\n\n    const content = header.content;\n    if (!content) {\n      return;\n    }\n\n    // TODO Cesium specific\n    // Non-leaf tiles may have a content bounding-volume, which is a tight-fit bounding volume\n    // around only the features in the tile. This box is useful for culling for rendering,\n    // but not for culling for traversing the tree since it does not guarantee spatial coherence, i.e.,\n    // since it only bounds features in the tile, not the entire tile, children may be\n    // outside of this box.\n    if (content.boundingVolume) {\n      this._contentBoundingVolume = createBoundingVolume(\n        content.boundingVolume,\n        this.computedTransform,\n        this._contentBoundingVolume\n      );\n    }\n    if (header.viewerRequestVolume) {\n      this._viewerRequestVolume = createBoundingVolume(\n        header.viewerRequestVolume,\n        this.computedTransform,\n        this._viewerRequestVolume\n      );\n    }\n  }\n\n  // Update the tile's transform. The transform is applied to the tile's bounding volumes.\n  _updateTransform(parentTransform = new Matrix4()) {\n    const computedTransform = parentTransform.clone().multiplyRight(this.transform);\n    const didTransformChange = !computedTransform.equals(this.computedTransform);\n\n    if (!didTransformChange) {\n      return;\n    }\n\n    this.computedTransform = computedTransform;\n\n    this._updateBoundingVolume(this.header);\n  }\n\n  // Get options which are applicable only for the particular loader\n  _getLoaderSpecificOptions(loaderId) {\n    switch (loaderId) {\n      case 'i3s':\n        return {\n          ...this.tileset.options.i3s,\n          tile: this.header,\n          tileset: this.tileset.tileset,\n          isTileHeader: false\n        };\n      case '3d-tiles':\n      case 'cesium-ion':\n      default:\n        return get3dTilesOptions(this.tileset.tileset);\n    }\n  }\n}\n"],"file":"tile-3d.js"}