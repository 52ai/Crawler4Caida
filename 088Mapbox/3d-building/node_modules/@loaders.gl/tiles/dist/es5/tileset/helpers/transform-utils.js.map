{"version":3,"sources":["../../../../src/tileset/helpers/transform-utils.ts"],"names":["calculateTransformProps","tileHeader","tile","rtcCenter","gltfUpAxis","computedTransform","center","boundingVolume","modelMatrix","Matrix4","translate","rotationY","rotateX","Math","PI","multiplyRight","rotationX","rotateY","isQuantized","quantizedVolumeOffset","scale","quantizedVolumeScale","cartesianOrigin","Vector3","cartesianModelMatrix","cartographicOrigin","Ellipsoid","WGS84","cartesianToCartographic","fromFixedFrameMatrix","eastNorthUpToFixedFrame","toFixedFrameMatrix","invert","cartographicModelMatrix","coordinateSystem"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAEO,SAASA,uBAAT,CAAiCC,UAAjC,EAA6CC,IAA7C,EAAmD;AACxD,2BAAOD,UAAP;AACA,2BAAOC,IAAP;AAEA,MAAOC,SAAP,GAAgCD,IAAhC,CAAOC,SAAP;AAAA,MAAkBC,UAAlB,GAAgCF,IAAhC,CAAkBE,UAAlB;AACA,MACEC,iBADF,GAGIJ,UAHJ,CACEI,iBADF;AAAA,MAEmBC,MAFnB,GAGIL,UAHJ,CAEEM,cAFF,CAEmBD,MAFnB;AAKA,MAAIE,WAAW,GAAG,IAAIC,aAAJ,CAAYJ,iBAAZ,CAAlB;;AAGA,MAAIF,SAAJ,EAAe;AACbK,IAAAA,WAAW,CAACE,SAAZ,CAAsBP,SAAtB;AACD;;AAID,UAAQC,UAAR;AACE,SAAK,GAAL;AACE;;AACF,SAAK,GAAL;AACE,UAAMO,SAAS,GAAG,IAAIF,aAAJ,GAAcG,OAAd,CAAsBC,IAAI,CAACC,EAAL,GAAU,CAAhC,CAAlB;AACAN,MAAAA,WAAW,GAAGA,WAAW,CAACO,aAAZ,CAA0BJ,SAA1B,CAAd;AACA;;AACF,SAAK,GAAL;AACE,UAAMK,SAAS,GAAG,IAAIP,aAAJ,GAAcQ,OAAd,CAAsB,CAACJ,IAAI,CAACC,EAAN,GAAW,CAAjC,CAAlB;AACAN,MAAAA,WAAW,GAAGA,WAAW,CAACO,aAAZ,CAA0BC,SAA1B,CAAd;AACA;;AACF;AACE;AAZJ;;AAgBA,MAAId,IAAI,CAACgB,WAAT,EAAsB;AACpBV,IAAAA,WAAW,CAACE,SAAZ,CAAsBR,IAAI,CAACiB,qBAA3B,EAAkDC,KAAlD,CAAwDlB,IAAI,CAACmB,oBAA7D;AACD;;AAGD,MAAMC,eAAe,GAAG,IAAIC,aAAJ,CAAYjB,MAAZ,CAAxB;AAEAJ,EAAAA,IAAI,CAACsB,oBAAL,GAA4BhB,WAA5B;AACAN,EAAAA,IAAI,CAACoB,eAAL,GAAuBA,eAAvB;;AAGA,MAAMG,kBAAkB,GAAGC,sBAAUC,KAAV,CAAgBC,uBAAhB,CACzBN,eADyB,EAEzB,IAAIC,aAAJ,EAFyB,CAA3B;;AAIA,MAAMM,oBAAoB,GAAGH,sBAAUC,KAAV,CAAgBG,uBAAhB,CAAwCR,eAAxC,CAA7B;;AACA,MAAMS,kBAAkB,GAAGF,oBAAoB,CAACG,MAArB,EAA3B;AAEA9B,EAAAA,IAAI,CAAC+B,uBAAL,GAA+BF,kBAAkB,CAAChB,aAAnB,CAAiCP,WAAjC,CAA/B;AACAN,EAAAA,IAAI,CAACuB,kBAAL,GAA0BA,kBAA1B;;AAGA,MAAI,CAACvB,IAAI,CAACgC,gBAAV,EAA4B;AAC1BhC,IAAAA,IAAI,CAACM,WAAL,GAAmBN,IAAI,CAAC+B,uBAAxB;AACD;AACF","sourcesContent":["import {Ellipsoid} from '@math.gl/geospatial';\nimport {Matrix4, Vector3} from '@math.gl/core';\nimport {assert} from '@loaders.gl/loader-utils';\n\nexport function calculateTransformProps(tileHeader, tile) {\n  assert(tileHeader);\n  assert(tile);\n\n  const {rtcCenter, gltfUpAxis} = tile;\n  const {\n    computedTransform,\n    boundingVolume: {center}\n  } = tileHeader;\n\n  let modelMatrix = new Matrix4(computedTransform);\n\n  // Translate if appropriate\n  if (rtcCenter) {\n    modelMatrix.translate(rtcCenter);\n  }\n\n  // glTF models need to be rotated from Y to Z up\n  // https://github.com/AnalyticalGraphicsInc/3d-tiles/tree/master/specification#y-up-to-z-up\n  switch (gltfUpAxis) {\n    case 'Z':\n      break;\n    case 'Y':\n      const rotationY = new Matrix4().rotateX(Math.PI / 2);\n      modelMatrix = modelMatrix.multiplyRight(rotationY);\n      break;\n    case 'X':\n      const rotationX = new Matrix4().rotateY(-Math.PI / 2);\n      modelMatrix = modelMatrix.multiplyRight(rotationX);\n      break;\n    default:\n      break;\n  }\n\n  // Scale/offset positions if normalized integers\n  if (tile.isQuantized) {\n    modelMatrix.translate(tile.quantizedVolumeOffset).scale(tile.quantizedVolumeScale);\n  }\n\n  // Option 1: Cartesian matrix and origin\n  const cartesianOrigin = new Vector3(center);\n\n  tile.cartesianModelMatrix = modelMatrix;\n  tile.cartesianOrigin = cartesianOrigin;\n\n  // Option 2: Cartographic matrix and origin\n  const cartographicOrigin = Ellipsoid.WGS84.cartesianToCartographic(\n    cartesianOrigin,\n    new Vector3()\n  );\n  const fromFixedFrameMatrix = Ellipsoid.WGS84.eastNorthUpToFixedFrame(cartesianOrigin);\n  const toFixedFrameMatrix = fromFixedFrameMatrix.invert();\n\n  tile.cartographicModelMatrix = toFixedFrameMatrix.multiplyRight(modelMatrix);\n  tile.cartographicOrigin = cartographicOrigin;\n\n  // Deprecated, drop\n  if (!tile.coordinateSystem) {\n    tile.modelMatrix = tile.cartographicModelMatrix;\n  }\n}\n"],"file":"transform-utils.js"}