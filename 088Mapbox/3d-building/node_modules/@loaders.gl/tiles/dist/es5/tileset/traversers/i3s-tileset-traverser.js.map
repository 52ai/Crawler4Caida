{"version":3,"sources":["../../../../src/tileset/traversers/i3s-tileset-traverser.ts"],"names":["I3STilesetTraverser","options","_tileManager","I3STileManager","frameState","hasPendingTiles","viewport","id","_frameNumber","tile","_lodJudge","children","header","childTiles","tileset","child","extendedId","childTile","find","t","request","_loadTile","cachedRequest","nodePages","nodePagesTile","formTileFromNodePages","add","_onTileLoad","update","updateTile","nodeId","loader","nodeUrl","getTileUrl","url","loadOptions","i3s","isTileHeader","loadContent","TileHeader","push","frameNumber","traversalFinished","Date","getTime","lastUpdate","updateDebounceTime","executeTraversal","TilesetTraverser"],"mappings":"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","sourcesContent":["import {load} from '@loaders.gl/core';\nimport TilesetTraverser from './tileset-traverser';\n\nimport {getLodStatus} from '../helpers/i3s-lod';\nimport TileHeader from '../tile-3d';\nimport I3STileManager from './i3s-tile-manager';\nimport {FrameState} from '../helpers/frame-state';\n\nexport default class I3STilesetTraverser extends TilesetTraverser {\n  private _tileManager: I3STileManager;\n\n  /**\n   * Check if there are no penging tile header requests,\n   * that means the traversal is finished and we can call\n   * following-up callbacks.\n   */\n  protected traversalFinished(frameState: FrameState): boolean {\n    return !this._tileManager.hasPendingTiles(frameState.viewport.id, this._frameNumber || 0);\n  }\n\n  constructor(options) {\n    super(options);\n    this._tileManager = new I3STileManager();\n  }\n\n  shouldRefine(tile, frameState: FrameState) {\n    tile._lodJudge = getLodStatus(tile, frameState);\n    return tile._lodJudge === 'DIG';\n  }\n\n  updateChildTiles(tile, frameState: FrameState): boolean {\n    const children = tile.header.children || [];\n    // children which are already fetched and constructed as Tile3D instances\n    const childTiles = tile.children;\n    const tileset = tile.tileset;\n\n    for (const child of children) {\n      const extendedId = `${child.id}-${frameState.viewport.id}`;\n      // if child tile is not fetched\n      const childTile = childTiles && childTiles.find((t) => t.id === extendedId);\n      if (!childTile) {\n        let request = () => this._loadTile(child.id, tileset);\n        const cachedRequest = this._tileManager.find(extendedId);\n        if (!cachedRequest) {\n          // eslint-disable-next-line max-depth\n          if (tileset.tileset.nodePages) {\n            request = () => tileset.tileset.nodePagesTile.formTileFromNodePages(child.id);\n          }\n          this._tileManager.add(\n            request,\n            extendedId,\n            (header) => this._onTileLoad(header, tile, extendedId),\n            frameState\n          );\n        } else {\n          // update frameNumber since it is still needed in current frame\n          this._tileManager.update(extendedId, frameState);\n        }\n      } else if (childTile) {\n        // if child tile is fetched and available\n        this.updateTile(childTile, frameState);\n      }\n    }\n    return false;\n  }\n\n  async _loadTile(nodeId, tileset) {\n    const {loader} = tileset;\n    const nodeUrl = tileset.getTileUrl(`${tileset.url}/nodes/${nodeId}`);\n    // load metadata\n    const options = {\n      ...tileset.loadOptions,\n      i3s: {\n        ...tileset.loadOptions.i3s,\n        isTileHeader: true,\n        loadContent: false\n      }\n    };\n\n    return await load(nodeUrl, loader, options);\n  }\n\n  /**\n   * The callback to init TileHeader instance after loading the tile JSON\n   * @param {Object} header - the tile JSON from a dataset\n   * @param {TileHeader} tile - the parent TileHeader instance\n   * @param {string} extendedId - optional ID to separate copies of a tile for different viewports.\n   *                              const extendedId = `${tile.id}-${frameState.viewport.id}`;\n   * @return {void}\n   */\n  _onTileLoad(header, tile, extendedId) {\n    // after child tile is fetched\n    const childTile = new TileHeader(tile.tileset, header, tile, extendedId);\n    tile.children.push(childTile);\n    const frameState = this._tileManager.find(childTile.id).frameState;\n    this.updateTile(childTile, frameState);\n\n    // after tile fetched, resume traversal if still in current update/traversal frame\n    if (\n      this._frameNumber === frameState.frameNumber &&\n      (this.traversalFinished(frameState) ||\n        new Date().getTime() - this.lastUpdate > this.updateDebounceTime)\n    ) {\n      this.executeTraversal(childTile, frameState);\n    }\n  }\n}\n"],"file":"i3s-tileset-traverser.js"}