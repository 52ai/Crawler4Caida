{"version":3,"sources":["../../../../src/tileset/traversers/tileset-traverser.ts"],"names":["ManagedArray","TILE_REFINEMENT","DEFAULT_PROPS","loadSiblings","skipLevelOfDetail","maximumScreenSpaceError","updateTransforms","onTraversalEnd","viewportTraversersMap","basePath","TilesetTraverser","traversalFinished","frameState","constructor","options","Date","getTime","_traversalStack","_emptyTraversalStack","_frameNumber","root","selectedTiles","requestedTiles","emptyTiles","traverse","reset","updateTile","frameNumber","executeTraversal","stack","_selectionDepth","push","length","tile","pop","shouldRefine","canTraverse","updateChildTiles","updateAndPushChildren","hasRenderContent","parent","parentRefines","Boolean","_shouldRefine","stoppedRefining","id","loadTile","selectTile","refine","ADD","REPLACE","touchTile","newTime","lastUpdate","updateDebounceTime","children","child","depth","sort","compareDistanceToCamera","bind","checkRefines","hasVisibleChild","refines","isVisibleAndInRequestVolume","find","delete","childRefines","_inRequestVolume","executeEmptyTraversal","contentAvailable","updateTileVisibility","shouldSelectTile","_selectedFrame","shouldLoadTile","_requestedFrame","_priority","_getPriority","tileset","_cache","touch","_touchedFrame","useParentMetric","ignoreVisibility","hasChildren","hasTilesetContent","contentExpired","hasUnloadedContent","screenSpaceError","_screenSpaceError","getScreenSpaceError","viewportIds","key","value","viewport","updateVisibility","b","a","_distanceToCamera","anyChildrenVisible","anyVisible","allDescendantsLoaded"],"mappings":"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","sourcesContent":["import ManagedArray from '../../utils/managed-array';\nimport {TILE_REFINEMENT} from '../../constants';\nimport {FrameState} from '../helpers/frame-state';\n\nexport type TilesetTraverserProps = {\n  loadSiblings?: boolean;\n  skipLevelOfDetail?: boolean;\n  maximumScreenSpaceError?: number;\n  onTraversalEnd?: (frameState) => any;\n  viewportTraversersMap?: {[key: string]: any};\n  basePath?: string;\n};\n\nexport type Props = {\n  loadSiblings: boolean;\n  skipLevelOfDetail: boolean;\n  updateTransforms: boolean;\n  maximumScreenSpaceError: number;\n  onTraversalEnd: (frameState) => any;\n  viewportTraversersMap: {[key: string]: any};\n  basePath: string;\n};\n\nexport const DEFAULT_PROPS: Props = {\n  loadSiblings: false,\n  skipLevelOfDetail: false,\n  maximumScreenSpaceError: 2,\n  updateTransforms: true,\n  onTraversalEnd: () => {},\n  viewportTraversersMap: {},\n  basePath: ''\n};\n\nexport default class TilesetTraverser {\n  options: Props;\n\n  root: any;\n  requestedTiles: object;\n  selectedTiles: object;\n  emptyTiles: object;\n\n  protected lastUpdate: number = new Date().getTime();\n  protected readonly updateDebounceTime = 1000;\n  protected _traversalStack: ManagedArray;\n  protected _emptyTraversalStack: ManagedArray;\n  protected _frameNumber: number | null;\n\n  protected traversalFinished(frameState: FrameState): boolean {\n    return true;\n  }\n\n  // TODO nested props\n  constructor(options: TilesetTraverserProps) {\n    this.options = {...DEFAULT_PROPS, ...options};\n    // TRAVERSAL\n    // temporary storage to hold the traversed tiles during a traversal\n    this._traversalStack = new ManagedArray();\n    this._emptyTraversalStack = new ManagedArray();\n\n    // set in every traverse cycle\n    this._frameNumber = null;\n\n    // fulfill in traverse call\n    this.root = null;\n\n    // RESULT\n    // tiles should be rendered\n    this.selectedTiles = {};\n    // tiles should be loaded from server\n    this.requestedTiles = {};\n    // tiles does not have render content\n    this.emptyTiles = {};\n  }\n\n  // tiles should be visible\n  traverse(root, frameState, options) {\n    this.root = root; // for root screen space error\n    this.options = {...this.options, ...options};\n\n    // reset result\n    this.reset();\n\n    // update tile (visibility and expiration)\n    this.updateTile(root, frameState);\n\n    this._frameNumber = frameState.frameNumber;\n    this.executeTraversal(root, frameState);\n  }\n\n  reset() {\n    this.requestedTiles = {};\n    this.selectedTiles = {};\n    this.emptyTiles = {};\n    this._traversalStack.reset();\n    this._emptyTraversalStack.reset();\n  }\n\n  // execute traverse\n  // Depth-first traversal that traverses all visible tiles and marks tiles for selection.\n  // If skipLevelOfDetail is off then a tile does not refine until all children are loaded.\n  // This is the traditional replacement refinement approach and is called the base traversal.\n  // Tiles that have a greater screen space error than the base screen space error are part of the base traversal,\n  // all other tiles are part of the skip traversal. The skip traversal allows for skipping levels of the tree\n  // and rendering children and parent tiles simultaneously.\n  /* eslint-disable-next-line complexity, max-statements */\n  executeTraversal(root, frameState: FrameState) {\n    // stack to store traversed tiles, only visible tiles should be added to stack\n    // visible: visible in the current view frustum\n    const stack = this._traversalStack;\n    root._selectionDepth = 1;\n\n    stack.push(root);\n    while (stack.length > 0) {\n      // 1. pop tile\n      const tile = stack.pop();\n\n      // 2. check if tile needs to be refine, needs refine if a tile's LoD is not sufficient and tile has available children (available content)\n      let shouldRefine = false;\n      if (this.canTraverse(tile, frameState)) {\n        this.updateChildTiles(tile, frameState);\n        shouldRefine = this.updateAndPushChildren(\n          tile,\n          frameState,\n          stack,\n          tile.hasRenderContent ? tile._selectionDepth + 1 : tile._selectionDepth\n        );\n      }\n\n      // 3. decide if should render (select) this tile\n      //   - tile does not have render content\n      //   - tile has render content and tile is `add` type (pointcloud)\n      //   - tile has render content and tile is `replace` type (photogrammetry) and can't refine any further\n      const parent = tile.parent;\n      const parentRefines = Boolean(!parent || parent._shouldRefine);\n      const stoppedRefining = !shouldRefine;\n\n      if (!tile.hasRenderContent) {\n        this.emptyTiles[tile.id] = tile;\n        this.loadTile(tile, frameState);\n        if (stoppedRefining) {\n          this.selectTile(tile, frameState);\n        }\n        // additive tiles\n      } else if (tile.refine === TILE_REFINEMENT.ADD) {\n        // Additive tiles are always loaded and selected\n        this.loadTile(tile, frameState);\n        this.selectTile(tile, frameState);\n\n        // replace tiles\n      } else if (tile.refine === TILE_REFINEMENT.REPLACE) {\n        // Always load tiles in the base traversal\n        // Select tiles that can't refine further\n        this.loadTile(tile, frameState);\n        if (stoppedRefining) {\n          this.selectTile(tile, frameState);\n        }\n      }\n\n      // 3. update cache, most recent touched tiles have higher priority to be fetched from server\n      this.touchTile(tile, frameState);\n\n      // 4. update tile refine prop and parent refinement status to trickle down to the descendants\n      tile._shouldRefine = shouldRefine && parentRefines;\n    }\n\n    const newTime = new Date().getTime();\n    if (this.traversalFinished(frameState) || newTime - this.lastUpdate > this.updateDebounceTime) {\n      this.lastUpdate = newTime;\n      this.options.onTraversalEnd(frameState);\n    }\n  }\n\n  updateChildTiles(tile, frameState) {\n    const children = tile.children;\n    for (const child of children) {\n      this.updateTile(child, frameState);\n    }\n    return true;\n  }\n\n  /* eslint-disable complexity, max-statements */\n  updateAndPushChildren(tile, frameState, stack, depth) {\n    const {loadSiblings, skipLevelOfDetail} = this.options;\n\n    const children = tile.children;\n\n    // sort children tiles\n    children.sort(this.compareDistanceToCamera.bind(this));\n\n    // For traditional replacement refinement only refine if all children are loaded.\n    // Empty tiles are exempt since it looks better if children stream in as they are loaded to fill the empty space.\n    const checkRefines =\n      tile.refine === TILE_REFINEMENT.REPLACE && tile.hasRenderContent && !skipLevelOfDetail;\n\n    let hasVisibleChild = false;\n    let refines = true;\n\n    for (const child of children) {\n      child._selectionDepth = depth;\n      if (child.isVisibleAndInRequestVolume) {\n        if (stack.find(child)) {\n          stack.delete(child);\n        }\n        stack.push(child);\n        hasVisibleChild = true;\n      } else if (checkRefines || loadSiblings) {\n        // Keep non-visible children loaded since they are still needed before the parent can refine.\n        // Or loadSiblings is true so always load tiles regardless of visibility.\n        this.loadTile(child, frameState);\n        this.touchTile(child, frameState);\n      }\n\n      if (checkRefines) {\n        let childRefines;\n        if (!child._inRequestVolume) {\n          childRefines = false;\n        } else if (!child.hasRenderContent) {\n          childRefines = this.executeEmptyTraversal(child, frameState);\n        } else {\n          childRefines = child.contentAvailable;\n        }\n        refines = refines && childRefines;\n\n        if (!refines) {\n          return false;\n        }\n      }\n    }\n\n    if (!hasVisibleChild) {\n      refines = false;\n    }\n    return refines;\n  }\n  /* eslint-enable complexity, max-statements */\n\n  updateTile(tile, frameState) {\n    this.updateTileVisibility(tile, frameState);\n  }\n\n  // tile to render in the browser\n  selectTile(tile, frameState) {\n    if (this.shouldSelectTile(tile)) {\n      // The tile can be selected right away and does not require traverseAndSelect\n      tile._selectedFrame = frameState.frameNumber;\n      this.selectedTiles[tile.id] = tile;\n    }\n  }\n\n  // tile to load from server\n  loadTile(tile, frameState) {\n    if (this.shouldLoadTile(tile)) {\n      tile._requestedFrame = frameState.frameNumber;\n      tile._priority = tile._getPriority();\n      this.requestedTiles[tile.id] = tile;\n    }\n  }\n\n  // cache tile\n  touchTile(tile, frameState) {\n    tile.tileset._cache.touch(tile);\n    tile._touchedFrame = frameState.frameNumber;\n  }\n\n  // tile should be visible\n  // tile should have children\n  // tile LoD (level of detail) is not sufficient under current viewport\n  canTraverse(tile, frameState, useParentMetric = false, ignoreVisibility = false) {\n    if (!tile.hasChildren) {\n      return false;\n    }\n\n    // cesium specific\n    if (tile.hasTilesetContent) {\n      // Traverse external this to visit its root tile\n      // Don't traverse if the subtree is expired because it will be destroyed\n      return !tile.contentExpired;\n    }\n\n    if (!ignoreVisibility && !tile.isVisibleAndInRequestVolume) {\n      return false;\n    }\n\n    return this.shouldRefine(tile, frameState, useParentMetric);\n  }\n\n  shouldLoadTile(tile) {\n    // if request tile is in current frame\n    // and has unexpired render content\n    return tile.hasUnloadedContent || tile.contentExpired;\n  }\n\n  shouldSelectTile(tile) {\n    // if select tile is in current frame\n    // and content available\n    return tile.contentAvailable && !this.options.skipLevelOfDetail;\n  }\n\n  // Decide if tile LoD (level of detail) is not sufficient under current viewport\n  shouldRefine(tile, frameState, useParentMetric) {\n    let screenSpaceError = tile._screenSpaceError;\n    if (useParentMetric) {\n      screenSpaceError = tile.getScreenSpaceError(frameState, true);\n    }\n\n    return screenSpaceError > this.options.maximumScreenSpaceError;\n  }\n\n  updateTileVisibility(tile, frameState) {\n    const viewportIds: string[] = [];\n    if (this.options.viewportTraversersMap) {\n      for (const key in this.options.viewportTraversersMap) {\n        const value = this.options.viewportTraversersMap[key];\n        if (value === frameState.viewport.id) {\n          viewportIds.push(key);\n        }\n      }\n    } else {\n      viewportIds.push(frameState.viewport.id);\n    }\n    tile.updateVisibility(frameState, viewportIds);\n  }\n\n  // UTILITIES\n\n  compareDistanceToCamera(b, a) {\n    return b._distanceToCamera - a._distanceToCamera;\n  }\n\n  anyChildrenVisible(tile, frameState) {\n    let anyVisible = false;\n    for (const child of tile.children) {\n      child.updateVisibility(frameState);\n      anyVisible = anyVisible || child.isVisibleAndInRequestVolume;\n    }\n    return anyVisible;\n  }\n\n  // Depth-first traversal that checks if all nearest descendants with content are loaded.\n  // Ignores visibility.\n  executeEmptyTraversal(root, frameState) {\n    let allDescendantsLoaded = true;\n    const stack = this._emptyTraversalStack;\n\n    stack.push(root);\n\n    while (stack.length > 0 && allDescendantsLoaded) {\n      const tile = stack.pop();\n\n      this.updateTile(tile, frameState);\n\n      if (!tile.isVisibleAndInRequestVolume) {\n        // Load tiles that aren't visible since they are still needed for the parent to refine\n        this.loadTile(tile, frameState);\n      }\n\n      this.touchTile(tile, frameState);\n\n      // Only traverse if the tile is empty - traversal stop at descendants with content\n      const traverse = !tile.hasRenderContent && this.canTraverse(tile, frameState, false, true);\n\n      if (traverse) {\n        const children = tile.children;\n        for (const child of children) {\n          // eslint-disable-next-line max-depth\n          if (stack.find(child)) {\n            stack.delete(child);\n          }\n          stack.push(child);\n        }\n      } else if (!tile.contentAvailable) {\n        allDescendantsLoaded = false;\n      }\n    }\n\n    return allDescendantsLoaded;\n  }\n}\n\n// TODO\n// enable expiration\n// enable optimization hint\n"],"file":"tileset-traverser.js"}