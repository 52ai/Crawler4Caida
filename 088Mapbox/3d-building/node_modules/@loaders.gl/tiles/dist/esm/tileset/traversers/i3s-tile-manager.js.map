{"version":3,"sources":["../../../../src/tileset/traversers/i3s-tile-manager.ts"],"names":["I3SPendingTilesRegister","STATUS","REQUESTED","COMPLETED","ERROR","I3STileManager","constructor","_statusMap","add","request","key","callback","frameState","frameNumber","viewport","id","status","pendingTilesRegister","register","then","data","actualFrameNumber","deregister","catch","error","update","newFrameNumber","newViewportId","find","hasPendingTiles","viewportId","isZero"],"mappings":"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","sourcesContent":["import {FrameState} from '../helpers/frame-state';\nimport I3SPendingTilesRegister from './i3s-pending-tiles-register';\n\nconst STATUS = {\n  REQUESTED: 'REQUESTED',\n  COMPLETED: 'COMPLETED',\n  ERROR: 'ERROR'\n};\n\n// A helper class to manage tile metadata fetching\nexport default class I3STileManager {\n  private _statusMap: object;\n  private pendingTilesRegister = new I3SPendingTilesRegister();\n\n  constructor() {\n    this._statusMap = {};\n  }\n\n  /**\n   * Add request to map\n   * @param request - node metadata request\n   * @param key - unique key\n   * @param callback - callback after request completed\n   * @param frameState - frameState data\n   */\n  add(request, key, callback, frameState: FrameState) {\n    if (!this._statusMap[key]) {\n      const {\n        frameNumber,\n        viewport: {id}\n      } = frameState;\n      this._statusMap[key] = {request, callback, key, frameState, status: STATUS.REQUESTED};\n      // Register pending request for the frameNumber\n      this.pendingTilesRegister.register(id, frameNumber);\n      request()\n        .then((data) => {\n          this._statusMap[key].status = STATUS.COMPLETED;\n          const {\n            frameNumber: actualFrameNumber,\n            viewport: {id}\n          } = this._statusMap[key].frameState;\n          // Deregister pending request for the frameNumber\n          this.pendingTilesRegister.deregister(id, actualFrameNumber);\n          this._statusMap[key].callback(data, frameState);\n        })\n        .catch((error) => {\n          this._statusMap[key].status = STATUS.ERROR;\n          const {\n            frameNumber: actualFrameNumber,\n            viewport: {id}\n          } = this._statusMap[key].frameState;\n          // Deregister pending request for the frameNumber\n          this.pendingTilesRegister.deregister(id, actualFrameNumber);\n          callback(error);\n        });\n    }\n  }\n\n  /**\n   * Update request if it is still actual for the new frameState\n   * @param key - unique key\n   * @param frameState - frameState data\n   */\n  update(key, frameState: FrameState) {\n    if (this._statusMap[key]) {\n      // Deregister pending request for the old frameNumber\n      const {\n        frameNumber,\n        viewport: {id}\n      } = this._statusMap[key].frameState;\n      this.pendingTilesRegister.deregister(id, frameNumber);\n\n      // Register pending request for the new frameNumber\n      const {\n        frameNumber: newFrameNumber,\n        viewport: {id: newViewportId}\n      } = frameState;\n      this.pendingTilesRegister.register(newViewportId, newFrameNumber);\n      this._statusMap[key].frameState = frameState;\n    }\n  }\n\n  /**\n   * Find request in the map\n   * @param key - unique key\n   * @returns\n   */\n  find(key) {\n    return this._statusMap[key];\n  }\n\n  /**\n   * Check it there are pending tile headers for the particular frameNumber\n   * @param viewportId\n   * @param frameNumber\n   * @returns\n   */\n  hasPendingTiles(viewportId: string, frameNumber: number): boolean {\n    return !this.pendingTilesRegister.isZero(viewportId, frameNumber);\n  }\n}\n"],"file":"i3s-tile-manager.js"}