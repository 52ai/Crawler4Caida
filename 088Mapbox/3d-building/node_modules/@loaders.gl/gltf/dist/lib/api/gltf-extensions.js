"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.decodeExtensions = exports.preprocessExtensions = exports.EXTENSIONS = void 0;
// GLTF 1.0 extensions (decode only)
// import * as KHR_binary_gltf from './KHR_draco_mesh_compression';
// GLTF 2.0 Khronos extensions (decode/encode)
const EXT_meshopt_compression = __importStar(require("../extensions/EXT_meshopt_compression"));
const EXT_texture_webp = __importStar(require("../extensions/EXT_texture_webp"));
const KHR_texture_basisu = __importStar(require("../extensions/KHR_texture_basisu"));
const KHR_draco_mesh_compression = __importStar(require("../extensions/KHR_draco_mesh_compression"));
// Deprecated. These should be handled by rendering library (e.g. luma.gl), not the loader.
const KHR_lights_punctual = __importStar(require("../extensions/deprecated/KHR_lights_punctual"));
const KHR_materials_unlit = __importStar(require("../extensions/deprecated/KHR_materials_unlit"));
const KHR_techniques_webgl = __importStar(require("../extensions/deprecated/KHR_techniques_webgl"));
/**
 * List of extensions processed by the GLTFLoader
 * Note that may extensions can only be handled on the rendering stage and are left out here
 * These are just extensions that can be handled fully or partially during loading.
 */
exports.EXTENSIONS = [
    // 1.0
    // KHR_binary_gltf is handled separately - must be processed before other parsing starts
    // KHR_binary_gltf,
    // 2.0
    EXT_meshopt_compression,
    EXT_texture_webp,
    // Basisu should come after webp, we want basisu to be preferred if both are provided
    KHR_texture_basisu,
    KHR_draco_mesh_compression,
    KHR_lights_punctual,
    KHR_materials_unlit,
    KHR_techniques_webgl
];
/** Call before any resource loading starts */
function preprocessExtensions(gltf, options = {}, context) {
    const extensions = exports.EXTENSIONS.filter((extension) => useExtension(extension.name, options));
    for (const extension of extensions) {
        extension.preprocess?.(gltf, options, context);
    }
}
exports.preprocessExtensions = preprocessExtensions;
/** Call after resource loading */
async function decodeExtensions(gltf, options = {}, context) {
    const extensions = exports.EXTENSIONS.filter((extension) => useExtension(extension.name, options));
    for (const extension of extensions) {
        // Note: We decode async extensions sequentially, this might not be necessary
        // Currently we only have Draco, but when we add Basis we may revisit
        await extension.decode?.(gltf, options, context);
    }
}
exports.decodeExtensions = decodeExtensions;
function useExtension(extensionName, options) {
    const excludes = options?.gltf?.excludeExtensions || {};
    const exclude = extensionName in excludes && !excludes[extensionName];
    return !exclude;
}
