"use strict";
// GLTF EXTENSION: KHR_materials_unlit
// https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_unlit
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.encode = exports.decode = exports.name = void 0;
const gltf_scenegraph_1 = __importDefault(require("../../api/gltf-scenegraph"));
const KHR_MATERIALS_UNLIT = 'KHR_materials_unlit';
exports.name = KHR_MATERIALS_UNLIT;
async function decode(gltfData) {
    const gltfScenegraph = new gltf_scenegraph_1.default(gltfData);
    const { json } = gltfScenegraph;
    // Remove the top-level extension
    gltfScenegraph.removeExtension(KHR_MATERIALS_UNLIT);
    // Any nodes that have the extension, add lights field pointing to light object
    // and remove the extension
    for (const material of json.materials || []) {
        const extension = material.extensions && material.extensions.KHR_materials_unlit;
        if (extension) {
            // @ts-ignore TODO
            material.unlit = true;
        }
        gltfScenegraph.removeObjectExtension(material, KHR_MATERIALS_UNLIT);
    }
}
exports.decode = decode;
function encode(gltfData) {
    const gltfScenegraph = new gltf_scenegraph_1.default(gltfData);
    const { json } = gltfScenegraph;
    // Any nodes that have lights field pointing to light object
    // add the extension
    // @ts-ignore
    if (gltfScenegraph.materials) {
        for (const material of json.materials || []) {
            // @ts-ignore
            if (material.unlit) {
                // @ts-ignore
                delete material.unlit;
                gltfScenegraph.addObjectExtension(material, KHR_MATERIALS_UNLIT, {});
                gltfScenegraph.addExtension(KHR_MATERIALS_UNLIT);
            }
        }
    }
}
exports.encode = encode;
