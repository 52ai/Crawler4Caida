{"version":3,"sources":["../../../../src/lib/api/gltf-scenegraph.ts"],"names":["getBinaryImageMetadata","padToNBytes","copyToArray","assert","getAccessorArrayTypeAndLength","getAccessorTypeFromSize","getComponentTypeFromArray","DEFAULT_GLTF_JSON","asset","version","generator","buffers","GLTFScenegraph","constructor","gltf","json","sourceBuffers","byteLength","getApplicationData","key","data","getExtraData","extras","getExtension","extensionName","isExtension","getUsedExtensions","find","name","extensions","getRequiredExtension","isRequired","getRequiredExtensions","extensionsRequired","extensionsUsed","getObjectExtension","object","getScene","index","getObject","getNode","getSkin","getMesh","getMaterial","getAccessor","getTexture","getSampler","getImage","getBufferView","getBuffer","array","Error","getTypedArrayForBufferView","bufferView","bufferIndex","buffer","binChunk","byteOffset","Uint8Array","arrayBuffer","getTypedArrayForAccessor","accessor","ArrayType","length","getTypedArrayForImageData","image","addApplicationData","addExtraData","addObjectExtension","registerUsedExtension","setObjectExtension","removeObjectExtension","extension","addExtension","extensionData","addRequiredExtension","registerRequiredExtension","ext","push","removeExtension","_removeStringFromArray","setDefaultScene","sceneIndex","scene","addScene","nodeIndices","scenes","nodes","addNode","node","meshIndex","matrix","nodeData","mesh","addMesh","attributes","indices","material","mode","accessors","_addAttributes","glTFMesh","primitives","indicesAccessor","_addIndices","Number","isFinite","meshes","addPointCloud","accessorIndices","addImage","imageData","mimeTypeOpt","metadata","mimeType","bufferViewIndex","addBufferView","glTFImage","images","glTFBufferView","bufferViews","addAccessor","glTFAccessor","type","size","componentType","count","max","min","addBinaryBuffer","sourceBuffer","minMax","_getAccessorMinMax","accessorDefaults","Math","round","Object","assign","addTexture","texture","imageIndex","glTFTexture","source","textures","addMaterial","pbrMaterialInfo","materials","createBinaryChunk","totalByteLength","ArrayBuffer","targetArray","dstByteOffset","binary","string","found","indexOf","splice","result","attributeKey","attributeData","attrName","_getGltfAttributeName","value","attributeName","toLowerCase","initValues","subarray","componentIndex"],"mappings":"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","sourcesContent":["import type {\n  GLTF,\n  GLTFScene,\n  GLTFNode,\n  GLTFMesh,\n  GLTFSkin,\n  GLTFMaterial,\n  GLTFAccessor,\n  GLTFSampler,\n  GLTFTexture,\n  GLTFImage,\n  GLTFBuffer,\n  GLTFBufferView\n} from '../types/gltf-types';\n\nimport {getBinaryImageMetadata} from '@loaders.gl/images';\nimport {padToNBytes, copyToArray} from '@loaders.gl/loader-utils';\nimport {assert} from '../utils/assert';\nimport {\n  getAccessorArrayTypeAndLength,\n  getAccessorTypeFromSize,\n  getComponentTypeFromArray\n} from '../gltf-utils/gltf-utils';\n\ntype GLTFWithBuffers = {\n  json: GLTF;\n  buffers: any[];\n  binary?: ArrayBuffer;\n};\n\nconst DEFAULT_GLTF_JSON: GLTF = {\n  asset: {\n    version: '2.0',\n    generator: 'loaders.gl'\n  },\n  buffers: []\n};\n\ntype Extension = {[key: string]: any};\n/**\n * Class for structured access to GLTF data\n */\nexport default class GLTFScenegraph {\n  // internal\n  gltf: GLTFWithBuffers;\n  sourceBuffers: any[];\n  byteLength: number;\n\n  constructor(gltf?: {json: GLTF; buffers?: any[]}) {\n    // @ts-ignore\n    this.gltf = gltf || {\n      json: {...DEFAULT_GLTF_JSON},\n      buffers: []\n    };\n    this.sourceBuffers = [];\n    this.byteLength = 0;\n\n    // Initialize buffers\n    if (this.gltf.buffers && this.gltf.buffers[0]) {\n      this.byteLength = this.gltf.buffers[0].byteLength;\n      this.sourceBuffers = [this.gltf.buffers[0]];\n    }\n  }\n\n  // Accessors\n\n  get json(): GLTF {\n    return this.gltf.json;\n  }\n\n  getApplicationData(key: string): {[key: string]: any} {\n    // TODO - Data is already unpacked by GLBParser\n    const data = this.json[key];\n    return data;\n  }\n\n  getExtraData(key: string): {[key: string]: any} {\n    // TODO - Data is already unpacked by GLBParser\n    const extras = this.json.extras || {};\n    return extras[key];\n  }\n\n  getExtension<T = Extension>(extensionName: string): T | null {\n    const isExtension = this.getUsedExtensions().find((name) => name === extensionName);\n    const extensions = this.json.extensions || {};\n    return isExtension ? extensions[extensionName] || true : null;\n  }\n\n  getRequiredExtension<T = Extension>(extensionName: string): T | null {\n    const isRequired = this.getRequiredExtensions().find((name) => name === extensionName);\n    return isRequired ? this.getExtension(extensionName) : null;\n  }\n\n  getRequiredExtensions(): string[] {\n    return this.json.extensionsRequired || [];\n  }\n\n  getUsedExtensions(): string[] {\n    return this.json.extensionsUsed || [];\n  }\n\n  getObjectExtension<T = Extension>(object: {[key: string]: any}, extensionName: string): T | null {\n    const extensions = object.extensions || {};\n    return extensions[extensionName];\n  }\n\n  getScene(index: number): GLTFScene {\n    return this.getObject('scenes', index) as GLTFScene;\n  }\n\n  getNode(index: number): GLTFNode {\n    return this.getObject('nodes', index) as GLTFNode;\n  }\n\n  getSkin(index: number): GLTFSkin {\n    return this.getObject('skins', index) as GLTFSkin;\n  }\n\n  getMesh(index: number): GLTFMesh {\n    return this.getObject('meshes', index) as GLTFMesh;\n  }\n\n  getMaterial(index: number): GLTFMaterial {\n    return this.getObject('materials', index) as GLTFMaterial;\n  }\n\n  getAccessor(index: number): GLTFAccessor {\n    return this.getObject('accessors', index) as GLTFAccessor;\n  }\n\n  // getCamera(index: number): object | null {\n  //   return null; // TODO: fix thi: object  as null;\n  // }\n\n  getTexture(index: number): GLTFTexture {\n    return this.getObject('textures', index) as GLTFTexture;\n  }\n\n  getSampler(index: number): GLTFSampler {\n    return this.getObject('samplers', index) as GLTFSampler;\n  }\n\n  getImage(index: number): GLTFImage {\n    return this.getObject('images', index) as GLTFImage;\n  }\n\n  getBufferView(index: number | object): GLTFBufferView {\n    return this.getObject('bufferViews', index) as GLTFBufferView;\n  }\n\n  getBuffer(index: number): GLTFBuffer {\n    return this.getObject('buffers', index) as GLTFBuffer;\n  }\n\n  getObject(array: string, index: number | object): object {\n    // check if already resolved\n    if (typeof index === 'object') {\n      return index;\n    }\n    const object = this.json[array] && this.json[array][index];\n    if (!object) {\n      throw new Error(`glTF file error: Could not find ${array}[${index}]`); // eslint-disable-line\n    }\n    return object;\n  }\n\n  /**\n   * Accepts buffer view index or buffer view object\n   * @returns a `Uint8Array`\n   */\n  getTypedArrayForBufferView(bufferView: number | object): Uint8Array {\n    bufferView = this.getBufferView(bufferView);\n    // @ts-ignore\n    const bufferIndex = bufferView.buffer;\n\n    // Get hold of the arrayBuffer\n    // const buffer = this.getBuffer(bufferIndex);\n    const binChunk = this.gltf.buffers[bufferIndex];\n    assert(binChunk);\n\n    // @ts-ignore\n    const byteOffset = (bufferView.byteOffset || 0) + binChunk.byteOffset;\n    // @ts-ignore\n    return new Uint8Array(binChunk.arrayBuffer, byteOffset, bufferView.byteLength);\n  }\n\n  /** Accepts accessor index or accessor object\n   * @returns a typed array with type that matches the types\n   */\n  getTypedArrayForAccessor(accessor: number | object): any {\n    // @ts-ignore\n    accessor = this.getAccessor(accessor);\n    // @ts-ignore\n    const bufferView = this.getBufferView(accessor.bufferView);\n    const buffer = this.getBuffer(bufferView.buffer);\n    // @ts-ignore\n    const arrayBuffer = buffer.data;\n\n    // Create a new typed array as a view into the combined buffer\n    const {ArrayType, length} = getAccessorArrayTypeAndLength(accessor, bufferView);\n    // @ts-ignore\n    const byteOffset = bufferView.byteOffset + accessor.byteOffset;\n    return new ArrayType(arrayBuffer, byteOffset, length);\n  }\n\n  /** accepts accessor index or accessor object\n   * returns a `Uint8Array`\n   */\n  getTypedArrayForImageData(image: number | object): Uint8Array {\n    // @ts-ignore\n    image = this.getAccessor(image);\n    // @ts-ignore\n    const bufferView = this.getBufferView(image.bufferView);\n    const buffer = this.getBuffer(bufferView.buffer);\n    // @ts-ignore\n    const arrayBuffer = buffer.data;\n\n    const byteOffset = bufferView.byteOffset || 0;\n    return new Uint8Array(arrayBuffer, byteOffset, bufferView.byteLength);\n  }\n\n  // MODIFERS\n\n  /**\n   * Add an extra application-defined key to the top-level data structure\n   */\n  addApplicationData(key: string, data: object): GLTFScenegraph {\n    this.json[key] = data;\n    return this;\n  }\n\n  /**\n   * `extras` - Standard GLTF field for storing application specific data\n   */\n  addExtraData(key: string, data: object): GLTFScenegraph {\n    this.json.extras = this.json.extras || {};\n    this.json.extras[key] = data;\n    return this;\n  }\n\n  addObjectExtension(object: object, extensionName: string, data: object): GLTFScenegraph {\n    // @ts-ignore\n    object.extensions = object.extensions || {};\n    // TODO - clobber or merge?\n    // @ts-ignore\n    object.extensions[extensionName] = data;\n    this.registerUsedExtension(extensionName);\n    return this;\n  }\n\n  setObjectExtension(object: object, extensionName: string, data: object): void {\n    // @ts-ignore\n    const extensions = object.extensions || {};\n    extensions[extensionName] = data;\n    // TODO - add to usedExtensions...\n  }\n\n  removeObjectExtension(object: object, extensionName: string): object {\n    // @ts-ignore\n    const extensions = object.extensions || {};\n    const extension = extensions[extensionName];\n    delete extensions[extensionName];\n    return extension;\n  }\n\n  /**\n   * Add to standard GLTF top level extension object, mark as used\n   */\n  addExtension(extensionName: string, extensionData: object = {}): object {\n    assert(extensionData);\n    this.json.extensions = this.json.extensions || {};\n    this.json.extensions[extensionName] = extensionData;\n    this.registerUsedExtension(extensionName);\n    return extensionData;\n  }\n\n  /**\n   * Standard GLTF top level extension object, mark as used and required\n   */\n  addRequiredExtension(extensionName, extensionData: object = {}): object {\n    assert(extensionData);\n    this.addExtension(extensionName, extensionData);\n    this.registerRequiredExtension(extensionName);\n    return extensionData;\n  }\n\n  /**\n   * Add extensionName to list of used extensions\n   */\n  registerUsedExtension(extensionName: string): void {\n    this.json.extensionsUsed = this.json.extensionsUsed || [];\n    if (!this.json.extensionsUsed.find((ext) => ext === extensionName)) {\n      this.json.extensionsUsed.push(extensionName);\n    }\n  }\n\n  /**\n   * Add extensionName to list of required extensions\n   */\n  registerRequiredExtension(extensionName: string): void {\n    this.registerUsedExtension(extensionName);\n    this.json.extensionsRequired = this.json.extensionsRequired || [];\n    if (!this.json.extensionsRequired.find((ext) => ext === extensionName)) {\n      this.json.extensionsRequired.push(extensionName);\n    }\n  }\n\n  /**\n   * Removes an extension from the top-level list\n   */\n  removeExtension(extensionName: string): void {\n    if (this.json.extensionsRequired) {\n      this._removeStringFromArray(this.json.extensionsRequired, extensionName);\n    }\n    if (this.json.extensionsUsed) {\n      this._removeStringFromArray(this.json.extensionsUsed, extensionName);\n    }\n    if (this.json.extensions) {\n      delete this.json.extensions[extensionName];\n    }\n  }\n\n  /**\n   *  Set default scene which is to be displayed at load time\n   */\n  setDefaultScene(sceneIndex: number): void {\n    this.json.scene = sceneIndex;\n  }\n\n  /**\n   * @todo: add more properties for scene initialization:\n   *   name`, `extensions`, `extras`\n   *   https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#reference-scene\n   */\n  addScene(scene: {nodeIndices: number[]}): number {\n    const {nodeIndices} = scene;\n    this.json.scenes = this.json.scenes || [];\n    this.json.scenes.push({nodes: nodeIndices});\n    return this.json.scenes.length - 1;\n  }\n\n  /**\n   * @todo: add more properties for node initialization:\n   *   `name`, `extensions`, `extras`, `camera`, `children`, `skin`, `rotation`, `scale`, `translation`, `weights`\n   *   https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#node\n   */\n  addNode(node: {meshIndex: number; matrix?: number[]}): number {\n    const {meshIndex, matrix} = node;\n    this.json.nodes = this.json.nodes || [];\n    const nodeData = {mesh: meshIndex};\n    if (matrix) {\n      // @ts-ignore\n      nodeData.matrix = matrix;\n    }\n    this.json.nodes.push(nodeData);\n    return this.json.nodes.length - 1;\n  }\n\n  /** Adds a mesh to the json part */\n  addMesh(mesh: {attributes: object; indices?: object; material?: number; mode?: number}): number {\n    const {attributes, indices, material, mode = 4} = mesh;\n    const accessors = this._addAttributes(attributes);\n\n    const glTFMesh = {\n      primitives: [\n        {\n          attributes: accessors,\n          mode\n        }\n      ]\n    };\n\n    if (indices) {\n      const indicesAccessor = this._addIndices(indices);\n      // @ts-ignore\n      glTFMesh.primitives[0].indices = indicesAccessor;\n    }\n\n    if (Number.isFinite(material)) {\n      // @ts-ignore\n      glTFMesh.primitives[0].material = material;\n    }\n\n    this.json.meshes = this.json.meshes || [];\n    this.json.meshes.push(glTFMesh);\n    return this.json.meshes.length - 1;\n  }\n\n  addPointCloud(attributes: object): number {\n    // @ts-ignore\n    const accessorIndices = this._addAttributes(attributes);\n\n    const glTFMesh = {\n      primitives: [\n        {\n          attributes: accessorIndices,\n          mode: 0 // GL.POINTS\n        }\n      ]\n    };\n\n    this.json.meshes = this.json.meshes || [];\n    this.json.meshes.push(glTFMesh);\n    return this.json.meshes.length - 1;\n  }\n\n  /**\n   * Adds a binary image. Builds glTF \"JSON metadata\" and saves buffer reference\n   * Buffer will be copied into BIN chunk during \"pack\"\n   * Currently encodes as glTF image\n   * @param imageData\n   * @param mimeType\n   */\n  addImage(imageData: any, mimeTypeOpt?: string): number {\n    // If image is referencing a bufferView instead of URI, mimeType must be defined:\n    //   https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#images\n    //   \"a reference to a bufferView; in that case mimeType must be defined.\"\n    const metadata = getBinaryImageMetadata(imageData);\n    const mimeType = mimeTypeOpt || metadata?.mimeType;\n\n    const bufferViewIndex = this.addBufferView(imageData);\n\n    const glTFImage = {\n      bufferView: bufferViewIndex,\n      mimeType\n    };\n\n    this.json.images = this.json.images || [];\n    this.json.images.push(glTFImage);\n    return this.json.images.length - 1;\n  }\n\n  /**\n   * Add one untyped source buffer, create a matching glTF `bufferView`, and return its index\n   * @param buffer\n   */\n  addBufferView(buffer: any): number {\n    const byteLength = buffer.byteLength;\n    assert(Number.isFinite(byteLength));\n\n    // Add this buffer to the list of buffers to be written to the body.\n    this.sourceBuffers = this.sourceBuffers || [];\n    this.sourceBuffers.push(buffer);\n\n    const glTFBufferView = {\n      buffer: 0,\n      // Write offset from the start of the binary body\n      byteOffset: this.byteLength,\n      byteLength\n    };\n\n    // We've now added the contents to the body, so update the total length\n    // Every sub-chunk needs to be 4-byte align ed\n    this.byteLength += padToNBytes(byteLength, 4);\n\n    // Add a bufferView indicating start and length of this binary sub-chunk\n    this.json.bufferViews = this.json.bufferViews || [];\n    this.json.bufferViews.push(glTFBufferView);\n    return this.json.bufferViews.length - 1;\n  }\n\n  /**\n   * Adds an accessor to a bufferView\n   * @param bufferViewIndex\n   * @param accessor\n   */\n  addAccessor(bufferViewIndex: number, accessor: object): number {\n    const glTFAccessor = {\n      bufferView: bufferViewIndex,\n      // @ts-ignore\n      type: getAccessorTypeFromSize(accessor.size),\n      // @ts-ignore\n      componentType: accessor.componentType,\n      // @ts-ignore\n      count: accessor.count,\n      // @ts-ignore\n      max: accessor.max,\n      // @ts-ignore\n      min: accessor.min\n    };\n\n    this.json.accessors = this.json.accessors || [];\n    this.json.accessors.push(glTFAccessor);\n    return this.json.accessors.length - 1;\n  }\n\n  /**\n   * Add a binary buffer. Builds glTF \"JSON metadata\" and saves buffer reference\n   * Buffer will be copied into BIN chunk during \"pack\"\n   * Currently encodes buffers as glTF accessors, but this could be optimized\n   * @param sourceBuffer\n   * @param accessor\n   */\n  addBinaryBuffer(sourceBuffer: any, accessor: object = {size: 3}): number {\n    const bufferViewIndex = this.addBufferView(sourceBuffer);\n    // @ts-ignore\n    let minMax = {min: accessor.min, max: accessor.max};\n    if (!minMax.min || !minMax.max) {\n      // @ts-ignore\n      minMax = this._getAccessorMinMax(sourceBuffer, accessor.size);\n    }\n\n    const accessorDefaults = {\n      // @ts-ignore\n      size: accessor.size,\n      componentType: getComponentTypeFromArray(sourceBuffer),\n      // @ts-ignore\n      count: Math.round(sourceBuffer.length / accessor.size),\n      min: minMax.min,\n      max: minMax.max\n    };\n\n    return this.addAccessor(bufferViewIndex, Object.assign(accessorDefaults, accessor));\n  }\n\n  /**\n   * Adds a texture to the json part\n   * @todo: add more properties for texture initialization\n   * `sampler`, `name`, `extensions`, `extras`\n   * https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#texture\n   */\n  addTexture(texture: {imageIndex: number}): number {\n    const {imageIndex} = texture;\n    const glTFTexture = {\n      source: imageIndex\n    };\n\n    this.json.textures = this.json.textures || [];\n    this.json.textures.push(glTFTexture);\n    return this.json.textures.length - 1;\n  }\n\n  /** Adds a material to the json part */\n  addMaterial(pbrMaterialInfo: Object): number {\n    this.json.materials = this.json.materials || [];\n    this.json.materials.push(pbrMaterialInfo);\n    return this.json.materials.length - 1;\n  }\n\n  /** Pack the binary chunk */\n  createBinaryChunk(): void {\n    // Encoder expects this array undefined or empty\n    this.gltf.buffers = [];\n\n    // Allocate total array\n    const totalByteLength = this.byteLength;\n    const arrayBuffer = new ArrayBuffer(totalByteLength);\n    const targetArray = new Uint8Array(arrayBuffer);\n\n    // Copy each array into\n    let dstByteOffset = 0;\n    for (const sourceBuffer of this.sourceBuffers || []) {\n      dstByteOffset = copyToArray(sourceBuffer, targetArray, dstByteOffset);\n    }\n\n    // Update the glTF BIN CHUNK byte length\n    if (this.json?.buffers?.[0]) {\n      this.json.buffers[0].byteLength = totalByteLength;\n    } else {\n      this.json.buffers = [{byteLength: totalByteLength}];\n    }\n\n    // Save generated arrayBuffer\n    this.gltf.binary = arrayBuffer;\n\n    // Put arrayBuffer to sourceBuffers for possible additional writing data in the chunk\n    this.sourceBuffers = [arrayBuffer];\n  }\n\n  // PRIVATE\n\n  _removeStringFromArray(array, string) {\n    let found = true;\n    while (found) {\n      const index = array.indexOf(string);\n      if (index > -1) {\n        array.splice(index, 1);\n      } else {\n        found = false;\n      }\n    }\n  }\n\n  /**\n   * Add attributes to buffers and create `attributes` object which is part of `mesh`\n   */\n  _addAttributes(attributes = {}) {\n    const result = {};\n    for (const attributeKey in attributes) {\n      const attributeData = attributes[attributeKey];\n      const attrName = this._getGltfAttributeName(attributeKey);\n      const accessor = this.addBinaryBuffer(attributeData.value, attributeData);\n      result[attrName] = accessor;\n    }\n    return result;\n  }\n\n  /**\n   * Add indices to buffers\n   */\n  _addIndices(indices) {\n    return this.addBinaryBuffer(indices, {size: 1});\n  }\n\n  /**\n   * Deduce gltf specific attribue name from input attribute name\n   */\n  _getGltfAttributeName(attributeName) {\n    switch (attributeName.toLowerCase()) {\n      case 'position':\n      case 'positions':\n      case 'vertices':\n        return 'POSITION';\n      case 'normal':\n      case 'normals':\n        return 'NORMAL';\n      case 'color':\n      case 'colors':\n        return 'COLOR_0';\n      case 'texcoord':\n      case 'texcoords':\n        return 'TEXCOORD_0';\n      default:\n        return attributeName;\n    }\n  }\n\n  /**\n   * Calculate `min` and `max` arrays of accessor according to spec:\n   * https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#reference-accessor\n   */\n  _getAccessorMinMax(buffer, size) {\n    const result = {min: null, max: null};\n    if (buffer.length < size) {\n      return result;\n    }\n    // @ts-ignore\n    result.min = [];\n    // @ts-ignore\n    result.max = [];\n    const initValues = buffer.subarray(0, size);\n    for (const value of initValues) {\n      // @ts-ignore\n      result.min.push(value);\n      // @ts-ignore\n      result.max.push(value);\n    }\n\n    for (let index = size; index < buffer.length; index += size) {\n      for (let componentIndex = 0; componentIndex < size; componentIndex++) {\n        // @ts-ignore\n        result.min[0 + componentIndex] = Math.min(\n          // @ts-ignore\n          result.min[0 + componentIndex],\n          buffer[index + componentIndex]\n        );\n        // @ts-ignore\n        result.max[0 + componentIndex] = Math.max(\n          // @ts-ignore\n          result.max[0 + componentIndex],\n          buffer[index + componentIndex]\n        );\n      }\n    }\n    return result;\n  }\n}\n"],"file":"gltf-scenegraph.js"}