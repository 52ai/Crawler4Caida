{"version":3,"sources":["../../../../src/lib/gltf-utils/get-typed-array.ts"],"names":["assert","getTypedArrayForBufferView","json","buffers","bufferViewIndex","bufferView","bufferViews","bufferIndex","buffer","binChunk","byteOffset","Uint8Array","arrayBuffer","byteLength","getTypedArrayForImageData","imageIndex","image","images"],"mappings":"AACA,SAAQA,MAAR,QAAqB,iBAArB;AAIA,OAAO,SAASC,0BAAT,CAAoCC,IAApC,EAA0CC,OAA1C,EAAmDC,eAAnD,EAAoE;AACzE,QAAMC,UAAU,GAAGH,IAAI,CAACI,WAAL,CAAiBF,eAAjB,CAAnB;AACAJ,EAAAA,MAAM,CAACK,UAAD,CAAN;AAGA,QAAME,WAAW,GAAGF,UAAU,CAACG,MAA/B;AACA,QAAMC,QAAQ,GAAGN,OAAO,CAACI,WAAD,CAAxB;AACAP,EAAAA,MAAM,CAACS,QAAD,CAAN;AAEA,QAAMC,UAAU,GAAG,CAACL,UAAU,CAACK,UAAX,IAAyB,CAA1B,IAA+BD,QAAQ,CAACC,UAA3D;AACA,SAAO,IAAIC,UAAJ,CAAeF,QAAQ,CAACG,WAAxB,EAAqCF,UAArC,EAAiDL,UAAU,CAACQ,UAA5D,CAAP;AACD;AAID,OAAO,SAASC,yBAAT,CAAmCZ,IAAnC,EAAyCC,OAAzC,EAAkDY,UAAlD,EAA8D;AACnE,QAAMC,KAAK,GAAGd,IAAI,CAACe,MAAL,CAAYF,UAAZ,CAAd;AACA,QAAMX,eAAe,GAAGF,IAAI,CAACI,WAAL,CAAiBU,KAAK,CAACX,UAAvB,CAAxB;AACA,SAAOJ,0BAA0B,CAACC,IAAD,EAAOC,OAAP,EAAgBC,eAAhB,CAAjC;AACD","sourcesContent":["// TODO - GLTFScenegraph should use these\nimport {assert} from '../utils/assert';\n\n// accepts buffer view index or buffer view object\n// returns a `Uint8Array`\nexport function getTypedArrayForBufferView(json, buffers, bufferViewIndex) {\n  const bufferView = json.bufferViews[bufferViewIndex];\n  assert(bufferView);\n\n  // Get hold of the arrayBuffer\n  const bufferIndex = bufferView.buffer;\n  const binChunk = buffers[bufferIndex];\n  assert(binChunk);\n\n  const byteOffset = (bufferView.byteOffset || 0) + binChunk.byteOffset;\n  return new Uint8Array(binChunk.arrayBuffer, byteOffset, bufferView.byteLength);\n}\n\n// accepts accessor index or accessor object\n// returns a `Uint8Array`\nexport function getTypedArrayForImageData(json, buffers, imageIndex) {\n  const image = json.images[imageIndex];\n  const bufferViewIndex = json.bufferViews[image.bufferView];\n  return getTypedArrayForBufferView(json, buffers, bufferViewIndex);\n}\n\n/*\n// accepts accessor index or accessor object\n// returns a typed array with type that matches the types\nexport function getTypedArrayForAccessor(accessor) {\n  accessor = this.getAccessor(accessor);\n  const bufferView = this.getBufferView(accessor.bufferView);\n  const buffer = this.getBuffer(bufferView.buffer);\n  const arrayBuffer = buffer.data;\n\n  // Create a new typed array as a view into the combined buffer\n  const {ArrayType, length} = getAccessorArrayTypeAndLength(accessor, bufferView);\n  const byteOffset = bufferView.byteOffset + accessor.byteOffset;\n  return new ArrayType(arrayBuffer, byteOffset, length);\n}\n*/\n"],"file":"get-typed-array.js"}