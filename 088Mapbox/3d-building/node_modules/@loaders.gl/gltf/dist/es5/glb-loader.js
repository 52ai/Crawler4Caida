"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports._TypecheckGLBLoader = exports.GLBLoader = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _version = require("./lib/utils/version");

var _parseGlb = _interopRequireDefault(require("./lib/parsers/parse-glb"));

var GLBLoader = {
  name: 'GLB',
  id: 'glb',
  module: 'gltf',
  version: _version.VERSION,
  extensions: ['glb'],
  mimeTypes: ['model/gltf-binary'],
  binary: true,
  parse: parse,
  parseSync: parseSync,
  options: {
    glb: {
      strict: false
    }
  }
};
exports.GLBLoader = GLBLoader;

function parse(_x, _x2) {
  return _parse.apply(this, arguments);
}

function _parse() {
  _parse = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee(arrayBuffer, options) {
    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", parseSync(arrayBuffer, options));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _parse.apply(this, arguments);
}

function parseSync(arrayBuffer, options) {
  var _ref = options || {},
      _ref$byteOffset = _ref.byteOffset,
      byteOffset = _ref$byteOffset === void 0 ? 0 : _ref$byteOffset;

  var glb = {};
  (0, _parseGlb.default)(glb, arrayBuffer, byteOffset, options === null || options === void 0 ? void 0 : options.glb);
  return glb;
}

var _TypecheckGLBLoader = GLBLoader;
exports._TypecheckGLBLoader = _TypecheckGLBLoader;
//# sourceMappingURL=glb-loader.js.map