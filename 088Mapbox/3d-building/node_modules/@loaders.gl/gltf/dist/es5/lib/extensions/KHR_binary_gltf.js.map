{"version":3,"sources":["../../../../src/lib/extensions/KHR_binary_gltf.ts"],"names":["KHR_BINARY_GLTF","name","preprocess","gltfData","gltfScenegraph","GLTFScenegraph","json","images","image","extension","getObjectExtension","Object","assign","removeObjectExtension","buffers","uri","removeExtension"],"mappings":";;;;;;;;;;AAMA;;;;;;;;AAEA,IAAMA,eAAe,GAAG,iBAAxB;AAGO,IAAMC,IAAI,GAAGD,eAAb;;;AAEA,SAASE,UAAT,CAAoBC,QAApB,EAAkD;AACvD,MAAMC,cAAc,GAAG,IAAIC,uBAAJ,CAAmBF,QAAnB,CAAvB;AACA,MAAOG,IAAP,GAAeF,cAAf,CAAOE,IAAP;;AAFuD,6CASnCA,IAAI,CAACC,MAAL,IAAe,EAToB;AAAA;;AAAA;AASvD,wDAAuC;AAAA,UAA5BC,KAA4B;AACrC,UAAMC,SAAS,GAAGL,cAAc,CAACM,kBAAf,CAChBF,KADgB,EAEhBR,eAFgB,CAAlB;;AAKA,UAAIS,SAAJ,EAAe;AACbE,QAAAA,MAAM,CAACC,MAAP,CAAcJ,KAAd,EAAqBC,SAArB;AACD;;AACDL,MAAAA,cAAc,CAACS,qBAAf,CAAqCL,KAArC,EAA4CR,eAA5C;AACD;AAnBsD;AAAA;AAAA;AAAA;AAAA;;AAyBvD,MAAIM,IAAI,CAACQ,OAAL,IAAgBR,IAAI,CAACQ,OAAL,CAAa,CAAb,CAApB,EAAqC;AACnC,WAAOR,IAAI,CAACQ,OAAL,CAAa,CAAb,EAAgBC,GAAvB;AACD;;AAGDX,EAAAA,cAAc,CAACY,eAAf,CAA+BhB,eAA/B;AACD","sourcesContent":["// GLTF 1.0 EXTENSION: KHR_binary_glTF\n// https://github.com/KhronosGroup/glTF/tree/master/extensions/1.0/Khronos/KHR_binary_glTF\n/* eslint-disable camelcase */\n\nimport type {GLTF, GLTF_KHR_binary_glTF} from '../types/gltf-types';\n\nimport GLTFScenegraph from '../api/gltf-scenegraph';\n\nconst KHR_BINARY_GLTF = 'KHR_binary_glTF';\n\n/** Extension name */\nexport const name = KHR_BINARY_GLTF;\n\nexport function preprocess(gltfData: {json: GLTF}): void {\n  const gltfScenegraph = new GLTFScenegraph(gltfData);\n  const {json} = gltfScenegraph;\n\n  // Note: json.buffers.binary_glTF also needs to be replaced\n  // This is currently done during gltf normalization\n\n  // Image and shader nodes can have the extension\n  // https://github.com/KhronosGroup/glTF/blob/master/extensions/1.0/Khronos/KHR_binary_glTF/schema/image.KHR_binary_glTF.schema.json\n  for (const image of json.images || []) {\n    const extension = gltfScenegraph.getObjectExtension<GLTF_KHR_binary_glTF>(\n      image,\n      KHR_BINARY_GLTF\n    );\n    // The data in the extension is valid as glTF 2.0 data inside the object, so just copy it in\n    if (extension) {\n      Object.assign(image, extension);\n    }\n    gltfScenegraph.removeObjectExtension(image, KHR_BINARY_GLTF);\n  }\n\n  // TODO shaders - At least traverse and throw error if used?\n  // https://github.com/KhronosGroup/glTF/blob/master/extensions/1.0/Khronos/KHR_binary_glTF/schema/shader.KHR_binary_glTF.schema.json\n\n  // glTF v1 one files have a partially formed URI field that is not expected in (and causes problems in) 2.0\n  if (json.buffers && json.buffers[0]) {\n    delete json.buffers[0].uri;\n  }\n\n  // Remove the top-level extension as it has now been removed from all nodes\n  gltfScenegraph.removeExtension(KHR_BINARY_GLTF);\n}\n\n// KHR_binary_gltf is a 1.0 extension that is supported natively by 2.0\n// export function encode() {\n//   throw new Error(KHR_BINARY_GLTF);\n// }\n"],"file":"KHR_binary_gltf.js"}