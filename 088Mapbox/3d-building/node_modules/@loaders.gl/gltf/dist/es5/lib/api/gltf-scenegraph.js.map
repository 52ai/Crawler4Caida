{"version":3,"sources":["../../../../src/lib/api/gltf-scenegraph.ts"],"names":["DEFAULT_GLTF_JSON","asset","version","generator","buffers","GLTFScenegraph","gltf","json","sourceBuffers","byteLength","key","data","extras","extensionName","isExtension","getUsedExtensions","find","name","extensions","isRequired","getRequiredExtensions","getExtension","extensionsRequired","extensionsUsed","object","index","getObject","array","Error","bufferView","getBufferView","bufferIndex","buffer","binChunk","byteOffset","Uint8Array","arrayBuffer","accessor","getAccessor","getBuffer","ArrayType","length","image","registerUsedExtension","extension","extensionData","addExtension","registerRequiredExtension","ext","push","_removeStringFromArray","sceneIndex","scene","nodeIndices","scenes","nodes","node","meshIndex","matrix","nodeData","mesh","attributes","indices","material","mode","accessors","_addAttributes","glTFMesh","primitives","indicesAccessor","_addIndices","Number","isFinite","meshes","accessorIndices","imageData","mimeTypeOpt","metadata","mimeType","bufferViewIndex","addBufferView","glTFImage","images","glTFBufferView","bufferViews","glTFAccessor","type","size","componentType","count","max","min","sourceBuffer","minMax","_getAccessorMinMax","accessorDefaults","Math","round","addAccessor","Object","assign","texture","imageIndex","glTFTexture","source","textures","pbrMaterialInfo","materials","totalByteLength","ArrayBuffer","targetArray","dstByteOffset","binary","string","found","indexOf","splice","result","attributeKey","attributeData","attrName","_getGltfAttributeName","addBinaryBuffer","value","attributeName","toLowerCase","initValues","subarray","componentIndex"],"mappings":"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","sourcesContent":["import type {\n  GLTF,\n  GLTFScene,\n  GLTFNode,\n  GLTFMesh,\n  GLTFSkin,\n  GLTFMaterial,\n  GLTFAccessor,\n  GLTFSampler,\n  GLTFTexture,\n  GLTFImage,\n  GLTFBuffer,\n  GLTFBufferView\n} from '../types/gltf-types';\n\nimport {getBinaryImageMetadata} from '@loaders.gl/images';\nimport {padToNBytes, copyToArray} from '@loaders.gl/loader-utils';\nimport {assert} from '../utils/assert';\nimport {\n  getAccessorArrayTypeAndLength,\n  getAccessorTypeFromSize,\n  getComponentTypeFromArray\n} from '../gltf-utils/gltf-utils';\n\ntype GLTFWithBuffers = {\n  json: GLTF;\n  buffers: any[];\n  binary?: ArrayBuffer;\n};\n\nconst DEFAULT_GLTF_JSON: GLTF = {\n  asset: {\n    version: '2.0',\n    generator: 'loaders.gl'\n  },\n  buffers: []\n};\n\ntype Extension = {[key: string]: any};\n/**\n * Class for structured access to GLTF data\n */\nexport default class GLTFScenegraph {\n  // internal\n  gltf: GLTFWithBuffers;\n  sourceBuffers: any[];\n  byteLength: number;\n\n  constructor(gltf?: {json: GLTF; buffers?: any[]}) {\n    // @ts-ignore\n    this.gltf = gltf || {\n      json: {...DEFAULT_GLTF_JSON},\n      buffers: []\n    };\n    this.sourceBuffers = [];\n    this.byteLength = 0;\n\n    // Initialize buffers\n    if (this.gltf.buffers && this.gltf.buffers[0]) {\n      this.byteLength = this.gltf.buffers[0].byteLength;\n      this.sourceBuffers = [this.gltf.buffers[0]];\n    }\n  }\n\n  // Accessors\n\n  get json(): GLTF {\n    return this.gltf.json;\n  }\n\n  getApplicationData(key: string): {[key: string]: any} {\n    // TODO - Data is already unpacked by GLBParser\n    const data = this.json[key];\n    return data;\n  }\n\n  getExtraData(key: string): {[key: string]: any} {\n    // TODO - Data is already unpacked by GLBParser\n    const extras = this.json.extras || {};\n    return extras[key];\n  }\n\n  getExtension<T = Extension>(extensionName: string): T | null {\n    const isExtension = this.getUsedExtensions().find((name) => name === extensionName);\n    const extensions = this.json.extensions || {};\n    return isExtension ? extensions[extensionName] || true : null;\n  }\n\n  getRequiredExtension<T = Extension>(extensionName: string): T | null {\n    const isRequired = this.getRequiredExtensions().find((name) => name === extensionName);\n    return isRequired ? this.getExtension(extensionName) : null;\n  }\n\n  getRequiredExtensions(): string[] {\n    return this.json.extensionsRequired || [];\n  }\n\n  getUsedExtensions(): string[] {\n    return this.json.extensionsUsed || [];\n  }\n\n  getObjectExtension<T = Extension>(object: {[key: string]: any}, extensionName: string): T | null {\n    const extensions = object.extensions || {};\n    return extensions[extensionName];\n  }\n\n  getScene(index: number): GLTFScene {\n    return this.getObject('scenes', index) as GLTFScene;\n  }\n\n  getNode(index: number): GLTFNode {\n    return this.getObject('nodes', index) as GLTFNode;\n  }\n\n  getSkin(index: number): GLTFSkin {\n    return this.getObject('skins', index) as GLTFSkin;\n  }\n\n  getMesh(index: number): GLTFMesh {\n    return this.getObject('meshes', index) as GLTFMesh;\n  }\n\n  getMaterial(index: number): GLTFMaterial {\n    return this.getObject('materials', index) as GLTFMaterial;\n  }\n\n  getAccessor(index: number): GLTFAccessor {\n    return this.getObject('accessors', index) as GLTFAccessor;\n  }\n\n  // getCamera(index: number): object | null {\n  //   return null; // TODO: fix thi: object  as null;\n  // }\n\n  getTexture(index: number): GLTFTexture {\n    return this.getObject('textures', index) as GLTFTexture;\n  }\n\n  getSampler(index: number): GLTFSampler {\n    return this.getObject('samplers', index) as GLTFSampler;\n  }\n\n  getImage(index: number): GLTFImage {\n    return this.getObject('images', index) as GLTFImage;\n  }\n\n  getBufferView(index: number | object): GLTFBufferView {\n    return this.getObject('bufferViews', index) as GLTFBufferView;\n  }\n\n  getBuffer(index: number): GLTFBuffer {\n    return this.getObject('buffers', index) as GLTFBuffer;\n  }\n\n  getObject(array: string, index: number | object): object {\n    // check if already resolved\n    if (typeof index === 'object') {\n      return index;\n    }\n    const object = this.json[array] && this.json[array][index];\n    if (!object) {\n      throw new Error(`glTF file error: Could not find ${array}[${index}]`); // eslint-disable-line\n    }\n    return object;\n  }\n\n  /**\n   * Accepts buffer view index or buffer view object\n   * @returns a `Uint8Array`\n   */\n  getTypedArrayForBufferView(bufferView: number | object): Uint8Array {\n    bufferView = this.getBufferView(bufferView);\n    // @ts-ignore\n    const bufferIndex = bufferView.buffer;\n\n    // Get hold of the arrayBuffer\n    // const buffer = this.getBuffer(bufferIndex);\n    const binChunk = this.gltf.buffers[bufferIndex];\n    assert(binChunk);\n\n    // @ts-ignore\n    const byteOffset = (bufferView.byteOffset || 0) + binChunk.byteOffset;\n    // @ts-ignore\n    return new Uint8Array(binChunk.arrayBuffer, byteOffset, bufferView.byteLength);\n  }\n\n  /** Accepts accessor index or accessor object\n   * @returns a typed array with type that matches the types\n   */\n  getTypedArrayForAccessor(accessor: number | object): any {\n    // @ts-ignore\n    accessor = this.getAccessor(accessor);\n    // @ts-ignore\n    const bufferView = this.getBufferView(accessor.bufferView);\n    const buffer = this.getBuffer(bufferView.buffer);\n    // @ts-ignore\n    const arrayBuffer = buffer.data;\n\n    // Create a new typed array as a view into the combined buffer\n    const {ArrayType, length} = getAccessorArrayTypeAndLength(accessor, bufferView);\n    // @ts-ignore\n    const byteOffset = bufferView.byteOffset + accessor.byteOffset;\n    return new ArrayType(arrayBuffer, byteOffset, length);\n  }\n\n  /** accepts accessor index or accessor object\n   * returns a `Uint8Array`\n   */\n  getTypedArrayForImageData(image: number | object): Uint8Array {\n    // @ts-ignore\n    image = this.getAccessor(image);\n    // @ts-ignore\n    const bufferView = this.getBufferView(image.bufferView);\n    const buffer = this.getBuffer(bufferView.buffer);\n    // @ts-ignore\n    const arrayBuffer = buffer.data;\n\n    const byteOffset = bufferView.byteOffset || 0;\n    return new Uint8Array(arrayBuffer, byteOffset, bufferView.byteLength);\n  }\n\n  // MODIFERS\n\n  /**\n   * Add an extra application-defined key to the top-level data structure\n   */\n  addApplicationData(key: string, data: object): GLTFScenegraph {\n    this.json[key] = data;\n    return this;\n  }\n\n  /**\n   * `extras` - Standard GLTF field for storing application specific data\n   */\n  addExtraData(key: string, data: object): GLTFScenegraph {\n    this.json.extras = this.json.extras || {};\n    this.json.extras[key] = data;\n    return this;\n  }\n\n  addObjectExtension(object: object, extensionName: string, data: object): GLTFScenegraph {\n    // @ts-ignore\n    object.extensions = object.extensions || {};\n    // TODO - clobber or merge?\n    // @ts-ignore\n    object.extensions[extensionName] = data;\n    this.registerUsedExtension(extensionName);\n    return this;\n  }\n\n  setObjectExtension(object: object, extensionName: string, data: object): void {\n    // @ts-ignore\n    const extensions = object.extensions || {};\n    extensions[extensionName] = data;\n    // TODO - add to usedExtensions...\n  }\n\n  removeObjectExtension(object: object, extensionName: string): object {\n    // @ts-ignore\n    const extensions = object.extensions || {};\n    const extension = extensions[extensionName];\n    delete extensions[extensionName];\n    return extension;\n  }\n\n  /**\n   * Add to standard GLTF top level extension object, mark as used\n   */\n  addExtension(extensionName: string, extensionData: object = {}): object {\n    assert(extensionData);\n    this.json.extensions = this.json.extensions || {};\n    this.json.extensions[extensionName] = extensionData;\n    this.registerUsedExtension(extensionName);\n    return extensionData;\n  }\n\n  /**\n   * Standard GLTF top level extension object, mark as used and required\n   */\n  addRequiredExtension(extensionName, extensionData: object = {}): object {\n    assert(extensionData);\n    this.addExtension(extensionName, extensionData);\n    this.registerRequiredExtension(extensionName);\n    return extensionData;\n  }\n\n  /**\n   * Add extensionName to list of used extensions\n   */\n  registerUsedExtension(extensionName: string): void {\n    this.json.extensionsUsed = this.json.extensionsUsed || [];\n    if (!this.json.extensionsUsed.find((ext) => ext === extensionName)) {\n      this.json.extensionsUsed.push(extensionName);\n    }\n  }\n\n  /**\n   * Add extensionName to list of required extensions\n   */\n  registerRequiredExtension(extensionName: string): void {\n    this.registerUsedExtension(extensionName);\n    this.json.extensionsRequired = this.json.extensionsRequired || [];\n    if (!this.json.extensionsRequired.find((ext) => ext === extensionName)) {\n      this.json.extensionsRequired.push(extensionName);\n    }\n  }\n\n  /**\n   * Removes an extension from the top-level list\n   */\n  removeExtension(extensionName: string): void {\n    if (this.json.extensionsRequired) {\n      this._removeStringFromArray(this.json.extensionsRequired, extensionName);\n    }\n    if (this.json.extensionsUsed) {\n      this._removeStringFromArray(this.json.extensionsUsed, extensionName);\n    }\n    if (this.json.extensions) {\n      delete this.json.extensions[extensionName];\n    }\n  }\n\n  /**\n   *  Set default scene which is to be displayed at load time\n   */\n  setDefaultScene(sceneIndex: number): void {\n    this.json.scene = sceneIndex;\n  }\n\n  /**\n   * @todo: add more properties for scene initialization:\n   *   name`, `extensions`, `extras`\n   *   https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#reference-scene\n   */\n  addScene(scene: {nodeIndices: number[]}): number {\n    const {nodeIndices} = scene;\n    this.json.scenes = this.json.scenes || [];\n    this.json.scenes.push({nodes: nodeIndices});\n    return this.json.scenes.length - 1;\n  }\n\n  /**\n   * @todo: add more properties for node initialization:\n   *   `name`, `extensions`, `extras`, `camera`, `children`, `skin`, `rotation`, `scale`, `translation`, `weights`\n   *   https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#node\n   */\n  addNode(node: {meshIndex: number; matrix?: number[]}): number {\n    const {meshIndex, matrix} = node;\n    this.json.nodes = this.json.nodes || [];\n    const nodeData = {mesh: meshIndex};\n    if (matrix) {\n      // @ts-ignore\n      nodeData.matrix = matrix;\n    }\n    this.json.nodes.push(nodeData);\n    return this.json.nodes.length - 1;\n  }\n\n  /** Adds a mesh to the json part */\n  addMesh(mesh: {attributes: object; indices?: object; material?: number; mode?: number}): number {\n    const {attributes, indices, material, mode = 4} = mesh;\n    const accessors = this._addAttributes(attributes);\n\n    const glTFMesh = {\n      primitives: [\n        {\n          attributes: accessors,\n          mode\n        }\n      ]\n    };\n\n    if (indices) {\n      const indicesAccessor = this._addIndices(indices);\n      // @ts-ignore\n      glTFMesh.primitives[0].indices = indicesAccessor;\n    }\n\n    if (Number.isFinite(material)) {\n      // @ts-ignore\n      glTFMesh.primitives[0].material = material;\n    }\n\n    this.json.meshes = this.json.meshes || [];\n    this.json.meshes.push(glTFMesh);\n    return this.json.meshes.length - 1;\n  }\n\n  addPointCloud(attributes: object): number {\n    // @ts-ignore\n    const accessorIndices = this._addAttributes(attributes);\n\n    const glTFMesh = {\n      primitives: [\n        {\n          attributes: accessorIndices,\n          mode: 0 // GL.POINTS\n        }\n      ]\n    };\n\n    this.json.meshes = this.json.meshes || [];\n    this.json.meshes.push(glTFMesh);\n    return this.json.meshes.length - 1;\n  }\n\n  /**\n   * Adds a binary image. Builds glTF \"JSON metadata\" and saves buffer reference\n   * Buffer will be copied into BIN chunk during \"pack\"\n   * Currently encodes as glTF image\n   * @param imageData\n   * @param mimeType\n   */\n  addImage(imageData: any, mimeTypeOpt?: string): number {\n    // If image is referencing a bufferView instead of URI, mimeType must be defined:\n    //   https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#images\n    //   \"a reference to a bufferView; in that case mimeType must be defined.\"\n    const metadata = getBinaryImageMetadata(imageData);\n    const mimeType = mimeTypeOpt || metadata?.mimeType;\n\n    const bufferViewIndex = this.addBufferView(imageData);\n\n    const glTFImage = {\n      bufferView: bufferViewIndex,\n      mimeType\n    };\n\n    this.json.images = this.json.images || [];\n    this.json.images.push(glTFImage);\n    return this.json.images.length - 1;\n  }\n\n  /**\n   * Add one untyped source buffer, create a matching glTF `bufferView`, and return its index\n   * @param buffer\n   */\n  addBufferView(buffer: any): number {\n    const byteLength = buffer.byteLength;\n    assert(Number.isFinite(byteLength));\n\n    // Add this buffer to the list of buffers to be written to the body.\n    this.sourceBuffers = this.sourceBuffers || [];\n    this.sourceBuffers.push(buffer);\n\n    const glTFBufferView = {\n      buffer: 0,\n      // Write offset from the start of the binary body\n      byteOffset: this.byteLength,\n      byteLength\n    };\n\n    // We've now added the contents to the body, so update the total length\n    // Every sub-chunk needs to be 4-byte align ed\n    this.byteLength += padToNBytes(byteLength, 4);\n\n    // Add a bufferView indicating start and length of this binary sub-chunk\n    this.json.bufferViews = this.json.bufferViews || [];\n    this.json.bufferViews.push(glTFBufferView);\n    return this.json.bufferViews.length - 1;\n  }\n\n  /**\n   * Adds an accessor to a bufferView\n   * @param bufferViewIndex\n   * @param accessor\n   */\n  addAccessor(bufferViewIndex: number, accessor: object): number {\n    const glTFAccessor = {\n      bufferView: bufferViewIndex,\n      // @ts-ignore\n      type: getAccessorTypeFromSize(accessor.size),\n      // @ts-ignore\n      componentType: accessor.componentType,\n      // @ts-ignore\n      count: accessor.count,\n      // @ts-ignore\n      max: accessor.max,\n      // @ts-ignore\n      min: accessor.min\n    };\n\n    this.json.accessors = this.json.accessors || [];\n    this.json.accessors.push(glTFAccessor);\n    return this.json.accessors.length - 1;\n  }\n\n  /**\n   * Add a binary buffer. Builds glTF \"JSON metadata\" and saves buffer reference\n   * Buffer will be copied into BIN chunk during \"pack\"\n   * Currently encodes buffers as glTF accessors, but this could be optimized\n   * @param sourceBuffer\n   * @param accessor\n   */\n  addBinaryBuffer(sourceBuffer: any, accessor: object = {size: 3}): number {\n    const bufferViewIndex = this.addBufferView(sourceBuffer);\n    // @ts-ignore\n    let minMax = {min: accessor.min, max: accessor.max};\n    if (!minMax.min || !minMax.max) {\n      // @ts-ignore\n      minMax = this._getAccessorMinMax(sourceBuffer, accessor.size);\n    }\n\n    const accessorDefaults = {\n      // @ts-ignore\n      size: accessor.size,\n      componentType: getComponentTypeFromArray(sourceBuffer),\n      // @ts-ignore\n      count: Math.round(sourceBuffer.length / accessor.size),\n      min: minMax.min,\n      max: minMax.max\n    };\n\n    return this.addAccessor(bufferViewIndex, Object.assign(accessorDefaults, accessor));\n  }\n\n  /**\n   * Adds a texture to the json part\n   * @todo: add more properties for texture initialization\n   * `sampler`, `name`, `extensions`, `extras`\n   * https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#texture\n   */\n  addTexture(texture: {imageIndex: number}): number {\n    const {imageIndex} = texture;\n    const glTFTexture = {\n      source: imageIndex\n    };\n\n    this.json.textures = this.json.textures || [];\n    this.json.textures.push(glTFTexture);\n    return this.json.textures.length - 1;\n  }\n\n  /** Adds a material to the json part */\n  addMaterial(pbrMaterialInfo: Object): number {\n    this.json.materials = this.json.materials || [];\n    this.json.materials.push(pbrMaterialInfo);\n    return this.json.materials.length - 1;\n  }\n\n  /** Pack the binary chunk */\n  createBinaryChunk(): void {\n    // Encoder expects this array undefined or empty\n    this.gltf.buffers = [];\n\n    // Allocate total array\n    const totalByteLength = this.byteLength;\n    const arrayBuffer = new ArrayBuffer(totalByteLength);\n    const targetArray = new Uint8Array(arrayBuffer);\n\n    // Copy each array into\n    let dstByteOffset = 0;\n    for (const sourceBuffer of this.sourceBuffers || []) {\n      dstByteOffset = copyToArray(sourceBuffer, targetArray, dstByteOffset);\n    }\n\n    // Update the glTF BIN CHUNK byte length\n    if (this.json?.buffers?.[0]) {\n      this.json.buffers[0].byteLength = totalByteLength;\n    } else {\n      this.json.buffers = [{byteLength: totalByteLength}];\n    }\n\n    // Save generated arrayBuffer\n    this.gltf.binary = arrayBuffer;\n\n    // Put arrayBuffer to sourceBuffers for possible additional writing data in the chunk\n    this.sourceBuffers = [arrayBuffer];\n  }\n\n  // PRIVATE\n\n  _removeStringFromArray(array, string) {\n    let found = true;\n    while (found) {\n      const index = array.indexOf(string);\n      if (index > -1) {\n        array.splice(index, 1);\n      } else {\n        found = false;\n      }\n    }\n  }\n\n  /**\n   * Add attributes to buffers and create `attributes` object which is part of `mesh`\n   */\n  _addAttributes(attributes = {}) {\n    const result = {};\n    for (const attributeKey in attributes) {\n      const attributeData = attributes[attributeKey];\n      const attrName = this._getGltfAttributeName(attributeKey);\n      const accessor = this.addBinaryBuffer(attributeData.value, attributeData);\n      result[attrName] = accessor;\n    }\n    return result;\n  }\n\n  /**\n   * Add indices to buffers\n   */\n  _addIndices(indices) {\n    return this.addBinaryBuffer(indices, {size: 1});\n  }\n\n  /**\n   * Deduce gltf specific attribue name from input attribute name\n   */\n  _getGltfAttributeName(attributeName) {\n    switch (attributeName.toLowerCase()) {\n      case 'position':\n      case 'positions':\n      case 'vertices':\n        return 'POSITION';\n      case 'normal':\n      case 'normals':\n        return 'NORMAL';\n      case 'color':\n      case 'colors':\n        return 'COLOR_0';\n      case 'texcoord':\n      case 'texcoords':\n        return 'TEXCOORD_0';\n      default:\n        return attributeName;\n    }\n  }\n\n  /**\n   * Calculate `min` and `max` arrays of accessor according to spec:\n   * https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#reference-accessor\n   */\n  _getAccessorMinMax(buffer, size) {\n    const result = {min: null, max: null};\n    if (buffer.length < size) {\n      return result;\n    }\n    // @ts-ignore\n    result.min = [];\n    // @ts-ignore\n    result.max = [];\n    const initValues = buffer.subarray(0, size);\n    for (const value of initValues) {\n      // @ts-ignore\n      result.min.push(value);\n      // @ts-ignore\n      result.max.push(value);\n    }\n\n    for (let index = size; index < buffer.length; index += size) {\n      for (let componentIndex = 0; componentIndex < size; componentIndex++) {\n        // @ts-ignore\n        result.min[0 + componentIndex] = Math.min(\n          // @ts-ignore\n          result.min[0 + componentIndex],\n          buffer[index + componentIndex]\n        );\n        // @ts-ignore\n        result.max[0 + componentIndex] = Math.max(\n          // @ts-ignore\n          result.max[0 + componentIndex],\n          buffer[index + componentIndex]\n        );\n      }\n    }\n    return result;\n  }\n}\n"],"file":"gltf-scenegraph.js"}