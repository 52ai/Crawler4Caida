{"version":3,"sources":["../../../../src/lib/gltf-utils/gltf-attribute-utils.ts"],"names":["getGLTFAccessors","attributes","accessors","name","attribute","glTFAccessor","getGLTFAccessor","getAccessorData","buffer","size","count","value","byteOffset","type","componentType","ArrayBuffer","isView","toTypedArray","Float32Array","length","array","ArrayType","convertTypedArrays","Array","isArray"],"mappings":";;;;;;;;AAGA;;AAKO,SAASA,gBAAT,CAA0BC,UAA1B,EAAqE;AAC1E,MAAMC,SAAS,GAAG,EAAlB;;AACA,OAAK,IAAMC,IAAX,IAAmBF,UAAnB,EAA+B;AAC7B,QAAMG,SAAS,GAAGH,UAAU,CAACE,IAAD,CAA5B;;AACA,QAAIA,IAAI,KAAK,SAAb,EAAwB;AACtB,UAAME,YAAY,GAAGC,eAAe,CAACF,SAAD,CAApC;AACAF,MAAAA,SAAS,CAACC,IAAD,CAAT,GAAkBE,YAAlB;AACD;AACF;;AACD,SAAOH,SAAP;AACD;;AAKM,SAASI,eAAT,CAAyBF,SAAzB,EAAoC;AACzC,yBAA8BG,eAAe,CAACH,SAAD,CAA7C;AAAA,MAAOI,MAAP,oBAAOA,MAAP;AAAA,MAAeC,IAAf,oBAAeA,IAAf;AAAA,MAAqBC,KAArB,oBAAqBA,KAArB;;AAEA,MAAML,YAA0B,GAAG;AAMjCM,IAAAA,KAAK,EAAEH,MAN0B;AAOjCC,IAAAA,IAAI,EAAJA,IAPiC;AASjCG,IAAAA,UAAU,EAAE,CATqB;AAUjCF,IAAAA,KAAK,EAALA,KAViC;AAWjCG,IAAAA,IAAI,EAAE,wCAAwBJ,IAAxB,CAX2B;AAYjCK,IAAAA,aAAa,EAAE,0CAA0BN,MAA1B;AAZkB,GAAnC;AAeA,SAAOH,YAAP;AACD;;AAMD,SAASE,eAAT,CAAyBH,SAAzB,EAAoC;AAClC,MAAII,MAAM,GAAGJ,SAAb;AACA,MAAIK,IAAI,GAAG,CAAX;AACA,MAAIC,KAAK,GAAG,CAAZ;;AAEA,MAAIN,SAAS,IAAIA,SAAS,CAACO,KAA3B,EAAkC;AAChCH,IAAAA,MAAM,GAAGJ,SAAS,CAACO,KAAnB;AACAF,IAAAA,IAAI,GAAGL,SAAS,CAACK,IAAV,IAAkB,CAAzB;AACD;;AAED,MAAID,MAAJ,EAAY;AACV,QAAI,CAACO,WAAW,CAACC,MAAZ,CAAmBR,MAAnB,CAAL,EAAiC;AAC/BA,MAAAA,MAAM,GAAGS,YAAY,CAACT,MAAD,EAASU,YAAT,CAArB;AACD;;AACDR,IAAAA,KAAK,GAAGF,MAAM,CAACW,MAAP,GAAgBV,IAAxB;AACD;;AAED,SAAO;AAACD,IAAAA,MAAM,EAANA,MAAD;AAASC,IAAAA,IAAI,EAAJA,IAAT;AAAeC,IAAAA,KAAK,EAALA;AAAf,GAAP;AACD;;AAGD,SAASO,YAAT,CAAsBG,KAAtB,EAA6BC,SAA7B,EAAoE;AAAA,MAA5BC,kBAA4B,uEAAP,KAAO;;AAClE,MAAI,CAACF,KAAL,EAAY;AACV,WAAO,IAAP;AACD;;AACD,MAAIG,KAAK,CAACC,OAAN,CAAcJ,KAAd,CAAJ,EAA0B;AACxB,WAAO,IAAIC,SAAJ,CAAcD,KAAd,CAAP;AACD;;AACD,MAAIE,kBAAkB,IAAI,EAAEF,KAAK,YAAYC,SAAnB,CAA1B,EAAyD;AACvD,WAAO,IAAIA,SAAJ,CAAcD,KAAd,CAAP;AACD;;AACD,SAAOA,KAAP;AACD","sourcesContent":["// import type {TypedArray} from '../types/loader-utils';\nimport type {GLTFAccessor} from '../types/gltf-types';\n// TODO - remove\nimport {getAccessorTypeFromSize, getComponentTypeFromArray} from './gltf-utils';\n\n// Returns a fresh attributes object with glTF-standardized attributes names\n// Attributes that cannot be identified will not be included\n// Removes `indices` if present, as it should be stored separately from the attributes\nexport function getGLTFAccessors(attributes): {[key: string]: GLTFAccessor} {\n  const accessors = {};\n  for (const name in attributes) {\n    const attribute = attributes[name];\n    if (name !== 'indices') {\n      const glTFAccessor = getGLTFAccessor(attribute);\n      accessors[name] = glTFAccessor;\n    }\n  }\n  return accessors;\n}\n\n// Fix up a single accessor.\n// Input: typed array or a partial accessor object\n// Return: accessor object\nexport function getGLTFAccessor(attribute) {\n  const {buffer, size, count} = getAccessorData(attribute);\n\n  const glTFAccessor: GLTFAccessor = {\n    // glTF Accessor values\n    // TODO: Instead of a bufferView index we could have an actual buffer (typed array)\n    // bufferView: null,\n    // TODO: Deprecate `value` in favor of bufferView?\n    // @ts-ignore\n    value: buffer,\n    size, // Decoded `type` (e.g. SCALAR)\n\n    byteOffset: 0,\n    count,\n    type: getAccessorTypeFromSize(size),\n    componentType: getComponentTypeFromArray(buffer)\n  };\n\n  return glTFAccessor;\n}\n\n// export function getGLTFAttribute(data, gltfAttributeName): GLTFAccessor {\n//   return data.attributes[data.glTFAttributeMap[gltfAttributeName]];\n// }\n\nfunction getAccessorData(attribute) {\n  let buffer = attribute;\n  let size = 1;\n  let count = 0;\n\n  if (attribute && attribute.value) {\n    buffer = attribute.value;\n    size = attribute.size || 1;\n  }\n\n  if (buffer) {\n    if (!ArrayBuffer.isView(buffer)) {\n      buffer = toTypedArray(buffer, Float32Array);\n    }\n    count = buffer.length / size;\n  }\n\n  return {buffer, size, count};\n}\n\n// Convert non-typed arrays to arrays of specified format\nfunction toTypedArray(array, ArrayType, convertTypedArrays = false) {\n  if (!array) {\n    return null;\n  }\n  if (Array.isArray(array)) {\n    return new ArrayType(array);\n  }\n  if (convertTypedArrays && !(array instanceof ArrayType)) {\n    return new ArrayType(array);\n  }\n  return array;\n}\n"],"file":"gltf-attribute-utils.js"}