"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isGLTF = isGLTF;
exports.parseGLTF = parseGLTF;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _textures = require("@loaders.gl/textures");

var _images = require("@loaders.gl/images");

var _loaderUtils = require("@loaders.gl/loader-utils");

var _assert = require("../utils/assert");

var _resolveUrl = require("../gltf-utils/resolve-url");

var _getTypedArray = require("../gltf-utils/get-typed-array");

var _gltfExtensions = require("../api/gltf-extensions");

var _normalizeGltfV = require("../api/normalize-gltf-v1");

var _postProcessGltf = require("../api/post-process-gltf");

var _parseGlb = _interopRequireWildcard(require("./parse-glb"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function isGLTF(arrayBuffer, options) {
  var byteOffset = 0;
  return (0, _parseGlb.isGLB)(arrayBuffer, byteOffset, options);
}

function parseGLTF(_x, _x2) {
  return _parseGLTF.apply(this, arguments);
}

function _parseGLTF() {
  _parseGLTF = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee(gltf, arrayBufferOrString) {
    var _options$gltf, _options$gltf2, _options$gltf3, _options$gltf4;

    var byteOffset,
        options,
        context,
        promises,
        _promise,
        promise,
        _args = arguments;

    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            byteOffset = _args.length > 2 && _args[2] !== undefined ? _args[2] : 0;
            options = _args.length > 3 ? _args[3] : undefined;
            context = _args.length > 4 ? _args[4] : undefined;
            parseGLTFContainerSync(gltf, arrayBufferOrString, byteOffset, options);
            (0, _normalizeGltfV.normalizeGLTFV1)(gltf, {
              normalize: options === null || options === void 0 ? void 0 : (_options$gltf = options.gltf) === null || _options$gltf === void 0 ? void 0 : _options$gltf.normalize
            });
            (0, _gltfExtensions.preprocessExtensions)(gltf, options, context);
            promises = [];

            if (!(options !== null && options !== void 0 && (_options$gltf2 = options.gltf) !== null && _options$gltf2 !== void 0 && _options$gltf2.loadBuffers && gltf.json.buffers)) {
              _context.next = 10;
              break;
            }

            _context.next = 10;
            return loadBuffers(gltf, options, context);

          case 10:
            if (options !== null && options !== void 0 && (_options$gltf3 = options.gltf) !== null && _options$gltf3 !== void 0 && _options$gltf3.loadImages) {
              _promise = loadImages(gltf, options, context);
              promises.push(_promise);
            }

            promise = (0, _gltfExtensions.decodeExtensions)(gltf, options, context);
            promises.push(promise);
            _context.next = 15;
            return Promise.all(promises);

          case 15:
            return _context.abrupt("return", options !== null && options !== void 0 && (_options$gltf4 = options.gltf) !== null && _options$gltf4 !== void 0 && _options$gltf4.postProcess ? (0, _postProcessGltf.postProcessGLTF)(gltf, options) : gltf);

          case 16:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _parseGLTF.apply(this, arguments);
}

function parseGLTFContainerSync(gltf, data, byteOffset, options) {
  if (options.uri) {
    gltf.baseUri = options.uri;
  }

  if (data instanceof ArrayBuffer && !(0, _parseGlb.isGLB)(data, byteOffset, options)) {
    var textDecoder = new TextDecoder();
    data = textDecoder.decode(data);
  }

  if (typeof data === 'string') {
    gltf.json = (0, _loaderUtils.parseJSON)(data);
  } else if (data instanceof ArrayBuffer) {
    var glb = {};
    byteOffset = (0, _parseGlb.default)(glb, data, byteOffset, options.glb);
    (0, _assert.assert)(glb.type === 'glTF', "Invalid GLB magic string ".concat(glb.type));
    gltf._glb = glb;
    gltf.json = glb.json;
  } else {
    (0, _assert.assert)(false, 'GLTF: must be ArrayBuffer or string');
  }

  var buffers = gltf.json.buffers || [];
  gltf.buffers = new Array(buffers.length).fill(null);

  if (gltf._glb && gltf._glb.header.hasBinChunk) {
    var binChunks = gltf._glb.binChunks;
    gltf.buffers[0] = {
      arrayBuffer: binChunks[0].arrayBuffer,
      byteOffset: binChunks[0].byteOffset,
      byteLength: binChunks[0].byteLength
    };
  }

  var images = gltf.json.images || [];
  gltf.images = new Array(images.length).fill({});
}

function loadBuffers(_x3, _x4, _x5) {
  return _loadBuffers.apply(this, arguments);
}

function _loadBuffers() {
  _loadBuffers = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee2(gltf, options, context) {
    var buffers, i, buffer, _context$fetch, _response$arrayBuffer, fetch, uri, response, arrayBuffer;

    return _regenerator.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            buffers = gltf.json.buffers || [];
            i = 0;

          case 2:
            if (!(i < buffers.length)) {
              _context2.next = 22;
              break;
            }

            buffer = buffers[i];

            if (!buffer.uri) {
              _context2.next = 18;
              break;
            }

            fetch = context.fetch;
            (0, _assert.assert)(fetch);
            uri = (0, _resolveUrl.resolveUrl)(buffer.uri, options);
            _context2.next = 10;
            return context === null || context === void 0 ? void 0 : (_context$fetch = context.fetch) === null || _context$fetch === void 0 ? void 0 : _context$fetch.call(context, uri);

          case 10:
            response = _context2.sent;
            _context2.next = 13;
            return response === null || response === void 0 ? void 0 : (_response$arrayBuffer = response.arrayBuffer) === null || _response$arrayBuffer === void 0 ? void 0 : _response$arrayBuffer.call(response);

          case 13:
            arrayBuffer = _context2.sent;
            gltf.buffers[i] = {
              arrayBuffer: arrayBuffer,
              byteOffset: 0,
              byteLength: arrayBuffer.byteLength
            };
            delete buffer.uri;
            _context2.next = 19;
            break;

          case 18:
            if (gltf.buffers[i] === null) {
              gltf.buffers[i] = {
                arrayBuffer: new ArrayBuffer(buffer.byteLength),
                byteOffset: 0,
                byteLength: buffer.byteLength
              };
            }

          case 19:
            ++i;
            _context2.next = 2;
            break;

          case 22:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _loadBuffers.apply(this, arguments);
}

function loadImages(_x6, _x7, _x8) {
  return _loadImages.apply(this, arguments);
}

function _loadImages() {
  _loadImages = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee3(gltf, options, context) {
    var imageIndices, images, promises, _iterator2, _step2, imageIndex;

    return _regenerator.default.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            imageIndices = getReferencesImageIndices(gltf);
            images = gltf.json.images || [];
            promises = [];
            _iterator2 = _createForOfIteratorHelper(imageIndices);

            try {
              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                imageIndex = _step2.value;
                promises.push(loadImage(gltf, images[imageIndex], imageIndex, options, context));
              }
            } catch (err) {
              _iterator2.e(err);
            } finally {
              _iterator2.f();
            }

            _context3.next = 7;
            return Promise.all(promises);

          case 7:
            return _context3.abrupt("return", _context3.sent);

          case 8:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _loadImages.apply(this, arguments);
}

function getReferencesImageIndices(gltf) {
  var imageIndices = new Set();
  var textures = gltf.json.textures || [];

  var _iterator = _createForOfIteratorHelper(textures),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var texture = _step.value;

      if (texture.source !== undefined) {
        imageIndices.add(texture.source);
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return Array.from(imageIndices).sort();
}

function loadImage(_x9, _x10, _x11, _x12, _x13) {
  return _loadImage.apply(this, arguments);
}

function _loadImage() {
  _loadImage = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee4(gltf, image, index, options, context) {
    var fetch, parse, arrayBuffer, uri, response, array, parsedImage;
    return _regenerator.default.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            fetch = context.fetch, parse = context.parse;

            if (!image.uri) {
              _context4.next = 9;
              break;
            }

            uri = (0, _resolveUrl.resolveUrl)(image.uri, options);
            _context4.next = 5;
            return fetch(uri);

          case 5:
            response = _context4.sent;
            _context4.next = 8;
            return response.arrayBuffer();

          case 8:
            arrayBuffer = _context4.sent;

          case 9:
            if (Number.isFinite(image.bufferView)) {
              array = (0, _getTypedArray.getTypedArrayForBufferView)(gltf.json, gltf.buffers, image.bufferView);
              arrayBuffer = (0, _loaderUtils.sliceArrayBuffer)(array.buffer, array.byteOffset, array.byteLength);
            }

            (0, _assert.assert)(arrayBuffer, 'glTF image has no data');
            _context4.next = 13;
            return parse(arrayBuffer, [_images.ImageLoader, _textures.BasisLoader], {
              mimeType: image.mimeType,
              basis: options.basis || {
                format: (0, _textures.selectSupportedBasisFormat)()
              }
            }, context);

          case 13:
            parsedImage = _context4.sent;

            if (parsedImage && parsedImage[0]) {
              parsedImage = {
                compressed: true,
                mipmaps: false,
                width: parsedImage[0].width,
                height: parsedImage[0].height,
                data: parsedImage[0]
              };
            }

            gltf.images = gltf.images || [];
            gltf.images[index] = parsedImage;

          case 17:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));
  return _loadImage.apply(this, arguments);
}
//# sourceMappingURL=parse-gltf.js.map