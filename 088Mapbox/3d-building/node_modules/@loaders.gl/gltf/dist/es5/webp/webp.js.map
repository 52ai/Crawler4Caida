{"version":3,"sources":["../../../src/webp/webp.ts"],"names":["WEBP_TEST_IMAGES","lossy","lossless","alpha","animation","WEBP_FEATURES","isWebPSupported","features","promises","map","feature","checkWebPFeature","Promise","all","statuses","every","_","Image","resolve","reject","img","onload","width","height","onerror","src"],"mappings":";;;;;;;;;;;;;AAAA,IAAMA,gBAAgB,GAAG;AACvBC,EAAAA,KAAK,EAAE,0DADgB;AAEvBC,EAAAA,QAAQ,EAAE,kDAFa;AAGvBC,EAAAA,KAAK,EACH,kHAJqB;AAKvBC,EAAAA,SAAS,EACP;AANqB,CAAzB;AAWA,IAAMC,aAA4B,GAAG,CAAC,OAAD,EAAU,UAAV,EAAsB,OAAtB,EAA+B,WAA/B,CAArC;;SAMsBC,e;;;;;+EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA+BC,YAAAA,QAA/B,2DAAyDF,aAAzD;AACCG,YAAAA,QADD,GACYD,QAAQ,CAACE,GAAT,CAAa,UAACC,OAAD;AAAA,qBAAaC,gBAAgB,CAACD,OAAD,CAA7B;AAAA,aAAb,CADZ;AAAA;AAAA,mBAEkBE,OAAO,CAACC,GAAR,CAAYL,QAAZ,CAFlB;;AAAA;AAECM,YAAAA,QAFD;AAAA,6CAGEA,QAAQ,CAACC,KAAT,CAAe,UAACC,CAAD;AAAA,qBAAOA,CAAP;AAAA,aAAf,CAHF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAaQL,gB;;;;;gFAAf,kBAAgCD,OAAhC;AAAA;AAAA;AAAA;AAAA;AAAA,kBACM,OAAOO,KAAP,KAAiB,WADvB;AAAA;AAAA;AAAA;;AAAA,8CAEW,KAFX;;AAAA;AAAA;AAAA,mBAIe,IAAIL,OAAJ,CAAY,UAACM,OAAD,EAAUC,MAAV,EAAqB;AAC5C,kBAAMC,GAAG,GAAG,IAAIH,KAAJ,EAAZ;;AACAG,cAAAA,GAAG,CAACC,MAAJ,GAAa;AAAA,uBAAMH,OAAO,CAACE,GAAG,CAACE,KAAJ,GAAY,CAAZ,IAAiBF,GAAG,CAACG,MAAJ,GAAa,CAA/B,CAAb;AAAA,eAAb;;AACAH,cAAAA,GAAG,CAACI,OAAJ,GAAc;AAAA,uBAAMN,OAAO,CAAC,KAAD,CAAb;AAAA,eAAd;;AACAE,cAAAA,GAAG,CAACK,GAAJ,oCAAoCzB,gBAAgB,CAACU,OAAD,CAApD;AACD,aALY,CAJf;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["const WEBP_TEST_IMAGES = {\n  lossy: 'UklGRiIAAABXRUJQVlA4IBYAAAAwAQCdASoBAAEADsD+JaQAA3AAAAAA',\n  lossless: 'UklGRhoAAABXRUJQVlA4TA0AAAAvAAAAEAcQERGIiP4HAA==',\n  alpha:\n    'UklGRkoAAABXRUJQVlA4WAoAAAAQAAAAAAAAAAAAQUxQSAwAAAARBxAR/Q9ERP8DAABWUDggGAAAABQBAJ0BKgEAAQAAAP4AAA3AAP7mtQAAAA==',\n  animation:\n    'UklGRlIAAABXRUJQVlA4WAoAAAASAAAAAAAAAAAAQU5JTQYAAAD/////AABBTk1GJgAAAAAAAAAAAAAAAAAAAGQAAABWUDhMDQAAAC8AAAAQBxAREYiI/gcA'\n};\n\nexport type WebPFeature = 'lossy' | 'lossless' | 'alpha' | 'animation';\n\nconst WEBP_FEATURES: WebPFeature[] = ['lossy', 'lossless', 'alpha', 'animation'];\n\n/**\n * Checks if WebP is supported\n * @param features Array, can include 'lossy', 'lossless', 'alpha' or 'animation'\n */\nexport async function isWebPSupported(features: WebPFeature[] = WEBP_FEATURES): Promise<boolean> {\n  const promises = features.map((feature) => checkWebPFeature(feature));\n  const statuses = await Promise.all(promises);\n  return statuses.every((_) => _);\n}\n\n/**\n * Checks if a specific WebP feature is supported\n * @param feature 'feature' can be one of 'lossy', 'lossless', 'alpha' or 'animation'.\n *\n * Based on Google's official recommended checks\n * @see https://developers.google.com/speed/webp/faq#how_can_i_detect_browser_support_for_webp\n */\nasync function checkWebPFeature(feature: WebPFeature): Promise<boolean> {\n  if (typeof Image === 'undefined') {\n    return false;\n  }\n  return await new Promise((resolve, reject) => {\n    const img = new Image();\n    img.onload = () => resolve(img.width > 0 && img.height > 0);\n    img.onerror = () => resolve(false);\n    img.src = `data:image/webp;base64,${WEBP_TEST_IMAGES[feature]}`;\n  });\n}\n"],"file":"webp.js"}