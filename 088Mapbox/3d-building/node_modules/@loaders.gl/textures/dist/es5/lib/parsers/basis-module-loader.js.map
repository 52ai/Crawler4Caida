{"version":3,"sources":["../../../../src/lib/parsers/basis-module-loader.ts"],"names":["VERSION","BASIS_CDN_ENCODER_WASM","BASIS_CDN_ENCODER_JS","loadBasisTranscoderPromise","loadBasisTrascoderModule","options","modules","basis","loadBasisTrascoder","BASIS","wasmBinary","Promise","all","globalThis","initializeBasisTrascoderModule","BasisModule","resolve","then","module","BasisFile","initializeBasis","loadBasisEncoderPromise","loadBasisEncoderModule","basisEncoder","loadBasisEncoder","BASIS_ENCODER","initializeBasisEncoderModule","BasisEncoderModule","KTX2File","BasisEncoder"],"mappings":"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","sourcesContent":["// __VERSION__ is injected by babel-plugin-version-inline\n// @ts-ignore TS2304: Cannot find name '__VERSION__'.\nconst VERSION = typeof __VERSION__ !== 'undefined' ? __VERSION__ : 'beta';\n\n// @ts-nocheck\nimport {loadLibrary} from '@loaders.gl/worker-utils';\n\nconst BASIS_CDN_ENCODER_WASM = `https://unpkg.com/@loaders.gl/textures@${VERSION}/dist/libs/basis_encoder.wasm`;\nconst BASIS_CDN_ENCODER_JS = `https://unpkg.com/@loaders.gl/textures@${VERSION}/dist/libs/basis_encoder.js`;\n\nlet loadBasisTranscoderPromise;\n\n/**\n * Loads wasm transcoder module\n * @param options\n * @returns {BasisFile} promise\n */\nexport async function loadBasisTrascoderModule(options) {\n  const modules = options.modules || {};\n  if (modules.basis) {\n    return modules.basis;\n  }\n\n  loadBasisTranscoderPromise = loadBasisTranscoderPromise || loadBasisTrascoder(options);\n  return await loadBasisTranscoderPromise;\n}\n\n/**\n * Loads wasm transcoder module\n * @param options\n * @returns {BasisFile} promise\n */\nasync function loadBasisTrascoder(options) {\n  let BASIS = null;\n  let wasmBinary = null;\n\n  [BASIS, wasmBinary] = await Promise.all([\n    await loadLibrary('basis_transcoder.js', 'textures', options),\n    await loadLibrary('basis_transcoder.wasm', 'textures', options)\n  ]);\n\n  // Depends on how import happened...\n  // @ts-ignore TS2339: Property does not exist on type\n  BASIS = BASIS || globalThis.BASIS;\n  return await initializeBasisTrascoderModule(BASIS, wasmBinary);\n}\n\n/**\n * Initialize wasm transcoder module\n * @param BasisModule - js part of the module\n * @param wasmBinary - wasm part of the module\n * @returns {BasisFile} promise\n */\nfunction initializeBasisTrascoderModule(BasisModule, wasmBinary) {\n  const options: {wasmBinary?} = {};\n\n  if (wasmBinary) {\n    options.wasmBinary = wasmBinary;\n  }\n\n  return new Promise((resolve) => {\n    // if you try to return BasisModule the browser crashes!\n    BasisModule(options).then((module) => {\n      const {BasisFile, initializeBasis} = module;\n      initializeBasis();\n      resolve({BasisFile});\n    });\n  });\n}\n\nlet loadBasisEncoderPromise;\n\n/**\n * Loads wasm encoder module\n * @param options\n * @returns {BasisFile, KTX2File} promise\n */\nexport async function loadBasisEncoderModule(options) {\n  const modules = options.modules || {};\n  if (modules.basisEncoder) {\n    return modules.basisEncoder;\n  }\n\n  loadBasisEncoderPromise = loadBasisEncoderPromise || loadBasisEncoder(options);\n  return await loadBasisEncoderPromise;\n}\n\n/**\n * Loads wasm encoder module\n * @param options\n * @returns {BasisFile, KTX2File} promise\n */\nasync function loadBasisEncoder(options) {\n  let BASIS_ENCODER = null;\n  let wasmBinary = null;\n\n  [BASIS_ENCODER, wasmBinary] = await Promise.all([\n    await loadLibrary(BASIS_CDN_ENCODER_JS, 'textures', options),\n    await loadLibrary(BASIS_CDN_ENCODER_WASM, 'textures', options)\n  ]);\n\n  // Depends on how import happened...\n  // @ts-ignore TS2339: Property does not exist on type\n  BASIS_ENCODER = BASIS_ENCODER || globalThis.BASIS;\n  return await initializeBasisEncoderModule(BASIS_ENCODER, wasmBinary);\n}\n\n/**\n * Initialize wasm transcoder module\n * @param BasisEncoderModule - js part of the module\n * @param wasmBinary - wasm part of the module\n * @returns {BasisFile, KTX2File} promise\n */\nfunction initializeBasisEncoderModule(BasisEncoderModule, wasmBinary) {\n  const options: {wasmBinary?} = {};\n\n  if (wasmBinary) {\n    options.wasmBinary = wasmBinary;\n  }\n\n  return new Promise((resolve) => {\n    // if you try to return BasisModule the browser crashes!\n    BasisEncoderModule(options).then((module) => {\n      const {BasisFile, KTX2File, initializeBasis, BasisEncoder} = module;\n      initializeBasis();\n      resolve({BasisFile, KTX2File, BasisEncoder});\n    });\n  });\n}\n"],"file":"basis-module-loader.js"}