{"version":3,"sources":["../../../../src/lib/parsers/parse-compressed-texture.ts"],"names":["parseCompressedTexture","data","Error"],"mappings":";;;;;;;AACA;;AACA;;AACA;;AAOO,SAASA,sBAAT,CAAgCC,IAAhC,EAAmE;AACxE,MAAI,qBAAMA,IAAN,CAAJ,EAAiB;AAGf,WAAO,wBAASA,IAAT,CAAP;AACD;;AACD,MAAI,qBAAMA,IAAN,CAAJ,EAAiB;AACf,WAAO,wBAASA,IAAT,CAAP;AACD;;AACD,MAAI,qBAAMA,IAAN,CAAJ,EAAiB;AACf,WAAO,wBAASA,IAAT,CAAP;AACD;;AACD,QAAM,IAAIC,KAAJ,CAAU,yCAAV,CAAN;AACD","sourcesContent":["import type {TextureLevel} from '@loaders.gl/schema';\nimport {isKTX, parseKTX} from './parse-ktx';\nimport {isDDS, parseDDS} from './parse-dds';\nimport {isPVR, parsePVR} from './parse-pvr';\n\n/**\n * Deduces format and parses compressed texture loaded in ArrayBuffer\n * @param data - binary data of compressed texture\n * @returns Array of the texture levels\n */\nexport function parseCompressedTexture(data: ArrayBuffer): TextureLevel[] {\n  if (isKTX(data)) {\n    // TODO: remove @ts-ignore when `parseKTX` output is normalized to loaders.gl texture format\n    // @ts-ignore\n    return parseKTX(data);\n  }\n  if (isDDS(data)) {\n    return parseDDS(data);\n  }\n  if (isPVR(data)) {\n    return parsePVR(data);\n  }\n  throw new Error('Texture container format not recognized');\n}\n"],"file":"parse-compressed-texture.js"}