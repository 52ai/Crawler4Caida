{"version":3,"sources":["../../../../src/lib/texture-api/async-deep-map.ts"],"names":["isObject","value","asyncDeepMap","tree","func","options","mapSubtree","object","Array","isArray","mapArray","mapObject","url","promises","values","key","promise","then","push","Promise","all","urlArray","map"],"mappings":";;;;;;;;;;;;;;;;AAmBA,IAAMA,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD;AAAA,SAAyBA,KAAK,IAAI,sBAAOA,KAAP,MAAiB,QAAnD;AAAA,CAAjB;;SAKsBC,Y;;;;;4EAAf,iBAA4BC,IAA5B,EAA2CC,IAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAuDC,YAAAA,OAAvD,2DAA0E,EAA1E;AAAA;AAAA,mBACQC,UAAU,CAACH,IAAD,EAAOC,IAAP,EAAaC,OAAb,CADlB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAIeC,U;;;;;0EAAf,kBAA0BC,MAA1B,EAA2CH,IAA3C,EAAuDC,OAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACDG,KAAK,CAACC,OAAN,CAAcF,MAAd,CADC;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAEUG,QAAQ,CAACH,MAAD,EAASH,IAAT,EAAeC,OAAf,CAFlB;;AAAA;AAAA;;AAAA;AAAA,iBAKDL,QAAQ,CAACO,MAAD,CALP;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAMUI,SAAS,CAACJ,MAAD,EAAmBH,IAAnB,EAAyBC,OAAzB,CANnB;;AAAA;AAAA;;AAAA;AAUCO,YAAAA,GAVD,GAUOL,MAVP;AAAA;AAAA,mBAWQH,IAAI,CAACQ,GAAD,EAAMP,OAAN,CAXZ;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAgBQM,S;;;;;yEAAf,kBACEJ,MADF,EAEEH,IAFF,EAGEC,OAHF;AAAA;;AAAA;AAAA;AAAA;AAAA;AAKQQ,YAAAA,QALR,GAKmC,EALnC;AAMQC,YAAAA,MANR,GAMsC,EANtC;;AAAA,mCAQaC,GARb;AASI,kBAAMH,GAAG,GAAGL,MAAM,CAACQ,GAAD,CAAlB;AACA,kBAAMC,OAAO,GAAGV,UAAU,CAACM,GAAD,EAAMR,IAAN,EAAYC,OAAZ,CAAV,CAA+BY,IAA/B,CAAoC,UAAChB,KAAD,EAAW;AAC7Da,gBAAAA,MAAM,CAACC,GAAD,CAAN,GAAcd,KAAd;AACD,eAFe,CAAhB;AAGAY,cAAAA,QAAQ,CAACK,IAAT,CAAcF,OAAd;AAbJ;;AAQE,iBAAWD,GAAX,IAAkBR,MAAlB,EAA0B;AAAA,oBAAfQ,GAAe;AAMzB;;AAdH;AAAA,mBAgBQI,OAAO,CAACC,GAAR,CAAYP,QAAZ,CAhBR;;AAAA;AAAA,8CAkBSC,MAlBT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAqBeJ,Q;;;;;wEAAf,kBAAwBW,QAAxB,EAA4CjB,IAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwDC,YAAAA,OAAxD,8DAAkE,EAAlE;AACQQ,YAAAA,QADR,GACmBQ,QAAQ,CAACC,GAAT,CAAa,UAACV,GAAD;AAAA,qBAASN,UAAU,CAACM,GAAD,EAAMR,IAAN,EAAYC,OAAZ,CAAnB;AAAA,aAAb,CADnB;AAAA;AAAA,mBAEec,OAAO,CAACC,GAAR,CAAYP,QAAZ,CAFf;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["// loaders.gl, MIT license\n/*\nAsynchronously maps a deep structure of values (e.g. objects and arrays of urls).\n\nE.g. a mipmapped cubemap\n{\n  [CUBE_FACE_FRONT]: [\n    \"image-front-0.jpg\",\n    \"image-front-1.jpg\",\n    \"image-front-2.jpg\",\n  ],\n  [CUBE_MAP_BACK]: [\n    ...\n  ]\n}\n*/\nexport type Options = Record<string, any>;\nexport type Func = (url: string, options: Options) => unknown;\n\nconst isObject = (value: any): boolean => value && typeof value === 'object';\n\n// Loads a deep structure of urls (objects and arrays of urls)\n// Returns an object with six key-value pairs containing the images (or image mip arrays)\n// for each cube face\nexport async function asyncDeepMap(tree: unknown, func: Func, options: Options = {}) {\n  return await mapSubtree(tree, func, options);\n}\n\nexport async function mapSubtree(object: unknown, func: Func, options: Options) {\n  if (Array.isArray(object)) {\n    return await mapArray(object, func, options);\n  }\n\n  if (isObject(object)) {\n    return await mapObject(object as object, func, options);\n  }\n\n  // TODO - ignore non-urls, non-arraybuffers?\n  const url = object as string;\n  return await func(url, options);\n}\n\n// HELPERS\n\nasync function mapObject(\n  object: Record<string, any>,\n  func: Func,\n  options: Options\n): Promise<Record<string, any>> {\n  const promises: Promise<any>[] = [];\n  const values: Record<string, any> = {};\n\n  for (const key in object) {\n    const url = object[key];\n    const promise = mapSubtree(url, func, options).then((value) => {\n      values[key] = value;\n    });\n    promises.push(promise);\n  }\n\n  await Promise.all(promises);\n\n  return values;\n}\n\nasync function mapArray(urlArray: string[], func: Func, options = {}): Promise<any[]> {\n  const promises = urlArray.map((url) => mapSubtree(url, func, options));\n  return await Promise.all(promises);\n}\n"],"file":"async-deep-map.js"}