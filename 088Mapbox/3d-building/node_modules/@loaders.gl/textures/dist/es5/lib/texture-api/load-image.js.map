{"version":3,"sources":["../../../../src/lib/texture-api/load-image.ts"],"names":["loadImageTexture","getUrl","options","getImageUrls","imageUrls","ImageLoader","parse","urlOptions","mipLevels","image","getMipmappedImageUrls","urls","url","lod","width","height","getMipLevels","push","mipLevel","length","size","Math","floor","log2","max"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;AACA;;AAEA;;AACA;;;;;;SAEsBA,gB;;;;;gFAAf,iBAAgCC,MAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAyDC,YAAAA,OAAzD,2DAAmE,EAAnE;AAAA;AAAA,mBACmBC,YAAY,CAACF,MAAD,EAASC,OAAT,CAD/B;;AAAA;AACCE,YAAAA,SADD;AAAA;AAAA,mBAEQ,wBAASA,SAAT,EAAoBC,oBAAYC,KAAhC,EAAuCJ,OAAvC,CAFR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAKeC,Y;;;;;4EAAf,kBACLF,MADK,EAELC,OAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGLK,YAAAA,UAHK,8DAGoB,EAHpB;AAKCC,YAAAA,SALD,GAKcN,OAAO,IAAIA,OAAO,CAACO,KAAnB,IAA4BP,OAAO,CAACO,KAAR,CAAcD,SAA3C,IAAyD,CALtE;;AAAA,kBAMEA,SAAS,KAAK,CANhB;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAOKE,qBAAqB,CAACT,MAAD,EAASO,SAAT,EAAoBN,OAApB,EAA6BK,UAA7B,CAP1B;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,2BAQD,8BAAYN,MAAZ,EAAoBC,OAApB,EAA6BK,UAA7B,CARC;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAWQG,qB;;;;;qFAAf,kBACET,MADF,EAEEO,SAFF,EAGEN,OAHF,EAIEK,UAJF;AAAA;;AAAA;AAAA;AAAA;AAAA;AAMQI,YAAAA,IANR,GAMyB,EANzB;;AAAA,kBASMH,SAAS,KAAK,MATpB;AAAA;AAAA;AAAA;;AAUUI,YAAAA,GAVV,GAUgB,8BAAYX,MAAZ,EAAoBC,OAApB,kCAAiCK,UAAjC;AAA6CM,cAAAA,GAAG,EAAE;AAAlD,eAVhB;AAAA;AAAA,mBAWwB,2BAAYD,GAAZ,EAAiBP,oBAAYC,KAA7B,EAAoCJ,OAApC,CAXxB;;AAAA;AAWUO,YAAAA,KAXV;AAAA,4BAa4B,0BAAaA,KAAb,CAb5B,EAaWK,KAbX,iBAaWA,KAbX,EAakBC,MAblB,iBAakBA,MAblB;AAcIP,YAAAA,SAAS,GAAGQ,YAAY,CAAC;AAACF,cAAAA,KAAK,EAALA,KAAD;AAAQC,cAAAA,MAAM,EAANA;AAAR,aAAD,CAAxB;AAGAJ,YAAAA,IAAI,CAACM,IAAL,CAAUL,GAAV;;AAjBJ;AAqBE,qCAAOJ,SAAS,GAAG,CAAnB;;AAEA,iBAASU,QAAT,GAAoBP,IAAI,CAACQ,MAAzB,EAAiCD,QAAQ,GAAGV,SAA5C,EAAuD,EAAEU,QAAzD,EAAmE;AAC3DN,cAAAA,IAD2D,GACrD,8BAAYX,MAAZ,EAAoBC,OAApB,kCAAiCK,UAAjC;AAA6CM,gBAAAA,GAAG,EAAEK;AAAlD,iBADqD;AAEjEP,cAAAA,IAAI,CAACM,IAAL,CAAUL,IAAV;AACD;;AA1BH,8CA4BSD,IA5BT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAgCO,SAASK,YAAT,CAAsBI,IAAtB,EAAqE;AAC1E,SAAO,IAAIC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,IAAL,CAAUF,IAAI,CAACG,GAAL,CAASJ,IAAI,CAACN,KAAd,EAAqBM,IAAI,CAACL,MAA1B,CAAV,CAAX,CAAX;AACD","sourcesContent":["import {assert} from '@loaders.gl/loader-utils';\nimport {ImageLoader, getImageSize} from '@loaders.gl/images';\nimport type {GetUrl, UrlOptions} from './texture-api-types';\nimport {generateUrl} from './generate-url';\nimport {deepLoad, shallowLoad} from './deep-load';\n\nexport async function loadImageTexture(getUrl: string | GetUrl, options = {}): Promise<any> {\n  const imageUrls = await getImageUrls(getUrl, options);\n  return await deepLoad(imageUrls, ImageLoader.parse, options);\n}\n\nexport async function getImageUrls(\n  getUrl: string | GetUrl,\n  options: any,\n  urlOptions: UrlOptions = {}\n): Promise<any> {\n  const mipLevels = (options && options.image && options.image.mipLevels) || 0;\n  return mipLevels !== 0\n    ? await getMipmappedImageUrls(getUrl, mipLevels, options, urlOptions)\n    : generateUrl(getUrl, options, urlOptions);\n}\n\nasync function getMipmappedImageUrls(\n  getUrl: string | GetUrl,\n  mipLevels: number | 'auto',\n  options: any,\n  urlOptions: UrlOptions\n): Promise<string[]> {\n  const urls: string[] = [];\n\n  // If no mip levels supplied, we need to load the level 0 image and calculate based on size\n  if (mipLevels === 'auto') {\n    const url = generateUrl(getUrl, options, {...urlOptions, lod: 0});\n    const image = await shallowLoad(url, ImageLoader.parse, options);\n\n    const {width, height} = getImageSize(image);\n    mipLevels = getMipLevels({width, height});\n\n    // TODO - push image and make `deepLoad` pass through non-url values, avoid loading twice?\n    urls.push(url);\n  }\n\n  // We now know how many mipLevels we need, remaining image urls can now be constructed\n  assert(mipLevels > 0);\n\n  for (let mipLevel = urls.length; mipLevel < mipLevels; ++mipLevel) {\n    const url = generateUrl(getUrl, options, {...urlOptions, lod: mipLevel});\n    urls.push(url);\n  }\n\n  return urls;\n}\n\n// Calculates number of mipmaps based on texture size (log2)\nexport function getMipLevels(size: {width: number; height: number}): number {\n  return 1 + Math.floor(Math.log2(Math.max(size.width, size.height)));\n}\n"],"file":"load-image.js"}