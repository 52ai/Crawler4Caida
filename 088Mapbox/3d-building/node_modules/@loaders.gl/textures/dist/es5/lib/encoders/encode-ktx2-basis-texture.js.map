{"version":3,"sources":["../../../../src/lib/encoders/encode-ktx2-basis-texture.ts"],"names":["encodeKTX2BasisTexture","image","options","useSRGB","qualityLevel","encodeUASTC","mipmaps","BasisEncoder","basisEncoder","basisFileData","Uint8Array","width","height","setCreateKTX2File","setKTX2UASTCSupercompression","setKTX2SRGBTransferFunc","setSliceSourceImage","data","setPerceptual","setMipSRGB","setQualityLevel","setUASTC","setMipGen","numOutputBytes","encode","actualKTX2FileData","subarray","buffer","console","error","delete"],"mappings":";;;;;;;;;;;;;AACA;;SASsBA,sB;;;;;sFAAf,iBACLC,KADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAELC,YAAAA,OAFK,2DAEU,EAFV;AAAA,+BAK8EA,OAL9E,CAKEC,OALF,EAKEA,OALF,iCAKY,KALZ,6CAK8ED,OAL9E,CAKmBE,YALnB,EAKmBA,YALnB,sCAKkC,EALlC,iDAK8EF,OAL9E,CAKsCG,WALtC,EAKsCA,WALtC,qCAKoD,KALpD,4CAK8EH,OAL9E,CAK2DI,OAL3D,EAK2DA,OAL3D,iCAKqE,KALrE;AAAA;AAAA,mBAMwB,+CAAuBJ,OAAvB,CANxB;;AAAA;AAAA;AAMEK,YAAAA,YANF,yBAMEA,YANF;AAOCC,YAAAA,YAPD,GAOgB,IAAID,YAAJ,EAPhB;AAAA;AAUGE,YAAAA,aAVH,GAUmB,IAAIC,UAAJ,CAAeT,KAAK,CAACU,KAAN,GAAcV,KAAK,CAACW,MAApB,GAA6B,CAA5C,CAVnB;AAWHJ,YAAAA,YAAY,CAACK,iBAAb,CAA+B,IAA/B;AACAL,YAAAA,YAAY,CAACM,4BAAb,CAA0C,IAA1C;AACAN,YAAAA,YAAY,CAACO,uBAAb,CAAqC,IAArC;AAEAP,YAAAA,YAAY,CAACQ,mBAAb,CAAiC,CAAjC,EAAoCf,KAAK,CAACgB,IAA1C,EAAgDhB,KAAK,CAACU,KAAtD,EAA6DV,KAAK,CAACW,MAAnE,EAA2E,KAA3E;AACAJ,YAAAA,YAAY,CAACU,aAAb,CAA2Bf,OAA3B;AACAK,YAAAA,YAAY,CAACW,UAAb,CAAwBhB,OAAxB;AACAK,YAAAA,YAAY,CAACY,eAAb,CAA6BhB,YAA7B;AACAI,YAAAA,YAAY,CAACa,QAAb,CAAsBhB,WAAtB;AACAG,YAAAA,YAAY,CAACc,SAAb,CAAuBhB,OAAvB;AAEMiB,YAAAA,cAtBH,GAsBoBf,YAAY,CAACgB,MAAb,CAAoBf,aAApB,CAtBpB;AAwBGgB,YAAAA,kBAxBH,GAwBwBhB,aAAa,CAACiB,QAAd,CAAuB,CAAvB,EAA0BH,cAA1B,EAA0CI,MAxBlE;AAAA,6CAyBIF,kBAzBJ;;AAAA;AAAA;AAAA;AA4BHG,YAAAA,OAAO,CAACC,KAAR,CAAc,6DAAd;AA5BG;;AAAA;AAAA;AA+BHrB,YAAAA,YAAY,CAACsB,MAAb;AA/BG;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import type {ImageDataType} from '@loaders.gl/images';\nimport {loadBasisEncoderModule} from '../parsers/basis-module-loader';\n\n/**\n * Encodes image to Basis Universal Supercompressed GPU Texture.\n * Code example is taken from here - https://github.com/BinomialLLC/basis_universal/blob/master/webgl/ktx2_encode_test/index.html#L279\n * BasisEncoder API - https://github.com/BinomialLLC/basis_universal/blob/master/webgl/transcoder/basis_wrappers.cpp#L1712\n * @param image\n * @param options\n */\nexport async function encodeKTX2BasisTexture(\n  image: ImageDataType,\n  options: any = {}\n): Promise<ArrayBuffer> {\n  // TODO remove default values after writer options will be normalized like it done in load module.\n  const {useSRGB = false, qualityLevel = 10, encodeUASTC = false, mipmaps = false} = options;\n  const {BasisEncoder} = await loadBasisEncoderModule(options);\n  const basisEncoder = new BasisEncoder();\n\n  try {\n    const basisFileData = new Uint8Array(image.width * image.height * 4);\n    basisEncoder.setCreateKTX2File(true);\n    basisEncoder.setKTX2UASTCSupercompression(true);\n    basisEncoder.setKTX2SRGBTransferFunc(true);\n\n    basisEncoder.setSliceSourceImage(0, image.data, image.width, image.height, false);\n    basisEncoder.setPerceptual(useSRGB);\n    basisEncoder.setMipSRGB(useSRGB);\n    basisEncoder.setQualityLevel(qualityLevel);\n    basisEncoder.setUASTC(encodeUASTC);\n    basisEncoder.setMipGen(mipmaps);\n\n    const numOutputBytes = basisEncoder.encode(basisFileData);\n\n    const actualKTX2FileData = basisFileData.subarray(0, numOutputBytes).buffer;\n    return actualKTX2FileData;\n  } catch (error) {\n    // eslint-disable-next-line no-console\n    console.error('Basis Universal Supercompressed GPU Texture encoder Error: ', error);\n    throw error;\n  } finally {\n    basisEncoder.delete();\n  }\n}\n"],"file":"encode-ktx2-basis-texture.js"}