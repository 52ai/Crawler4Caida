{"version":3,"sources":["../../../../src/lib/utils/extract-mipmap-images.ts"],"names":["extractMipmapImages","data","options","images","Array","mipMapLevels","levelWidth","width","levelHeight","height","offset","i","levelSize","getLevelSize","levelData","getLevelData","compressed","format","internalFormat","Math","max","index","isArray","Uint8Array","buffer","byteOffset","sizeFunction"],"mappings":";;;;;;;AAoBO,SAASA,mBAAT,CACLC,IADK,EAELC,OAFK,EAGW;AAChB,MAAMC,MAAM,GAAG,IAAIC,KAAJ,CAAUF,OAAO,CAACG,YAAlB,CAAf;AAEA,MAAIC,UAAU,GAAGJ,OAAO,CAACK,KAAzB;AACA,MAAIC,WAAW,GAAGN,OAAO,CAACO,MAA1B;AACA,MAAIC,MAAM,GAAG,CAAb;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,OAAO,CAACG,YAA5B,EAA0C,EAAEM,CAA5C,EAA+C;AAE7C,QAAMC,SAAS,GAAGC,YAAY,CAACX,OAAD,EAAUI,UAAV,EAAsBE,WAAtB,EAAmCP,IAAnC,EAAyCU,CAAzC,CAA9B;AAEA,QAAMG,SAAS,GAAGC,YAAY,CAACd,IAAD,EAAOU,CAAP,EAAUD,MAAV,EAAkBE,SAAlB,CAA9B;AAEAT,IAAAA,MAAM,CAACQ,CAAD,CAAN,GAAY;AACVK,MAAAA,UAAU,EAAE,IADF;AAEVC,MAAAA,MAAM,EAAEf,OAAO,CAACgB,cAFN;AAGVjB,MAAAA,IAAI,EAAEa,SAHI;AAIVP,MAAAA,KAAK,EAAED,UAJG;AAKVG,MAAAA,MAAM,EAAED,WALE;AAMVI,MAAAA,SAAS,EAATA;AANU,KAAZ;AASAN,IAAAA,UAAU,GAAGa,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYd,UAAU,IAAI,CAA1B,CAAb;AACAE,IAAAA,WAAW,GAAGW,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYZ,WAAW,IAAI,CAA3B,CAAd;AAEAE,IAAAA,MAAM,IAAIE,SAAV;AACD;;AACD,SAAOT,MAAP;AACD;;AAED,SAASY,YAAT,CACEd,IADF,EAEEoB,KAFF,EAGEX,MAHF,EAIEE,SAJF,EAKc;AACZ,MAAI,CAACR,KAAK,CAACkB,OAAN,CAAcrB,IAAd,CAAL,EAA0B;AACxB,WAAO,IAAIsB,UAAJ,CAAetB,IAAI,CAACuB,MAApB,EAA4BvB,IAAI,CAACwB,UAAL,GAAkBf,MAA9C,EAAsDE,SAAtD,CAAP;AACD;;AAED,SAAOX,IAAI,CAACoB,KAAD,CAAJ,CAAYP,SAAnB;AACD;;AAED,SAASD,YAAT,CACEX,OADF,EAEEI,UAFF,EAGEE,WAHF,EAIEP,IAJF,EAKEoB,KALF,EAMU;AACR,MAAI,CAACjB,KAAK,CAACkB,OAAN,CAAcrB,IAAd,CAAL,EAA0B;AACxB,WAAOC,OAAO,CAACwB,YAAR,CAAqBpB,UAArB,EAAiCE,WAAjC,CAAP;AACD;;AACD,SAAON,OAAO,CAACwB,YAAR,CAAqBzB,IAAI,CAACoB,KAAD,CAAzB,CAAP;AACD","sourcesContent":["import type {TextureLevel} from '@loaders.gl/schema';\n\nexport type CompressedTextureExtractOptions = {\n  mipMapLevels: number;\n  width: number;\n  height: number;\n  sizeFunction: Function;\n  internalFormat: number;\n};\n\n/**\n * Extract mipmap images from compressed texture buffer\n * @param data - binary data of compressed texture or Array of level objects\n * @param options.mipMapLevels - number of mipmap level inside image\n * @param options.width - width of 0 - level\n * @param options.height - height of 0 - level\n * @param options.sizeFunction - format-related function to calculate level size in bytes\n * @param options.internalFormat - WebGL compatible format code\n * @returns Array of the texture levels\n */\nexport function extractMipmapImages(\n  data: Uint8Array | object[],\n  options: CompressedTextureExtractOptions\n): TextureLevel[] {\n  const images = new Array(options.mipMapLevels);\n\n  let levelWidth = options.width;\n  let levelHeight = options.height;\n  let offset = 0;\n\n  for (let i = 0; i < options.mipMapLevels; ++i) {\n    // @ts-expect-error\n    const levelSize = getLevelSize(options, levelWidth, levelHeight, data, i);\n    // @ts-expect-error\n    const levelData = getLevelData(data, i, offset, levelSize);\n\n    images[i] = {\n      compressed: true,\n      format: options.internalFormat,\n      data: levelData,\n      width: levelWidth,\n      height: levelHeight,\n      levelSize\n    };\n\n    levelWidth = Math.max(1, levelWidth >> 1);\n    levelHeight = Math.max(1, levelHeight >> 1);\n\n    offset += levelSize;\n  }\n  return images;\n}\n\nfunction getLevelData(\n  data: Uint8Array,\n  index: number,\n  offset: number,\n  levelSize: number\n): Uint8Array {\n  if (!Array.isArray(data)) {\n    return new Uint8Array(data.buffer, data.byteOffset + offset, levelSize);\n  }\n\n  return data[index].levelData;\n}\n\nfunction getLevelSize(\n  options: CompressedTextureExtractOptions,\n  levelWidth: number,\n  levelHeight: number,\n  data: Uint8Array[] | object[],\n  index: number\n): number {\n  if (!Array.isArray(data)) {\n    return options.sizeFunction(levelWidth, levelHeight);\n  }\n  return options.sizeFunction(data[index]);\n}\n"],"file":"extract-mipmap-images.js"}