"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports._TypecheckBasisLoader = exports._TypecheckBasisWorkerLoader = exports.BasisLoader = exports.BasisWorkerLoader = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _version = require("./lib/utils/version");

var _parseBasis = _interopRequireDefault(require("./lib/parsers/parse-basis"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var BasisWorkerLoader = {
  name: 'Basis',
  id: 'basis',
  module: 'textures',
  version: _version.VERSION,
  worker: true,
  extensions: ['basis', 'ktx2'],
  mimeTypes: ['application/octet-stream', 'image/ktx2'],
  tests: ['sB'],
  binary: true,
  options: {
    basis: {
      format: 'auto',
      libraryPath: 'libs/',
      containerFormat: 'auto',
      module: 'transcoder'
    }
  }
};
exports.BasisWorkerLoader = BasisWorkerLoader;

var BasisLoader = _objectSpread(_objectSpread({}, BasisWorkerLoader), {}, {
  parse: _parseBasis.default
});

exports.BasisLoader = BasisLoader;
var _TypecheckBasisWorkerLoader = BasisWorkerLoader;
exports._TypecheckBasisWorkerLoader = _TypecheckBasisWorkerLoader;
var _TypecheckBasisLoader = BasisLoader;
exports._TypecheckBasisLoader = _TypecheckBasisLoader;
//# sourceMappingURL=basis-loader.js.map