{"version":3,"sources":["../../../../src/lib/texture-api/generate-url.ts"],"names":["resolvePath","generateUrl","getUrl","options","urlOptions","url","baseUrl","length"],"mappings":"AACA,SAAQA,WAAR,QAA0B,0BAA1B;AAIA,OAAO,SAASC,WAAT,CACLC,MADK,EAELC,OAFK,EAGLC,UAHK,EAIG;AAER,MAAIC,GAAG,GAAG,OAAOH,MAAP,KAAkB,UAAlB,GAA+BA,MAAM,CAAC,EAAC,GAAGC,OAAJ;AAAa,OAAGC;AAAhB,GAAD,CAArC,GAAqEF,MAA/E;AAGA,QAAMI,OAAO,GAAGH,OAAO,CAACG,OAAxB;;AACA,MAAIA,OAAJ,EAAa;AACXD,IAAAA,GAAG,GAAGC,OAAO,CAACA,OAAO,CAACC,MAAR,GAAiB,CAAlB,CAAP,KAAgC,GAAhC,aAAyCD,OAAzC,SAAmDD,GAAnD,cAA8DC,OAA9D,cAAyED,GAAzE,CAAN;AACD;;AAED,SAAOL,WAAW,CAACK,GAAD,CAAlB;AACD","sourcesContent":["// loaders.gl, MIT license\nimport {resolvePath} from '@loaders.gl/loader-utils';\nimport type {GetUrl, UrlOptions} from './texture-api-types';\n\n// Generate a url by calling getUrl with mix of options, applying options.baseUrl\nexport function generateUrl(\n  getUrl: string | GetUrl,\n  options: UrlOptions,\n  urlOptions: Record<string, any>\n): string {\n  // Get url\n  let url = typeof getUrl === 'function' ? getUrl({...options, ...urlOptions}) : getUrl;\n\n  // Apply options.baseUrl\n  const baseUrl = options.baseUrl;\n  if (baseUrl) {\n    url = baseUrl[baseUrl.length - 1] === '/' ? `${baseUrl}${url}` : `${baseUrl}/${url}`;\n  }\n\n  return resolvePath(url);\n}\n"],"file":"generate-url.js"}