{"version":3,"sources":["../../../../src/lib/parsers/parse-3d-tile-instanced-model.ts"],"names":["Vector3","Matrix3","Matrix4","Quaternion","Ellipsoid","GL","Tile3DFeatureTable","Tile3DBatchTable","parse3DTileHeaderSync","parse3DTileTablesHeaderSync","parse3DTileTablesSync","parse3DTileGLTFViewSync","extractGLTF","parseInstancedModel3DTile","tile","arrayBuffer","byteOffset","options","context","parseInstancedModel","gltfFormat","version","Error","view","DataView","getUint32","featureTableJsonByteLength","featureTable","featureTableJson","featureTableBinary","instancesLength","getGlobalProperty","featuresLength","Number","isFinite","eastNorthUp","rtcCenter","FLOAT","batchTable","batchTableJson","batchTableBinary","extractInstancedAttributes","collectionOptions","instances","Array","_batchTable","cull","url","undefined","gltf","basePath","incrementallyLoadTextures","forwardAxis","instancePosition","instanceNormalRight","instanceNormalUp","instanceNormalForward","instanceRotation","instanceQuaternion","instanceScale","instanceTranslationRotationScale","instanceTransform","scratch1","scratch2","scratchVector1","scratchVector2","i","position","hasProperty","getProperty","UNSIGNED_SHORT","quantizedVolumeOffset","quantizedVolumeScale","MAX_UNSIGNED_SHORT","j","copy","translation","normalUp","normalRight","hasCustomOrientation","octNormalUp","octNormalRight","WGS84","eastNorthUpToFixedFrame","getRotationMatrix3","identity","cross","normalize","setColumn","fromMatrix3","rotation","set","scale","multiplyByScalar","nonUniformScale","batchId","rotationMatrix","fromQuaternion","translate","multiplyRight","modelMatrix","clone"],"mappings":"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","sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\nimport {Vector3, Matrix3, Matrix4, Quaternion} from '@math.gl/core';\nimport {Ellipsoid} from '@math.gl/geospatial';\nimport {GL} from '@loaders.gl/math'; // 'math.gl/geometry';\nimport Tile3DFeatureTable from '../classes/tile-3d-feature-table';\nimport Tile3DBatchTable from '../classes/tile-3d-batch-table';\n\nimport {parse3DTileHeaderSync} from './helpers/parse-3d-tile-header';\nimport {parse3DTileTablesHeaderSync, parse3DTileTablesSync} from './helpers/parse-3d-tile-tables';\nimport {parse3DTileGLTFViewSync, extractGLTF} from './helpers/parse-3d-tile-gltf-view';\n\nexport async function parseInstancedModel3DTile(tile, arrayBuffer, byteOffset, options, context) {\n  byteOffset = parseInstancedModel(tile, arrayBuffer, byteOffset, options, context);\n  await extractGLTF(tile, tile.gltfFormat, options, context);\n  return byteOffset;\n}\n\nfunction parseInstancedModel(tile, arrayBuffer, byteOffset, options, context) {\n  byteOffset = parse3DTileHeaderSync(tile, arrayBuffer, byteOffset);\n  if (tile.version !== 1) {\n    throw new Error(`Instanced 3D Model version ${tile.version} is not supported`);\n  }\n\n  byteOffset = parse3DTileTablesHeaderSync(tile, arrayBuffer, byteOffset);\n\n  const view = new DataView(arrayBuffer);\n\n  tile.gltfFormat = view.getUint32(byteOffset, true);\n  byteOffset += 4;\n\n  // PARSE FEATURE TABLE\n  byteOffset = parse3DTileTablesSync(tile, arrayBuffer, byteOffset, options);\n\n  byteOffset = parse3DTileGLTFViewSync(tile, arrayBuffer, byteOffset, options);\n\n  // TODO - Is the feature table sometimes optional or can check be moved into table header parser?\n  if (tile.featureTableJsonByteLength === 0) {\n    throw new Error('i3dm parser: featureTableJsonByteLength is zero.');\n  }\n\n  const featureTable = new Tile3DFeatureTable(tile.featureTableJson, tile.featureTableBinary);\n\n  const instancesLength = featureTable.getGlobalProperty('INSTANCES_LENGTH');\n  featureTable.featuresLength = instancesLength;\n\n  if (!Number.isFinite(instancesLength)) {\n    throw new Error('i3dm parser: INSTANCES_LENGTH must be defined');\n  }\n\n  tile.eastNorthUp = featureTable.getGlobalProperty('EAST_NORTH_UP');\n  tile.rtcCenter = featureTable.getGlobalProperty('RTC_CENTER', GL.FLOAT, 3);\n\n  const batchTable = new Tile3DBatchTable(\n    tile.batchTableJson,\n    tile.batchTableBinary,\n    instancesLength\n  );\n\n  extractInstancedAttributes(tile, featureTable, batchTable, instancesLength);\n\n  return byteOffset;\n}\n\n// eslint-disable-next-line max-statements, complexity\nfunction extractInstancedAttributes(tile, featureTable, batchTable, instancesLength) {\n  // Create model instance collection\n  const collectionOptions = {\n    instances: new Array(instancesLength),\n    batchTable: tile._batchTable,\n    cull: false, // Already culled by 3D Tiles\n    url: undefined,\n    // requestType: RequestType.TILES3D,\n    gltf: undefined,\n    basePath: undefined,\n    incrementallyLoadTextures: false,\n    // TODO - tileset is not available at this stage, tile is parsed independently\n    // upAxis: (tileset && tileset._gltfUpAxis) || [0, 1, 0],\n    forwardAxis: [1, 0, 0]\n  };\n\n  const instances = collectionOptions.instances;\n  const instancePosition = new Vector3();\n  const instanceNormalRight = new Vector3();\n  const instanceNormalUp = new Vector3();\n  const instanceNormalForward = new Vector3();\n  const instanceRotation = new Matrix3();\n  const instanceQuaternion = new Quaternion();\n  const instanceScale = new Vector3();\n  const instanceTranslationRotationScale = {};\n  const instanceTransform = new Matrix4();\n  const scratch1 = [];\n  const scratch2 = [];\n  const scratchVector1 = new Vector3();\n  const scratchVector2 = new Vector3();\n\n  for (let i = 0; i < instancesLength; i++) {\n    let position;\n\n    // Get the instance position\n    if (featureTable.hasProperty('POSITION')) {\n      position = featureTable.getProperty('POSITION', GL.FLOAT, 3, i, instancePosition);\n    } else if (featureTable.hasProperty('POSITION_QUANTIZED')) {\n      position = featureTable.getProperty(\n        'POSITION_QUANTIZED',\n        GL.UNSIGNED_SHORT,\n        3,\n        i,\n        instancePosition\n      );\n\n      const quantizedVolumeOffset = featureTable.getGlobalProperty(\n        'QUANTIZED_VOLUME_OFFSET',\n        GL.FLOAT,\n        3,\n        scratchVector1\n      );\n      if (!quantizedVolumeOffset) {\n        throw new Error(\n          'i3dm parser: QUANTIZED_VOLUME_OFFSET must be defined for quantized positions.'\n        );\n      }\n\n      const quantizedVolumeScale = featureTable.getGlobalProperty(\n        'QUANTIZED_VOLUME_SCALE',\n        GL.FLOAT,\n        3,\n        scratchVector2\n      );\n      if (!quantizedVolumeScale) {\n        throw new Error(\n          'i3dm parser: QUANTIZED_VOLUME_SCALE must be defined for quantized positions.'\n        );\n      }\n\n      const MAX_UNSIGNED_SHORT = 65535.0;\n      for (let j = 0; j < 3; j++) {\n        position[j] =\n          (position[j] / MAX_UNSIGNED_SHORT) * quantizedVolumeScale[j] + quantizedVolumeOffset[j];\n      }\n    }\n\n    if (!position) {\n      throw new Error('i3dm: POSITION or POSITION_QUANTIZED must be defined for each instance.');\n    }\n\n    instancePosition.copy(position);\n    // @ts-expect-error\n    instanceTranslationRotationScale.translation = instancePosition;\n\n    // Get the instance rotation\n    tile.normalUp = featureTable.getProperty('NORMAL_UP', GL.FLOAT, 3, i, scratch1);\n    tile.normalRight = featureTable.getProperty('NORMAL_RIGHT', GL.FLOAT, 3, i, scratch2);\n\n    const hasCustomOrientation = false;\n    if (tile.normalUp) {\n      if (!tile.normalRight) {\n        throw new Error('i3dm: Custom orientation requires both NORMAL_UP and NORMAL_RIGHT.');\n      }\n      // Vector3.unpack(normalUp, 0, instanceNormalUp);\n      // Vector3.unpack(normalRight, 0, instanceNormalRight);\n      tile.hasCustomOrientation = true;\n    } else {\n      tile.octNormalUp = featureTable.getProperty(\n        'NORMAL_UP_OCT32P',\n        GL.UNSIGNED_SHORT,\n        2,\n        scratch1\n      );\n      tile.octNormalRight = featureTable.getProperty(\n        'NORMAL_RIGHT_OCT32P',\n        GL.UNSIGNED_SHORT,\n        2,\n        scratch2\n      );\n\n      if (tile.octNormalUp) {\n        if (!tile.octNormalRight) {\n          throw new Error(\n            'i3dm: oct-encoded orientation requires NORMAL_UP_OCT32P and NORMAL_RIGHT_OCT32P'\n          );\n        }\n\n        throw new Error('i3dm: oct-encoded orientation not implemented');\n        /*\n        AttributeCompression.octDecodeInRange(octNormalUp[0], octNormalUp[1], 65535, instanceNormalUp);\n        AttributeCompression.octDecodeInRange(octNormalRight[0], octNormalRight[1], 65535, instanceNormalRight);\n        hasCustomOrientation = true;\n        */\n      } else if (tile.eastNorthUp) {\n        Ellipsoid.WGS84.eastNorthUpToFixedFrame(instancePosition, instanceTransform);\n        instanceTransform.getRotationMatrix3(instanceRotation);\n      } else {\n        instanceRotation.identity();\n      }\n    }\n\n    if (hasCustomOrientation) {\n      instanceNormalForward.copy(instanceNormalRight).cross(instanceNormalUp).normalize();\n      instanceRotation.setColumn(0, instanceNormalRight);\n      instanceRotation.setColumn(1, instanceNormalUp);\n      instanceRotation.setColumn(2, instanceNormalForward);\n    }\n\n    instanceQuaternion.fromMatrix3(instanceRotation);\n    // @ts-expect-error\n    instanceTranslationRotationScale.rotation = instanceQuaternion;\n\n    // Get the instance scale\n    instanceScale.set(1.0, 1.0, 1.0);\n    const scale = featureTable.getProperty('SCALE', GL.FLOAT, 1, i);\n    if (Number.isFinite(scale)) {\n      instanceScale.multiplyByScalar(scale);\n    }\n    const nonUniformScale = featureTable.getProperty('SCALE_NON_UNIFORM', GL.FLOAT, 3, i, scratch1);\n    if (nonUniformScale) {\n      instanceScale.scale(nonUniformScale);\n    }\n\n    // @ts-expect-error\n    instanceTranslationRotationScale.scale = instanceScale;\n\n    // Get the batchId\n    let batchId = featureTable.getProperty('BATCH_ID', GL.UNSIGNED_SHORT, 1, i);\n    if (batchId === undefined) {\n      // If BATCH_ID semantic is undefined, batchId is just the instance number\n      batchId = i;\n    }\n\n    // @ts-expect-error\n    const rotationMatrix = new Matrix4().fromQuaternion(instanceTranslationRotationScale.rotation);\n\n    // Create the model matrix and the instance\n    instanceTransform.identity();\n    // @ts-expect-error\n    instanceTransform.translate(instanceTranslationRotationScale.translation);\n    instanceTransform.multiplyRight(rotationMatrix);\n    // @ts-expect-error\n    instanceTransform.scale(instanceTranslationRotationScale.scale);\n\n    const modelMatrix = instanceTransform.clone();\n    instances[i] = {\n      modelMatrix,\n      batchId\n    };\n  }\n\n  tile.instances = instances;\n}\n"],"file":"parse-3d-tile-instanced-model.js"}