{"version":3,"sources":["../../../../../src/lib/parsers/helpers/parse-utils.ts"],"names":["getStringFromArrayBuffer","arrayBuffer","byteOffset","byteLength","ArrayBuffer","textDecoder","TextDecoder","typedArray","Uint8Array","string","decode","getStringFromTypedArray","isView","getMagicString","dataView","DataView","String","fromCharCode","getUint8"],"mappings":";;;;;;;;;AAGA;;AAGO,SAASA,wBAAT,CAAkCC,WAAlC,EAA+CC,UAA/C,EAA2DC,UAA3D,EAAuE;AAC5E,2BAAOF,WAAW,YAAYG,WAA9B;AACA,MAAMC,WAAW,GAAG,IAAIC,WAAJ,CAAgB,MAAhB,CAApB;AACA,MAAMC,UAAU,GAAG,IAAIC,UAAJ,CAAeP,WAAf,EAA4BC,UAA5B,EAAwCC,UAAxC,CAAnB;AACA,MAAMM,MAAM,GAAGJ,WAAW,CAACK,MAAZ,CAAmBH,UAAnB,CAAf;AACA,SAAOE,MAAP;AACD;;AAGM,SAASE,uBAAT,CAAiCJ,UAAjC,EAA6C;AAClD,2BAAOH,WAAW,CAACQ,MAAZ,CAAmBL,UAAnB,CAAP;AACA,MAAMF,WAAW,GAAG,IAAIC,WAAJ,CAAgB,MAAhB,CAApB;AACA,MAAMG,MAAM,GAAGJ,WAAW,CAACK,MAAZ,CAAmBH,UAAnB,CAAf;AACA,SAAOE,MAAP;AACD;;AAEM,SAASI,cAAT,CAAwBZ,WAAxB,EAAqD;AAAA,MAAhBC,UAAgB,uEAAH,CAAG;AAC1D,MAAMY,QAAQ,GAAG,IAAIC,QAAJ,CAAad,WAAb,CAAjB;AACA,mBACAe,MAAM,CAACC,YAAP,CAAoBH,QAAQ,CAACI,QAAT,CAAkBhB,UAAU,GAAG,CAA/B,CAApB,CADA,SAEAc,MAAM,CAACC,YAAP,CAAoBH,QAAQ,CAACI,QAAT,CAAkBhB,UAAU,GAAG,CAA/B,CAApB,CAFA,SAGAc,MAAM,CAACC,YAAP,CAAoBH,QAAQ,CAACI,QAAT,CAAkBhB,UAAU,GAAG,CAA/B,CAApB,CAHA,SAIAc,MAAM,CAACC,YAAP,CAAoBH,QAAQ,CAACI,QAAT,CAAkBhB,UAAU,GAAG,CAA/B,CAApB,CAJA;AAKD","sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\nimport {assert} from '@loaders.gl/loader-utils';\n\n// Decode the JSON binary array into clear text\nexport function getStringFromArrayBuffer(arrayBuffer, byteOffset, byteLength) {\n  assert(arrayBuffer instanceof ArrayBuffer);\n  const textDecoder = new TextDecoder('utf8');\n  const typedArray = new Uint8Array(arrayBuffer, byteOffset, byteLength);\n  const string = textDecoder.decode(typedArray);\n  return string;\n}\n\n// Decode the JSON binary array into clear text\nexport function getStringFromTypedArray(typedArray) {\n  assert(ArrayBuffer.isView(typedArray));\n  const textDecoder = new TextDecoder('utf8');\n  const string = textDecoder.decode(typedArray);\n  return string;\n}\n\nexport function getMagicString(arrayBuffer, byteOffset = 0) {\n  const dataView = new DataView(arrayBuffer);\n  return `\\\n${String.fromCharCode(dataView.getUint8(byteOffset + 0))}\\\n${String.fromCharCode(dataView.getUint8(byteOffset + 1))}\\\n${String.fromCharCode(dataView.getUint8(byteOffset + 2))}\\\n${String.fromCharCode(dataView.getUint8(byteOffset + 3))}`;\n}\n"],"file":"parse-utils.js"}