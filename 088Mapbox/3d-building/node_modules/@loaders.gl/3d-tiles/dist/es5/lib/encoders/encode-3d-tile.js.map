{"version":3,"sources":["../../../../src/lib/encoders/encode-3d-tile.ts"],"names":["encode3DTile","tile","options","byteLength","encode3DTileToDataView","arrayBuffer","ArrayBuffer","dataView","DataView","byteOffset","type","TILE3D_TYPE","COMPOSITE","POINT_CLOUD","BATCHED_3D_MODEL","INSTANCED_3D_MODEL","Error"],"mappings":";;;;;;;AAGA;;AACA;;AAEA;;AACA;;AACA;;AACA;;AAEe,SAASA,YAAT,CAAsBC,IAAtB,EAA4BC,OAA5B,EAAqC;AAClD,MAAMC,UAAU,GAAGC,sBAAsB,CAACH,IAAD,EAAO,IAAP,EAAa,CAAb,EAAgBC,OAAhB,CAAzC;AACA,MAAMG,WAAW,GAAG,IAAIC,WAAJ,CAAgBH,UAAhB,CAApB;AACA,MAAMI,QAAQ,GAAG,IAAIC,QAAJ,CAAaH,WAAb,CAAjB;AACAD,EAAAA,sBAAsB,CAACH,IAAD,EAAOM,QAAP,EAAiB,CAAjB,EAAoBL,OAApB,CAAtB;AACA,SAAOG,WAAP;AACD;;AAED,SAASD,sBAAT,CAAgCH,IAAhC,EAAsCM,QAAtC,EAAgDE,UAAhD,EAA4DP,OAA5D,EAAqE;AACnE,2BAAO,OAAOD,IAAI,CAACS,IAAZ,KAAqB,QAA5B;;AAEA,UAAQT,IAAI,CAACS,IAAb;AACE,SAAKC,uBAAYC,SAAjB;AACE,aAAO,kDAAsBX,IAAtB,EAA4BM,QAA5B,EAAsCE,UAAtC,EAAkDP,OAAlD,EAA2DE,sBAA3D,CAAP;;AACF,SAAKO,uBAAYE,WAAjB;AACE,aAAO,oDAAuBZ,IAAvB,EAA6BM,QAA7B,EAAuCE,UAAvC,EAAmDP,OAAnD,CAAP;;AACF,SAAKS,uBAAYG,gBAAjB;AACE,aAAO,wDAAyBb,IAAzB,EAA+BM,QAA/B,EAAyCE,UAAzC,EAAqDP,OAArD,CAAP;;AACF,SAAKS,uBAAYI,kBAAjB;AACE,aAAO,4DAA2Bd,IAA3B,EAAiCM,QAAjC,EAA2CE,UAA3C,EAAuDP,OAAvD,CAAP;;AACF;AACE,YAAM,IAAIc,KAAJ,CAAU,6BAAV,CAAN;AAVJ;AAYD","sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\nimport {TILE3D_TYPE} from '../constants';\nimport {assert} from '@loaders.gl/loader-utils';\n\nimport {encodeComposite3DTile} from './encode-3d-tile-composite';\nimport {encodeBatchedModel3DTile} from './encode-3d-tile-batched-model';\nimport {encodeInstancedModel3DTile} from './encode-3d-tile-instanced-model';\nimport {encodePointCloud3DTile} from './encode-3d-tile-point-cloud';\n\nexport default function encode3DTile(tile, options) {\n  const byteLength = encode3DTileToDataView(tile, null, 0, options);\n  const arrayBuffer = new ArrayBuffer(byteLength);\n  const dataView = new DataView(arrayBuffer);\n  encode3DTileToDataView(tile, dataView, 0, options);\n  return arrayBuffer;\n}\n\nfunction encode3DTileToDataView(tile, dataView, byteOffset, options) {\n  assert(typeof tile.type === 'string');\n\n  switch (tile.type) {\n    case TILE3D_TYPE.COMPOSITE:\n      return encodeComposite3DTile(tile, dataView, byteOffset, options, encode3DTileToDataView);\n    case TILE3D_TYPE.POINT_CLOUD:\n      return encodePointCloud3DTile(tile, dataView, byteOffset, options);\n    case TILE3D_TYPE.BATCHED_3D_MODEL:\n      return encodeBatchedModel3DTile(tile, dataView, byteOffset, options);\n    case TILE3D_TYPE.INSTANCED_3D_MODEL:\n      return encodeInstancedModel3DTile(tile, dataView, byteOffset, options);\n    default:\n      throw new Error('3D Tiles: unknown tile type');\n  }\n}\n"],"file":"encode-3d-tile.js"}