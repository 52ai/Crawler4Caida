"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.normalizeTileData = normalizeTileData;
exports.normalizeTileHeaders = normalizeTileHeaders;
exports.normalizeImplicitTileHeaders = normalizeImplicitTileHeaders;
exports.normalizeImplicitTileData = normalizeImplicitTileData;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _tile3dSubtreeLoader = require("../../tile-3d-subtree-loader");

var _core = require("@loaders.gl/core");

var _tiles = require("@loaders.gl/tiles");

var _parse3dImplicitTiles = require("./helpers/parse-3d-implicit-tiles");

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function getTileType(tile) {
  if (!tile.contentUrl) {
    return _tiles.TILE_TYPE.EMPTY;
  }

  var contentUrl = tile.contentUrl;
  var fileExtension = contentUrl.split('.').pop();

  switch (fileExtension) {
    case 'pnts':
      return _tiles.TILE_TYPE.POINTCLOUD;

    case 'i3dm':
    case 'b3dm':
    case 'glb':
    case 'gltf':
      return _tiles.TILE_TYPE.SCENEGRAPH;

    default:
      return fileExtension;
  }
}

function getRefine(refine) {
  switch (refine) {
    case 'REPLACE':
    case 'replace':
      return _tiles.TILE_REFINEMENT.REPLACE;

    case 'ADD':
    case 'add':
      return _tiles.TILE_REFINEMENT.ADD;

    default:
      return refine;
  }
}

function normalizeTileData(tile, options) {
  if (!tile) {
    return null;
  }

  if (tile.content) {
    var contentUri = tile.content.uri || tile.content.url;
    tile.contentUrl = "".concat(options.basePath, "/").concat(contentUri);
  }

  tile.id = tile.contentUrl;
  tile.lodMetricType = _tiles.LOD_METRIC_TYPE.GEOMETRIC_ERROR;
  tile.lodMetricValue = tile.geometricError;
  tile.transformMatrix = tile.transform;
  tile.type = getTileType(tile);
  tile.refine = getRefine(tile.refine);
  return tile;
}

function normalizeTileHeaders(tileset) {
  var basePath = tileset.basePath;
  var root = normalizeTileData(tileset.root, tileset);
  var stack = [];
  stack.push(root);

  while (stack.length > 0) {
    var tile = stack.pop() || {};
    var children = tile.children || [];

    var _iterator = _createForOfIteratorHelper(children),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var childHeader = _step.value;
        normalizeTileData(childHeader, {
          basePath: basePath
        });
        stack.push(childHeader);
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  }

  return root;
}

function normalizeImplicitTileHeaders(_x) {
  return _normalizeImplicitTileHeaders.apply(this, arguments);
}

function _normalizeImplicitTileHeaders() {
  _normalizeImplicitTileHeaders = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee(tileset) {
    var basePath, implicitTilingExtension, subdivisionScheme, maximumLevel, subtreeLevels, subtreesUriTemplate, subtreeUrl, rootSubtreeUrl, rootSubtree, contentUrlTemplate, refine, rootLodMetricValue, rootBoundingVolume, options;
    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (tileset.root) {
              _context.next = 2;
              break;
            }

            return _context.abrupt("return", null);

          case 2:
            basePath = tileset.basePath;
            implicitTilingExtension = tileset.root.extensions['3DTILES_implicit_tiling'];
            subdivisionScheme = implicitTilingExtension.subdivisionScheme, maximumLevel = implicitTilingExtension.maximumLevel, subtreeLevels = implicitTilingExtension.subtreeLevels, subtreesUriTemplate = implicitTilingExtension.subtrees.uri;
            subtreeUrl = (0, _parse3dImplicitTiles.replaceContentUrlTemplate)(subtreesUriTemplate, 0, 0, 0, 0);
            rootSubtreeUrl = "".concat(basePath, "/").concat(subtreeUrl);
            _context.next = 9;
            return (0, _core.load)(rootSubtreeUrl, _tile3dSubtreeLoader.Tile3DSubtreeLoader);

          case 9:
            rootSubtree = _context.sent;
            contentUrlTemplate = "".concat(basePath, "/").concat(tileset.root.content.uri);
            refine = tileset.root.refine;
            rootLodMetricValue = tileset.root.geometricError;
            rootBoundingVolume = tileset.root.boundingVolume;
            options = {
              contentUrlTemplate: contentUrlTemplate,
              subtreesUriTemplate: subtreesUriTemplate,
              subdivisionScheme: subdivisionScheme,
              subtreeLevels: subtreeLevels,
              maximumLevel: maximumLevel,
              refine: refine,
              basePath: basePath,
              lodMetricType: _tiles.LOD_METRIC_TYPE.GEOMETRIC_ERROR,
              rootLodMetricValue: rootLodMetricValue,
              rootBoundingVolume: rootBoundingVolume,
              getTileType: getTileType,
              getRefine: getRefine
            };
            _context.next = 17;
            return normalizeImplicitTileData(tileset.root, rootSubtree, options);

          case 17:
            return _context.abrupt("return", _context.sent);

          case 18:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _normalizeImplicitTileHeaders.apply(this, arguments);
}

function normalizeImplicitTileData(_x2, _x3, _x4) {
  return _normalizeImplicitTileData.apply(this, arguments);
}

function _normalizeImplicitTileData() {
  _normalizeImplicitTileData = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee2(tile, rootSubtree, options) {
    var _yield$parseImplicitT, children, contentUrl;

    return _regenerator.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (tile) {
              _context2.next = 2;
              break;
            }

            return _context2.abrupt("return", null);

          case 2:
            tile.lodMetricType = _tiles.LOD_METRIC_TYPE.GEOMETRIC_ERROR;
            tile.lodMetricValue = tile.geometricError;
            tile.transformMatrix = tile.transform;
            _context2.next = 7;
            return (0, _parse3dImplicitTiles.parseImplicitTiles)({
              subtree: rootSubtree,
              options: options
            });

          case 7:
            _yield$parseImplicitT = _context2.sent;
            children = _yield$parseImplicitT.children;
            contentUrl = _yield$parseImplicitT.contentUrl;

            if (contentUrl) {
              tile.contentUrl = contentUrl;
              tile.content = {
                uri: contentUrl.replace("".concat(options.basePath, "/"), '')
              };
            }

            tile.refine = getRefine(tile.refine);
            tile.type = getTileType(tile);
            tile.children = children;
            tile.id = tile.contentUrl;
            return _context2.abrupt("return", tile);

          case 16:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _normalizeImplicitTileData.apply(this, arguments);
}
//# sourceMappingURL=parse-3d-tile-header.js.map