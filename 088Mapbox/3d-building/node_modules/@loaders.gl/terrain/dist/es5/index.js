"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "TerrainWorkerLoader", {
  enumerable: true,
  get: function get() {
    return _terrainLoader.TerrainLoader;
  }
});
Object.defineProperty(exports, "QuantizedMeshWorkerLoader", {
  enumerable: true,
  get: function get() {
    return _quantizedMeshLoader.QuantizedMeshLoader;
  }
});
exports._typecheckQuantizedMeshLoader = exports.QuantizedMeshLoader = exports._typecheckTerrainLoader = exports.TerrainLoader = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _parseQuantizedMesh = _interopRequireDefault(require("./lib/parse-quantized-mesh"));

var _parseTerrain = _interopRequireDefault(require("./lib/parse-terrain"));

var _terrainLoader = require("./terrain-loader");

var _quantizedMeshLoader = require("./quantized-mesh-loader");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var TerrainLoader = _objectSpread(_objectSpread({}, _terrainLoader.TerrainLoader), {}, {
  parse: _parseTerrain.default
});

exports.TerrainLoader = TerrainLoader;
var _typecheckTerrainLoader = TerrainLoader;
exports._typecheckTerrainLoader = _typecheckTerrainLoader;

var QuantizedMeshLoader = _objectSpread(_objectSpread({}, _quantizedMeshLoader.QuantizedMeshLoader), {}, {
  parseSync: _parseQuantizedMesh.default,
  parse: function () {
    var _parse = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee(arrayBuffer, options) {
      return _regenerator.default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", (0, _parseQuantizedMesh.default)(arrayBuffer, options));

            case 1:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    function parse(_x, _x2) {
      return _parse.apply(this, arguments);
    }

    return parse;
  }()
});

exports.QuantizedMeshLoader = QuantizedMeshLoader;
var _typecheckQuantizedMeshLoader = QuantizedMeshLoader;
exports._typecheckQuantizedMeshLoader = _typecheckQuantizedMeshLoader;
//# sourceMappingURL=index.js.map