{"version":3,"sources":["../../../src/lib/parse-terrain.ts"],"names":["getTerrain","imageData","width","height","elevationDecoder","tesselator","rScaler","bScaler","gScaler","offset","terrain","Float32Array","i","y","x","k","r","g","b","getMeshAttributes","vertices","bounds","gridSize","numOfVerticies","length","positions","texCoords","minX","minY","maxX","maxY","xScale","yScale","pixelIdx","POSITION","value","size","TEXCOORD_0","getMesh","terrainImage","terrainOptions","meshMaxError","data","mesh","getMartiniTileMesh","getDelatinTileMesh","triangles","attributes","boundingBox","skirtHeight","newAttributes","newTriangles","loaderData","header","vertexCount","mode","indices","Uint32Array","from","martini","Martini","tile","createTile","tin","Delatin","run","coords","loadTerrain","arrayBuffer","options","context","loadImageOptions","mimeType","image","type","parse"],"mappings":"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","sourcesContent":["import {getMeshBoundingBox} from '@loaders.gl/schema';\nimport Martini from '@mapbox/martini';\nimport Delatin from './delatin';\nimport {addSkirt} from './helpers/skirt';\n\ntype TerrainOptions = {\n  meshMaxError: number;\n  bounds: number[];\n  elevationDecoder: ElevationDecoder;\n  tesselator: 'martini' | 'delatin';\n  skirtHeight?: number;\n};\n\ntype TerrainImage = {\n  data: Uint8Array;\n  width: number;\n  height: number;\n};\n\ntype ElevationDecoder = {\n  rScaler: any;\n  bScaler: any;\n  gScaler: any;\n  offset: number;\n};\n\nfunction getTerrain(\n  imageData: Uint8Array,\n  width: number,\n  height: number,\n  elevationDecoder: ElevationDecoder,\n  tesselator: 'martini' | 'delatin'\n) {\n  const {rScaler, bScaler, gScaler, offset} = elevationDecoder;\n\n  // From Martini demo\n  // https://observablehq.com/@mourner/martin-real-time-rtin-terrain-mesh\n  const terrain = new Float32Array((width + 1) * (height + 1));\n  // decode terrain values\n  for (let i = 0, y = 0; y < height; y++) {\n    for (let x = 0; x < width; x++, i++) {\n      const k = i * 4;\n      const r = imageData[k + 0];\n      const g = imageData[k + 1];\n      const b = imageData[k + 2];\n      terrain[i + y] = r * rScaler + g * gScaler + b * bScaler + offset;\n    }\n  }\n\n  if (tesselator === 'martini') {\n    // backfill bottom border\n    for (let i = (width + 1) * width, x = 0; x < width; x++, i++) {\n      terrain[i] = terrain[i - width - 1];\n    }\n    // backfill right border\n    for (let i = height, y = 0; y < height + 1; y++, i += height + 1) {\n      terrain[i] = terrain[i - 1];\n    }\n  }\n\n  return terrain;\n}\n\nfunction getMeshAttributes(\n  vertices,\n  terrain: Uint8Array,\n  width: number,\n  height: number,\n  bounds: number[]\n) {\n  const gridSize = width + 1;\n  const numOfVerticies = vertices.length / 2;\n  // vec3. x, y in pixels, z in meters\n  const positions = new Float32Array(numOfVerticies * 3);\n  // vec2. 1 to 1 relationship with position. represents the uv on the texture image. 0,0 to 1,1.\n  const texCoords = new Float32Array(numOfVerticies * 2);\n\n  const [minX, minY, maxX, maxY] = bounds || [0, 0, width, height];\n  const xScale = (maxX - minX) / width;\n  const yScale = (maxY - minY) / height;\n\n  for (let i = 0; i < numOfVerticies; i++) {\n    const x = vertices[i * 2];\n    const y = vertices[i * 2 + 1];\n    const pixelIdx = y * gridSize + x;\n\n    positions[3 * i + 0] = x * xScale + minX;\n    positions[3 * i + 1] = -y * yScale + maxY;\n    positions[3 * i + 2] = terrain[pixelIdx];\n\n    texCoords[2 * i + 0] = x / width;\n    texCoords[2 * i + 1] = y / height;\n  }\n\n  return {\n    POSITION: {value: positions, size: 3},\n    TEXCOORD_0: {value: texCoords, size: 2}\n    // NORMAL: {}, - optional, but creates the high poly look with lighting\n  };\n}\n\n/**\n * Returns generated mesh object from image data\n *\n * @param {object} terrainImage terrain image data\n * @param {object} terrainOptions terrain options\n * @returns mesh object\n */\nfunction getMesh(terrainImage: TerrainImage, terrainOptions: TerrainOptions) {\n  if (terrainImage === null) {\n    return null;\n  }\n  const {meshMaxError, bounds, elevationDecoder} = terrainOptions;\n\n  const {data, width, height} = terrainImage;\n\n  let terrain;\n  let mesh;\n  switch (terrainOptions.tesselator) {\n    case 'martini':\n      terrain = getTerrain(data, width, height, elevationDecoder, terrainOptions.tesselator);\n      mesh = getMartiniTileMesh(meshMaxError, width, terrain);\n      break;\n    case 'delatin':\n      terrain = getTerrain(data, width, height, elevationDecoder, terrainOptions.tesselator);\n      mesh = getDelatinTileMesh(meshMaxError, width, height, terrain);\n      break;\n    // auto\n    default:\n      if (width === height && !(height & (width - 1))) {\n        terrain = getTerrain(data, width, height, elevationDecoder, 'martini');\n        mesh = getMartiniTileMesh(meshMaxError, width, terrain);\n      } else {\n        terrain = getTerrain(data, width, height, elevationDecoder, 'delatin');\n        mesh = getDelatinTileMesh(meshMaxError, width, height, terrain);\n      }\n      break;\n  }\n\n  const {vertices} = mesh;\n  let {triangles} = mesh;\n  let attributes = getMeshAttributes(vertices, terrain, width, height, bounds);\n\n  // Compute bounding box before adding skirt so that z values are not skewed\n  const boundingBox = getMeshBoundingBox(attributes);\n\n  if (terrainOptions.skirtHeight) {\n    const {attributes: newAttributes, triangles: newTriangles} = addSkirt(\n      attributes,\n      triangles,\n      terrainOptions.skirtHeight\n    );\n    attributes = newAttributes;\n    triangles = newTriangles;\n  }\n\n  return {\n    // Data return by this loader implementation\n    loaderData: {\n      header: {}\n    },\n    header: {\n      vertexCount: triangles.length,\n      boundingBox\n    },\n    mode: 4, // TRIANGLES\n    indices: {value: Uint32Array.from(triangles), size: 1},\n    attributes\n  };\n}\n\n/**\n * Get Martini generated vertices and triangles\n *\n * @param {number} meshMaxError threshold for simplifying mesh\n * @param {number} width width of the input data\n * @param {number[] | Float32Array} terrain elevation data\n * @returns {{vertices: Uint16Array, triangles: Uint32Array}} vertices and triangles data\n */\nfunction getMartiniTileMesh(meshMaxError, width, terrain) {\n  const gridSize = width + 1;\n  const martini = new Martini(gridSize);\n  const tile = martini.createTile(terrain);\n  const {vertices, triangles} = tile.getMesh(meshMaxError);\n\n  return {vertices, triangles};\n}\n\n/**\n * Get Delatin generated vertices and triangles\n *\n * @param {number} meshMaxError threshold for simplifying mesh\n * @param {number} width width of the input data array\n * @param {number} height height of the input data array\n * @param {number[] | Float32Array} terrain elevation data\n * @returns {{vertices: number[], triangles: number[]}} vertices and triangles data\n */\nfunction getDelatinTileMesh(meshMaxError, width, height, terrain) {\n  const tin = new Delatin(terrain, width + 1, height + 1);\n  tin.run(meshMaxError);\n  // @ts-expect-error\n  const {coords, triangles} = tin;\n  const vertices = coords;\n  return {vertices, triangles};\n}\n\nexport default async function loadTerrain(arrayBuffer, options, context) {\n  const loadImageOptions = {\n    ...options,\n    mimeType: 'application/x.image',\n    image: {...options.image, type: 'data'}\n  };\n  const image = await context.parse(arrayBuffer, loadImageOptions);\n  // Extend function to support additional mesh generation options (square grid or delatin)\n  return getMesh(image, options.terrain);\n}\n"],"file":"parse-terrain.js"}