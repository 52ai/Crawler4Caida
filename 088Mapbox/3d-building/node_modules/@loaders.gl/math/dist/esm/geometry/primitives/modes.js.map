{"version":3,"sources":["../../../../src/geometry/primitives/modes.ts"],"names":["GL","getPrimitiveModeType","mode","POINTS","LINES","LINE_STRIP","LINE_LOOP","TRIANGLES","TRIANGLE_STRIP","TRIANGLE_FAN","Error","isPrimitiveModeExpandable","getPrimitiveModeExpandedLength","length"],"mappings":"AAAA,SAAQA,EAAR,QAAiB,cAAjB;AAUA,OAAO,SAASC,oBAAT,CAA8BC,IAA9B,EAAqD;AAC1D,UAAQA,IAAR;AACE,SAAKF,EAAE,CAACG,MAAR;AACE,aAAOH,EAAE,CAACG,MAAV;;AACF,SAAKH,EAAE,CAACI,KAAR;AACA,SAAKJ,EAAE,CAACK,UAAR;AACA,SAAKL,EAAE,CAACM,SAAR;AACE,aAAON,EAAE,CAACI,KAAV;;AACF,SAAKJ,EAAE,CAACO,SAAR;AACA,SAAKP,EAAE,CAACQ,cAAR;AACA,SAAKR,EAAE,CAACS,YAAR;AACE,aAAOT,EAAE,CAACO,SAAV;;AACF;AACE,YAAM,IAAIG,KAAJ,CAAU,wBAAV,CAAN;AAZJ;AAcD;AAKD,OAAO,SAASC,yBAAT,CAAmCT,IAAnC,EAA0D;AAC/D,UAAQA,IAAR;AACE,SAAKF,EAAE,CAACK,UAAR;AACA,SAAKL,EAAE,CAACM,SAAR;AACA,SAAKN,EAAE,CAACQ,cAAR;AACA,SAAKR,EAAE,CAACS,YAAR;AACE,aAAO,IAAP;;AACF;AACE,aAAO,KAAP;AAPJ;AASD;AAOD,OAAO,SAASG,8BAAT,CAAwCV,IAAxC,EAAsDW,MAAtD,EAA8E;AACnF,UAAQX,IAAR;AACE,SAAKF,EAAE,CAACG,MAAR;AACE,aAAOU,MAAP;;AACF,SAAKb,EAAE,CAACI,KAAR;AACE,aAAOS,MAAP;;AACF,SAAKb,EAAE,CAACK,UAAR;AACE,aAAOQ,MAAP;;AACF,SAAKb,EAAE,CAACM,SAAR;AACE,aAAOO,MAAM,GAAG,CAAhB;;AACF,SAAKb,EAAE,CAACO,SAAR;AACE,aAAOM,MAAP;;AACF,SAAKb,EAAE,CAACQ,cAAR;AACA,SAAKR,EAAE,CAACS,YAAR;AACE,aAAO,CAACI,MAAM,GAAG,CAAV,IAAe,CAAtB;;AACF;AACE,YAAM,IAAIH,KAAJ,CAAU,gBAAV,CAAN;AAfJ;AAiBD","sourcesContent":["import {GL} from '../constants';\n\n/**\n * Different methods of working with geometries depending on glType\n /**\n\n/**\n * @param mode\n * @returns draw points | lines | triangles\n */\nexport function getPrimitiveModeType(mode?: number): number {\n  switch (mode) {\n    case GL.POINTS: // draw single points.\n      return GL.POINTS;\n    case GL.LINES: // draw lines. Each set of two vertices is treated as a separate line segment.\n    case GL.LINE_STRIP: // draw lines. Each vertex connects to the one after it.\n    case GL.LINE_LOOP: // draw a connected group of line segments from the first vertex to the last\n      return GL.LINES;\n    case GL.TRIANGLES:\n    case GL.TRIANGLE_STRIP:\n    case GL.TRIANGLE_FAN: // draw a connected group of triangles.\n      return GL.TRIANGLES;\n    default:\n      throw new Error('Unknown primitive mode');\n  }\n}\n/**\n * @param mode\n * @returns true | false\n */\nexport function isPrimitiveModeExpandable(mode: number): boolean {\n  switch (mode) {\n    case GL.LINE_STRIP: // draw lines. Each vertex connects to the one after it.\n    case GL.LINE_LOOP: // draw a connected group of line segments from the first vertex to the last\n    case GL.TRIANGLE_STRIP: // draw a connected group of triangles.\n    case GL.TRIANGLE_FAN: // draw a connected group of triangles.\n      return true;\n    default:\n      return false;\n  }\n}\n/**\n * Returns new length depends on glType\n * @param mode\n * @param length\n * @returns new length\n */\nexport function getPrimitiveModeExpandedLength(mode: number, length: number): number {\n  switch (mode) {\n    case GL.POINTS: // draw single points.\n      return length;\n    case GL.LINES: // draw lines. Each set of two vertices is treated as a separate line segment.\n      return length;\n    case GL.LINE_STRIP: // draw lines. Each vertex connects to the one after it.\n      return length;\n    case GL.LINE_LOOP: // draw a connected group of line segments from the first vertex to the last\n      return length + 1;\n    case GL.TRIANGLES: // draw triangles. Each set of three vertices creates a separate triangle.\n      return length;\n    case GL.TRIANGLE_STRIP: // draw a connected group of triangles.\n    case GL.TRIANGLE_FAN: // draw a connected group of triangles.\n      return (length - 2) * 3;\n    default:\n      throw new Error('Unknown length');\n  }\n}\n"],"file":"modes.js"}