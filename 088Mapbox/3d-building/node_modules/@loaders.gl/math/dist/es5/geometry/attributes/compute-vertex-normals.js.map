{"version":3,"sources":["../../../../src/geometry/attributes/compute-vertex-normals.ts"],"names":["computeVertexNormals","geometry","mode","GL","TRIANGLES","positions","values","normals","Float32Array","length","vectorA","Vector3","vectorB","vectorC","vectorCB","vectorAB","primitive","fromArray","i1","i2","i3","subVectors","normal","cross","normalize","primitiveIndex","x","y","z"],"mappings":";;;;;;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AAaO,SAASA,oBAAT,CAA8BC,QAA9B,EAAgE;AAErE,sBAAO,iCAAqBA,QAAQ,CAACC,IAA9B,MAAwCC,cAAGC,SAAlD,EAA6D,oBAA7D;;AAEA,sBAA4B,4CAAaH,QAAb,CAA5B;AAAA,MAAeI,SAAf,iBAAOC,MAAP;;AAEA,MAAMC,OAAO,GAAG,IAAIC,YAAJ,CAAiBH,SAAS,CAACI,MAA3B,CAAhB;AAEA,MAAMC,OAAO,GAAG,IAAIC,aAAJ,EAAhB;AACA,MAAMC,OAAO,GAAG,IAAID,aAAJ,EAAhB;AACA,MAAME,OAAO,GAAG,IAAIF,aAAJ,EAAhB;AAEA,MAAMG,QAAQ,GAAG,IAAIH,aAAJ,EAAjB;AACA,MAAMI,QAAQ,GAAG,IAAIJ,aAAJ,EAAjB;;AAbqE,6CAe7C,8CAAsBV,QAAtB,CAf6C;AAAA;;AAAA;AAerE,wDAAyD;AAAA,UAA9Ce,SAA8C;AACvDN,MAAAA,OAAO,CAACO,SAAR,CAAkBZ,SAAlB,EAA6BW,SAAS,CAACE,EAAV,GAAe,CAA5C;AACAN,MAAAA,OAAO,CAACK,SAAR,CAAkBZ,SAAlB,EAA6BW,SAAS,CAACG,EAAV,GAAe,CAAf,GAAmB,CAAhD;AACAN,MAAAA,OAAO,CAACI,SAAR,CAAkBZ,SAAlB,EAA6BW,SAAS,CAACI,EAAV,GAAe,CAAf,GAAmB,CAAhD;AAEAN,MAAAA,QAAQ,CAACO,UAAT,CAAoBR,OAApB,EAA6BD,OAA7B;AACAG,MAAAA,QAAQ,CAACM,UAAT,CAAoBX,OAApB,EAA6BE,OAA7B;AACA,UAAMU,MAAM,GAAGR,QAAQ,CAACS,KAAT,CAAeR,QAAf,CAAf;AACAO,MAAAA,MAAM,CAACE,SAAP;AAEA,UAAOC,cAAP,GAAyBT,SAAzB,CAAOS,cAAP;AAEAlB,MAAAA,OAAO,CAACkB,cAAc,GAAG,CAAjB,GAAqB,CAAtB,CAAP,GAAkCH,MAAM,CAACI,CAAzC;AACAnB,MAAAA,OAAO,CAACkB,cAAc,GAAG,CAAjB,GAAqB,CAAtB,CAAP,GAAkCH,MAAM,CAACK,CAAzC;AACApB,MAAAA,OAAO,CAACkB,cAAc,GAAG,CAAjB,GAAqB,CAAtB,CAAP,GAAkCH,MAAM,CAACM,CAAzC;AAEArB,MAAAA,OAAO,CAACkB,cAAc,GAAG,CAAjB,GAAqB,CAAtB,CAAP,GAAkCH,MAAM,CAACI,CAAzC;AACAnB,MAAAA,OAAO,CAACkB,cAAc,GAAG,CAAjB,GAAqB,CAAtB,CAAP,GAAkCH,MAAM,CAACK,CAAzC;AACApB,MAAAA,OAAO,CAACkB,cAAc,GAAG,CAAjB,GAAqB,CAAtB,CAAP,GAAkCH,MAAM,CAACM,CAAzC;AAEArB,MAAAA,OAAO,CAACkB,cAAc,GAAG,CAAjB,GAAqB,CAAtB,CAAP,GAAkCH,MAAM,CAACI,CAAzC;AACAnB,MAAAA,OAAO,CAACkB,cAAc,GAAG,CAAjB,GAAqB,CAAtB,CAAP,GAAkCH,MAAM,CAACK,CAAzC;AACApB,MAAAA,OAAO,CAACkB,cAAc,GAAG,CAAjB,GAAqB,CAAtB,CAAP,GAAkCH,MAAM,CAACM,CAAzC;AACD;AAtCoE;AAAA;AAAA;AAAA;AAAA;;AAwCrE,SAAOrB,OAAP;AACD","sourcesContent":["import type {TypedArray} from '@math.gl/core';\nimport {Vector3} from '@math.gl/core';\nimport {GL} from '../constants';\nimport {assert} from '../utils/assert';\nimport {makePrimitiveIterator} from '../iterators/primitive-iterator';\nimport {getPrimitiveModeType} from '../primitives/modes';\nimport {getPositions} from './get-attribute-from-geometry';\n\ntype Geometry = {\n  mode: any;\n  indices?: {size: number; values: TypedArray};\n  attributes?: {};\n};\n/**\n * Computes vertex normals for a geometry\n * @param param0\n * @returns\n */\n// eslint-disable-next-line max-statements\nexport function computeVertexNormals(geometry: Geometry): Float32Array {\n  // Only support GL.TRIANGLES, GL.TRIANGLE_STRIP, GL.TRIANGLE_FAN\n  assert(getPrimitiveModeType(geometry.mode) === GL.TRIANGLES, 'TRIANGLES required');\n\n  const {values: positions} = getPositions(geometry);\n\n  const normals = new Float32Array(positions.length);\n\n  const vectorA = new Vector3();\n  const vectorB = new Vector3();\n  const vectorC = new Vector3();\n\n  const vectorCB = new Vector3();\n  const vectorAB = new Vector3();\n\n  for (const primitive of makePrimitiveIterator(geometry)) {\n    vectorA.fromArray(positions, primitive.i1 * 3);\n    vectorB.fromArray(positions, primitive.i2 * 3 + 3);\n    vectorC.fromArray(positions, primitive.i3 * 3 + 6);\n\n    vectorCB.subVectors(vectorC, vectorB);\n    vectorAB.subVectors(vectorA, vectorB);\n    const normal = vectorCB.cross(vectorAB);\n    normal.normalize();\n    // @ts-ignore\n    const {primitiveIndex} = primitive;\n\n    normals[primitiveIndex * 9 + 0] = normal.x;\n    normals[primitiveIndex * 9 + 1] = normal.y;\n    normals[primitiveIndex * 9 + 2] = normal.z;\n\n    normals[primitiveIndex * 9 + 3] = normal.x;\n    normals[primitiveIndex * 9 + 4] = normal.y;\n    normals[primitiveIndex * 9 + 5] = normal.z;\n\n    normals[primitiveIndex * 9 + 6] = normal.x;\n    normals[primitiveIndex * 9 + 7] = normal.y;\n    normals[primitiveIndex * 9 + 8] = normal.z;\n  }\n\n  return normals;\n}\n"],"file":"compute-vertex-normals.js"}