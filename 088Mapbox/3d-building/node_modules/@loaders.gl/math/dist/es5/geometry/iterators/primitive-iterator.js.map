{"version":3,"sources":["../../../../src/geometry/iterators/primitive-iterator.ts"],"names":["makePrimitiveIterator","indices","attributes","mode","start","end","values","value","undefined","length","info","type","i1","i2","i3","i","GL","POINTS","LINES","LINE_STRIP","LINE_LOOP","TRIANGLES","TRIANGLE_STRIP","TRIANGLE_FAN"],"mappings":"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","sourcesContent":["import {GL} from '../constants';\nimport {getPrimitiveModeType} from '../primitives/modes';\nimport {assert} from '@loaders.gl/loader-utils';\n\n/**\n * Iteration info for making primitive iterator\n */\ntype Information = {\n  attributes: object;\n  type: number | void;\n  i1: number;\n  i2: number;\n  i3: number;\n  primitiveIndex?: object;\n};\n/**\n * Will iterate over each primitive, expanding (dereferencing) indices\n * @param indices\n * @param attributes\n * @param mode\n * @param start\n * @param end\n */\n// eslint-disable-next-line complexity\nexport function* makePrimitiveIterator(\n  indices?: any,\n  attributes: object = {},\n  mode?: number,\n  start = 0,\n  end?: number\n): Iterable<{attributes: object; type: number; i1: number; i2: number; i3: number}> {\n  // support indices being an object with a values array\n  if (indices) {\n    indices = indices.values || indices.value || indices;\n  }\n\n  // Autodeduce length from indices\n  if (end === undefined) {\n    end = indices ? indices.length : start;\n  }\n\n  // iteration info\n  const info: Information = {\n    attributes,\n    type: getPrimitiveModeType(mode),\n    i1: 0,\n    i2: 0,\n    i3: 0\n  };\n\n  let i = start;\n  // @ts-ignore\n  while (i < end) {\n    switch (mode) {\n      case GL.POINTS: // draw single points.\n        info.i1 = i;\n        i += 1;\n        break;\n      case GL.LINES: // draw lines. Each set of two vertices is treated as a separate line segment.\n        info.i1 = i;\n        info.i2 = i + 1;\n        i += 2;\n        break;\n      case GL.LINE_STRIP: // draw lines. Each vertex connects to the one after it.\n        info.i1 = i;\n        info.i2 = i + 1;\n        i += 1;\n        break;\n      case GL.LINE_LOOP: // draw a connected group of line segments from the first vertex to the last\n        info.i1 = i;\n        info.i2 = i + 1;\n        i += 1;\n        break;\n      case GL.TRIANGLES: // draw triangles. Each set of three vertices creates a separate triangle.\n        info.i1 = i;\n        info.i2 = i + 1;\n        info.i3 = i + 2;\n        i += 3;\n        break;\n      case GL.TRIANGLE_STRIP: // draw a connected group of triangles.\n        info.i1 = i;\n        info.i2 = i + 1;\n        i += 1;\n        break;\n      case GL.TRIANGLE_FAN: // draw a connected group of triangles.\n        info.i1 = 1;\n        info.i2 = i;\n        info.i3 = i + 1;\n        i += 1;\n        break;\n\n      default:\n        assert(false);\n    }\n\n    // if indices are present, lookup actual vertices in indices\n    if (indices) {\n      if ('i1' in info) {\n        info.i1 = indices[info.i1];\n        info.i2 = indices[info.i2];\n        info.i3 = indices[info.i3];\n      }\n    }\n    // @ts-ignore\n    yield info;\n  }\n}\n"],"file":"primitive-iterator.js"}