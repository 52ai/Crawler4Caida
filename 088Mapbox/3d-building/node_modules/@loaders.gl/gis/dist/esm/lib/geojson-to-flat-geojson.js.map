{"version":3,"sources":["../../../src/lib/geojson-to-flat-geojson.ts"],"names":["getPolygonSignedArea","geojsonToFlatGeojson","features","options","coordLength","fixRingWinding","map","feature","flattenFeature","flattenPoint","coordinates","data","indices","push","length","i","flattenLineString","c","flattenPolygon","areas","count","ringAreas","polygons","lineString","lineString2d","p","slice","area","flat","ccw","reverse","geometry","type","Error"],"mappings":"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","sourcesContent":["import {getPolygonSignedArea} from '@math.gl/polygon';\n\nimport {Feature, Position, FlatFeature} from '@loaders.gl/schema';\n\n/**\n * Options for `geojsonToFlatGeojson`\n */\nexport type GeojsonToFlatGeojsonOptions = {\n  coordLength: number;\n  fixRingWinding: boolean;\n};\n\n// Coordinates defining a Point\ntype PointCoordinates = Position;\n// Coordinates defining a LineString\ntype LineStringCoordinates = Position[];\n// Coordinates defining a Polygon\ntype PolygonCoordinates = Position[][];\n\n/**\n * Convert GeoJSON features to Flat GeoJSON features\n *\n * @param features\n * @param options\n * @returns an Array of Flat GeoJSON features\n */\nexport function geojsonToFlatGeojson(\n  features: Feature[],\n  options: GeojsonToFlatGeojsonOptions = {coordLength: 2, fixRingWinding: true}\n): FlatFeature[] {\n  return features.map((feature) => flattenFeature(feature, options));\n}\n\n/**\n * Helper function to copy Point values from `coordinates` into `data` & `indices`\n *\n * @param coordinates\n * @param data\n * @param indices\n * @param options\n */\nfunction flattenPoint(\n  coordinates: PointCoordinates,\n  data: number[],\n  indices: number[],\n  options: GeojsonToFlatGeojsonOptions\n) {\n  indices.push(data.length);\n  data.push(...coordinates);\n\n  // Pad up to coordLength\n  for (let i = coordinates.length; i < options.coordLength; i++) {\n    data.push(0);\n  }\n}\n\n/**\n * Helper function to copy LineString values from `coordinates` into `data` & `indices`\n *\n * @param coordinates\n * @param data\n * @param indices\n * @param options\n */\nfunction flattenLineString(\n  coordinates: LineStringCoordinates,\n  data: number[],\n  indices: number[],\n  options: GeojsonToFlatGeojsonOptions\n) {\n  indices.push(data.length);\n  for (const c of coordinates) {\n    data.push(...c);\n\n    // Pad up to coordLength\n    for (let i = c.length; i < options.coordLength; i++) {\n      data.push(0);\n    }\n  }\n}\n\n/**\n * Helper function to copy Polygon values from `coordinates` into `data` & `indices` & `areas`\n *\n * @param coordinates\n * @param data\n * @param indices\n * @param areas\n * @param options\n */\nfunction flattenPolygon(\n  coordinates: PolygonCoordinates,\n  data: number[],\n  indices: number[][],\n  areas: number[][],\n  options: GeojsonToFlatGeojsonOptions\n) {\n  let count = 0;\n  const ringAreas: number[] = [];\n  const polygons: number[] = [];\n  for (const lineString of coordinates) {\n    const lineString2d = lineString.map((p) => p.slice(0, 2));\n    let area = getPolygonSignedArea(lineString2d.flat());\n    const ccw = area < 0;\n\n    // Exterior ring must be CCW and interior rings CW\n    if (options.fixRingWinding && ((count === 0 && !ccw) || (count > 0 && ccw))) {\n      lineString.reverse();\n      area = -area;\n    }\n    ringAreas.push(area);\n    flattenLineString(lineString, data, polygons, options);\n    count++;\n  }\n\n  if (count > 0) {\n    areas.push(ringAreas);\n    indices.push(polygons);\n  }\n}\n\n/**\n * Flatten single GeoJSON feature into Flat GeoJSON\n *\n * @param feature\n * @param options\n * @returns A Flat GeoJSON feature\n */\nfunction flattenFeature(feature: Feature, options: GeojsonToFlatGeojsonOptions): FlatFeature {\n  const {geometry} = feature;\n  if (geometry.type === 'GeometryCollection') {\n    throw new Error('GeometryCollection type not supported');\n  }\n  const data = [];\n  const indices = [];\n  let areas;\n  let type;\n\n  switch (geometry.type) {\n    case 'Point':\n      type = 'Point';\n      flattenPoint(geometry.coordinates, data, indices, options);\n      break;\n    case 'MultiPoint':\n      type = 'Point';\n      geometry.coordinates.map((c) => flattenPoint(c, data, indices, options));\n      break;\n    case 'LineString':\n      type = 'LineString';\n      flattenLineString(geometry.coordinates, data, indices, options);\n      break;\n    case 'MultiLineString':\n      type = 'LineString';\n      geometry.coordinates.map((c) => flattenLineString(c, data, indices, options));\n      break;\n    case 'Polygon':\n      type = 'Polygon';\n      areas = [];\n      flattenPolygon(geometry.coordinates, data, indices, areas, options);\n      break;\n    case 'MultiPolygon':\n      type = 'Polygon';\n      areas = [];\n      geometry.coordinates.map((c) => flattenPolygon(c, data, indices, areas, options));\n      break;\n    default:\n      throw new Error(`Unknown type: ${type}`);\n  }\n\n  return {...feature, geometry: {type, indices, data, areas}};\n}\n"],"file":"geojson-to-flat-geojson.js"}