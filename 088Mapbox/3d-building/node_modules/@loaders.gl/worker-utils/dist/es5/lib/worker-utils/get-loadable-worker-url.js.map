{"version":3,"sources":["../../../../src/lib/worker-utils/get-loadable-worker-url.ts"],"names":["workerURLCache","Map","getLoadableWorkerURL","props","source","url","workerURL","get","getLoadableWorkerURLFromURL","set","getLoadableWorkerURLFromSource","startsWith","workerSource","buildScriptSource","blob","Blob","type","URL","createObjectURL","workerUrl"],"mappings":";;;;;;;AAAA;;AAEA,IAAMA,cAAc,GAAG,IAAIC,GAAJ,EAAvB;;AAWO,SAASC,oBAAT,CAA8BC,KAA9B,EAAsE;AAC3E,sBAAQA,KAAK,CAACC,MAAN,IAAgB,CAACD,KAAK,CAACE,GAAxB,IAAiC,CAACF,KAAK,CAACC,MAAP,IAAiBD,KAAK,CAACE,GAA/D;AAEA,MAAIC,SAAS,GAAGN,cAAc,CAACO,GAAf,CAAmBJ,KAAK,CAACC,MAAN,IAAgBD,KAAK,CAACE,GAAzC,CAAhB;;AACA,MAAI,CAACC,SAAL,EAAgB;AAEd,QAAIH,KAAK,CAACE,GAAV,EAAe;AACbC,MAAAA,SAAS,GAAGE,2BAA2B,CAACL,KAAK,CAACE,GAAP,CAAvC;AACAL,MAAAA,cAAc,CAACS,GAAf,CAAmBN,KAAK,CAACE,GAAzB,EAA8BC,SAA9B;AACD;;AAED,QAAIH,KAAK,CAACC,MAAV,EAAkB;AAChBE,MAAAA,SAAS,GAAGI,8BAA8B,CAACP,KAAK,CAACC,MAAP,CAA1C;AACAJ,MAAAA,cAAc,CAACS,GAAf,CAAmBN,KAAK,CAACC,MAAzB,EAAiCE,SAAjC;AACD;AACF;;AAED,sBAAOA,SAAP;AACA,SAAOA,SAAP;AACD;;AAOD,SAASE,2BAAT,CAAqCH,GAArC,EAA0D;AAExD,MAAI,CAACA,GAAG,CAACM,UAAJ,CAAe,MAAf,CAAL,EAA6B;AAC3B,WAAON,GAAP;AACD;;AAGD,MAAMO,YAAY,GAAGC,iBAAiB,CAACR,GAAD,CAAtC;AACA,SAAOK,8BAA8B,CAACE,YAAD,CAArC;AACD;;AAOD,SAASF,8BAAT,CAAwCE,YAAxC,EAAsE;AACpE,MAAME,IAAI,GAAG,IAAIC,IAAJ,CAAS,CAACH,YAAD,CAAT,EAAyB;AAACI,IAAAA,IAAI,EAAE;AAAP,GAAzB,CAAb;AACA,SAAOC,GAAG,CAACC,eAAJ,CAAoBJ,IAApB,CAAP;AACD;;AAUD,SAASD,iBAAT,CAA2BM,SAA3B,EAAsD;AACpD,2CAEiBA,SAFjB;AAOD","sourcesContent":["import {assert} from '../env-utils/assert';\n\nconst workerURLCache = new Map();\n\n/**\n * Creates a loadable URL from worker source or URL\n * that can be used to create `Worker` instances.\n * Due to CORS issues it may be necessary to wrap a URL in a small importScripts\n * @param props\n * @param props.source Worker source\n * @param props.url Worker URL\n * @returns loadable url\n */\nexport function getLoadableWorkerURL(props: {source?: string; url?: string}) {\n  assert((props.source && !props.url) || (!props.source && props.url)); // Either source or url must be defined\n\n  let workerURL = workerURLCache.get(props.source || props.url);\n  if (!workerURL) {\n    // Differentiate worker urls from worker source code\n    if (props.url) {\n      workerURL = getLoadableWorkerURLFromURL(props.url);\n      workerURLCache.set(props.url, workerURL);\n    }\n\n    if (props.source) {\n      workerURL = getLoadableWorkerURLFromSource(props.source);\n      workerURLCache.set(props.source, workerURL);\n    }\n  }\n\n  assert(workerURL);\n  return workerURL;\n}\n\n/**\n * Build a loadable worker URL from worker URL\n * @param url\n * @returns loadable URL\n */\nfunction getLoadableWorkerURLFromURL(url: string): string {\n  // A local script url, we can use it to initialize a Worker directly\n  if (!url.startsWith('http')) {\n    return url;\n  }\n\n  // A remote script, we need to use `importScripts` to load from different origin\n  const workerSource = buildScriptSource(url);\n  return getLoadableWorkerURLFromSource(workerSource);\n}\n\n/**\n * Build a loadable worker URL from worker source\n * @param workerSource\n * @returns loadable url\n */\nfunction getLoadableWorkerURLFromSource(workerSource: string): string {\n  const blob = new Blob([workerSource], {type: 'application/javascript'});\n  return URL.createObjectURL(blob);\n}\n\n/**\n * Per spec, worker cannot be initialized with a script from a different origin\n * However a local worker script can still import scripts from other origins,\n * so we simply build a wrapper script.\n *\n * @param workerUrl\n * @returns source\n */\nfunction buildScriptSource(workerUrl: string): string {\n  return `\\\ntry {\n  importScripts('${workerUrl}');\n} catch (error) {\n  console.error(error);\n  throw error;\n}`;\n}\n"],"file":"get-loadable-worker-url.js"}