{"version":3,"sources":["../../../../src/lib/worker-farm/worker-farm.ts"],"names":["DEFAULT_PROPS","maxConcurrency","maxMobileConcurrency","reuseWorkers","onDebug","WorkerFarm","props","Map","setProps","workerPools","values","workerPool","destroy","_getWorkerPoolProps","options","name","source","url","get","WorkerPool","set","WorkerThread","isSupported","_workerFarm"],"mappings":";;;;;;;;;;;;;;;AAAA;;AACA;;;;;;;;;;;;AAgBA,IAAMA,aAAwC,GAAG;AAC/CC,EAAAA,cAAc,EAAE,CAD+B;AAE/CC,EAAAA,oBAAoB,EAAE,CAFyB;AAG/CC,EAAAA,YAAY,EAAE,IAHiC;AAI/CC,EAAAA,OAAO,EAAE,mBAAM,CAAE;AAJ8B,CAAjD;;IAUqBC,U;AAmBnB,sBAAoBC,KAApB,EAA4C;AAAA;AAAA;AAAA,uDAjBtB,IAAIC,GAAJ,EAiBsB;AAC1C,SAAKD,KAAL,qBAAiBN,aAAjB;AACA,SAAKQ,QAAL,CAAcF,KAAd;AAEA,SAAKG,WAAL,GAAmB,IAAIF,GAAJ,EAAnB;AACD;;;;WAMD,mBAAgB;AAAA,iDACW,KAAKE,WAAL,CAAiBC,MAAjB,EADX;AAAA;;AAAA;AACd,4DAAoD;AAAA,cAAzCC,UAAyC;AAClDA,UAAAA,UAAU,CAACC,OAAX;AACD;AAHa;AAAA;AAAA;AAAA;AAAA;;AAId,WAAKH,WAAL,GAAmB,IAAIF,GAAJ,EAAnB;AACD;;;WAMD,kBAASD,KAAT,EAAuC;AACrC,WAAKA,KAAL,mCAAiB,KAAKA,KAAtB,GAAgCA,KAAhC;;AADqC,kDAGZ,KAAKG,WAAL,CAAiBC,MAAjB,EAHY;AAAA;;AAAA;AAGrC,+DAAoD;AAAA,cAAzCC,UAAyC;AAClDA,UAAAA,UAAU,CAACH,QAAX,CAAoB,KAAKK,mBAAL,EAApB;AACD;AALoC;AAAA;AAAA;AAAA;AAAA;AAMtC;;;WAWD,uBAAcC,OAAd,EAAkF;AAChF,UAAOC,IAAP,GAA4BD,OAA5B,CAAOC,IAAP;AAAA,UAAaC,MAAb,GAA4BF,OAA5B,CAAaE,MAAb;AAAA,UAAqBC,GAArB,GAA4BH,OAA5B,CAAqBG,GAArB;AACA,UAAIN,UAAU,GAAG,KAAKF,WAAL,CAAiBS,GAAjB,CAAqBH,IAArB,CAAjB;;AACA,UAAI,CAACJ,UAAL,EAAiB;AACfA,QAAAA,UAAU,GAAG,IAAIQ,mBAAJ,CAAe;AAC1BJ,UAAAA,IAAI,EAAJA,IAD0B;AAE1BC,UAAAA,MAAM,EAANA,MAF0B;AAG1BC,UAAAA,GAAG,EAAHA;AAH0B,SAAf,CAAb;AAKAN,QAAAA,UAAU,CAACH,QAAX,CAAoB,KAAKK,mBAAL,EAApB;AACA,aAAKJ,WAAL,CAAiBW,GAAjB,CAAqBL,IAArB,EAA2BJ,UAA3B;AACD;;AACD,aAAOA,UAAP;AACD;;;WAED,+BAAsB;AACpB,aAAO;AACLV,QAAAA,cAAc,EAAE,KAAKK,KAAL,CAAWL,cADtB;AAELC,QAAAA,oBAAoB,EAAE,KAAKI,KAAL,CAAWJ,oBAF5B;AAGLC,QAAAA,YAAY,EAAE,KAAKG,KAAL,CAAWH,YAHpB;AAILC,QAAAA,OAAO,EAAE,KAAKE,KAAL,CAAWF;AAJf,OAAP;AAMD;;;WAzED,uBAA8B;AAC5B,aAAOiB,sBAAaC,WAAb,EAAP;AACD;;;WAGD,yBAA8D;AAAA,UAAzChB,KAAyC,uEAAhB,EAAgB;AAC5DD,MAAAA,UAAU,CAACkB,WAAX,GAAyBlB,UAAU,CAACkB,WAAX,IAA0B,IAAIlB,UAAJ,CAAe,EAAf,CAAnD;;AACAA,MAAAA,UAAU,CAACkB,WAAX,CAAuBf,QAAvB,CAAgCF,KAAhC;;AACA,aAAOD,UAAU,CAACkB,WAAlB;AACD;;;;;;8BAhBkBlB,U","sourcesContent":["import WorkerPool from './worker-pool';\nimport WorkerThread from './worker-thread';\n\n/**\n * @param maxConcurrency - max count of workers\n * @param maxMobileConcurrency - max count of workers on mobile\n * @param maxConcurrency - max count of workers\n * @param reuseWorkers - if false, destroys workers when task is completed\n * @param onDebug - callback intended to allow application to log worker pool activity\n */\nexport type WorkerFarmProps = {\n  maxConcurrency?: number;\n  maxMobileConcurrency?: number;\n  reuseWorkers?: boolean;\n  onDebug?: () => void;\n};\n\nconst DEFAULT_PROPS: Required<WorkerFarmProps> = {\n  maxConcurrency: 3,\n  maxMobileConcurrency: 1,\n  reuseWorkers: true,\n  onDebug: () => {}\n};\n\n/**\n * Process multiple jobs with a \"farm\" of different workers in worker pools.\n */\nexport default class WorkerFarm {\n  private props: WorkerFarmProps;\n  private workerPools = new Map<string, WorkerPool>();\n  // singleton\n  private static _workerFarm?: WorkerFarm;\n\n  /** Checks if workers are supported on this platform */\n  static isSupported(): boolean {\n    return WorkerThread.isSupported();\n  }\n\n  /** Get the singleton instance of the global worker farm */\n  static getWorkerFarm(props: WorkerFarmProps = {}): WorkerFarm {\n    WorkerFarm._workerFarm = WorkerFarm._workerFarm || new WorkerFarm({});\n    WorkerFarm._workerFarm.setProps(props);\n    return WorkerFarm._workerFarm;\n  }\n\n  /** get global instance with WorkerFarm.getWorkerFarm() */\n  private constructor(props: WorkerFarmProps) {\n    this.props = {...DEFAULT_PROPS};\n    this.setProps(props);\n    /** @type Map<string, WorkerPool>} */\n    this.workerPools = new Map();\n  }\n\n  /**\n   * Terminate all workers in the farm\n   * @note Can free up significant memory\n   */\n  destroy(): void {\n    for (const workerPool of this.workerPools.values()) {\n      workerPool.destroy();\n    }\n    this.workerPools = new Map<string, WorkerPool>();\n  }\n\n  /**\n   * Set props used when initializing worker pools\n   * @param props\n   */\n  setProps(props: WorkerFarmProps): void {\n    this.props = {...this.props, ...props};\n    // Update worker pool props\n    for (const workerPool of this.workerPools.values()) {\n      workerPool.setProps(this._getWorkerPoolProps());\n    }\n  }\n\n  /**\n   * Returns a worker pool for the specified worker\n   * @param options - only used first time for a specific worker name\n   * @param options.name - the name of the worker - used to identify worker pool\n   * @param options.url -\n   * @param options.source -\n   * @example\n   *   const job = WorkerFarm.getWorkerFarm().getWorkerPool({name, url}).startJob(...);\n   */\n  getWorkerPool(options: {name: string; source?: string; url?: string}): WorkerPool {\n    const {name, source, url} = options;\n    let workerPool = this.workerPools.get(name);\n    if (!workerPool) {\n      workerPool = new WorkerPool({\n        name,\n        source,\n        url\n      });\n      workerPool.setProps(this._getWorkerPoolProps());\n      this.workerPools.set(name, workerPool);\n    }\n    return workerPool;\n  }\n\n  _getWorkerPoolProps() {\n    return {\n      maxConcurrency: this.props.maxConcurrency,\n      maxMobileConcurrency: this.props.maxMobileConcurrency,\n      reuseWorkers: this.props.reuseWorkers,\n      onDebug: this.props.onDebug\n    };\n  }\n}\n"],"file":"worker-farm.js"}