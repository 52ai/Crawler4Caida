{"version":3,"sources":["../../../../src/lib/node/require-utils.node.ts"],"names":["requireFromFile","filename","startsWith","fetch","response","text","code","requireFromString","process","cwd","require","options","Error","paths","Module","_nodeModulePaths","path","dirname","parent","module","newModule","concat","prependPaths","appendPaths","_compile","children","splice","indexOf","exports"],"mappings":";;;;;;;;;;;;;;;;AAMA;;AACA;;SAMsBA,e;;;;;+EAAf,iBAA+BC,QAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACDA,QAAQ,CAACC,UAAT,CAAoB,MAApB,CADC;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAEoBC,KAAK,CAACF,QAAD,CAFzB;;AAAA;AAEGG,YAAAA,QAFH;AAAA;AAAA,mBAGgBA,QAAQ,CAACC,IAAT,EAHhB;;AAAA;AAGGC,YAAAA,IAHH;AAAA,6CAIIC,iBAAiB,CAACD,IAAD,CAJrB;;AAAA;AAOL,gBAAI,CAACL,QAAQ,CAACC,UAAT,CAAoB,GAApB,CAAL,EAA+B;AAC7BD,cAAAA,QAAQ,aAAMO,OAAO,CAACC,GAAR,EAAN,cAAuBR,QAAvB,CAAR;AACD;;AATI,6CAUES,OAAO,CAACT,QAAD,CAVT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAmBA,SAASM,iBAAT,CACLD,IADK,EAOA;AAAA;;AAAA,MALLL,QAKK,uEALM,EAKN;AAAA,MAJLU,OAIK;;AACL,MAAI,sBAAOV,QAAP,MAAoB,QAAxB,EAAkC;AAChCU,IAAAA,OAAO,GAAGV,QAAV;AACAA,IAAAA,QAAQ,GAAG,EAAX;AACD;;AAED,MAAI,OAAOK,IAAP,KAAgB,QAApB,EAA8B;AAC5B,UAAM,IAAIM,KAAJ,4DAA+CN,IAA/C,GAAN;AACD;;AAGD,MAAMO,KAAK,GAAGC,gBAAOC,gBAAP,CAAwBC,cAAKC,OAAL,CAAahB,QAAb,CAAxB,CAAd;;AAEA,MAAMiB,MAAM,GAAGC,MAAM,CAACD,MAAtB;AAEA,MAAME,SAAS,GAAG,IAAIN,eAAJ,CAAWb,QAAX,EAAqBiB,MAArB,CAAlB;AACAE,EAAAA,SAAS,CAACnB,QAAV,GAAqBA,QAArB;AACAmB,EAAAA,SAAS,CAACP,KAAV,GAAmB,EAAD,CACfQ,MADe,CACR,aAAAV,OAAO,UAAP,4CAASW,YAAT,KAAyB,EADjB,EAEfD,MAFe,CAERR,KAFQ,EAGfQ,MAHe,CAGR,cAAAV,OAAO,UAAP,8CAASY,WAAT,KAAwB,EAHhB,CAAlB;;AAKAH,EAAAA,SAAS,CAACI,QAAV,CAAmBlB,IAAnB,EAAyBL,QAAzB;;AAEA,MAAIiB,MAAM,IAAIA,MAAM,CAACO,QAArB,EAA+B;AAC7BP,IAAAA,MAAM,CAACO,QAAP,CAAgBC,MAAhB,CAAuBR,MAAM,CAACO,QAAP,CAAgBE,OAAhB,CAAwBP,SAAxB,CAAvB,EAA2D,CAA3D;AACD;;AAED,SAAOA,SAAS,CAACQ,OAAjB;AACD","sourcesContent":["// Fork of https://github.com/floatdrop/require-from-string/blob/master/index.js\n// Copyright (c) Vsevolod Strukchinsky <floatdrop@gmail.com> (github.com/floatdrop)\n// MIT license\n\n// this file is not visible to webpack (it is excluded in the package.json \"browser\" field).\n\nimport Module from 'module';\nimport path from 'path';\n\n// Node.js Dynamically require from file\n// Relative names are resolved relative to cwd\n// This indirect function is provided because webpack will try to bundle `module.require`.\n// this file is not visible to webpack (it is excluded in the package.json \"browser\" field).\nexport async function requireFromFile(filename: string): Promise<any> {\n  if (filename.startsWith('http')) {\n    const response = await fetch(filename);\n    const code = await response.text();\n    return requireFromString(code);\n  }\n\n  if (!filename.startsWith('/')) {\n    filename = `${process.cwd()}/${filename}`;\n  }\n  return require(filename);\n}\n\n// Dynamically require from string\n// - `code` - Required - Type: string - Module code.\n// - `filename` - Type: string - Default: '' - Optional filename.\n// - `options.appendPaths` Type: Array List of paths, that will be appended to module paths.\n// Useful, when you want to be able require modules from these paths.\n// - `options.prependPaths` Type: Array Same as appendPaths, but paths will be prepended.\nexport function requireFromString(\n  code: string,\n  filename = '',\n  options?: {\n    prependPaths?: string[];\n    appendPaths?: string[];\n  }\n): any {\n  if (typeof filename === 'object') {\n    options = filename;\n    filename = '';\n  }\n\n  if (typeof code !== 'string') {\n    throw new Error(`code must be a string, not ${typeof code}`);\n  }\n\n  // @ts-ignore\n  const paths = Module._nodeModulePaths(path.dirname(filename));\n\n  const parent = module.parent;\n  // @ts-ignore\n  const newModule = new Module(filename, parent);\n  newModule.filename = filename;\n  newModule.paths = ([] as string[])\n    .concat(options?.prependPaths || [])\n    .concat(paths)\n    .concat(options?.appendPaths || []);\n  // @ts-ignore\n  newModule._compile(code, filename);\n\n  if (parent && parent.children) {\n    parent.children.splice(parent.children.indexOf(newModule), 1);\n  }\n\n  return newModule.exports;\n}\n"],"file":"require-utils.node.js"}