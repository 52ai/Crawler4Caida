{"version":3,"sources":["../../../../src/lib/worker-farm/worker-body.ts"],"names":["getParentPort","parentPort","eval","globalThis","onMessageWrapperMap","Map","WorkerBody","self","Boolean","onMessage","handleMessage","message","data","type","payload","on","console","debug","onmessage","onMessageWrapper","get","isKnownMessage","error","addEventListener","delete","removeEventListener","source","transferList","postMessage","startsWith"],"mappings":"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","sourcesContent":["import type {WorkerMessageData, WorkerMessageType, WorkerMessagePayload} from '../../types';\nimport {getTransferList} from '../worker-utils/get-transfer-list';\n\n/** Vile hack to defeat over-zealous bundlers from stripping out the require */\nfunction getParentPort() {\n  // const isNode = globalThis.process;\n  let parentPort;\n  try {\n    // prettier-ignore\n    eval('globalThis.parentPort = require(\\'worker_threads\\').parentPort'); // eslint-disable-line no-eval\n    parentPort = globalThis.parentPort;\n    // eslint-disable-next-line no-empty\n  } catch {}\n  return parentPort;\n}\n\nconst onMessageWrapperMap = new Map();\n\n/**\n * Type safe wrapper for worker code\n */\nexport default class WorkerBody {\n  /** Check that we are actually in a worker thread */\n  static inWorkerThread(): boolean {\n    return typeof self !== 'undefined' || Boolean(getParentPort());\n  }\n\n  /*\n   * (type: WorkerMessageType, payload: WorkerMessagePayload) => any\n   */\n  static set onmessage(onMessage: (type: WorkerMessageType, payload: WorkerMessagePayload) => any) {\n    function handleMessage(message) {\n      // Confusingly the message itself also has a 'type' field which is always set to 'message'\n      const parentPort = getParentPort();\n      const {type, payload} = parentPort ? message : message.data;\n      // if (!isKnownMessage(message)) {\n      //   return;\n      // }\n      onMessage(type, payload);\n    }\n\n    const parentPort = getParentPort();\n    if (parentPort) {\n      parentPort.on('message', handleMessage);\n      // if (message == 'exit') { parentPort.unref(); }\n      // eslint-disable-next-line\n      parentPort.on('exit', () => console.debug('Node worker closing'));\n    } else {\n      // eslint-disable-next-line no-restricted-globals\n      globalThis.onmessage = handleMessage;\n    }\n  }\n\n  static addEventListener(\n    onMessage: (type: WorkerMessageType, payload: WorkerMessagePayload) => any\n  ) {\n    let onMessageWrapper = onMessageWrapperMap.get(onMessage);\n\n    if (!onMessageWrapper) {\n      onMessageWrapper = (message: MessageEvent<any>) => {\n        if (!isKnownMessage(message)) {\n          return;\n        }\n\n        // Confusingly in the browser, the message itself also has a 'type' field which is always set to 'message'\n        const parentPort = getParentPort();\n        const {type, payload} = parentPort ? message : message.data;\n        onMessage(type, payload);\n      };\n    }\n\n    const parentPort = getParentPort();\n    if (parentPort) {\n      console.error('not implemented'); // eslint-disable-line\n    } else {\n      globalThis.addEventListener('message', onMessageWrapper);\n    }\n  }\n\n  static removeEventListener(\n    onMessage: (type: WorkerMessageType, payload: WorkerMessagePayload) => any\n  ) {\n    const onMessageWrapper = onMessageWrapperMap.get(onMessage);\n    onMessageWrapperMap.delete(onMessage);\n    const parentPort = getParentPort();\n    if (parentPort) {\n      console.error('not implemented'); // eslint-disable-line\n    } else {\n      globalThis.removeEventListener('message', onMessageWrapper);\n    }\n  }\n\n  /**\n   * Send a message from a worker to creating thread (main thread)\n   * @param type\n   * @param payload\n   */\n  static postMessage(type: WorkerMessageType, payload: WorkerMessagePayload): void {\n    const data: WorkerMessageData = {source: 'loaders.gl', type, payload};\n    // console.log('posting message', data);\n    const transferList = getTransferList(payload);\n\n    const parentPort = getParentPort();\n    if (parentPort) {\n      parentPort.postMessage(data, transferList);\n      // console.log('posted message', data);\n    } else {\n      // @ts-ignore\n      globalThis.postMessage(data, transferList);\n    }\n  }\n}\n\n// Filter out noise messages sent to workers\nfunction isKnownMessage(message: MessageEvent<any>) {\n  const {type, data} = message;\n  return (\n    type === 'message' &&\n    data &&\n    typeof data.source === 'string' &&\n    data.source.startsWith('loaders.gl')\n  );\n}\n"],"file":"worker-body.js"}