{"version":3,"sources":["../../../../src/lib/worker-api/process-on-worker.ts"],"names":["canProcessOnWorker","worker","options","WorkerFarm","isSupported","processOnWorker","data","context","name","workerFarm","getWorkerFarm","source","workerPoolProps","url","workerPool","getWorkerPool","jobName","startJob","onMessage","bind","job","transferableOptions","postMessage","input","result","type","payload","done","error","Error","id","process","message","console","warn"],"mappings":"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","sourcesContent":["import type {\n  WorkerObject,\n  WorkerOptions,\n  WorkerContext,\n  WorkerMessageType,\n  WorkerMessagePayload\n} from '../../types';\nimport type WorkerJob from '../worker-farm/worker-job';\nimport WorkerFarm from '../worker-farm/worker-farm';\nimport {getWorkerURL, getWorkerName} from './get-worker-url';\nimport {getTransferListForWriter} from '../worker-utils/get-transfer-list';\n\ntype ProcessOnWorkerOptions = WorkerOptions & {\n  jobName?: string;\n  [key: string]: any;\n};\n\n/**\n * Determines if we can parse with worker\n * @param loader\n * @param data\n * @param options\n */\nexport function canProcessOnWorker(worker: WorkerObject, options?: WorkerOptions) {\n  if (!WorkerFarm.isSupported()) {\n    return false;\n  }\n\n  return worker.worker && options?.worker;\n}\n\n/**\n * This function expects that the worker thread sends certain messages,\n * Creating such a worker can be automated if the worker is wrapper by a call to\n * createWorker in @loaders.gl/worker-utils.\n */\nexport async function processOnWorker(\n  worker: WorkerObject,\n  data: any,\n  options: ProcessOnWorkerOptions = {},\n  context: WorkerContext = {}\n): Promise<any> {\n  const name = getWorkerName(worker);\n\n  const workerFarm = WorkerFarm.getWorkerFarm(options);\n  const {source} = options;\n  const workerPoolProps: {name: string; source?: string; url?: string} = {name, source};\n  if (!source) {\n    workerPoolProps.url = getWorkerURL(worker, options);\n  }\n  const workerPool = workerFarm.getWorkerPool(workerPoolProps);\n\n  const jobName = options.jobName || worker.name;\n  const job = await workerPool.startJob(\n    jobName,\n    // eslint-disable-next-line\n    onMessage.bind(null, context)\n  );\n\n  // Kick off the processing in the worker\n  const transferableOptions = getTransferListForWriter(options);\n  job.postMessage('process', {input: data, options: transferableOptions});\n\n  const result = await job.result;\n  return result.result;\n}\n\n/**\n * Job completes when we receive the result\n * @param job\n * @param message\n */\nasync function onMessage(\n  context: WorkerContext,\n  job: WorkerJob,\n  type: WorkerMessageType,\n  payload: WorkerMessagePayload\n) {\n  switch (type) {\n    case 'done':\n      // Worker is done\n      job.done(payload);\n      break;\n\n    case 'error':\n      // Worker encountered an error\n      job.error(new Error(payload.error));\n      break;\n\n    case 'process':\n      // Worker is asking for us (main thread) to process something\n      const {id, input, options} = payload;\n      try {\n        if (!context.process) {\n          job.postMessage('error', {id, error: 'Worker not set up to process on main thread'});\n          return;\n        }\n        const result = await context.process(input, options);\n        job.postMessage('done', {id, result});\n      } catch (error) {\n        const message = error instanceof Error ? error.message : 'unknown error';\n        job.postMessage('error', {id, error: message});\n      }\n      break;\n\n    default:\n      // eslint-disable-next-line\n      console.warn(`process-on-worker: unknown message ${type}`);\n  }\n}\n"],"file":"process-on-worker.js"}