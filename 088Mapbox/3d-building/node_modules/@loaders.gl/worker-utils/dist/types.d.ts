/**
 * Worker Options
 */
export declare type WorkerOptions = {
    CDN?: string;
    worker?: boolean;
    maxConcurrency?: number;
    maxMobileConcurrency?: number;
    reuseWorkers?: boolean;
    _workerType?: string;
    workerUrl?: string;
    [key: string]: any;
};
export declare type WorkerContext = {
    process?: Process;
    processInBatches?: ProcessInBatches;
};
export declare type Process = (data: any, options?: {
    [key: string]: any;
}, context?: WorkerContext) => any;
export declare type ProcessInBatches = (iterator: AsyncIterable<any> | Iterable<any>, options?: {
    [key: string]: any;
}, context?: WorkerContext) => AsyncIterable<any>;
/**
 * A worker description object
 */
export declare type WorkerObject = {
    id: string;
    name: string;
    module: string;
    version: string;
    worker?: string | boolean;
    options: {
        [key: string]: any;
    };
    deprecatedOptions?: object;
    process?: Process;
    processInBatches?: ProcessInBatches;
};
export declare type WorkerMessageType = 'process' | 'done' | 'error' | 'process-in-batches' | 'input-batch' | 'input-done' | 'output-batch';
export declare type WorkerMessagePayload = {
    id?: number;
    options?: {
        [key: string]: any;
    };
    context?: {
        [key: string]: any;
    };
    input?: any;
    result?: any;
    error?: string;
};
export declare type WorkerMessageData = {
    source: 'loaders.gl';
    type: WorkerMessageType;
    payload: WorkerMessagePayload;
};
export declare type WorkerMessage = {
    type: string;
    data: WorkerMessageData;
};
//# sourceMappingURL=types.d.ts.map