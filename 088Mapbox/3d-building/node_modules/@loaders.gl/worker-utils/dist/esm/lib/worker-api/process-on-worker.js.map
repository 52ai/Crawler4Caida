{"version":3,"sources":["../../../../src/lib/worker-api/process-on-worker.ts"],"names":["WorkerFarm","getWorkerURL","getWorkerName","getTransferListForWriter","canProcessOnWorker","worker","options","isSupported","processOnWorker","data","context","name","workerFarm","getWorkerFarm","source","workerPoolProps","url","workerPool","getWorkerPool","jobName","job","startJob","onMessage","bind","transferableOptions","postMessage","input","result","type","payload","done","error","Error","id","process","message","console","warn"],"mappings":"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","sourcesContent":["import type {\n  WorkerObject,\n  WorkerOptions,\n  WorkerContext,\n  WorkerMessageType,\n  WorkerMessagePayload\n} from '../../types';\nimport type WorkerJob from '../worker-farm/worker-job';\nimport WorkerFarm from '../worker-farm/worker-farm';\nimport {getWorkerURL, getWorkerName} from './get-worker-url';\nimport {getTransferListForWriter} from '../worker-utils/get-transfer-list';\n\ntype ProcessOnWorkerOptions = WorkerOptions & {\n  jobName?: string;\n  [key: string]: any;\n};\n\n/**\n * Determines if we can parse with worker\n * @param loader\n * @param data\n * @param options\n */\nexport function canProcessOnWorker(worker: WorkerObject, options?: WorkerOptions) {\n  if (!WorkerFarm.isSupported()) {\n    return false;\n  }\n\n  return worker.worker && options?.worker;\n}\n\n/**\n * This function expects that the worker thread sends certain messages,\n * Creating such a worker can be automated if the worker is wrapper by a call to\n * createWorker in @loaders.gl/worker-utils.\n */\nexport async function processOnWorker(\n  worker: WorkerObject,\n  data: any,\n  options: ProcessOnWorkerOptions = {},\n  context: WorkerContext = {}\n): Promise<any> {\n  const name = getWorkerName(worker);\n\n  const workerFarm = WorkerFarm.getWorkerFarm(options);\n  const {source} = options;\n  const workerPoolProps: {name: string; source?: string; url?: string} = {name, source};\n  if (!source) {\n    workerPoolProps.url = getWorkerURL(worker, options);\n  }\n  const workerPool = workerFarm.getWorkerPool(workerPoolProps);\n\n  const jobName = options.jobName || worker.name;\n  const job = await workerPool.startJob(\n    jobName,\n    // eslint-disable-next-line\n    onMessage.bind(null, context)\n  );\n\n  // Kick off the processing in the worker\n  const transferableOptions = getTransferListForWriter(options);\n  job.postMessage('process', {input: data, options: transferableOptions});\n\n  const result = await job.result;\n  return result.result;\n}\n\n/**\n * Job completes when we receive the result\n * @param job\n * @param message\n */\nasync function onMessage(\n  context: WorkerContext,\n  job: WorkerJob,\n  type: WorkerMessageType,\n  payload: WorkerMessagePayload\n) {\n  switch (type) {\n    case 'done':\n      // Worker is done\n      job.done(payload);\n      break;\n\n    case 'error':\n      // Worker encountered an error\n      job.error(new Error(payload.error));\n      break;\n\n    case 'process':\n      // Worker is asking for us (main thread) to process something\n      const {id, input, options} = payload;\n      try {\n        if (!context.process) {\n          job.postMessage('error', {id, error: 'Worker not set up to process on main thread'});\n          return;\n        }\n        const result = await context.process(input, options);\n        job.postMessage('done', {id, result});\n      } catch (error) {\n        const message = error instanceof Error ? error.message : 'unknown error';\n        job.postMessage('error', {id, error: message});\n      }\n      break;\n\n    default:\n      // eslint-disable-next-line\n      console.warn(`process-on-worker: unknown message ${type}`);\n  }\n}\n"],"file":"process-on-worker.js"}