{"version":3,"sources":["../../../../src/lib/worker-farm/worker-farm.ts"],"names":["WorkerPool","WorkerThread","DEFAULT_PROPS","maxConcurrency","maxMobileConcurrency","reuseWorkers","onDebug","WorkerFarm","isSupported","getWorkerFarm","props","_workerFarm","setProps","constructor","Map","workerPools","destroy","workerPool","values","_getWorkerPoolProps","getWorkerPool","options","name","source","url","get","set"],"mappings":";AAAA,OAAOA,UAAP,MAAuB,eAAvB;AACA,OAAOC,YAAP,MAAyB,iBAAzB;AAgBA,MAAMC,aAAwC,GAAG;AAC/CC,EAAAA,cAAc,EAAE,CAD+B;AAE/CC,EAAAA,oBAAoB,EAAE,CAFyB;AAG/CC,EAAAA,YAAY,EAAE,IAHiC;AAI/CC,EAAAA,OAAO,EAAE,MAAM,CAAE;AAJ8B,CAAjD;AAUA,eAAe,MAAMC,UAAN,CAAiB;AAOZ,SAAXC,WAAW,GAAY;AAC5B,WAAOP,YAAY,CAACO,WAAb,EAAP;AACD;;AAGmB,SAAbC,aAAa,CAACC,KAAsB,GAAG,EAA1B,EAA0C;AAC5DH,IAAAA,UAAU,CAACI,WAAX,GAAyBJ,UAAU,CAACI,WAAX,IAA0B,IAAIJ,UAAJ,CAAe,EAAf,CAAnD;;AACAA,IAAAA,UAAU,CAACI,WAAX,CAAuBC,QAAvB,CAAgCF,KAAhC;;AACA,WAAOH,UAAU,CAACI,WAAlB;AACD;;AAGOE,EAAAA,WAAW,CAACH,KAAD,EAAyB;AAAA;;AAAA,yCAjBtB,IAAII,GAAJ,EAiBsB;;AAC1C,SAAKJ,KAAL,GAAa,EAAC,GAAGR;AAAJ,KAAb;AACA,SAAKU,QAAL,CAAcF,KAAd;AAEA,SAAKK,WAAL,GAAmB,IAAID,GAAJ,EAAnB;AACD;;AAMDE,EAAAA,OAAO,GAAS;AACd,SAAK,MAAMC,UAAX,IAAyB,KAAKF,WAAL,CAAiBG,MAAjB,EAAzB,EAAoD;AAClDD,MAAAA,UAAU,CAACD,OAAX;AACD;;AACD,SAAKD,WAAL,GAAmB,IAAID,GAAJ,EAAnB;AACD;;AAMDF,EAAAA,QAAQ,CAACF,KAAD,EAA+B;AACrC,SAAKA,KAAL,GAAa,EAAC,GAAG,KAAKA,KAAT;AAAgB,SAAGA;AAAnB,KAAb;;AAEA,SAAK,MAAMO,UAAX,IAAyB,KAAKF,WAAL,CAAiBG,MAAjB,EAAzB,EAAoD;AAClDD,MAAAA,UAAU,CAACL,QAAX,CAAoB,KAAKO,mBAAL,EAApB;AACD;AACF;;AAWDC,EAAAA,aAAa,CAACC,OAAD,EAAqE;AAChF,UAAM;AAACC,MAAAA,IAAD;AAAOC,MAAAA,MAAP;AAAeC,MAAAA;AAAf,QAAsBH,OAA5B;AACA,QAAIJ,UAAU,GAAG,KAAKF,WAAL,CAAiBU,GAAjB,CAAqBH,IAArB,CAAjB;;AACA,QAAI,CAACL,UAAL,EAAiB;AACfA,MAAAA,UAAU,GAAG,IAAIjB,UAAJ,CAAe;AAC1BsB,QAAAA,IAD0B;AAE1BC,QAAAA,MAF0B;AAG1BC,QAAAA;AAH0B,OAAf,CAAb;AAKAP,MAAAA,UAAU,CAACL,QAAX,CAAoB,KAAKO,mBAAL,EAApB;AACA,WAAKJ,WAAL,CAAiBW,GAAjB,CAAqBJ,IAArB,EAA2BL,UAA3B;AACD;;AACD,WAAOA,UAAP;AACD;;AAEDE,EAAAA,mBAAmB,GAAG;AACpB,WAAO;AACLhB,MAAAA,cAAc,EAAE,KAAKO,KAAL,CAAWP,cADtB;AAELC,MAAAA,oBAAoB,EAAE,KAAKM,KAAL,CAAWN,oBAF5B;AAGLC,MAAAA,YAAY,EAAE,KAAKK,KAAL,CAAWL,YAHpB;AAILC,MAAAA,OAAO,EAAE,KAAKI,KAAL,CAAWJ;AAJf,KAAP;AAMD;;AAhF6B;;gBAAXC,U","sourcesContent":["import WorkerPool from './worker-pool';\nimport WorkerThread from './worker-thread';\n\n/**\n * @param maxConcurrency - max count of workers\n * @param maxMobileConcurrency - max count of workers on mobile\n * @param maxConcurrency - max count of workers\n * @param reuseWorkers - if false, destroys workers when task is completed\n * @param onDebug - callback intended to allow application to log worker pool activity\n */\nexport type WorkerFarmProps = {\n  maxConcurrency?: number;\n  maxMobileConcurrency?: number;\n  reuseWorkers?: boolean;\n  onDebug?: () => void;\n};\n\nconst DEFAULT_PROPS: Required<WorkerFarmProps> = {\n  maxConcurrency: 3,\n  maxMobileConcurrency: 1,\n  reuseWorkers: true,\n  onDebug: () => {}\n};\n\n/**\n * Process multiple jobs with a \"farm\" of different workers in worker pools.\n */\nexport default class WorkerFarm {\n  private props: WorkerFarmProps;\n  private workerPools = new Map<string, WorkerPool>();\n  // singleton\n  private static _workerFarm?: WorkerFarm;\n\n  /** Checks if workers are supported on this platform */\n  static isSupported(): boolean {\n    return WorkerThread.isSupported();\n  }\n\n  /** Get the singleton instance of the global worker farm */\n  static getWorkerFarm(props: WorkerFarmProps = {}): WorkerFarm {\n    WorkerFarm._workerFarm = WorkerFarm._workerFarm || new WorkerFarm({});\n    WorkerFarm._workerFarm.setProps(props);\n    return WorkerFarm._workerFarm;\n  }\n\n  /** get global instance with WorkerFarm.getWorkerFarm() */\n  private constructor(props: WorkerFarmProps) {\n    this.props = {...DEFAULT_PROPS};\n    this.setProps(props);\n    /** @type Map<string, WorkerPool>} */\n    this.workerPools = new Map();\n  }\n\n  /**\n   * Terminate all workers in the farm\n   * @note Can free up significant memory\n   */\n  destroy(): void {\n    for (const workerPool of this.workerPools.values()) {\n      workerPool.destroy();\n    }\n    this.workerPools = new Map<string, WorkerPool>();\n  }\n\n  /**\n   * Set props used when initializing worker pools\n   * @param props\n   */\n  setProps(props: WorkerFarmProps): void {\n    this.props = {...this.props, ...props};\n    // Update worker pool props\n    for (const workerPool of this.workerPools.values()) {\n      workerPool.setProps(this._getWorkerPoolProps());\n    }\n  }\n\n  /**\n   * Returns a worker pool for the specified worker\n   * @param options - only used first time for a specific worker name\n   * @param options.name - the name of the worker - used to identify worker pool\n   * @param options.url -\n   * @param options.source -\n   * @example\n   *   const job = WorkerFarm.getWorkerFarm().getWorkerPool({name, url}).startJob(...);\n   */\n  getWorkerPool(options: {name: string; source?: string; url?: string}): WorkerPool {\n    const {name, source, url} = options;\n    let workerPool = this.workerPools.get(name);\n    if (!workerPool) {\n      workerPool = new WorkerPool({\n        name,\n        source,\n        url\n      });\n      workerPool.setProps(this._getWorkerPoolProps());\n      this.workerPools.set(name, workerPool);\n    }\n    return workerPool;\n  }\n\n  _getWorkerPoolProps() {\n    return {\n      maxConcurrency: this.props.maxConcurrency,\n      maxMobileConcurrency: this.props.maxMobileConcurrency,\n      reuseWorkers: this.props.reuseWorkers,\n      onDebug: this.props.onDebug\n    };\n  }\n}\n"],"file":"worker-farm.js"}