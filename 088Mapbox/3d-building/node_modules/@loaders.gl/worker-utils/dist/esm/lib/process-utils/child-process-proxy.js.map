{"version":3,"sources":["../../../../src/lib/process-utils/child-process-proxy.ts"],"names":["ChildProcess","getAvailablePort","DEFAULT_PROPS","command","arguments","port","autoPort","wait","onSuccess","processProxy","console","log","props","ChildProcessProxy","constructor","id","start","args","Number","portArg","push","String","Promise","resolve","reject","_setTimeout","join","childProcess","spawn","stdout","on","data","toString","stderr","_clearTimeout","Error","error","code","stop","kill","exit","statusCode","process","message","callback","successTimer","setTimeout","clearTimeout"],"mappings":"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","sourcesContent":["/* eslint-disable no-console */\n// Avoid using named imports for Node builtins to help with \"empty\" resolution\n// for bundlers targeting browser environments. Access imports & types\n// through the `ChildProcess` object (e.g. `ChildProcess.spawn`, `ChildProcess.ChildProcess`).\nimport * as ChildProcess from 'child_process';\nimport {getAvailablePort} from './process-utils';\n\nexport type ChildProcessProxyProps = {\n  command: string;\n  arguments: string[];\n  /** Whether to add a port specified arg */\n  portArg?: string;\n  /** Base port number */\n  port?: number;\n  /** Whether to search for an available port if the base port is occupied */\n  autoPort?: boolean;\n  /** Number of milliseconds to wait until concluding success */\n  /** wait: 0 - infinity */\n  wait?: number;\n  /** Options passed on to Node'.js `spawn` */\n  spawn?: ChildProcess.SpawnOptionsWithoutStdio;\n  /** Callback when the  */\n  onStart?: (proxy: ChildProcessProxy) => void;\n  onSuccess?: (proxy: ChildProcessProxy) => void;\n};\n\nconst DEFAULT_PROPS: ChildProcessProxyProps = {\n  command: '',\n  arguments: [],\n  port: 5000,\n  autoPort: true,\n  wait: 2000,\n  onSuccess: (processProxy) => {\n    console.log(`Started ${processProxy.props.command}`);\n  }\n};\n\n/**\n * Manager for a Node.js child process\n * Prepares arguments, starts, stops and tracks output\n */\nexport default class ChildProcessProxy {\n  id: string;\n  props: ChildProcessProxyProps = {...DEFAULT_PROPS};\n  private childProcess: ChildProcess.ChildProcess | null = null;\n  private port: number = 0;\n  private successTimer?: any; // NodeJS.Timeout;\n\n  // constructor(props?: {id?: string});\n  constructor({id = 'browser-driver'} = {}) {\n    this.id = id;\n  }\n\n  /** Starts a child process with the provided props */\n  async start(props: ChildProcessProxyProps): Promise<object> {\n    props = {...DEFAULT_PROPS, ...props};\n    this.props = props;\n\n    const args = [...props.arguments];\n\n    // If portArg is set, we can look up an available port\n    this.port = Number(props.port);\n    if (props.portArg) {\n      if (props.autoPort) {\n        this.port = await getAvailablePort(props.port);\n      }\n      args.push(props.portArg, String(this.port));\n    }\n\n    return await new Promise((resolve, reject) => {\n      try {\n        this._setTimeout(() => {\n          if (props.onSuccess) {\n            props.onSuccess(this);\n          }\n          resolve({});\n        });\n\n        console.log(`Spawning ${props.command} ${props.arguments.join(' ')}`);\n        const childProcess = ChildProcess.spawn(props.command, args, props.spawn);\n        this.childProcess = childProcess;\n\n        childProcess.stdout.on('data', (data) => {\n          console.log(data.toString());\n        });\n        // TODO - add option regarding whether stderr should be treated as data\n        childProcess.stderr.on('data', (data) => {\n          console.log(`Child process wrote to stderr: \"${data}\".`);\n          this._clearTimeout();\n          reject(new Error(data));\n        });\n        childProcess.on('error', (error) => {\n          console.log(`Child process errored with ${error}`);\n          this._clearTimeout();\n          reject(error);\n        });\n        childProcess.on('close', (code) => {\n          console.log(`Child process exited with ${code}`);\n          this.childProcess = null;\n          this._clearTimeout();\n          resolve({});\n        });\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /** Stops a running child process */\n  async stop(): Promise<void> {\n    if (this.childProcess) {\n      this.childProcess.kill();\n      this.childProcess = null;\n    }\n  }\n\n  /** Exits this process */\n  async exit(statusCode: number = 0): Promise<void> {\n    try {\n      await this.stop();\n      // eslint-disable-next-line no-process-exit\n      process.exit(statusCode);\n    } catch (error) {\n      console.error((error as Error).message || error);\n      // eslint-disable-next-line no-process-exit\n      process.exit(1);\n    }\n  }\n\n  _setTimeout(callback: (...args: any[]) => void) {\n    if (Number(this.props.wait) > 0) {\n      this.successTimer = setTimeout(callback, this.props.wait);\n    }\n  }\n\n  _clearTimeout() {\n    if (this.successTimer) {\n      clearTimeout(this.successTimer);\n    }\n  }\n}\n"],"file":"child-process-proxy.js"}