{"version":3,"sources":["../../../../src/lib/worker-farm/worker-job.ts"],"names":["assert","WorkerJob","constructor","jobName","workerThread","name","result","Promise","resolve","reject","_resolve","_reject","postMessage","type","payload","source","done","value","isRunning","error"],"mappings":";AAEA,SAAQA,MAAR,QAAqB,qBAArB;AAKA,eAAe,MAAMC,SAAN,CAAgB;AAU7BC,EAAAA,WAAW,CAACC,OAAD,EAAkBC,YAAlB,EAA8C;AAAA;;AAAA;;AAAA,uCAPpC,IAOoC;;AAAA;;AAAA,sCAHhB,MAAM,CAAE,CAGQ;;AAAA,qCAFf,MAAM,CAAE,CAEO;;AACvD,SAAKC,IAAL,GAAYF,OAAZ;AACA,SAAKC,YAAL,GAAoBA,YAApB;AACA,SAAKE,MAAL,GAAc,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC7C,WAAKC,QAAL,GAAgBF,OAAhB;AACA,WAAKG,OAAL,GAAeF,MAAf;AACD,KAHa,CAAd;AAID;;AAMDG,EAAAA,WAAW,CAACC,IAAD,EAA0BC,OAA1B,EAA+D;AACxE,SAAKV,YAAL,CAAkBQ,WAAlB,CAA8B;AAC5BG,MAAAA,MAAM,EAAE,YADoB;AAE5BF,MAAAA,IAF4B;AAG5BC,MAAAA;AAH4B,KAA9B;AAKD;;AAKDE,EAAAA,IAAI,CAACC,KAAD,EAAmB;AACrBjB,IAAAA,MAAM,CAAC,KAAKkB,SAAN,CAAN;AACA,SAAKA,SAAL,GAAiB,KAAjB;;AACA,SAAKR,QAAL,CAAcO,KAAd;AACD;;AAKDE,EAAAA,KAAK,CAACA,KAAD,EAAqB;AACxBnB,IAAAA,MAAM,CAAC,KAAKkB,SAAN,CAAN;AACA,SAAKA,SAAL,GAAiB,KAAjB;;AACA,SAAKP,OAAL,CAAaQ,KAAb;AACD;;AA/C4B","sourcesContent":["import type {WorkerMessageType, WorkerMessagePayload} from '../../types';\nimport WorkerThread from './worker-thread';\nimport {assert} from '../env-utils/assert';\n\n/**\n * Represents one Job handled by a WorkerPool or WorkerFarm\n */\nexport default class WorkerJob {\n  readonly name: string;\n  readonly workerThread: WorkerThread;\n  isRunning: boolean = true;\n  /** Promise that resolves when Job is done */\n  readonly result: Promise<any>;\n\n  private _resolve: (value: any) => void = () => {};\n  private _reject: (reason?: any) => void = () => {};\n\n  constructor(jobName: string, workerThread: WorkerThread) {\n    this.name = jobName;\n    this.workerThread = workerThread;\n    this.result = new Promise((resolve, reject) => {\n      this._resolve = resolve;\n      this._reject = reject;\n    });\n  }\n\n  /**\n   * Send a message to the job's worker thread\n   * @param data any data structure, ideally consisting mostly of transferrable objects\n   */\n  postMessage(type: WorkerMessageType, payload: WorkerMessagePayload): void {\n    this.workerThread.postMessage({\n      source: 'loaders.gl', // Lets worker ignore unrelated messages\n      type,\n      payload\n    });\n  }\n\n  /**\n   * Call to resolve the `result` Promise with the supplied value\n   */\n  done(value: any): void {\n    assert(this.isRunning);\n    this.isRunning = false;\n    this._resolve(value);\n  }\n\n  /**\n   * Call to reject the `result` Promise with the supplied error\n   */\n  error(error: Error): void {\n    assert(this.isRunning);\n    this.isRunning = false;\n    this._reject(error);\n  }\n}\n"],"file":"worker-job.js"}