{"version":3,"sources":["../../../../src/lib/request-utils/request-scheduler.ts"],"names":["STAT_QUEUED_REQUESTS","STAT_ACTIVE_REQUESTS","STAT_CANCELLED_REQUESTS","STAT_QUEUED_REQUESTS_EVER","STAT_ACTIVE_REQUESTS_EVER","DEFAULT_PROPS","id","throttleRequests","maxRequests","RequestScheduler","props","Map","stats","Stats","get","handle","getPriority","Promise","resolve","done","requestMap","has","request","priority","promise","requestQueue","push","set","_issueNewRequests","isDone","delete","activeRequestCount","deferredUpdate","setTimeout","_issueNewRequestsAsync","freeSlots","Math","max","_updateAllRequests","i","shift","_issueRequest","length","_updateRequest","splice","sort","a","b"],"mappings":"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","sourcesContent":["import {Stats} from '@probe.gl/stats';\n\ntype Handle = any;\ntype DoneFunction = () => any;\ntype GetPriorityFunction = () => number;\ntype RequestResult = {\n  done: DoneFunction;\n} | null;\n\n/** RequestScheduler Options */\nexport type RequestSchedulerProps = {\n  id?: string;\n  throttleRequests?: boolean;\n  maxRequests?: number;\n};\n\nconst STAT_QUEUED_REQUESTS = 'Queued Requests';\nconst STAT_ACTIVE_REQUESTS = 'Active Requests';\nconst STAT_CANCELLED_REQUESTS = 'Cancelled Requests';\nconst STAT_QUEUED_REQUESTS_EVER = 'Queued Requests Ever';\nconst STAT_ACTIVE_REQUESTS_EVER = 'Active Requests Ever';\n\nconst DEFAULT_PROPS: Required<RequestSchedulerProps> = {\n  id: 'request-scheduler',\n  // Specifies if the request scheduler should throttle incoming requests, mainly for comparative testing\n  throttleRequests: true,\n  // The maximum number of simultaneous active requests. Un-throttled requests do not observe this limit.\n  maxRequests: 6\n};\n\n/** Tracks one request */\ntype Request = {\n  handle: Handle;\n  priority: number;\n  getPriority: GetPriorityFunction;\n  resolve?: (value: any) => any;\n};\n\n/**\n * Used to issue a request, without having them \"deeply queued\" by the browser.\n * @todo - Track requests globally, across multiple servers\n */\nexport default class RequestScheduler {\n  readonly props: Required<RequestSchedulerProps>;\n  readonly stats: Stats;\n  activeRequestCount: number = 0;\n\n  /** Tracks the number of active requests and prioritizes/cancels queued requests. */\n  private requestQueue: Request[] = [];\n  private requestMap: Map<Handle, Promise<RequestResult>> = new Map();\n  private deferredUpdate: any = null;\n\n  constructor(props: RequestSchedulerProps = {}) {\n    this.props = {...DEFAULT_PROPS, ...props};\n\n    // Returns the statistics used by the request scheduler.\n    this.stats = new Stats({id: this.props.id});\n    this.stats.get(STAT_QUEUED_REQUESTS);\n    this.stats.get(STAT_ACTIVE_REQUESTS);\n    this.stats.get(STAT_CANCELLED_REQUESTS);\n    this.stats.get(STAT_QUEUED_REQUESTS_EVER);\n    this.stats.get(STAT_ACTIVE_REQUESTS_EVER);\n  }\n\n  /**\n   * Called by an application that wants to issue a request, without having it deeply queued by the browser\n   *\n   * When the returned promise resolved, it is OK for the application to issue a request.\n   * The promise resolves to an object that contains a `done` method.\n   * When the application's request has completed (or failed), the application must call the `done` function\n   *\n   * @param handle\n   * @param getPriority will be called when request \"slots\" open up,\n   *    allowing the caller to update priority or cancel the request\n   *    Highest priority executes first, priority < 0 cancels the request\n   * @returns a promise\n   *   - resolves to a object (with a `done` field) when the request can be issued without queueing,\n   *   - resolves to `null` if the request has been cancelled (by the callback return < 0).\n   *     In this case the application should not issue the request\n   */\n  scheduleRequest(\n    handle: Handle,\n    getPriority: GetPriorityFunction = () => 0\n  ): Promise<RequestResult> {\n    // Allows throttling to be disabled\n    if (!this.props.throttleRequests) {\n      return Promise.resolve({done: () => {}});\n    }\n\n    // dedupe\n    if (this.requestMap.has(handle)) {\n      return this.requestMap.get(handle) as Promise<any>;\n    }\n\n    const request: Request = {handle, priority: 0, getPriority};\n    const promise = new Promise<RequestResult>((resolve) => {\n      // @ts-ignore\n      request.resolve = resolve;\n      return request;\n    });\n\n    this.requestQueue.push(request);\n    this.requestMap.set(handle, promise);\n    this._issueNewRequests();\n    return promise;\n  }\n\n  // PRIVATE\n\n  _issueRequest(request: Request): Promise<any> {\n    const {handle, resolve} = request;\n    let isDone = false;\n\n    const done = () => {\n      // can only be called once\n      if (!isDone) {\n        isDone = true;\n\n        // Stop tracking a request - it has completed, failed, cancelled etc\n        this.requestMap.delete(handle);\n        this.activeRequestCount--;\n        // A slot just freed up, see if any queued requests are waiting\n        this._issueNewRequests();\n      }\n    };\n\n    // Track this request\n    this.activeRequestCount++;\n\n    return resolve ? resolve({done}) : Promise.resolve({done});\n  }\n\n  /** We check requests asynchronously, to prevent multiple updates */\n  _issueNewRequests(): void {\n    if (!this.deferredUpdate) {\n      this.deferredUpdate = setTimeout(() => this._issueNewRequestsAsync(), 0);\n    }\n  }\n\n  /** Refresh all requests  */\n  _issueNewRequestsAsync() {\n    // TODO - shouldn't we clear the timeout?\n    this.deferredUpdate = null;\n\n    const freeSlots = Math.max(this.props.maxRequests - this.activeRequestCount, 0);\n\n    if (freeSlots === 0) {\n      return;\n    }\n\n    this._updateAllRequests();\n\n    // Resolve pending promises for the top-priority requests\n    for (let i = 0; i < freeSlots; ++i) {\n      const request = this.requestQueue.shift();\n      if (request) {\n        this._issueRequest(request); // eslint-disable-line @typescript-eslint/no-floating-promises\n      }\n    }\n\n    // Uncomment to debug\n    // console.log(`${freeSlots} free slots, ${this.requestQueue.length} queued requests`);\n  }\n\n  /** Ensure all requests have updated priorities, and that no longer valid requests are cancelled */\n  _updateAllRequests() {\n    const requestQueue = this.requestQueue;\n    for (let i = 0; i < requestQueue.length; ++i) {\n      const request = requestQueue[i];\n      if (!this._updateRequest(request)) {\n        // Remove the element and make sure to adjust the counter to account for shortened array\n        requestQueue.splice(i, 1);\n        this.requestMap.delete(request.handle);\n        i--;\n      }\n    }\n\n    // Sort the remaining requests based on priority\n    requestQueue.sort((a, b) => a.priority - b.priority);\n  }\n\n  /** Update a single request by calling the callback */\n  _updateRequest(request) {\n    request.priority = request.getPriority(request.handle); // eslint-disable-line callback-return\n\n    // by returning a negative priority, the callback cancels the request\n    if (request.priority < 0) {\n      request.resolve(null);\n      return false;\n    }\n    return true;\n  }\n}\n"],"file":"request-scheduler.js"}