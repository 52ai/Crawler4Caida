{"version":3,"sources":["../../../../src/lib/node/fs.ts"],"names":["fs","toArrayBuffer","promisify","readdir","stat","readFile","readFileSync","writeFile","writeFileSync","open","close","read","fstat","isSupported","Boolean","_readToArrayBuffer","fd","start","length","buffer","Buffer","alloc","bytesRead","Error"],"mappings":"AACA,OAAOA,EAAP,MAAe,IAAf;AACA,SAAQC,aAAR,QAA4B,UAA5B;AACA,SAAQC,SAAR,QAAwB,QAAxB;AAIA,OAAO,IAAIC,OAAJ;AAEP,OAAO,IAAIC,IAAJ;AAGP,OAAO,IAAIC,QAAJ;AAEP,OAAO,IAAIC,YAAJ;AAEP,OAAO,IAAIC,SAAJ;AAEP,OAAO,IAAIC,aAAJ;AAKP,OAAO,IAAIC,IAAJ;AAEP,OAAO,IAAIC,KAAJ;AAEP,OAAO,IAAIC,IAAJ;AAEP,OAAO,IAAIC,KAAJ;AAEP,OAAO,IAAIC,WAAW,GAAGC,OAAO,CAACd,EAAD,CAAzB;;AAIP,IAAI;AAEFG,EAAAA,OAAO,GAAGD,SAAS,CAACF,EAAE,CAACG,OAAJ,CAAnB;AAEAC,EAAAA,IAAI,GAAGF,SAAS,CAACF,EAAE,CAACI,IAAJ,CAAhB;AAGAC,EAAAA,QAAQ,GAAGH,SAAS,CAACF,EAAE,CAACK,QAAJ,CAApB;AAEAC,EAAAA,YAAY,GAAGN,EAAE,CAACM,YAAlB;AAEAC,EAAAA,SAAS,GAAGL,SAAS,CAACF,EAAE,CAACO,SAAJ,CAArB;AAEAC,EAAAA,aAAa,GAAGR,EAAE,CAACQ,aAAnB;AAKAC,EAAAA,IAAI,GAAGP,SAAS,CAACF,EAAE,CAACS,IAAJ,CAAhB;AAEAC,EAAAA,KAAK,GAAGR,SAAS,CAACF,EAAE,CAACU,KAAJ,CAAjB;AAEAC,EAAAA,IAAI,GAAGT,SAAS,CAACF,EAAE,CAACW,IAAJ,CAAhB;AAEAC,EAAAA,KAAK,GAAGV,SAAS,CAACF,EAAE,CAACY,KAAJ,CAAjB;AAEAC,EAAAA,WAAW,GAAGC,OAAO,CAACd,EAAD,CAArB;AACD,CA3BD,CA2BE,MAAM,CAEP;;AAED,OAAO,eAAee,kBAAf,CAAkCC,EAAlC,EAA8CC,KAA9C,EAA6DC,MAA7D,EAA6E;AAClF,QAAMC,MAAM,GAAGC,MAAM,CAACC,KAAP,CAAaH,MAAb,CAAf;AACA,QAAM;AAACI,IAAAA;AAAD,MAAc,MAAMX,IAAI,CAACK,EAAD,EAAKG,MAAL,EAAa,CAAb,EAAgBD,MAAhB,EAAwBD,KAAxB,CAA9B;;AACA,MAAIK,SAAS,KAAKJ,MAAlB,EAA0B;AACxB,UAAM,IAAIK,KAAJ,CAAU,gBAAV,CAAN;AACD;;AACD,SAAOtB,aAAa,CAACkB,MAAD,CAApB;AACD","sourcesContent":["// fs wrapper (promisified fs + avoids bundling fs in browsers)\nimport fs from 'fs';\nimport {toArrayBuffer} from './buffer';\nimport {promisify} from './util';\n\nexport type {Stats} from 'fs';\n\nexport let readdir;\n/** Wrapper for Node.js fs method */\nexport let stat;\n\n/** Wrapper for Node.js fs method */\nexport let readFile;\n/** Wrapper for Node.js fs method */\nexport let readFileSync;\n/** Wrapper for Node.js fs method */\nexport let writeFile;\n/** Wrapper for Node.js fs method */\nexport let writeFileSync;\n\n// file descriptors\n\n/** Wrapper for Node.js fs method */\nexport let open;\n/** Wrapper for Node.js fs method */\nexport let close;\n/** Wrapper for Node.js fs method */\nexport let read;\n/** Wrapper for Node.js fs method */\nexport let fstat;\n\nexport let isSupported = Boolean(fs);\n\n// paths\n\ntry {\n  /** Wrapper for Node.js fs method */\n  readdir = promisify(fs.readdir);\n  /** Wrapper for Node.js fs method */\n  stat = promisify(fs.stat);\n\n  /** Wrapper for Node.js fs method */\n  readFile = promisify(fs.readFile);\n  /** Wrapper for Node.js fs method */\n  readFileSync = fs.readFileSync;\n  /** Wrapper for Node.js fs method */\n  writeFile = promisify(fs.writeFile);\n  /** Wrapper for Node.js fs method */\n  writeFileSync = fs.writeFileSync;\n\n  // file descriptors\n\n  /** Wrapper for Node.js fs method */\n  open = promisify(fs.open);\n  /** Wrapper for Node.js fs method */\n  close = promisify(fs.close);\n  /** Wrapper for Node.js fs method */\n  read = promisify(fs.read);\n  /** Wrapper for Node.js fs method */\n  fstat = promisify(fs.fstat);\n\n  isSupported = Boolean(fs);\n} catch {\n  // ignore\n}\n\nexport async function _readToArrayBuffer(fd: number, start: number, length: number) {\n  const buffer = Buffer.alloc(length);\n  const {bytesRead} = await read(fd, buffer, 0, length, start);\n  if (bytesRead !== length) {\n    throw new Error('fs.read failed');\n  }\n  return toArrayBuffer(buffer);\n}\n"],"file":"fs.js"}