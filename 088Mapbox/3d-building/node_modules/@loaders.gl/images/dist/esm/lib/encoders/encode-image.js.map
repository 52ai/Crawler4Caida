{"version":3,"sources":["../../../../src/lib/encoders/encode-image.ts"],"names":["getImageSize","_encodeImageNode","globalThis","encodeImage","image","options","type","mimeType","encodeImageInBrowser","qualityParamSupported","jpegQuality","width","height","canvas","document","createElement","drawImageToCanvas","blob","Promise","resolve","toBlob","error","Error","arrayBuffer","x","y","ImageBitmap","context","getContext","transferFromImageBitmap","data","clampedArray","Uint8ClampedArray","imageData","ImageData","putImageData","drawImage"],"mappings":"AACA,SAAQA,YAAR,QAA2B,kCAA3B;AAGA,MAAM;AAACC,EAAAA;AAAD,IAAqBC,UAA3B;AAUA,OAAO,eAAeC,WAAf,CACLC,KADK,EAELC,OAFK,EAGiB;AACtBA,EAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACAA,EAAAA,OAAO,CAACD,KAAR,GAAgBC,OAAO,CAACD,KAAR,IAAkB,EAAlC;AAEA,SAAOH,gBAAgB,GACnBA,gBAAgB,CAACG,KAAD,EAAQ;AAACE,IAAAA,IAAI,EAAED,OAAO,CAACD,KAAR,CAAcG;AAArB,GAAR,CADG,GAEnBC,oBAAoB,CAACJ,KAAD,EAAQC,OAAR,CAFxB;AAGD;AAGD,IAAII,qBAAqB,GAAG,IAA5B;;AASA,eAAeD,oBAAf,CAAoCJ,KAApC,EAA2CC,OAA3C,EAAoD;AAClD,QAAM;AAACE,IAAAA,QAAD;AAAWG,IAAAA;AAAX,MAA0BL,OAAO,CAACD,KAAxC;AAEA,QAAM;AAACO,IAAAA,KAAD;AAAQC,IAAAA;AAAR,MAAkBZ,YAAY,CAACI,KAAD,CAApC;AAGA,QAAMS,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAf;AACAF,EAAAA,MAAM,CAACF,KAAP,GAAeA,KAAf;AACAE,EAAAA,MAAM,CAACD,MAAP,GAAgBA,MAAhB;AAEAI,EAAAA,iBAAiB,CAACZ,KAAD,EAAQS,MAAR,CAAjB;AAGA,QAAMI,IAAI,GAAG,MAAM,IAAIC,OAAJ,CAA0BC,OAAD,IAAa;AAEvD,QAAIT,WAAW,IAAID,qBAAnB,EAA0C;AACxC,UAAI;AACFI,QAAAA,MAAM,CAACO,MAAP,CAAcD,OAAd,EAAuBZ,QAAvB,EAAiCG,WAAjC;AACA;AACD,OAHD,CAGE,OAAOW,KAAP,EAAc;AACdZ,QAAAA,qBAAqB,GAAG,KAAxB;AACD;AACF;;AACDI,IAAAA,MAAM,CAACO,MAAP,CAAcD,OAAd,EAAuBZ,QAAvB;AACD,GAXkB,CAAnB;;AAaA,MAAI,CAACU,IAAL,EAAW;AACT,UAAM,IAAIK,KAAJ,CAAU,uBAAV,CAAN;AACD;;AAED,SAAO,MAAML,IAAI,CAACM,WAAL,EAAb;AACD;;AAED,SAASP,iBAAT,CAA2BZ,KAA3B,EAAkCS,MAAlC,EAA0CW,CAAC,GAAG,CAA9C,EAAiDC,CAAC,GAAG,CAArD,EAAwD;AAEtD,MAAID,CAAC,KAAK,CAAN,IAAWC,CAAC,KAAK,CAAjB,IAAsB,OAAOC,WAAP,KAAuB,WAA7C,IAA4DtB,KAAK,YAAYsB,WAAjF,EAA8F;AAC5F,UAAMC,OAAO,GAAGd,MAAM,CAACe,UAAP,CAAkB,gBAAlB,CAAhB;;AACA,QAAID,OAAJ,EAAa;AAEXA,MAAAA,OAAO,CAACE,uBAAR,CAAgCzB,KAAhC;AACA,aAAOS,MAAP;AACD;AACF;;AAGD,QAAMc,OAAO,GAAGd,MAAM,CAACe,UAAP,CAAkB,IAAlB,CAAhB;;AACA,MAAIxB,KAAK,CAAC0B,IAAV,EAAgB;AAEd,UAAMC,YAAY,GAAG,IAAIC,iBAAJ,CAAsB5B,KAAK,CAAC0B,IAA5B,CAArB;AACA,UAAMG,SAAS,GAAG,IAAIC,SAAJ,CAAcH,YAAd,EAA4B3B,KAAK,CAACO,KAAlC,EAAyCP,KAAK,CAACQ,MAA/C,CAAlB;AACAe,IAAAA,OAAO,CAACQ,YAAR,CAAqBF,SAArB,EAAgC,CAAhC,EAAmC,CAAnC;AACA,WAAOpB,MAAP;AACD;;AAGDc,EAAAA,OAAO,CAACS,SAAR,CAAkBhC,KAAlB,EAAyB,CAAzB,EAA4B,CAA5B;AACA,SAAOS,MAAP;AACD","sourcesContent":["// Image loading/saving for browser and Node.js\nimport {getImageSize} from '../category-api/parsed-image-api';\n\n// @ts-ignore TS2339: Property does not exist on type\nconst {_encodeImageNode} = globalThis;\n\n/**\n * Returns data bytes representing a compressed image in PNG or JPG format,\n * This data can be saved using file system (f) methods or used in a request.\n * @param image - ImageBitmap Image or Canvas\n * @param options\n * param opt.type='png' - png, jpg or image/png, image/jpg are valid\n * param mimeType= - Whether to include a data URI header\n */\nexport async function encodeImage(\n  image: any,\n  options?: {[key: string]: any}\n): Promise<ArrayBuffer> {\n  options = options || {};\n  options.image = options.image || ({} as {[key: string]: any});\n\n  return _encodeImageNode\n    ? _encodeImageNode(image, {type: options.image.mimeType})\n    : encodeImageInBrowser(image, options);\n}\n\n// In case we get exceptions from canvas.toBlob(resolve, type, quality)\nlet qualityParamSupported = true;\n\n/**\n *\n * @param image\n * @param options\n * @note Based on canvas.toBlob\n * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toBlob\n */\nasync function encodeImageInBrowser(image, options) {\n  const {mimeType, jpegQuality} = options.image;\n\n  const {width, height} = getImageSize(image);\n\n  // create a canvas and resize it to the size of our image\n  const canvas = document.createElement('canvas');\n  canvas.width = width;\n  canvas.height = height;\n\n  drawImageToCanvas(image, canvas);\n\n  // The actual encoding is done asynchronously with `canvas.toBlob()`\n  const blob = await new Promise<Blob | null>((resolve) => {\n    // get it back as a Blob\n    if (jpegQuality && qualityParamSupported) {\n      try {\n        canvas.toBlob(resolve, mimeType, jpegQuality);\n        return;\n      } catch (error) {\n        qualityParamSupported = false;\n      }\n    }\n    canvas.toBlob(resolve, mimeType);\n  });\n\n  if (!blob) {\n    throw new Error('image encoding failed');\n  }\n\n  return await blob.arrayBuffer();\n}\n\nfunction drawImageToCanvas(image, canvas, x = 0, y = 0) {\n  // Try optimized path for ImageBitmaps via bitmaprenderer context\n  if (x === 0 && y === 0 && typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) {\n    const context = canvas.getContext('bitmaprenderer');\n    if (context) {\n      // transfer the ImageBitmap to it\n      context.transferFromImageBitmap(image);\n      return canvas;\n    }\n  }\n\n  // Available on most platforms, except IE11 and Andriod WebViews...\n  const context = canvas.getContext('2d');\n  if (image.data) {\n    // ImageData constructor expects clamped array even though getImageData does not return a clamped array...\n    const clampedArray = new Uint8ClampedArray(image.data);\n    const imageData = new ImageData(clampedArray, image.width, image.height);\n    context.putImageData(imageData, 0, 0);\n    return canvas;\n  }\n\n  // Fall back to generic image/image bitmap rendering path\n  context.drawImage(image, 0, 0);\n  return canvas;\n}\n"],"file":"encode-image.js"}