{"version":3,"sources":["../../../../src/lib/parsers/parse-to-node-image.ts"],"names":["parseToNodeImage","arrayBuffer","options","mimeType","_parseImageNode","globalThis"],"mappings":";;;;;;;;;;;;;AAEA;;AACA;;SAgB8BA,gB;;;;;gFAAf,iBACbC,WADa,EAEbC,OAFa;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,mBAIM,4CAAuBD,WAAvB,KAAuC,EAJ7C,EAINE,QAJM,QAINA,QAJM;AAOPC,YAAAA,eAPO,GAO2BC,UAAU,CAACD,eAPtC;AAQb,qCAAOA,eAAP;AARa;AAAA,mBAWAA,eAAe,CAACH,WAAD,EAAcE,QAAd,CAXf;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import type {ImageLoaderOptions} from '../../image-loader';\nimport type {ImageDataType} from '../../types';\nimport {assert} from '@loaders.gl/loader-utils';\nimport {getBinaryImageMetadata} from '../category-api/binary-image-api';\n\n// Note: These types should be consistent with loaders.gl/polyfills\n\ntype NDArray = {\n  shape: number[];\n  data: Uint8Array;\n  width: number;\n  height: number;\n  components: number;\n  layers: number[];\n};\n\ntype ParseImageNode = (arrayBuffer: ArrayBuffer, mimeType: string) => Promise<NDArray>;\n\n// Use polyfills if installed to parsed image using get-pixels\nexport default async function parseToNodeImage(\n  arrayBuffer: ArrayBuffer,\n  options: ImageLoaderOptions\n): Promise<ImageDataType> {\n  const {mimeType} = getBinaryImageMetadata(arrayBuffer) || {};\n\n  // @ts-ignore\n  const _parseImageNode: ParseImageNode = globalThis._parseImageNode;\n  assert(_parseImageNode); // '@loaders.gl/polyfills not installed'\n\n  // @ts-expect-error TODO should we throw error in this case?\n  return await _parseImageNode(arrayBuffer, mimeType);\n}\n"],"file":"parse-to-node-image.js"}