{"version":3,"sources":["../../../../src/lib/parsers/parse-to-image-bitmap.ts"],"names":["EMPTY_OBJECT","imagebitmapOptionsSupported","parseToImageBitmap","arrayBuffer","options","url","image","blob","imagebitmapOptions","imagebitmap","safeCreateImageBitmap","isEmptyObject","createImageBitmap","console","warn","object","key"],"mappings":";;;;;;;;;;;;;AACA;;AACA;;AAEA,IAAMA,YAAY,GAAG,EAArB;AAEA,IAAIC,2BAA2B,GAAG,IAAlC;;SAS8BC,kB;;;;;kFAAf,iBACbC,WADa,EAEbC,OAFa,EAGbC,GAHa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAQT,qBAAMA,GAAN,CARS;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAUS,2BAAaF,WAAb,EAA0BC,OAA1B,EAAmCC,GAAnC,CAVT;;AAAA;AAULC,YAAAA,KAVK;AAWXC,YAAAA,IAAI,GAAGD,KAAP;AAXW;AAAA;;AAAA;AAcXC,YAAAA,IAAI,GAAG,uBAAQJ,WAAR,EAAqBE,GAArB,CAAP;;AAdW;AAiBPG,YAAAA,kBAjBO,GAiBcJ,OAAO,IAAIA,OAAO,CAACK,WAjBjC;AAAA;AAAA,mBAmBAC,qBAAqB,CAACH,IAAD,EAAOC,kBAAP,CAnBrB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SA4BAE,qB;;;;;qFAAf,kBACEH,IADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEEC,YAAAA,kBAFF,8DAEkD,IAFlD;;AAIE,gBAAIG,aAAa,CAACH,kBAAD,CAAb,IAAqC,CAACP,2BAA1C,EAAuE;AACrEO,cAAAA,kBAAkB,GAAG,IAArB;AACD;;AANH,iBAQMA,kBARN;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,mBAWmBI,iBAAiB,CAACL,IAAD,EAAOC,kBAAP,CAXpC;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAaMK,YAAAA,OAAO,CAACC,IAAR;AACAb,YAAAA,2BAA2B,GAAG,KAA9B;;AAdN;AAAA;AAAA,mBAkBeW,iBAAiB,CAACL,IAAD,CAlBhC;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAqBA,SAASI,aAAT,CAAuBI,MAAvB,EAA+B;AAE7B,OAAK,IAAMC,GAAX,IAAkBD,MAAM,IAAIf,YAA5B,EAA0C;AACxC,WAAO,KAAP;AACD;;AACD,SAAO,IAAP;AACD","sourcesContent":["import type {ImageLoaderOptions} from '../../image-loader';\nimport {isSVG, getBlob} from './svg-utils';\nimport parseToImage from './parse-to-image';\n\nconst EMPTY_OBJECT = {};\n\nlet imagebitmapOptionsSupported = true;\n\n/**\n * Asynchronously parses an array buffer into an ImageBitmap - this contains the decoded data\n * ImageBitmaps are supported on worker threads, but not supported on Edge, IE11 and Safari\n * https://developer.mozilla.org/en-US/docs/Web/API/ImageBitmap#Browser_compatibility\n *\n * TODO - createImageBitmap supports source rect (5 param overload), pass through?\n */\nexport default async function parseToImageBitmap(\n  arrayBuffer: ArrayBuffer,\n  options: ImageLoaderOptions,\n  url?: string\n): Promise<ImageBitmap> {\n  let blob;\n\n  // Cannot parse SVG directly to ImageBitmap, parse to Image first\n  if (isSVG(url)) {\n    // Note: this only works on main thread\n    const image = await parseToImage(arrayBuffer, options, url);\n    blob = image;\n  } else {\n    // Create blob from the array buffer\n    blob = getBlob(arrayBuffer, url);\n  }\n\n  const imagebitmapOptions = options && options.imagebitmap;\n\n  return await safeCreateImageBitmap(blob, imagebitmapOptions);\n}\n\n/**\n * Safely creates an imageBitmap with options\n * *\n * Firefox crashes if imagebitmapOptions is supplied\n * Avoid supplying if not provided or supported, remember if not supported\n */\nasync function safeCreateImageBitmap(\n  blob: Blob,\n  imagebitmapOptions: ImageBitmapOptions | null = null\n): Promise<ImageBitmap> {\n  if (isEmptyObject(imagebitmapOptions) || !imagebitmapOptionsSupported) {\n    imagebitmapOptions = null;\n  }\n\n  if (imagebitmapOptions) {\n    try {\n      // @ts-ignore Options\n      return await createImageBitmap(blob, imagebitmapOptions);\n    } catch (error) {\n      console.warn(error); // eslint-disable-line\n      imagebitmapOptionsSupported = false;\n    }\n  }\n\n  return await createImageBitmap(blob);\n}\n\nfunction isEmptyObject(object) {\n  // @ts-ignore\n  for (const key in object || EMPTY_OBJECT) {\n    return false;\n  }\n  return true;\n}\n"],"file":"parse-to-image-bitmap.js"}