{"version":3,"sources":["../../../src/lib/draco-builder.ts"],"names":["GLTF_TO_DRACO_ATTRIBUTE_NAME_MAP","POSITION","NORMAL","COLOR_0","TEXCOORD_0","noop","DracoBuilder","draco","dracoEncoder","Encoder","dracoMeshBuilder","MeshBuilder","dracoMetadataBuilder","MetadataBuilder","destroyEncodedObject","object","destroy","mesh","options","log","_setOptions","pointcloud","_encodePointCloud","_encodeMesh","attributes","indices","dracoPointCloud","PointCloud","metadata","_addGeometryMetadata","_getAttributesFromMesh","_createDracoPointCloud","dracoData","DracoInt8Array","encodedLen","EncodePointCloudToDracoBuffer","Error","num_points","num_attributes","dracoInt8ArrayToArrayBuffer","dracoMesh","Mesh","_createDracoMesh","EncodeMeshToDracoBuffer","SetSpeedOptions","speed","dracoMethod","method","SetEncodingMethod","attribute","quantization","bits","dracoPosition","SetAttributeQuantization","optionalMetadata","attributesMetadata","positions","_getPositionAttribute","vertexCount","length","attributeName","uniqueId","_addAttributeToMesh","_addAttributeMetadata","name","error","ArrayBuffer","isView","type","_getDracoAttributeType","size","numFaces","AddFacesToMesh","builder","buffer","constructor","Int8Array","AddInt8Attribute","Int16Array","AddInt16Attribute","Int32Array","AddInt32Attribute","Uint8Array","Uint8ClampedArray","AddUInt8Attribute","Uint16Array","AddUInt16Attribute","Uint32Array","AddUInt32Attribute","Float32Array","AddFloatAttribute","toLowerCase","COLOR","TEX_COORD","GENERIC","dracoType","dracoGeometry","dracoMetadata","Metadata","_populateDracoMetadata","AddMetadata","uniqueAttributeId","dracoAttributeMetadata","SetMetadataForAttribute","getEntries","key","value","Math","trunc","AddIntEntry","AddDoubleEntry","AddIntEntryArray","AddStringEntry","byteLength","outputBuffer","outputData","i","GetValue","container","hasEntriesFunc","entries","hasOwnProperty","Object"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA,IAAMA,gCAAgC,GAAG;AACvCC,EAAAA,QAAQ,EAAE,UAD6B;AAEvCC,EAAAA,MAAM,EAAE,QAF+B;AAGvCC,EAAAA,OAAO,EAAE,OAH8B;AAIvCC,EAAAA,UAAU,EAAE;AAJ2B,CAAzC;;AAOA,IAAMC,IAAI,GAAG,SAAPA,IAAO,GAAM,CAAE,CAArB;;IAEqBC,Y;AAQnB,wBAAYC,KAAZ,EAA4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAC1B,SAAKA,KAAL,GAAaA,KAAb;AACA,SAAKC,YAAL,GAAoB,IAAI,KAAKD,KAAL,CAAWE,OAAf,EAApB;AACA,SAAKC,gBAAL,GAAwB,IAAI,KAAKH,KAAL,CAAWI,WAAf,EAAxB;AACA,SAAKC,oBAAL,GAA4B,IAAI,KAAKL,KAAL,CAAWM,eAAf,EAA5B;AACD;;;;WAED,mBAAgB;AACd,WAAKC,oBAAL,CAA0B,KAAKJ,gBAA/B;AACA,WAAKI,oBAAL,CAA0B,KAAKN,YAA/B;AACA,WAAKM,oBAAL,CAA0B,KAAKF,oBAA/B;AAEA,WAAKF,gBAAL,GAAwB,IAAxB;AAEA,WAAKF,YAAL,GAAoB,IAApB;AAEA,WAAKD,KAAL,GAAa,IAAb;AACD;;;WAGD,8BAAqBQ,MAArB,EAAmC;AACjC,UAAIA,MAAJ,EAAY;AACV,aAAKR,KAAL,CAAWS,OAAX,CAAmBD,MAAnB;AACD;AACF;;;WAOD,oBAAWE,IAAX,EAA0E;AAAA,UAA9CC,OAA8C,uEAAjB,EAAiB;AACxE,WAAKC,GAAL,GAAWd,IAAX;;AACA,WAAKe,WAAL,CAAiBF,OAAjB;;AAEA,aAAOA,OAAO,CAACG,UAAR,GACH,KAAKC,iBAAL,CAAuBL,IAAvB,EAA6BC,OAA7B,CADG,GAEH,KAAKK,WAAL,CAAiBN,IAAjB,EAAuBC,OAAvB,CAFJ;AAGD;;;WAID,gCAAuBD,IAAvB,EAAwC;AAEtC,UAAMO,UAAU,mCAAOP,IAAP,GAAgBA,IAAI,CAACO,UAArB,CAAhB;;AAEA,UAAIP,IAAI,CAACQ,OAAT,EAAkB;AAChBD,QAAAA,UAAU,CAACC,OAAX,GAAqBR,IAAI,CAACQ,OAA1B;AACD;;AACD,aAAOD,UAAP;AACD;;;WAED,2BAAkBH,UAAlB,EAAyCH,OAAzC,EAAkF;AAChF,UAAMQ,eAAe,GAAG,IAAI,KAAKnB,KAAL,CAAWoB,UAAf,EAAxB;;AAEA,UAAIT,OAAO,CAACU,QAAZ,EAAsB;AACpB,aAAKC,oBAAL,CAA0BH,eAA1B,EAA2CR,OAAO,CAACU,QAAnD;AACD;;AAED,UAAMJ,UAAU,GAAG,KAAKM,sBAAL,CAA4BT,UAA5B,CAAnB;;AAGA,WAAKU,sBAAL,CAA4BL,eAA5B,EAA6CF,UAA7C,EAAyDN,OAAzD;;AAEA,UAAMc,SAAS,GAAG,IAAI,KAAKzB,KAAL,CAAW0B,cAAf,EAAlB;;AAEA,UAAI;AACF,YAAMC,UAAU,GAAG,KAAK1B,YAAL,CAAkB2B,6BAAlB,CACjBT,eADiB,EAEjB,KAFiB,EAGjBM,SAHiB,CAAnB;;AAMA,YAAI,EAAEE,UAAU,GAAG,CAAf,CAAJ,EAAuB;AACrB,gBAAM,IAAIE,KAAJ,CAAU,wBAAV,CAAN;AACD;;AAED,aAAKjB,GAAL,yBAA0BO,eAAe,CAACW,UAAhB,EAA1B,mCACSX,eAAe,CAACY,cAAhB,EADT,8BAC6DJ,UAD7D;AAGA,eAAOK,2BAA2B,CAACP,SAAD,CAAlC;AACD,OAfD,SAeU;AACR,aAAKlB,oBAAL,CAA0BkB,SAA1B;AACA,aAAKlB,oBAAL,CAA0BY,eAA1B;AACD;AACF;;;WAED,qBAAYT,IAAZ,EAA6BC,OAA7B,EAAsE;AACpE,UAAMsB,SAAS,GAAG,IAAI,KAAKjC,KAAL,CAAWkC,IAAf,EAAlB;;AAEA,UAAIvB,OAAO,CAACU,QAAZ,EAAsB;AACpB,aAAKC,oBAAL,CAA0BW,SAA1B,EAAqCtB,OAAO,CAACU,QAA7C;AACD;;AAED,UAAMJ,UAAU,GAAG,KAAKM,sBAAL,CAA4Bb,IAA5B,CAAnB;;AAGA,WAAKyB,gBAAL,CAAsBF,SAAtB,EAAiChB,UAAjC,EAA6CN,OAA7C;;AAEA,UAAMc,SAAS,GAAG,IAAI,KAAKzB,KAAL,CAAW0B,cAAf,EAAlB;;AAEA,UAAI;AACF,YAAMC,UAAU,GAAG,KAAK1B,YAAL,CAAkBmC,uBAAlB,CAA0CH,SAA1C,EAAqDR,SAArD,CAAnB;;AACA,YAAIE,UAAU,IAAI,CAAlB,EAAqB;AACnB,gBAAM,IAAIE,KAAJ,CAAU,wBAAV,CAAN;AACD;;AAED,aAAKjB,GAAL,yBAA0BqB,SAAS,CAACH,UAAV,EAA1B,mCACSG,SAAS,CAACF,cAAV,EADT,8BACuDJ,UADvD;AAGA,eAAOK,2BAA2B,CAACP,SAAD,CAAlC;AACD,OAVD,SAUU;AACR,aAAKlB,oBAAL,CAA0BkB,SAA1B;AACA,aAAKlB,oBAAL,CAA0B0B,SAA1B;AACD;AACF;;;WAMD,qBAAYtB,OAAZ,EAA8C;AAC5C,UAAI,WAAWA,OAAf,EAAwB;AAAA;;AAEtB,mCAAKV,YAAL,EAAkBoC,eAAlB,4DAAqC1B,OAAO,CAAC2B,KAA7C;AACD;;AACD,UAAI,YAAY3B,OAAhB,EAAyB;AACvB,YAAM4B,WAAW,GAAG,KAAKvC,KAAL,CAAWW,OAAO,CAAC6B,MAAR,IAAkB,0BAA7B,CAApB;AAEA,aAAKvC,YAAL,CAAkBwC,iBAAlB,CAAoCF,WAApC;AACD;;AACD,UAAI,kBAAkB5B,OAAtB,EAA+B;AAC7B,aAAK,IAAM+B,SAAX,IAAwB/B,OAAO,CAACgC,YAAhC,EAA8C;AAC5C,cAAMC,IAAI,GAAGjC,OAAO,CAACgC,YAAR,CAAqBD,SAArB,CAAb;AACA,cAAMG,aAAa,GAAG,KAAK7C,KAAL,CAAW0C,SAAX,CAAtB;AACA,eAAKzC,YAAL,CAAkB6C,wBAAlB,CAA2CD,aAA3C,EAA0DD,IAA1D;AACD;AACF;AACF;;;WAOD,0BAAiBX,SAAjB,EAAkChB,UAAlC,EAA8CN,OAA9C,EAAgF;AAC9E,UAAMoC,gBAAgB,GAAGpC,OAAO,CAACqC,kBAAR,IAA8B,EAAvD;;AAEA,UAAI;AACF,YAAMC,SAAS,GAAG,KAAKC,qBAAL,CAA2BjC,UAA3B,CAAlB;;AACA,YAAI,CAACgC,SAAL,EAAgB;AACd,gBAAM,IAAIpB,KAAJ,CAAU,WAAV,CAAN;AACD;;AACD,YAAMsB,WAAW,GAAGF,SAAS,CAACG,MAAV,GAAmB,CAAvC;;AAEA,aAAK,IAAIC,cAAT,IAA0BpC,UAA1B,EAAsC;AACpC,cAAMyB,SAAS,GAAGzB,UAAU,CAACoC,cAAD,CAA5B;AACAA,UAAAA,cAAa,GAAG5D,gCAAgC,CAAC4D,cAAD,CAAhC,IAAmDA,cAAnE;;AACA,cAAMC,QAAQ,GAAG,KAAKC,mBAAL,CAAyBtB,SAAzB,EAAoCoB,cAApC,EAAmDX,SAAnD,EAA8DS,WAA9D,CAAjB;;AAEA,cAAIG,QAAQ,KAAK,CAAC,CAAlB,EAAqB;AACnB,iBAAKE,qBAAL,CAA2BvB,SAA3B,EAAsCqB,QAAtC;AACEG,cAAAA,IAAI,EAAEJ;AADR,eAEMN,gBAAgB,CAACM,cAAD,CAAhB,IAAmC,EAFzC;AAID;AACF;AACF,OAnBD,CAmBE,OAAOK,KAAP,EAAc;AACd,aAAKnD,oBAAL,CAA0B0B,SAA1B;AACA,cAAMyB,KAAN;AACD;;AAED,aAAOzB,SAAP;AACD;;;WAMD,gCACEd,eADF,EAEEF,UAFF,EAGEN,OAHF,EAIc;AACZ,UAAMoC,gBAAgB,GAAGpC,OAAO,CAACqC,kBAAR,IAA8B,EAAvD;;AAEA,UAAI;AACF,YAAMC,SAAS,GAAG,KAAKC,qBAAL,CAA2BjC,UAA3B,CAAlB;;AACA,YAAI,CAACgC,SAAL,EAAgB;AACd,gBAAM,IAAIpB,KAAJ,CAAU,WAAV,CAAN;AACD;;AACD,YAAMsB,WAAW,GAAGF,SAAS,CAACG,MAAV,GAAmB,CAAvC;;AAEA,aAAK,IAAIC,eAAT,IAA0BpC,UAA1B,EAAsC;AACpC,cAAMyB,SAAS,GAAGzB,UAAU,CAACoC,eAAD,CAA5B;AACAA,UAAAA,eAAa,GAAG5D,gCAAgC,CAAC4D,eAAD,CAAhC,IAAmDA,eAAnE;;AACA,cAAMC,QAAQ,GAAG,KAAKC,mBAAL,CACfpC,eADe,EAEfkC,eAFe,EAGfX,SAHe,EAIfS,WAJe,CAAjB;;AAMA,cAAIG,QAAQ,KAAK,CAAC,CAAlB,EAAqB;AACnB,iBAAKE,qBAAL,CAA2BrC,eAA3B,EAA4CmC,QAA5C;AACEG,cAAAA,IAAI,EAAEJ;AADR,eAEMN,gBAAgB,CAACM,eAAD,CAAhB,IAAmC,EAFzC;AAID;AACF;AACF,OAvBD,CAuBE,OAAOK,KAAP,EAAc;AACd,aAAKnD,oBAAL,CAA0BY,eAA1B;AACA,cAAMuC,KAAN;AACD;;AAED,aAAOvC,eAAP;AACD;;;WAQD,6BACET,IADF,EAEE2C,aAFF,EAGEX,SAHF,EAIES,WAJF,EAKE;AACA,UAAI,CAACQ,WAAW,CAACC,MAAZ,CAAmBlB,SAAnB,CAAL,EAAoC;AAClC,eAAO,CAAC,CAAR;AACD;;AAED,UAAMmB,IAAI,GAAG,KAAKC,sBAAL,CAA4BT,aAA5B,CAAb;;AAEA,UAAMU,IAAI,GAAGrB,SAAS,CAACU,MAAV,GAAmBD,WAAhC;;AAEA,UAAIU,IAAI,KAAK,SAAb,EAAwB;AAEtB,YAAMG,QAAQ,GAAGtB,SAAS,CAACU,MAAV,GAAmB,CAApC;AACA,aAAKxC,GAAL,4BAA6ByC,aAA7B,oBAAoDW,QAApD;AAGA,aAAK7D,gBAAL,CAAsB8D,cAAtB,CAAqCvD,IAArC,EAA2CsD,QAA3C,EAAqDtB,SAArD;AACA,eAAO,CAAC,CAAR;AACD;;AAED,WAAK9B,GAAL,4BAA6ByC,aAA7B,oBAAoDU,IAApD;AAEA,UAAMG,OAAO,GAAG,KAAK/D,gBAArB;AACA,UAAOgE,MAAP,GAAiBzB,SAAjB,CAAOyB,MAAP;;AAEA,cAAQzB,SAAS,CAAC0B,WAAlB;AACE,aAAKC,SAAL;AACE,iBAAOH,OAAO,CAACI,gBAAR,CAAyB5D,IAAzB,EAA+BmD,IAA/B,EAAqCV,WAArC,EAAkDY,IAAlD,EAAwD,IAAIM,SAAJ,CAAcF,MAAd,CAAxD,CAAP;;AAEF,aAAKI,UAAL;AACE,iBAAOL,OAAO,CAACM,iBAAR,CAA0B9D,IAA1B,EAAgCmD,IAAhC,EAAsCV,WAAtC,EAAmDY,IAAnD,EAAyD,IAAIQ,UAAJ,CAAeJ,MAAf,CAAzD,CAAP;;AAEF,aAAKM,UAAL;AACE,iBAAOP,OAAO,CAACQ,iBAAR,CAA0BhE,IAA1B,EAAgCmD,IAAhC,EAAsCV,WAAtC,EAAmDY,IAAnD,EAAyD,IAAIU,UAAJ,CAAeN,MAAf,CAAzD,CAAP;;AACF,aAAKQ,UAAL;AACA,aAAKC,iBAAL;AACE,iBAAOV,OAAO,CAACW,iBAAR,CAA0BnE,IAA1B,EAAgCmD,IAAhC,EAAsCV,WAAtC,EAAmDY,IAAnD,EAAyD,IAAIY,UAAJ,CAAeR,MAAf,CAAzD,CAAP;;AAEF,aAAKW,WAAL;AACE,iBAAOZ,OAAO,CAACa,kBAAR,CAA2BrE,IAA3B,EAAiCmD,IAAjC,EAAuCV,WAAvC,EAAoDY,IAApD,EAA0D,IAAIe,WAAJ,CAAgBX,MAAhB,CAA1D,CAAP;;AAEF,aAAKa,WAAL;AACE,iBAAOd,OAAO,CAACe,kBAAR,CAA2BvE,IAA3B,EAAiCmD,IAAjC,EAAuCV,WAAvC,EAAoDY,IAApD,EAA0D,IAAIiB,WAAJ,CAAgBb,MAAhB,CAA1D,CAAP;;AAEF,aAAKe,YAAL;AACA;AACE,iBAAOhB,OAAO,CAACiB,iBAAR,CAA0BzE,IAA1B,EAAgCmD,IAAhC,EAAsCV,WAAtC,EAAmDY,IAAnD,EAAyD,IAAImB,YAAJ,CAAiBf,MAAjB,CAAzD,CAAP;AArBJ;AAuBD;;;WAOD,gCAAuBd,aAAvB,EAAwF;AACtF,cAAQA,aAAa,CAAC+B,WAAd,EAAR;AACE,aAAK,SAAL;AACE,iBAAO,SAAP;;AACF,aAAK,UAAL;AACA,aAAK,WAAL;AACA,aAAK,UAAL;AACE,iBAAO,KAAKpF,KAAL,CAAWN,QAAlB;;AACF,aAAK,QAAL;AACA,aAAK,SAAL;AACE,iBAAO,KAAKM,KAAL,CAAWL,MAAlB;;AACF,aAAK,OAAL;AACA,aAAK,QAAL;AACE,iBAAO,KAAKK,KAAL,CAAWqF,KAAlB;;AACF,aAAK,UAAL;AACA,aAAK,WAAL;AACE,iBAAO,KAAKrF,KAAL,CAAWsF,SAAlB;;AACF;AACE,iBAAO,KAAKtF,KAAL,CAAWuF,OAAlB;AAjBJ;AAmBD;;;WAED,+BAAsBtE,UAAtB,EAAkC;AAChC,WAAK,IAAMoC,eAAX,IAA4BpC,UAA5B,EAAwC;AACtC,YAAMyB,SAAS,GAAGzB,UAAU,CAACoC,eAAD,CAA5B;;AACA,YAAMmC,SAAS,GAAG,KAAK1B,sBAAL,CAA4BT,eAA5B,CAAlB;;AACA,YAAImC,SAAS,KAAK,KAAKxF,KAAL,CAAWN,QAA7B,EAAuC;AACrC,iBAAOgD,SAAP;AACD;AACF;;AACD,aAAO,IAAP;AACD;;;WAOD,8BAAqB+C,aAArB,EAAgDpE,QAAhD,EAAmF;AACjF,UAAMqE,aAAa,GAAG,IAAI,KAAK1F,KAAL,CAAW2F,QAAf,EAAtB;;AACA,WAAKC,sBAAL,CAA4BF,aAA5B,EAA2CrE,QAA3C;;AACA,WAAKlB,gBAAL,CAAsB0F,WAAtB,CAAkCJ,aAAlC,EAAiDC,aAAjD;AACD;;;WAQD,+BACED,aADF,EAEEK,iBAFF,EAGEzE,QAHF,EAIE;AAGA,UAAM0E,sBAAsB,GAAG,IAAI,KAAK/F,KAAL,CAAW2F,QAAf,EAA/B;;AACA,WAAKC,sBAAL,CAA4BG,sBAA5B,EAAoD1E,QAApD;;AAGA,WAAKlB,gBAAL,CAAsB6F,uBAAtB,CACEP,aADF,EAEEK,iBAFF,EAGEC,sBAHF;AAKD;;;WAOD,gCACEL,aADF,EAEErE,QAFF,EAGE;AAAA,iDAC2B4E,UAAU,CAAC5E,QAAD,CADrC;AAAA;;AAAA;AACA,4DAAiD;AAAA;AAAA,cAArC6E,IAAqC;AAAA,cAAhCC,KAAgC;;AAC/C,wCAAeA,KAAf;AACE,iBAAK,QAAL;AACE,kBAAIC,IAAI,CAACC,KAAL,CAAWF,KAAX,MAAsBA,KAA1B,EAAiC;AAC/B,qBAAK9F,oBAAL,CAA0BiG,WAA1B,CAAsCZ,aAAtC,EAAqDQ,IAArD,EAA0DC,KAA1D;AACD,eAFD,MAEO;AACL,qBAAK9F,oBAAL,CAA0BkG,cAA1B,CAAyCb,aAAzC,EAAwDQ,IAAxD,EAA6DC,KAA7D;AACD;;AACD;;AACF,iBAAK,QAAL;AACE,kBAAIA,KAAK,YAAY1B,UAArB,EAAiC;AAC/B,qBAAKpE,oBAAL,CAA0BmG,gBAA1B,CAA2Cd,aAA3C,EAA0DQ,IAA1D,EAA+DC,KAA/D,EAAsEA,KAAK,CAAC/C,MAA5E;AACD;;AACD;;AACF,iBAAK,QAAL;AACA;AACE,mBAAK/C,oBAAL,CAA0BoG,cAA1B,CAAyCf,aAAzC,EAAwDQ,IAAxD,EAA6DC,KAA7D;AAfJ;AAiBD;AAnBD;AAAA;AAAA;AAAA;AAAA;AAoBD;;;;;;;AASH,SAASnE,2BAAT,CAAqCP,SAArC,EAAgE;AAC9D,MAAMiF,UAAU,GAAGjF,SAAS,CAACsC,IAAV,EAAnB;AACA,MAAM4C,YAAY,GAAG,IAAIhD,WAAJ,CAAgB+C,UAAhB,CAArB;AACA,MAAME,UAAU,GAAG,IAAIvC,SAAJ,CAAcsC,YAAd,CAAnB;;AACA,OAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,UAApB,EAAgC,EAAEG,CAAlC,EAAqC;AACnCD,IAAAA,UAAU,CAACC,CAAD,CAAV,GAAgBpF,SAAS,CAACqF,QAAV,CAAmBD,CAAnB,CAAhB;AACD;;AACD,SAAOF,YAAP;AACD;;AAGD,SAASV,UAAT,CAAoBc,SAApB,EAA+B;AAC7B,MAAMC,cAAc,GAAGD,SAAS,CAACE,OAAV,IAAqB,CAACF,SAAS,CAACG,cAAV,CAAyB,SAAzB,CAA7C;AACA,SAAOF,cAAc,GAAGD,SAAS,CAACE,OAAV,EAAH,GAAyBE,MAAM,CAACF,OAAP,CAAeF,SAAf,CAA9C;AACD","sourcesContent":["/* eslint-disable camelcase */\n// This code is inspired by example code in the DRACO repository\nimport type {\n  Draco3D,\n  DracoInt8Array,\n  Encoder,\n  Mesh,\n  MeshBuilder,\n  PointCloud,\n  Metadata,\n  MetadataBuilder,\n  draco_GeometryAttribute_Type\n} from '../draco3d/draco3d-types';\n\nimport type {TypedArray} from '@loaders.gl/schema';\nimport type {DracoMesh} from './draco-types';\n\nexport type DracoBuildOptions = {\n  pointcloud?: boolean;\n  metadata?: {[key: string]: string};\n  attributesMetadata?: {};\n  log?: any;\n\n  // draco encoding options\n  speed?: [number, number];\n  method?: string;\n  quantization?: {[attributeName: string]: number};\n};\n\n// Native Draco attribute names to GLTF attribute names.\nconst GLTF_TO_DRACO_ATTRIBUTE_NAME_MAP = {\n  POSITION: 'POSITION',\n  NORMAL: 'NORMAL',\n  COLOR_0: 'COLOR',\n  TEXCOORD_0: 'TEX_COORD'\n};\n\nconst noop = () => {};\n\nexport default class DracoBuilder {\n  draco: Draco3D;\n  dracoEncoder: Encoder;\n  dracoMeshBuilder: MeshBuilder;\n  dracoMetadataBuilder: MetadataBuilder;\n  log: any;\n\n  // draco - the draco decoder, either import `draco3d` or load dynamically\n  constructor(draco: Draco3D) {\n    this.draco = draco;\n    this.dracoEncoder = new this.draco.Encoder();\n    this.dracoMeshBuilder = new this.draco.MeshBuilder();\n    this.dracoMetadataBuilder = new this.draco.MetadataBuilder();\n  }\n\n  destroy(): void {\n    this.destroyEncodedObject(this.dracoMeshBuilder);\n    this.destroyEncodedObject(this.dracoEncoder);\n    this.destroyEncodedObject(this.dracoMetadataBuilder);\n    // @ts-ignore\n    this.dracoMeshBuilder = null;\n    // @ts-ignore\n    this.dracoEncoder = null;\n    // @ts-ignore\n    this.draco = null;\n  }\n\n  // TBD - when does this need to be called?\n  destroyEncodedObject(object): void {\n    if (object) {\n      this.draco.destroy(object);\n    }\n  }\n\n  /**\n   * Encode mesh or point cloud\n   * @param mesh =({})\n   * @param options\n   */\n  encodeSync(mesh: DracoMesh, options: DracoBuildOptions = {}): ArrayBuffer {\n    this.log = noop; // TODO\n    this._setOptions(options);\n\n    return options.pointcloud\n      ? this._encodePointCloud(mesh, options)\n      : this._encodeMesh(mesh, options);\n  }\n\n  // PRIVATE\n\n  _getAttributesFromMesh(mesh: DracoMesh) {\n    // TODO - Change the encodePointCloud interface instead?\n    const attributes = {...mesh, ...mesh.attributes};\n    // Fold indices into the attributes\n    if (mesh.indices) {\n      attributes.indices = mesh.indices;\n    }\n    return attributes;\n  }\n\n  _encodePointCloud(pointcloud: DracoMesh, options: DracoBuildOptions): ArrayBuffer {\n    const dracoPointCloud = new this.draco.PointCloud();\n\n    if (options.metadata) {\n      this._addGeometryMetadata(dracoPointCloud, options.metadata);\n    }\n\n    const attributes = this._getAttributesFromMesh(pointcloud);\n\n    // Build a `DracoPointCloud` from the input data\n    this._createDracoPointCloud(dracoPointCloud, attributes, options);\n\n    const dracoData = new this.draco.DracoInt8Array();\n\n    try {\n      const encodedLen = this.dracoEncoder.EncodePointCloudToDracoBuffer(\n        dracoPointCloud,\n        false,\n        dracoData\n      );\n\n      if (!(encodedLen > 0)) {\n        throw new Error('Draco encoding failed.');\n      }\n\n      this.log(`DRACO encoded ${dracoPointCloud.num_points()} points\n        with ${dracoPointCloud.num_attributes()} attributes into ${encodedLen} bytes`);\n\n      return dracoInt8ArrayToArrayBuffer(dracoData);\n    } finally {\n      this.destroyEncodedObject(dracoData);\n      this.destroyEncodedObject(dracoPointCloud);\n    }\n  }\n\n  _encodeMesh(mesh: DracoMesh, options: DracoBuildOptions): ArrayBuffer {\n    const dracoMesh = new this.draco.Mesh();\n\n    if (options.metadata) {\n      this._addGeometryMetadata(dracoMesh, options.metadata);\n    }\n\n    const attributes = this._getAttributesFromMesh(mesh);\n\n    // Build a `DracoMesh` from the input data\n    this._createDracoMesh(dracoMesh, attributes, options);\n\n    const dracoData = new this.draco.DracoInt8Array();\n\n    try {\n      const encodedLen = this.dracoEncoder.EncodeMeshToDracoBuffer(dracoMesh, dracoData);\n      if (encodedLen <= 0) {\n        throw new Error('Draco encoding failed.');\n      }\n\n      this.log(`DRACO encoded ${dracoMesh.num_points()} points\n        with ${dracoMesh.num_attributes()} attributes into ${encodedLen} bytes`);\n\n      return dracoInt8ArrayToArrayBuffer(dracoData);\n    } finally {\n      this.destroyEncodedObject(dracoData);\n      this.destroyEncodedObject(dracoMesh);\n    }\n  }\n\n  /**\n   * Set encoding options.\n   * @param {{speed?: any; method?: any; quantization?: any;}} options\n   */\n  _setOptions(options: DracoBuildOptions): void {\n    if ('speed' in options) {\n      // @ts-ignore\n      this.dracoEncoder.SetSpeedOptions(...options.speed);\n    }\n    if ('method' in options) {\n      const dracoMethod = this.draco[options.method || 'MESH_SEQUENTIAL_ENCODING'];\n      // assert(dracoMethod)\n      this.dracoEncoder.SetEncodingMethod(dracoMethod);\n    }\n    if ('quantization' in options) {\n      for (const attribute in options.quantization) {\n        const bits = options.quantization[attribute];\n        const dracoPosition = this.draco[attribute];\n        this.dracoEncoder.SetAttributeQuantization(dracoPosition, bits);\n      }\n    }\n  }\n\n  /**\n   * @param {Mesh} dracoMesh\n   * @param {object} attributes\n   * @returns {Mesh}\n   */\n  _createDracoMesh(dracoMesh: Mesh, attributes, options: DracoBuildOptions): Mesh {\n    const optionalMetadata = options.attributesMetadata || {};\n\n    try {\n      const positions = this._getPositionAttribute(attributes);\n      if (!positions) {\n        throw new Error('positions');\n      }\n      const vertexCount = positions.length / 3;\n\n      for (let attributeName in attributes) {\n        const attribute = attributes[attributeName];\n        attributeName = GLTF_TO_DRACO_ATTRIBUTE_NAME_MAP[attributeName] || attributeName;\n        const uniqueId = this._addAttributeToMesh(dracoMesh, attributeName, attribute, vertexCount);\n\n        if (uniqueId !== -1) {\n          this._addAttributeMetadata(dracoMesh, uniqueId, {\n            name: attributeName,\n            ...(optionalMetadata[attributeName] || {})\n          });\n        }\n      }\n    } catch (error) {\n      this.destroyEncodedObject(dracoMesh);\n      throw error;\n    }\n\n    return dracoMesh;\n  }\n\n  /**\n   * @param {} dracoPointCloud\n   * @param {object} attributes\n   */\n  _createDracoPointCloud(\n    dracoPointCloud: PointCloud,\n    attributes: object,\n    options: DracoBuildOptions\n  ): PointCloud {\n    const optionalMetadata = options.attributesMetadata || {};\n\n    try {\n      const positions = this._getPositionAttribute(attributes);\n      if (!positions) {\n        throw new Error('positions');\n      }\n      const vertexCount = positions.length / 3;\n\n      for (let attributeName in attributes) {\n        const attribute = attributes[attributeName];\n        attributeName = GLTF_TO_DRACO_ATTRIBUTE_NAME_MAP[attributeName] || attributeName;\n        const uniqueId = this._addAttributeToMesh(\n          dracoPointCloud,\n          attributeName,\n          attribute,\n          vertexCount\n        );\n        if (uniqueId !== -1) {\n          this._addAttributeMetadata(dracoPointCloud, uniqueId, {\n            name: attributeName,\n            ...(optionalMetadata[attributeName] || {})\n          });\n        }\n      }\n    } catch (error) {\n      this.destroyEncodedObject(dracoPointCloud);\n      throw error;\n    }\n\n    return dracoPointCloud;\n  }\n\n  /**\n   * @param mesh\n   * @param attributeName\n   * @param attribute\n   * @param vertexCount\n   */\n  _addAttributeToMesh(\n    mesh: PointCloud,\n    attributeName: string,\n    attribute: TypedArray,\n    vertexCount: number\n  ) {\n    if (!ArrayBuffer.isView(attribute)) {\n      return -1;\n    }\n\n    const type = this._getDracoAttributeType(attributeName);\n    // @ts-ignore TODO/fix types\n    const size = attribute.length / vertexCount;\n\n    if (type === 'indices') {\n      // @ts-ignore TODO/fix types\n      const numFaces = attribute.length / 3;\n      this.log(`Adding attribute ${attributeName}, size ${numFaces}`);\n\n      // @ts-ignore assumes mesh is a Mesh, not a point cloud\n      this.dracoMeshBuilder.AddFacesToMesh(mesh, numFaces, attribute);\n      return -1;\n    }\n\n    this.log(`Adding attribute ${attributeName}, size ${size}`);\n\n    const builder = this.dracoMeshBuilder;\n    const {buffer} = attribute;\n\n    switch (attribute.constructor) {\n      case Int8Array:\n        return builder.AddInt8Attribute(mesh, type, vertexCount, size, new Int8Array(buffer));\n\n      case Int16Array:\n        return builder.AddInt16Attribute(mesh, type, vertexCount, size, new Int16Array(buffer));\n\n      case Int32Array:\n        return builder.AddInt32Attribute(mesh, type, vertexCount, size, new Int32Array(buffer));\n      case Uint8Array:\n      case Uint8ClampedArray:\n        return builder.AddUInt8Attribute(mesh, type, vertexCount, size, new Uint8Array(buffer));\n\n      case Uint16Array:\n        return builder.AddUInt16Attribute(mesh, type, vertexCount, size, new Uint16Array(buffer));\n\n      case Uint32Array:\n        return builder.AddUInt32Attribute(mesh, type, vertexCount, size, new Uint32Array(buffer));\n\n      case Float32Array:\n      default:\n        return builder.AddFloatAttribute(mesh, type, vertexCount, size, new Float32Array(buffer));\n    }\n  }\n\n  /**\n   * DRACO can compress attributes of know type better\n   * TODO - expose an attribute type map?\n   * @param attributeName\n   */\n  _getDracoAttributeType(attributeName: string): draco_GeometryAttribute_Type | 'indices' {\n    switch (attributeName.toLowerCase()) {\n      case 'indices':\n        return 'indices';\n      case 'position':\n      case 'positions':\n      case 'vertices':\n        return this.draco.POSITION;\n      case 'normal':\n      case 'normals':\n        return this.draco.NORMAL;\n      case 'color':\n      case 'colors':\n        return this.draco.COLOR;\n      case 'texcoord':\n      case 'texcoords':\n        return this.draco.TEX_COORD;\n      default:\n        return this.draco.GENERIC;\n    }\n  }\n\n  _getPositionAttribute(attributes) {\n    for (const attributeName in attributes) {\n      const attribute = attributes[attributeName];\n      const dracoType = this._getDracoAttributeType(attributeName);\n      if (dracoType === this.draco.POSITION) {\n        return attribute;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Add metadata for the geometry.\n   * @param dracoGeometry - WASM Draco Object\n   * @param metadata\n   */\n  _addGeometryMetadata(dracoGeometry: PointCloud, metadata: {[key: string]: string}) {\n    const dracoMetadata = new this.draco.Metadata();\n    this._populateDracoMetadata(dracoMetadata, metadata);\n    this.dracoMeshBuilder.AddMetadata(dracoGeometry, dracoMetadata);\n  }\n\n  /**\n   * Add metadata for an attribute to geometry.\n   * @param dracoGeometry - WASM Draco Object\n   * @param uniqueAttributeId\n   * @param metadata\n   */\n  _addAttributeMetadata(\n    dracoGeometry: PointCloud,\n    uniqueAttributeId: number,\n    metadata: Map<string, string> | {[key: string]: string}\n  ) {\n    // Note: Draco JS IDL doesn't seem to expose draco.AttributeMetadata, however it seems to\n    // create such objects automatically from draco.Metadata object.\n    const dracoAttributeMetadata = new this.draco.Metadata();\n    this._populateDracoMetadata(dracoAttributeMetadata, metadata);\n    // Draco3d doc note: Directly add attribute metadata to geometry.\n    // You can do this without explicitly adding |GeometryMetadata| to mesh.\n    this.dracoMeshBuilder.SetMetadataForAttribute(\n      dracoGeometry,\n      uniqueAttributeId,\n      dracoAttributeMetadata\n    );\n  }\n\n  /**\n   * Add contents of object or map to a WASM Draco Metadata Object\n   * @param dracoMetadata - WASM Draco Object\n   * @param metadata\n   */\n  _populateDracoMetadata(\n    dracoMetadata: Metadata,\n    metadata: Map<string, string> | {[key: string]: string}\n  ) {\n    for (const [key, value] of getEntries(metadata)) {\n      switch (typeof value) {\n        case 'number':\n          if (Math.trunc(value) === value) {\n            this.dracoMetadataBuilder.AddIntEntry(dracoMetadata, key, value);\n          } else {\n            this.dracoMetadataBuilder.AddDoubleEntry(dracoMetadata, key, value);\n          }\n          break;\n        case 'object':\n          if (value instanceof Int32Array) {\n            this.dracoMetadataBuilder.AddIntEntryArray(dracoMetadata, key, value, value.length);\n          }\n          break;\n        case 'string':\n        default:\n          this.dracoMetadataBuilder.AddStringEntry(dracoMetadata, key, value);\n      }\n    }\n  }\n}\n\n// HELPER FUNCTIONS\n\n/**\n * Copy encoded data to buffer\n * @param dracoData\n */\nfunction dracoInt8ArrayToArrayBuffer(dracoData: DracoInt8Array) {\n  const byteLength = dracoData.size();\n  const outputBuffer = new ArrayBuffer(byteLength);\n  const outputData = new Int8Array(outputBuffer);\n  for (let i = 0; i < byteLength; ++i) {\n    outputData[i] = dracoData.GetValue(i);\n  }\n  return outputBuffer;\n}\n\n/** Enable iteration over either an object or a map */\nfunction getEntries(container) {\n  const hasEntriesFunc = container.entries && !container.hasOwnProperty('entries');\n  return hasEntriesFunc ? container.entries() : Object.entries(container);\n}\n"],"file":"draco-builder.js"}