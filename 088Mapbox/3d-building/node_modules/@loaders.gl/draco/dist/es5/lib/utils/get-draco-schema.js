"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getDracoSchema = getDracoSchema;

var _schema = require("@loaders.gl/schema");

function getDracoSchema(attributes, loaderData, indices) {
  var metadataMap = makeMetadata(loaderData.metadata);
  var fields = [];
  var namedLoaderDataAttributes = transformAttributesLoaderData(loaderData.attributes);

  for (var _attributeName in attributes) {
    var attribute = attributes[_attributeName];
    var field = getArrowFieldFromAttribute(_attributeName, attribute, namedLoaderDataAttributes[_attributeName]);
    fields.push(field);
  }

  if (indices) {
    var indicesField = getArrowFieldFromAttribute('indices', indices);
    fields.push(indicesField);
  }

  return new _schema.Schema(fields, metadataMap);
}

function transformAttributesLoaderData(loaderData) {
  var result = {};

  for (var _key in loaderData) {
    var dracoAttribute = loaderData[_key];
    result[dracoAttribute.name || 'undefined'] = dracoAttribute;
  }

  return result;
}

function getArrowFieldFromAttribute(attributeName, attribute, loaderData) {
  var metadataMap = loaderData ? makeMetadata(loaderData.metadata) : undefined;
  var field = (0, _schema.deduceMeshField)(attributeName, attribute, metadataMap);
  return field;
}

function makeMetadata(metadata) {
  var metadataMap = new Map();

  for (var _key2 in metadata) {
    metadataMap.set("".concat(_key2, ".string"), JSON.stringify(metadata[_key2]));
  }

  return metadataMap;
}
//# sourceMappingURL=get-draco-schema.js.map