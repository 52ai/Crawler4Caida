{"version":3,"sources":["../../../src/workers/draco-writer-nodejs-worker.ts"],"names":["WorkerBody","DracoWriterNodeJS","inWorkerThread","onmessage","type","payload","input","options","result","encode","postMessage","error","message","Error"],"mappings":"AAAA,SAAQA,UAAR,QAA+C,0BAA/C;AACA,SAAQC,iBAAR,QAAgC,wBAAhC;;AAEA,CAAC,MAAM;AAEL,MAAI,CAACD,UAAU,CAACE,cAAX,EAAL,EAAkC;AAChC;AACD;;AAEDF,EAAAA,UAAU,CAACG,SAAX,GAAuB,OAAOC,IAAP,EAAaC,OAAb,KAA+C;AACpE,YAAQD,IAAR;AACE,WAAK,SAAL;AACE,YAAI;AACF,gBAAM;AAACE,YAAAA,KAAD;AAAQC,YAAAA;AAAR,cAAmBF,OAAzB;AACA,gBAAMG,MAAM,GAAG,MAAMP,iBAAiB,CAACQ,MAAlB,CAA0BH,KAA1B,EAAiCC,OAAjC,CAArB;AACAP,UAAAA,UAAU,CAACU,WAAX,CAAuB,MAAvB,EAA+B;AAACF,YAAAA;AAAD,WAA/B;AACD,SAJD,CAIE,OAAOG,KAAP,EAAc;AACd,gBAAMC,OAAO,GAAGD,KAAK,YAAYE,KAAjB,GAAyBF,KAAK,CAACC,OAA/B,GAAyC,EAAzD;AACAZ,UAAAA,UAAU,CAACU,WAAX,CAAuB,OAAvB,EAAgC;AAACC,YAAAA,KAAK,EAAEC;AAAR,WAAhC;AACD;;AACD;;AACF;AAXF;AAaD,GAdD;AAeD,CArBD","sourcesContent":["import {WorkerBody, WorkerMessagePayload} from '@loaders.gl/worker-utils';\nimport {DracoWriterNodeJS} from '../draco-writer-nodejs';\n\n(() => {\n  // Check that we are actually in a worker thread\n  if (!WorkerBody.inWorkerThread()) {\n    return;\n  }\n\n  WorkerBody.onmessage = async (type, payload: WorkerMessagePayload) => {\n    switch (type) {\n      case 'process':\n        try {\n          const {input, options} = payload;\n          const result = await DracoWriterNodeJS.encode!(input, options);\n          WorkerBody.postMessage('done', {result});\n        } catch (error) {\n          const message = error instanceof Error ? error.message : '';\n          WorkerBody.postMessage('error', {error: message});\n        }\n        break;\n      default:\n    }\n  };\n})();\n"],"file":"draco-writer-nodejs-worker.js"}