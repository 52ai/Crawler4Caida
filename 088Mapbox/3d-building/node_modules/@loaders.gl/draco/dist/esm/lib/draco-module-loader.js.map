{"version":3,"sources":["../../../src/lib/draco-module-loader.ts"],"names":["loadLibrary","DRACO_VERSION","DRACO_JS_DECODER_URL","DRACO_WASM_WRAPPER_URL","DRACO_WASM_DECODER_URL","DRACO_ENCODER_URL","loadDecoderPromise","loadEncoderPromise","loadDracoDecoderModule","options","modules","draco3d","createDecoderModule","then","draco","loadDracoDecoder","loadDracoEncoderModule","createEncoderModule","loadDracoEncoder","DracoDecoderModule","wasmBinary","decoderType","Promise","all","globalThis","initializeDracoDecoder","resolve","onModuleLoaded","DracoEncoderModule"],"mappings":"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","sourcesContent":["// Dynamic DRACO module loading inspired by THREE.DRACOLoader\n// https://github.com/mrdoob/three.js/blob/398c4f39ebdb8b23eefd4a7a5ec49ec0c96c7462/examples/jsm/loaders/DRACOLoader.js\n// by Don McCurdy / https://www.donmccurdy.com / MIT license\n\nimport {loadLibrary} from '@loaders.gl/worker-utils';\n\nconst DRACO_VERSION = '1.4.1';\nconst DRACO_JS_DECODER_URL = `https://www.gstatic.com/draco/versioned/decoders/${DRACO_VERSION}/draco_decoder.js`;\nconst DRACO_WASM_WRAPPER_URL = `https://www.gstatic.com/draco/versioned/decoders/${DRACO_VERSION}/draco_wasm_wrapper.js`;\nconst DRACO_WASM_DECODER_URL = `https://www.gstatic.com/draco/versioned/decoders/${DRACO_VERSION}/draco_decoder.wasm`;\n\nconst DRACO_ENCODER_URL = `https://raw.githubusercontent.com/google/draco/${DRACO_VERSION}/javascript/draco_encoder.js`;\n\nlet loadDecoderPromise;\nlet loadEncoderPromise;\n\nexport async function loadDracoDecoderModule(options) {\n  const modules = options.modules || {};\n\n  // Check if a bundled draco3d library has been supplied by application\n  if (modules.draco3d) {\n    loadDecoderPromise =\n      loadDecoderPromise ||\n      modules.draco3d.createDecoderModule({}).then((draco) => {\n        return {draco};\n      });\n  } else {\n    // If not, dynamically load the WASM script from our CDN\n    loadDecoderPromise = loadDecoderPromise || loadDracoDecoder(options);\n  }\n  return await loadDecoderPromise;\n}\n\nexport async function loadDracoEncoderModule(options) {\n  const modules = options.modules || {};\n\n  // Check if a bundled draco3d library has been supplied by application\n  if (modules.draco3d) {\n    loadEncoderPromise =\n      loadEncoderPromise ||\n      modules.draco3d.createEncoderModule({}).then((draco) => {\n        return {draco};\n      });\n  } else {\n    // If not, dynamically load the WASM script from our CDN\n    loadEncoderPromise = loadEncoderPromise || loadDracoEncoder(options);\n  }\n  return await loadEncoderPromise;\n}\n\n// DRACO DECODER LOADING\n\nasync function loadDracoDecoder(options) {\n  let DracoDecoderModule;\n  let wasmBinary;\n  switch (options.draco && options.draco.decoderType) {\n    case 'js':\n      DracoDecoderModule = await loadLibrary(DRACO_JS_DECODER_URL, 'draco', options);\n      break;\n\n    case 'wasm':\n    default:\n      [DracoDecoderModule, wasmBinary] = await Promise.all([\n        await loadLibrary(DRACO_WASM_WRAPPER_URL, 'draco', options),\n        await loadLibrary(DRACO_WASM_DECODER_URL, 'draco', options)\n      ]);\n  }\n  // Depends on how import happened...\n  // @ts-ignore\n  DracoDecoderModule = DracoDecoderModule || globalThis.DracoDecoderModule;\n  return await initializeDracoDecoder(DracoDecoderModule, wasmBinary);\n}\n\nfunction initializeDracoDecoder(DracoDecoderModule, wasmBinary) {\n  const options: {wasmBinary?: any} = {};\n  if (wasmBinary) {\n    options.wasmBinary = wasmBinary;\n  }\n\n  return new Promise((resolve) => {\n    DracoDecoderModule({\n      ...options,\n      onModuleLoaded: (draco) => resolve({draco}) // Module is Promise-like. Wrap in object to avoid loop.\n    });\n  });\n}\n\n// ENCODER\n\nasync function loadDracoEncoder(options) {\n  let DracoEncoderModule = await loadLibrary(DRACO_ENCODER_URL, 'draco', options);\n  // @ts-ignore\n  DracoEncoderModule = DracoEncoderModule || globalThis.DracoEncoderModule;\n\n  return new Promise((resolve) => {\n    DracoEncoderModule({\n      onModuleLoaded: (draco) => resolve({draco}) // Module is Promise-like. Wrap in object to avoid loop.\n    });\n  });\n}\n"],"file":"draco-module-loader.js"}