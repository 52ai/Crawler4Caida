{"version":3,"sources":["../../../src/lib/draco-parser.ts"],"names":["getMeshBoundingBox","getDracoSchema","GEOMETRY_TYPE","TRIANGULAR_MESH","POINT_CLOUD","DRACO_TO_GLTF_ATTRIBUTE_NAME_MAP","POSITION","NORMAL","COLOR","TEX_COORD","DRACO_DATA_TYPE_TO_TYPED_ARRAY_MAP","Int8Array","Uint8Array","Int16Array","Uint16Array","Int32Array","Uint32Array","Float32Array","INDEX_ITEM_SIZE","DracoParser","constructor","draco","decoder","Decoder","metadataQuerier","MetadataQuerier","destroy","parseSync","arrayBuffer","options","buffer","DecoderBuffer","Init","byteLength","_disableAttributeTransforms","geometry_type","GetEncodedGeometryType","dracoGeometry","Mesh","PointCloud","dracoStatus","DecodeBufferToMesh","DecodeBufferToPointCloud","Error","ok","ptr","message","error_msg","loaderData","_getDracoLoaderData","geometry","_getMeshData","boundingBox","attributes","schema","indices","data","loader","header","vertexCount","num_points","metadata","_getTopLevelMetadata","_getDracoAttributes","num_attributes","num_faces","dracoAttributes","attributeId","dracoAttribute","GetAttribute","_getAttributeMetadata","unique_id","attribute_type","data_type","num_components","byte_offset","byte_stride","normalized","attribute_index","quantization","_getQuantizationTransform","quantization_transform","octahedron","_getOctahedronTransform","octahedron_transform","_getMeshAttributes","positionAttribute","topology","mode","value","_getTriangleStripIndices","size","_getTriangleListIndices","loaderAttribute","Object","values","attributeName","_deduceAttributeName","name","_getAttributeValues","byteOffset","byteStride","numFaces","numIndices","_malloc","GetTrianglesUInt32Array","HEAPF32","slice","_free","dracoArray","DracoInt32Array","GetTriangleStripsFromMesh","getUint32Array","attribute","TypedArrayCtor","numComponents","numPoints","numValues","BYTES_PER_ELEMENT","dataType","getDracoDataType","GetAttributeDataArrayForAllPoints","uniqueId","attributeUniqueId","entries","extraAttributes","thisAttributeType","dracoAttributeConstant","attributeType","entryName","attributeNameEntry","string","dracoMetadata","GetMetadata","_getDracoMetadata","GetAttributeMetadata","result","numEntries","NumEntries","entryIndex","GetEntryName","_getDracoMetadataField","GetIntEntryArray","intArray","getInt32Array","int","GetIntEntry","GetStringEntry","double","GetDoubleEntry","quantizedAttributes","octahedronAttributes","skipAttributes","dracoAttributeName","SkipAttributeTransform","skip","map","type","includes","transform","AttributeQuantizationTransform","InitFromAttribute","quantization_bits","range","min_values","i","min_value","DT_FLOAT32","DT_INT8","DT_INT16","DT_INT32","DT_UINT8","DT_UINT16","DT_UINT32","DT_INVALID","GetValue"],"mappings":"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","sourcesContent":["/* eslint-disable camelcase */\n\nimport type {TypedArray, MeshAttribute, MeshGeometry} from '@loaders.gl/schema';\n\n// Draco types (input)\nimport type {\n  Draco3D,\n  Decoder,\n  Mesh,\n  PointCloud,\n  PointAttribute,\n  Metadata,\n  MetadataQuerier,\n  DracoInt32Array,\n  draco_DataType\n} from '../draco3d/draco3d-types';\n\n// Parsed data types (output)\nimport type {\n  DracoMesh,\n  DracoLoaderData,\n  DracoAttribute,\n  DracoMetadataEntry,\n  DracoQuantizationTransform,\n  DracoOctahedronTransform\n} from './draco-types';\n\nimport {getMeshBoundingBox} from '@loaders.gl/schema';\nimport {getDracoSchema} from './utils/get-draco-schema';\n\n/**\n * @param topology - How triangle indices should be generated (mesh only)\n * @param attributeNameEntry\n * @param extraAttributes\n * @param quantizedAttributes\n * @param octahedronAttributes\n */\nexport type DracoParseOptions = {\n  topology?: 'triangle-list' | 'triangle-strip';\n  attributeNameEntry?: string;\n  extraAttributes?: {[uniqueId: string]: number};\n  quantizedAttributes?: ('POSITION' | 'NORMAL' | 'COLOR' | 'TEX_COORD' | 'GENERIC')[];\n  octahedronAttributes?: ('POSITION' | 'NORMAL' | 'COLOR' | 'TEX_COORD' | 'GENERIC')[];\n};\n\n// @ts-ignore\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst GEOMETRY_TYPE = {\n  TRIANGULAR_MESH: 0,\n  POINT_CLOUD: 1\n};\n\n// Native Draco attribute names to GLTF attribute names.\nconst DRACO_TO_GLTF_ATTRIBUTE_NAME_MAP = {\n  POSITION: 'POSITION',\n  NORMAL: 'NORMAL',\n  COLOR: 'COLOR_0',\n  TEX_COORD: 'TEXCOORD_0'\n};\n\nconst DRACO_DATA_TYPE_TO_TYPED_ARRAY_MAP = {\n  1: Int8Array,\n  2: Uint8Array,\n  3: Int16Array,\n  4: Uint16Array,\n  5: Int32Array,\n  6: Uint32Array,\n  9: Float32Array\n};\n\nconst INDEX_ITEM_SIZE = 4;\n\nexport default class DracoParser {\n  draco: Draco3D;\n  decoder: Decoder;\n  metadataQuerier: MetadataQuerier;\n\n  // draco - the draco decoder, either import `draco3d` or load dynamically\n  constructor(draco: Draco3D) {\n    this.draco = draco;\n    this.decoder = new this.draco.Decoder();\n    this.metadataQuerier = new this.draco.MetadataQuerier();\n  }\n\n  /**\n   * Destroy draco resources\n   */\n  destroy(): void {\n    this.draco.destroy(this.decoder);\n    this.draco.destroy(this.metadataQuerier);\n  }\n\n  /**\n   * NOTE: caller must call `destroyGeometry` on the return value after using it\n   * @param arrayBuffer\n   * @param options\n   */\n  parseSync(arrayBuffer: ArrayBuffer, options: DracoParseOptions = {}): DracoMesh {\n    const buffer = new this.draco.DecoderBuffer();\n    buffer.Init(new Int8Array(arrayBuffer), arrayBuffer.byteLength);\n\n    this._disableAttributeTransforms(options);\n\n    const geometry_type = this.decoder.GetEncodedGeometryType(buffer);\n    const dracoGeometry =\n      geometry_type === this.draco.TRIANGULAR_MESH\n        ? new this.draco.Mesh()\n        : new this.draco.PointCloud();\n\n    try {\n      let dracoStatus;\n      switch (geometry_type) {\n        case this.draco.TRIANGULAR_MESH:\n          dracoStatus = this.decoder.DecodeBufferToMesh(buffer, dracoGeometry as Mesh);\n          break;\n\n        case this.draco.POINT_CLOUD:\n          dracoStatus = this.decoder.DecodeBufferToPointCloud(buffer, dracoGeometry);\n          break;\n\n        default:\n          throw new Error('DRACO: Unknown geometry type.');\n      }\n\n      if (!dracoStatus.ok() || !dracoGeometry.ptr) {\n        const message = `DRACO decompression failed: ${dracoStatus.error_msg()}`;\n        // console.error(message);\n        throw new Error(message);\n      }\n\n      const loaderData = this._getDracoLoaderData(dracoGeometry, geometry_type, options);\n\n      const geometry = this._getMeshData(dracoGeometry, loaderData, options);\n\n      const boundingBox = getMeshBoundingBox(geometry.attributes);\n\n      const schema = getDracoSchema(geometry.attributes, loaderData, geometry.indices);\n\n      const data: DracoMesh = {\n        loader: 'draco',\n        loaderData,\n        header: {\n          vertexCount: dracoGeometry.num_points(),\n          boundingBox\n        },\n        ...geometry,\n        schema\n      };\n      return data;\n    } finally {\n      this.draco.destroy(buffer);\n      if (dracoGeometry) {\n        this.draco.destroy(dracoGeometry);\n      }\n    }\n  }\n\n  // Draco specific \"loader data\"\n\n  /**\n   * Extract\n   * @param dracoGeometry\n   * @param geometry_type\n   * @param options\n   * @returns\n   */\n  _getDracoLoaderData(\n    dracoGeometry: Mesh | PointCloud,\n    geometry_type,\n    options: DracoParseOptions\n  ): DracoLoaderData {\n    const metadata = this._getTopLevelMetadata(dracoGeometry);\n    const attributes = this._getDracoAttributes(dracoGeometry, options);\n\n    return {\n      geometry_type,\n      num_attributes: dracoGeometry.num_attributes(),\n      num_points: dracoGeometry.num_points(),\n      num_faces: dracoGeometry instanceof this.draco.Mesh ? dracoGeometry.num_faces() : 0,\n      metadata,\n      attributes\n    };\n  }\n\n  /**\n   * Extract all draco provided information and metadata for each attribute\n   * @param dracoGeometry\n   * @param options\n   * @returns\n   */\n  _getDracoAttributes(\n    dracoGeometry: Mesh | PointCloud,\n    options: DracoParseOptions\n  ): {[unique_id: number]: DracoAttribute} {\n    const dracoAttributes: {[unique_id: number]: DracoAttribute} = {};\n\n    for (let attributeId = 0; attributeId < dracoGeometry.num_attributes(); attributeId++) {\n      // Note: Draco docs do not seem clear on `GetAttribute` ids just being a zero-based index,\n      // but it does seems to work this way\n      const dracoAttribute = this.decoder.GetAttribute(dracoGeometry, attributeId);\n\n      const metadata = this._getAttributeMetadata(dracoGeometry, attributeId);\n\n      dracoAttributes[dracoAttribute.unique_id()] = {\n        unique_id: dracoAttribute.unique_id(),\n        attribute_type: dracoAttribute.attribute_type(),\n        data_type: dracoAttribute.data_type(),\n        num_components: dracoAttribute.num_components(),\n\n        byte_offset: dracoAttribute.byte_offset(),\n        byte_stride: dracoAttribute.byte_stride(),\n        normalized: dracoAttribute.normalized(),\n        attribute_index: attributeId,\n\n        metadata\n      };\n\n      // Add transformation parameters for any attributes app wants untransformed\n      const quantization = this._getQuantizationTransform(dracoAttribute, options);\n      if (quantization) {\n        dracoAttributes[dracoAttribute.unique_id()].quantization_transform = quantization;\n      }\n\n      const octahedron = this._getOctahedronTransform(dracoAttribute, options);\n      if (octahedron) {\n        dracoAttributes[dracoAttribute.unique_id()].octahedron_transform = octahedron;\n      }\n    }\n\n    return dracoAttributes;\n  }\n\n  /**\n   * Get standard loaders.gl mesh category data\n   * Extracts the geometry from draco\n   * @param dracoGeometry\n   * @param options\n   */\n  _getMeshData(\n    dracoGeometry: Mesh | PointCloud,\n    loaderData: DracoLoaderData,\n    options: DracoParseOptions\n  ): MeshGeometry {\n    const attributes = this._getMeshAttributes(loaderData, dracoGeometry, options);\n\n    const positionAttribute = attributes.POSITION;\n    if (!positionAttribute) {\n      throw new Error('DRACO: No position attribute found.');\n    }\n\n    // For meshes, we need indices to define the faces.\n    if (dracoGeometry instanceof this.draco.Mesh) {\n      switch (options.topology) {\n        case 'triangle-strip':\n          return {\n            topology: 'triangle-strip',\n            mode: 4, // GL.TRIANGLES\n            attributes,\n            indices: {\n              value: this._getTriangleStripIndices(dracoGeometry),\n              size: 1\n            }\n          };\n        case 'triangle-list':\n        default:\n          return {\n            topology: 'triangle-list',\n            mode: 5, // GL.TRIANGLE_STRIP\n            attributes,\n            indices: {\n              value: this._getTriangleListIndices(dracoGeometry),\n              size: 1\n            }\n          };\n      }\n    }\n\n    // PointCloud - must come last as Mesh inherits from PointCloud\n    return {\n      topology: 'point-list',\n      mode: 0, // GL.POINTS\n      attributes\n    };\n  }\n\n  _getMeshAttributes(\n    loaderData: DracoLoaderData,\n    dracoGeometry: Mesh | PointCloud,\n    options: DracoParseOptions\n  ): {[attributeName: string]: MeshAttribute} {\n    const attributes: {[key: string]: MeshAttribute} = {};\n\n    for (const loaderAttribute of Object.values(loaderData.attributes)) {\n      const attributeName = this._deduceAttributeName(loaderAttribute, options);\n      loaderAttribute.name = attributeName;\n      const {value, size} = this._getAttributeValues(dracoGeometry, loaderAttribute);\n      attributes[attributeName] = {\n        value,\n        size,\n        byteOffset: loaderAttribute.byte_offset,\n        byteStride: loaderAttribute.byte_stride,\n        normalized: loaderAttribute.normalized\n      };\n    }\n\n    return attributes;\n  }\n\n  // MESH INDICES EXTRACTION\n\n  /**\n   * For meshes, we need indices to define the faces.\n   * @param dracoGeometry\n   */\n  _getTriangleListIndices(dracoGeometry: Mesh) {\n    // Example on how to retrieve mesh and attributes.\n    const numFaces = dracoGeometry.num_faces();\n    const numIndices = numFaces * 3;\n    const byteLength = numIndices * INDEX_ITEM_SIZE;\n\n    const ptr = this.draco._malloc(byteLength);\n    try {\n      this.decoder.GetTrianglesUInt32Array(dracoGeometry, byteLength, ptr);\n      return new Uint32Array(this.draco.HEAPF32.buffer, ptr, numIndices).slice();\n    } finally {\n      this.draco._free(ptr);\n    }\n  }\n\n  /**\n   * For meshes, we need indices to define the faces.\n   * @param dracoGeometry\n   */\n  _getTriangleStripIndices(dracoGeometry: Mesh) {\n    const dracoArray = new this.draco.DracoInt32Array();\n    try {\n      /* const numStrips = */ this.decoder.GetTriangleStripsFromMesh(dracoGeometry, dracoArray);\n      return getUint32Array(dracoArray);\n    } finally {\n      this.draco.destroy(dracoArray);\n    }\n  }\n\n  /**\n   *\n   * @param dracoGeometry\n   * @param dracoAttribute\n   * @param attributeName\n   */\n  _getAttributeValues(\n    dracoGeometry: Mesh | PointCloud,\n    attribute: DracoAttribute\n  ): {value: TypedArray; size: number} {\n    const TypedArrayCtor = DRACO_DATA_TYPE_TO_TYPED_ARRAY_MAP[attribute.data_type];\n    const numComponents = attribute.num_components;\n    const numPoints = dracoGeometry.num_points();\n    const numValues = numPoints * numComponents;\n\n    const byteLength = numValues * TypedArrayCtor.BYTES_PER_ELEMENT;\n    const dataType = getDracoDataType(this.draco, TypedArrayCtor);\n\n    let value: TypedArray;\n\n    const ptr = this.draco._malloc(byteLength);\n    try {\n      const dracoAttribute = this.decoder.GetAttribute(dracoGeometry, attribute.attribute_index);\n      this.decoder.GetAttributeDataArrayForAllPoints(\n        dracoGeometry,\n        dracoAttribute,\n        dataType,\n        byteLength,\n        ptr\n      );\n      value = new TypedArrayCtor(this.draco.HEAPF32.buffer, ptr, numValues).slice();\n    } finally {\n      this.draco._free(ptr);\n    }\n\n    return {value, size: numComponents};\n  }\n\n  // Attribute names\n\n  /** \n   * DRACO does not store attribute names - We need to deduce an attribute name\n   * for each attribute\n  _getAttributeNames(\n    dracoGeometry: Mesh | PointCloud,\n    options: DracoParseOptions\n  ): {[unique_id: number]: string} {\n    const attributeNames: {[unique_id: number]: string} = {};\n    for (let attributeId = 0; attributeId < dracoGeometry.num_attributes(); attributeId++) {\n      const dracoAttribute = this.decoder.GetAttribute(dracoGeometry, attributeId);\n      const attributeName = this._deduceAttributeName(dracoAttribute, options);\n      attributeNames[attributeName] = attributeName;\n    }\n    return attributeNames;\n  }\n   */\n\n  /**\n   * Deduce an attribute name.\n   * @note DRACO does not save attribute names, just general type (POSITION, COLOR)\n   * to help optimize compression. We generate GLTF compatible names for the Draco-recognized\n   * types\n   * @param attributeData\n   */\n  _deduceAttributeName(attribute: DracoAttribute, options: DracoParseOptions): string {\n    // Deduce name based on application provided map\n    const uniqueId = attribute.unique_id;\n    for (const [attributeName, attributeUniqueId] of Object.entries(\n      options.extraAttributes || {}\n    )) {\n      if (attributeUniqueId === uniqueId) {\n        return attributeName;\n      }\n    }\n\n    // Deduce name based on attribute type\n    const thisAttributeType = attribute.attribute_type;\n    for (const dracoAttributeConstant in DRACO_TO_GLTF_ATTRIBUTE_NAME_MAP) {\n      const attributeType = this.draco[dracoAttributeConstant];\n      if (attributeType === thisAttributeType) {\n        // TODO - Return unique names if there multiple attributes per type\n        // (e.g. multiple TEX_COORDS or COLORS)\n        return DRACO_TO_GLTF_ATTRIBUTE_NAME_MAP[dracoAttributeConstant];\n      }\n    }\n\n    // Look up in metadata\n    // TODO - shouldn't this have priority?\n    const entryName = options.attributeNameEntry || 'name';\n    if (attribute.metadata[entryName]) {\n      return attribute.metadata[entryName].string;\n    }\n\n    // Attribute of \"GENERIC\" type, we need to assign some name\n    return `CUSTOM_ATTRIBUTE_${uniqueId}`;\n  }\n\n  // METADATA EXTRACTION\n\n  /** Get top level metadata */\n  _getTopLevelMetadata(dracoGeometry: Mesh | PointCloud) {\n    const dracoMetadata = this.decoder.GetMetadata(dracoGeometry);\n    return this._getDracoMetadata(dracoMetadata);\n  }\n\n  /** Get per attribute metadata */\n  _getAttributeMetadata(dracoGeometry: Mesh | PointCloud, attributeId: number) {\n    const dracoMetadata = this.decoder.GetAttributeMetadata(dracoGeometry, attributeId);\n    return this._getDracoMetadata(dracoMetadata);\n  }\n\n  /**\n   * Extract metadata field values\n   * @param dracoMetadata\n   * @returns\n   */\n  _getDracoMetadata(dracoMetadata: Metadata): {[entry: string]: DracoMetadataEntry} {\n    // The not so wonderful world of undocumented Draco APIs :(\n    if (!dracoMetadata || !dracoMetadata.ptr) {\n      return {};\n    }\n    const result = {};\n    const numEntries = this.metadataQuerier.NumEntries(dracoMetadata);\n    for (let entryIndex = 0; entryIndex < numEntries; entryIndex++) {\n      const entryName = this.metadataQuerier.GetEntryName(dracoMetadata, entryIndex);\n      result[entryName] = this._getDracoMetadataField(dracoMetadata, entryName);\n    }\n    return result;\n  }\n\n  /**\n   * Extracts possible values for one metadata entry by name\n   * @param dracoMetadata\n   * @param entryName\n   */\n  _getDracoMetadataField(dracoMetadata: Metadata, entryName: string): DracoMetadataEntry {\n    const dracoArray = new this.draco.DracoInt32Array();\n    try {\n      // Draco metadata fields can hold int32 arrays\n      this.metadataQuerier.GetIntEntryArray(dracoMetadata, entryName, dracoArray);\n      const intArray = getInt32Array(dracoArray);\n      return {\n        int: this.metadataQuerier.GetIntEntry(dracoMetadata, entryName),\n        string: this.metadataQuerier.GetStringEntry(dracoMetadata, entryName),\n        double: this.metadataQuerier.GetDoubleEntry(dracoMetadata, entryName),\n        intArray\n      };\n    } finally {\n      this.draco.destroy(dracoArray);\n    }\n  }\n\n  // QUANTIZED ATTRIBUTE SUPPORT (NO DECOMPRESSION)\n\n  /** Skip transforms for specific attribute types */\n  _disableAttributeTransforms(options: DracoParseOptions) {\n    const {quantizedAttributes = [], octahedronAttributes = []} = options;\n    const skipAttributes = [...quantizedAttributes, ...octahedronAttributes];\n    for (const dracoAttributeName of skipAttributes) {\n      this.decoder.SkipAttributeTransform(this.draco[dracoAttributeName]);\n    }\n  }\n\n  /**\n   * Extract (and apply?) Position Transform\n   * @todo not used\n   */\n  _getQuantizationTransform(\n    dracoAttribute: PointAttribute,\n    options: DracoParseOptions\n  ): DracoQuantizationTransform | null {\n    const {quantizedAttributes = []} = options;\n    const attribute_type = dracoAttribute.attribute_type();\n    const skip = quantizedAttributes.map((type) => this.decoder[type]).includes(attribute_type);\n    if (skip) {\n      const transform = new this.draco.AttributeQuantizationTransform();\n      try {\n        if (transform.InitFromAttribute(dracoAttribute)) {\n          return {\n            quantization_bits: transform.quantization_bits(),\n            range: transform.range(),\n            min_values: new Float32Array([1, 2, 3]).map((i) => transform.min_value(i))\n          };\n        }\n      } finally {\n        this.draco.destroy(transform);\n      }\n    }\n    return null;\n  }\n\n  _getOctahedronTransform(\n    dracoAttribute: PointAttribute,\n    options: DracoParseOptions\n  ): DracoOctahedronTransform | null {\n    const {octahedronAttributes = []} = options;\n    const attribute_type = dracoAttribute.attribute_type();\n    const octahedron = octahedronAttributes\n      .map((type) => this.decoder[type])\n      .includes(attribute_type);\n    if (octahedron) {\n      const transform = new this.draco.AttributeQuantizationTransform();\n      try {\n        if (transform.InitFromAttribute(dracoAttribute)) {\n          return {\n            quantization_bits: transform.quantization_bits()\n          };\n        }\n      } finally {\n        this.draco.destroy(transform);\n      }\n    }\n    return null;\n  }\n\n  // HELPERS\n}\n\n/**\n * Get draco specific data type by TypedArray constructor type\n * @param attributeType\n * @returns draco specific data type\n */\nfunction getDracoDataType(draco: Draco3D, attributeType: any): draco_DataType {\n  switch (attributeType) {\n    case Float32Array:\n      return draco.DT_FLOAT32;\n    case Int8Array:\n      return draco.DT_INT8;\n    case Int16Array:\n      return draco.DT_INT16;\n    case Int32Array:\n      return draco.DT_INT32;\n    case Uint8Array:\n      return draco.DT_UINT8;\n    case Uint16Array:\n      return draco.DT_UINT16;\n    case Uint32Array:\n      return draco.DT_UINT32;\n    default:\n      return draco.DT_INVALID;\n  }\n}\n\n/**\n * Copy a Draco int32 array into a JS typed array\n */\nfunction getInt32Array(dracoArray: DracoInt32Array): Int32Array {\n  const numValues = dracoArray.size();\n  const intArray = new Int32Array(numValues);\n  for (let i = 0; i < numValues; i++) {\n    intArray[i] = dracoArray.GetValue(i);\n  }\n  return intArray;\n}\n\n/**\n * Copy a Draco int32 array into a JS typed array\n */\nfunction getUint32Array(dracoArray: DracoInt32Array): Int32Array {\n  const numValues = dracoArray.size();\n  const intArray = new Int32Array(numValues);\n  for (let i = 0; i < numValues; i++) {\n    intArray[i] = dracoArray.GetValue(i);\n  }\n  return intArray;\n}\n"],"file":"draco-parser.js"}