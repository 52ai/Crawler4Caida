{"version":3,"file":"texture-cube.js","names":["log","assertWebGLContext","Texture","FACES","TextureCube","Symbol","toStringTag","constructor","gl","props","Object","assign","target","initialize","seal","mipmaps","parameters","opts","setCubeMapImageData","then","loaded","generateMipmap","setParameters","subImage","face","data","x","y","mipmapLevel","_subImage","width","height","pixels","border","format","type","imageDataMap","resolvedFaces","Promise","all","map","facePixels","Array","isArray","bind","forEach","index","length","warn","id","image","lodLevel","texImage2D","unbind","setImageDataForFace","options","imageData","resolvedImageData"],"sources":["../../../src/classes/texture-cube.js"],"sourcesContent":["import GL from '@luma.gl/constants';\nimport {log, assertWebGLContext} from '@luma.gl/gltools';\nimport Texture from './texture';\n\nconst FACES = [\n  GL.TEXTURE_CUBE_MAP_POSITIVE_X,\n  GL.TEXTURE_CUBE_MAP_NEGATIVE_X,\n  GL.TEXTURE_CUBE_MAP_POSITIVE_Y,\n  GL.TEXTURE_CUBE_MAP_NEGATIVE_Y,\n  GL.TEXTURE_CUBE_MAP_POSITIVE_Z,\n  GL.TEXTURE_CUBE_MAP_NEGATIVE_Z\n];\n\nexport default class TextureCube extends Texture {\n  // eslint-disable-next-line accessor-pairs\n  get [Symbol.toStringTag]() {\n    return 'TextureCube';\n  }\n\n  constructor(gl, props = {}) {\n    assertWebGLContext(gl);\n\n    super(gl, Object.assign({}, props, {target: GL.TEXTURE_CUBE_MAP}));\n\n    this.initialize(props);\n\n    Object.seal(this);\n  }\n\n  initialize(props = {}) {\n    const {mipmaps = true, parameters = {}} = props;\n\n    // Store props for accessors\n    this.opts = props;\n\n    // @ts-ignore\n    this.setCubeMapImageData(props).then(() => {\n      this.loaded = true;\n\n      // TODO - should genMipmap() be called on the cubemap or on the faces?\n      // TODO - without generateMipmap() cube textures do not work at all!!! Why?\n      if (mipmaps) {\n        this.generateMipmap(props);\n      }\n\n      this.setParameters(parameters);\n    });\n    return this;\n  }\n\n  subImage({face, data, x = 0, y = 0, mipmapLevel = 0}) {\n    // @ts-ignore TODO - is this a bug?\n    return this._subImage({target: face, data, x, y, mipmapLevel});\n  }\n\n  /* eslint-disable max-statements, max-len */\n  async setCubeMapImageData({\n    width,\n    height,\n    pixels,\n    data,\n    border = 0,\n    format = GL.RGBA,\n    type = GL.UNSIGNED_BYTE\n  }) {\n    const {gl} = this;\n    const imageDataMap = pixels || data;\n\n    // pixel data (imageDataMap) is an Object from Face to Image or Promise.\n    // For example:\n    // {\n    // GL.TEXTURE_CUBE_MAP_POSITIVE_X : Image-or-Promise,\n    // GL.TEXTURE_CUBE_MAP_NEGATIVE_X : Image-or-Promise,\n    // ... }\n    // To provide multiple level-of-details (LODs) this can be Face to Array\n    // of Image or Promise, like this\n    // {\n    // GL.TEXTURE_CUBE_MAP_POSITIVE_X : [Image-or-Promise-LOD-0, Image-or-Promise-LOD-1],\n    // GL.TEXTURE_CUBE_MAP_NEGATIVE_X : [Image-or-Promise-LOD-0, Image-or-Promise-LOD-1],\n    // ... }\n\n    const resolvedFaces = await Promise.all(\n      FACES.map(face => {\n        const facePixels = imageDataMap[face];\n        return Promise.all(Array.isArray(facePixels) ? facePixels : [facePixels]);\n      })\n    );\n\n    this.bind();\n\n    FACES.forEach((face, index) => {\n      if (resolvedFaces[index].length > 1 && this.opts.mipmaps !== false) {\n        // If the user provides multiple LODs, then automatic mipmap\n        // generation generateMipmap() should be disabled to avoid overwritting them.\n        log.warn(`${this.id} has mipmap and multiple LODs.`)();\n      }\n      resolvedFaces[index].forEach((image, lodLevel) => {\n        // TODO: adjust width & height for LOD!\n        if (width && height) {\n          gl.texImage2D(face, lodLevel, format, width, height, border, format, type, image);\n        } else {\n          gl.texImage2D(face, lodLevel, format, format, type, image);\n        }\n      });\n    });\n\n    this.unbind();\n  }\n\n  // TODO: update this method to accept LODs\n  setImageDataForFace(options) {\n    const {\n      face,\n      width,\n      height,\n      pixels,\n      data,\n      border = 0,\n      format = GL.RGBA,\n      type = GL.UNSIGNED_BYTE\n      // generateMipmap = false // TODO\n    } = options;\n\n    const {gl} = this;\n\n    const imageData = pixels || data;\n\n    this.bind();\n    if (imageData instanceof Promise) {\n      imageData.then(resolvedImageData =>\n        this.setImageDataForFace(\n          Object.assign({}, options, {\n            face,\n            data: resolvedImageData,\n            pixels: resolvedImageData\n          })\n        )\n      );\n    } else if (this.width || this.height) {\n      gl.texImage2D(face, 0, format, width, height, border, format, type, imageData);\n    } else {\n      gl.texImage2D(face, 0, format, format, type, imageData);\n    }\n\n    return this;\n  }\n}\n\nTextureCube.FACES = FACES;\n"],"mappings":"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"}