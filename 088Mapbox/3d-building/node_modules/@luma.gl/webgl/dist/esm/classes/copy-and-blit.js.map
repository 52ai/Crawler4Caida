{"version":3,"file":"copy-and-blit.js","names":["Buffer","Framebuffer","Texture","assertWebGL2Context","withParameters","log","flipRows","scalePixels","getTypedArrayFromGLType","getGLTypeFromTypedArray","glFormatToComponents","glTypeToBytes","toFramebuffer","assert","readPixelsToArray","source","options","sourceX","sourceY","sourceFormat","sourceAttachment","target","sourceWidth","sourceHeight","sourceType","framebuffer","deleteFramebuffer","getFramebuffer","gl","handle","attachments","width","height","type","getPixelArray","prevHandle","bindFramebuffer","readPixels","delete","readPixelsToBuffer","targetByteOffset","gl2","components","byteCount","byteLength","accessor","size","bind","unbind","copyToDataUrl","targetMaxHeight","Number","MAX_SAFE_INTEGER","data","canvas","document","createElement","context","getContext","imageData","createImageData","set","putImageData","toDataURL","copyToImage","targetImage","dataUrl","Image","src","copyToTexture","targetMipmaplevel","targetInternalFormat","targetX","targetY","targetZ","isSubCopy","texture","isFinite","copyTexImage2D","copyTexSubImage2D","copyTexSubImage3D","blit","sourceX0","sourceY0","targetX0","targetY0","color","depth","stencil","filter","sourceX1","sourceY1","targetX1","targetY1","mask","srcFramebuffer","deleteSrcFramebuffer","dstFramebuffer","deleteDstFramebuffer","readBuffer","warn","undefined","prevDrawHandle","prevReadHandle","blitFramebuffer","pixelArray","format","ArrayType","clamped"],"sources":["../../../src/classes/copy-and-blit.js"],"sourcesContent":["import GL from '@luma.gl/constants';\nimport Buffer from './buffer';\nimport Framebuffer from './framebuffer';\nimport Texture from './texture';\nimport {assertWebGL2Context, withParameters, log} from '@luma.gl/gltools';\nimport {flipRows, scalePixels} from '../webgl-utils/typed-array-utils';\nimport {getTypedArrayFromGLType, getGLTypeFromTypedArray} from '../webgl-utils/typed-array-utils';\nimport {glFormatToComponents, glTypeToBytes} from '../webgl-utils/format-utils';\nimport {toFramebuffer} from '../webgl-utils/texture-utils';\nimport {assert} from '../utils/assert';\n\n// NOTE: Slow requires roundtrip to GPU\n// Copies data from a Framebuffer or a Texture object into ArrayBuffer object.\n// App can provide targetPixelArray or have it auto allocated by this method\n// @returns {Uint8Array|Uint16Array|FloatArray} - pixel array,\n//  newly allocated by this method unless provided by app.\nexport function readPixelsToArray(source, options = {}) {\n  const {sourceX = 0, sourceY = 0, sourceFormat = GL.RGBA} = options;\n  let {\n    sourceAttachment = GL.COLOR_ATTACHMENT0, // TODO - support gl.readBuffer\n    target = null,\n    // following parameters are auto deduced if not provided\n    sourceWidth,\n    sourceHeight,\n    sourceType\n  } = options;\n\n  const {framebuffer, deleteFramebuffer} = getFramebuffer(source);\n  assert(framebuffer);\n  const {gl, handle, attachments} = framebuffer;\n  sourceWidth = sourceWidth || framebuffer.width;\n  sourceHeight = sourceHeight || framebuffer.height;\n\n  // TODO - Set and unset gl.readBuffer\n  if (sourceAttachment === GL.COLOR_ATTACHMENT0 && handle === null) {\n    sourceAttachment = GL.FRONT;\n  }\n\n  assert(attachments[sourceAttachment]);\n\n  // Deduce the type from color attachment if not provided.\n  sourceType = sourceType || attachments[sourceAttachment].type;\n\n  // Deduce type and allocated pixelArray if needed\n  target = getPixelArray(target, sourceType, sourceFormat, sourceWidth, sourceHeight);\n\n  // Pixel array available, if necessary, deduce type from it.\n  sourceType = sourceType || getGLTypeFromTypedArray(target);\n\n  const prevHandle = gl.bindFramebuffer(GL.FRAMEBUFFER, handle);\n  gl.readPixels(sourceX, sourceY, sourceWidth, sourceHeight, sourceFormat, sourceType, target);\n  // @ts-ignore\n  gl.bindFramebuffer(GL.FRAMEBUFFER, prevHandle || null);\n  if (deleteFramebuffer) {\n    framebuffer.delete();\n  }\n  return target;\n}\n\n// NOTE: doesn't wait for copy to be complete, it programs GPU to perform a DMA transffer.\n// Copies data from a Framebuffer or a Texture object into a Buffer object.\nexport function readPixelsToBuffer(\n  source,\n  {\n    sourceX = 0,\n    sourceY = 0,\n    sourceFormat = GL.RGBA,\n    target = null, // A new Buffer object is created when not provided.\n    targetByteOffset = 0, // byte offset in buffer object\n    // following parameters are auto deduced if not provided\n    sourceWidth,\n    sourceHeight,\n    sourceType\n  }\n) {\n  const {framebuffer, deleteFramebuffer} = getFramebuffer(source);\n  assert(framebuffer);\n  sourceWidth = sourceWidth || framebuffer.width;\n  sourceHeight = sourceHeight || framebuffer.height;\n\n  // Asynchronus read (PIXEL_PACK_BUFFER) is WebGL2 only feature\n  const gl2 = assertWebGL2Context(framebuffer.gl);\n\n  // deduce type if not available.\n  sourceType = sourceType || (target ? target.type : GL.UNSIGNED_BYTE);\n\n  if (!target) {\n    // Create new buffer with enough size\n    const components = glFormatToComponents(sourceFormat);\n    const byteCount = glTypeToBytes(sourceType);\n    const byteLength = targetByteOffset + sourceWidth * sourceHeight * components * byteCount;\n    target = new Buffer(gl2, {byteLength, accessor: {type: sourceType, size: components}});\n  }\n\n  target.bind({target: GL.PIXEL_PACK_BUFFER});\n  withParameters(gl2, {framebuffer}, () => {\n    gl2.readPixels(\n      sourceX,\n      sourceY,\n      sourceWidth,\n      sourceHeight,\n      sourceFormat,\n      sourceType,\n      targetByteOffset\n    );\n  });\n  target.unbind({target: GL.PIXEL_PACK_BUFFER});\n  if (deleteFramebuffer) {\n    framebuffer.delete();\n  }\n\n  return target;\n}\n\n// Reads pixels from a Framebuffer or Texture object to a dataUrl\nexport function copyToDataUrl(\n  source,\n  {\n    sourceAttachment = GL.COLOR_ATTACHMENT0, // TODO - support gl.readBuffer\n    targetMaxHeight = Number.MAX_SAFE_INTEGER\n  } = {}\n) {\n  let data = readPixelsToArray(source, {sourceAttachment});\n\n  // Scale down\n  let {width, height} = source;\n  while (height > targetMaxHeight) {\n    ({data, width, height} = scalePixels({data, width, height}));\n  }\n\n  // Flip to top down coordinate system\n  flipRows({data, width, height});\n\n  const canvas = document.createElement('canvas');\n  canvas.width = width;\n  canvas.height = height;\n  const context = canvas.getContext('2d');\n\n  // Copy the pixels to a 2D canvas\n  const imageData = context.createImageData(width, height);\n  imageData.data.set(data);\n  context.putImageData(imageData, 0, 0);\n\n  return canvas.toDataURL();\n}\n\n// Reads pixels from a Framebuffer or Texture object into an HTML Image\nexport function copyToImage(\n  source,\n  {\n    sourceAttachment = GL.COLOR_ATTACHMENT0, // TODO - support gl.readBuffer\n    targetImage = null\n  } = {}\n) {\n  const dataUrl = copyToDataUrl(source, {sourceAttachment});\n  targetImage = targetImage || new Image();\n  targetImage.src = dataUrl;\n  return targetImage;\n}\n\n// Copy a rectangle from a Framebuffer or Texture object into a texture (at an offset)\n// eslint-disable-next-line complexity, max-statements\nexport function copyToTexture(source, target, options = {}) {\n  const {\n    sourceX = 0,\n    sourceY = 0,\n    // attachment = GL.COLOR_ATTACHMENT0, // TODO - support gl.readBuffer\n    targetMipmaplevel = 0,\n    targetInternalFormat = GL.RGBA\n  } = options;\n  let {\n    targetX,\n    targetY,\n    targetZ,\n    width, // defaults to target width\n    height // defaults to target height\n  } = options;\n\n  const {framebuffer, deleteFramebuffer} = getFramebuffer(source);\n  assert(framebuffer);\n  const {gl, handle} = framebuffer;\n  const isSubCopy =\n    typeof targetX !== 'undefined' ||\n    typeof targetY !== 'undefined' ||\n    typeof targetZ !== 'undefined';\n  targetX = targetX || 0;\n  targetY = targetY || 0;\n  targetZ = targetZ || 0;\n  const prevHandle = gl.bindFramebuffer(GL.FRAMEBUFFER, handle);\n  // TODO - support gl.readBuffer (WebGL2 only)\n  // const prevBuffer = gl.readBuffer(attachment);\n  assert(target);\n  let texture = null;\n  if (target instanceof Texture) {\n    texture = target;\n    width = Number.isFinite(width) ? width : texture.width;\n    height = Number.isFinite(height) ? height : texture.height;\n    texture.bind(0);\n    target = texture.target;\n  }\n\n  if (!isSubCopy) {\n    gl.copyTexImage2D(\n      target,\n      targetMipmaplevel,\n      targetInternalFormat,\n      sourceX,\n      sourceY,\n      width,\n      height,\n      0 /* border must be 0 */\n    );\n  } else {\n    switch (target) {\n      case GL.TEXTURE_2D:\n      case GL.TEXTURE_CUBE_MAP:\n        gl.copyTexSubImage2D(\n          target,\n          targetMipmaplevel,\n          targetX,\n          targetY,\n          sourceX,\n          sourceY,\n          width,\n          height\n        );\n        break;\n      case GL.TEXTURE_2D_ARRAY:\n      case GL.TEXTURE_3D:\n        const gl2 = assertWebGL2Context(gl);\n        gl2.copyTexSubImage3D(\n          target,\n          targetMipmaplevel,\n          targetX,\n          targetY,\n          targetZ,\n          sourceX,\n          sourceY,\n          width,\n          height\n        );\n        break;\n      default:\n    }\n  }\n  if (texture) {\n    texture.unbind();\n  }\n  // @ts-ignore\n  gl.bindFramebuffer(GL.FRAMEBUFFER, prevHandle || null);\n  if (deleteFramebuffer) {\n    framebuffer.delete();\n  }\n  return texture;\n}\n\n// NOTE: WEBLG2 only\n// Copies a rectangle of pixels between Framebuffer or Texture objects\n// eslint-disable-next-line max-statements, complexity\nexport function blit(source, target, options = {}) {\n  const {\n    sourceX0 = 0,\n    sourceY0 = 0,\n    targetX0 = 0,\n    targetY0 = 0,\n    color = true,\n    depth = false,\n    stencil = false,\n    filter = GL.NEAREST\n  } = options;\n\n  let {\n    sourceX1,\n    sourceY1,\n    targetX1,\n    targetY1,\n    sourceAttachment = GL.COLOR_ATTACHMENT0,\n    mask = 0\n  } = options;\n\n  const {framebuffer: srcFramebuffer, deleteFramebuffer: deleteSrcFramebuffer} = getFramebuffer(\n    source\n  );\n  const {framebuffer: dstFramebuffer, deleteFramebuffer: deleteDstFramebuffer} = getFramebuffer(\n    target\n  );\n\n  assert(srcFramebuffer);\n  assert(dstFramebuffer);\n  // @ts-ignore\n  const {gl, handle, width, height, readBuffer} = dstFramebuffer;\n  const gl2 = assertWebGL2Context(gl);\n\n  if (!srcFramebuffer.handle && sourceAttachment === GL.COLOR_ATTACHMENT0) {\n    sourceAttachment = GL.FRONT;\n  }\n\n  if (color) {\n    mask |= GL.COLOR_BUFFER_BIT;\n  }\n  if (depth) {\n    mask |= GL.DEPTH_BUFFER_BIT;\n  }\n  if (stencil) {\n    mask |= GL.STENCIL_BUFFER_BIT;\n  }\n\n  if (deleteSrcFramebuffer || deleteDstFramebuffer) {\n    // Either source or destiantion was a texture object, which is wrapped in a Framebuffer objecgt as color attachment.\n    // Overwrite the mask to `COLOR_BUFFER_BIT`\n    if (mask & (GL.DEPTH_BUFFER_BIT | GL.STENCIL_BUFFER_BIT)) {\n      mask = GL.COLOR_BUFFER_BIT;\n      log.warn('Blitting from or into a Texture object, forcing mask to GL.COLOR_BUFFER_BIT')();\n    }\n  }\n  assert(mask);\n\n  sourceX1 = sourceX1 === undefined ? srcFramebuffer.width : sourceX1;\n  sourceY1 = sourceY1 === undefined ? srcFramebuffer.height : sourceY1;\n  targetX1 = targetX1 === undefined ? width : targetX1;\n  targetY1 = targetY1 === undefined ? height : targetY1;\n\n  const prevDrawHandle = gl.bindFramebuffer(GL.DRAW_FRAMEBUFFER, handle);\n  const prevReadHandle = gl.bindFramebuffer(GL.READ_FRAMEBUFFER, srcFramebuffer.handle);\n  gl2.readBuffer(sourceAttachment);\n  gl2.blitFramebuffer(\n    sourceX0,\n    sourceY0,\n    sourceX1,\n    sourceY1,\n    targetX0,\n    targetY0,\n    targetX1,\n    targetY1,\n    mask,\n    filter\n  );\n  gl2.readBuffer(readBuffer);\n  // @ts-ignore\n  gl2.bindFramebuffer(GL.READ_FRAMEBUFFER, prevReadHandle || null);\n  // @ts-ignore\n  gl2.bindFramebuffer(GL.DRAW_FRAMEBUFFER, prevDrawHandle || null);\n  if (deleteSrcFramebuffer) {\n    srcFramebuffer.delete();\n  }\n  if (deleteDstFramebuffer) {\n    dstFramebuffer.delete();\n  }\n\n  return dstFramebuffer;\n}\n\n// Helper methods\n\nfunction getFramebuffer(source) {\n  if (!(source instanceof Framebuffer)) {\n    return {framebuffer: toFramebuffer(source), deleteFramebuffer: true};\n  }\n  return {framebuffer: source, deleteFramebuffer: false};\n}\n\nfunction getPixelArray(pixelArray, type, format, width, height) {\n  if (pixelArray) {\n    return pixelArray;\n  }\n  // Allocate pixel array if not already available, using supplied type\n  type = type || GL.UNSIGNED_BYTE;\n  const ArrayType = getTypedArrayFromGLType(type, {clamped: false});\n  const components = glFormatToComponents(format);\n  // TODO - check for composite type (components = 1).\n  return new ArrayType(width * height * components);\n}\n"],"mappings":"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"}