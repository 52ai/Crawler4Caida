{"version":3,"file":"texture.js","names":["isWebGL2","assertWebGL2Context","withParameters","log","Resource","Buffer","TEXTURE_FORMATS","DATA_FORMAT_CHANNELS","TYPE_SIZES","isFormatSupported","isLinearFilteringSupported","assert","uid","isPowerOfTwo","NPOT_MIN_FILTERS","WebGLBuffer","globalThis","Texture","Symbol","toStringTag","isSupported","gl","opts","format","linearFiltering","supported","constructor","props","id","handle","target","textureUnit","undefined","loaded","width","height","depth","type","dataFormat","border","mipmaps","toString","initialize","data","Promise","then","resolvedImageData","Object","assign","pixels","isVideo","HTMLVideoElement","readyState","HAVE_METADATA","_video","addEventListener","recreate","parameters","pixelStore","compressed","_deduceParameters","Number","isFinite","activeTexture","bindTexture","_isNPOT","warn","_updateForNPOT","setImageData","generateMipmap","setParameters","video","lastTime","HAVE_CURRENT_DATA","currentTime","update","setSubImageData","resize","params","options","_trackDeallocatedMemory","level","offset","dataType","_getDataType","gl2","compressedTextureSize","texImage2D","bindBuffer","levelIndex","levelData","entries","compressedTexImage2D","levelSize","_trackAllocatedMemory","byteLength","channels","channelSize","x","y","ndarray","shape","compressedTexSubImage2D","texSubImage2D","ArrayBuffer","isView","copyFramebuffer","error","getActiveUnit","getParameter","bind","unbind","textureFormat","types","_deduceImageSize","size","ImageData","HTMLImageElement","naturalWidth","naturalHeight","HTMLCanvasElement","ImageBitmap","videoWidth","videoHeight","_createHandle","createTexture","_deleteHandle","deleteTexture","_getParameter","pname","value","getTexParameter","_setParameter","param","_getNPOTParam","texParameterf","texParameteri","TEXTURE_MIN_FILTER","LINEAR","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","indexOf"],"sources":["../../../src/classes/texture.js"],"sourcesContent":["import GL from '@luma.gl/constants';\nimport {isWebGL2, assertWebGL2Context, withParameters, log} from '@luma.gl/gltools';\n\nimport Resource from './resource';\nimport Buffer from './buffer';\nimport {\n  TEXTURE_FORMATS,\n  DATA_FORMAT_CHANNELS,\n  TYPE_SIZES,\n  isFormatSupported,\n  isLinearFilteringSupported\n} from './texture-formats';\nimport {assert} from '../utils/assert';\nimport {uid, isPowerOfTwo} from '../utils/utils';\n\n// Supported min filters for NPOT texture.\nconst NPOT_MIN_FILTERS = [GL.LINEAR, GL.NEAREST];\n\n// Polyfill\n// Note (Tarek): Do we really need to support this API?\nconst WebGLBuffer = globalThis.WebGLBuffer || function WebGLBuffer() {};\n\nexport default class Texture extends Resource {\n  // eslint-disable-next-line accessor-pairs\n  get [Symbol.toStringTag]() {\n    return 'Texture';\n  }\n  static isSupported(gl, opts = {}) {\n    const {format, linearFiltering} = opts;\n    let supported = true;\n    if (format) {\n      supported = supported && isFormatSupported(gl, format);\n      supported = supported && (!linearFiltering || isLinearFilteringSupported(gl, format));\n    }\n    return supported;\n  }\n\n  // target cannot be modified by bind:\n  // textures are special because when you first bind them to a target,\n  // they get special information. When you first bind a texture as a\n  // GL_TEXTURE_2D, you are actually setting special state in the texture.\n  // You are saying that this texture is a 2D texture.\n  // And it will always be a 2D texture; this state cannot be changed ever.\n  // If you have a texture that was first bound as a GL_TEXTURE_2D,\n  // you must always bind it as a GL_TEXTURE_2D;\n  // attempting to bind it as GL_TEXTURE_1D will give rise to an error\n  // (while run-time).\n  constructor(gl, props) {\n    const {\n      id = uid('texture'),\n      handle,\n      target\n      // , magFilter, minFilter, wrapS, wrapT\n    } = props;\n\n    super(gl, {id, handle});\n\n    this.target = target;\n    this.textureUnit = undefined;\n\n    // Program.draw() checks the loaded flag of all textures to avoid\n    // Textures that are still loading from promises\n    // Set to true as soon as texture has been initialized with valid data\n    this.loaded = false;\n\n    this.width = undefined;\n    this.height = undefined;\n    this.depth = undefined;\n    this.format = undefined;\n    this.type = undefined;\n    this.dataFormat = undefined;\n    this.border = undefined;\n    this.textureUnit = undefined;\n    this.mipmaps = undefined;\n  }\n\n  toString() {\n    return `Texture(${this.id},${this.width}x${this.height})`;\n  }\n\n  /* eslint-disable max-len, max-statements */\n  initialize(props = {}) {\n    let data = props.data;\n\n    if (data instanceof Promise) {\n      data.then(resolvedImageData =>\n        this.initialize(\n          Object.assign({}, props, {\n            pixels: resolvedImageData,\n            data: resolvedImageData\n          })\n        )\n      );\n      return this;\n    }\n    const isVideo = typeof HTMLVideoElement !== 'undefined' && data instanceof HTMLVideoElement;\n    // @ts-ignore\n    if (isVideo && data.readyState < HTMLVideoElement.HAVE_METADATA) {\n      this._video = null; // Declare member before the object is sealed\n      data.addEventListener('loadeddata', () => this.initialize(props));\n      return this;\n    }\n\n    const {\n      pixels = null,\n      format = GL.RGBA,\n      border = 0,\n      recreate = false,\n      parameters = {},\n      pixelStore = {},\n      textureUnit = undefined\n    } = props;\n\n    // pixels variable is for API compatibility purpose\n    if (!data) {\n      // TODO - This looks backwards? Commenting out for now until we decide\n      // which prop to use\n      // log.deprecated('data', 'pixels')();\n      data = pixels;\n    }\n\n    let {width, height, dataFormat, type, compressed = false, mipmaps = true} = props;\n    const {depth = 0} = props;\n\n    // Deduce width and height\n    ({width, height, compressed, dataFormat, type} = this._deduceParameters({\n      format,\n      type,\n      dataFormat,\n      compressed,\n      data,\n      width,\n      height\n    }));\n\n    // Store opts for accessors\n    this.width = width;\n    this.height = height;\n    this.depth = depth;\n    this.format = format;\n    this.type = type;\n    this.dataFormat = dataFormat;\n    this.border = border;\n    this.textureUnit = textureUnit;\n\n    if (Number.isFinite(this.textureUnit)) {\n      this.gl.activeTexture(GL.TEXTURE0 + this.textureUnit);\n      this.gl.bindTexture(this.target, this.handle);\n    }\n\n    if (mipmaps && this._isNPOT()) {\n      log.warn(`texture: ${this} is Non-Power-Of-Two, disabling mipmaping`)();\n      mipmaps = false;\n\n      this._updateForNPOT(parameters);\n    }\n\n    this.mipmaps = mipmaps;\n\n    this.setImageData({\n      data,\n      width,\n      height,\n      depth,\n      format,\n      type,\n      dataFormat,\n      border,\n      mipmaps,\n      parameters: pixelStore,\n      compressed\n    });\n\n    if (mipmaps) {\n      this.generateMipmap();\n    }\n\n    // Set texture sampler parameters\n    this.setParameters(parameters);\n\n    // TODO - Store data to enable auto recreate on context loss\n    if (recreate) {\n      this.data = data;\n    }\n    if (isVideo) {\n      this._video = {\n        video: data,\n        parameters,\n        // @ts-ignore\n        lastTime: data.readyState >= HTMLVideoElement.HAVE_CURRENT_DATA ? data.currentTime : -1\n      };\n    }\n\n    return this;\n  }\n\n  update() {\n    if (this._video) {\n      const {video, parameters, lastTime} = this._video;\n      // @ts-ignore\n      if (lastTime === video.currentTime || video.readyState < HTMLVideoElement.HAVE_CURRENT_DATA) {\n        return;\n      }\n      this.setSubImageData({\n        data: video,\n        parameters\n      });\n      if (this.mipmaps) {\n        this.generateMipmap();\n      }\n      this._video.lastTime = video.currentTime;\n    }\n  }\n\n  // If size has changed, reinitializes with current format\n  // note clears image and mipmaps\n  resize({height, width, mipmaps = false}) {\n    if (width !== this.width || height !== this.height) {\n      return this.initialize({\n        width,\n        height,\n        format: this.format,\n        type: this.type,\n        dataFormat: this.dataFormat,\n        border: this.border,\n        mipmaps\n      });\n    }\n    return this;\n  }\n\n  // Call to regenerate mipmaps after modifying texture(s)\n  generateMipmap(params = {}) {\n    if (this._isNPOT()) {\n      log.warn(`texture: ${this} is Non-Power-Of-Two, disabling mipmaping`)();\n      return this;\n    }\n\n    this.mipmaps = true;\n\n    this.gl.bindTexture(this.target, this.handle);\n    withParameters(this.gl, params, () => {\n      this.gl.generateMipmap(this.target);\n    });\n    this.gl.bindTexture(this.target, null);\n    return this;\n  }\n\n  /*\n   * Allocates storage\n   * @param {*} pixels -\n   *  null - create empty texture of specified format\n   *  Typed array - init from image data in typed array\n   *  Buffer|WebGLBuffer - (WEBGL2) init from image data in WebGLBuffer\n   *  HTMLImageElement|Image - Inits with content of image. Auto width/height\n   *  HTMLCanvasElement - Inits with contents of canvas. Auto width/height\n   *  HTMLVideoElement - Creates video texture. Auto width/height\n   *\n   * @param {GLint} width -\n   * @param {GLint} height -\n   * @param {GLint} mipMapLevel -\n   * @param {GLenum} format - format of image data.\n   * @param {GLenum} type\n   *  - format of array (autodetect from type) or\n   *  - (WEBGL2) format of buffer\n   * @param {Number} offset - (WEBGL2) offset from start of buffer\n   * @param {GLint} border - must be 0.\n   * @parameters - temporary settings to be applied, can be used to supply pixel store settings.\n   */\n  /* eslint-disable max-len, max-statements, complexity */\n  setImageData(options) {\n    this._trackDeallocatedMemory('Texture');\n\n    const {\n      target = this.target,\n      pixels = null,\n      level = 0,\n      format = this.format,\n      border = this.border,\n      offset = 0,\n      parameters = {}\n    } = options;\n\n    let {\n      data = null,\n      type = this.type,\n      width = this.width,\n      height = this.height,\n      dataFormat = this.dataFormat,\n      compressed = false\n    } = options;\n\n    // pixels variable is  for API compatibility purpose\n    if (!data) {\n      data = pixels;\n    }\n\n    ({type, dataFormat, compressed, width, height} = this._deduceParameters({\n      format,\n      type,\n      dataFormat,\n      compressed,\n      data,\n      width,\n      height\n    }));\n\n    const {gl} = this;\n    gl.bindTexture(this.target, this.handle);\n\n    let dataType = null;\n    ({data, dataType} = this._getDataType({data, compressed}));\n\n    let gl2;\n\n    let compressedTextureSize = 0;\n\n    withParameters(this.gl, parameters, () => {\n      switch (dataType) {\n        case 'null':\n          gl.texImage2D(target, level, format, width, height, border, dataFormat, type, data);\n          break;\n        case 'typed-array':\n          // Looks like this assert is not necessary, as offset is ignored under WebGL1\n          // assert((offset === 0 || isWebGL2(gl)), 'offset supported in WebGL2 only');\n          // @ts-ignore\n          gl.texImage2D(\n            target,\n            level,\n            format,\n            width,\n            height,\n            border,\n            dataFormat,\n            type,\n            data,\n            // @ts-ignore\n            offset\n          );\n          break;\n        case 'buffer':\n          // WebGL2 enables creating textures directly from a WebGL buffer\n          gl2 = assertWebGL2Context(gl);\n          gl2.bindBuffer(GL.PIXEL_UNPACK_BUFFER, data.handle || data);\n          gl2.texImage2D(target, level, format, width, height, border, dataFormat, type, offset);\n          gl2.bindBuffer(GL.PIXEL_UNPACK_BUFFER, null);\n          break;\n        case 'browser-object':\n          if (isWebGL2(gl)) {\n            gl.texImage2D(target, level, format, width, height, border, dataFormat, type, data);\n          } else {\n            gl.texImage2D(target, level, format, dataFormat, type, data);\n          }\n          break;\n        case 'compressed':\n          for (const [levelIndex, levelData] of data.entries()) {\n            gl.compressedTexImage2D(\n              target,\n              levelIndex,\n              levelData.format,\n              levelData.width,\n              levelData.height,\n              border,\n              levelData.data\n            );\n            compressedTextureSize += levelData.levelSize;\n          }\n          break;\n        default:\n          assert(false, 'Unknown image data type');\n      }\n    });\n\n    if (dataType === 'compressed') {\n      this._trackAllocatedMemory(compressedTextureSize, 'Texture');\n    } else if (data && data.byteLength) {\n      this._trackAllocatedMemory(data.byteLength, 'Texture');\n    } else {\n      // NOTE(Tarek): Default to RGBA bytes\n      const channels = DATA_FORMAT_CHANNELS[this.dataFormat] || 4;\n      const channelSize = TYPE_SIZES[this.type] || 1;\n\n      this._trackAllocatedMemory(this.width * this.height * channels * channelSize, 'Texture');\n    }\n\n    this.loaded = true;\n\n    return this;\n  }\n  /* eslint-enable max-len, max-statements, complexity */\n\n  /**\n   * Redefines an area of an existing texture\n   * Note: does not allocate storage\n   */\n  /*\n   * Redefines an area of an existing texture\n   * @param {*} pixels, data -\n   *  null - create empty texture of specified format\n   *  Typed array - init from image data in typed array\n   *  Buffer|WebGLBuffer - (WEBGL2) init from image data in WebGLBuffer\n   *  HTMLImageElement|Image - Inits with content of image. Auto width/height\n   *  HTMLCanvasElement - Inits with contents of canvas. Auto width/height\n   *  HTMLVideoElement - Creates video texture. Auto width/height\n   *\n   * @param {GLint} x - xOffset from where texture to be updated\n   * @param {GLint} y - yOffset from where texture to be updated\n   * @param {GLint} width - width of the sub image to be updated\n   * @param {GLint} height - height of the sub image to be updated\n   * @param {GLint} level - mip level to be updated\n   * @param {GLenum} format - internal format of image data.\n   * @param {GLenum} type\n   *  - format of array (autodetect from type) or\n   *  - (WEBGL2) format of buffer or ArrayBufferView\n   * @param {GLenum} dataFormat - format of image data.\n   * @param {Number} offset - (WEBGL2) offset from start of buffer\n   * @param {GLint} border - must be 0.\n   * @parameters - temporary settings to be applied, can be used to supply pixel store settings.\n   */\n  setSubImageData({\n    target = this.target,\n    pixels = null,\n    data = null,\n    x = 0,\n    y = 0,\n    width = this.width,\n    height = this.height,\n    level = 0,\n    format = this.format,\n    type = this.type,\n    dataFormat = this.dataFormat,\n    compressed = false,\n    offset = 0,\n    border = this.border,\n    parameters = {}\n  }) {\n    ({type, dataFormat, compressed, width, height} = this._deduceParameters({\n      format,\n      type,\n      dataFormat,\n      compressed,\n      data,\n      width,\n      height\n    }));\n\n    assert(this.depth === 0, 'texSubImage not supported for 3D textures');\n\n    // pixels variable is  for API compatibility purpose\n    if (!data) {\n      data = pixels;\n    }\n\n    // Support ndarrays\n    if (data && data.data) {\n      const ndarray = data;\n      data = ndarray.data;\n      width = ndarray.shape[0];\n      height = ndarray.shape[1];\n    }\n\n    // Support buffers\n    if (data instanceof Buffer) {\n      data = data.handle;\n    }\n\n    this.gl.bindTexture(this.target, this.handle);\n\n    withParameters(this.gl, parameters, () => {\n      // TODO - x,y parameters\n      if (compressed) {\n        this.gl.compressedTexSubImage2D(target, level, x, y, width, height, format, data);\n      } else if (data === null) {\n        this.gl.texSubImage2D(target, level, x, y, width, height, dataFormat, type, null);\n      } else if (ArrayBuffer.isView(data)) {\n        // const gl2 = assertWebGL2Context(this.gl);\n        // @ts-ignore last offset parameter is ignored under WebGL1\n        this.gl.texSubImage2D(target, level, x, y, width, height, dataFormat, type, data, offset);\n      } else if (data instanceof WebGLBuffer) {\n        // WebGL2 allows us to create texture directly from a WebGL buffer\n        const gl2 = assertWebGL2Context(this.gl);\n        // This texImage2D signature uses currently bound GL.PIXEL_UNPACK_BUFFER\n        gl2.bindBuffer(GL.PIXEL_UNPACK_BUFFER, data);\n        gl2.texSubImage2D(target, level, x, y, width, height, dataFormat, type, offset);\n        gl2.bindBuffer(GL.PIXEL_UNPACK_BUFFER, null);\n      } else if (isWebGL2(this.gl)) {\n        // Assume data is a browser supported object (ImageData, Canvas, ...)\n        const gl2 = assertWebGL2Context(this.gl);\n        gl2.texSubImage2D(target, level, x, y, width, height, dataFormat, type, data);\n      } else {\n        this.gl.texSubImage2D(target, level, x, y, dataFormat, type, data);\n      }\n    });\n\n    this.gl.bindTexture(this.target, null);\n  }\n  /* eslint-enable max-len, max-statements, complexity */\n\n  /**\n   * Defines a two-dimensional texture image or cube-map texture image with\n   * pixels from the current framebuffer (rather than from client memory).\n   * (gl.copyTexImage2D wrapper)\n   *\n   * Note that binding a texture into a Framebuffer's color buffer and\n   * rendering can be faster.\n   */\n  copyFramebuffer(opts = {}) {\n    log.error(\n      'Texture.copyFramebuffer({...}) is no logner supported, use copyToTexture(source, target, opts})'\n    )();\n    return null;\n  }\n\n  getActiveUnit() {\n    return this.gl.getParameter(GL.ACTIVE_TEXTURE) - GL.TEXTURE0;\n  }\n\n  // target cannot be modified by bind:\n  // textures are special because when you first bind them to a target,\n  // they get special information. When you first bind a texture as a\n  // GL_TEXTURE_2D, you are actually setting special state in the texture.\n  // You are saying that this texture is a 2D texture.\n  // And it will always be a 2D texture; this state cannot be changed ever.\n  // If you have a texture that was first bound as a GL_TEXTURE_2D,\n  // you must always bind it as a GL_TEXTURE_2D;\n  // attempting to bind it as GL_TEXTURE_1D will give rise to an error\n  // (while run-time).\n\n  bind(textureUnit = this.textureUnit) {\n    const {gl} = this;\n\n    if (textureUnit !== undefined) {\n      this.textureUnit = textureUnit;\n      gl.activeTexture(gl.TEXTURE0 + textureUnit);\n    }\n\n    gl.bindTexture(this.target, this.handle);\n    return textureUnit;\n  }\n\n  unbind(textureUnit = this.textureUnit) {\n    const {gl} = this;\n\n    if (textureUnit !== undefined) {\n      this.textureUnit = textureUnit;\n      gl.activeTexture(gl.TEXTURE0 + textureUnit);\n    }\n\n    gl.bindTexture(this.target, null);\n    return textureUnit;\n  }\n\n  // PRIVATE METHODS\n\n  _getDataType({data, compressed = false}) {\n    if (compressed) {\n      return {data, dataType: 'compressed'};\n    }\n    if (data === null) {\n      return {data, dataType: 'null'};\n    }\n    if (ArrayBuffer.isView(data)) {\n      return {data, dataType: 'typed-array'};\n    }\n    if (data instanceof Buffer) {\n      return {data: data.handle, dataType: 'buffer'};\n    }\n    if (data instanceof WebGLBuffer) {\n      return {data, dataType: 'buffer'};\n    }\n    // Assume data is a browser supported object (ImageData, Canvas, ...)\n    return {data, dataType: 'browser-object'};\n  }\n\n  /* Copied from texture-2d.js\n  // WebGL2\n  setPixels(opts = {}) {\n    const {\n      buffer,\n      width = null,\n      height = null,\n      mipmapLevel = 0,\n      format = GL.RGBA,\n      type = GL.UNSIGNED_BYTE,\n      border = 0\n    } = opts;\n\n    const {gl} = this;\n\n    // This signature of texImage2D uses currently bound GL.PIXEL_UNPACK_BUFFER\n    gl.bindBuffer(GL.PIXEL_UNPACK_BUFFER, buffer.target);\n    // And as always, we must also bind the texture itself\n    this.bind();\n\n    gl.texImage2D(gl.TEXTURE_2D,\n      mipmapLevel, format, width, height, border, format, type, buffer.target);\n\n    this.unbind();\n    gl.bindBuffer(GL.GL.PIXEL_UNPACK_BUFFER, null);\n    return this;\n  }\n\n  setImageDataFromCompressedBuffer(opts) {\n    const {\n      buffer,\n      // offset = 0,\n      width = null,\n      height = null,\n      mipmapLevel = 0,\n      internalFormat = GL.RGBA,\n      // format = GL.RGBA,\n      // type = GL.UNSIGNED_BYTE,\n      border = 0\n    } = opts;\n\n    const {gl} = this;\n    gl.compressedTexImage2D(this.target,\n      mipmapLevel, internalFormat, width, height, border, buffer);\n    // gl.compressedTexSubImage2D(target,\n    //   level, xoffset, yoffset, width, height, format, ArrayBufferView? pixels);\n    return this;\n  }\n\n  copySubImage(opts) {\n    const {\n      // pixels,\n      // offset = 0,\n      // x,\n      // y,\n      // width,\n      // height,\n      // mipmapLevel = 0,\n      // internalFormat = GL.RGBA,\n      // type = GL.UNSIGNED_BYTE,\n      // border = 0\n    } = opts;\n\n    // if (pixels instanceof ArrayBufferView) {\n    //   gl.texSubImage2D(target, level, x, y, width, height, format, type, pixels);\n    // }\n    // gl.texSubImage2D(target, level, x, y, format, type, ? pixels);\n    // gl.texSubImage2D(target, level, x, y, format, type, HTMLImageElement pixels);\n    // gl.texSubImage2D(target, level, x, y, format, type, HTMLCanvasElement pixels);\n    // gl.texSubImage2D(target, level, x, y, format, type, HTMLVideoElement pixels);\n    // // Additional signature in a WebGL 2 context:\n    // gl.texSubImage2D(target, level, x, y, format, type, GLintptr offset);\n  }\n  */\n\n  // HELPER METHODS\n\n  _deduceParameters(opts) {\n    const {format, data} = opts;\n    let {width, height, dataFormat, type, compressed} = opts;\n\n    // Deduce format and type from format\n    const textureFormat = TEXTURE_FORMATS[format];\n    dataFormat = dataFormat || (textureFormat && textureFormat.dataFormat);\n    type = type || (textureFormat && textureFormat.types[0]);\n\n    // Deduce compression from format\n    compressed = compressed || (textureFormat && textureFormat.compressed);\n\n    ({width, height} = this._deduceImageSize(data, width, height));\n\n    return {dataFormat, type, compressed, width, height, format, data};\n  }\n\n  // eslint-disable-next-line complexity\n  _deduceImageSize(data, width, height) {\n    let size;\n\n    if (typeof ImageData !== 'undefined' && data instanceof ImageData) {\n      size = {width: data.width, height: data.height};\n    } else if (typeof HTMLImageElement !== 'undefined' && data instanceof HTMLImageElement) {\n      size = {width: data.naturalWidth, height: data.naturalHeight};\n    } else if (typeof HTMLCanvasElement !== 'undefined' && data instanceof HTMLCanvasElement) {\n      size = {width: data.width, height: data.height};\n    } else if (typeof ImageBitmap !== 'undefined' && data instanceof ImageBitmap) {\n      size = {width: data.width, height: data.height};\n    } else if (typeof HTMLVideoElement !== 'undefined' && data instanceof HTMLVideoElement) {\n      size = {width: data.videoWidth, height: data.videoHeight};\n    } else if (!data) {\n      size = {width: width >= 0 ? width : 1, height: height >= 0 ? height : 1};\n    } else {\n      size = {width, height};\n    }\n\n    assert(size, 'Could not deduced texture size');\n    assert(\n      width === undefined || size.width === width,\n      'Deduced texture width does not match supplied width'\n    );\n    assert(\n      height === undefined || size.height === height,\n      'Deduced texture height does not match supplied height'\n    );\n\n    return size;\n  }\n\n  // RESOURCE METHODS\n\n  _createHandle() {\n    return this.gl.createTexture();\n  }\n\n  _deleteHandle() {\n    this.gl.deleteTexture(this.handle);\n    this._trackDeallocatedMemory('Texture');\n  }\n\n  _getParameter(pname) {\n    switch (pname) {\n      case GL.TEXTURE_WIDTH:\n        return this.width;\n      case GL.TEXTURE_HEIGHT:\n        return this.height;\n      default:\n        this.gl.bindTexture(this.target, this.handle);\n        const value = this.gl.getTexParameter(this.target, pname);\n        this.gl.bindTexture(this.target, null);\n        return value;\n    }\n  }\n\n  _setParameter(pname, param) {\n    this.gl.bindTexture(this.target, this.handle);\n\n    // NOTE: Apply NPOT workaround\n    param = this._getNPOTParam(pname, param);\n\n    // Apparently there are some integer/float conversion rules that made\n    // the WebGL committe expose two parameter setting functions in JavaScript.\n    // For now, pick the float version for parameters specified as GLfloat.\n    switch (pname) {\n      case GL.TEXTURE_MIN_LOD:\n      case GL.TEXTURE_MAX_LOD:\n        this.gl.texParameterf(this.handle, pname, param);\n        break;\n\n      case GL.TEXTURE_WIDTH:\n      case GL.TEXTURE_HEIGHT:\n        assert(false);\n        break;\n\n      default:\n        this.gl.texParameteri(this.target, pname, param);\n        break;\n    }\n\n    this.gl.bindTexture(this.target, null);\n    return this;\n  }\n\n  _isNPOT() {\n    if (isWebGL2(this.gl)) {\n      // NPOT restriction is only for WebGL1\n      return false;\n    }\n    // Width and height not available, consider it is not NPOT texture\n    if (!this.width || !this.height) {\n      return false;\n    }\n    return !isPowerOfTwo(this.width) || !isPowerOfTwo(this.height);\n  }\n\n  // Update default settings which are not supported by NPOT textures.\n  _updateForNPOT(parameters) {\n    if (parameters[this.gl.TEXTURE_MIN_FILTER] === undefined) {\n      // log.warn(`texture: ${this} is Non-Power-Of-Two, forcing TEXTURE_MIN_FILTER to LINEAR`)();\n      parameters[this.gl.TEXTURE_MIN_FILTER] = this.gl.LINEAR;\n    }\n    if (parameters[this.gl.TEXTURE_WRAP_S] === undefined) {\n      // log.warn(`texture: ${this} is Non-Power-Of-Two, forcing TEXTURE_WRAP_S to CLAMP_TO_EDGE`)();\n      parameters[this.gl.TEXTURE_WRAP_S] = this.gl.CLAMP_TO_EDGE;\n    }\n    if (parameters[this.gl.TEXTURE_WRAP_T] === undefined) {\n      // log.warn(`texture: ${this} is Non-Power-Of-Two, forcing TEXTURE_WRAP_T to CLAMP_TO_EDGE`)();\n      parameters[this.gl.TEXTURE_WRAP_T] = this.gl.CLAMP_TO_EDGE;\n    }\n  }\n\n  _getNPOTParam(pname, param) {\n    if (this._isNPOT()) {\n      switch (pname) {\n        case GL.TEXTURE_MIN_FILTER:\n          if (NPOT_MIN_FILTERS.indexOf(param) === -1) {\n            // log.warn(`texture: ${this} is Non-Power-Of-Two, forcing TEXTURE_MIN_FILTER to LINEAR`)();\n            param = GL.LINEAR;\n          }\n          break;\n        case GL.TEXTURE_WRAP_S:\n        case GL.TEXTURE_WRAP_T:\n          if (param !== GL.CLAMP_TO_EDGE) {\n            // log.warn(`texture: ${this} is Non-Power-Of-Two, ${getKey(this.gl, pname)} to CLAMP_TO_EDGE`)();\n            param = GL.CLAMP_TO_EDGE;\n          }\n          break;\n        default:\n          break;\n      }\n    }\n    return param;\n  }\n}\n"],"mappings":"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"}