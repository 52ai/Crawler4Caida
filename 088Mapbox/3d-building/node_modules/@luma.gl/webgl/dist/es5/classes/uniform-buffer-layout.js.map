{"version":3,"file":"uniform-buffer-layout.js","names":["ERR_ARGUMENT","GL_FLOAT","GL_INT","GL_UNSIGNED_INT","UniformBufferLayout","layout","size","key","_addUniform","data","Float32Array","typedArray","Int32Array","buffer","Uint32Array","index","offset","undefined","begin","offsets","end","sizes","subarray","values","_setValue","value","assert","type","set","uniformType","typeAndComponents","decomposeCompositeGLType","count","components","_alignTo"],"sources":["../../../src/classes/uniform-buffer-layout.js"],"sourcesContent":["// @ts-nocheck\n\n/* eslint-disable camelcase */\nimport {decomposeCompositeGLType} from '../webgl-utils/attribute-utils';\nimport {assert} from '../utils/assert';\n\nconst ERR_ARGUMENT = 'UniformBufferLayout illegal argument';\n\n// Local constants - these will \"collapse\" during minification\nconst GL_FLOAT = 0x1406;\nconst GL_INT = 0x1404;\nconst GL_UNSIGNED_INT = 0x1405;\n\n// Std140 layout for uniforms\nexport default class UniformBufferLayout {\n  constructor(layout) {\n    this.layout = {};\n    this.size = 0;\n\n    // Add layout (type, size and offset) definitions for each uniform in the layout\n    for (const key in layout) {\n      this._addUniform(key, layout[key]);\n    }\n\n    this.size += (4 - (this.size % 4)) % 4;\n\n    // Allocate three typed arrays pointing at same memory\n    const data = new Float32Array(this.size);\n    this.typedArray = {\n      [GL_FLOAT]: data,\n      [GL_INT]: new Int32Array(data.buffer),\n      [GL_UNSIGNED_INT]: new Uint32Array(data.buffer)\n    };\n  }\n\n  // Get number of bytes needed for buffer allocation\n  getBytes() {\n    return this.size * 4;\n  }\n\n  // Get the current data as Float32Array, for bufferSubData\n  getData() {\n    return this.typedArray[GL_FLOAT];\n  }\n\n  // Get offset and data for one object (for bufferSubData)\n  getSubData(index) {\n    let data;\n    let offset;\n    if (index === undefined) {\n      data = this.data;\n      offset = 0;\n    } else {\n      const begin = this.offsets[index];\n      const end = begin + this.sizes[index];\n      data = this.data.subarray(begin, end);\n      offset = begin * 4;\n    }\n    return {data, offset};\n  }\n\n  // Set a map of values\n  setUniforms(values) {\n    for (const key in values) {\n      this._setValue(key, values[key]);\n    }\n    return this;\n  }\n\n  _setValue(key, value) {\n    const layout = this.layout[key];\n    assert(layout, 'UniformLayoutStd140 illegal argument');\n    const typedArray = this.typedArray[layout.type];\n    if (layout.size === 1) {\n      // single value -> just set it\n      typedArray[layout.offset] = value;\n    } else {\n      // vector/matrix -> copy the supplied (typed) array, starting from offset\n      typedArray.set(value, layout.offset);\n    }\n  }\n\n  _addUniform(key, uniformType) {\n    const typeAndComponents = decomposeCompositeGLType(uniformType);\n    assert(typeAndComponents, ERR_ARGUMENT);\n    const {type, components: count} = typeAndComponents;\n\n    // First, align (bump) current offset to an even multiple of current object (1, 2, 4)\n    this.size = this._alignTo(this.size, count);\n    // Use the aligned size as the offset of the current uniform.\n    const offset = this.size;\n    // Then, add our object's padded size ((1, 2, multiple of 4) to the current offset\n    this.size += count;\n\n    this.layout[key] = {type, size: count, offset};\n  }\n\n  // Align offset to 1, 2 or 4 elements (4, 8 or 16 bytes)\n  _alignTo(size, count) {\n    switch (count) {\n      case 1:\n        return size; // Pad upwards to even multiple of 2\n      case 2:\n        return size + (size % 2); // Pad upwards to even multiple of 2\n      default:\n        return size + ((4 - (size % 4)) % 4); // Pad upwards to even multiple of 4\n    }\n  }\n}\n"],"mappings":"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"}