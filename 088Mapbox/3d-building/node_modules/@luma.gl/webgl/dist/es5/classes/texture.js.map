{"version":3,"file":"texture.js","names":["NPOT_MIN_FILTERS","WebGLBuffer","globalThis","Texture","gl","props","id","uid","handle","target","textureUnit","undefined","loaded","width","height","depth","format","type","dataFormat","border","mipmaps","data","Promise","then","resolvedImageData","initialize","Object","assign","pixels","isVideo","HTMLVideoElement","readyState","HAVE_METADATA","_video","addEventListener","recreate","parameters","pixelStore","compressed","_deduceParameters","Number","isFinite","activeTexture","bindTexture","_isNPOT","log","warn","_updateForNPOT","setImageData","generateMipmap","setParameters","video","lastTime","HAVE_CURRENT_DATA","currentTime","setSubImageData","params","withParameters","options","_trackDeallocatedMemory","level","offset","dataType","_getDataType","gl2","compressedTextureSize","texImage2D","assertWebGL2Context","bindBuffer","isWebGL2","entries","levelIndex","levelData","compressedTexImage2D","levelSize","assert","_trackAllocatedMemory","byteLength","channels","DATA_FORMAT_CHANNELS","channelSize","TYPE_SIZES","x","y","ndarray","shape","Buffer","compressedTexSubImage2D","texSubImage2D","ArrayBuffer","isView","opts","error","getParameter","textureFormat","TEXTURE_FORMATS","types","_deduceImageSize","size","ImageData","HTMLImageElement","naturalWidth","naturalHeight","HTMLCanvasElement","ImageBitmap","videoWidth","videoHeight","createTexture","deleteTexture","pname","value","getTexParameter","param","_getNPOTParam","texParameterf","texParameteri","isPowerOfTwo","TEXTURE_MIN_FILTER","LINEAR","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","indexOf","linearFiltering","supported","isFormatSupported","isLinearFilteringSupported","Resource","Symbol","toStringTag"],"sources":["../../../src/classes/texture.js"],"sourcesContent":["import GL from '@luma.gl/constants';\nimport {isWebGL2, assertWebGL2Context, withParameters, log} from '@luma.gl/gltools';\n\nimport Resource from './resource';\nimport Buffer from './buffer';\nimport {\n  TEXTURE_FORMATS,\n  DATA_FORMAT_CHANNELS,\n  TYPE_SIZES,\n  isFormatSupported,\n  isLinearFilteringSupported\n} from './texture-formats';\nimport {assert} from '../utils/assert';\nimport {uid, isPowerOfTwo} from '../utils/utils';\n\n// Supported min filters for NPOT texture.\nconst NPOT_MIN_FILTERS = [GL.LINEAR, GL.NEAREST];\n\n// Polyfill\n// Note (Tarek): Do we really need to support this API?\nconst WebGLBuffer = globalThis.WebGLBuffer || function WebGLBuffer() {};\n\nexport default class Texture extends Resource {\n  // eslint-disable-next-line accessor-pairs\n  get [Symbol.toStringTag]() {\n    return 'Texture';\n  }\n  static isSupported(gl, opts = {}) {\n    const {format, linearFiltering} = opts;\n    let supported = true;\n    if (format) {\n      supported = supported && isFormatSupported(gl, format);\n      supported = supported && (!linearFiltering || isLinearFilteringSupported(gl, format));\n    }\n    return supported;\n  }\n\n  // target cannot be modified by bind:\n  // textures are special because when you first bind them to a target,\n  // they get special information. When you first bind a texture as a\n  // GL_TEXTURE_2D, you are actually setting special state in the texture.\n  // You are saying that this texture is a 2D texture.\n  // And it will always be a 2D texture; this state cannot be changed ever.\n  // If you have a texture that was first bound as a GL_TEXTURE_2D,\n  // you must always bind it as a GL_TEXTURE_2D;\n  // attempting to bind it as GL_TEXTURE_1D will give rise to an error\n  // (while run-time).\n  constructor(gl, props) {\n    const {\n      id = uid('texture'),\n      handle,\n      target\n      // , magFilter, minFilter, wrapS, wrapT\n    } = props;\n\n    super(gl, {id, handle});\n\n    this.target = target;\n    this.textureUnit = undefined;\n\n    // Program.draw() checks the loaded flag of all textures to avoid\n    // Textures that are still loading from promises\n    // Set to true as soon as texture has been initialized with valid data\n    this.loaded = false;\n\n    this.width = undefined;\n    this.height = undefined;\n    this.depth = undefined;\n    this.format = undefined;\n    this.type = undefined;\n    this.dataFormat = undefined;\n    this.border = undefined;\n    this.textureUnit = undefined;\n    this.mipmaps = undefined;\n  }\n\n  toString() {\n    return `Texture(${this.id},${this.width}x${this.height})`;\n  }\n\n  /* eslint-disable max-len, max-statements */\n  initialize(props = {}) {\n    let data = props.data;\n\n    if (data instanceof Promise) {\n      data.then(resolvedImageData =>\n        this.initialize(\n          Object.assign({}, props, {\n            pixels: resolvedImageData,\n            data: resolvedImageData\n          })\n        )\n      );\n      return this;\n    }\n    const isVideo = typeof HTMLVideoElement !== 'undefined' && data instanceof HTMLVideoElement;\n    // @ts-ignore\n    if (isVideo && data.readyState < HTMLVideoElement.HAVE_METADATA) {\n      this._video = null; // Declare member before the object is sealed\n      data.addEventListener('loadeddata', () => this.initialize(props));\n      return this;\n    }\n\n    const {\n      pixels = null,\n      format = GL.RGBA,\n      border = 0,\n      recreate = false,\n      parameters = {},\n      pixelStore = {},\n      textureUnit = undefined\n    } = props;\n\n    // pixels variable is for API compatibility purpose\n    if (!data) {\n      // TODO - This looks backwards? Commenting out for now until we decide\n      // which prop to use\n      // log.deprecated('data', 'pixels')();\n      data = pixels;\n    }\n\n    let {width, height, dataFormat, type, compressed = false, mipmaps = true} = props;\n    const {depth = 0} = props;\n\n    // Deduce width and height\n    ({width, height, compressed, dataFormat, type} = this._deduceParameters({\n      format,\n      type,\n      dataFormat,\n      compressed,\n      data,\n      width,\n      height\n    }));\n\n    // Store opts for accessors\n    this.width = width;\n    this.height = height;\n    this.depth = depth;\n    this.format = format;\n    this.type = type;\n    this.dataFormat = dataFormat;\n    this.border = border;\n    this.textureUnit = textureUnit;\n\n    if (Number.isFinite(this.textureUnit)) {\n      this.gl.activeTexture(GL.TEXTURE0 + this.textureUnit);\n      this.gl.bindTexture(this.target, this.handle);\n    }\n\n    if (mipmaps && this._isNPOT()) {\n      log.warn(`texture: ${this} is Non-Power-Of-Two, disabling mipmaping`)();\n      mipmaps = false;\n\n      this._updateForNPOT(parameters);\n    }\n\n    this.mipmaps = mipmaps;\n\n    this.setImageData({\n      data,\n      width,\n      height,\n      depth,\n      format,\n      type,\n      dataFormat,\n      border,\n      mipmaps,\n      parameters: pixelStore,\n      compressed\n    });\n\n    if (mipmaps) {\n      this.generateMipmap();\n    }\n\n    // Set texture sampler parameters\n    this.setParameters(parameters);\n\n    // TODO - Store data to enable auto recreate on context loss\n    if (recreate) {\n      this.data = data;\n    }\n    if (isVideo) {\n      this._video = {\n        video: data,\n        parameters,\n        // @ts-ignore\n        lastTime: data.readyState >= HTMLVideoElement.HAVE_CURRENT_DATA ? data.currentTime : -1\n      };\n    }\n\n    return this;\n  }\n\n  update() {\n    if (this._video) {\n      const {video, parameters, lastTime} = this._video;\n      // @ts-ignore\n      if (lastTime === video.currentTime || video.readyState < HTMLVideoElement.HAVE_CURRENT_DATA) {\n        return;\n      }\n      this.setSubImageData({\n        data: video,\n        parameters\n      });\n      if (this.mipmaps) {\n        this.generateMipmap();\n      }\n      this._video.lastTime = video.currentTime;\n    }\n  }\n\n  // If size has changed, reinitializes with current format\n  // note clears image and mipmaps\n  resize({height, width, mipmaps = false}) {\n    if (width !== this.width || height !== this.height) {\n      return this.initialize({\n        width,\n        height,\n        format: this.format,\n        type: this.type,\n        dataFormat: this.dataFormat,\n        border: this.border,\n        mipmaps\n      });\n    }\n    return this;\n  }\n\n  // Call to regenerate mipmaps after modifying texture(s)\n  generateMipmap(params = {}) {\n    if (this._isNPOT()) {\n      log.warn(`texture: ${this} is Non-Power-Of-Two, disabling mipmaping`)();\n      return this;\n    }\n\n    this.mipmaps = true;\n\n    this.gl.bindTexture(this.target, this.handle);\n    withParameters(this.gl, params, () => {\n      this.gl.generateMipmap(this.target);\n    });\n    this.gl.bindTexture(this.target, null);\n    return this;\n  }\n\n  /*\n   * Allocates storage\n   * @param {*} pixels -\n   *  null - create empty texture of specified format\n   *  Typed array - init from image data in typed array\n   *  Buffer|WebGLBuffer - (WEBGL2) init from image data in WebGLBuffer\n   *  HTMLImageElement|Image - Inits with content of image. Auto width/height\n   *  HTMLCanvasElement - Inits with contents of canvas. Auto width/height\n   *  HTMLVideoElement - Creates video texture. Auto width/height\n   *\n   * @param {GLint} width -\n   * @param {GLint} height -\n   * @param {GLint} mipMapLevel -\n   * @param {GLenum} format - format of image data.\n   * @param {GLenum} type\n   *  - format of array (autodetect from type) or\n   *  - (WEBGL2) format of buffer\n   * @param {Number} offset - (WEBGL2) offset from start of buffer\n   * @param {GLint} border - must be 0.\n   * @parameters - temporary settings to be applied, can be used to supply pixel store settings.\n   */\n  /* eslint-disable max-len, max-statements, complexity */\n  setImageData(options) {\n    this._trackDeallocatedMemory('Texture');\n\n    const {\n      target = this.target,\n      pixels = null,\n      level = 0,\n      format = this.format,\n      border = this.border,\n      offset = 0,\n      parameters = {}\n    } = options;\n\n    let {\n      data = null,\n      type = this.type,\n      width = this.width,\n      height = this.height,\n      dataFormat = this.dataFormat,\n      compressed = false\n    } = options;\n\n    // pixels variable is  for API compatibility purpose\n    if (!data) {\n      data = pixels;\n    }\n\n    ({type, dataFormat, compressed, width, height} = this._deduceParameters({\n      format,\n      type,\n      dataFormat,\n      compressed,\n      data,\n      width,\n      height\n    }));\n\n    const {gl} = this;\n    gl.bindTexture(this.target, this.handle);\n\n    let dataType = null;\n    ({data, dataType} = this._getDataType({data, compressed}));\n\n    let gl2;\n\n    let compressedTextureSize = 0;\n\n    withParameters(this.gl, parameters, () => {\n      switch (dataType) {\n        case 'null':\n          gl.texImage2D(target, level, format, width, height, border, dataFormat, type, data);\n          break;\n        case 'typed-array':\n          // Looks like this assert is not necessary, as offset is ignored under WebGL1\n          // assert((offset === 0 || isWebGL2(gl)), 'offset supported in WebGL2 only');\n          // @ts-ignore\n          gl.texImage2D(\n            target,\n            level,\n            format,\n            width,\n            height,\n            border,\n            dataFormat,\n            type,\n            data,\n            // @ts-ignore\n            offset\n          );\n          break;\n        case 'buffer':\n          // WebGL2 enables creating textures directly from a WebGL buffer\n          gl2 = assertWebGL2Context(gl);\n          gl2.bindBuffer(GL.PIXEL_UNPACK_BUFFER, data.handle || data);\n          gl2.texImage2D(target, level, format, width, height, border, dataFormat, type, offset);\n          gl2.bindBuffer(GL.PIXEL_UNPACK_BUFFER, null);\n          break;\n        case 'browser-object':\n          if (isWebGL2(gl)) {\n            gl.texImage2D(target, level, format, width, height, border, dataFormat, type, data);\n          } else {\n            gl.texImage2D(target, level, format, dataFormat, type, data);\n          }\n          break;\n        case 'compressed':\n          for (const [levelIndex, levelData] of data.entries()) {\n            gl.compressedTexImage2D(\n              target,\n              levelIndex,\n              levelData.format,\n              levelData.width,\n              levelData.height,\n              border,\n              levelData.data\n            );\n            compressedTextureSize += levelData.levelSize;\n          }\n          break;\n        default:\n          assert(false, 'Unknown image data type');\n      }\n    });\n\n    if (dataType === 'compressed') {\n      this._trackAllocatedMemory(compressedTextureSize, 'Texture');\n    } else if (data && data.byteLength) {\n      this._trackAllocatedMemory(data.byteLength, 'Texture');\n    } else {\n      // NOTE(Tarek): Default to RGBA bytes\n      const channels = DATA_FORMAT_CHANNELS[this.dataFormat] || 4;\n      const channelSize = TYPE_SIZES[this.type] || 1;\n\n      this._trackAllocatedMemory(this.width * this.height * channels * channelSize, 'Texture');\n    }\n\n    this.loaded = true;\n\n    return this;\n  }\n  /* eslint-enable max-len, max-statements, complexity */\n\n  /**\n   * Redefines an area of an existing texture\n   * Note: does not allocate storage\n   */\n  /*\n   * Redefines an area of an existing texture\n   * @param {*} pixels, data -\n   *  null - create empty texture of specified format\n   *  Typed array - init from image data in typed array\n   *  Buffer|WebGLBuffer - (WEBGL2) init from image data in WebGLBuffer\n   *  HTMLImageElement|Image - Inits with content of image. Auto width/height\n   *  HTMLCanvasElement - Inits with contents of canvas. Auto width/height\n   *  HTMLVideoElement - Creates video texture. Auto width/height\n   *\n   * @param {GLint} x - xOffset from where texture to be updated\n   * @param {GLint} y - yOffset from where texture to be updated\n   * @param {GLint} width - width of the sub image to be updated\n   * @param {GLint} height - height of the sub image to be updated\n   * @param {GLint} level - mip level to be updated\n   * @param {GLenum} format - internal format of image data.\n   * @param {GLenum} type\n   *  - format of array (autodetect from type) or\n   *  - (WEBGL2) format of buffer or ArrayBufferView\n   * @param {GLenum} dataFormat - format of image data.\n   * @param {Number} offset - (WEBGL2) offset from start of buffer\n   * @param {GLint} border - must be 0.\n   * @parameters - temporary settings to be applied, can be used to supply pixel store settings.\n   */\n  setSubImageData({\n    target = this.target,\n    pixels = null,\n    data = null,\n    x = 0,\n    y = 0,\n    width = this.width,\n    height = this.height,\n    level = 0,\n    format = this.format,\n    type = this.type,\n    dataFormat = this.dataFormat,\n    compressed = false,\n    offset = 0,\n    border = this.border,\n    parameters = {}\n  }) {\n    ({type, dataFormat, compressed, width, height} = this._deduceParameters({\n      format,\n      type,\n      dataFormat,\n      compressed,\n      data,\n      width,\n      height\n    }));\n\n    assert(this.depth === 0, 'texSubImage not supported for 3D textures');\n\n    // pixels variable is  for API compatibility purpose\n    if (!data) {\n      data = pixels;\n    }\n\n    // Support ndarrays\n    if (data && data.data) {\n      const ndarray = data;\n      data = ndarray.data;\n      width = ndarray.shape[0];\n      height = ndarray.shape[1];\n    }\n\n    // Support buffers\n    if (data instanceof Buffer) {\n      data = data.handle;\n    }\n\n    this.gl.bindTexture(this.target, this.handle);\n\n    withParameters(this.gl, parameters, () => {\n      // TODO - x,y parameters\n      if (compressed) {\n        this.gl.compressedTexSubImage2D(target, level, x, y, width, height, format, data);\n      } else if (data === null) {\n        this.gl.texSubImage2D(target, level, x, y, width, height, dataFormat, type, null);\n      } else if (ArrayBuffer.isView(data)) {\n        // const gl2 = assertWebGL2Context(this.gl);\n        // @ts-ignore last offset parameter is ignored under WebGL1\n        this.gl.texSubImage2D(target, level, x, y, width, height, dataFormat, type, data, offset);\n      } else if (data instanceof WebGLBuffer) {\n        // WebGL2 allows us to create texture directly from a WebGL buffer\n        const gl2 = assertWebGL2Context(this.gl);\n        // This texImage2D signature uses currently bound GL.PIXEL_UNPACK_BUFFER\n        gl2.bindBuffer(GL.PIXEL_UNPACK_BUFFER, data);\n        gl2.texSubImage2D(target, level, x, y, width, height, dataFormat, type, offset);\n        gl2.bindBuffer(GL.PIXEL_UNPACK_BUFFER, null);\n      } else if (isWebGL2(this.gl)) {\n        // Assume data is a browser supported object (ImageData, Canvas, ...)\n        const gl2 = assertWebGL2Context(this.gl);\n        gl2.texSubImage2D(target, level, x, y, width, height, dataFormat, type, data);\n      } else {\n        this.gl.texSubImage2D(target, level, x, y, dataFormat, type, data);\n      }\n    });\n\n    this.gl.bindTexture(this.target, null);\n  }\n  /* eslint-enable max-len, max-statements, complexity */\n\n  /**\n   * Defines a two-dimensional texture image or cube-map texture image with\n   * pixels from the current framebuffer (rather than from client memory).\n   * (gl.copyTexImage2D wrapper)\n   *\n   * Note that binding a texture into a Framebuffer's color buffer and\n   * rendering can be faster.\n   */\n  copyFramebuffer(opts = {}) {\n    log.error(\n      'Texture.copyFramebuffer({...}) is no logner supported, use copyToTexture(source, target, opts})'\n    )();\n    return null;\n  }\n\n  getActiveUnit() {\n    return this.gl.getParameter(GL.ACTIVE_TEXTURE) - GL.TEXTURE0;\n  }\n\n  // target cannot be modified by bind:\n  // textures are special because when you first bind them to a target,\n  // they get special information. When you first bind a texture as a\n  // GL_TEXTURE_2D, you are actually setting special state in the texture.\n  // You are saying that this texture is a 2D texture.\n  // And it will always be a 2D texture; this state cannot be changed ever.\n  // If you have a texture that was first bound as a GL_TEXTURE_2D,\n  // you must always bind it as a GL_TEXTURE_2D;\n  // attempting to bind it as GL_TEXTURE_1D will give rise to an error\n  // (while run-time).\n\n  bind(textureUnit = this.textureUnit) {\n    const {gl} = this;\n\n    if (textureUnit !== undefined) {\n      this.textureUnit = textureUnit;\n      gl.activeTexture(gl.TEXTURE0 + textureUnit);\n    }\n\n    gl.bindTexture(this.target, this.handle);\n    return textureUnit;\n  }\n\n  unbind(textureUnit = this.textureUnit) {\n    const {gl} = this;\n\n    if (textureUnit !== undefined) {\n      this.textureUnit = textureUnit;\n      gl.activeTexture(gl.TEXTURE0 + textureUnit);\n    }\n\n    gl.bindTexture(this.target, null);\n    return textureUnit;\n  }\n\n  // PRIVATE METHODS\n\n  _getDataType({data, compressed = false}) {\n    if (compressed) {\n      return {data, dataType: 'compressed'};\n    }\n    if (data === null) {\n      return {data, dataType: 'null'};\n    }\n    if (ArrayBuffer.isView(data)) {\n      return {data, dataType: 'typed-array'};\n    }\n    if (data instanceof Buffer) {\n      return {data: data.handle, dataType: 'buffer'};\n    }\n    if (data instanceof WebGLBuffer) {\n      return {data, dataType: 'buffer'};\n    }\n    // Assume data is a browser supported object (ImageData, Canvas, ...)\n    return {data, dataType: 'browser-object'};\n  }\n\n  /* Copied from texture-2d.js\n  // WebGL2\n  setPixels(opts = {}) {\n    const {\n      buffer,\n      width = null,\n      height = null,\n      mipmapLevel = 0,\n      format = GL.RGBA,\n      type = GL.UNSIGNED_BYTE,\n      border = 0\n    } = opts;\n\n    const {gl} = this;\n\n    // This signature of texImage2D uses currently bound GL.PIXEL_UNPACK_BUFFER\n    gl.bindBuffer(GL.PIXEL_UNPACK_BUFFER, buffer.target);\n    // And as always, we must also bind the texture itself\n    this.bind();\n\n    gl.texImage2D(gl.TEXTURE_2D,\n      mipmapLevel, format, width, height, border, format, type, buffer.target);\n\n    this.unbind();\n    gl.bindBuffer(GL.GL.PIXEL_UNPACK_BUFFER, null);\n    return this;\n  }\n\n  setImageDataFromCompressedBuffer(opts) {\n    const {\n      buffer,\n      // offset = 0,\n      width = null,\n      height = null,\n      mipmapLevel = 0,\n      internalFormat = GL.RGBA,\n      // format = GL.RGBA,\n      // type = GL.UNSIGNED_BYTE,\n      border = 0\n    } = opts;\n\n    const {gl} = this;\n    gl.compressedTexImage2D(this.target,\n      mipmapLevel, internalFormat, width, height, border, buffer);\n    // gl.compressedTexSubImage2D(target,\n    //   level, xoffset, yoffset, width, height, format, ArrayBufferView? pixels);\n    return this;\n  }\n\n  copySubImage(opts) {\n    const {\n      // pixels,\n      // offset = 0,\n      // x,\n      // y,\n      // width,\n      // height,\n      // mipmapLevel = 0,\n      // internalFormat = GL.RGBA,\n      // type = GL.UNSIGNED_BYTE,\n      // border = 0\n    } = opts;\n\n    // if (pixels instanceof ArrayBufferView) {\n    //   gl.texSubImage2D(target, level, x, y, width, height, format, type, pixels);\n    // }\n    // gl.texSubImage2D(target, level, x, y, format, type, ? pixels);\n    // gl.texSubImage2D(target, level, x, y, format, type, HTMLImageElement pixels);\n    // gl.texSubImage2D(target, level, x, y, format, type, HTMLCanvasElement pixels);\n    // gl.texSubImage2D(target, level, x, y, format, type, HTMLVideoElement pixels);\n    // // Additional signature in a WebGL 2 context:\n    // gl.texSubImage2D(target, level, x, y, format, type, GLintptr offset);\n  }\n  */\n\n  // HELPER METHODS\n\n  _deduceParameters(opts) {\n    const {format, data} = opts;\n    let {width, height, dataFormat, type, compressed} = opts;\n\n    // Deduce format and type from format\n    const textureFormat = TEXTURE_FORMATS[format];\n    dataFormat = dataFormat || (textureFormat && textureFormat.dataFormat);\n    type = type || (textureFormat && textureFormat.types[0]);\n\n    // Deduce compression from format\n    compressed = compressed || (textureFormat && textureFormat.compressed);\n\n    ({width, height} = this._deduceImageSize(data, width, height));\n\n    return {dataFormat, type, compressed, width, height, format, data};\n  }\n\n  // eslint-disable-next-line complexity\n  _deduceImageSize(data, width, height) {\n    let size;\n\n    if (typeof ImageData !== 'undefined' && data instanceof ImageData) {\n      size = {width: data.width, height: data.height};\n    } else if (typeof HTMLImageElement !== 'undefined' && data instanceof HTMLImageElement) {\n      size = {width: data.naturalWidth, height: data.naturalHeight};\n    } else if (typeof HTMLCanvasElement !== 'undefined' && data instanceof HTMLCanvasElement) {\n      size = {width: data.width, height: data.height};\n    } else if (typeof ImageBitmap !== 'undefined' && data instanceof ImageBitmap) {\n      size = {width: data.width, height: data.height};\n    } else if (typeof HTMLVideoElement !== 'undefined' && data instanceof HTMLVideoElement) {\n      size = {width: data.videoWidth, height: data.videoHeight};\n    } else if (!data) {\n      size = {width: width >= 0 ? width : 1, height: height >= 0 ? height : 1};\n    } else {\n      size = {width, height};\n    }\n\n    assert(size, 'Could not deduced texture size');\n    assert(\n      width === undefined || size.width === width,\n      'Deduced texture width does not match supplied width'\n    );\n    assert(\n      height === undefined || size.height === height,\n      'Deduced texture height does not match supplied height'\n    );\n\n    return size;\n  }\n\n  // RESOURCE METHODS\n\n  _createHandle() {\n    return this.gl.createTexture();\n  }\n\n  _deleteHandle() {\n    this.gl.deleteTexture(this.handle);\n    this._trackDeallocatedMemory('Texture');\n  }\n\n  _getParameter(pname) {\n    switch (pname) {\n      case GL.TEXTURE_WIDTH:\n        return this.width;\n      case GL.TEXTURE_HEIGHT:\n        return this.height;\n      default:\n        this.gl.bindTexture(this.target, this.handle);\n        const value = this.gl.getTexParameter(this.target, pname);\n        this.gl.bindTexture(this.target, null);\n        return value;\n    }\n  }\n\n  _setParameter(pname, param) {\n    this.gl.bindTexture(this.target, this.handle);\n\n    // NOTE: Apply NPOT workaround\n    param = this._getNPOTParam(pname, param);\n\n    // Apparently there are some integer/float conversion rules that made\n    // the WebGL committe expose two parameter setting functions in JavaScript.\n    // For now, pick the float version for parameters specified as GLfloat.\n    switch (pname) {\n      case GL.TEXTURE_MIN_LOD:\n      case GL.TEXTURE_MAX_LOD:\n        this.gl.texParameterf(this.handle, pname, param);\n        break;\n\n      case GL.TEXTURE_WIDTH:\n      case GL.TEXTURE_HEIGHT:\n        assert(false);\n        break;\n\n      default:\n        this.gl.texParameteri(this.target, pname, param);\n        break;\n    }\n\n    this.gl.bindTexture(this.target, null);\n    return this;\n  }\n\n  _isNPOT() {\n    if (isWebGL2(this.gl)) {\n      // NPOT restriction is only for WebGL1\n      return false;\n    }\n    // Width and height not available, consider it is not NPOT texture\n    if (!this.width || !this.height) {\n      return false;\n    }\n    return !isPowerOfTwo(this.width) || !isPowerOfTwo(this.height);\n  }\n\n  // Update default settings which are not supported by NPOT textures.\n  _updateForNPOT(parameters) {\n    if (parameters[this.gl.TEXTURE_MIN_FILTER] === undefined) {\n      // log.warn(`texture: ${this} is Non-Power-Of-Two, forcing TEXTURE_MIN_FILTER to LINEAR`)();\n      parameters[this.gl.TEXTURE_MIN_FILTER] = this.gl.LINEAR;\n    }\n    if (parameters[this.gl.TEXTURE_WRAP_S] === undefined) {\n      // log.warn(`texture: ${this} is Non-Power-Of-Two, forcing TEXTURE_WRAP_S to CLAMP_TO_EDGE`)();\n      parameters[this.gl.TEXTURE_WRAP_S] = this.gl.CLAMP_TO_EDGE;\n    }\n    if (parameters[this.gl.TEXTURE_WRAP_T] === undefined) {\n      // log.warn(`texture: ${this} is Non-Power-Of-Two, forcing TEXTURE_WRAP_T to CLAMP_TO_EDGE`)();\n      parameters[this.gl.TEXTURE_WRAP_T] = this.gl.CLAMP_TO_EDGE;\n    }\n  }\n\n  _getNPOTParam(pname, param) {\n    if (this._isNPOT()) {\n      switch (pname) {\n        case GL.TEXTURE_MIN_FILTER:\n          if (NPOT_MIN_FILTERS.indexOf(param) === -1) {\n            // log.warn(`texture: ${this} is Non-Power-Of-Two, forcing TEXTURE_MIN_FILTER to LINEAR`)();\n            param = GL.LINEAR;\n          }\n          break;\n        case GL.TEXTURE_WRAP_S:\n        case GL.TEXTURE_WRAP_T:\n          if (param !== GL.CLAMP_TO_EDGE) {\n            // log.warn(`texture: ${this} is Non-Power-Of-Two, ${getKey(this.gl, pname)} to CLAMP_TO_EDGE`)();\n            param = GL.CLAMP_TO_EDGE;\n          }\n          break;\n        default:\n          break;\n      }\n    }\n    return param;\n  }\n}\n"],"mappings":"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"}