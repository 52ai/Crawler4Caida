{"version":3,"file":"framebuffer.js","names":["ERR_MULTIPLE_RENDERTARGETS","Framebuffer","gl","opts","width","height","attachments","readBuffer","drawBuffers","ownResources","initialize","Object","seal","gl2","assertWebGL2Context","getParameter","MAX_COLOR_ATTACHMENTS","MAX_DRAW_BUFFERS","color","depth","stencil","check","undefined","assert","attachment","target","object","Array","isArray","resize","_createDefaultAttachments","update","clearAttachments","checkStatus","resource","delete","resizeAttachments","attach","prevHandle","bindFramebuffer","handle","_setReadBuffer","_setDrawBuffers","options","drawingBufferWidth","drawingBufferHeight","log","id","attachmentPoint","newAttachments","keys","forEach","key","assign","Number","descriptor","_unattach","Renderbuffer","_attachRenderbuffer","renderbuffer","texture","layer","level","_attachTexture","filter","status","getStatus","Error","_getFrameBufferStatus","checkFramebufferStatus","clear","value","drawBuffer","clearBuffer","error","x","y","invalidateAll","invalidateFramebuffer","pname","_getAttachmentParameterFallback","getFramebufferAttachmentParameter","getKey","parameters","constructor","ATTACHMENT_PARAMETERS","values","getAttachmentParameter","attachmentName","getAttachmentParameters","window","open","copyToDataUrl","logLevel","message","image","targetMaxHeight","defaultAttachments","Texture2D","pixels","format","type","mipmaps","push","oldAttachment","framebufferRenderbuffer","framebufferTexture2D","bindTexture","framebufferTextureLayer","face","mapIndexToCubeMapFace","getWebGL2Context","ext","getExtension","drawBuffersWEBGL","length","caps","getFeatures","WEBGL2","EXT_sRGB","createFramebuffer","deleteFramebuffer","colorBufferFloat","colorBufferHalfFloat","supported","Boolean","luma","defaultFramebuffer","Resource","Symbol","toStringTag","STATUS","FRAMEBUFFER_ATTACHMENT_PARAMETERS"],"sources":["../../../src/classes/framebuffer.js"],"sourcesContent":["import GL from '@luma.gl/constants';\nimport {getWebGL2Context, assertWebGL2Context, log} from '@luma.gl/gltools';\nimport Resource from './resource';\nimport Texture2D from './texture-2d';\nimport Renderbuffer from './renderbuffer';\nimport {clear, clearBuffer} from './clear';\nimport {copyToDataUrl} from './copy-and-blit.js';\n\nimport {getFeatures} from '../features';\nimport {getKey} from '../webgl-utils/constants-to-keys';\nimport {assert} from '../utils/assert';\n\nconst ERR_MULTIPLE_RENDERTARGETS = 'Multiple render targets not supported';\n\nexport default class Framebuffer extends Resource {\n  // eslint-disable-next-line accessor-pairs\n  get [Symbol.toStringTag]() {\n    return 'Framebuffer';\n  }\n  static isSupported(gl, options = {}) {\n    const {\n      colorBufferFloat, // Whether floating point textures can be rendered and read\n      colorBufferHalfFloat // Whether half float textures can be rendered and read\n    } = options;\n    let supported = true;\n\n    if (colorBufferFloat) {\n      supported = Boolean(\n        // WebGL 2\n        gl.getExtension('EXT_color_buffer_float') ||\n          // WebGL 1, not exposed on all platforms\n          gl.getExtension('WEBGL_color_buffer_float') ||\n          // WebGL 1, implicitly enables float render targets https://www.khronos.org/registry/webgl/extensions/OES_texture_float/\n          gl.getExtension('OES_texture_float')\n      );\n    }\n\n    if (colorBufferHalfFloat) {\n      supported =\n        supported &&\n        Boolean(\n          // WebGL 2\n          gl.getExtension('EXT_color_buffer_float') ||\n            // WebGL 1\n            gl.getExtension('EXT_color_buffer_half_float')\n        );\n    }\n\n    return supported;\n  }\n\n  // Create a Framebuffer wrapper for the default framebuffer (target === null)\n  static getDefaultFramebuffer(gl) {\n    gl.luma = gl.luma || {};\n    gl.luma.defaultFramebuffer =\n      gl.luma.defaultFramebuffer ||\n      new Framebuffer(gl, {\n        id: 'default-framebuffer',\n        handle: null,\n        attachments: {}\n      });\n    // TODO - can we query for and get a handle to the GL.FRONT renderbuffer?\n    return gl.luma.defaultFramebuffer;\n  }\n\n  get MAX_COLOR_ATTACHMENTS() {\n    const gl2 = assertWebGL2Context(this.gl);\n    return gl2.getParameter(gl2.MAX_COLOR_ATTACHMENTS);\n  }\n\n  get MAX_DRAW_BUFFERS() {\n    const gl2 = assertWebGL2Context(this.gl);\n    return gl2.getParameter(gl2.MAX_DRAW_BUFFERS);\n  }\n\n  constructor(gl, opts = {}) {\n    super(gl, opts);\n\n    // Public members\n    this.width = null;\n    this.height = null;\n    this.attachments = {};\n    this.readBuffer = GL.COLOR_ATTACHMENT0;\n    this.drawBuffers = [GL.COLOR_ATTACHMENT0];\n    this.ownResources = [];\n    this.initialize(opts);\n\n    Object.seal(this);\n  }\n\n  get color() {\n    return this.attachments[GL.COLOR_ATTACHMENT0] || null;\n  }\n\n  get texture() {\n    return this.attachments[GL.COLOR_ATTACHMENT0] || null;\n  }\n\n  get depth() {\n    return (\n      this.attachments[GL.DEPTH_ATTACHMENT] || this.attachments[GL.DEPTH_STENCIL_ATTACHMENT] || null\n    );\n  }\n\n  get stencil() {\n    return (\n      this.attachments[GL.STENCIL_ATTACHMENT] ||\n      this.attachments[GL.DEPTH_STENCIL_ATTACHMENT] ||\n      null\n    );\n  }\n\n  initialize({\n    width = 1,\n    height = 1,\n    attachments = null,\n    color = true,\n    depth = true,\n    stencil = false,\n    check = true,\n    readBuffer = undefined,\n    drawBuffers = undefined\n  }) {\n    assert(width >= 0 && height >= 0, 'Width and height need to be integers');\n\n    // Store actual width and height for diffing\n    this.width = width;\n    this.height = height;\n\n    // Resize any provided attachments - note that resize only resizes if needed\n    // Note: A framebuffer has no separate size, it is defined by its attachments (which must agree)\n    if (attachments) {\n      for (const attachment in attachments) {\n        const target = attachments[attachment];\n        const object = Array.isArray(target) ? target[0] : target;\n        object.resize({width, height});\n      }\n    } else {\n      // Create any requested default attachments\n      attachments = this._createDefaultAttachments(color, depth, stencil, width, height);\n    }\n\n    this.update({clearAttachments: true, attachments, readBuffer, drawBuffers});\n\n    // Checks that framebuffer was properly set up, if not, throws an explanatory error\n    if (attachments && check) {\n      this.checkStatus();\n    }\n  }\n\n  delete() {\n    for (const resource of this.ownResources) {\n      resource.delete();\n    }\n    super.delete();\n    return this;\n  }\n\n  update({\n    attachments = {},\n    readBuffer,\n    drawBuffers,\n    clearAttachments = false,\n    resizeAttachments = true\n  }) {\n    this.attach(attachments, {clearAttachments, resizeAttachments});\n\n    const {gl} = this;\n    // Multiple render target support, set read buffer and draw buffers\n    const prevHandle = gl.bindFramebuffer(GL.FRAMEBUFFER, this.handle);\n    if (readBuffer) {\n      this._setReadBuffer(readBuffer);\n    }\n    if (drawBuffers) {\n      this._setDrawBuffers(drawBuffers);\n    }\n    // @ts-ignore\n    gl.bindFramebuffer(GL.FRAMEBUFFER, prevHandle || null);\n\n    return this;\n  }\n\n  // Attachment resize is expected to be a noop if size is same\n  resize(options = {}) {\n    let {width, height} = options;\n    // for default framebuffer, just update the stored size\n    if (this.handle === null) {\n      assert(width === undefined && height === undefined);\n      this.width = this.gl.drawingBufferWidth;\n      this.height = this.gl.drawingBufferHeight;\n      return this;\n    }\n\n    if (width === undefined) {\n      width = this.gl.drawingBufferWidth;\n    }\n    if (height === undefined) {\n      height = this.gl.drawingBufferHeight;\n    }\n\n    if (width !== this.width && height !== this.height) {\n      log.log(2, `Resizing framebuffer ${this.id} to ${width}x${height}`)();\n    }\n    for (const attachmentPoint in this.attachments) {\n      this.attachments[attachmentPoint].resize({width, height});\n    }\n    this.width = width;\n    this.height = height;\n    return this;\n  }\n\n  // Attach from a map of attachments\n  attach(attachments, {clearAttachments = false, resizeAttachments = true} = {}) {\n    const newAttachments = {};\n\n    // Any current attachments need to be removed, add null values to map\n    if (clearAttachments) {\n      Object.keys(this.attachments).forEach(key => {\n        newAttachments[key] = null;\n      });\n    }\n\n    // Overlay the new attachments\n    Object.assign(newAttachments, attachments);\n\n    const prevHandle = this.gl.bindFramebuffer(GL.FRAMEBUFFER, this.handle);\n\n    // Walk the attachments\n    for (const key in newAttachments) {\n      // Ensure key is not undefined\n      assert(key !== undefined, 'Misspelled framebuffer binding point?');\n\n      const attachment = Number(key);\n\n      const descriptor = newAttachments[attachment];\n      let object = descriptor;\n      if (!object) {\n        this._unattach(attachment);\n      } else if (object instanceof Renderbuffer) {\n        this._attachRenderbuffer({attachment, renderbuffer: object});\n      } else if (Array.isArray(descriptor)) {\n        const [texture, layer = 0, level = 0] = descriptor;\n        object = texture;\n        this._attachTexture({attachment, texture, layer, level});\n      } else {\n        this._attachTexture({attachment, texture: object, layer: 0, level: 0});\n      }\n\n      // Resize objects\n      if (resizeAttachments && object) {\n        object.resize({width: this.width, height: this.height});\n      }\n    }\n\n    // @ts-ignore\n    this.gl.bindFramebuffer(GL.FRAMEBUFFER, prevHandle || null);\n\n    // Assign to attachments and remove any nulls to get a clean attachment map\n    Object.assign(this.attachments, attachments);\n    Object.keys(this.attachments)\n      .filter(key => !this.attachments[key])\n      .forEach(key => {\n        delete this.attachments[key];\n      });\n  }\n\n  checkStatus() {\n    const {gl} = this;\n    const status = this.getStatus();\n    if (status !== gl.FRAMEBUFFER_COMPLETE) {\n      throw new Error(_getFrameBufferStatus(status));\n    }\n    return this;\n  }\n\n  getStatus() {\n    const {gl} = this;\n    const prevHandle = gl.bindFramebuffer(GL.FRAMEBUFFER, this.handle);\n    const status = gl.checkFramebufferStatus(GL.FRAMEBUFFER);\n    // @ts-ignore\n    gl.bindFramebuffer(GL.FRAMEBUFFER, prevHandle || null);\n    return status;\n  }\n\n  clear(options = {}) {\n    const {color, depth, stencil, drawBuffers = []} = options;\n\n    // Bind framebuffer and delegate to global clear functions\n    const prevHandle = this.gl.bindFramebuffer(GL.FRAMEBUFFER, this.handle);\n\n    if (color || depth || stencil) {\n      clear(this.gl, {color, depth, stencil});\n    }\n\n    drawBuffers.forEach((value, drawBuffer) => {\n      clearBuffer(this.gl, {drawBuffer, value});\n    });\n\n    // @ts-ignore\n    this.gl.bindFramebuffer(GL.FRAMEBUFFER, prevHandle || null);\n\n    return this;\n  }\n\n  // NOTE: Slow requires roundtrip to GPU\n  // App can provide pixelArray or have it auto allocated by this method\n  // @returns {Uint8Array|Uint16Array|FloatArray} - pixel array,\n  //  newly allocated by this method unless provided by app.\n  readPixels(opts = {}) {\n    log.error(\n      'Framebuffer.readPixels() is no logner supported, use readPixelsToArray(framebuffer)'\n    )();\n    return null;\n  }\n\n  // Reads data into provided buffer object asynchronously\n  // This function doesn't wait for copy to be complete, it programs GPU to perform a DMA transffer.\n  readPixelsToBuffer(opts = {}) {\n    log.error(\n      'Framebuffer.readPixelsToBuffer()is no logner supported, use readPixelsToBuffer(framebuffer)'\n    )();\n    return null;\n  }\n\n  // Reads pixels as a dataUrl\n  copyToDataUrl(opts = {}) {\n    log.error(\n      'Framebuffer.copyToDataUrl() is no logner supported, use copyToDataUrl(framebuffer)'\n    )();\n    return null;\n  }\n\n  // Reads pixels into an HTML Image\n  copyToImage(opts = {}) {\n    log.error('Framebuffer.copyToImage() is no logner supported, use copyToImage(framebuffer)')();\n    return null;\n  }\n\n  // copyToFramebuffer({width, height}) {\n  //   const scaleX = width / this.width;\n  //   const scaleY = height / this.height;\n  //   const scale = Math.min(scaleX, scaleY);\n  //   width = width * scale;\n  //   height = height * scale;\n  //   const scaledFramebuffer = new Framebuffer(this.gl, {width, height});\n  //   this.blit();\n  // }\n\n  // Copy a rectangle from a framebuffer attachment into a texture (at an offset)\n  // NOTE: assumes texture has enough storage allocated\n  // eslint-disable-next-line complexity\n  copyToTexture(opts = {}) {\n    log.error(\n      'Framebuffer.copyToTexture({...}) is no logner supported, use copyToTexture(source, target, opts})'\n    )();\n    return null;\n  }\n\n  // WEBGL2 INTERFACE\n\n  // Copies a rectangle of pixels between framebuffers\n  // eslint-disable-next-line complexity\n  blit(opts = {}) {\n    log.error('Framebuffer.blit({...}) is no logner supported, use blit(source, target, opts)')();\n    return null;\n  }\n\n  // signals to the GL that it need not preserve all pixels of a specified region of the framebuffer\n  invalidate({attachments = [], x = 0, y = 0, width, height}) {\n    const gl2 = assertWebGL2Context(this.gl);\n    const prevHandle = gl2.bindFramebuffer(GL.READ_FRAMEBUFFER, this.handle);\n    const invalidateAll = x === 0 && y === 0 && width === undefined && height === undefined;\n    if (invalidateAll) {\n      gl2.invalidateFramebuffer(GL.READ_FRAMEBUFFER, attachments);\n    } else {\n      // TODO - why does type checking fail on this line\n      // @ts-ignore\n      gl2.invalidateFramebuffer(GL.READ_FRAMEBUFFER, attachments, x, y, width, height);\n    }\n    // @ts-ignore\n    gl2.bindFramebuffer(GL.READ_FRAMEBUFFER, prevHandle);\n    return this;\n  }\n\n  // Return the value for `pname` of the specified attachment.\n  // The type returned is the type of the requested pname\n  getAttachmentParameter(attachment, pname, keys) {\n    let value = this._getAttachmentParameterFallback(pname);\n    if (value === null) {\n      this.gl.bindFramebuffer(GL.FRAMEBUFFER, this.handle);\n      value = this.gl.getFramebufferAttachmentParameter(GL.FRAMEBUFFER, attachment, pname);\n      this.gl.bindFramebuffer(GL.FRAMEBUFFER, null);\n    }\n    if (keys && value > 1000) {\n      // @ts-ignore\n      value = getKey(this.gl, value);\n    }\n    return value;\n  }\n\n  getAttachmentParameters(\n    attachment = GL.COLOR_ATTACHMENT0,\n    keys,\n    // @ts-ignore\n    parameters = this.constructor.ATTACHMENT_PARAMETERS || []\n  ) {\n    const values = {};\n    for (const pname of parameters) {\n      const key = keys ? getKey(this.gl, pname) : pname;\n      values[key] = this.getAttachmentParameter(attachment, pname, keys);\n    }\n    return values;\n  }\n\n  getParameters(keys = true) {\n    const attachments = Object.keys(this.attachments);\n    // if (this === this.gl.luma.defaultFramebuffer) {\n    //   attachments = [GL.COLOR_ATTACHMENT0, GL.DEPTH_STENCIL_ATTACHMENT];\n    // }\n    const parameters = {};\n    for (const attachmentName of attachments) {\n      const attachment = Number(attachmentName);\n      const key = keys ? getKey(this.gl, attachment) : attachment;\n      parameters[key] = this.getAttachmentParameters(attachment, keys);\n    }\n    return parameters;\n  }\n\n  // DEBUG\n\n  // Note: Will only work when called in an event handler\n  show() {\n    if (typeof window !== 'undefined') {\n      window.open(copyToDataUrl(this), 'luma-debug-texture');\n    }\n    return this;\n  }\n\n  log(logLevel = 0, message = '') {\n    if (logLevel > log.level || typeof window === 'undefined') {\n      return this;\n    }\n    message = message || `Framebuffer ${this.id}`;\n    const image = copyToDataUrl(this, {targetMaxHeight: 100});\n    // @ts-expect-error\n    log.image({logLevel, message, image}, message)();\n    return this;\n  }\n\n  // WEBGL INTERFACE\n  bind({target = GL.FRAMEBUFFER} = {}) {\n    this.gl.bindFramebuffer(target, this.handle);\n    return this;\n  }\n\n  unbind({target = GL.FRAMEBUFFER} = {}) {\n    this.gl.bindFramebuffer(target, null);\n    return this;\n  }\n\n  // PRIVATE METHODS\n\n  _createDefaultAttachments(color, depth, stencil, width, height) {\n    let defaultAttachments = null;\n\n    // Add a color buffer if requested and not supplied\n    if (color) {\n      defaultAttachments = defaultAttachments || {};\n      defaultAttachments[GL.COLOR_ATTACHMENT0] = new Texture2D(this.gl, {\n        id: `${this.id}-color0`,\n        pixels: null, // reserves texture memory, but texels are undefined\n        format: GL.RGBA,\n        type: GL.UNSIGNED_BYTE,\n        width,\n        height,\n        // Note: Mipmapping can be disabled by texture resource when we resize the texture\n        // to a non-power-of-two dimenstion (NPOT texture) under WebGL1. To have consistant\n        // behavior we always disable mipmaps.\n        mipmaps: false,\n        // Set MIN and MAG filtering parameters so mipmaps are not used in sampling.\n        // Use LINEAR so subpixel algos like fxaa work.\n        // Set WRAP modes that support NPOT textures too.\n        parameters: {\n          [GL.TEXTURE_MIN_FILTER]: GL.LINEAR,\n          [GL.TEXTURE_MAG_FILTER]: GL.LINEAR,\n          [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n          [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE\n        }\n      });\n      // track to delete later\n      this.ownResources.push(defaultAttachments[GL.COLOR_ATTACHMENT0]);\n    }\n\n    if (depth && stencil) {\n      // TODO - handle separate stencil\n      defaultAttachments = defaultAttachments || {};\n      defaultAttachments[GL.DEPTH_STENCIL_ATTACHMENT] = new Renderbuffer(this.gl, {\n        id: `${this.id}-depth-stencil`,\n        format: GL.DEPTH24_STENCIL8,\n        width,\n        height: 111\n      });\n      // track to delete later\n      this.ownResources.push(defaultAttachments[GL.DEPTH_STENCIL_ATTACHMENT]);\n      // TODO - optional texture\n      // new Texture2D(this.gl, {\n      //   id: `${this.id}-depth-stencil`,\n      //   format: GL.DEPTH24_STENCIL8,\n      //   dataFormat: GL.DEPTH_STENCIL,\n      //   type: GL.UNSIGNED_INT_24_8,\n      //   width,\n      //   height,\n      //   mipmaps: false\n      // });\n    } else if (depth) {\n      // Add a depth buffer if requested and not supplied\n      defaultAttachments = defaultAttachments || {};\n      defaultAttachments[GL.DEPTH_ATTACHMENT] = new Renderbuffer(this.gl, {\n        id: `${this.id}-depth`,\n        format: GL.DEPTH_COMPONENT16,\n        width,\n        height\n      });\n      // track to delete later\n      this.ownResources.push(defaultAttachments[GL.DEPTH_ATTACHMENT]);\n    } else if (stencil) {\n      // TODO - handle separate stencil\n      assert(false);\n    }\n\n    return defaultAttachments;\n  }\n\n  _unattach(attachment) {\n    const oldAttachment = this.attachments[attachment];\n    if (!oldAttachment) {\n      return;\n    }\n    if (oldAttachment instanceof Renderbuffer) {\n      // render buffer\n      this.gl.framebufferRenderbuffer(GL.FRAMEBUFFER, attachment, GL.RENDERBUFFER, null);\n    } else {\n      // Must be a texture attachment\n      this.gl.framebufferTexture2D(GL.FRAMEBUFFER, attachment, GL.TEXTURE_2D, null, 0);\n    }\n    delete this.attachments[attachment];\n  }\n\n  _attachRenderbuffer({attachment = GL.COLOR_ATTACHMENT0, renderbuffer}) {\n    const {gl} = this;\n    // TODO - is the bind needed?\n    // gl.bindRenderbuffer(GL.RENDERBUFFER, renderbuffer.handle);\n    gl.framebufferRenderbuffer(GL.FRAMEBUFFER, attachment, GL.RENDERBUFFER, renderbuffer.handle);\n    // TODO - is the unbind needed?\n    // gl.bindRenderbuffer(GL.RENDERBUFFER, null);\n\n    this.attachments[attachment] = renderbuffer;\n  }\n\n  // layer = 0 - index into Texture2DArray and Texture3D or face for `TextureCubeMap`\n  // level = 0 - mipmapLevel (must be 0 in WebGL1)\n  _attachTexture({attachment = GL.COLOR_ATTACHMENT0, texture, layer, level}) {\n    const {gl} = this;\n    gl.bindTexture(texture.target, texture.handle);\n\n    switch (texture.target) {\n      case GL.TEXTURE_2D_ARRAY:\n      case GL.TEXTURE_3D:\n        const gl2 = assertWebGL2Context(gl);\n        gl2.framebufferTextureLayer(GL.FRAMEBUFFER, attachment, texture.target, level, layer);\n        break;\n\n      case GL.TEXTURE_CUBE_MAP:\n        // layer must be a cubemap face (or if index, converted to cube map face)\n        const face = mapIndexToCubeMapFace(layer);\n        gl.framebufferTexture2D(GL.FRAMEBUFFER, attachment, face, texture.handle, level);\n        break;\n\n      case GL.TEXTURE_2D:\n        gl.framebufferTexture2D(GL.FRAMEBUFFER, attachment, GL.TEXTURE_2D, texture.handle, level);\n        break;\n\n      default:\n        assert(false, 'Illegal texture type');\n    }\n\n    gl.bindTexture(texture.target, null);\n    this.attachments[attachment] = texture;\n  }\n\n  // Expects framebuffer to be bound\n  _setReadBuffer(readBuffer) {\n    const gl2 = getWebGL2Context(this.gl);\n    if (gl2) {\n      gl2.readBuffer(readBuffer);\n    } else {\n      // Setting to color attachment 0 is a noop, so allow it in WebGL1\n      assert(\n        readBuffer === GL.COLOR_ATTACHMENT0 || readBuffer === GL.BACK,\n        ERR_MULTIPLE_RENDERTARGETS\n      );\n    }\n    this.readBuffer = readBuffer;\n  }\n\n  // Expects framebuffer to be bound\n  _setDrawBuffers(drawBuffers) {\n    const {gl} = this;\n    const gl2 = assertWebGL2Context(gl);\n    if (gl2) {\n      gl2.drawBuffers(drawBuffers);\n    } else {\n      // TODO - is this not handled by polyfills?\n      const ext = gl.getExtension('WEBGL_draw_buffers');\n      if (ext) {\n        ext.drawBuffersWEBGL(drawBuffers);\n      } else {\n        // Setting a single draw buffer to color attachment 0 is a noop, allow in WebGL1\n        assert(\n          drawBuffers.length === 1 &&\n            (drawBuffers[0] === GL.COLOR_ATTACHMENT0 || drawBuffers[0] === GL.BACK),\n          ERR_MULTIPLE_RENDERTARGETS\n        );\n      }\n    }\n    this.drawBuffers = drawBuffers;\n  }\n\n  // Attempt to provide workable defaults for WebGL2 symbols under WebGL1\n  // null means OK to query\n  // TODO - move to webgl1 polyfills\n  /* eslint-disable complexity */\n  _getAttachmentParameterFallback(pname) {\n    const caps = getFeatures(this.gl);\n\n    switch (pname) {\n      case GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER: // GLint\n        return !caps.WEBGL2 ? 0 : null;\n      case GL.FRAMEBUFFER_ATTACHMENT_RED_SIZE: // GLint\n      case GL.FRAMEBUFFER_ATTACHMENT_GREEN_SIZE: // GLint\n      case GL.FRAMEBUFFER_ATTACHMENT_BLUE_SIZE: // GLint\n      case GL.FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE: // GLint\n      case GL.FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE: // GLint\n      case GL.FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE: // GLint\n        return !caps.WEBGL2 ? 8 : null;\n      case GL.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE: // GLenum\n        return !caps.WEBGL2 ? GL.UNSIGNED_INT : null;\n      case GL.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING:\n        return !caps.WEBGL2 && !caps.EXT_sRGB ? GL.LINEAR : null;\n      default:\n        return null;\n    }\n  }\n  /* eslint-enable complexity */\n\n  // RESOURCE METHODS\n\n  _createHandle() {\n    return this.gl.createFramebuffer();\n  }\n\n  _deleteHandle() {\n    this.gl.deleteFramebuffer(this.handle);\n  }\n\n  _bindHandle(handle) {\n    return this.gl.bindFramebuffer(GL.FRAMEBUFFER, handle);\n  }\n}\n\n// PUBLIC METHODS\n\n// Map an index to a cube map face constant\nfunction mapIndexToCubeMapFace(layer) {\n  // TEXTURE_CUBE_MAP_POSITIVE_X is a big value (0x8515)\n  // if smaller assume layer is index, otherwise assume it is already a cube map face constant\n  return layer < GL.TEXTURE_CUBE_MAP_POSITIVE_X ? layer + GL.TEXTURE_CUBE_MAP_POSITIVE_X : layer;\n}\n\n// Helper METHODS\n// Get a string describing the framebuffer error if installed\nfunction _getFrameBufferStatus(status) {\n  // Use error mapping if installed\n  // @ts-ignore\n  const STATUS = Framebuffer.STATUS || {};\n  return STATUS[status] || `Framebuffer error ${status}`;\n}\n\nexport const FRAMEBUFFER_ATTACHMENT_PARAMETERS = [\n  GL.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME, // WebGLRenderbuffer or WebGLTexture\n  GL.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE, // GL.RENDERBUFFER, GL.TEXTURE, GL.NONE\n  // GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE, // GL.TEXTURE_CUBE_MAP_POSITIVE_X, etc.\n  // GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL, // GLint\n  // EXT_sRGB or WebGL2\n  GL.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING, // GL.LINEAR, GL.SRBG\n  // WebGL2\n  // GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER, // GLint\n  GL.FRAMEBUFFER_ATTACHMENT_RED_SIZE, // GLint\n  GL.FRAMEBUFFER_ATTACHMENT_GREEN_SIZE, // GLint\n  GL.FRAMEBUFFER_ATTACHMENT_BLUE_SIZE, // GLint\n  GL.FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE, // GLint\n  GL.FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE, // GLint\n  GL.FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE // GLint\n  // GL.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE\n  // GL.FLOAT, GL.INT, GL.UNSIGNED_INT, GL.SIGNED_NORMALIZED, OR GL.UNSIGNED_NORMALIZED.\n];\n\nFramebuffer.ATTACHMENT_PARAMETERS = FRAMEBUFFER_ATTACHMENT_PARAMETERS;\n"],"mappings":"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"}