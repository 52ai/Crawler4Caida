{"version":3,"file":"check-props.js","names":["checkProps","className","props","propChecks","removedProps","deprecatedProps","replacedProps","propName","replacementProp","replacement","log","removed","deprecated","newProps","Object","assign"],"sources":["../../../src/utils/check-props.js"],"sourcesContent":["/* Use as\nimport {checkProps} from '../util/check-props;'\n\nconst PROP_CHECKS = {\n  // Removed props no longer supported, print error and link to upgrade guide\n  removedProps: {\n  },\n  // Deprecated props\n  deprecatedProps: {\n    offset: 'accessor',\n    stride: 'accessor',\n    type: 'accessor',\n    size: 'accessor',\n    divisor: 'accessor',\n    normalized: 'accessor',\n    integer: 'accessor'\n  },\n  // Deprecated props that can be autosubstituted, print warning and return updated props object\n  replacedProps: {\n    bytes: 'byteLength'\n  }\n}\n\nclass Buffer {\n  setProps(props) {\n    checkProps('Buffer', props, PROP_CHECKS);\n  }\n}\n*/\nimport {log} from '@luma.gl/gltools';\n\nexport function checkProps(className, props, propChecks) {\n  const {removedProps = {}, deprecatedProps = {}, replacedProps = {}} = propChecks;\n\n  // removedProps: Removed props no longer supported\n  // print error and link to upgrade guide\n  for (const propName in removedProps) {\n    if (propName in props) {\n      const replacementProp = removedProps[propName];\n      const replacement = replacementProp ? `${className}.${removedProps[propName]}` : 'N/A';\n      log.removed(`${className}.${propName}`, replacement)();\n    }\n  }\n\n  // deprecatedProps: Deprecated props that can not be autosubstituted\n  // print warning and rely on caller to substitute\n  for (const propName in deprecatedProps) {\n    if (propName in props) {\n      const replacementProp = deprecatedProps[propName];\n      log.deprecated(`${className}.${propName}`, `${className}.${replacementProp}`)();\n    }\n  }\n\n  // replacedProps: Deprecated props that can be autosubstituted\n  // print warning and return updated props object\n  let newProps = null;\n  for (const propName in replacedProps) {\n    if (propName in props) {\n      const replacementProp = replacedProps[propName];\n      log.deprecated(`${className}.${propName}`, `${className}.${replacementProp}`)();\n      newProps = newProps || Object.assign({}, props);\n      newProps[replacementProp] = props[propName];\n      delete newProps[propName];\n    }\n  }\n\n  return newProps || props;\n}\n"],"mappings":";;;;;;;AA6BA;;AAEO,SAASA,UAAT,CAAoBC,SAApB,EAA+BC,KAA/B,EAAsCC,UAAtC,EAAkD;EACvD,4BAAsEA,UAAtE,CAAOC,YAAP;EAAA,IAAOA,YAAP,sCAAsB,EAAtB;EAAA,4BAAsED,UAAtE,CAA0BE,eAA1B;EAAA,IAA0BA,eAA1B,sCAA4C,EAA5C;EAAA,4BAAsEF,UAAtE,CAAgDG,aAAhD;EAAA,IAAgDA,aAAhD,sCAAgE,EAAhE;;EAIA,KAAK,IAAMC,QAAX,IAAuBH,YAAvB,EAAqC;IACnC,IAAIG,QAAQ,IAAIL,KAAhB,EAAuB;MACrB,IAAMM,eAAe,GAAGJ,YAAY,CAACG,QAAD,CAApC;MACA,IAAME,WAAW,GAAGD,eAAe,aAAMP,SAAN,cAAmBG,YAAY,CAACG,QAAD,CAA/B,IAA8C,KAAjF;;MACAG,YAAA,CAAIC,OAAJ,WAAeV,SAAf,cAA4BM,QAA5B,GAAwCE,WAAxC;IACD;EACF;;EAID,KAAK,IAAMF,SAAX,IAAuBF,eAAvB,EAAwC;IACtC,IAAIE,SAAQ,IAAIL,KAAhB,EAAuB;MACrB,IAAMM,gBAAe,GAAGH,eAAe,CAACE,SAAD,CAAvC;;MACAG,YAAA,CAAIE,UAAJ,WAAkBX,SAAlB,cAA+BM,SAA/B,aAA8CN,SAA9C,cAA2DO,gBAA3D;IACD;EACF;;EAID,IAAIK,QAAQ,GAAG,IAAf;;EACA,KAAK,IAAMN,UAAX,IAAuBD,aAAvB,EAAsC;IACpC,IAAIC,UAAQ,IAAIL,KAAhB,EAAuB;MACrB,IAAMM,iBAAe,GAAGF,aAAa,CAACC,UAAD,CAArC;;MACAG,YAAA,CAAIE,UAAJ,WAAkBX,SAAlB,cAA+BM,UAA/B,aAA8CN,SAA9C,cAA2DO,iBAA3D;;MACAK,QAAQ,GAAGA,QAAQ,IAAIC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBb,KAAlB,CAAvB;MACAW,QAAQ,CAACL,iBAAD,CAAR,GAA4BN,KAAK,CAACK,UAAD,CAAjC;MACA,OAAOM,QAAQ,CAACN,UAAD,CAAf;IACD;EACF;;EAED,OAAOM,QAAQ,IAAIX,KAAnB;AACD"}