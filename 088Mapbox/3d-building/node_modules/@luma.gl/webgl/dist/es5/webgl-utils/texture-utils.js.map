{"version":3,"file":"texture-utils.js","names":["cloneTextureFrom","refTexture","overrides","assert","Texture2D","TextureCube","Texture3D","TextureType","constructor","gl","width","height","format","type","dataFormat","border","mipmaps","textureOptions","Object","assign","toFramebuffer","texture","opts","id","framebuffer","Framebuffer","attachments"],"sources":["../../../src/webgl-utils/texture-utils.js"],"sourcesContent":["// TODO: Two subdirectories must not depend on each other (classes vs utils)!\nimport Texture2D from '../classes/texture-2d';\nimport TextureCube from '../classes/texture-cube';\nimport Texture3D from '../classes/texture-3d';\nimport Framebuffer from '../classes/framebuffer';\nimport GL from '@luma.gl/constants';\nimport {assert} from '../utils/assert';\n\n// Clone a new texture object from a reference texture object.\n/** @type {import('./texture-utils').cloneTextureFrom} */\nexport function cloneTextureFrom(refTexture, overrides) {\n  assert(\n    refTexture instanceof Texture2D ||\n      refTexture instanceof TextureCube ||\n      refTexture instanceof Texture3D\n  );\n\n  const TextureType = refTexture.constructor;\n\n  // @ts-expect-error\n  const {gl, width, height, format, type, dataFormat, border, mipmaps} = refTexture;\n\n  const textureOptions = Object.assign(\n    {\n      width,\n      height,\n      format,\n      type,\n      dataFormat,\n      border,\n      mipmaps\n    },\n    overrides\n  );\n\n  // TODO: move this to `Texture` class as instance method and use this.constructor\n  // @ts-expect-error\n  return new TextureType(gl, textureOptions);\n}\n\n// Wraps a given texture into a framebuffer object, that can be further used\n// to read data from the texture object.\n/** @type {import('./texture-utils').toFramebuffer} */\nexport function toFramebuffer(texture, opts) {\n  const {gl, width, height, id} = texture;\n  const framebuffer = new Framebuffer(\n    gl,\n    Object.assign({}, opts, {\n      id: `framebuffer-for-${id}`,\n      width,\n      height,\n      attachments: {\n        [GL.COLOR_ATTACHMENT0]: texture\n      }\n    })\n  );\n  return framebuffer;\n}\n"],"mappings":";;;;;;;;;;;;AACA;;AACA;;AACA;;AACA;;AAEA;;AAIO,SAASA,gBAAT,CAA0BC,UAA1B,EAAsCC,SAAtC,EAAiD;EACtD,IAAAC,cAAA,EACEF,UAAU,YAAYG,kBAAtB,IACEH,UAAU,YAAYI,oBADxB,IAEEJ,UAAU,YAAYK,kBAH1B;EAMA,IAAMC,WAAW,GAAGN,UAAU,CAACO,WAA/B;EAGA,IAAOC,EAAP,GAAuER,UAAvE,CAAOQ,EAAP;EAAA,IAAWC,KAAX,GAAuET,UAAvE,CAAWS,KAAX;EAAA,IAAkBC,MAAlB,GAAuEV,UAAvE,CAAkBU,MAAlB;EAAA,IAA0BC,MAA1B,GAAuEX,UAAvE,CAA0BW,MAA1B;EAAA,IAAkCC,IAAlC,GAAuEZ,UAAvE,CAAkCY,IAAlC;EAAA,IAAwCC,UAAxC,GAAuEb,UAAvE,CAAwCa,UAAxC;EAAA,IAAoDC,MAApD,GAAuEd,UAAvE,CAAoDc,MAApD;EAAA,IAA4DC,OAA5D,GAAuEf,UAAvE,CAA4De,OAA5D;EAEA,IAAMC,cAAc,GAAGC,MAAM,CAACC,MAAP,CACrB;IACET,KAAK,EAALA,KADF;IAEEC,MAAM,EAANA,MAFF;IAGEC,MAAM,EAANA,MAHF;IAIEC,IAAI,EAAJA,IAJF;IAKEC,UAAU,EAAVA,UALF;IAMEC,MAAM,EAANA,MANF;IAOEC,OAAO,EAAPA;EAPF,CADqB,EAUrBd,SAVqB,CAAvB;EAeA,OAAO,IAAIK,WAAJ,CAAgBE,EAAhB,EAAoBQ,cAApB,CAAP;AACD;;AAKM,SAASG,aAAT,CAAuBC,OAAvB,EAAgCC,IAAhC,EAAsC;EAC3C,IAAOb,EAAP,GAAgCY,OAAhC,CAAOZ,EAAP;EAAA,IAAWC,KAAX,GAAgCW,OAAhC,CAAWX,KAAX;EAAA,IAAkBC,MAAlB,GAAgCU,OAAhC,CAAkBV,MAAlB;EAAA,IAA0BY,EAA1B,GAAgCF,OAAhC,CAA0BE,EAA1B;EACA,IAAMC,WAAW,GAAG,IAAIC,oBAAJ,CAClBhB,EADkB,EAElBS,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBG,IAAlB,EAAwB;IACtBC,EAAE,4BAAqBA,EAArB,CADoB;IAEtBb,KAAK,EAALA,KAFsB;IAGtBC,MAAM,EAANA,MAHsB;IAItBe,WAAW,2CACeL,OADf;EAJW,CAAxB,CAFkB,CAApB;EAWA,OAAOG,WAAP;AACD"}