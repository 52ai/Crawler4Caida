{"version":3,"file":"inject-shader.js","names":["MODULE_INJECTORS","VERTEX_SHADER","MODULE_INJECTORS_VS","FRAGMENT_SHADER","MODULE_INJECTORS_FS","DECLARATION_INJECT_MARKER","REGEX_START_OF_MAIN","REGEX_END_OF_MAIN","fragments","injectShader","source","type","inject","injectStandardStubs","isVertex","key","fragmentData","sort","a","b","order","length","i","len","injection","fragmentString","join","replace","match","combineInjects","injects","result","assert","Array","isArray","forEach"],"sources":["../../../src/lib/inject-shader.js"],"sourcesContent":["import {MODULE_INJECTORS_VS, MODULE_INJECTORS_FS} from '../modules/module-injectors';\nimport {VERTEX_SHADER, FRAGMENT_SHADER} from './constants';\nimport {assert} from '../utils';\n\n// TODO - experimental\nconst MODULE_INJECTORS = {\n  [VERTEX_SHADER]: MODULE_INJECTORS_VS,\n  [FRAGMENT_SHADER]: MODULE_INJECTORS_FS\n};\n\nexport const DECLARATION_INJECT_MARKER = '__LUMA_INJECT_DECLARATIONS__'; // Uniform/attribute declarations\n\nconst REGEX_START_OF_MAIN = /void\\s+main\\s*\\([^)]*\\)\\s*\\{\\n?/; // Beginning of main\nconst REGEX_END_OF_MAIN = /}\\n?[^{}]*$/; // End of main, assumes main is last function\nconst fragments = [];\n\n// A minimal shader injection/templating system.\n// RFC: https://github.com/visgl/luma.gl/blob/7.0-release/dev-docs/RFCs/v6.0/shader-injection-rfc.md\n/* eslint-disable complexity */\nexport default function injectShader(source, type, inject, injectStandardStubs = false) {\n  const isVertex = type === VERTEX_SHADER;\n\n  for (const key in inject) {\n    const fragmentData = inject[key];\n    fragmentData.sort((a, b) => a.order - b.order);\n    fragments.length = fragmentData.length;\n    for (let i = 0, len = fragmentData.length; i < len; ++i) {\n      fragments[i] = fragmentData[i].injection;\n    }\n    const fragmentString = `${fragments.join('\\n')}\\n`;\n    switch (key) {\n      // declarations are injected before the main function\n      case 'vs:#decl':\n        if (isVertex) {\n          source = source.replace(DECLARATION_INJECT_MARKER, fragmentString);\n        }\n        break;\n      // inject code at the beginning of the main function\n      case 'vs:#main-start':\n        if (isVertex) {\n          source = source.replace(REGEX_START_OF_MAIN, match => match + fragmentString);\n        }\n        break;\n      // inject code at the end of main function\n      case 'vs:#main-end':\n        if (isVertex) {\n          source = source.replace(REGEX_END_OF_MAIN, match => fragmentString + match);\n        }\n        break;\n      // declarations are injected before the main function\n      case 'fs:#decl':\n        if (!isVertex) {\n          source = source.replace(DECLARATION_INJECT_MARKER, fragmentString);\n        }\n        break;\n      // inject code at the beginning of the main function\n      case 'fs:#main-start':\n        if (!isVertex) {\n          source = source.replace(REGEX_START_OF_MAIN, match => match + fragmentString);\n        }\n        break;\n      // inject code at the end of main function\n      case 'fs:#main-end':\n        if (!isVertex) {\n          source = source.replace(REGEX_END_OF_MAIN, match => fragmentString + match);\n        }\n        break;\n\n      default:\n        // TODO(Tarek): I think this usage should be deprecated.\n\n        // inject code after key, leaving key in place\n        source = source.replace(key, match => match + fragmentString);\n    }\n  }\n\n  // Remove if it hasn't already been replaced\n  source = source.replace(DECLARATION_INJECT_MARKER, '');\n\n  // Finally, if requested, insert an automatic module injector chunk\n  if (injectStandardStubs) {\n    source = source.replace(/\\}\\s*$/, match => match + MODULE_INJECTORS[type]);\n  }\n\n  return source;\n}\n\n/* eslint-enable complexity */\n\n// Takes an array of inject objects and combines them into one\nexport function combineInjects(injects) {\n  const result = {};\n  assert(Array.isArray(injects) && injects.length > 1);\n  injects.forEach(inject => {\n    for (const key in inject) {\n      result[key] = result[key] ? `${result[key]}\\n${inject[key]}` : inject[key];\n    }\n  });\n  return result;\n}\n"],"mappings":"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"}