{"version":3,"file":"transform-shader-utils.js","names":["SAMPLER_UNIFORM_PREFIX","SIZE_UNIFORM_PREFIX","VS_POS_VARIABLE","updateForTextures","vs","sourceTextureMap","targetTextureVarying","targetTexture","texAttributeNames","Object","keys","sourceCount","length","targetTextureType","samplerTextureMap","updatedVs","finalInject","vsLines","split","updateVsLines","slice","forEach","line","index","lines","updated","processAttributeDefinition","updatedLine","inject","combineInjects","assign","getVaryingType","assert","sizeName","uniformDeclaration","posInstructions","join","getSizeUniforms","uniforms","width","height","textureName","getAttributeDefinition","getQualifierDetails","getSamplerDeclerations","samplerName","uniformDeclerations","varying","qualaiferDetails","name","type","textureMap","attributeData","channels","typeToChannelSuffix","sampleInstruction"],"sources":["../../../src/transform/transform-shader-utils.js"],"sourcesContent":["import {assert} from '@luma.gl/webgl';\nimport {combineInjects, getQualifierDetails, typeToChannelSuffix} from '@luma.gl/shadertools';\n\nconst SAMPLER_UNIFORM_PREFIX = 'transform_uSampler_';\nconst SIZE_UNIFORM_PREFIX = 'transform_uSize_';\nconst VS_POS_VARIABLE = 'transform_position';\n\n// Scan provided vertex shader\n// for each texture attribute, inject sampler instructions and build uniforms for sampler\n// for texture target, get varying type and inject position instruction\nexport function updateForTextures({vs, sourceTextureMap, targetTextureVarying, targetTexture}) {\n  const texAttributeNames = Object.keys(sourceTextureMap);\n  let sourceCount = texAttributeNames.length;\n  let targetTextureType = null;\n  const samplerTextureMap = {};\n  let updatedVs = vs;\n  let finalInject = {};\n\n  if (sourceCount > 0 || targetTextureVarying) {\n    const vsLines = updatedVs.split('\\n');\n    const updateVsLines = vsLines.slice();\n    vsLines.forEach((line, index, lines) => {\n      // TODO add early exit\n      if (sourceCount > 0) {\n        const updated = processAttributeDefinition(line, sourceTextureMap);\n        if (updated) {\n          const {updatedLine, inject} = updated;\n          updateVsLines[index] = updatedLine;\n          // sampleInstructions.push(sampleInstruction);\n          finalInject = combineInjects([finalInject, inject]);\n          Object.assign(samplerTextureMap, updated.samplerTextureMap);\n          sourceCount--;\n        }\n      }\n      if (targetTextureVarying && !targetTextureType) {\n        targetTextureType = getVaryingType(line, targetTextureVarying);\n      }\n    });\n\n    if (targetTextureVarying) {\n      assert(targetTexture);\n      const sizeName = `${SIZE_UNIFORM_PREFIX}${targetTextureVarying}`;\n\n      const uniformDeclaration = `uniform vec2 ${sizeName};\\n`;\n      const posInstructions = `\\\n     vec2 ${VS_POS_VARIABLE} = transform_getPos(${sizeName});\n     gl_Position = vec4(${VS_POS_VARIABLE}, 0, 1.);\\n`;\n      const inject = {\n        'vs:#decl': uniformDeclaration,\n        'vs:#main-start': posInstructions\n      };\n      finalInject = combineInjects([finalInject, inject]);\n    }\n    updatedVs = updateVsLines.join('\\n');\n  }\n  return {\n    // updated vertex shader (commented texture attribute definition)\n    vs: updatedVs,\n    // type (float, vec2, vec3 of vec4) target texture varying\n    targetTextureType,\n    // required vertex and fragment shader injects\n    inject: finalInject,\n    // map of sampler name to texture name, can be used to set attributes\n    // usefull when swapping textures, as source and destination texture change when swap is called.\n    samplerTextureMap\n  };\n}\n\n// builds and returns an object contaning size uniform for each texture\nexport function getSizeUniforms({sourceTextureMap, targetTextureVarying, targetTexture}) {\n  const uniforms = {};\n  let width;\n  let height;\n  if (targetTextureVarying) {\n    ({width, height} = targetTexture);\n    uniforms[`${SIZE_UNIFORM_PREFIX}${targetTextureVarying}`] = [width, height];\n  }\n  for (const textureName in sourceTextureMap) {\n    ({width, height} = sourceTextureMap[textureName]);\n    uniforms[`${SIZE_UNIFORM_PREFIX}${textureName}`] = [width, height];\n  }\n  return uniforms;\n}\n\n// Checks if provided line is defining an attribute, if so returns details otherwise null\nfunction getAttributeDefinition(line) {\n  return getQualifierDetails(line, ['attribute', 'in']);\n}\n\nfunction getSamplerDeclerations(textureName) {\n  const samplerName = `${SAMPLER_UNIFORM_PREFIX}${textureName}`;\n  const sizeName = `${SIZE_UNIFORM_PREFIX}${textureName}`;\n  const uniformDeclerations = `\\\n  uniform sampler2D ${samplerName};\n  uniform vec2 ${sizeName};`;\n  return {samplerName, sizeName, uniformDeclerations};\n}\n\n// Return size (float, vec2 etc) of a given varying, null if doens't exist.\nexport function getVaryingType(line, varying) {\n  const qualaiferDetails = getQualifierDetails(line, ['varying', 'out']);\n  if (!qualaiferDetails) {\n    return null;\n  }\n  return qualaiferDetails.name === varying ? qualaiferDetails.type : null;\n}\n\n// build required definitions, sample instructions for each texture attribute\nexport function processAttributeDefinition(line, textureMap) {\n  const samplerTextureMap = {};\n  const attributeData = getAttributeDefinition(line);\n  if (!attributeData) {\n    return null;\n  }\n  const {type, name} = attributeData;\n  if (name && textureMap[name]) {\n    // eslint-disable-next-line no-useless-escape\n    const updatedLine = `\\// ${line} => Replaced by Transform with a sampler`;\n    const {samplerName, sizeName, uniformDeclerations} = getSamplerDeclerations(name);\n\n    const channels = typeToChannelSuffix(type);\n    const sampleInstruction = `  ${type} ${name} = transform_getInput(${samplerName}, ${sizeName}).${channels};\\n`;\n\n    samplerTextureMap[samplerName] = name;\n    const inject = {\n      'vs:#decl': uniformDeclerations,\n      'vs:#main-start': sampleInstruction\n    };\n\n    // samplerNameMap\n    return {\n      // update vertex shader line.\n      updatedLine,\n      // inject object with sampler instructions.\n      inject,\n      // sampler name to texture name map\n      samplerTextureMap\n    };\n  }\n  return null;\n}\n"],"mappings":"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"}