{"version":3,"sources":["../../../src/utils/local-storage.ts"],"names":["getStorage","type","storage","window","x","setItem","removeItem","e","LocalStorage","constructor","id","defaultSettings","config","Object","assign","_loadConfiguration","getConfiguration","setConfiguration","configuration","updateConfiguration","serialized","JSON","stringify","serializedConfiguration","getItem","parse"],"mappings":";;AAEA,SAASA,UAAT,CAAoBC,IAApB,EAAmC;AACjC,MAAI;AAEF,UAAMC,OAAgB,GAAGC,MAAM,CAACF,IAAD,CAA/B;AACA,UAAMG,CAAC,GAAG,kBAAV;AACAF,IAAAA,OAAO,CAACG,OAAR,CAAgBD,CAAhB,EAAmBA,CAAnB;AACAF,IAAAA,OAAO,CAACI,UAAR,CAAmBF,CAAnB;AACA,WAAOF,OAAP;AACD,GAPD,CAOE,OAAOK,CAAP,EAAU;AACV,WAAO,IAAP;AACD;AACF;;AAGD,eAAe,MAAMC,YAAN,CAAmB;AAKhCC,EAAAA,WAAW,CAACC,EAAD,EAAiF;AAAA,QAApEC,eAAoE,uEAA7B,EAA6B;AAAA,QAAzBV,IAAyB,uEAAlB,gBAAkB;;AAAA;;AAAA;;AAAA,oCAF9D,EAE8D;;AAC1F,SAAKC,OAAL,GAAeF,UAAU,CAACC,IAAD,CAAzB;AACA,SAAKS,EAAL,GAAUA,EAAV;AACA,SAAKE,MAAL,GAAc,EAAd;AACAC,IAAAA,MAAM,CAACC,MAAP,CAAc,KAAKF,MAAnB,EAA2BD,eAA3B;;AACA,SAAKI,kBAAL;AACD;;AAEDC,EAAAA,gBAAgB,GAAG;AACjB,WAAO,KAAKJ,MAAZ;AACD;;AAEDK,EAAAA,gBAAgB,CAACC,aAAD,EAAgB;AAC9B,SAAKN,MAAL,GAAc,EAAd;AACA,WAAO,KAAKO,mBAAL,CAAyBD,aAAzB,CAAP;AACD;;AAEDC,EAAAA,mBAAmB,CAACD,aAAD,EAAgB;AACjCL,IAAAA,MAAM,CAACC,MAAP,CAAc,KAAKF,MAAnB,EAA2BM,aAA3B;;AACA,QAAI,KAAKhB,OAAT,EAAkB;AAChB,YAAMkB,UAAU,GAAGC,IAAI,CAACC,SAAL,CAAe,KAAKV,MAApB,CAAnB;AACA,WAAKV,OAAL,CAAaG,OAAb,CAAqB,KAAKK,EAA1B,EAA8BU,UAA9B;AACD;;AACD,WAAO,IAAP;AACD;;AAGDL,EAAAA,kBAAkB,GAAG;AACnB,QAAIG,aAAa,GAAG,EAApB;;AACA,QAAI,KAAKhB,OAAT,EAAkB;AAChB,YAAMqB,uBAAuB,GAAG,KAAKrB,OAAL,CAAasB,OAAb,CAAqB,KAAKd,EAA1B,CAAhC;AACAQ,MAAAA,aAAa,GAAGK,uBAAuB,GAAGF,IAAI,CAACI,KAAL,CAAWF,uBAAX,CAAH,GAAyC,EAAhF;AACD;;AACDV,IAAAA,MAAM,CAACC,MAAP,CAAc,KAAKF,MAAnB,EAA2BM,aAA3B;AACA,WAAO,IAAP;AACD;;AAxC+B","sourcesContent":["// probe.gl, MIT license\n\nfunction getStorage(type): Storage {\n  try {\n    // @ts-expect-error\n    const storage: Storage = window[type];\n    const x = '__storage_test__';\n    storage.setItem(x, x);\n    storage.removeItem(x);\n    return storage;\n  } catch (e) {\n    return null;\n  }\n}\n\n// Store keys in local storage via simple interface\nexport default class LocalStorage {\n  storage: Storage;\n  id: string;\n  config: Record<string, any> = {};\n\n  constructor(id: string, defaultSettings: Record<string, any> = {}, type = 'sessionStorage') {\n    this.storage = getStorage(type);\n    this.id = id;\n    this.config = {};\n    Object.assign(this.config, defaultSettings);\n    this._loadConfiguration();\n  }\n\n  getConfiguration() {\n    return this.config;\n  }\n\n  setConfiguration(configuration) {\n    this.config = {};\n    return this.updateConfiguration(configuration);\n  }\n\n  updateConfiguration(configuration) {\n    Object.assign(this.config, configuration);\n    if (this.storage) {\n      const serialized = JSON.stringify(this.config);\n      this.storage.setItem(this.id, serialized);\n    }\n    return this;\n  }\n\n  // Get config from persistent store, if available\n  _loadConfiguration() {\n    let configuration = {};\n    if (this.storage) {\n      const serializedConfiguration = this.storage.getItem(this.id);\n      configuration = serializedConfiguration ? JSON.parse(serializedConfiguration) : {};\n    }\n    Object.assign(this.config, configuration);\n    return this;\n  }\n}\n"],"file":"local-storage.js"}