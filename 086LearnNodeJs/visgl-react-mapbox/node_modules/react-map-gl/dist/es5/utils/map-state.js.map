{"version":3,"sources":["../../../src/utils/map-state.js"],"names":["MAPBOX_LIMITS","minZoom","maxZoom","minPitch","maxPitch","DEFAULT_STATE","pitch","bearing","altitude","PITCH_MOUSE_THRESHOLD","PITCH_ACCEL","MapState","width","height","latitude","longitude","zoom","transitionDuration","transitionEasing","transitionInterpolator","transitionInterruption","startPanLngLat","startZoomLngLat","startRotatePos","startBearing","startPitch","startZoom","Number","isFinite","_viewportProps","_applyConstraints","_state","pos","_getUpdatedMapState","_unproject","startPos","_calculateNewLngLat","deltaAngleX","deltaAngleY","newRotation","_calculateNewPitchAndBearing","_getRotationParams","scale","_calculateNewZoom","zoomedViewport","WebMercatorViewport","Object","assign","getMapCenterByLngLatPosition","lngLat","newProps","props","viewport","unproject","Math","log2","deltaScaleX","deltaScaleY","deltaX","deltaY","centerY","startY","abs","min","max"],"mappings":"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","sourcesContent":["import WebMercatorViewport, {normalizeViewportProps} from 'viewport-mercator-project';\nimport {clamp} from './math-utils';\nimport assert from './assert';\n\n// MAPBOX LIMITS\nexport const MAPBOX_LIMITS = {\n  minZoom: 0,\n  maxZoom: 24,\n  minPitch: 0,\n  maxPitch: 60\n};\n\nconst DEFAULT_STATE = {\n  pitch: 0,\n  bearing: 0,\n  altitude: 1.5\n};\n\nconst PITCH_MOUSE_THRESHOLD = 5;\nconst PITCH_ACCEL = 1.2;\n\nexport default class MapState {\n  constructor({\n    /** Mapbox viewport properties */\n    /** The width of the viewport */\n    width,\n    /** The height of the viewport */\n    height,\n    /** The latitude at the center of the viewport */\n    latitude,\n    /** The longitude at the center of the viewport */\n    longitude,\n    /** The tile zoom level of the map. */\n    zoom,\n    /** The bearing of the viewport in degrees */\n    bearing = DEFAULT_STATE.bearing,\n    /** The pitch of the viewport in degrees */\n    pitch = DEFAULT_STATE.pitch,\n    /**\n     * Specify the altitude of the viewport camera\n     * Unit: map heights, default 1.5\n     * Non-public API, see https://github.com/mapbox/mapbox-gl-js/issues/1137\n     */\n    altitude = DEFAULT_STATE.altitude,\n\n    /** Viewport constraints */\n    maxZoom = MAPBOX_LIMITS.maxZoom,\n    minZoom = MAPBOX_LIMITS.minZoom,\n    maxPitch = MAPBOX_LIMITS.maxPitch,\n    minPitch = MAPBOX_LIMITS.minPitch,\n\n    /** Transition props */\n    transitionDuration,\n    transitionEasing,\n    transitionInterpolator,\n    transitionInterruption,\n\n    /** Interaction states, required to calculate change during transform */\n    /* The point on map being grabbed when the operation first started */\n    startPanLngLat,\n    /* Center of the zoom when the operation first started */\n    startZoomLngLat,\n    /* Cursor position when the rotate operation started */\n    startRotatePos,\n    /** Bearing when current perspective rotate operation started */\n    startBearing,\n    /** Pitch when current perspective rotate operation started */\n    startPitch,\n    /** Zoom when current zoom operation started */\n    startZoom\n  }) {\n    assert(Number.isFinite(width), '`width` must be supplied');\n    assert(Number.isFinite(height), '`height` must be supplied');\n    assert(Number.isFinite(longitude), '`longitude` must be supplied');\n    assert(Number.isFinite(latitude), '`latitude` must be supplied');\n    assert(Number.isFinite(zoom), '`zoom` must be supplied');\n\n    this._viewportProps = this._applyConstraints({\n      width,\n      height,\n      latitude,\n      longitude,\n      zoom,\n      bearing,\n      pitch,\n      altitude,\n      maxZoom,\n      minZoom,\n      maxPitch,\n      minPitch,\n      transitionDuration,\n      transitionEasing,\n      transitionInterpolator,\n      transitionInterruption\n    });\n\n    this._state = {\n      startPanLngLat,\n      startZoomLngLat,\n      startRotatePos,\n      startBearing,\n      startPitch,\n      startZoom\n    };\n  }\n\n  /* Public API */\n\n  getViewportProps() {\n    return this._viewportProps;\n  }\n\n  getState() {\n    return this._state;\n  }\n\n  /**\n   * Start panning\n   * @param {Object} params\n   * @param {[Number, Number]} params.pos - position on screen where the pointer grabs\n   */\n  panStart({pos}) {\n    return this._getUpdatedMapState({\n      startPanLngLat: this._unproject(pos)\n    });\n  }\n\n  /**\n   * Pan\n   * @param {Object} params\n   * @param {[Number, Number]} params.pos - position on screen where the pointer is\n   * @param {[Number, Number]} [params.startPos] - where the pointer grabbed at\n   *   the start of the operation. Must be supplied of `panStart()` was not called\n   */\n  pan({pos, startPos}) {\n    const startPanLngLat = this._state.startPanLngLat || this._unproject(startPos);\n\n    if (!startPanLngLat) {\n      return this;\n    }\n\n    const [longitude, latitude] = this._calculateNewLngLat({\n      startPanLngLat,\n      pos\n    });\n\n    return this._getUpdatedMapState({\n      longitude,\n      latitude\n    });\n  }\n\n  /**\n   * End panning\n   * Must call if `panStart()` was called\n   */\n  panEnd() {\n    return this._getUpdatedMapState({\n      startPanLngLat: null\n    });\n  }\n\n  /**\n   * Start rotating\n   * @param {Object} params\n   * @param {[Number, Number]} params.pos - position on screen where the center is\n   */\n  rotateStart({pos}) {\n    return this._getUpdatedMapState({\n      startRotatePos: pos,\n      startBearing: this._viewportProps.bearing,\n      startPitch: this._viewportProps.pitch\n    });\n  }\n\n  /**\n   * Rotate\n   * @param {Object} params\n   * @param {[Number, Number]} params.pos - position on screen where the center is\n   * @param {Number} params.deltaAngleX - the change to bearing.\n   * @param {Number} params.deltaAngleY - the change to pitch.\n   */\n  rotate({pos, deltaAngleX = 0, deltaAngleY = 0}) {\n    const {startRotatePos, startBearing, startPitch} = this._state;\n\n    if (!Number.isFinite(startBearing) || !Number.isFinite(startPitch)) {\n      return this;\n    }\n\n    let newRotation;\n    if (pos) {\n      newRotation = this._calculateNewPitchAndBearing({\n        ...this._getRotationParams(pos, startRotatePos),\n        startBearing,\n        startPitch\n      });\n    } else {\n      newRotation = {\n        bearing: startBearing + deltaAngleX,\n        pitch: startPitch + deltaAngleY\n      };\n    }\n\n    return this._getUpdatedMapState(newRotation);\n  }\n\n  /**\n   * End rotating\n   * Must call if `rotateStart()` was called\n   */\n  rotateEnd() {\n    return this._getUpdatedMapState({\n      startBearing: null,\n      startPitch: null\n    });\n  }\n\n  /**\n   * Start zooming\n   * @param {Object} params\n   * @param {[Number, Number]} params.pos - position on screen where the center is\n   */\n  zoomStart({pos}) {\n    return this._getUpdatedMapState({\n      startZoomLngLat: this._unproject(pos),\n      startZoom: this._viewportProps.zoom\n    });\n  }\n\n  /**\n   * Zoom\n   * @param {Object} params\n   * @param {[Number, Number]} params.pos - position on screen where the current center is\n   * @param {[Number, Number]} [params.startPos] - the center position at\n   *   the start of the operation. Must be supplied of `zoomStart()` was not called\n   * @param {Number} params.scale - a number between [0, 1] specifying the accumulated\n   *   relative scale.\n   */\n  zoom({pos, startPos, scale}) {\n    assert(scale > 0, '`scale` must be a positive number');\n\n    // Make sure we zoom around the current mouse position rather than map center\n    let {startZoom, startZoomLngLat} = this._state;\n\n    if (!Number.isFinite(startZoom)) {\n      // We have two modes of zoom:\n      // scroll zoom that are discrete events (transform from the current zoom level),\n      // and pinch zoom that are continuous events (transform from the zoom level when\n      // pinch started).\n      // If startZoom state is defined, then use the startZoom state;\n      // otherwise assume discrete zooming\n      startZoom = this._viewportProps.zoom;\n      startZoomLngLat = this._unproject(startPos) || this._unproject(pos);\n    }\n\n    // take the start lnglat and put it where the mouse is down.\n    assert(\n      startZoomLngLat,\n      '`startZoomLngLat` prop is required ' +\n        'for zoom behavior to calculate where to position the map.'\n    );\n\n    const zoom = this._calculateNewZoom({scale, startZoom: startZoom || 0});\n\n    const zoomedViewport = new WebMercatorViewport(Object.assign({}, this._viewportProps, {zoom}));\n    const [longitude, latitude] = zoomedViewport.getMapCenterByLngLatPosition({\n      lngLat: startZoomLngLat,\n      pos\n    });\n\n    return this._getUpdatedMapState({\n      zoom,\n      longitude,\n      latitude\n    });\n  }\n\n  /**\n   * End zooming\n   * Must call if `zoomStart()` was called\n   */\n  zoomEnd() {\n    return this._getUpdatedMapState({\n      startZoomLngLat: null,\n      startZoom: null\n    });\n  }\n\n  /* Private methods */\n\n  _getUpdatedMapState(newProps) {\n    // Update _viewportProps\n    return new MapState(Object.assign({}, this._viewportProps, this._state, newProps));\n  }\n\n  // Apply any constraints (mathematical or defined by _viewportProps) to map state\n  _applyConstraints(props) {\n    // Ensure zoom is within specified range\n    const {maxZoom, minZoom, zoom} = props;\n    props.zoom = clamp(zoom, minZoom, maxZoom);\n\n    // Ensure pitch is within specified range\n    const {maxPitch, minPitch, pitch} = props;\n    props.pitch = clamp(pitch, minPitch, maxPitch);\n\n    Object.assign(props, normalizeViewportProps(props));\n\n    return props;\n  }\n\n  _unproject(pos) {\n    const viewport = new WebMercatorViewport(this._viewportProps);\n    return pos && viewport.unproject(pos);\n  }\n\n  // Calculate a new lnglat based on pixel dragging position\n  _calculateNewLngLat({startPanLngLat, pos}) {\n    const viewport = new WebMercatorViewport(this._viewportProps);\n    return viewport.getMapCenterByLngLatPosition({\n      lngLat: startPanLngLat,\n      pos\n    });\n  }\n\n  // Calculates new zoom\n  _calculateNewZoom({scale, startZoom}) {\n    const {maxZoom, minZoom} = this._viewportProps;\n    const zoom = startZoom + Math.log2(scale);\n    return clamp(zoom, minZoom, maxZoom);\n  }\n\n  // Calculates a new pitch and bearing from a position (coming from an event)\n  _calculateNewPitchAndBearing({deltaScaleX, deltaScaleY, startBearing, startPitch}) {\n    // clamp deltaScaleY to [-1, 1] so that rotation is constrained between minPitch and maxPitch.\n    // deltaScaleX does not need to be clamped as bearing does not have constraints.\n    deltaScaleY = clamp(deltaScaleY, -1, 1);\n\n    const {minPitch, maxPitch} = this._viewportProps;\n\n    const bearing = startBearing + 180 * deltaScaleX;\n    let pitch = startPitch;\n    if (deltaScaleY > 0) {\n      // Gradually increase pitch\n      pitch = startPitch + deltaScaleY * (maxPitch - startPitch);\n    } else if (deltaScaleY < 0) {\n      // Gradually decrease pitch\n      pitch = startPitch - deltaScaleY * (minPitch - startPitch);\n    }\n\n    return {\n      pitch,\n      bearing\n    };\n  }\n\n  _getRotationParams(pos, startPos) {\n    const deltaX = pos[0] - startPos[0];\n    const deltaY = pos[1] - startPos[1];\n    const centerY = pos[1];\n    const startY = startPos[1];\n    const {width, height} = this._viewportProps;\n\n    const deltaScaleX = deltaX / width;\n    let deltaScaleY = 0;\n\n    if (deltaY > 0) {\n      if (Math.abs(height - startY) > PITCH_MOUSE_THRESHOLD) {\n        // Move from 0 to -1 as we drag upwards\n        deltaScaleY = (deltaY / (startY - height)) * PITCH_ACCEL;\n      }\n    } else if (deltaY < 0) {\n      if (startY > PITCH_MOUSE_THRESHOLD) {\n        // Move from 0 to 1 as we drag upwards\n        deltaScaleY = 1 - centerY / startY;\n      }\n    }\n    deltaScaleY = Math.min(1, Math.max(-1, deltaScaleY));\n    return {deltaScaleX, deltaScaleY};\n  }\n}\n"],"file":"map-state.js"}