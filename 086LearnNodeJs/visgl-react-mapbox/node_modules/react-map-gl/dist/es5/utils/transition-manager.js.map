{"version":3,"sources":["../../../src/utils/transition-manager.js"],"names":["noop","cropEasingFunction","easing","x0","y0","t","TRANSITION_EVENTS","BREAK","SNAP_TO_END","IGNORE","UPDATE","DEFAULT_PROPS","transitionDuration","transitionEasing","transitionInterpolator","LinearInterpolator","transitionInterruption","onTransitionStart","onTransitionInterrupt","onTransitionEnd","TransitionManager","opts","_animationFrame","requestAnimationFrame","_onTransitionFrame","_updateViewport","props","onViewportChange","onStateChange","time","getTime","Date","now","state","propsInTransition","nextProps","currentProps","_shouldIgnoreViewportChange","_isTransitionEnabled","startProps","Object","assign","endProps","_isTransitionInProgress","interruption","currentTime","startTime","duration","_triggerTransition","_endTransition","Boolean","interpolator","arePropsEqual","_isUpdateDueToCurrentTransition","cancelAnimationFrame","getDuration","initialProps","initializeProps","interactionState","inTransition","isZooming","zoom","isPanning","longitude","latitude","isRotating","bearing","pitch","start","end","animation","shouldEnd","viewport","interpolateProps","mapState","MapState","getViewportProps"],"mappings":"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","sourcesContent":["/* global requestAnimationFrame, cancelAnimationFrame */\nimport assert from './assert';\nimport {LinearInterpolator} from './transition';\nimport MapState from './map-state';\n\nconst noop = () => {};\n\n// crops the old easing function from x0 to 1 where x0 is the interruption point\n// returns a new easing function with domain [0, 1] and range [0, 1]\nexport function cropEasingFunction(easing, x0) {\n  const y0 = easing(x0);\n  return t => (1 / (1 - y0)) * (easing(t * (1 - x0) + x0) - y0);\n}\n\nexport const TRANSITION_EVENTS = {\n  BREAK: 1,\n  SNAP_TO_END: 2,\n  IGNORE: 3,\n  UPDATE: 4\n};\n\nconst DEFAULT_PROPS = {\n  transitionDuration: 0,\n  transitionEasing: t => t,\n  transitionInterpolator: new LinearInterpolator(),\n  transitionInterruption: TRANSITION_EVENTS.BREAK,\n  onTransitionStart: noop,\n  onTransitionInterrupt: noop,\n  onTransitionEnd: noop\n};\n\nexport default class TransitionManager {\n  static defaultProps = DEFAULT_PROPS;\n\n  constructor(opts = {}) {\n    this.props = null;\n    this.onViewportChange = opts.onViewportChange || noop;\n    this.onStateChange = opts.onStateChange || noop;\n    this.time = opts.getTime || Date.now;\n  }\n\n  _animationFrame = null;\n\n  // Returns current transitioned viewport.\n  getViewportInTransition() {\n    return this._animationFrame ? this.state.propsInTransition : null;\n  }\n\n  // Process the viewport change, either ignore or trigger a new transiton.\n  // Return true if a new transition is triggered, false otherwise.\n  processViewportChange(nextProps) {\n    const currentProps = this.props;\n    // Set this.props here as '_triggerTransition' calls '_updateViewport' that uses this.props.\n    this.props = nextProps;\n\n    // NOTE: Be cautious re-ordering statements in this function.\n    if (!currentProps || this._shouldIgnoreViewportChange(currentProps, nextProps)) {\n      return false;\n    }\n\n    if (this._isTransitionEnabled(nextProps)) {\n      const startProps = Object.assign({}, currentProps);\n      const endProps = Object.assign({}, nextProps);\n\n      if (this._isTransitionInProgress()) {\n        currentProps.onTransitionInterrupt();\n\n        if (this.state.interruption === TRANSITION_EVENTS.SNAP_TO_END) {\n          Object.assign(startProps, this.state.endProps);\n        } else {\n          Object.assign(startProps, this.state.propsInTransition);\n        }\n\n        if (this.state.interruption === TRANSITION_EVENTS.UPDATE) {\n          const currentTime = this.time();\n          const x0 = (currentTime - this.state.startTime) / this.state.duration;\n          endProps.transitionDuration = this.state.duration - (currentTime - this.state.startTime);\n          endProps.transitionEasing = cropEasingFunction(this.state.easing, x0);\n          endProps.transitionInterpolator = startProps.transitionInterpolator;\n        }\n      }\n      endProps.onTransitionStart();\n\n      this._triggerTransition(startProps, endProps);\n\n      return true;\n    }\n\n    if (this._isTransitionInProgress()) {\n      currentProps.onTransitionInterrupt();\n      this._endTransition();\n    }\n\n    return false;\n  }\n\n  // Helper methods\n\n  _isTransitionInProgress() {\n    return Boolean(this._animationFrame);\n  }\n\n  _isTransitionEnabled(props) {\n    const {transitionDuration, transitionInterpolator} = props;\n    return (\n      (transitionDuration > 0 || transitionDuration === 'auto') && Boolean(transitionInterpolator)\n    );\n  }\n\n  _isUpdateDueToCurrentTransition(props) {\n    if (this.state.propsInTransition) {\n      return this.state.interpolator.arePropsEqual(props, this.state.propsInTransition);\n    }\n    return false;\n  }\n\n  _shouldIgnoreViewportChange(currentProps, nextProps) {\n    if (!currentProps) {\n      return true;\n    }\n    if (this._isTransitionInProgress()) {\n      // Ignore update if it is requested to be ignored\n      return (\n        this.state.interruption === TRANSITION_EVENTS.IGNORE ||\n        // Ignore update if it is due to current active transition.\n        this._isUpdateDueToCurrentTransition(nextProps)\n      );\n    }\n    if (this._isTransitionEnabled(nextProps)) {\n      // Ignore if none of the viewport props changed.\n      return nextProps.transitionInterpolator.arePropsEqual(currentProps, nextProps);\n    }\n\n    return true;\n  }\n\n  _triggerTransition(startProps, endProps) {\n    assert(this._isTransitionEnabled(endProps));\n\n    if (this._animationFrame) {\n      cancelAnimationFrame(this._animationFrame);\n    }\n\n    // update transitionDuration for 'auto' mode\n    const {transitionInterpolator} = endProps;\n    const duration = transitionInterpolator.getDuration\n      ? transitionInterpolator.getDuration(startProps, endProps)\n      : endProps.transitionDuration;\n\n    if (duration === 0) {\n      return;\n    }\n\n    const initialProps = endProps.transitionInterpolator.initializeProps(startProps, endProps);\n\n    const interactionState = {\n      inTransition: true,\n      isZooming: startProps.zoom !== endProps.zoom,\n      isPanning:\n        startProps.longitude !== endProps.longitude || startProps.latitude !== endProps.latitude,\n      isRotating: startProps.bearing !== endProps.bearing || startProps.pitch !== endProps.pitch\n    };\n\n    this.state = {\n      // Save current transition props\n      duration,\n      easing: endProps.transitionEasing,\n      interpolator: endProps.transitionInterpolator,\n      interruption: endProps.transitionInterruption,\n\n      startTime: this.time(),\n      startProps: initialProps.start,\n      endProps: initialProps.end,\n      animation: null,\n      propsInTransition: {}\n    };\n    this._onTransitionFrame();\n    this.onStateChange(interactionState);\n  }\n\n  _onTransitionFrame = () => {\n    // _updateViewport() may cancel the animation\n    this._animationFrame = requestAnimationFrame(this._onTransitionFrame);\n    this._updateViewport();\n  };\n\n  _endTransition() {\n    if (this._animationFrame) {\n      cancelAnimationFrame(this._animationFrame);\n      this._animationFrame = null;\n    }\n    this.onStateChange({\n      inTransition: false,\n      isZooming: false,\n      isPanning: false,\n      isRotating: false\n    });\n  }\n\n  _updateViewport() {\n    // NOTE: Be cautious re-ordering statements in this function.\n    const currentTime = this.time();\n    const {startTime, duration, easing, interpolator, startProps, endProps} = this.state;\n    let shouldEnd = false;\n    let t = (currentTime - startTime) / duration;\n    if (t >= 1) {\n      t = 1;\n      shouldEnd = true;\n    }\n    t = easing(t);\n\n    const viewport = interpolator.interpolateProps(startProps, endProps, t);\n    // Normalize viewport props\n    const mapState = new MapState(Object.assign({}, this.props, viewport));\n    this.state.propsInTransition = mapState.getViewportProps();\n\n    this.onViewportChange(this.state.propsInTransition, this.props);\n\n    if (shouldEnd) {\n      this._endTransition();\n      this.props.onTransitionEnd();\n    }\n  }\n}\n"],"file":"transition-manager.js"}