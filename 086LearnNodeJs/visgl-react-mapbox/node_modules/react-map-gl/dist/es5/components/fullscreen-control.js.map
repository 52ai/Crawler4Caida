{"version":3,"sources":["../../../src/components/fullscreen-control.js"],"names":["propTypes","Object","assign","mapControlPropTypes","className","PropTypes","string","style","object","container","label","defaultProps","mapControlDefaultProps","FullscreenControl","props","context","containerRef","isFullscreen","setIsFullscreen","showButton","setShowButton","mapboxFullscreenControl","createMapboxFullscreenControl","control","mapboxgl","_checkFullscreenSupport","onFullscreenChange","nextState","_fullscreen","document","addEventListener","_fullscreenchange","removeEventListener","onClickFullscreen","_container","_onClickFullscreen","position","type","React","memo"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 Uber Technologies, Inc.\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {document} from '../utils/globals';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport {useEffect, useState, useMemo} from 'react';\nimport mapboxgl from '../utils/mapboxgl';\n\nimport useMapControl, {mapControlDefaultProps, mapControlPropTypes} from './use-map-control';\n\nconst propTypes = Object.assign({}, mapControlPropTypes, {\n  // Custom className\n  className: PropTypes.string,\n  style: PropTypes.object,\n  /* eslint-disable max-len */\n  // `container` is the [compatible DOM element](https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen#Compatible_elements)\n  // which should be made full screen. By default, the map container element will be made full screen.\n  /* eslint-enable max-len */\n  container: PropTypes.object,\n  label: PropTypes.string\n});\n\nconst defaultProps = Object.assign({}, mapControlDefaultProps, {\n  className: '',\n  container: null,\n  label: 'Toggle fullscreen'\n});\n\nfunction FullscreenControl(props) {\n  const {context, containerRef} = useMapControl(props);\n  const [isFullscreen, setIsFullscreen] = useState(false);\n  const [showButton, setShowButton] = useState(false);\n  const [mapboxFullscreenControl, createMapboxFullscreenControl] = useState(null);\n\n  useEffect(() => {\n    const control = new mapboxgl.FullscreenControl();\n\n    createMapboxFullscreenControl(control);\n    setShowButton(control._checkFullscreenSupport());\n\n    const onFullscreenChange = () => {\n      const nextState = !control._fullscreen;\n      // this is a hack\n      // Mapbox use `_fullscreen` flag to toggle fullscreen mode\n      control._fullscreen = nextState;\n      setIsFullscreen(nextState);\n    };\n\n    document.addEventListener(control._fullscreenchange, onFullscreenChange);\n\n    return () => {\n      document.removeEventListener(control._fullscreenchange, onFullscreenChange);\n    };\n  }, []);\n\n  const onClickFullscreen = () => {\n    if (mapboxFullscreenControl) {\n      mapboxFullscreenControl._container = props.container || context.container;\n      mapboxFullscreenControl._onClickFullscreen();\n    }\n  };\n\n  const style = useMemo(() => ({position: 'absolute', ...props.style}), [props.style]);\n\n  if (!showButton) {\n    return null;\n  }\n\n  const {className, label} = props;\n  const type = isFullscreen ? 'shrink' : 'fullscreen';\n\n  return (\n    <div style={style} className={className}>\n      <div className=\"mapboxgl-ctrl mapboxgl-ctrl-group\" ref={containerRef}>\n        <button\n          key={type}\n          className={`mapboxgl-ctrl-icon mapboxgl-ctrl-${type}`}\n          type=\"button\"\n          title={label}\n          onClick={onClickFullscreen}\n        >\n          <span className=\"mapboxgl-ctrl-icon\" aria-hidden=\"true\" />\n        </button>\n      </div>\n    </div>\n  );\n}\n\nFullscreenControl.propTypes = propTypes;\nFullscreenControl.defaultProps = defaultProps;\n\nexport default React.memo(FullscreenControl);\n"],"file":"fullscreen-control.js"}