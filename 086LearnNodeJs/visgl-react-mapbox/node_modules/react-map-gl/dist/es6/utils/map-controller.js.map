{"version":3,"sources":["../../../src/utils/map-controller.js"],"names":["MapState","LinearInterpolator","TransitionManager","TRANSITION_EVENTS","NO_TRANSITION_PROPS","transitionDuration","LINEAR_TRANSITION_PROPS","transitionEasing","t","transitionInterpolator","transitionInterruption","BREAK","DEFAULT_INERTIA","INERTIA_EASING","EVENT_TYPES","WHEEL","PAN","PINCH","TRIPLE_PAN","DOUBLE_TAP","KEYBOARD","MapController","constructor","isDragging","newState","Object","assign","_interactionState","onStateChange","newViewport","oldViewport","onViewportChange","handleEvent","bind","_transitionManager","_onTransition","_setInteractionState","event","mapState","getMapState","eventStartBlocked","_eventStartBlocked","type","_onPanStart","_onPan","_onPanEnd","_onPinchStart","_onPinch","_onPinchEnd","_onTriplePanStart","_onTriplePan","_onTriplePanEnd","_onDoubleTap","_onWheel","_onKeyDown","getCenter","offsetCenter","x","y","isFunctionKeyPressed","srcEvent","Boolean","metaKey","altKey","ctrlKey","shiftKey","blockEvents","timeout","timer","setTimeout","updateViewport","newMapState","extraProps","interactionState","getViewportProps","viewStateChanged","keys","some","key","_state","getState","overrides","mapStateProps","setOptions","options","eventManager","isInteractive","scrollZoom","dragPan","dragRotate","doubleClickZoom","touchZoom","touchRotate","keyboard","prevOptions","dimensionChanged","height","width","processViewportChange","_events","toggleEvents","events","eventNames","enabled","forEach","eventName","on","off","pos","_panRotate","rightButton","rotateStart","panStart","_onPanRotate","_onPanMove","_onPanRotateEnd","_onPanMoveEnd","pan","isPanning","inertia","velocity","endPos","velocityX","velocityY","newControllerState","panEnd","rotate","isRotating","rotateEnd","speed","smooth","preventDefault","delta","scale","Math","exp","abs","zoom","around","isZooming","zoomStart","_startPinchRotation","rotation","_lastPinchEvent","deltaAngleX","z","log2","velocityZ","deltaTime","endScale","pow","zoomEnd","startPinchRotation","deltaX","isZoomOut","funcKey","zoomSpeed","moveSpeed","rotateSpeedX","rotateSpeedY","keyCode","bearing","startPos","pitch"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 Uber Technologies, Inc.\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* eslint-disable complexity, max-statements */\nimport MapState from './map-state';\nimport {LinearInterpolator} from './transition';\nimport TransitionManager, {TRANSITION_EVENTS} from './transition-manager';\n\nconst NO_TRANSITION_PROPS = {\n  transitionDuration: 0\n};\nexport const LINEAR_TRANSITION_PROPS = {\n  transitionDuration: 300,\n  transitionEasing: t => t,\n  transitionInterpolator: new LinearInterpolator(),\n  transitionInterruption: TRANSITION_EVENTS.BREAK\n};\n\n// EVENT HANDLING PARAMETERS\nconst DEFAULT_INERTIA = 300;\nconst INERTIA_EASING = t => 1 - (1 - t) * (1 - t);\n\nconst EVENT_TYPES = {\n  WHEEL: ['wheel'],\n  PAN: ['panstart', 'panmove', 'panend'],\n  PINCH: ['pinchstart', 'pinchmove', 'pinchend'],\n  TRIPLE_PAN: ['tripanstart', 'tripanmove', 'tripanend'],\n  DOUBLE_TAP: ['doubletap'],\n  KEYBOARD: ['keydown']\n};\n\n/**\n * @classdesc\n * A class that handles events and updates mercator style viewport parameters\n */\nexport default class MapController {\n  events = [];\n  scrollZoom = true;\n  dragPan = true;\n  dragRotate = true;\n  doubleClickZoom = true;\n  touchZoom = true;\n  touchRotate = false;\n  keyboard = true;\n\n  _interactionState = {\n    isDragging: false\n  };\n  _events = {};\n\n  constructor() {\n    this.handleEvent = this.handleEvent.bind(this);\n    this._transitionManager = new TransitionManager({\n      onViewportChange: this._onTransition,\n      onStateChange: this._setInteractionState\n    });\n  }\n\n  /**\n   * Callback for events\n   * @param {object} event - a mjolnir.js Event\n   */\n  handleEvent(event) {\n    this.mapState = this.getMapState();\n    const eventStartBlocked = this._eventStartBlocked;\n\n    switch (event.type) {\n      case 'panstart':\n        return eventStartBlocked ? false : this._onPanStart(event);\n      case 'panmove':\n        return this._onPan(event);\n      case 'panend':\n        return this._onPanEnd(event);\n      case 'pinchstart':\n        return eventStartBlocked ? false : this._onPinchStart(event);\n      case 'pinchmove':\n        return this._onPinch(event);\n      case 'pinchend':\n        return this._onPinchEnd(event);\n      case 'tripanstart':\n        return eventStartBlocked ? false : this._onTriplePanStart(event);\n      case 'tripanmove':\n        return this._onTriplePan(event);\n      case 'tripanend':\n        return this._onTriplePanEnd(event);\n      case 'doubletap':\n        return this._onDoubleTap(event);\n      case 'wheel':\n        return this._onWheel(event);\n      case 'keydown':\n        return this._onKeyDown(event);\n      default:\n        return false;\n    }\n  }\n\n  /* Event utils */\n  // Event object: http://hammerjs.github.io/api/#event-object\n  getCenter(event) {\n    const {\n      offsetCenter: {x, y}\n    } = event;\n    return [x, y];\n  }\n\n  isFunctionKeyPressed(event) {\n    const {srcEvent} = event;\n    return Boolean(srcEvent.metaKey || srcEvent.altKey || srcEvent.ctrlKey || srcEvent.shiftKey);\n  }\n\n  // When a multi-touch event ends, e.g. pinch, not all pointers are lifted at the same time.\n  // This triggers a brief `pan` event.\n  // Calling this method will temporarily disable *start events to avoid conflicting transitions.\n  blockEvents(timeout) {\n    /* global setTimeout */\n    const timer = setTimeout(() => {\n      if (this._eventStartBlocked === timer) {\n        this._eventStartBlocked = null;\n      }\n    }, timeout);\n    this._eventStartBlocked = timer;\n  }\n\n  /* Callback util */\n  // formats map state and invokes callback function\n  updateViewport(newMapState, extraProps, interactionState) {\n    // Always trigger callback on initial update (resize)\n    const oldViewport =\n      this.mapState instanceof MapState ? this.mapState.getViewportProps() : this.mapState;\n    const newViewport = {...newMapState.getViewportProps(), ...extraProps};\n\n    const viewStateChanged = Object.keys(newViewport).some(\n      key => oldViewport[key] !== newViewport[key]\n    );\n\n    this._state = newMapState.getState();\n    this._setInteractionState(interactionState);\n\n    // viewState has changed\n    if (viewStateChanged) {\n      this.onViewportChange(newViewport, this._interactionState, oldViewport);\n    }\n  }\n\n  _setInteractionState = newState => {\n    Object.assign(this._interactionState, newState);\n    if (this.onStateChange) {\n      this.onStateChange(this._interactionState);\n    }\n  };\n\n  _onTransition = (newViewport, oldViewport) => {\n    this.onViewportChange(newViewport, this._interactionState, oldViewport);\n  };\n\n  getMapState(overrides) {\n    return new MapState({...this.mapStateProps, ...this._state, ...overrides});\n  }\n\n  isDragging() {\n    return this._interactionState.isDragging;\n  }\n\n  /**\n   * Extract interactivity options\n   */\n  setOptions(options) {\n    const {\n      onViewportChange,\n      onStateChange,\n      eventManager = this.eventManager,\n\n      isInteractive = true,\n      scrollZoom = this.scrollZoom,\n      dragPan = this.dragPan,\n      dragRotate = this.dragRotate,\n      doubleClickZoom = this.doubleClickZoom,\n      touchZoom = this.touchZoom,\n      touchRotate = this.touchRotate,\n      keyboard = this.keyboard\n    } = options;\n\n    this.onViewportChange = onViewportChange;\n    this.onStateChange = onStateChange;\n\n    const prevOptions = this.mapStateProps || {};\n    const dimensionChanged =\n      prevOptions.height !== options.height || prevOptions.width !== options.width;\n\n    this.mapStateProps = options;\n\n    if (dimensionChanged) {\n      // Dimensions changed, normalize the props and fire change event\n      this.mapState = prevOptions;\n      this.updateViewport(new MapState(options));\n    }\n    // Update transition\n    this._transitionManager.processViewportChange(options);\n\n    if (this.eventManager !== eventManager) {\n      // EventManager has changed\n      this.eventManager = eventManager;\n      this._events = {};\n      this.toggleEvents(this.events, true);\n    }\n\n    // Register/unregister events\n    this.toggleEvents(EVENT_TYPES.WHEEL, isInteractive && Boolean(scrollZoom));\n    this.toggleEvents(EVENT_TYPES.PAN, isInteractive && Boolean(dragPan || dragRotate));\n    this.toggleEvents(EVENT_TYPES.PINCH, isInteractive && Boolean(touchZoom || touchRotate));\n    this.toggleEvents(EVENT_TYPES.TRIPLE_PAN, isInteractive && Boolean(touchRotate));\n    this.toggleEvents(EVENT_TYPES.DOUBLE_TAP, isInteractive && Boolean(doubleClickZoom));\n    this.toggleEvents(EVENT_TYPES.KEYBOARD, isInteractive && Boolean(keyboard));\n\n    // Interaction toggles\n    this.scrollZoom = scrollZoom;\n    this.dragPan = dragPan;\n    this.dragRotate = dragRotate;\n    this.doubleClickZoom = doubleClickZoom;\n    this.touchZoom = touchZoom;\n    this.touchRotate = touchRotate;\n    this.keyboard = keyboard;\n  }\n\n  toggleEvents(eventNames, enabled) {\n    if (this.eventManager) {\n      eventNames.forEach(eventName => {\n        if (this._events[eventName] !== enabled) {\n          this._events[eventName] = enabled;\n          if (enabled) {\n            this.eventManager.on(eventName, this.handleEvent);\n          } else {\n            this.eventManager.off(eventName, this.handleEvent);\n          }\n        }\n      });\n    }\n  }\n\n  /* Event handlers */\n  // Default handler for the `panstart` event.\n  _onPanStart(event) {\n    const pos = this.getCenter(event);\n    this._panRotate = this.isFunctionKeyPressed(event) || event.rightButton;\n    const newMapState = this._panRotate\n      ? this.mapState.rotateStart({pos})\n      : this.mapState.panStart({pos});\n    this.updateViewport(newMapState, NO_TRANSITION_PROPS, {isDragging: true});\n    return true;\n  }\n\n  // Default handler for the `panmove` event.\n  _onPan(event) {\n    if (!this.isDragging()) {\n      return false;\n    }\n    return this._panRotate ? this._onPanRotate(event) : this._onPanMove(event);\n  }\n\n  // Default handler for the `panend` event.\n  _onPanEnd(event) {\n    if (!this.isDragging()) {\n      return false;\n    }\n    return this._panRotate ? this._onPanRotateEnd(event) : this._onPanMoveEnd(event);\n  }\n\n  // Default handler for panning to move.\n  // Called by `_onPan` when panning without function key pressed.\n  _onPanMove(event) {\n    if (!this.dragPan) {\n      return false;\n    }\n    const pos = this.getCenter(event);\n    const newMapState = this.mapState.pan({pos});\n    this.updateViewport(newMapState, NO_TRANSITION_PROPS, {isPanning: true});\n    return true;\n  }\n\n  _onPanMoveEnd(event) {\n    if (this.dragPan) {\n      const {inertia = DEFAULT_INERTIA} = this.dragPan;\n      if (inertia && event.velocity) {\n        const pos = this.getCenter(event);\n        const endPos = [\n          pos[0] + (event.velocityX * inertia) / 2,\n          pos[1] + (event.velocityY * inertia) / 2\n        ];\n        const newControllerState = this.mapState.pan({pos: endPos}).panEnd();\n        this.updateViewport(\n          newControllerState,\n          {\n            ...LINEAR_TRANSITION_PROPS,\n            transitionDuration: inertia,\n            transitionEasing: INERTIA_EASING\n          },\n          {\n            isDragging: false,\n            isPanning: true\n          }\n        );\n        return true;\n      }\n    }\n    const newMapState = this.mapState.panEnd();\n    this.updateViewport(newMapState, null, {\n      isDragging: false,\n      isPanning: false\n    });\n    return true;\n  }\n\n  // Default handler for panning to rotate.\n  // Called by `_onPan` when panning with function key pressed.\n  _onPanRotate(event) {\n    if (!this.dragRotate) {\n      return false;\n    }\n\n    const pos = this.getCenter(event);\n    const newMapState = this.mapState.rotate({pos});\n    this.updateViewport(newMapState, NO_TRANSITION_PROPS, {isRotating: true});\n    return true;\n  }\n\n  _onPanRotateEnd(event) {\n    if (this.dragRotate) {\n      const {inertia = DEFAULT_INERTIA} = this.dragRotate;\n      if (inertia && event.velocity) {\n        const pos = this.getCenter(event);\n        const endPos = [\n          pos[0] + (event.velocityX * inertia) / 2,\n          pos[1] + (event.velocityY * inertia) / 2\n        ];\n        const newControllerState = this.mapState.rotate({pos: endPos}).rotateEnd();\n        this.updateViewport(\n          newControllerState,\n          {\n            ...LINEAR_TRANSITION_PROPS,\n            transitionDuration: inertia,\n            transitionEasing: INERTIA_EASING\n          },\n          {\n            isDragging: false,\n            isRotating: true\n          }\n        );\n        return true;\n      }\n    }\n    const newMapState = this.mapState.panEnd();\n    this.updateViewport(newMapState, null, {\n      isDragging: false,\n      isRotating: false\n    });\n    return true;\n  }\n\n  // Default handler for the `wheel` event.\n  _onWheel(event) {\n    if (!this.scrollZoom) {\n      return false;\n    }\n\n    const {speed = 0.01, smooth = false} = this.scrollZoom;\n\n    event.preventDefault();\n\n    const pos = this.getCenter(event);\n    const {delta} = event;\n\n    // Map wheel delta to relative scale\n    let scale = 2 / (1 + Math.exp(-Math.abs(delta * speed)));\n    if (delta < 0 && scale !== 0) {\n      scale = 1 / scale;\n    }\n\n    const newMapState = this.mapState.zoom({pos, scale});\n    if (newMapState.getViewportProps().zoom === this.mapStateProps.zoom) {\n      return false;\n    }\n\n    this.updateViewport(\n      newMapState,\n      {\n        ...LINEAR_TRANSITION_PROPS,\n        transitionInterpolator: new LinearInterpolator({around: pos}),\n        transitionDuration: smooth ? 250 : 1\n      },\n      {\n        isPanning: true,\n        isZooming: true\n      }\n    );\n    return true;\n  }\n\n  // Default handler for the `pinchstart` event.\n  _onPinchStart(event) {\n    const pos = this.getCenter(event);\n    const newMapState = this.mapState.zoomStart({pos}).rotateStart({pos});\n    // hack - hammer's `rotation` field doesn't seem to produce the correct angle\n    this._startPinchRotation = event.rotation;\n    this._lastPinchEvent = event;\n    this.updateViewport(newMapState, NO_TRANSITION_PROPS, {isDragging: true});\n    return true;\n  }\n\n  // Default handler for the `pinch` event.\n  _onPinch(event) {\n    if (!this.isDragging()) {\n      return false;\n    }\n    if (!this.touchZoom && !this.touchRotate) {\n      return false;\n    }\n\n    let newMapState = this.mapState;\n    if (this.touchZoom) {\n      const {scale} = event;\n      const pos = this.getCenter(event);\n      newMapState = newMapState.zoom({pos, scale});\n    }\n    if (this.touchRotate) {\n      const {rotation} = event;\n      newMapState = newMapState.rotate({\n        deltaAngleX: this._startPinchRotation - rotation\n      });\n    }\n\n    this.updateViewport(newMapState, NO_TRANSITION_PROPS, {\n      isDragging: true,\n      isPanning: Boolean(this.touchZoom),\n      isZooming: Boolean(this.touchZoom),\n      isRotating: Boolean(this.touchRotate)\n    });\n    this._lastPinchEvent = event;\n    return true;\n  }\n\n  // Default handler for the `pinchend` event.\n  _onPinchEnd(event) {\n    if (!this.isDragging()) {\n      return false;\n    }\n    if (this.touchZoom) {\n      const {inertia = DEFAULT_INERTIA} = this.touchZoom;\n      const {_lastPinchEvent} = this;\n      if (inertia && _lastPinchEvent && event.scale !== _lastPinchEvent.scale) {\n        const pos = this.getCenter(event);\n        let newMapState = this.mapState.rotateEnd();\n        const z = Math.log2(event.scale);\n        const velocityZ =\n          (z - Math.log2(_lastPinchEvent.scale)) / (event.deltaTime - _lastPinchEvent.deltaTime);\n        const endScale = Math.pow(2, z + (velocityZ * inertia) / 2);\n        newMapState = newMapState.zoom({pos, scale: endScale}).zoomEnd();\n\n        this.updateViewport(\n          newMapState,\n          {\n            ...LINEAR_TRANSITION_PROPS,\n            transitionInterpolator: new LinearInterpolator({around: pos}),\n            transitionDuration: inertia,\n            transitionEasing: INERTIA_EASING\n          },\n          {\n            isDragging: false,\n            isPanning: Boolean(this.touchZoom),\n            isZooming: Boolean(this.touchZoom),\n            isRotating: false\n          }\n        );\n        this.blockEvents(inertia);\n        return true;\n      }\n    }\n\n    const newMapState = this.mapState.zoomEnd().rotateEnd();\n    this._state.startPinchRotation = 0;\n    this.updateViewport(newMapState, null, {\n      isDragging: false,\n      isPanning: false,\n      isZooming: false,\n      isRotating: false\n    });\n    this._startPinchRotation = null;\n    this._lastPinchEvent = null;\n    return true;\n  }\n\n  _onTriplePanStart(event) {\n    const pos = this.getCenter(event);\n    const newMapState = this.mapState.rotateStart({pos});\n    this.updateViewport(newMapState, NO_TRANSITION_PROPS, {isDragging: true});\n    return true;\n  }\n\n  _onTriplePan(event) {\n    if (!this.isDragging()) {\n      return false;\n    }\n    if (!this.touchRotate) {\n      return false;\n    }\n\n    const pos = this.getCenter(event);\n    pos[0] -= event.deltaX;\n\n    const newMapState = this.mapState.rotate({pos});\n    this.updateViewport(newMapState, NO_TRANSITION_PROPS, {isRotating: true});\n    return true;\n  }\n\n  _onTriplePanEnd(event) {\n    if (!this.isDragging()) {\n      return false;\n    }\n    if (this.touchRotate) {\n      const {inertia = DEFAULT_INERTIA} = this.touchRotate;\n      if (inertia && event.velocityY) {\n        const pos = this.getCenter(event);\n        const endPos = [pos[0], (pos[1] += (event.velocityY * inertia) / 2)];\n        const newMapState = this.mapState.rotate({pos: endPos});\n        this.updateViewport(\n          newMapState,\n          {\n            ...LINEAR_TRANSITION_PROPS,\n            transitionDuration: inertia,\n            transitionEasing: INERTIA_EASING\n          },\n          {\n            isDragging: false,\n            isRotating: true\n          }\n        );\n        this.blockEvents(inertia);\n        return false;\n      }\n    }\n    const newMapState = this.mapState.rotateEnd();\n    this.updateViewport(newMapState, null, {\n      isDragging: false,\n      isRotating: false\n    });\n    return true;\n  }\n\n  // Default handler for the `doubletap` event.\n  _onDoubleTap(event) {\n    if (!this.doubleClickZoom) {\n      return false;\n    }\n    const pos = this.getCenter(event);\n    const isZoomOut = this.isFunctionKeyPressed(event);\n\n    const newMapState = this.mapState.zoom({pos, scale: isZoomOut ? 0.5 : 2});\n    this.updateViewport(\n      newMapState,\n      Object.assign({}, LINEAR_TRANSITION_PROPS, {\n        transitionInterpolator: new LinearInterpolator({around: pos})\n      }),\n      {isZooming: true}\n    );\n    return true;\n  }\n\n  // Default handler for the `keydown` event\n  _onKeyDown(event) {\n    if (!this.keyboard) {\n      return false;\n    }\n    const funcKey = this.isFunctionKeyPressed(event);\n    const {zoomSpeed = 2, moveSpeed = 100, rotateSpeedX = 15, rotateSpeedY = 10} = this.keyboard;\n\n    const {mapStateProps} = this;\n    let newMapState;\n\n    switch (event.srcEvent.keyCode) {\n      case 189: // -\n        if (funcKey) {\n          newMapState = this.getMapState({zoom: mapStateProps.zoom - Math.log2(zoomSpeed) - 1});\n        } else {\n          newMapState = this.getMapState({zoom: mapStateProps.zoom - Math.log2(zoomSpeed)});\n        }\n        break;\n      case 187: // +\n        if (funcKey) {\n          newMapState = this.getMapState({zoom: mapStateProps.zoom + Math.log2(zoomSpeed) + 1});\n        } else {\n          newMapState = this.getMapState({zoom: mapStateProps.zoom + Math.log2(zoomSpeed)});\n        }\n        break;\n      case 37: // left\n        if (funcKey) {\n          newMapState = this.getMapState({\n            bearing: mapStateProps.bearing - rotateSpeedX\n          });\n        } else {\n          newMapState = this.mapState.pan({pos: [moveSpeed, 0], startPos: [0, 0]});\n        }\n        break;\n      case 39: // right\n        if (funcKey) {\n          newMapState = this.getMapState({\n            bearing: mapStateProps.bearing + rotateSpeedX\n          });\n        } else {\n          newMapState = this.mapState.pan({pos: [-moveSpeed, 0], startPos: [0, 0]});\n        }\n        break;\n      case 38: // up\n        if (funcKey) {\n          newMapState = this.getMapState({pitch: mapStateProps.pitch + rotateSpeedY});\n        } else {\n          newMapState = this.mapState.pan({pos: [0, moveSpeed], startPos: [0, 0]});\n        }\n        break;\n      case 40: // down\n        if (funcKey) {\n          newMapState = this.getMapState({pitch: mapStateProps.pitch - rotateSpeedY});\n        } else {\n          newMapState = this.mapState.pan({pos: [0, -moveSpeed], startPos: [0, 0]});\n        }\n        break;\n      default:\n        return false;\n    }\n    return this.updateViewport(newMapState, LINEAR_TRANSITION_PROPS);\n  }\n}\n"],"file":"map-controller.js"}