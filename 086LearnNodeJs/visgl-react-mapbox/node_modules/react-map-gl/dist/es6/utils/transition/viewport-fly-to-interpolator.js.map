{"version":3,"sources":["../../../../src/utils/transition/viewport-fly-to-interpolator.js"],"names":["assert","TransitionInterpolator","flyToViewport","getFlyToDuration","isValid","getEndValueByShortestPath","lerp","VIEWPORT_TRANSITION_PROPS","REQUIRED_PROPS","LINEARLY_INTERPOLATED_PROPS","DEFAULT_OPTS","speed","curve","ViewportFlyToInterpolator","constructor","props","Object","assign","initializeProps","startProps","endProps","startViewportProps","endViewportProps","key","startValue","endValue","start","end","interpolateProps","t","viewport","getDuration","transitionDuration"],"mappings":";AAAA,OAAOA,MAAP,MAAmB,WAAnB;AACA,OAAOC,sBAAP,MAAmC,2BAAnC;AAEA,SAAQC,aAAR,EAAuBC,gBAAvB,QAA8C,2BAA9C;AACA,SAAQC,OAAR,EAAiBC,yBAAjB,QAAiD,oBAAjD;AACA,SAAQC,IAAR,QAAmB,eAAnB;AAEA,MAAMC,yBAAyB,GAAG,CAAC,WAAD,EAAc,UAAd,EAA0B,MAA1B,EAAkC,SAAlC,EAA6C,OAA7C,CAAlC;AACA,MAAMC,cAAc,GAAG,CAAC,UAAD,EAAa,WAAb,EAA0B,MAA1B,EAAkC,OAAlC,EAA2C,QAA3C,CAAvB;AACA,MAAMC,2BAA2B,GAAG,CAAC,SAAD,EAAY,OAAZ,CAApC;AACA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,GADY;AAEnBC,EAAAA,KAAK,EAAE;AAFY,CAArB;AAaA,eAAe,MAAMC,yBAAN,SAAwCZ,sBAAxC,CAA+D;AAU5Ea,EAAAA,WAAW,CAACC,KAAK,GAAG,EAAT,EAAa;AACtB;;AADsB,uCATZR,yBASY;;AAGtB,SAAKQ,KAAL,GAAaC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBP,YAAlB,EAAgCK,KAAhC,CAAb;AACD;;AAEDG,EAAAA,eAAe,CAACC,UAAD,EAAaC,QAAb,EAAuB;AACpC,UAAMC,kBAAkB,GAAG,EAA3B;AACA,UAAMC,gBAAgB,GAAG,EAAzB;;AAGA,SAAK,MAAMC,GAAX,IAAkBf,cAAlB,EAAkC;AAChC,YAAMgB,UAAU,GAAGL,UAAU,CAACI,GAAD,CAA7B;AACA,YAAME,QAAQ,GAAGL,QAAQ,CAACG,GAAD,CAAzB;AACAvB,MAAAA,MAAM,CAACI,OAAO,CAACoB,UAAD,CAAP,IAAuBpB,OAAO,CAACqB,QAAD,CAA/B,YAA8CF,GAA9C,sCAAN;AACAF,MAAAA,kBAAkB,CAACE,GAAD,CAAlB,GAA0BC,UAA1B;AACAF,MAAAA,gBAAgB,CAACC,GAAD,CAAhB,GAAwBlB,yBAAyB,CAACkB,GAAD,EAAMC,UAAN,EAAkBC,QAAlB,CAAjD;AACD;;AAED,SAAK,MAAMF,GAAX,IAAkBd,2BAAlB,EAA+C;AAC7C,YAAMe,UAAU,GAAGL,UAAU,CAACI,GAAD,CAAV,IAAmB,CAAtC;AACA,YAAME,QAAQ,GAAGL,QAAQ,CAACG,GAAD,CAAR,IAAiB,CAAlC;AACAF,MAAAA,kBAAkB,CAACE,GAAD,CAAlB,GAA0BC,UAA1B;AACAF,MAAAA,gBAAgB,CAACC,GAAD,CAAhB,GAAwBlB,yBAAyB,CAACkB,GAAD,EAAMC,UAAN,EAAkBC,QAAlB,CAAjD;AACD;;AAED,WAAO;AACLC,MAAAA,KAAK,EAAEL,kBADF;AAELM,MAAAA,GAAG,EAAEL;AAFA,KAAP;AAID;;AAEDM,EAAAA,gBAAgB,CAACT,UAAD,EAAaC,QAAb,EAAuBS,CAAvB,EAA0B;AACxC,UAAMC,QAAQ,GAAG5B,aAAa,CAACiB,UAAD,EAAaC,QAAb,EAAuBS,CAAvB,EAA0B,KAAKd,KAA/B,CAA9B;;AAGA,SAAK,MAAMQ,GAAX,IAAkBd,2BAAlB,EAA+C;AAC7CqB,MAAAA,QAAQ,CAACP,GAAD,CAAR,GAAgBjB,IAAI,CAACa,UAAU,CAACI,GAAD,CAAX,EAAkBH,QAAQ,CAACG,GAAD,CAA1B,EAAiCM,CAAjC,CAApB;AACD;;AAED,WAAOC,QAAP;AACD;;AAGDC,EAAAA,WAAW,CAACZ,UAAD,EAAaC,QAAb,EAAuB;AAChC,QAAI;AAACY,MAAAA;AAAD,QAAuBZ,QAA3B;;AACA,QAAIY,kBAAkB,KAAK,MAA3B,EAAmC;AAEjCA,MAAAA,kBAAkB,GAAG7B,gBAAgB,CAACgB,UAAD,EAAaC,QAAb,EAAuB,KAAKL,KAA5B,CAArC;AACD;;AACD,WAAOiB,kBAAP;AACD;;AA7D2E","sourcesContent":["import assert from '../assert';\nimport TransitionInterpolator from './transition-interpolator';\n\nimport {flyToViewport, getFlyToDuration} from 'viewport-mercator-project';\nimport {isValid, getEndValueByShortestPath} from './transition-utils';\nimport {lerp} from '../math-utils';\n\nconst VIEWPORT_TRANSITION_PROPS = ['longitude', 'latitude', 'zoom', 'bearing', 'pitch'];\nconst REQUIRED_PROPS = ['latitude', 'longitude', 'zoom', 'width', 'height'];\nconst LINEARLY_INTERPOLATED_PROPS = ['bearing', 'pitch'];\nconst DEFAULT_OPTS = {\n  speed: 1.2,\n  curve: 1.414\n  // screenSpeed and maxDuration are used only if specified\n};\n\n/**\n * This class adapts mapbox-gl-js Map#flyTo animation so it can be used in\n * react/redux architecture.\n * mapbox-gl-js flyTo : https://www.mapbox.com/mapbox-gl-js/api/#map#flyto.\n * It implements “Smooth and efficient zooming and panning.” algorithm by\n * \"Jarke J. van Wijk and Wim A.A. Nuij\"\n */\nexport default class ViewportFlyToInterpolator extends TransitionInterpolator {\n  propNames = VIEWPORT_TRANSITION_PROPS;\n\n  /**\n   * @param props {Object}\n   - `props.curve` (Number, optional, default: 1.414) - The zooming \"curve\" that will occur along the flight path.\n   - `props.speed` (Number, optional, default: 1.2) - The average speed of the animation defined in relation to `options.curve`, it linearly affects the duration, higher speed returns smaller durations and vice versa.\n   - `props.screenSpeed` (Number, optional) - The average speed of the animation measured in screenfuls per second. Similar to `opts.speed` it linearly affects the duration,  when specified `opts.speed` is ignored.\n   - `props.maxDuration` (Number, optional) - Maximum duration in milliseconds, if calculated duration exceeds this value, `0` is returned.\n   */\n  constructor(props = {}) {\n    super();\n\n    this.props = Object.assign({}, DEFAULT_OPTS, props);\n  }\n\n  initializeProps(startProps, endProps) {\n    const startViewportProps = {};\n    const endViewportProps = {};\n\n    // Check minimum required props\n    for (const key of REQUIRED_PROPS) {\n      const startValue = startProps[key];\n      const endValue = endProps[key];\n      assert(isValid(startValue) && isValid(endValue), `${key} must be supplied for transition`);\n      startViewportProps[key] = startValue;\n      endViewportProps[key] = getEndValueByShortestPath(key, startValue, endValue);\n    }\n\n    for (const key of LINEARLY_INTERPOLATED_PROPS) {\n      const startValue = startProps[key] || 0;\n      const endValue = endProps[key] || 0;\n      startViewportProps[key] = startValue;\n      endViewportProps[key] = getEndValueByShortestPath(key, startValue, endValue);\n    }\n\n    return {\n      start: startViewportProps,\n      end: endViewportProps\n    };\n  }\n\n  interpolateProps(startProps, endProps, t) {\n    const viewport = flyToViewport(startProps, endProps, t, this.props);\n\n    // Linearly interpolate 'bearing' and 'pitch' if exist.\n    for (const key of LINEARLY_INTERPOLATED_PROPS) {\n      viewport[key] = lerp(startProps[key], endProps[key], t);\n    }\n\n    return viewport;\n  }\n\n  // computes the transition duration\n  getDuration(startProps, endProps) {\n    let {transitionDuration} = endProps;\n    if (transitionDuration === 'auto') {\n      // auto calculate duration based on start and end props\n      transitionDuration = getFlyToDuration(startProps, endProps, this.props);\n    }\n    return transitionDuration;\n  }\n}\n"],"file":"viewport-fly-to-interpolator.js"}