{"version":3,"sources":["../../../src/utils/map-state.js"],"names":["WebMercatorViewport","normalizeViewportProps","clamp","assert","MAPBOX_LIMITS","minZoom","maxZoom","minPitch","maxPitch","DEFAULT_STATE","pitch","bearing","altitude","PITCH_MOUSE_THRESHOLD","PITCH_ACCEL","MapState","constructor","width","height","latitude","longitude","zoom","transitionDuration","transitionEasing","transitionInterpolator","transitionInterruption","startPanLngLat","startZoomLngLat","startRotatePos","startBearing","startPitch","startZoom","Number","isFinite","_viewportProps","_applyConstraints","_state","getViewportProps","getState","panStart","pos","_getUpdatedMapState","_unproject","pan","startPos","_calculateNewLngLat","panEnd","rotateStart","rotate","deltaAngleX","deltaAngleY","newRotation","_calculateNewPitchAndBearing","_getRotationParams","rotateEnd","zoomStart","scale","_calculateNewZoom","zoomedViewport","Object","assign","getMapCenterByLngLatPosition","lngLat","zoomEnd","newProps","props","viewport","unproject","Math","log2","deltaScaleX","deltaScaleY","deltaX","deltaY","centerY","startY","abs","min","max"],"mappings":"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","sourcesContent":["import WebMercatorViewport, {normalizeViewportProps} from 'viewport-mercator-project';\nimport {clamp} from './math-utils';\nimport assert from './assert';\n\n// MAPBOX LIMITS\nexport const MAPBOX_LIMITS = {\n  minZoom: 0,\n  maxZoom: 24,\n  minPitch: 0,\n  maxPitch: 60\n};\n\nconst DEFAULT_STATE = {\n  pitch: 0,\n  bearing: 0,\n  altitude: 1.5\n};\n\nconst PITCH_MOUSE_THRESHOLD = 5;\nconst PITCH_ACCEL = 1.2;\n\nexport default class MapState {\n  constructor({\n    /** Mapbox viewport properties */\n    /** The width of the viewport */\n    width,\n    /** The height of the viewport */\n    height,\n    /** The latitude at the center of the viewport */\n    latitude,\n    /** The longitude at the center of the viewport */\n    longitude,\n    /** The tile zoom level of the map. */\n    zoom,\n    /** The bearing of the viewport in degrees */\n    bearing = DEFAULT_STATE.bearing,\n    /** The pitch of the viewport in degrees */\n    pitch = DEFAULT_STATE.pitch,\n    /**\n     * Specify the altitude of the viewport camera\n     * Unit: map heights, default 1.5\n     * Non-public API, see https://github.com/mapbox/mapbox-gl-js/issues/1137\n     */\n    altitude = DEFAULT_STATE.altitude,\n\n    /** Viewport constraints */\n    maxZoom = MAPBOX_LIMITS.maxZoom,\n    minZoom = MAPBOX_LIMITS.minZoom,\n    maxPitch = MAPBOX_LIMITS.maxPitch,\n    minPitch = MAPBOX_LIMITS.minPitch,\n\n    /** Transition props */\n    transitionDuration,\n    transitionEasing,\n    transitionInterpolator,\n    transitionInterruption,\n\n    /** Interaction states, required to calculate change during transform */\n    /* The point on map being grabbed when the operation first started */\n    startPanLngLat,\n    /* Center of the zoom when the operation first started */\n    startZoomLngLat,\n    /* Cursor position when the rotate operation started */\n    startRotatePos,\n    /** Bearing when current perspective rotate operation started */\n    startBearing,\n    /** Pitch when current perspective rotate operation started */\n    startPitch,\n    /** Zoom when current zoom operation started */\n    startZoom\n  }) {\n    assert(Number.isFinite(width), '`width` must be supplied');\n    assert(Number.isFinite(height), '`height` must be supplied');\n    assert(Number.isFinite(longitude), '`longitude` must be supplied');\n    assert(Number.isFinite(latitude), '`latitude` must be supplied');\n    assert(Number.isFinite(zoom), '`zoom` must be supplied');\n\n    this._viewportProps = this._applyConstraints({\n      width,\n      height,\n      latitude,\n      longitude,\n      zoom,\n      bearing,\n      pitch,\n      altitude,\n      maxZoom,\n      minZoom,\n      maxPitch,\n      minPitch,\n      transitionDuration,\n      transitionEasing,\n      transitionInterpolator,\n      transitionInterruption\n    });\n\n    this._state = {\n      startPanLngLat,\n      startZoomLngLat,\n      startRotatePos,\n      startBearing,\n      startPitch,\n      startZoom\n    };\n  }\n\n  /* Public API */\n\n  getViewportProps() {\n    return this._viewportProps;\n  }\n\n  getState() {\n    return this._state;\n  }\n\n  /**\n   * Start panning\n   * @param {Object} params\n   * @param {[Number, Number]} params.pos - position on screen where the pointer grabs\n   */\n  panStart({pos}) {\n    return this._getUpdatedMapState({\n      startPanLngLat: this._unproject(pos)\n    });\n  }\n\n  /**\n   * Pan\n   * @param {Object} params\n   * @param {[Number, Number]} params.pos - position on screen where the pointer is\n   * @param {[Number, Number]} [params.startPos] - where the pointer grabbed at\n   *   the start of the operation. Must be supplied of `panStart()` was not called\n   */\n  pan({pos, startPos}) {\n    const startPanLngLat = this._state.startPanLngLat || this._unproject(startPos);\n\n    if (!startPanLngLat) {\n      return this;\n    }\n\n    const [longitude, latitude] = this._calculateNewLngLat({\n      startPanLngLat,\n      pos\n    });\n\n    return this._getUpdatedMapState({\n      longitude,\n      latitude\n    });\n  }\n\n  /**\n   * End panning\n   * Must call if `panStart()` was called\n   */\n  panEnd() {\n    return this._getUpdatedMapState({\n      startPanLngLat: null\n    });\n  }\n\n  /**\n   * Start rotating\n   * @param {Object} params\n   * @param {[Number, Number]} params.pos - position on screen where the center is\n   */\n  rotateStart({pos}) {\n    return this._getUpdatedMapState({\n      startRotatePos: pos,\n      startBearing: this._viewportProps.bearing,\n      startPitch: this._viewportProps.pitch\n    });\n  }\n\n  /**\n   * Rotate\n   * @param {Object} params\n   * @param {[Number, Number]} params.pos - position on screen where the center is\n   * @param {Number} params.deltaAngleX - the change to bearing.\n   * @param {Number} params.deltaAngleY - the change to pitch.\n   */\n  rotate({pos, deltaAngleX = 0, deltaAngleY = 0}) {\n    const {startRotatePos, startBearing, startPitch} = this._state;\n\n    if (!Number.isFinite(startBearing) || !Number.isFinite(startPitch)) {\n      return this;\n    }\n\n    let newRotation;\n    if (pos) {\n      newRotation = this._calculateNewPitchAndBearing({\n        ...this._getRotationParams(pos, startRotatePos),\n        startBearing,\n        startPitch\n      });\n    } else {\n      newRotation = {\n        bearing: startBearing + deltaAngleX,\n        pitch: startPitch + deltaAngleY\n      };\n    }\n\n    return this._getUpdatedMapState(newRotation);\n  }\n\n  /**\n   * End rotating\n   * Must call if `rotateStart()` was called\n   */\n  rotateEnd() {\n    return this._getUpdatedMapState({\n      startBearing: null,\n      startPitch: null\n    });\n  }\n\n  /**\n   * Start zooming\n   * @param {Object} params\n   * @param {[Number, Number]} params.pos - position on screen where the center is\n   */\n  zoomStart({pos}) {\n    return this._getUpdatedMapState({\n      startZoomLngLat: this._unproject(pos),\n      startZoom: this._viewportProps.zoom\n    });\n  }\n\n  /**\n   * Zoom\n   * @param {Object} params\n   * @param {[Number, Number]} params.pos - position on screen where the current center is\n   * @param {[Number, Number]} [params.startPos] - the center position at\n   *   the start of the operation. Must be supplied of `zoomStart()` was not called\n   * @param {Number} params.scale - a number between [0, 1] specifying the accumulated\n   *   relative scale.\n   */\n  zoom({pos, startPos, scale}) {\n    assert(scale > 0, '`scale` must be a positive number');\n\n    // Make sure we zoom around the current mouse position rather than map center\n    let {startZoom, startZoomLngLat} = this._state;\n\n    if (!Number.isFinite(startZoom)) {\n      // We have two modes of zoom:\n      // scroll zoom that are discrete events (transform from the current zoom level),\n      // and pinch zoom that are continuous events (transform from the zoom level when\n      // pinch started).\n      // If startZoom state is defined, then use the startZoom state;\n      // otherwise assume discrete zooming\n      startZoom = this._viewportProps.zoom;\n      startZoomLngLat = this._unproject(startPos) || this._unproject(pos);\n    }\n\n    // take the start lnglat and put it where the mouse is down.\n    assert(\n      startZoomLngLat,\n      '`startZoomLngLat` prop is required ' +\n        'for zoom behavior to calculate where to position the map.'\n    );\n\n    const zoom = this._calculateNewZoom({scale, startZoom: startZoom || 0});\n\n    const zoomedViewport = new WebMercatorViewport(Object.assign({}, this._viewportProps, {zoom}));\n    const [longitude, latitude] = zoomedViewport.getMapCenterByLngLatPosition({\n      lngLat: startZoomLngLat,\n      pos\n    });\n\n    return this._getUpdatedMapState({\n      zoom,\n      longitude,\n      latitude\n    });\n  }\n\n  /**\n   * End zooming\n   * Must call if `zoomStart()` was called\n   */\n  zoomEnd() {\n    return this._getUpdatedMapState({\n      startZoomLngLat: null,\n      startZoom: null\n    });\n  }\n\n  /* Private methods */\n\n  _getUpdatedMapState(newProps) {\n    // Update _viewportProps\n    return new MapState(Object.assign({}, this._viewportProps, this._state, newProps));\n  }\n\n  // Apply any constraints (mathematical or defined by _viewportProps) to map state\n  _applyConstraints(props) {\n    // Ensure zoom is within specified range\n    const {maxZoom, minZoom, zoom} = props;\n    props.zoom = clamp(zoom, minZoom, maxZoom);\n\n    // Ensure pitch is within specified range\n    const {maxPitch, minPitch, pitch} = props;\n    props.pitch = clamp(pitch, minPitch, maxPitch);\n\n    Object.assign(props, normalizeViewportProps(props));\n\n    return props;\n  }\n\n  _unproject(pos) {\n    const viewport = new WebMercatorViewport(this._viewportProps);\n    return pos && viewport.unproject(pos);\n  }\n\n  // Calculate a new lnglat based on pixel dragging position\n  _calculateNewLngLat({startPanLngLat, pos}) {\n    const viewport = new WebMercatorViewport(this._viewportProps);\n    return viewport.getMapCenterByLngLatPosition({\n      lngLat: startPanLngLat,\n      pos\n    });\n  }\n\n  // Calculates new zoom\n  _calculateNewZoom({scale, startZoom}) {\n    const {maxZoom, minZoom} = this._viewportProps;\n    const zoom = startZoom + Math.log2(scale);\n    return clamp(zoom, minZoom, maxZoom);\n  }\n\n  // Calculates a new pitch and bearing from a position (coming from an event)\n  _calculateNewPitchAndBearing({deltaScaleX, deltaScaleY, startBearing, startPitch}) {\n    // clamp deltaScaleY to [-1, 1] so that rotation is constrained between minPitch and maxPitch.\n    // deltaScaleX does not need to be clamped as bearing does not have constraints.\n    deltaScaleY = clamp(deltaScaleY, -1, 1);\n\n    const {minPitch, maxPitch} = this._viewportProps;\n\n    const bearing = startBearing + 180 * deltaScaleX;\n    let pitch = startPitch;\n    if (deltaScaleY > 0) {\n      // Gradually increase pitch\n      pitch = startPitch + deltaScaleY * (maxPitch - startPitch);\n    } else if (deltaScaleY < 0) {\n      // Gradually decrease pitch\n      pitch = startPitch - deltaScaleY * (minPitch - startPitch);\n    }\n\n    return {\n      pitch,\n      bearing\n    };\n  }\n\n  _getRotationParams(pos, startPos) {\n    const deltaX = pos[0] - startPos[0];\n    const deltaY = pos[1] - startPos[1];\n    const centerY = pos[1];\n    const startY = startPos[1];\n    const {width, height} = this._viewportProps;\n\n    const deltaScaleX = deltaX / width;\n    let deltaScaleY = 0;\n\n    if (deltaY > 0) {\n      if (Math.abs(height - startY) > PITCH_MOUSE_THRESHOLD) {\n        // Move from 0 to -1 as we drag upwards\n        deltaScaleY = (deltaY / (startY - height)) * PITCH_ACCEL;\n      }\n    } else if (deltaY < 0) {\n      if (startY > PITCH_MOUSE_THRESHOLD) {\n        // Move from 0 to 1 as we drag upwards\n        deltaScaleY = 1 - centerY / startY;\n      }\n    }\n    deltaScaleY = Math.min(1, Math.max(-1, deltaScaleY));\n    return {deltaScaleX, deltaScaleY};\n  }\n}\n"],"file":"map-state.js"}