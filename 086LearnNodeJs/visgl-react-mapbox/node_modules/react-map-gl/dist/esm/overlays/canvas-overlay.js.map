{"version":3,"sources":["../../../src/overlays/canvas-overlay.js"],"names":["React","useState","useEffect","PropTypes","useMapControl","mapControlPropTypes","pixelRatio","window","devicePixelRatio","propTypes","Object","assign","redraw","func","isRequired","defaultProps","captureScroll","captureDrag","captureClick","captureDoubleClick","capturePointerMove","CanvasOverlay","props","context","containerRef","ctx","setDrawingContext","current","getContext","viewport","isDragging","save","scale","width","height","project","unproject","restore","position","left","top"],"mappings":";AAoBA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAAQC,QAAR,EAAkBC,SAAlB,QAAkC,OAAlC;AACA,OAAO,KAAKC,SAAZ,MAA2B,YAA3B;AACA,OAAOC,aAAP,IAAuBC,mBAAvB,QAAiD,+BAAjD;AAGA,IAAMC,UAAU,GAAI,OAAOC,MAAP,KAAkB,WAAlB,IAAiCA,MAAM,CAACC,gBAAzC,IAA8D,CAAjF;AAEA,IAAMC,SAAS,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBN,mBAAlB,EAAuC;AACvDO,EAAAA,MAAM,EAAET,SAAS,CAACU,IAAV,CAAeC;AADgC,CAAvC,CAAlB;AAIA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,aAAa,EAAE,KADI;AAEnBC,EAAAA,WAAW,EAAE,KAFM;AAGnBC,EAAAA,YAAY,EAAE,KAHK;AAInBC,EAAAA,kBAAkB,EAAE,KAJD;AAKnBC,EAAAA,kBAAkB,EAAE;AALD,CAArB;;AAQA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAAA,uBACIlB,aAAa,CAACkB,KAAD,CADjB;AAAA,MACrBC,OADqB,kBACrBA,OADqB;AAAA,MACZC,YADY,kBACZA,YADY;;AAAA,kBAEKvB,QAAQ,CAAC,IAAD,CAFb;AAAA;AAAA,MAErBwB,GAFqB;AAAA,MAEhBC,iBAFgB;;AAI5BxB,EAAAA,SAAS,CAAC,YAAM;AACdwB,IAAAA,iBAAiB,CAACF,YAAY,CAACG,OAAb,CAAqBC,UAArB,CAAgC,IAAhC,CAAD,CAAjB;AACD,GAFQ,EAEN,EAFM,CAAT;AAJ4B,MAQrBC,QARqB,GAQGN,OARH,CAQrBM,QARqB;AAAA,MAQXC,UARW,GAQGP,OARH,CAQXO,UARW;;AAU5B,MAAIL,GAAJ,EAAS;AACPA,IAAAA,GAAG,CAACM,IAAJ;AACAN,IAAAA,GAAG,CAACO,KAAJ,CAAU1B,UAAV,EAAsBA,UAAtB;AAEAgB,IAAAA,KAAK,CAACV,MAAN,CAAa;AACXqB,MAAAA,KAAK,EAAEJ,QAAQ,CAACI,KADL;AAEXC,MAAAA,MAAM,EAAEL,QAAQ,CAACK,MAFN;AAGXT,MAAAA,GAAG,EAAHA,GAHW;AAIXK,MAAAA,UAAU,EAAVA,UAJW;AAKXK,MAAAA,OAAO,EAAEN,QAAQ,CAACM,OALP;AAMXC,MAAAA,SAAS,EAAEP,QAAQ,CAACO;AANT,KAAb;AASAX,IAAAA,GAAG,CAACY,OAAJ;AACD;;AAED,SACE;AACE,IAAA,GAAG,EAAEb,YADP;AAEE,IAAA,KAAK,EAAEK,QAAQ,CAACI,KAAT,GAAiB3B,UAF1B;AAGE,IAAA,MAAM,EAAEuB,QAAQ,CAACK,MAAT,GAAkB5B,UAH5B;AAIE,IAAA,KAAK,EAAE;AACL2B,MAAAA,KAAK,YAAKJ,QAAQ,CAACI,KAAd,OADA;AAELC,MAAAA,MAAM,YAAKL,QAAQ,CAACK,MAAd,OAFD;AAGLI,MAAAA,QAAQ,EAAE,UAHL;AAILC,MAAAA,IAAI,EAAE,CAJD;AAKLC,MAAAA,GAAG,EAAE;AALA;AAJT,IADF;AAcD;;AAEDnB,aAAa,CAACZ,SAAd,GAA0BA,SAA1B;AACAY,aAAa,CAACN,YAAd,GAA6BA,YAA7B;AAEA,eAAeM,aAAf","sourcesContent":["// Copyright (c) 2015 Uber Technologies, Inc.\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport * as React from 'react';\nimport {useState, useEffect} from 'react';\nimport * as PropTypes from 'prop-types';\nimport useMapControl, {mapControlPropTypes} from '../components/use-map-control';\n\n/* global window */\nconst pixelRatio = (typeof window !== 'undefined' && window.devicePixelRatio) || 1;\n\nconst propTypes = Object.assign({}, mapControlPropTypes, {\n  redraw: PropTypes.func.isRequired\n});\n\nconst defaultProps = {\n  captureScroll: false,\n  captureDrag: false,\n  captureClick: false,\n  captureDoubleClick: false,\n  capturePointerMove: false\n};\n\nfunction CanvasOverlay(props) {\n  const {context, containerRef} = useMapControl(props);\n  const [ctx, setDrawingContext] = useState(null);\n\n  useEffect(() => {\n    setDrawingContext(containerRef.current.getContext('2d'));\n  }, []);\n\n  const {viewport, isDragging} = context;\n\n  if (ctx) {\n    ctx.save();\n    ctx.scale(pixelRatio, pixelRatio);\n\n    props.redraw({\n      width: viewport.width,\n      height: viewport.height,\n      ctx,\n      isDragging,\n      project: viewport.project,\n      unproject: viewport.unproject\n    });\n\n    ctx.restore();\n  }\n\n  return (\n    <canvas\n      ref={containerRef}\n      width={viewport.width * pixelRatio}\n      height={viewport.height * pixelRatio}\n      style={{\n        width: `${viewport.width}px`,\n        height: `${viewport.height}px`,\n        position: 'absolute',\n        left: 0,\n        top: 0\n      }}\n    />\n  );\n}\n\nCanvasOverlay.propTypes = propTypes;\nCanvasOverlay.defaultProps = defaultProps;\n\nexport default CanvasOverlay;\n"],"file":"canvas-overlay.js"}