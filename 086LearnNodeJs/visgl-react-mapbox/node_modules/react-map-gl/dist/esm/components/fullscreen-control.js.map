{"version":3,"sources":["../../../src/components/fullscreen-control.js"],"names":["document","PropTypes","React","useEffect","useState","useMemo","mapboxgl","useMapControl","mapControlDefaultProps","mapControlPropTypes","propTypes","Object","assign","className","string","style","object","container","label","defaultProps","FullscreenControl","props","context","containerRef","isFullscreen","setIsFullscreen","showButton","setShowButton","mapboxFullscreenControl","createMapboxFullscreenControl","control","_checkFullscreenSupport","onFullscreenChange","nextState","_fullscreen","addEventListener","_fullscreenchange","removeEventListener","onClickFullscreen","_container","_onClickFullscreen","position","type","memo"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 Uber Technologies, Inc.\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {document} from '../utils/globals';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport {useEffect, useState, useMemo} from 'react';\nimport mapboxgl from '../utils/mapboxgl';\n\nimport useMapControl, {mapControlDefaultProps, mapControlPropTypes} from './use-map-control';\n\nconst propTypes = Object.assign({}, mapControlPropTypes, {\n  // Custom className\n  className: PropTypes.string,\n  style: PropTypes.object,\n  /* eslint-disable max-len */\n  // `container` is the [compatible DOM element](https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen#Compatible_elements)\n  // which should be made full screen. By default, the map container element will be made full screen.\n  /* eslint-enable max-len */\n  container: PropTypes.object,\n  label: PropTypes.string\n});\n\nconst defaultProps = Object.assign({}, mapControlDefaultProps, {\n  className: '',\n  container: null,\n  label: 'Toggle fullscreen'\n});\n\nfunction FullscreenControl(props) {\n  const {context, containerRef} = useMapControl(props);\n  const [isFullscreen, setIsFullscreen] = useState(false);\n  const [showButton, setShowButton] = useState(false);\n  const [mapboxFullscreenControl, createMapboxFullscreenControl] = useState(null);\n\n  useEffect(() => {\n    const control = new mapboxgl.FullscreenControl();\n\n    createMapboxFullscreenControl(control);\n    setShowButton(control._checkFullscreenSupport());\n\n    const onFullscreenChange = () => {\n      const nextState = !control._fullscreen;\n      // this is a hack\n      // Mapbox use `_fullscreen` flag to toggle fullscreen mode\n      control._fullscreen = nextState;\n      setIsFullscreen(nextState);\n    };\n\n    document.addEventListener(control._fullscreenchange, onFullscreenChange);\n\n    return () => {\n      document.removeEventListener(control._fullscreenchange, onFullscreenChange);\n    };\n  }, []);\n\n  const onClickFullscreen = () => {\n    if (mapboxFullscreenControl) {\n      mapboxFullscreenControl._container = props.container || context.container;\n      mapboxFullscreenControl._onClickFullscreen();\n    }\n  };\n\n  const style = useMemo(() => ({position: 'absolute', ...props.style}), [props.style]);\n\n  if (!showButton) {\n    return null;\n  }\n\n  const {className, label} = props;\n  const type = isFullscreen ? 'shrink' : 'fullscreen';\n\n  return (\n    <div style={style} className={className}>\n      <div className=\"mapboxgl-ctrl mapboxgl-ctrl-group\" ref={containerRef}>\n        <button\n          key={type}\n          className={`mapboxgl-ctrl-icon mapboxgl-ctrl-${type}`}\n          type=\"button\"\n          title={label}\n          onClick={onClickFullscreen}\n        >\n          <span className=\"mapboxgl-ctrl-icon\" aria-hidden=\"true\" />\n        </button>\n      </div>\n    </div>\n  );\n}\n\nFullscreenControl.propTypes = propTypes;\nFullscreenControl.defaultProps = defaultProps;\n\nexport default React.memo(FullscreenControl);\n"],"file":"fullscreen-control.js"}