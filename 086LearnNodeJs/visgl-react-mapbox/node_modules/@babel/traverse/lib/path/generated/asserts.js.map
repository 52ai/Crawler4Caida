{"version":3,"names":[],"sources":["../../../src/path/generated/asserts.ts"],"sourcesContent":["/*\n * This file is auto-generated! Do not modify it directly.\n * To re-generate run 'make build'\n */\nimport type * as t from \"@babel/types\";\nimport type NodePath from \"../index\";\n\nexport interface NodePathAssetions {\n  assertAccessor(opts?: object): asserts this is NodePath<t.Accessor>;\n  assertAnyTypeAnnotation(\n    opts?: object,\n  ): asserts this is NodePath<t.AnyTypeAnnotation>;\n  assertArgumentPlaceholder(\n    opts?: object,\n  ): asserts this is NodePath<t.ArgumentPlaceholder>;\n  assertArrayExpression(\n    opts?: object,\n  ): asserts this is NodePath<t.ArrayExpression>;\n  assertArrayPattern(opts?: object): asserts this is NodePath<t.ArrayPattern>;\n  assertArrayTypeAnnotation(\n    opts?: object,\n  ): asserts this is NodePath<t.ArrayTypeAnnotation>;\n  assertArrowFunctionExpression(\n    opts?: object,\n  ): asserts this is NodePath<t.ArrowFunctionExpression>;\n  assertAssignmentExpression(\n    opts?: object,\n  ): asserts this is NodePath<t.AssignmentExpression>;\n  assertAssignmentPattern(\n    opts?: object,\n  ): asserts this is NodePath<t.AssignmentPattern>;\n  assertAwaitExpression(\n    opts?: object,\n  ): asserts this is NodePath<t.AwaitExpression>;\n  assertBigIntLiteral(opts?: object): asserts this is NodePath<t.BigIntLiteral>;\n  assertBinary(opts?: object): asserts this is NodePath<t.Binary>;\n  assertBinaryExpression(\n    opts?: object,\n  ): asserts this is NodePath<t.BinaryExpression>;\n  assertBindExpression(\n    opts?: object,\n  ): asserts this is NodePath<t.BindExpression>;\n  assertBlock(opts?: object): asserts this is NodePath<t.Block>;\n  assertBlockParent(opts?: object): asserts this is NodePath<t.BlockParent>;\n  assertBlockStatement(\n    opts?: object,\n  ): asserts this is NodePath<t.BlockStatement>;\n  assertBooleanLiteral(\n    opts?: object,\n  ): asserts this is NodePath<t.BooleanLiteral>;\n  assertBooleanLiteralTypeAnnotation(\n    opts?: object,\n  ): asserts this is NodePath<t.BooleanLiteralTypeAnnotation>;\n  assertBooleanTypeAnnotation(\n    opts?: object,\n  ): asserts this is NodePath<t.BooleanTypeAnnotation>;\n  assertBreakStatement(\n    opts?: object,\n  ): asserts this is NodePath<t.BreakStatement>;\n  assertCallExpression(\n    opts?: object,\n  ): asserts this is NodePath<t.CallExpression>;\n  assertCatchClause(opts?: object): asserts this is NodePath<t.CatchClause>;\n  assertClass(opts?: object): asserts this is NodePath<t.Class>;\n  assertClassAccessorProperty(\n    opts?: object,\n  ): asserts this is NodePath<t.ClassAccessorProperty>;\n  assertClassBody(opts?: object): asserts this is NodePath<t.ClassBody>;\n  assertClassDeclaration(\n    opts?: object,\n  ): asserts this is NodePath<t.ClassDeclaration>;\n  assertClassExpression(\n    opts?: object,\n  ): asserts this is NodePath<t.ClassExpression>;\n  assertClassImplements(\n    opts?: object,\n  ): asserts this is NodePath<t.ClassImplements>;\n  assertClassMethod(opts?: object): asserts this is NodePath<t.ClassMethod>;\n  assertClassPrivateMethod(\n    opts?: object,\n  ): asserts this is NodePath<t.ClassPrivateMethod>;\n  assertClassPrivateProperty(\n    opts?: object,\n  ): asserts this is NodePath<t.ClassPrivateProperty>;\n  assertClassProperty(opts?: object): asserts this is NodePath<t.ClassProperty>;\n  assertCompletionStatement(\n    opts?: object,\n  ): asserts this is NodePath<t.CompletionStatement>;\n  assertConditional(opts?: object): asserts this is NodePath<t.Conditional>;\n  assertConditionalExpression(\n    opts?: object,\n  ): asserts this is NodePath<t.ConditionalExpression>;\n  assertContinueStatement(\n    opts?: object,\n  ): asserts this is NodePath<t.ContinueStatement>;\n  assertDebuggerStatement(\n    opts?: object,\n  ): asserts this is NodePath<t.DebuggerStatement>;\n  assertDecimalLiteral(\n    opts?: object,\n  ): asserts this is NodePath<t.DecimalLiteral>;\n  assertDeclaration(opts?: object): asserts this is NodePath<t.Declaration>;\n  assertDeclareClass(opts?: object): asserts this is NodePath<t.DeclareClass>;\n  assertDeclareExportAllDeclaration(\n    opts?: object,\n  ): asserts this is NodePath<t.DeclareExportAllDeclaration>;\n  assertDeclareExportDeclaration(\n    opts?: object,\n  ): asserts this is NodePath<t.DeclareExportDeclaration>;\n  assertDeclareFunction(\n    opts?: object,\n  ): asserts this is NodePath<t.DeclareFunction>;\n  assertDeclareInterface(\n    opts?: object,\n  ): asserts this is NodePath<t.DeclareInterface>;\n  assertDeclareModule(opts?: object): asserts this is NodePath<t.DeclareModule>;\n  assertDeclareModuleExports(\n    opts?: object,\n  ): asserts this is NodePath<t.DeclareModuleExports>;\n  assertDeclareOpaqueType(\n    opts?: object,\n  ): asserts this is NodePath<t.DeclareOpaqueType>;\n  assertDeclareTypeAlias(\n    opts?: object,\n  ): asserts this is NodePath<t.DeclareTypeAlias>;\n  assertDeclareVariable(\n    opts?: object,\n  ): asserts this is NodePath<t.DeclareVariable>;\n  assertDeclaredPredicate(\n    opts?: object,\n  ): asserts this is NodePath<t.DeclaredPredicate>;\n  assertDecorator(opts?: object): asserts this is NodePath<t.Decorator>;\n  assertDirective(opts?: object): asserts this is NodePath<t.Directive>;\n  assertDirectiveLiteral(\n    opts?: object,\n  ): asserts this is NodePath<t.DirectiveLiteral>;\n  assertDoExpression(opts?: object): asserts this is NodePath<t.DoExpression>;\n  assertDoWhileStatement(\n    opts?: object,\n  ): asserts this is NodePath<t.DoWhileStatement>;\n  assertEmptyStatement(\n    opts?: object,\n  ): asserts this is NodePath<t.EmptyStatement>;\n  assertEmptyTypeAnnotation(\n    opts?: object,\n  ): asserts this is NodePath<t.EmptyTypeAnnotation>;\n  assertEnumBody(opts?: object): asserts this is NodePath<t.EnumBody>;\n  assertEnumBooleanBody(\n    opts?: object,\n  ): asserts this is NodePath<t.EnumBooleanBody>;\n  assertEnumBooleanMember(\n    opts?: object,\n  ): asserts this is NodePath<t.EnumBooleanMember>;\n  assertEnumDeclaration(\n    opts?: object,\n  ): asserts this is NodePath<t.EnumDeclaration>;\n  assertEnumDefaultedMember(\n    opts?: object,\n  ): asserts this is NodePath<t.EnumDefaultedMember>;\n  assertEnumMember(opts?: object): asserts this is NodePath<t.EnumMember>;\n  assertEnumNumberBody(\n    opts?: object,\n  ): asserts this is NodePath<t.EnumNumberBody>;\n  assertEnumNumberMember(\n    opts?: object,\n  ): asserts this is NodePath<t.EnumNumberMember>;\n  assertEnumStringBody(\n    opts?: object,\n  ): asserts this is NodePath<t.EnumStringBody>;\n  assertEnumStringMember(\n    opts?: object,\n  ): asserts this is NodePath<t.EnumStringMember>;\n  assertEnumSymbolBody(\n    opts?: object,\n  ): asserts this is NodePath<t.EnumSymbolBody>;\n  assertExistsTypeAnnotation(\n    opts?: object,\n  ): asserts this is NodePath<t.ExistsTypeAnnotation>;\n  assertExportAllDeclaration(\n    opts?: object,\n  ): asserts this is NodePath<t.ExportAllDeclaration>;\n  assertExportDeclaration(\n    opts?: object,\n  ): asserts this is NodePath<t.ExportDeclaration>;\n  assertExportDefaultDeclaration(\n    opts?: object,\n  ): asserts this is NodePath<t.ExportDefaultDeclaration>;\n  assertExportDefaultSpecifier(\n    opts?: object,\n  ): asserts this is NodePath<t.ExportDefaultSpecifier>;\n  assertExportNamedDeclaration(\n    opts?: object,\n  ): asserts this is NodePath<t.ExportNamedDeclaration>;\n  assertExportNamespaceSpecifier(\n    opts?: object,\n  ): asserts this is NodePath<t.ExportNamespaceSpecifier>;\n  assertExportSpecifier(\n    opts?: object,\n  ): asserts this is NodePath<t.ExportSpecifier>;\n  assertExpression(opts?: object): asserts this is NodePath<t.Expression>;\n  assertExpressionStatement(\n    opts?: object,\n  ): asserts this is NodePath<t.ExpressionStatement>;\n  assertExpressionWrapper(\n    opts?: object,\n  ): asserts this is NodePath<t.ExpressionWrapper>;\n  assertFile(opts?: object): asserts this is NodePath<t.File>;\n  assertFlow(opts?: object): asserts this is NodePath<t.Flow>;\n  assertFlowBaseAnnotation(\n    opts?: object,\n  ): asserts this is NodePath<t.FlowBaseAnnotation>;\n  assertFlowDeclaration(\n    opts?: object,\n  ): asserts this is NodePath<t.FlowDeclaration>;\n  assertFlowPredicate(opts?: object): asserts this is NodePath<t.FlowPredicate>;\n  assertFlowType(opts?: object): asserts this is NodePath<t.FlowType>;\n  assertFor(opts?: object): asserts this is NodePath<t.For>;\n  assertForInStatement(\n    opts?: object,\n  ): asserts this is NodePath<t.ForInStatement>;\n  assertForOfStatement(\n    opts?: object,\n  ): asserts this is NodePath<t.ForOfStatement>;\n  assertForStatement(opts?: object): asserts this is NodePath<t.ForStatement>;\n  assertForXStatement(opts?: object): asserts this is NodePath<t.ForXStatement>;\n  assertFunction(opts?: object): asserts this is NodePath<t.Function>;\n  assertFunctionDeclaration(\n    opts?: object,\n  ): asserts this is NodePath<t.FunctionDeclaration>;\n  assertFunctionExpression(\n    opts?: object,\n  ): asserts this is NodePath<t.FunctionExpression>;\n  assertFunctionParent(\n    opts?: object,\n  ): asserts this is NodePath<t.FunctionParent>;\n  assertFunctionTypeAnnotation(\n    opts?: object,\n  ): asserts this is NodePath<t.FunctionTypeAnnotation>;\n  assertFunctionTypeParam(\n    opts?: object,\n  ): asserts this is NodePath<t.FunctionTypeParam>;\n  assertGenericTypeAnnotation(\n    opts?: object,\n  ): asserts this is NodePath<t.GenericTypeAnnotation>;\n  assertIdentifier(opts?: object): asserts this is NodePath<t.Identifier>;\n  assertIfStatement(opts?: object): asserts this is NodePath<t.IfStatement>;\n  assertImmutable(opts?: object): asserts this is NodePath<t.Immutable>;\n  assertImport(opts?: object): asserts this is NodePath<t.Import>;\n  assertImportAttribute(\n    opts?: object,\n  ): asserts this is NodePath<t.ImportAttribute>;\n  assertImportDeclaration(\n    opts?: object,\n  ): asserts this is NodePath<t.ImportDeclaration>;\n  assertImportDefaultSpecifier(\n    opts?: object,\n  ): asserts this is NodePath<t.ImportDefaultSpecifier>;\n  assertImportNamespaceSpecifier(\n    opts?: object,\n  ): asserts this is NodePath<t.ImportNamespaceSpecifier>;\n  assertImportSpecifier(\n    opts?: object,\n  ): asserts this is NodePath<t.ImportSpecifier>;\n  assertIndexedAccessType(\n    opts?: object,\n  ): asserts this is NodePath<t.IndexedAccessType>;\n  assertInferredPredicate(\n    opts?: object,\n  ): asserts this is NodePath<t.InferredPredicate>;\n  assertInterfaceDeclaration(\n    opts?: object,\n  ): asserts this is NodePath<t.InterfaceDeclaration>;\n  assertInterfaceExtends(\n    opts?: object,\n  ): asserts this is NodePath<t.InterfaceExtends>;\n  assertInterfaceTypeAnnotation(\n    opts?: object,\n  ): asserts this is NodePath<t.InterfaceTypeAnnotation>;\n  assertInterpreterDirective(\n    opts?: object,\n  ): asserts this is NodePath<t.InterpreterDirective>;\n  assertIntersectionTypeAnnotation(\n    opts?: object,\n  ): asserts this is NodePath<t.IntersectionTypeAnnotation>;\n  assertJSX(opts?: object): asserts this is NodePath<t.JSX>;\n  assertJSXAttribute(opts?: object): asserts this is NodePath<t.JSXAttribute>;\n  assertJSXClosingElement(\n    opts?: object,\n  ): asserts this is NodePath<t.JSXClosingElement>;\n  assertJSXClosingFragment(\n    opts?: object,\n  ): asserts this is NodePath<t.JSXClosingFragment>;\n  assertJSXElement(opts?: object): asserts this is NodePath<t.JSXElement>;\n  assertJSXEmptyExpression(\n    opts?: object,\n  ): asserts this is NodePath<t.JSXEmptyExpression>;\n  assertJSXExpressionContainer(\n    opts?: object,\n  ): asserts this is NodePath<t.JSXExpressionContainer>;\n  assertJSXFragment(opts?: object): asserts this is NodePath<t.JSXFragment>;\n  assertJSXIdentifier(opts?: object): asserts this is NodePath<t.JSXIdentifier>;\n  assertJSXMemberExpression(\n    opts?: object,\n  ): asserts this is NodePath<t.JSXMemberExpression>;\n  assertJSXNamespacedName(\n    opts?: object,\n  ): asserts this is NodePath<t.JSXNamespacedName>;\n  assertJSXOpeningElement(\n    opts?: object,\n  ): asserts this is NodePath<t.JSXOpeningElement>;\n  assertJSXOpeningFragment(\n    opts?: object,\n  ): asserts this is NodePath<t.JSXOpeningFragment>;\n  assertJSXSpreadAttribute(\n    opts?: object,\n  ): asserts this is NodePath<t.JSXSpreadAttribute>;\n  assertJSXSpreadChild(\n    opts?: object,\n  ): asserts this is NodePath<t.JSXSpreadChild>;\n  assertJSXText(opts?: object): asserts this is NodePath<t.JSXText>;\n  assertLVal(opts?: object): asserts this is NodePath<t.LVal>;\n  assertLabeledStatement(\n    opts?: object,\n  ): asserts this is NodePath<t.LabeledStatement>;\n  assertLiteral(opts?: object): asserts this is NodePath<t.Literal>;\n  assertLogicalExpression(\n    opts?: object,\n  ): asserts this is NodePath<t.LogicalExpression>;\n  assertLoop(opts?: object): asserts this is NodePath<t.Loop>;\n  assertMemberExpression(\n    opts?: object,\n  ): asserts this is NodePath<t.MemberExpression>;\n  assertMetaProperty(opts?: object): asserts this is NodePath<t.MetaProperty>;\n  assertMethod(opts?: object): asserts this is NodePath<t.Method>;\n  assertMiscellaneous(opts?: object): asserts this is NodePath<t.Miscellaneous>;\n  assertMixedTypeAnnotation(\n    opts?: object,\n  ): asserts this is NodePath<t.MixedTypeAnnotation>;\n  assertModuleDeclaration(\n    opts?: object,\n  ): asserts this is NodePath<t.ModuleDeclaration>;\n  assertModuleExpression(\n    opts?: object,\n  ): asserts this is NodePath<t.ModuleExpression>;\n  assertModuleSpecifier(\n    opts?: object,\n  ): asserts this is NodePath<t.ModuleSpecifier>;\n  assertNewExpression(opts?: object): asserts this is NodePath<t.NewExpression>;\n  assertNoop(opts?: object): asserts this is NodePath<t.Noop>;\n  assertNullLiteral(opts?: object): asserts this is NodePath<t.NullLiteral>;\n  assertNullLiteralTypeAnnotation(\n    opts?: object,\n  ): asserts this is NodePath<t.NullLiteralTypeAnnotation>;\n  assertNullableTypeAnnotation(\n    opts?: object,\n  ): asserts this is NodePath<t.NullableTypeAnnotation>;\n  assertNumberLiteral(opts?: object): asserts this is NodePath<t.NumberLiteral>;\n  assertNumberLiteralTypeAnnotation(\n    opts?: object,\n  ): asserts this is NodePath<t.NumberLiteralTypeAnnotation>;\n  assertNumberTypeAnnotation(\n    opts?: object,\n  ): asserts this is NodePath<t.NumberTypeAnnotation>;\n  assertNumericLiteral(\n    opts?: object,\n  ): asserts this is NodePath<t.NumericLiteral>;\n  assertObjectExpression(\n    opts?: object,\n  ): asserts this is NodePath<t.ObjectExpression>;\n  assertObjectMember(opts?: object): asserts this is NodePath<t.ObjectMember>;\n  assertObjectMethod(opts?: object): asserts this is NodePath<t.ObjectMethod>;\n  assertObjectPattern(opts?: object): asserts this is NodePath<t.ObjectPattern>;\n  assertObjectProperty(\n    opts?: object,\n  ): asserts this is NodePath<t.ObjectProperty>;\n  assertObjectTypeAnnotation(\n    opts?: object,\n  ): asserts this is NodePath<t.ObjectTypeAnnotation>;\n  assertObjectTypeCallProperty(\n    opts?: object,\n  ): asserts this is NodePath<t.ObjectTypeCallProperty>;\n  assertObjectTypeIndexer(\n    opts?: object,\n  ): asserts this is NodePath<t.ObjectTypeIndexer>;\n  assertObjectTypeInternalSlot(\n    opts?: object,\n  ): asserts this is NodePath<t.ObjectTypeInternalSlot>;\n  assertObjectTypeProperty(\n    opts?: object,\n  ): asserts this is NodePath<t.ObjectTypeProperty>;\n  assertObjectTypeSpreadProperty(\n    opts?: object,\n  ): asserts this is NodePath<t.ObjectTypeSpreadProperty>;\n  assertOpaqueType(opts?: object): asserts this is NodePath<t.OpaqueType>;\n  assertOptionalCallExpression(\n    opts?: object,\n  ): asserts this is NodePath<t.OptionalCallExpression>;\n  assertOptionalIndexedAccessType(\n    opts?: object,\n  ): asserts this is NodePath<t.OptionalIndexedAccessType>;\n  assertOptionalMemberExpression(\n    opts?: object,\n  ): asserts this is NodePath<t.OptionalMemberExpression>;\n  assertParenthesizedExpression(\n    opts?: object,\n  ): asserts this is NodePath<t.ParenthesizedExpression>;\n  assertPattern(opts?: object): asserts this is NodePath<t.Pattern>;\n  assertPatternLike(opts?: object): asserts this is NodePath<t.PatternLike>;\n  assertPipelineBareFunction(\n    opts?: object,\n  ): asserts this is NodePath<t.PipelineBareFunction>;\n  assertPipelinePrimaryTopicReference(\n    opts?: object,\n  ): asserts this is NodePath<t.PipelinePrimaryTopicReference>;\n  assertPipelineTopicExpression(\n    opts?: object,\n  ): asserts this is NodePath<t.PipelineTopicExpression>;\n  assertPlaceholder(opts?: object): asserts this is NodePath<t.Placeholder>;\n  assertPrivate(opts?: object): asserts this is NodePath<t.Private>;\n  assertPrivateName(opts?: object): asserts this is NodePath<t.PrivateName>;\n  assertProgram(opts?: object): asserts this is NodePath<t.Program>;\n  assertProperty(opts?: object): asserts this is NodePath<t.Property>;\n  assertPureish(opts?: object): asserts this is NodePath<t.Pureish>;\n  assertQualifiedTypeIdentifier(\n    opts?: object,\n  ): asserts this is NodePath<t.QualifiedTypeIdentifier>;\n  assertRecordExpression(\n    opts?: object,\n  ): asserts this is NodePath<t.RecordExpression>;\n  assertRegExpLiteral(opts?: object): asserts this is NodePath<t.RegExpLiteral>;\n  assertRegexLiteral(opts?: object): asserts this is NodePath<t.RegexLiteral>;\n  assertRestElement(opts?: object): asserts this is NodePath<t.RestElement>;\n  assertRestProperty(opts?: object): asserts this is NodePath<t.RestProperty>;\n  assertReturnStatement(\n    opts?: object,\n  ): asserts this is NodePath<t.ReturnStatement>;\n  assertScopable(opts?: object): asserts this is NodePath<t.Scopable>;\n  assertSequenceExpression(\n    opts?: object,\n  ): asserts this is NodePath<t.SequenceExpression>;\n  assertSpreadElement(opts?: object): asserts this is NodePath<t.SpreadElement>;\n  assertSpreadProperty(\n    opts?: object,\n  ): asserts this is NodePath<t.SpreadProperty>;\n  assertStandardized(opts?: object): asserts this is NodePath<t.Standardized>;\n  assertStatement(opts?: object): asserts this is NodePath<t.Statement>;\n  assertStaticBlock(opts?: object): asserts this is NodePath<t.StaticBlock>;\n  assertStringLiteral(opts?: object): asserts this is NodePath<t.StringLiteral>;\n  assertStringLiteralTypeAnnotation(\n    opts?: object,\n  ): asserts this is NodePath<t.StringLiteralTypeAnnotation>;\n  assertStringTypeAnnotation(\n    opts?: object,\n  ): asserts this is NodePath<t.StringTypeAnnotation>;\n  assertSuper(opts?: object): asserts this is NodePath<t.Super>;\n  assertSwitchCase(opts?: object): asserts this is NodePath<t.SwitchCase>;\n  assertSwitchStatement(\n    opts?: object,\n  ): asserts this is NodePath<t.SwitchStatement>;\n  assertSymbolTypeAnnotation(\n    opts?: object,\n  ): asserts this is NodePath<t.SymbolTypeAnnotation>;\n  assertTSAnyKeyword(opts?: object): asserts this is NodePath<t.TSAnyKeyword>;\n  assertTSArrayType(opts?: object): asserts this is NodePath<t.TSArrayType>;\n  assertTSAsExpression(\n    opts?: object,\n  ): asserts this is NodePath<t.TSAsExpression>;\n  assertTSBaseType(opts?: object): asserts this is NodePath<t.TSBaseType>;\n  assertTSBigIntKeyword(\n    opts?: object,\n  ): asserts this is NodePath<t.TSBigIntKeyword>;\n  assertTSBooleanKeyword(\n    opts?: object,\n  ): asserts this is NodePath<t.TSBooleanKeyword>;\n  assertTSCallSignatureDeclaration(\n    opts?: object,\n  ): asserts this is NodePath<t.TSCallSignatureDeclaration>;\n  assertTSConditionalType(\n    opts?: object,\n  ): asserts this is NodePath<t.TSConditionalType>;\n  assertTSConstructSignatureDeclaration(\n    opts?: object,\n  ): asserts this is NodePath<t.TSConstructSignatureDeclaration>;\n  assertTSConstructorType(\n    opts?: object,\n  ): asserts this is NodePath<t.TSConstructorType>;\n  assertTSDeclareFunction(\n    opts?: object,\n  ): asserts this is NodePath<t.TSDeclareFunction>;\n  assertTSDeclareMethod(\n    opts?: object,\n  ): asserts this is NodePath<t.TSDeclareMethod>;\n  assertTSEntityName(opts?: object): asserts this is NodePath<t.TSEntityName>;\n  assertTSEnumDeclaration(\n    opts?: object,\n  ): asserts this is NodePath<t.TSEnumDeclaration>;\n  assertTSEnumMember(opts?: object): asserts this is NodePath<t.TSEnumMember>;\n  assertTSExportAssignment(\n    opts?: object,\n  ): asserts this is NodePath<t.TSExportAssignment>;\n  assertTSExpressionWithTypeArguments(\n    opts?: object,\n  ): asserts this is NodePath<t.TSExpressionWithTypeArguments>;\n  assertTSExternalModuleReference(\n    opts?: object,\n  ): asserts this is NodePath<t.TSExternalModuleReference>;\n  assertTSFunctionType(\n    opts?: object,\n  ): asserts this is NodePath<t.TSFunctionType>;\n  assertTSImportEqualsDeclaration(\n    opts?: object,\n  ): asserts this is NodePath<t.TSImportEqualsDeclaration>;\n  assertTSImportType(opts?: object): asserts this is NodePath<t.TSImportType>;\n  assertTSIndexSignature(\n    opts?: object,\n  ): asserts this is NodePath<t.TSIndexSignature>;\n  assertTSIndexedAccessType(\n    opts?: object,\n  ): asserts this is NodePath<t.TSIndexedAccessType>;\n  assertTSInferType(opts?: object): asserts this is NodePath<t.TSInferType>;\n  assertTSInstantiationExpression(\n    opts?: object,\n  ): asserts this is NodePath<t.TSInstantiationExpression>;\n  assertTSInterfaceBody(\n    opts?: object,\n  ): asserts this is NodePath<t.TSInterfaceBody>;\n  assertTSInterfaceDeclaration(\n    opts?: object,\n  ): asserts this is NodePath<t.TSInterfaceDeclaration>;\n  assertTSIntersectionType(\n    opts?: object,\n  ): asserts this is NodePath<t.TSIntersectionType>;\n  assertTSIntrinsicKeyword(\n    opts?: object,\n  ): asserts this is NodePath<t.TSIntrinsicKeyword>;\n  assertTSLiteralType(opts?: object): asserts this is NodePath<t.TSLiteralType>;\n  assertTSMappedType(opts?: object): asserts this is NodePath<t.TSMappedType>;\n  assertTSMethodSignature(\n    opts?: object,\n  ): asserts this is NodePath<t.TSMethodSignature>;\n  assertTSModuleBlock(opts?: object): asserts this is NodePath<t.TSModuleBlock>;\n  assertTSModuleDeclaration(\n    opts?: object,\n  ): asserts this is NodePath<t.TSModuleDeclaration>;\n  assertTSNamedTupleMember(\n    opts?: object,\n  ): asserts this is NodePath<t.TSNamedTupleMember>;\n  assertTSNamespaceExportDeclaration(\n    opts?: object,\n  ): asserts this is NodePath<t.TSNamespaceExportDeclaration>;\n  assertTSNeverKeyword(\n    opts?: object,\n  ): asserts this is NodePath<t.TSNeverKeyword>;\n  assertTSNonNullExpression(\n    opts?: object,\n  ): asserts this is NodePath<t.TSNonNullExpression>;\n  assertTSNullKeyword(opts?: object): asserts this is NodePath<t.TSNullKeyword>;\n  assertTSNumberKeyword(\n    opts?: object,\n  ): asserts this is NodePath<t.TSNumberKeyword>;\n  assertTSObjectKeyword(\n    opts?: object,\n  ): asserts this is NodePath<t.TSObjectKeyword>;\n  assertTSOptionalType(\n    opts?: object,\n  ): asserts this is NodePath<t.TSOptionalType>;\n  assertTSParameterProperty(\n    opts?: object,\n  ): asserts this is NodePath<t.TSParameterProperty>;\n  assertTSParenthesizedType(\n    opts?: object,\n  ): asserts this is NodePath<t.TSParenthesizedType>;\n  assertTSPropertySignature(\n    opts?: object,\n  ): asserts this is NodePath<t.TSPropertySignature>;\n  assertTSQualifiedName(\n    opts?: object,\n  ): asserts this is NodePath<t.TSQualifiedName>;\n  assertTSRestType(opts?: object): asserts this is NodePath<t.TSRestType>;\n  assertTSStringKeyword(\n    opts?: object,\n  ): asserts this is NodePath<t.TSStringKeyword>;\n  assertTSSymbolKeyword(\n    opts?: object,\n  ): asserts this is NodePath<t.TSSymbolKeyword>;\n  assertTSThisType(opts?: object): asserts this is NodePath<t.TSThisType>;\n  assertTSTupleType(opts?: object): asserts this is NodePath<t.TSTupleType>;\n  assertTSType(opts?: object): asserts this is NodePath<t.TSType>;\n  assertTSTypeAliasDeclaration(\n    opts?: object,\n  ): asserts this is NodePath<t.TSTypeAliasDeclaration>;\n  assertTSTypeAnnotation(\n    opts?: object,\n  ): asserts this is NodePath<t.TSTypeAnnotation>;\n  assertTSTypeAssertion(\n    opts?: object,\n  ): asserts this is NodePath<t.TSTypeAssertion>;\n  assertTSTypeElement(opts?: object): asserts this is NodePath<t.TSTypeElement>;\n  assertTSTypeLiteral(opts?: object): asserts this is NodePath<t.TSTypeLiteral>;\n  assertTSTypeOperator(\n    opts?: object,\n  ): asserts this is NodePath<t.TSTypeOperator>;\n  assertTSTypeParameter(\n    opts?: object,\n  ): asserts this is NodePath<t.TSTypeParameter>;\n  assertTSTypeParameterDeclaration(\n    opts?: object,\n  ): asserts this is NodePath<t.TSTypeParameterDeclaration>;\n  assertTSTypeParameterInstantiation(\n    opts?: object,\n  ): asserts this is NodePath<t.TSTypeParameterInstantiation>;\n  assertTSTypePredicate(\n    opts?: object,\n  ): asserts this is NodePath<t.TSTypePredicate>;\n  assertTSTypeQuery(opts?: object): asserts this is NodePath<t.TSTypeQuery>;\n  assertTSTypeReference(\n    opts?: object,\n  ): asserts this is NodePath<t.TSTypeReference>;\n  assertTSUndefinedKeyword(\n    opts?: object,\n  ): asserts this is NodePath<t.TSUndefinedKeyword>;\n  assertTSUnionType(opts?: object): asserts this is NodePath<t.TSUnionType>;\n  assertTSUnknownKeyword(\n    opts?: object,\n  ): asserts this is NodePath<t.TSUnknownKeyword>;\n  assertTSVoidKeyword(opts?: object): asserts this is NodePath<t.TSVoidKeyword>;\n  assertTaggedTemplateExpression(\n    opts?: object,\n  ): asserts this is NodePath<t.TaggedTemplateExpression>;\n  assertTemplateElement(\n    opts?: object,\n  ): asserts this is NodePath<t.TemplateElement>;\n  assertTemplateLiteral(\n    opts?: object,\n  ): asserts this is NodePath<t.TemplateLiteral>;\n  assertTerminatorless(\n    opts?: object,\n  ): asserts this is NodePath<t.Terminatorless>;\n  assertThisExpression(\n    opts?: object,\n  ): asserts this is NodePath<t.ThisExpression>;\n  assertThisTypeAnnotation(\n    opts?: object,\n  ): asserts this is NodePath<t.ThisTypeAnnotation>;\n  assertThrowStatement(\n    opts?: object,\n  ): asserts this is NodePath<t.ThrowStatement>;\n  assertTopicReference(\n    opts?: object,\n  ): asserts this is NodePath<t.TopicReference>;\n  assertTryStatement(opts?: object): asserts this is NodePath<t.TryStatement>;\n  assertTupleExpression(\n    opts?: object,\n  ): asserts this is NodePath<t.TupleExpression>;\n  assertTupleTypeAnnotation(\n    opts?: object,\n  ): asserts this is NodePath<t.TupleTypeAnnotation>;\n  assertTypeAlias(opts?: object): asserts this is NodePath<t.TypeAlias>;\n  assertTypeAnnotation(\n    opts?: object,\n  ): asserts this is NodePath<t.TypeAnnotation>;\n  assertTypeCastExpression(\n    opts?: object,\n  ): asserts this is NodePath<t.TypeCastExpression>;\n  assertTypeParameter(opts?: object): asserts this is NodePath<t.TypeParameter>;\n  assertTypeParameterDeclaration(\n    opts?: object,\n  ): asserts this is NodePath<t.TypeParameterDeclaration>;\n  assertTypeParameterInstantiation(\n    opts?: object,\n  ): asserts this is NodePath<t.TypeParameterInstantiation>;\n  assertTypeScript(opts?: object): asserts this is NodePath<t.TypeScript>;\n  assertTypeofTypeAnnotation(\n    opts?: object,\n  ): asserts this is NodePath<t.TypeofTypeAnnotation>;\n  assertUnaryExpression(\n    opts?: object,\n  ): asserts this is NodePath<t.UnaryExpression>;\n  assertUnaryLike(opts?: object): asserts this is NodePath<t.UnaryLike>;\n  assertUnionTypeAnnotation(\n    opts?: object,\n  ): asserts this is NodePath<t.UnionTypeAnnotation>;\n  assertUpdateExpression(\n    opts?: object,\n  ): asserts this is NodePath<t.UpdateExpression>;\n  assertUserWhitespacable(\n    opts?: object,\n  ): asserts this is NodePath<t.UserWhitespacable>;\n  assertV8IntrinsicIdentifier(\n    opts?: object,\n  ): asserts this is NodePath<t.V8IntrinsicIdentifier>;\n  assertVariableDeclaration(\n    opts?: object,\n  ): asserts this is NodePath<t.VariableDeclaration>;\n  assertVariableDeclarator(\n    opts?: object,\n  ): asserts this is NodePath<t.VariableDeclarator>;\n  assertVariance(opts?: object): asserts this is NodePath<t.Variance>;\n  assertVoidTypeAnnotation(\n    opts?: object,\n  ): asserts this is NodePath<t.VoidTypeAnnotation>;\n  assertWhile(opts?: object): asserts this is NodePath<t.While>;\n  assertWhileStatement(\n    opts?: object,\n  ): asserts this is NodePath<t.WhileStatement>;\n  assertWithStatement(opts?: object): asserts this is NodePath<t.WithStatement>;\n  assertYieldExpression(\n    opts?: object,\n  ): asserts this is NodePath<t.YieldExpression>;\n}\n"],"mappings":""}