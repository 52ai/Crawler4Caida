{"version":3,"file":"polygon.js","names":["PI_4","Math","PI","DEGREES_TO_RADIANS_HALF","validate","polygon","positions","Array","isArray","ArrayBuffer","isView","Error","isSimple","length","Number","isFinite","isNestedRingClosed","simplePolygon","p0","p1","isFlatRingClosed","size","startIndex","endIndex","i","copyNestedRing","target","targetStartIndex","targetIndex","len","j","copyFlatRing","srcStartIndex","srcEndIndex","srcLength","getNestedVertexCount","getFlatVertexCount","getVertexCount","positionSize","normalization","holeIndices","vertexCount","normalize","Float64Array","srcPositions","srcHoleIndices","push","pop","getSurfaceIndices","normalizedPolygon","preproject","map","positionIndex","n","slice","y","log","tan","earcut"],"sources":["../../../../src/gpgpu/point-in-polygon/polygon.js"],"sourcesContent":["// => COPIED FROM  deck.gl\n\n// Copyright (c) 2015 - 2020 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* eslint-disable max-params */\nimport earcut from 'earcut';\n\n// For Web Mercator projection\nconst PI_4 = Math.PI / 4;\nconst DEGREES_TO_RADIANS_HALF = Math.PI / 360;\n\n// 4 data formats are supported:\n// Simple Polygon: an array of points\n// Complex Polygon: an array of array of points (array of rings)\n//   with the first ring representing the outer hull and other rings representing holes\n// Simple Flat: an array of numbers (flattened \"simple polygon\")\n// Complex Flat: {position: array<number>, holeIndices: array<number>}\n//   (flattened \"complex polygon\")\n\n/**\n * Ensure a polygon is valid format\n * @param {Array|Object} polygon\n */\nfunction validate(polygon) {\n  polygon = (polygon && polygon.positions) || polygon;\n  if (!Array.isArray(polygon) && !ArrayBuffer.isView(polygon)) {\n    throw new Error('invalid polygon');\n  }\n}\n\n/**\n * Check if a polygon is simple or complex\n * @param {Array} polygon - either a complex or simple polygon\n * @return {Boolean} - true if the polygon is a simple polygon (i.e. not an array of polygons)\n */\nfunction isSimple(polygon) {\n  return polygon.length >= 1 && polygon[0].length >= 2 && Number.isFinite(polygon[0][0]);\n}\n\n/**\n * Check if a simple polygon is a closed ring\n * @param {Array} simplePolygon - array of points\n * @return {Boolean} - true if the simple polygon is a closed ring\n */\nfunction isNestedRingClosed(simplePolygon) {\n  // check if first and last vertex are the same\n  const p0 = simplePolygon[0];\n  const p1 = simplePolygon[simplePolygon.length - 1];\n\n  return p0[0] === p1[0] && p0[1] === p1[1] && p0[2] === p1[2];\n}\n\n/**\n * Check if a simple flat array is a closed ring\n * @param {Array} positions - array of numbers\n * @param {Number} size - size of a position, 2 (xy) or 3 (xyz)\n * @param {Number} startIndex - start index of the path in the positions array\n * @param {Number} endIndex - end index of the path in the positions array\n * @return {Boolean} - true if the simple flat array is a closed ring\n */\nfunction isFlatRingClosed(positions, size, startIndex, endIndex) {\n  for (let i = 0; i < size; i++) {\n    if (positions[startIndex + i] !== positions[endIndex - size + i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Copy a simple polygon coordinates into a flat array, closes the ring if needed.\n * @param {Float64Array} target - destination\n * @param {Number} targetStartIndex - index in the destination to start copying into\n * @param {Array} simplePolygon - array of points\n * @param {Number} size - size of a position, 2 (xy) or 3 (xyz)\n * @returns {Number} - the index of the write head in the destination\n */\nfunction copyNestedRing(target, targetStartIndex, simplePolygon, size) {\n  let targetIndex = targetStartIndex;\n  const len = simplePolygon.length;\n  for (let i = 0; i < len; i++) {\n    for (let j = 0; j < size; j++) {\n      target[targetIndex++] = simplePolygon[i][j] || 0;\n    }\n  }\n\n  if (!isNestedRingClosed(simplePolygon)) {\n    for (let j = 0; j < size; j++) {\n      target[targetIndex++] = simplePolygon[0][j] || 0;\n    }\n  }\n  return targetIndex;\n}\n\n/**\n * Copy a simple flat array into another flat array, closes the ring if needed.\n * @param {Float64Array} target - destination\n * @param {Number} targetStartIndex - index in the destination to start copying into\n * @param {Array} positions - array of numbers\n * @param {Number} size - size of a position, 2 (xy) or 3 (xyz)\n * @param {Number} [srcStartIndex] - start index of the path in the positions array\n * @param {Number} [srcEndIndex] - end index of the path in the positions array\n * @returns {Number} - the index of the write head in the destination\n */\nfunction copyFlatRing(target, targetStartIndex, positions, size, srcStartIndex = 0, srcEndIndex) {\n  srcEndIndex = srcEndIndex || positions.length;\n  const srcLength = srcEndIndex - srcStartIndex;\n  if (srcLength <= 0) {\n    return targetStartIndex;\n  }\n  let targetIndex = targetStartIndex;\n\n  for (let i = 0; i < srcLength; i++) {\n    target[targetIndex++] = positions[srcStartIndex + i];\n  }\n\n  if (!isFlatRingClosed(positions, size, srcStartIndex, srcEndIndex)) {\n    for (let i = 0; i < size; i++) {\n      target[targetIndex++] = positions[srcStartIndex + i];\n    }\n  }\n  return targetIndex;\n}\n\n/**\n * Counts the number of vertices in a simple polygon, closes the polygon if needed.\n * @param {Array} simplePolygon - array of points\n * @returns {Number} vertex count\n */\nfunction getNestedVertexCount(simplePolygon) {\n  return (isNestedRingClosed(simplePolygon) ? 0 : 1) + simplePolygon.length;\n}\n\n/**\n * Counts the number of vertices in a simple flat array, closes the polygon if needed.\n * @param {Array} positions - array of numbers\n * @param {Number} size - size of a position, 2 (xy) or 3 (xyz)\n * @param {Number} [startIndex] - start index of the path in the positions array\n * @param {Number} [endIndex] - end index of the path in the positions array\n * @returns {Number} vertex count\n */\nfunction getFlatVertexCount(positions, size, startIndex = 0, endIndex) {\n  endIndex = endIndex || positions.length;\n  if (startIndex >= endIndex) {\n    return 0;\n  }\n  return (\n    (isFlatRingClosed(positions, size, startIndex, endIndex) ? 0 : 1) +\n    (endIndex - startIndex) / size\n  );\n}\n\n/**\n * Counts the number of vertices in any polygon representation.\n * @param {Array|Object} polygon\n * @param {Number} positionSize - size of a position, 2 (xy) or 3 (xyz)\n * @returns {Number} vertex count\n */\nexport function getVertexCount(polygon, positionSize, normalization = true) {\n  if (!normalization) {\n    polygon = polygon.positions || polygon;\n    return polygon.length / positionSize;\n  }\n\n  validate(polygon);\n\n  if (polygon.positions) {\n    // complex flat\n    const {positions, holeIndices} = polygon;\n\n    if (holeIndices) {\n      let vertexCount = 0;\n      // split the positions array into `holeIndices.length + 1` rings\n      // holeIndices[-1] falls back to 0\n      // holeIndices[holeIndices.length] falls back to positions.length\n      for (let i = 0; i <= holeIndices.length; i++) {\n        vertexCount += getFlatVertexCount(\n          polygon.positions,\n          positionSize,\n          holeIndices[i - 1],\n          holeIndices[i]\n        );\n      }\n      return vertexCount;\n    }\n    polygon = positions;\n  }\n  if (Number.isFinite(polygon[0])) {\n    // simple flat\n    return getFlatVertexCount(polygon, positionSize);\n  }\n  if (!isSimple(polygon)) {\n    // complex polygon\n    let vertexCount = 0;\n    for (const simplePolygon of polygon) {\n      vertexCount += getNestedVertexCount(simplePolygon);\n    }\n    return vertexCount;\n  }\n  // simple polygon\n  return getNestedVertexCount(polygon);\n}\n\n/**\n * Normalize any polygon representation into the \"complex flat\" format\n * @param {Array|Object} polygon\n * @param {Number} positionSize - size of a position, 2 (xy) or 3 (xyz)\n * @param {Number} [vertexCount] - pre-computed vertex count in the polygon.\n *   If provided, will skip counting.\n * @return {Object} - {positions: <Float64Array>, holeIndices: <Array|null>}\n */\n/* eslint-disable max-statements */\nexport function normalize(polygon, positionSize, vertexCount) {\n  validate(polygon);\n\n  vertexCount = vertexCount || getVertexCount(polygon, positionSize);\n\n  const positions = new Float64Array(vertexCount * positionSize);\n  const holeIndices = [];\n\n  if (polygon.positions) {\n    // complex flat\n    const {positions: srcPositions, holeIndices: srcHoleIndices} = polygon;\n\n    if (srcHoleIndices) {\n      let targetIndex = 0;\n      // split the positions array into `holeIndices.length + 1` rings\n      // holeIndices[-1] falls back to 0\n      // holeIndices[holeIndices.length] falls back to positions.length\n      for (let i = 0; i <= srcHoleIndices.length; i++) {\n        targetIndex = copyFlatRing(\n          positions,\n          targetIndex,\n          srcPositions,\n          positionSize,\n          srcHoleIndices[i - 1],\n          srcHoleIndices[i]\n        );\n        holeIndices.push(targetIndex);\n      }\n      // The last one is not a starting index of a hole, remove\n      holeIndices.pop();\n\n      return {positions, holeIndices};\n    }\n    polygon = srcPositions;\n  }\n  if (Number.isFinite(polygon[0])) {\n    // simple flat\n    copyFlatRing(positions, 0, polygon, positionSize);\n    return positions;\n  }\n  if (!isSimple(polygon)) {\n    // complex polygon\n    let targetIndex = 0;\n\n    for (const simplePolygon of polygon) {\n      targetIndex = copyNestedRing(positions, targetIndex, simplePolygon, positionSize);\n      holeIndices.push(targetIndex);\n    }\n    // The last one is not a starting index of a hole, remove\n    holeIndices.pop();\n    // last index points to the end of the array, remove it\n    return {positions, holeIndices};\n  }\n  // simple polygon\n  copyNestedRing(positions, 0, polygon, positionSize);\n  return positions;\n}\n/* eslint-enable max-statements */\n\n/*\n * Get vertex indices for drawing polygon mesh\n * @param {Object} normalizedPolygon - {positions, holeIndices}\n * @param {Number} positionSize - size of a position, 2 (xy) or 3 (xyz)\n * @returns {Array} array of indices\n */\nexport function getSurfaceIndices(normalizedPolygon, positionSize, preproject) {\n  let holeIndices = null;\n\n  if (normalizedPolygon.holeIndices) {\n    holeIndices = normalizedPolygon.holeIndices.map(positionIndex => positionIndex / positionSize);\n  }\n  let positions = normalizedPolygon.positions || normalizedPolygon;\n\n  // TODO - handle other coordinate systems and projection modes\n  if (preproject) {\n    // When tesselating lnglat coordinates, project them to the Web Mercator plane for accuracy\n    const n = positions.length;\n    // Clone the array\n    positions = positions.slice();\n    for (let i = 0; i < n; i += positionSize) {\n      // project points to a scaled version of the web-mercator plane\n      // It doesn't matter if x and y are scaled/translated, but the relationship must be linear\n      const y = positions[i + 1];\n      positions[i + 1] = Math.log(Math.tan(PI_4 + y * DEGREES_TO_RADIANS_HALF));\n    }\n  }\n\n  // Let earcut triangulate the polygon\n  return earcut(positions, holeIndices, positionSize);\n}\n"],"mappings":"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"}