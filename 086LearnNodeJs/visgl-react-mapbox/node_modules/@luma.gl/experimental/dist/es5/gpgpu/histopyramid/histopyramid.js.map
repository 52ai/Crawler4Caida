{"version":3,"file":"histopyramid.js","names":["nextPowerOfTwo","x","p","Math","ceil","log2","pow","channelToIndexMap","r","g","y","b","z","a","w","buildHistopyramidBaseLevel","gl","opts","texture","channel","_readData","width","height","size","baseTexture","cloneTextureFrom","transform","Transform","_sourceTextures","inTexture","_targetTexture","_targetTextureVarying","vs","HISTOPYRAMID_BUILD_VS_UTILS","HISTOPYRAMID_BASE_BUILD_VS","elementCount","run","uniforms","padingPixelValue","textureData","getData","packed","flatPyramidSize","flatPyramidTexture","parameters","framebuffer","getFramebuffer","copyToTexture","targetX","getHistoPyramid","levelCount","pyramidTextures","topLevelData","i","push","HISTOPYRAMID_BUILD_VS","flatOffset","outSize","update","histoPyramidGenerateIndices","keyIndexCount","keyIndex","Buffer","Float32Array","map","_","index","locationAndIndex","sourceBuffers","feedbackBuffers","varyings","HISTOPYRAMID_TRAVERSAL_UTILS","HISTOPYRAMID_TRAVERSAL_VS","numLevels","locationAndIndexBuffer"],"sources":["../../../../src/gpgpu/histopyramid/histopyramid.js"],"sourcesContent":["import {Buffer, copyToTexture, cloneTextureFrom} from '@luma.gl/webgl';\nimport {Transform} from '@luma.gl/engine';\nimport GL from '@luma.gl/constants';\nimport {\n  HISTOPYRAMID_BUILD_VS_UTILS,\n  HISTOPYRAMID_TRAVERSAL_UTILS,\n  HISTOPYRAMID_BASE_BUILD_VS,\n  HISTOPYRAMID_BUILD_VS,\n  HISTOPYRAMID_TRAVERSAL_VS\n} from './histopyramid-shaders';\n\n// Following methods implement Histopyramid operations as described in 'High‐speed marching cubes using histopyramids' by Dyken C, Ziegler G, Theobalt C and Seidel H\n// Link to the paper: http://olmozavala.com/Custom/OpenGL/Tutorials/OpenGL4_Examples/MarchingCubes_Dyken/Dyken_et_al-2008-Computer_Graphics_Forum.pdf\n\n// TODO: enable to assert on texture dimension\n// function isPowerOfTwo(x) {\n//     return ((x !== 0) && !(x & (x - 1)));\n// }\n\nfunction nextPowerOfTwo(x) {\n  const p = Math.ceil(Math.log2(x));\n  return Math.pow(2, p);\n}\n\nconst channelToIndexMap = {\n  r: 0,\n  x: 0,\n  g: 1,\n  y: 1,\n  b: 2,\n  z: 2,\n  a: 3,\n  w: 3\n};\n\n// returns a base level texture that packs given weight into a texture\n// each 2X2 region is mapped into RGBA channels of single pixel\n// returned texture is a squred power of two sized texture\n// R -> lower left, G -> lower right B -> upper left A -> upper right\nexport function buildHistopyramidBaseLevel(gl, opts) {\n  const {texture, channel = 'r', _readData = false} = opts;\n  let {width, height} = texture;\n  width = nextPowerOfTwo(width);\n  height = nextPowerOfTwo(height);\n  // Use sqaured next power of two size, then use half of it since we are packing 2X2 group into a single RGBA pixel\n  const size = (width > height ? width : height) / 2;\n  const baseTexture = cloneTextureFrom(texture, {\n    width: size,\n    height: size\n  });\n\n  // build individual pyramid textures\n  const transform = new Transform(gl, {\n    _sourceTextures: {\n      inTexture: texture\n    },\n    _targetTexture: baseTexture,\n    _targetTextureVarying: 'outTexture',\n    vs: `${HISTOPYRAMID_BUILD_VS_UTILS}${HISTOPYRAMID_BASE_BUILD_VS}`,\n    elementCount: baseTexture.width * baseTexture.height\n  });\n  transform.run({\n    uniforms: {\n      channel: channelToIndexMap[channel] || 0,\n      padingPixelValue: [0, 0, 0, 0]\n    }\n  });\n  // _readData is debug only option\n  let textureData;\n  // when base textuer size is 1X1, there are no more level to be generated\n  // so read the texture data to be provided as base level data.\n  if (_readData || size === 1) {\n    textureData = transform.getData({packed: true});\n  }\n  const flatPyramidSize = size * 2;\n  const flatPyramidTexture = cloneTextureFrom(texture, {\n    width: flatPyramidSize,\n    height: flatPyramidSize,\n    parameters: {\n      [GL.TEXTURE_MAG_FILTER]: GL.NEAREST,\n      [GL.TEXTURE_MIN_FILTER]: GL.NEAREST\n    }\n  });\n  const framebuffer = transform.getFramebuffer();\n  copyToTexture(framebuffer, flatPyramidTexture, {\n    targetX: 0,\n    width: size,\n    height: size\n  });\n\n  return {textureData, baseTexture, flatPyramidTexture};\n}\n\n// builds histopyramid for a given texture and returns individual levels and flatended pyramid texture\n// Returns object\n// * pyramidTextures: Array with all individual mip levels\n// * flatPyramidTexture: Texture with all mip levels laid out horizontally\nexport function getHistoPyramid(gl, opts) {\n  const {textureData, baseTexture, flatPyramidTexture} = buildHistopyramidBaseLevel(gl, opts);\n  const {width} = baseTexture;\n  // assert(width === height && isPowerOfTwo(width));\n  const levelCount = Math.log2(width) + 1;\n  const pyramidTextures = [baseTexture];\n\n  let topLevelData = textureData;\n  if (levelCount > 1) {\n    // build empty textures for rest of the pyramid\n    for (let i = 1; i < levelCount; i++) {\n      const size = width / Math.pow(2, i);\n      pyramidTextures.push(\n        cloneTextureFrom(baseTexture, {\n          width: size,\n          height: size\n        })\n      );\n    }\n\n    // build individual pyramid textures\n    const transform = new Transform(gl, {\n      _sourceTextures: {\n        inTexture: pyramidTextures[0]\n      },\n      _targetTexture: pyramidTextures[1],\n      _targetTextureVarying: 'outTexture',\n      vs: `${HISTOPYRAMID_BUILD_VS_UTILS}${HISTOPYRAMID_BUILD_VS}`,\n      elementCount: pyramidTextures[1].width * pyramidTextures[1].height\n    });\n\n    let flatOffset = width;\n    for (let i = 1; i < levelCount; i++) {\n      const outSize = [pyramidTextures[i].width, pyramidTextures[i].height];\n      transform.update({\n        _sourceTextures: {inTexture: pyramidTextures[i - 1]},\n        _targetTexture: pyramidTextures[i],\n        elementCount: pyramidTextures[i].width * pyramidTextures[i].height\n      });\n      transform.run();\n\n      // copy the result to the flaten pyramid texture\n      const framebuffer = transform.getFramebuffer();\n      copyToTexture(framebuffer, flatPyramidTexture, {\n        targetX: flatOffset,\n        width: outSize[0],\n        height: outSize[1]\n      });\n\n      flatOffset += outSize[0];\n    }\n    topLevelData = transform.getData();\n  }\n\n  return {pyramidTextures, flatPyramidTexture, levelCount, topLevelData};\n}\n\n// builds and traverses a histopyramid for a given texture and returns pixel locations and local-key index for each non zero weight in input texture\n// Returns object\n// *locationAndIndexBuffer : Buffer contains one vec4 for each non zero weight. XY represent loation, Z represents local-key index and W represent key-index\nexport function histoPyramidGenerateIndices(gl, opts) {\n  const {flatPyramidTexture, levelCount, topLevelData} = getHistoPyramid(gl, opts);\n\n  const keyIndexCount = topLevelData[0] + topLevelData[1] + topLevelData[2] + topLevelData[3];\n  const keyIndex = new Buffer(gl, new Float32Array(keyIndexCount).map((_, index) => index));\n  const locationAndIndex = new Buffer(gl, keyIndexCount * 4 * 4); // 4 floats for each key index\n\n  const transform = new Transform(gl, {\n    sourceBuffers: {\n      keyIndex\n    },\n    _sourceTextures: {\n      flatPyramidTexture\n    },\n    feedbackBuffers: {\n      locationAndIndex\n    },\n    varyings: ['locationAndIndex'],\n    vs: `${HISTOPYRAMID_TRAVERSAL_UTILS}${HISTOPYRAMID_TRAVERSAL_VS}`,\n    elementCount: keyIndexCount\n  });\n  transform.run({\n    uniforms: {\n      numLevels: levelCount\n    }\n  });\n\n  return {locationAndIndexBuffer: locationAndIndex};\n}\n"],"mappings":"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"}