{"version":3,"file":"gpu-point-in-polygon.js","names":["TEXTURE_SIZE","GPUPointInPolygon","gl","opts","assert","isWebGL2","textureSize","_setupResources","update","polygons","length","triangulatePolygons","vertices","indices","vertexCount","ids","_updateResources","positionBuffer","filterValueIndexBuffer","count","filterTransform","sourceBuffers","a_position","feedbackBuffers","filterValueIndex","elementCount","polygonTexture","boundingBox","run","moduleSettings","texture","Texture2D","format","type","dataFormat","border","mipmaps","parameters","Buffer","accessor","size","idBuffer","indexBuffer","target","polyTextureTransform","Transform","id","_targetTexture","_targetTextureVarying","vs","POLY_TEX_VS","drawMode","isIndexed","a_polygonID","FILTER_VS","modules","textureFilterModule","varyings","getBoundingBox","xMin","yMin","xMax","yMax","width","height","whRatio","texWidth","texHeight","resize","setData","Float32Array","Uint16Array","uniforms","boundingBoxOriginSize","positions","Infinity","y","x","i","SIZE","polygonId","normalized","Polygon","normalize","curVertices","curCount","curIds","Array","fill","push","curIndices","getSurfaceIndices","indexCount","j","getVertexCount"],"sources":["../../../../src/gpgpu/point-in-polygon/gpu-point-in-polygon.js"],"sourcesContent":["// @ts-nocheck TODO remove\n\nimport GL from '@luma.gl/constants';\nimport {Buffer, Texture2D, assert} from '@luma.gl/webgl';\nimport {isWebGL2} from '@luma.gl/gltools';\nimport {Transform} from '@luma.gl/engine';\nimport {default as textureFilterModule} from './texture-filter';\nimport {POLY_TEX_VS, FILTER_VS} from './shaders';\nimport * as Polygon from './polygon';\nconst TEXTURE_SIZE = 512;\n\nexport default class GPUPointInPolygon {\n  constructor(gl, opts = {}) {\n    this.gl = gl;\n    assert(isWebGL2(gl)); // supports WebGL2 only\n    this.textureSize = TEXTURE_SIZE;\n    this._setupResources();\n    this.update(opts);\n  }\n\n  update({polygons, textureSize} = {}) {\n    if (textureSize) {\n      this.textureSize = textureSize;\n    }\n    if (!polygons || polygons.length === 0) {\n      return;\n    }\n\n    const {vertices, indices, vertexCount, ids} = triangulatePolygons(polygons);\n    this._updateResources(vertices, indices, ids, vertexCount);\n  }\n\n  filter({positionBuffer, filterValueIndexBuffer, count}) {\n    this.filterTransform.update({\n      sourceBuffers: {\n        a_position: positionBuffer\n      },\n      feedbackBuffers: {\n        filterValueIndex: filterValueIndexBuffer\n      },\n      elementCount: count\n    });\n    const {polygonTexture, boundingBox} = this;\n\n    this.filterTransform.run({\n      moduleSettings: {boundingBox, texture: polygonTexture}\n    });\n  }\n\n  // PRIVATE\n\n  _setupResources() {\n    const {gl} = this;\n\n    // texture to render polygons to\n    this.polygonTexture = new Texture2D(gl, {\n      format: GL.RGB,\n      type: GL.UNSIGNED_BYTE,\n      dataFormat: GL.RGB,\n      border: 0,\n      mipmaps: false,\n      parameters: {\n        [GL.TEXTURE_MAG_FILTER]: GL.NEAREST,\n        [GL.TEXTURE_MIN_FILTER]: GL.NEAREST,\n        [GL.TEXTURE_WRAP_S]: gl.CLAMP_TO_EDGE,\n        [GL.TEXTURE_WRAP_T]: gl.CLAMP_TO_EDGE\n      }\n    });\n    this.positionBuffer = new Buffer(gl, {accessor: {type: GL.FLOAT, size: 2}});\n    this.idBuffer = new Buffer(gl, {accessor: {type: GL.FLOAT, size: 1}});\n    this.indexBuffer = new Buffer(gl, {\n      target: GL.ELEMENT_ARRAY_BUFFER,\n      accessor: {type: GL.UNSIGNED_SHORT}\n    });\n\n    // transform to generate polygon texture\n    this.polyTextureTransform = new Transform(gl, {\n      id: `polygon-texture-creation-transform`,\n      elementCount: 0,\n      _targetTexture: this.polygonTexture,\n      _targetTextureVarying: 'v_polygonColor',\n      vs: POLY_TEX_VS,\n      drawMode: GL.TRIANGLES,\n      isIndexed: true,\n      sourceBuffers: {\n        a_position: this.positionBuffer,\n        a_polygonID: this.idBuffer,\n        indices: this.indexBuffer\n      }\n    });\n\n    // transform to perform filtering\n    this.filterTransform = new Transform(gl, {\n      id: 'filter transform',\n      vs: FILTER_VS,\n      modules: [textureFilterModule],\n      varyings: ['filterValueIndex']\n    });\n  }\n\n  _updateResources(vertices, indices, ids, vertexCount) {\n    const boundingBox = getBoundingBox(vertices, vertexCount);\n    const [xMin, yMin, xMax, yMax] = boundingBox;\n    const width = xMax - xMin;\n    const height = yMax - yMin;\n    const whRatio = width / height;\n    const {textureSize} = this;\n\n    // calculate max texture size with same aspect ratio\n    let texWidth = textureSize;\n    let texHeight = textureSize;\n    if (whRatio > 1) {\n      texHeight = texWidth / whRatio;\n    } else {\n      texWidth = texHeight * whRatio;\n    }\n\n    this.boundingBox = boundingBox;\n    this.polygonTexture.resize({width: texWidth, height: texHeight, mipmaps: false});\n    this.positionBuffer.setData(new Float32Array(vertices));\n    this.idBuffer.setData(new Float32Array(ids));\n    this.indexBuffer.setData(new Uint16Array(indices));\n    this.polyTextureTransform.update({\n      elementCount: indices.length,\n      _targetTexture: this.polygonTexture\n    });\n\n    this.polyTextureTransform.run({\n      uniforms: {\n        boundingBoxOriginSize: [xMin, yMin, width, height]\n      }\n    });\n  }\n}\n\n// Helper methods\n\nfunction getBoundingBox(positions, vertexCount) {\n  let yMin = Infinity;\n  let yMax = -Infinity;\n  let xMin = Infinity;\n  let xMax = -Infinity;\n  let y;\n  let x;\n\n  for (let i = 0; i < vertexCount; i++) {\n    x = positions[i * 2];\n    y = positions[i * 2 + 1];\n    yMin = y < yMin ? y : yMin;\n    yMax = y > yMax ? y : yMax;\n    xMin = x < xMin ? x : xMin;\n    xMax = x > xMax ? x : xMax;\n  }\n\n  return [xMin, yMin, xMax, yMax];\n}\n\nfunction triangulatePolygons(polygons) {\n  const SIZE = 2;\n  const vertices = [];\n  const indices = [];\n  const ids = [];\n  let count = 0;\n  let polygonId = 0;\n  for (let i = 0; i < polygons.length; i++) {\n    const normalized = Polygon.normalize(polygons[i], SIZE);\n    const curVertices = normalized.positions || normalized;\n    const curCount = curVertices.length / SIZE;\n    const curIds = new Array(curCount).fill(polygonId);\n    vertices.push(...curVertices);\n    ids.push(...curIds);\n    const curIndices = Polygon.getSurfaceIndices(normalized, SIZE);\n    const indexCount = curIndices.length;\n    for (let j = 0; j < indexCount; j++) {\n      curIndices[j] += count;\n    }\n    count += curCount;\n    indices.push(...curIndices);\n    polygonId++;\n  }\n\n  // UInt16 (UNSIGNED_SHORT) buffer is used for indices\n  assert(count < 65536); // 0xFFFF\n\n  const vertexCount = Polygon.getVertexCount(vertices, SIZE);\n\n  return {vertices, indices, ids, vertexCount};\n}\n"],"mappings":"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"}