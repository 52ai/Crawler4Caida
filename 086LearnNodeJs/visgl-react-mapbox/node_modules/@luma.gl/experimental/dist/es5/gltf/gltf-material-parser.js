"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _webgl = require("@luma.gl/webgl");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var GLTFMaterialParser = function () {
  function GLTFMaterialParser(gl, _ref) {
    var attributes = _ref.attributes,
        material = _ref.material,
        pbrDebug = _ref.pbrDebug,
        imageBasedLightingEnvironment = _ref.imageBasedLightingEnvironment,
        lights = _ref.lights,
        useTangents = _ref.useTangents;
    (0, _classCallCheck2.default)(this, GLTFMaterialParser);
    this.gl = gl;
    this.defines = {
      MANUAL_SRGB: 1,
      SRGB_FAST_APPROXIMATION: 1
    };

    if ((0, _webgl.hasFeature)(gl, _webgl.FEATURES.GLSL_TEXTURE_LOD)) {
      this.defines.USE_TEX_LOD = 1;
    }

    this.uniforms = {
      u_Camera: [0, 0, 0],
      u_MetallicRoughnessValues: [1, 1]
    };
    this.parameters = {};
    this.generatedTextures = [];

    if (imageBasedLightingEnvironment) {
      this.uniforms.u_DiffuseEnvSampler = imageBasedLightingEnvironment.getDiffuseEnvSampler();
      this.uniforms.u_SpecularEnvSampler = imageBasedLightingEnvironment.getSpecularEnvSampler();
      this.uniforms.u_brdfLUT = imageBasedLightingEnvironment.getBrdfTexture();
      this.uniforms.u_ScaleIBLAmbient = [1, 1];
    }

    if (pbrDebug) {
      this.uniforms.u_ScaleDiffBaseMR = [0, 0, 0, 0];
      this.uniforms.u_ScaleFGDSpec = [0, 0, 0, 0];
    }

    this.defineIfPresent(attributes.NORMAL, 'HAS_NORMALS');
    this.defineIfPresent(attributes.TANGENT && useTangents, 'HAS_TANGENTS');
    this.defineIfPresent(attributes.TEXCOORD_0, 'HAS_UV');
    this.defineIfPresent(imageBasedLightingEnvironment, 'USE_IBL');
    this.defineIfPresent(lights, 'USE_LIGHTS');
    this.defineIfPresent(pbrDebug, 'PBR_DEBUG');

    if (material) {
      this.parseMaterial(material);
    }
  }

  (0, _createClass2.default)(GLTFMaterialParser, [{
    key: "defineIfPresent",
    value: function defineIfPresent(value, name) {
      if (value) {
        this.defines[name] = 1;
      }
    }
  }, {
    key: "parseTexture",
    value: function parseTexture(gltfTexture, name) {
      var define = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      var parameters = gltfTexture.texture && gltfTexture.texture.sampler && gltfTexture.texture.sampler.parameters || {};
      var image = gltfTexture.texture.source.image;
      var textureOptions;
      var specialTextureParameters = {};

      if (image.compressed) {
        textureOptions = image;
        specialTextureParameters = (0, _defineProperty2.default)({}, this.gl.TEXTURE_MIN_FILTER, image.data.length > 1 ? this.gl.LINEAR_MIPMAP_NEAREST : this.gl.LINEAR);
      } else {
        textureOptions = {
          data: image
        };
      }

      var texture = new _webgl.Texture2D(this.gl, _objectSpread({
        id: gltfTexture.name || gltfTexture.id,
        parameters: _objectSpread(_objectSpread({}, parameters), specialTextureParameters),
        pixelStore: (0, _defineProperty2.default)({}, this.gl.UNPACK_FLIP_Y_WEBGL, false)
      }, textureOptions));
      this.uniforms[name] = texture;
      this.defineIfPresent(define, define);
      this.generatedTextures.push(texture);
    }
  }, {
    key: "parsePbrMetallicRoughness",
    value: function parsePbrMetallicRoughness(pbrMetallicRoughness) {
      if (pbrMetallicRoughness.baseColorTexture) {
        this.parseTexture(pbrMetallicRoughness.baseColorTexture, 'u_BaseColorSampler', 'HAS_BASECOLORMAP');
      }

      this.uniforms.u_BaseColorFactor = pbrMetallicRoughness.baseColorFactor || [1, 1, 1, 1];

      if (pbrMetallicRoughness.metallicRoughnessTexture) {
        this.parseTexture(pbrMetallicRoughness.metallicRoughnessTexture, 'u_MetallicRoughnessSampler', 'HAS_METALROUGHNESSMAP');
      }

      var _pbrMetallicRoughness = pbrMetallicRoughness.metallicFactor,
          metallicFactor = _pbrMetallicRoughness === void 0 ? 1 : _pbrMetallicRoughness,
          _pbrMetallicRoughness2 = pbrMetallicRoughness.roughnessFactor,
          roughnessFactor = _pbrMetallicRoughness2 === void 0 ? 1 : _pbrMetallicRoughness2;
      this.uniforms.u_MetallicRoughnessValues = [metallicFactor, roughnessFactor];
    }
  }, {
    key: "parseMaterial",
    value: function parseMaterial(material) {
      this.uniforms.pbr_uUnlit = Boolean(material.unlit);

      if (material.pbrMetallicRoughness) {
        this.parsePbrMetallicRoughness(material.pbrMetallicRoughness);
      }

      if (material.normalTexture) {
        this.parseTexture(material.normalTexture, 'u_NormalSampler', 'HAS_NORMALMAP');
        var _material$normalTextu = material.normalTexture.scale,
            scale = _material$normalTextu === void 0 ? 1 : _material$normalTextu;
        this.uniforms.u_NormalScale = scale;
      }

      if (material.occlusionTexture) {
        this.parseTexture(material.occlusionTexture, 'u_OcclusionSampler', 'HAS_OCCLUSIONMAP');
        var _material$occlusionTe = material.occlusionTexture.strength,
            strength = _material$occlusionTe === void 0 ? 1 : _material$occlusionTe;
        this.uniforms.u_OcclusionStrength = strength;
      }

      if (material.emissiveTexture) {
        this.parseTexture(material.emissiveTexture, 'u_EmissiveSampler', 'HAS_EMISSIVEMAP');
        this.uniforms.u_EmissiveFactor = material.emissiveFactor || [0, 0, 0];
      }

      if (material.alphaMode === 'MASK') {
        var _material$alphaCutoff = material.alphaCutoff,
            alphaCutoff = _material$alphaCutoff === void 0 ? 0.5 : _material$alphaCutoff;
        this.defines.ALPHA_CUTOFF = 1;
        this.uniforms.u_AlphaCutoff = alphaCutoff;
      } else if (material.alphaMode === 'BLEND') {
        _webgl.log.warn('BLEND alphaMode might not work well because it requires mesh sorting')();

        Object.assign(this.parameters, {
          blend: true,
          blendEquation: this.gl.FUNC_ADD,
          blendFunc: [this.gl.SRC_ALPHA, this.gl.ONE_MINUS_SRC_ALPHA, this.gl.ONE, this.gl.ONE_MINUS_SRC_ALPHA]
        });
      }
    }
  }, {
    key: "delete",
    value: function _delete() {
      this.generatedTextures.forEach(function (texture) {
        return texture.delete();
      });
    }
  }]);
  return GLTFMaterialParser;
}();

exports.default = GLTFMaterialParser;
//# sourceMappingURL=gltf-material-parser.js.map