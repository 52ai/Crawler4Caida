{"version":3,"file":"gpu-point-in-polygon.js","names":["Buffer","Texture2D","assert","isWebGL2","Transform","default","textureFilterModule","POLY_TEX_VS","FILTER_VS","Polygon","TEXTURE_SIZE","GPUPointInPolygon","constructor","gl","opts","textureSize","_setupResources","update","polygons","length","vertices","indices","vertexCount","ids","triangulatePolygons","_updateResources","filter","positionBuffer","filterValueIndexBuffer","count","filterTransform","sourceBuffers","a_position","feedbackBuffers","filterValueIndex","elementCount","polygonTexture","boundingBox","run","moduleSettings","texture","format","type","dataFormat","border","mipmaps","parameters","accessor","size","idBuffer","indexBuffer","target","polyTextureTransform","id","_targetTexture","_targetTextureVarying","vs","drawMode","isIndexed","a_polygonID","modules","varyings","getBoundingBox","xMin","yMin","xMax","yMax","width","height","whRatio","texWidth","texHeight","resize","setData","Float32Array","Uint16Array","uniforms","boundingBoxOriginSize","positions","Infinity","y","x","i","SIZE","polygonId","normalized","normalize","curVertices","curCount","curIds","Array","fill","push","curIndices","getSurfaceIndices","indexCount","j","getVertexCount"],"sources":["../../../../src/gpgpu/point-in-polygon/gpu-point-in-polygon.js"],"sourcesContent":["// @ts-nocheck TODO remove\n\nimport GL from '@luma.gl/constants';\nimport {Buffer, Texture2D, assert} from '@luma.gl/webgl';\nimport {isWebGL2} from '@luma.gl/gltools';\nimport {Transform} from '@luma.gl/engine';\nimport {default as textureFilterModule} from './texture-filter';\nimport {POLY_TEX_VS, FILTER_VS} from './shaders';\nimport * as Polygon from './polygon';\nconst TEXTURE_SIZE = 512;\n\nexport default class GPUPointInPolygon {\n  constructor(gl, opts = {}) {\n    this.gl = gl;\n    assert(isWebGL2(gl)); // supports WebGL2 only\n    this.textureSize = TEXTURE_SIZE;\n    this._setupResources();\n    this.update(opts);\n  }\n\n  update({polygons, textureSize} = {}) {\n    if (textureSize) {\n      this.textureSize = textureSize;\n    }\n    if (!polygons || polygons.length === 0) {\n      return;\n    }\n\n    const {vertices, indices, vertexCount, ids} = triangulatePolygons(polygons);\n    this._updateResources(vertices, indices, ids, vertexCount);\n  }\n\n  filter({positionBuffer, filterValueIndexBuffer, count}) {\n    this.filterTransform.update({\n      sourceBuffers: {\n        a_position: positionBuffer\n      },\n      feedbackBuffers: {\n        filterValueIndex: filterValueIndexBuffer\n      },\n      elementCount: count\n    });\n    const {polygonTexture, boundingBox} = this;\n\n    this.filterTransform.run({\n      moduleSettings: {boundingBox, texture: polygonTexture}\n    });\n  }\n\n  // PRIVATE\n\n  _setupResources() {\n    const {gl} = this;\n\n    // texture to render polygons to\n    this.polygonTexture = new Texture2D(gl, {\n      format: GL.RGB,\n      type: GL.UNSIGNED_BYTE,\n      dataFormat: GL.RGB,\n      border: 0,\n      mipmaps: false,\n      parameters: {\n        [GL.TEXTURE_MAG_FILTER]: GL.NEAREST,\n        [GL.TEXTURE_MIN_FILTER]: GL.NEAREST,\n        [GL.TEXTURE_WRAP_S]: gl.CLAMP_TO_EDGE,\n        [GL.TEXTURE_WRAP_T]: gl.CLAMP_TO_EDGE\n      }\n    });\n    this.positionBuffer = new Buffer(gl, {accessor: {type: GL.FLOAT, size: 2}});\n    this.idBuffer = new Buffer(gl, {accessor: {type: GL.FLOAT, size: 1}});\n    this.indexBuffer = new Buffer(gl, {\n      target: GL.ELEMENT_ARRAY_BUFFER,\n      accessor: {type: GL.UNSIGNED_SHORT}\n    });\n\n    // transform to generate polygon texture\n    this.polyTextureTransform = new Transform(gl, {\n      id: `polygon-texture-creation-transform`,\n      elementCount: 0,\n      _targetTexture: this.polygonTexture,\n      _targetTextureVarying: 'v_polygonColor',\n      vs: POLY_TEX_VS,\n      drawMode: GL.TRIANGLES,\n      isIndexed: true,\n      sourceBuffers: {\n        a_position: this.positionBuffer,\n        a_polygonID: this.idBuffer,\n        indices: this.indexBuffer\n      }\n    });\n\n    // transform to perform filtering\n    this.filterTransform = new Transform(gl, {\n      id: 'filter transform',\n      vs: FILTER_VS,\n      modules: [textureFilterModule],\n      varyings: ['filterValueIndex']\n    });\n  }\n\n  _updateResources(vertices, indices, ids, vertexCount) {\n    const boundingBox = getBoundingBox(vertices, vertexCount);\n    const [xMin, yMin, xMax, yMax] = boundingBox;\n    const width = xMax - xMin;\n    const height = yMax - yMin;\n    const whRatio = width / height;\n    const {textureSize} = this;\n\n    // calculate max texture size with same aspect ratio\n    let texWidth = textureSize;\n    let texHeight = textureSize;\n    if (whRatio > 1) {\n      texHeight = texWidth / whRatio;\n    } else {\n      texWidth = texHeight * whRatio;\n    }\n\n    this.boundingBox = boundingBox;\n    this.polygonTexture.resize({width: texWidth, height: texHeight, mipmaps: false});\n    this.positionBuffer.setData(new Float32Array(vertices));\n    this.idBuffer.setData(new Float32Array(ids));\n    this.indexBuffer.setData(new Uint16Array(indices));\n    this.polyTextureTransform.update({\n      elementCount: indices.length,\n      _targetTexture: this.polygonTexture\n    });\n\n    this.polyTextureTransform.run({\n      uniforms: {\n        boundingBoxOriginSize: [xMin, yMin, width, height]\n      }\n    });\n  }\n}\n\n// Helper methods\n\nfunction getBoundingBox(positions, vertexCount) {\n  let yMin = Infinity;\n  let yMax = -Infinity;\n  let xMin = Infinity;\n  let xMax = -Infinity;\n  let y;\n  let x;\n\n  for (let i = 0; i < vertexCount; i++) {\n    x = positions[i * 2];\n    y = positions[i * 2 + 1];\n    yMin = y < yMin ? y : yMin;\n    yMax = y > yMax ? y : yMax;\n    xMin = x < xMin ? x : xMin;\n    xMax = x > xMax ? x : xMax;\n  }\n\n  return [xMin, yMin, xMax, yMax];\n}\n\nfunction triangulatePolygons(polygons) {\n  const SIZE = 2;\n  const vertices = [];\n  const indices = [];\n  const ids = [];\n  let count = 0;\n  let polygonId = 0;\n  for (let i = 0; i < polygons.length; i++) {\n    const normalized = Polygon.normalize(polygons[i], SIZE);\n    const curVertices = normalized.positions || normalized;\n    const curCount = curVertices.length / SIZE;\n    const curIds = new Array(curCount).fill(polygonId);\n    vertices.push(...curVertices);\n    ids.push(...curIds);\n    const curIndices = Polygon.getSurfaceIndices(normalized, SIZE);\n    const indexCount = curIndices.length;\n    for (let j = 0; j < indexCount; j++) {\n      curIndices[j] += count;\n    }\n    count += curCount;\n    indices.push(...curIndices);\n    polygonId++;\n  }\n\n  // UInt16 (UNSIGNED_SHORT) buffer is used for indices\n  assert(count < 65536); // 0xFFFF\n\n  const vertexCount = Polygon.getVertexCount(vertices, SIZE);\n\n  return {vertices, indices, ids, vertexCount};\n}\n"],"mappings":"AAGA,SAAQA,MAAR,EAAgBC,SAAhB,EAA2BC,MAA3B,QAAwC,gBAAxC;AACA,SAAQC,QAAR,QAAuB,kBAAvB;AACA,SAAQC,SAAR,QAAwB,iBAAxB;AACA,SAAQC,OAAO,IAAIC,mBAAnB,QAA6C,kBAA7C;AACA,SAAQC,WAAR,EAAqBC,SAArB,QAAqC,WAArC;AACA,OAAO,KAAKC,OAAZ,MAAyB,WAAzB;AACA,MAAMC,YAAY,GAAG,GAArB;AAEA,eAAe,MAAMC,iBAAN,CAAwB;EACrCC,WAAW,CAACC,EAAD,EAAgB;IAAA,IAAXC,IAAW,uEAAJ,EAAI;IACzB,KAAKD,EAAL,GAAUA,EAAV;IACAX,MAAM,CAACC,QAAQ,CAACU,EAAD,CAAT,CAAN;IACA,KAAKE,WAAL,GAAmBL,YAAnB;;IACA,KAAKM,eAAL;;IACA,KAAKC,MAAL,CAAYH,IAAZ;EACD;;EAEDG,MAAM,GAA+B;IAAA,IAA9B;MAACC,QAAD;MAAWH;IAAX,CAA8B,uEAAJ,EAAI;;IACnC,IAAIA,WAAJ,EAAiB;MACf,KAAKA,WAAL,GAAmBA,WAAnB;IACD;;IACD,IAAI,CAACG,QAAD,IAAaA,QAAQ,CAACC,MAAT,KAAoB,CAArC,EAAwC;MACtC;IACD;;IAED,MAAM;MAACC,QAAD;MAAWC,OAAX;MAAoBC,WAApB;MAAiCC;IAAjC,IAAwCC,mBAAmB,CAACN,QAAD,CAAjE;;IACA,KAAKO,gBAAL,CAAsBL,QAAtB,EAAgCC,OAAhC,EAAyCE,GAAzC,EAA8CD,WAA9C;EACD;;EAEDI,MAAM,OAAkD;IAAA,IAAjD;MAACC,cAAD;MAAiBC,sBAAjB;MAAyCC;IAAzC,CAAiD;IACtD,KAAKC,eAAL,CAAqBb,MAArB,CAA4B;MAC1Bc,aAAa,EAAE;QACbC,UAAU,EAAEL;MADC,CADW;MAI1BM,eAAe,EAAE;QACfC,gBAAgB,EAAEN;MADH,CAJS;MAO1BO,YAAY,EAAEN;IAPY,CAA5B;IASA,MAAM;MAACO,cAAD;MAAiBC;IAAjB,IAAgC,IAAtC;IAEA,KAAKP,eAAL,CAAqBQ,GAArB,CAAyB;MACvBC,cAAc,EAAE;QAACF,WAAD;QAAcG,OAAO,EAAEJ;MAAvB;IADO,CAAzB;EAGD;;EAIDpB,eAAe,GAAG;IAChB,MAAM;MAACH;IAAD,IAAO,IAAb;IAGA,KAAKuB,cAAL,GAAsB,IAAInC,SAAJ,CAAcY,EAAd,EAAkB;MACtC4B,MAAM,MADgC;MAEtCC,IAAI,MAFkC;MAGtCC,UAAU,MAH4B;MAItCC,MAAM,EAAE,CAJ8B;MAKtCC,OAAO,EAAE,KAL6B;MAMtCC,UAAU,EAAE;QACV,aADU;QAEV,aAFU;QAGV,cAHU;QAIV;MAJU;IAN0B,CAAlB,CAAtB;IAaA,KAAKnB,cAAL,GAAsB,IAAI3B,MAAJ,CAAWa,EAAX,EAAe;MAACkC,QAAQ,EAAE;QAACL,IAAI,MAAL;QAAiBM,IAAI,EAAE;MAAvB;IAAX,CAAf,CAAtB;IACA,KAAKC,QAAL,GAAgB,IAAIjD,MAAJ,CAAWa,EAAX,EAAe;MAACkC,QAAQ,EAAE;QAACL,IAAI,MAAL;QAAiBM,IAAI,EAAE;MAAvB;IAAX,CAAf,CAAhB;IACA,KAAKE,WAAL,GAAmB,IAAIlD,MAAJ,CAAWa,EAAX,EAAe;MAChCsC,MAAM,OAD0B;MAEhCJ,QAAQ,EAAE;QAACL,IAAI;MAAL;IAFsB,CAAf,CAAnB;IAMA,KAAKU,oBAAL,GAA4B,IAAIhD,SAAJ,CAAcS,EAAd,EAAkB;MAC5CwC,EAAE,sCAD0C;MAE5ClB,YAAY,EAAE,CAF8B;MAG5CmB,cAAc,EAAE,KAAKlB,cAHuB;MAI5CmB,qBAAqB,EAAE,gBAJqB;MAK5CC,EAAE,EAAEjD,WALwC;MAM5CkD,QAAQ,GANoC;MAO5CC,SAAS,EAAE,IAPiC;MAQ5C3B,aAAa,EAAE;QACbC,UAAU,EAAE,KAAKL,cADJ;QAEbgC,WAAW,EAAE,KAAKV,QAFL;QAGb5B,OAAO,EAAE,KAAK6B;MAHD;IAR6B,CAAlB,CAA5B;IAgBA,KAAKpB,eAAL,GAAuB,IAAI1B,SAAJ,CAAcS,EAAd,EAAkB;MACvCwC,EAAE,EAAE,kBADmC;MAEvCG,EAAE,EAAEhD,SAFmC;MAGvCoD,OAAO,EAAE,CAACtD,mBAAD,CAH8B;MAIvCuD,QAAQ,EAAE,CAAC,kBAAD;IAJ6B,CAAlB,CAAvB;EAMD;;EAEDpC,gBAAgB,CAACL,QAAD,EAAWC,OAAX,EAAoBE,GAApB,EAAyBD,WAAzB,EAAsC;IACpD,MAAMe,WAAW,GAAGyB,cAAc,CAAC1C,QAAD,EAAWE,WAAX,CAAlC;IACA,MAAM,CAACyC,IAAD,EAAOC,IAAP,EAAaC,IAAb,EAAmBC,IAAnB,IAA2B7B,WAAjC;IACA,MAAM8B,KAAK,GAAGF,IAAI,GAAGF,IAArB;IACA,MAAMK,MAAM,GAAGF,IAAI,GAAGF,IAAtB;IACA,MAAMK,OAAO,GAAGF,KAAK,GAAGC,MAAxB;IACA,MAAM;MAACrD;IAAD,IAAgB,IAAtB;IAGA,IAAIuD,QAAQ,GAAGvD,WAAf;IACA,IAAIwD,SAAS,GAAGxD,WAAhB;;IACA,IAAIsD,OAAO,GAAG,CAAd,EAAiB;MACfE,SAAS,GAAGD,QAAQ,GAAGD,OAAvB;IACD,CAFD,MAEO;MACLC,QAAQ,GAAGC,SAAS,GAAGF,OAAvB;IACD;;IAED,KAAKhC,WAAL,GAAmBA,WAAnB;IACA,KAAKD,cAAL,CAAoBoC,MAApB,CAA2B;MAACL,KAAK,EAAEG,QAAR;MAAkBF,MAAM,EAAEG,SAA1B;MAAqC1B,OAAO,EAAE;IAA9C,CAA3B;IACA,KAAKlB,cAAL,CAAoB8C,OAApB,CAA4B,IAAIC,YAAJ,CAAiBtD,QAAjB,CAA5B;IACA,KAAK6B,QAAL,CAAcwB,OAAd,CAAsB,IAAIC,YAAJ,CAAiBnD,GAAjB,CAAtB;IACA,KAAK2B,WAAL,CAAiBuB,OAAjB,CAAyB,IAAIE,WAAJ,CAAgBtD,OAAhB,CAAzB;IACA,KAAK+B,oBAAL,CAA0BnC,MAA1B,CAAiC;MAC/BkB,YAAY,EAAEd,OAAO,CAACF,MADS;MAE/BmC,cAAc,EAAE,KAAKlB;IAFU,CAAjC;IAKA,KAAKgB,oBAAL,CAA0Bd,GAA1B,CAA8B;MAC5BsC,QAAQ,EAAE;QACRC,qBAAqB,EAAE,CAACd,IAAD,EAAOC,IAAP,EAAaG,KAAb,EAAoBC,MAApB;MADf;IADkB,CAA9B;EAKD;;AAzHoC;;AA8HvC,SAASN,cAAT,CAAwBgB,SAAxB,EAAmCxD,WAAnC,EAAgD;EAC9C,IAAI0C,IAAI,GAAGe,QAAX;EACA,IAAIb,IAAI,GAAG,CAACa,QAAZ;EACA,IAAIhB,IAAI,GAAGgB,QAAX;EACA,IAAId,IAAI,GAAG,CAACc,QAAZ;EACA,IAAIC,CAAJ;EACA,IAAIC,CAAJ;;EAEA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG5D,WAApB,EAAiC4D,CAAC,EAAlC,EAAsC;IACpCD,CAAC,GAAGH,SAAS,CAACI,CAAC,GAAG,CAAL,CAAb;IACAF,CAAC,GAAGF,SAAS,CAACI,CAAC,GAAG,CAAJ,GAAQ,CAAT,CAAb;IACAlB,IAAI,GAAGgB,CAAC,GAAGhB,IAAJ,GAAWgB,CAAX,GAAehB,IAAtB;IACAE,IAAI,GAAGc,CAAC,GAAGd,IAAJ,GAAWc,CAAX,GAAed,IAAtB;IACAH,IAAI,GAAGkB,CAAC,GAAGlB,IAAJ,GAAWkB,CAAX,GAAelB,IAAtB;IACAE,IAAI,GAAGgB,CAAC,GAAGhB,IAAJ,GAAWgB,CAAX,GAAehB,IAAtB;EACD;;EAED,OAAO,CAACF,IAAD,EAAOC,IAAP,EAAaC,IAAb,EAAmBC,IAAnB,CAAP;AACD;;AAED,SAAS1C,mBAAT,CAA6BN,QAA7B,EAAuC;EACrC,MAAMiE,IAAI,GAAG,CAAb;EACA,MAAM/D,QAAQ,GAAG,EAAjB;EACA,MAAMC,OAAO,GAAG,EAAhB;EACA,MAAME,GAAG,GAAG,EAAZ;EACA,IAAIM,KAAK,GAAG,CAAZ;EACA,IAAIuD,SAAS,GAAG,CAAhB;;EACA,KAAK,IAAIF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGhE,QAAQ,CAACC,MAA7B,EAAqC+D,CAAC,EAAtC,EAA0C;IACxC,MAAMG,UAAU,GAAG5E,OAAO,CAAC6E,SAAR,CAAkBpE,QAAQ,CAACgE,CAAD,CAA1B,EAA+BC,IAA/B,CAAnB;IACA,MAAMI,WAAW,GAAGF,UAAU,CAACP,SAAX,IAAwBO,UAA5C;IACA,MAAMG,QAAQ,GAAGD,WAAW,CAACpE,MAAZ,GAAqBgE,IAAtC;IACA,MAAMM,MAAM,GAAG,IAAIC,KAAJ,CAAUF,QAAV,EAAoBG,IAApB,CAAyBP,SAAzB,CAAf;IACAhE,QAAQ,CAACwE,IAAT,CAAc,GAAGL,WAAjB;IACAhE,GAAG,CAACqE,IAAJ,CAAS,GAAGH,MAAZ;IACA,MAAMI,UAAU,GAAGpF,OAAO,CAACqF,iBAAR,CAA0BT,UAA1B,EAAsCF,IAAtC,CAAnB;IACA,MAAMY,UAAU,GAAGF,UAAU,CAAC1E,MAA9B;;IACA,KAAK,IAAI6E,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,UAApB,EAAgCC,CAAC,EAAjC,EAAqC;MACnCH,UAAU,CAACG,CAAD,CAAV,IAAiBnE,KAAjB;IACD;;IACDA,KAAK,IAAI2D,QAAT;IACAnE,OAAO,CAACuE,IAAR,CAAa,GAAGC,UAAhB;IACAT,SAAS;EACV;;EAGDlF,MAAM,CAAC2B,KAAK,GAAG,KAAT,CAAN;EAEA,MAAMP,WAAW,GAAGb,OAAO,CAACwF,cAAR,CAAuB7E,QAAvB,EAAiC+D,IAAjC,CAApB;EAEA,OAAO;IAAC/D,QAAD;IAAWC,OAAX;IAAoBE,GAApB;IAAyBD;EAAzB,CAAP;AACD"}