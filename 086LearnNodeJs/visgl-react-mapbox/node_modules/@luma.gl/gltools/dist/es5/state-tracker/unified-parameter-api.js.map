{"version":3,"file":"unified-parameter-api.js","names":["setParameters","gl","values","assert","isWebGL","isObjectEmpty","compositeSetters","key","glConstant","Number","setter","GL_PARAMETER_SETTERS","cache","state","compositeSetter","GL_COMPOSITE_PARAMETER_SETTERS","getParameters","parameters","GL_PARAMETER_DEFAULTS","getter","GL_PARAMETER_GETTERS","getParameter","parameterKeys","Array","isArray","Object","keys","resetParameters","withParameters","func","nocatch","pushContextState","value","popContextState"],"sources":["../../../src/state-tracker/unified-parameter-api.js"],"sourcesContent":["// Provides a unified API for getting and setting any WebGL parameter\n// Also knows default values of all parameters, enabling fast cache initialization\n// Provides base functionality for the state caching.\nimport {\n  GL_PARAMETER_DEFAULTS,\n  GL_PARAMETER_SETTERS,\n  GL_COMPOSITE_PARAMETER_SETTERS,\n  GL_PARAMETER_GETTERS\n} from './webgl-parameter-tables';\n\nimport {pushContextState, popContextState} from './track-context-state';\nimport {assert} from '../utils/assert';\nimport {isWebGL} from '../utils/webgl-checks';\nimport {isObjectEmpty} from '../utils/utils';\n\n// Sets any GL parameter regardless of function (gl.blendMode, ...)\n// Note: requires a `cache` object to be set on the context (gl.state.cache)\n// This object is used to fill in any missing values for composite setter functions\nexport function setParameters(gl, values) {\n  assert(isWebGL(gl), 'setParameters requires a WebGL context');\n\n  if (isObjectEmpty(values)) {\n    return;\n  }\n\n  const compositeSetters = {};\n\n  // HANDLE PRIMITIVE SETTERS (and make note of any composite setters)\n\n  for (const key in values) {\n    const glConstant = Number(key);\n    const setter = GL_PARAMETER_SETTERS[key];\n    if (setter) {\n      // Composite setters should only be called once, so save them\n      if (typeof setter === 'string') {\n        compositeSetters[setter] = true;\n      } else {\n        // if (gl[glConstant] !== undefined) {\n        // TODO - added above check since this is being called on WebGL2 values in WebGL1...\n        // TODO - deep equal on values? only call setter if value has changed?\n        // NOTE - the setter will automatically update this.state\n        setter(gl, values[key], glConstant);\n      }\n    }\n  }\n\n  // HANDLE COMPOSITE SETTERS\n\n  // NOTE: any non-provided values needed by composite setters are filled in from state cache\n  // The cache parameter is automatically retrieved from the context\n  // This depends on `trackContextState`, which is technically a \"circular\" dependency.\n  // But it is too inconvenient to always require a cache parameter here.\n  // This is the ONLY external dependency in this module/\n  const cache = gl.state && gl.state.cache;\n  if (cache) {\n    for (const key in compositeSetters) {\n      // TODO - avoid calling composite setters if values have not changed.\n      const compositeSetter = GL_COMPOSITE_PARAMETER_SETTERS[key];\n      // Note - if `trackContextState` has been called,\n      // the setter will automatically update this.state.cache\n      compositeSetter(gl, values, cache);\n    }\n  }\n\n  // Add a log for the else case?\n}\n\n// Copies the state from a context (gl.getParameter should not be overriden)\n// Reads the entire WebGL state from a context\n// Caveat: This generates a huge amount of synchronous driver roundtrips and should be\n// considered a very slow operation, to be used only if/when a context already manipulated\n// by external code needs to be synchronized for the first time\n// @return {Object} - a newly created map, with values keyed by GL parameters\nexport function getParameters(gl, parameters) {\n  // default to querying all parameters\n  parameters = parameters || GL_PARAMETER_DEFAULTS;\n  // support both arrays of parameters and objects (keys represent parameters)\n\n  if (typeof parameters === 'number') {\n    // single GL enum\n    const key = parameters;\n    const getter = GL_PARAMETER_GETTERS[key];\n    return getter ? getter(gl, key) : gl.getParameter(key);\n  }\n\n  const parameterKeys = Array.isArray(parameters) ? parameters : Object.keys(parameters);\n\n  const state = {};\n  for (const key of parameterKeys) {\n    const getter = GL_PARAMETER_GETTERS[key];\n    state[key] = getter ? getter(gl, Number(key)) : gl.getParameter(Number(key));\n  }\n  return state;\n}\n\n// Reset all parameters to a (almost) pure context state\n// NOTE: viewport and scissor will be set to the values in GL_PARAMETER_DEFAULTS,\n//   NOT the canvas size dimensions, so they will have to be properly set after\n//   calling this function.\nexport function resetParameters(gl) {\n  setParameters(gl, GL_PARAMETER_DEFAULTS);\n}\n\n// Stores current \"global\" WebGL context settings, changes selected parameters,\n// executes function, restores parameters\nexport function withParameters(gl, parameters, func) {\n  if (isObjectEmpty(parameters)) {\n    // Avoid setting state if no parameters provided. Just call and return\n    return func(gl);\n  }\n\n  const {nocatch = true} = parameters;\n\n  pushContextState(gl);\n  setParameters(gl, parameters);\n\n  // Setup is done, call the function\n  let value;\n\n  if (nocatch) {\n    // Avoid try catch to minimize stack size impact for safe execution paths\n    value = func(gl);\n    popContextState(gl);\n  } else {\n    // Wrap in a try-catch to ensure that parameters are restored on exceptions\n    try {\n      value = func(gl);\n    } finally {\n      popContextState(gl);\n    }\n  }\n\n  return value;\n}\n"],"mappings":"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"}