{"version":3,"file":"shader-module.js","names":["VERTEX_SHADER","FRAGMENT_SHADER","ShaderModule","name","vs","fs","dependencies","uniforms","getUniforms","deprecations","defines","inject","vertexShader","fragmentShader","assert","getModuleUniforms","_parseDeprecationDefinitions","injections","normalizeInjections","parsePropTypes","type","moduleSource","toUpperCase","replace","opts","_defaultGetUniforms","shaderSource","log","forEach","def","regex","test","deprecated","old","new","removed","RegExp","propTypes","key","propDef","private","validate","value","normalizeShaderModule","module","normalized","shaderModule","bind","result","hook","injection","stage","slice","order"],"sources":["../../../src/lib/shader-module.js"],"sourcesContent":["import {assert} from '../utils';\nimport {parsePropTypes} from './filters/prop-types';\n\nconst VERTEX_SHADER = 'vs';\nconst FRAGMENT_SHADER = 'fs';\n\nexport default class ShaderModule {\n  constructor({\n    name,\n    vs,\n    fs,\n    dependencies = [],\n    uniforms,\n    getUniforms,\n    deprecations = [],\n    defines = {},\n    inject = {},\n    // DEPRECATED\n    vertexShader,\n    fragmentShader\n  }) {\n    assert(typeof name === 'string');\n    this.name = name;\n    this.vs = vs || vertexShader;\n    this.fs = fs || fragmentShader;\n    this.getModuleUniforms = getUniforms;\n    this.dependencies = dependencies;\n    this.deprecations = this._parseDeprecationDefinitions(deprecations);\n    this.defines = defines;\n    this.injections = normalizeInjections(inject);\n\n    if (uniforms) {\n      this.uniforms = parsePropTypes(uniforms);\n    }\n  }\n\n  // Extracts the source code chunk for the specified shader type from the named shader module\n  getModuleSource(type) {\n    let moduleSource;\n    switch (type) {\n      case VERTEX_SHADER:\n        moduleSource = this.vs || '';\n        break;\n      case FRAGMENT_SHADER:\n        moduleSource = this.fs || '';\n        break;\n      default:\n        assert(false);\n    }\n\n    return `\\\n#define MODULE_${this.name.toUpperCase().replace(/[^0-9a-z]/gi, '_')}\n${moduleSource}\\\n// END MODULE_${this.name}\n\n`;\n  }\n\n  getUniforms(opts, uniforms) {\n    if (this.getModuleUniforms) {\n      return this.getModuleUniforms(opts, uniforms);\n    }\n    // Build uniforms from the uniforms array\n    if (this.uniforms) {\n      return this._defaultGetUniforms(opts);\n    }\n    return {};\n  }\n\n  getDefines() {\n    return this.defines;\n  }\n\n  // Warn about deprecated uniforms or functions\n  checkDeprecations(shaderSource, log) {\n    this.deprecations.forEach(def => {\n      if (def.regex.test(shaderSource)) {\n        if (def.deprecated) {\n          log.deprecated(def.old, def.new)();\n        } else {\n          log.removed(def.old, def.new)();\n        }\n      }\n    });\n  }\n\n  _parseDeprecationDefinitions(deprecations) {\n    deprecations.forEach(def => {\n      switch (def.type) {\n        case 'function':\n          def.regex = new RegExp(`\\\\b${def.old}\\\\(`);\n          break;\n        default:\n          def.regex = new RegExp(`${def.type} ${def.old};`);\n      }\n    });\n\n    return deprecations;\n  }\n\n  _defaultGetUniforms(opts = {}) {\n    const uniforms = {};\n    const propTypes = this.uniforms;\n\n    for (const key in propTypes) {\n      const propDef = propTypes[key];\n      if (key in opts && !propDef.private) {\n        if (propDef.validate) {\n          assert(propDef.validate(opts[key], propDef), `${this.name}: invalid ${key}`);\n        }\n        uniforms[key] = opts[key];\n      } else {\n        uniforms[key] = propDef.value;\n      }\n    }\n\n    return uniforms;\n  }\n}\n\n// This utility mutates the original module\n// Keeping for backward compatibility\n// TODO - remove in v8\nexport function normalizeShaderModule(module) {\n  if (!module.normalized) {\n    module.normalized = true;\n    if (module.uniforms && !module.getUniforms) {\n      const shaderModule = new ShaderModule(module);\n      module.getUniforms = shaderModule.getUniforms.bind(shaderModule);\n    }\n  }\n  return module;\n}\n\nfunction normalizeInjections(injections) {\n  const result = {\n    vs: {},\n    fs: {}\n  };\n\n  for (const hook in injections) {\n    let injection = injections[hook];\n    const stage = hook.slice(0, 2);\n\n    if (typeof injection === 'string') {\n      injection = {\n        order: 0,\n        injection\n      };\n    }\n\n    result[stage][hook] = injection;\n  }\n\n  return result;\n}\n"],"mappings":"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"}