{"version":3,"file":"edgework.js","names":["random","fs","uniforms","radius","value","min","softMax","delta","private","edgeWork","name","dependencies","passes","sampler"],"sources":["../../../../src/modules/image-fun-filters/edgework.js"],"sourcesContent":["/** @typedef {import('../../types').ShaderPass} ShaderPass */\n\nimport {random} from '../utils/random';\n\nconst fs = `\\\nuniform float radius;\nuniform vec2 delta;\n\nvec4 edgeWork_sampleColor1(sampler2D source, vec2 texSize, vec2 texCoord) {\n  vec2 relativeDelta = radius * delta / texSize;\n\n  vec2 color = vec2(0.0);\n  vec2 total = vec2(0.0);\n\n  /* randomize the lookup values to hide the fixed number of samples */\n  float offset = random(vec3(12.9898, 78.233, 151.7182), 0.0);\n\n  for (float t = -30.0; t <= 30.0; t++) {\n    float percent = (t + offset - 0.5) / 30.0;\n    float weight = 1.0 - abs(percent);\n    vec3 sampleColor = texture2D(source, texCoord + relativeDelta * percent).rgb;\n    float average = (sampleColor.r + sampleColor.g + sampleColor.b) / 3.0;\n    color.x += average * weight;\n    total.x += weight;\n    if (abs(t) < 15.0) {\n      weight = weight * 2.0 - 1.0;\n      color.y += average * weight;\n      total.y += weight;\n    }\n  }\n  return vec4(color / total, 0.0, 1.0);\n}\n\nvec4 edgeWork_sampleColor2(sampler2D source, vec2 texSize, vec2 texCoord) {\n  vec2 relativeDelta = radius * delta / texSize;\n\n  vec2 color = vec2(0.0);\n  vec2 total = vec2(0.0);\n\n  /* randomize the lookup values to hide the fixed number of samples */\n  float offset = random(vec3(12.9898, 78.233, 151.7182), 0.0);\n\n  for (float t = -30.0; t <= 30.0; t++) {\n    float percent = (t + offset - 0.5) / 30.0;\n    float weight = 1.0 - abs(percent);\n    vec2 sampleColor = texture2D(source, texCoord + relativeDelta * percent).xy;\n    color.x += sampleColor.x * weight;\n    total.x += weight;\n    if (abs(t) < 15.0) {\n      weight = weight * 2.0 - 1.0;\n      color.y += sampleColor.y * weight;\n      total.y += weight;\n    }\n  }\n  float c = clamp(10000.0 * (color.y / total.y - color.x / total.x) + 0.5, 0.0, 1.0);\n  return vec4(c, c, c, 1.0);\n}\n`;\n\nconst uniforms = {\n  radius: {value: 2, min: 1, softMax: 50},\n  delta: {value: [1, 0], private: true}\n};\n\n/** @type {ShaderPass} */\nexport const edgeWork = {\n  name: 'edgeWork',\n  uniforms,\n  fs,\n  dependencies: [random],\n  passes: [\n    {\n      sampler: 'edgeWork_sampleColor1',\n      uniforms: {delta: [1, 0]}\n    },\n    {\n      sampler: 'edgeWork_sampleColor2',\n      uniforms: {delta: [0, 1]}\n    }\n  ]\n};\n"],"mappings":"AAEA,SAAQA,MAAR,QAAqB,iBAArB;AAEA,MAAMC,EAAE,klDAAR;AAuDA,MAAMC,QAAQ,GAAG;EACfC,MAAM,EAAE;IAACC,KAAK,EAAE,CAAR;IAAWC,GAAG,EAAE,CAAhB;IAAmBC,OAAO,EAAE;EAA5B,CADO;EAEfC,KAAK,EAAE;IAACH,KAAK,EAAE,CAAC,CAAD,EAAI,CAAJ,CAAR;IAAgBI,OAAO,EAAE;EAAzB;AAFQ,CAAjB;AAMA,OAAO,MAAMC,QAAQ,GAAG;EACtBC,IAAI,EAAE,UADgB;EAEtBR,QAFsB;EAGtBD,EAHsB;EAItBU,YAAY,EAAE,CAACX,MAAD,CAJQ;EAKtBY,MAAM,EAAE,CACN;IACEC,OAAO,EAAE,uBADX;IAEEX,QAAQ,EAAE;MAACK,KAAK,EAAE,CAAC,CAAD,EAAI,CAAJ;IAAR;EAFZ,CADM,EAKN;IACEM,OAAO,EAAE,uBADX;IAEEX,QAAQ,EAAE;MAACK,KAAK,EAAE,CAAC,CAAD,EAAI,CAAJ;IAAR;EAFZ,CALM;AALc,CAAjB"}