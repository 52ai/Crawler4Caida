{"version":3,"file":"format-glsl-error.js","names":["getShaderName","getShaderTypeName","formatGLSLCompilerError","errLog","src","shaderType","shaderName","errors","warnings","parseGLSLCompilerError","errorStrings","split","name","shaderDescription","i","length","errorString","segments","type","line","parseInt","isNaN","Error","lines","addLineNumbers","formatErrors","message","error","column","err","substring","join","trim","padLeft","string","start","delim","maxDigits","String","map","lineNumber","digits","prefix","result"],"sources":["../../../src/glsl-utils/format-glsl-error.js"],"sourcesContent":["// TODO - formatGLSLCompilerError should not depend on this\nimport getShaderName from './get-shader-name';\nimport getShaderTypeName from './get-shader-type-name';\n\n// Formats GLSL compiler error log into single string\nexport default function formatGLSLCompilerError(errLog, src, shaderType) {\n  const {shaderName, errors, warnings} = parseGLSLCompilerError(errLog, src, shaderType);\n  return `GLSL compilation error in ${shaderName}\\n\\n${errors}\\n${warnings}`;\n}\n\n/**\n * Parse a GLSL compiler error log into a string showing the source code around each error.\n * Based on https://github.com/wwwtyro/gl-format-compiler-error (public domain)\n */\n/* eslint-disable no-continue, max-statements */\nexport function parseGLSLCompilerError(errLog, src, shaderType, shaderName) {\n  const errorStrings = errLog.split(/\\r?\\n/);\n  const errors = {};\n  const warnings = {};\n\n  // Patch the shader name\n  const name = shaderName || getShaderName(src) || '(unnamed)';\n  const shaderDescription = `${getShaderTypeName(shaderType)} shader ${name}`;\n\n  // Parse the error - note: browser and driver dependent\n  for (let i = 0; i < errorStrings.length; i++) {\n    const errorString = errorStrings[i];\n    if (errorString.length <= 1) {\n      continue;\n    }\n    const segments = errorString.split(':');\n    const type = segments[0];\n    const line = parseInt(segments[2], 10);\n    if (isNaN(line)) {\n      throw new Error(`GLSL compilation error in ${shaderDescription}: ${errLog}`);\n    }\n    if (type !== 'WARNING') {\n      errors[line] = errorString;\n    } else {\n      warnings[line] = errorString;\n    }\n  }\n\n  // Format the error inline with the code\n  const lines = addLineNumbers(src);\n\n  return {\n    shaderName: shaderDescription,\n    errors: formatErrors(errors, lines),\n    warnings: formatErrors(warnings, lines)\n  };\n}\n\n// helper function, outputs annotated errors or warnings\nfunction formatErrors(errors, lines) {\n  let message = '';\n  for (let i = 0; i < lines.length; i++) {\n    const line = lines[i];\n    if (!errors[i + 3] && !errors[i + 2] && !errors[i + 1]) {\n      continue;\n    }\n    message += `${line}\\n`;\n    if (errors[i + 1]) {\n      const error = errors[i + 1];\n      const segments = error.split(':', 3);\n      const type = segments[0];\n      const column = parseInt(segments[1], 10) || 0;\n      const err = error.substring(segments.join(':').length + 1).trim();\n      message += padLeft(`^^^ ${type}: ${err}\\n\\n`, column);\n    }\n  }\n  return message;\n}\n\n/**\n * Prepends line numbers to each line of a string.\n * The line numbers will be left-padded with spaces to ensure an\n * aligned layout when rendered using monospace fonts.\n * @param {String} string - multi-line string to add line numbers to\n * @param {Number} start=1 - number of spaces to add\n * @param {String} delim =': ' - injected between line number and original line\n * @return {String[]} strings - array of string, one per line, with line numbers added\n */\nfunction addLineNumbers(string, start = 1, delim = ': ') {\n  const lines = string.split(/\\r?\\n/);\n  const maxDigits = String(lines.length + start - 1).length;\n  return lines.map((line, i) => {\n    const lineNumber = String(i + start);\n    const digits = lineNumber.length;\n    const prefix = padLeft(lineNumber, maxDigits - digits);\n    return prefix + delim + line;\n  });\n}\n\n/**\n * Pads a string with a number of spaces (space characters) to the left\n * @param {String} string - string to pad\n * @param {Number} digits - number of spaces to add\n * @return {String} string - The padded string\n */\nfunction padLeft(string, digits) {\n  let result = '';\n  for (let i = 0; i < digits; ++i) {\n    result += ' ';\n  }\n  return `${result}${string}`;\n}\n"],"mappings":"AACA,OAAOA,aAAP,MAA0B,mBAA1B;AACA,OAAOC,iBAAP,MAA8B,wBAA9B;AAGA,eAAe,SAASC,uBAAT,CAAiCC,MAAjC,EAAyCC,GAAzC,EAA8CC,UAA9C,EAA0D;EACvE,MAAM;IAACC,UAAD;IAAaC,MAAb;IAAqBC;EAArB,IAAiCC,sBAAsB,CAACN,MAAD,EAASC,GAAT,EAAcC,UAAd,CAA7D;EACA,2CAAoCC,UAApC,iBAAqDC,MAArD,eAAgEC,QAAhE;AACD;AAOD,OAAO,SAASC,sBAAT,CAAgCN,MAAhC,EAAwCC,GAAxC,EAA6CC,UAA7C,EAAyDC,UAAzD,EAAqE;EAC1E,MAAMI,YAAY,GAAGP,MAAM,CAACQ,KAAP,CAAa,OAAb,CAArB;EACA,MAAMJ,MAAM,GAAG,EAAf;EACA,MAAMC,QAAQ,GAAG,EAAjB;EAGA,MAAMI,IAAI,GAAGN,UAAU,IAAIN,aAAa,CAACI,GAAD,CAA3B,IAAoC,WAAjD;EACA,MAAMS,iBAAiB,aAAMZ,iBAAiB,CAACI,UAAD,CAAvB,qBAA8CO,IAA9C,CAAvB;;EAGA,KAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,YAAY,CAACK,MAAjC,EAAyCD,CAAC,EAA1C,EAA8C;IAC5C,MAAME,WAAW,GAAGN,YAAY,CAACI,CAAD,CAAhC;;IACA,IAAIE,WAAW,CAACD,MAAZ,IAAsB,CAA1B,EAA6B;MAC3B;IACD;;IACD,MAAME,QAAQ,GAAGD,WAAW,CAACL,KAAZ,CAAkB,GAAlB,CAAjB;IACA,MAAMO,IAAI,GAAGD,QAAQ,CAAC,CAAD,CAArB;IACA,MAAME,IAAI,GAAGC,QAAQ,CAACH,QAAQ,CAAC,CAAD,CAAT,EAAc,EAAd,CAArB;;IACA,IAAII,KAAK,CAACF,IAAD,CAAT,EAAiB;MACf,MAAM,IAAIG,KAAJ,qCAAuCT,iBAAvC,eAA6DV,MAA7D,EAAN;IACD;;IACD,IAAIe,IAAI,KAAK,SAAb,EAAwB;MACtBX,MAAM,CAACY,IAAD,CAAN,GAAeH,WAAf;IACD,CAFD,MAEO;MACLR,QAAQ,CAACW,IAAD,CAAR,GAAiBH,WAAjB;IACD;EACF;;EAGD,MAAMO,KAAK,GAAGC,cAAc,CAACpB,GAAD,CAA5B;EAEA,OAAO;IACLE,UAAU,EAAEO,iBADP;IAELN,MAAM,EAAEkB,YAAY,CAAClB,MAAD,EAASgB,KAAT,CAFf;IAGLf,QAAQ,EAAEiB,YAAY,CAACjB,QAAD,EAAWe,KAAX;EAHjB,CAAP;AAKD;;AAGD,SAASE,YAAT,CAAsBlB,MAAtB,EAA8BgB,KAA9B,EAAqC;EACnC,IAAIG,OAAO,GAAG,EAAd;;EACA,KAAK,IAAIZ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGS,KAAK,CAACR,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;IACrC,MAAMK,IAAI,GAAGI,KAAK,CAACT,CAAD,CAAlB;;IACA,IAAI,CAACP,MAAM,CAACO,CAAC,GAAG,CAAL,CAAP,IAAkB,CAACP,MAAM,CAACO,CAAC,GAAG,CAAL,CAAzB,IAAoC,CAACP,MAAM,CAACO,CAAC,GAAG,CAAL,CAA/C,EAAwD;MACtD;IACD;;IACDY,OAAO,cAAOP,IAAP,OAAP;;IACA,IAAIZ,MAAM,CAACO,CAAC,GAAG,CAAL,CAAV,EAAmB;MACjB,MAAMa,KAAK,GAAGpB,MAAM,CAACO,CAAC,GAAG,CAAL,CAApB;MACA,MAAMG,QAAQ,GAAGU,KAAK,CAAChB,KAAN,CAAY,GAAZ,EAAiB,CAAjB,CAAjB;MACA,MAAMO,IAAI,GAAGD,QAAQ,CAAC,CAAD,CAArB;MACA,MAAMW,MAAM,GAAGR,QAAQ,CAACH,QAAQ,CAAC,CAAD,CAAT,EAAc,EAAd,CAAR,IAA6B,CAA5C;MACA,MAAMY,GAAG,GAAGF,KAAK,CAACG,SAAN,CAAgBb,QAAQ,CAACc,IAAT,CAAc,GAAd,EAAmBhB,MAAnB,GAA4B,CAA5C,EAA+CiB,IAA/C,EAAZ;MACAN,OAAO,IAAIO,OAAO,eAAQf,IAAR,eAAiBW,GAAjB,WAA4BD,MAA5B,CAAlB;IACD;EACF;;EACD,OAAOF,OAAP;AACD;;AAWD,SAASF,cAAT,CAAwBU,MAAxB,EAAyD;EAAA,IAAzBC,KAAyB,uEAAjB,CAAiB;EAAA,IAAdC,KAAc,uEAAN,IAAM;EACvD,MAAMb,KAAK,GAAGW,MAAM,CAACvB,KAAP,CAAa,OAAb,CAAd;EACA,MAAM0B,SAAS,GAAGC,MAAM,CAACf,KAAK,CAACR,MAAN,GAAeoB,KAAf,GAAuB,CAAxB,CAAN,CAAiCpB,MAAnD;EACA,OAAOQ,KAAK,CAACgB,GAAN,CAAU,CAACpB,IAAD,EAAOL,CAAP,KAAa;IAC5B,MAAM0B,UAAU,GAAGF,MAAM,CAACxB,CAAC,GAAGqB,KAAL,CAAzB;IACA,MAAMM,MAAM,GAAGD,UAAU,CAACzB,MAA1B;IACA,MAAM2B,MAAM,GAAGT,OAAO,CAACO,UAAD,EAAaH,SAAS,GAAGI,MAAzB,CAAtB;IACA,OAAOC,MAAM,GAAGN,KAAT,GAAiBjB,IAAxB;EACD,CALM,CAAP;AAMD;;AAQD,SAASc,OAAT,CAAiBC,MAAjB,EAAyBO,MAAzB,EAAiC;EAC/B,IAAIE,MAAM,GAAG,EAAb;;EACA,KAAK,IAAI7B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG2B,MAApB,EAA4B,EAAE3B,CAA9B,EAAiC;IAC/B6B,MAAM,IAAI,GAAV;EACD;;EACD,iBAAUA,MAAV,SAAmBT,MAAnB;AACD"}