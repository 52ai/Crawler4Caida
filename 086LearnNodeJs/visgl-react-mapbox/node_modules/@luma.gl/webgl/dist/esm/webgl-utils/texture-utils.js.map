{"version":3,"file":"texture-utils.js","names":["Texture2D","TextureCube","Texture3D","Framebuffer","assert","cloneTextureFrom","refTexture","overrides","TextureType","constructor","gl","width","height","format","type","dataFormat","border","mipmaps","textureOptions","Object","assign","toFramebuffer","texture","opts","id","framebuffer","attachments"],"sources":["../../../src/webgl-utils/texture-utils.js"],"sourcesContent":["// TODO: Two subdirectories must not depend on each other (classes vs utils)!\nimport Texture2D from '../classes/texture-2d';\nimport TextureCube from '../classes/texture-cube';\nimport Texture3D from '../classes/texture-3d';\nimport Framebuffer from '../classes/framebuffer';\nimport GL from '@luma.gl/constants';\nimport {assert} from '../utils/assert';\n\n// Clone a new texture object from a reference texture object.\n/** @type {import('./texture-utils').cloneTextureFrom} */\nexport function cloneTextureFrom(refTexture, overrides) {\n  assert(\n    refTexture instanceof Texture2D ||\n      refTexture instanceof TextureCube ||\n      refTexture instanceof Texture3D\n  );\n\n  const TextureType = refTexture.constructor;\n\n  // @ts-expect-error\n  const {gl, width, height, format, type, dataFormat, border, mipmaps} = refTexture;\n\n  const textureOptions = Object.assign(\n    {\n      width,\n      height,\n      format,\n      type,\n      dataFormat,\n      border,\n      mipmaps\n    },\n    overrides\n  );\n\n  // TODO: move this to `Texture` class as instance method and use this.constructor\n  // @ts-expect-error\n  return new TextureType(gl, textureOptions);\n}\n\n// Wraps a given texture into a framebuffer object, that can be further used\n// to read data from the texture object.\n/** @type {import('./texture-utils').toFramebuffer} */\nexport function toFramebuffer(texture, opts) {\n  const {gl, width, height, id} = texture;\n  const framebuffer = new Framebuffer(\n    gl,\n    Object.assign({}, opts, {\n      id: `framebuffer-for-${id}`,\n      width,\n      height,\n      attachments: {\n        [GL.COLOR_ATTACHMENT0]: texture\n      }\n    })\n  );\n  return framebuffer;\n}\n"],"mappings":"AACA,OAAOA,SAAP,MAAsB,uBAAtB;AACA,OAAOC,WAAP,MAAwB,yBAAxB;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AACA,OAAOC,WAAP,MAAwB,wBAAxB;AAEA,SAAQC,MAAR,QAAqB,iBAArB;AAIA,OAAO,SAASC,gBAAT,CAA0BC,UAA1B,EAAsCC,SAAtC,EAAiD;EACtDH,MAAM,CACJE,UAAU,YAAYN,SAAtB,IACEM,UAAU,YAAYL,WADxB,IAEEK,UAAU,YAAYJ,SAHpB,CAAN;EAMA,MAAMM,WAAW,GAAGF,UAAU,CAACG,WAA/B;EAGA,MAAM;IAACC,EAAD;IAAKC,KAAL;IAAYC,MAAZ;IAAoBC,MAApB;IAA4BC,IAA5B;IAAkCC,UAAlC;IAA8CC,MAA9C;IAAsDC;EAAtD,IAAiEX,UAAvE;EAEA,MAAMY,cAAc,GAAGC,MAAM,CAACC,MAAP,CACrB;IACET,KADF;IAEEC,MAFF;IAGEC,MAHF;IAIEC,IAJF;IAKEC,UALF;IAMEC,MANF;IAOEC;EAPF,CADqB,EAUrBV,SAVqB,CAAvB;EAeA,OAAO,IAAIC,WAAJ,CAAgBE,EAAhB,EAAoBQ,cAApB,CAAP;AACD;AAKD,OAAO,SAASG,aAAT,CAAuBC,OAAvB,EAAgCC,IAAhC,EAAsC;EAC3C,MAAM;IAACb,EAAD;IAAKC,KAAL;IAAYC,MAAZ;IAAoBY;EAApB,IAA0BF,OAAhC;EACA,MAAMG,WAAW,GAAG,IAAItB,WAAJ,CAClBO,EADkB,EAElBS,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBG,IAAlB,EAAwB;IACtBC,EAAE,4BAAqBA,EAArB,CADoB;IAEtBb,KAFsB;IAGtBC,MAHsB;IAItBc,WAAW,EAAE;MACX,SAAwBJ;IADb;EAJS,CAAxB,CAFkB,CAApB;EAWA,OAAOG,WAAP;AACD"}