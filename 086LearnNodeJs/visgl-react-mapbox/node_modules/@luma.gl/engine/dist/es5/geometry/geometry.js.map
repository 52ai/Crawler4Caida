{"version":3,"file":"geometry.js","names":["DRAW_MODE","POINTS","LINES","LINE_LOOP","LINE_STRIP","TRIANGLES","TRIANGLE_STRIP","TRIANGLE_FAN","Geometry","props","id","uid","drawMode","attributes","indices","vertexCount","userData","_setAttributes","_calculateVertexCount","attributeName","ArrayBuffer","isView","value","size","attribute","assert","_print","isIndexed","undefined","Object","assign","length","Infinity","constant","Math","min","Number","isFinite"],"sources":["../../../src/geometry/geometry.js"],"sourcesContent":["import {uid, assert} from '@luma.gl/webgl';\n\n// Rendering primitives - specify how to extract primitives from vertices.\n// NOTE: These are numerically identical to the corresponding WebGL/OpenGL constants\nexport const DRAW_MODE = {\n  POINTS: 0x0000, // draw single points.\n  LINES: 0x0001, // draw lines. Each vertex connects to the one after it.\n  LINE_LOOP: 0x0002, // draw lines. Each set of two vertices is treated as a separate line segment.\n  LINE_STRIP: 0x0003, // draw a connected group of line segments from the first vertex to the last\n  TRIANGLES: 0x0004, // draw triangles. Each set of three vertices creates a separate triangle.\n  TRIANGLE_STRIP: 0x0005, // draw a connected group of triangles.\n  TRIANGLE_FAN: 0x0006 // draw a connected group of triangles.\n  // Each vertex connects to the previous and the first vertex in the fan.\n};\n\nexport default class Geometry {\n  static get DRAW_MODE() {\n    return DRAW_MODE;\n  }\n\n  constructor(props = {}) {\n    const {\n      id = uid('geometry'),\n      drawMode = DRAW_MODE.TRIANGLES,\n      attributes = {},\n      indices = null,\n      vertexCount = null\n    } = props;\n\n    this.id = id;\n    this.drawMode = drawMode | 0;\n    this.attributes = {};\n    this.userData = {};\n\n    this._setAttributes(attributes, indices);\n\n    this.vertexCount = vertexCount || this._calculateVertexCount(this.attributes, this.indices);\n\n    // stubRemovedMethods(this, [\n    //   'setNeedsRedraw', 'needsRedraw', 'setAttributes'\n    // ], 'Immutable');\n\n    // stubRemovedMethods(this, [\n    //   'hasAttribute', 'getAttribute', 'getArray'\n    // ], 'Use geometry.attributes and geometry.indices');\n\n    // deprecateMethods(this, ['getAttributes'])\n  }\n\n  get mode() {\n    return this.drawMode;\n  }\n\n  getVertexCount() {\n    return this.vertexCount;\n  }\n\n  // Return an object with all attributes plus indices added as a field.\n  getAttributes() {\n    return this.indices ? {indices: this.indices, ...this.attributes} : this.attributes;\n  }\n\n  // PRIVATE\n\n  _print(attributeName) {\n    return `Geometry ${this.id} attribute ${attributeName}`;\n  }\n\n  // Attribute\n  // value: typed array\n  // type: indices, vertices, uvs\n  // size: elements per vertex\n  // target: WebGL buffer type (string or constant)\n  _setAttributes(attributes, indices) {\n    if (indices) {\n      this.indices = ArrayBuffer.isView(indices) ? {value: indices, size: 1} : indices;\n    }\n\n    for (const attributeName in attributes) {\n      let attribute = attributes[attributeName];\n\n      // Wrap \"unwrapped\" arrays and try to autodetect their type\n      attribute = ArrayBuffer.isView(attribute) ? {value: attribute} : attribute;\n\n      assert(\n        ArrayBuffer.isView(attribute.value),\n        `${this._print(attributeName)}: must be typed array or object with value as typed array`\n      );\n\n      if ((attributeName === 'POSITION' || attributeName === 'positions') && !attribute.size) {\n        attribute.size = 3;\n      }\n\n      // Move indices to separate field\n      if (attributeName === 'indices') {\n        assert(!this.indices);\n        this.indices = attribute;\n      } else {\n        this.attributes[attributeName] = attribute;\n      }\n    }\n\n    if (this.indices && this.indices.isIndexed !== undefined) {\n      this.indices = Object.assign({}, this.indices);\n      delete this.indices.isIndexed;\n    }\n\n    return this;\n  }\n\n  _calculateVertexCount(attributes, indices) {\n    if (indices) {\n      return indices.value.length;\n    }\n    let vertexCount = Infinity;\n    for (const attributeName in attributes) {\n      const attribute = attributes[attributeName];\n      const {value, size, constant} = attribute;\n      if (!constant && value && size >= 1) {\n        vertexCount = Math.min(vertexCount, value.length / size);\n      }\n    }\n\n    assert(Number.isFinite(vertexCount));\n    return vertexCount;\n  }\n}\n"],"mappings":"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"}