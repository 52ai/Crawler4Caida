{"version":3,"file":"texture-transform.js","names":["SRC_TEX_PARAMETER_OVERRIDES","FS_OUTPUT_VARIABLE","TextureTransform","gl","props","id","currentIndex","_swapTexture","targetTextureVarying","targetTextureType","samplerTextureMap","bindings","resources","_initialize","Object","seal","updatedModelProps","_processVertexShader","assign","opts","sourceBuffers","sourceTextures","framebuffer","targetTexture","attributes","uniforms","parameters","discard","hasSourceTextures","hasTargetTexture","transform_elementID","elementIDBuffer","sampler","textureName","_setSourceTextureParameters","sizeUniforms","getSizeUniforms","sourceTextureMap","viewport","width","height","_getNextIndex","_setupTextures","packed","pixels","readPixelsToArray","ArrayType","constructor","channelCount","typeToChannelCount","packedPixels","length","packCount","i","j","currentResources","ownTexture","delete","_targetTextureVarying","textureOrReference","Texture2D","refTexture","_targetRefTexName","_createNewTexture","_sourceTextures","_targetTexture","_createTargetTexture","keys","_updateBindings","_updateElementIDBuffer","elementCount","elementIds","Float32Array","forEach","_","index","array","Buffer","data","accessor","size","setData","_updateBinding","_swapTextures","nextIndex","binding","update","attachments","resizeAttachments","resize","Framebuffer","name","setParameters","texture","cloneTextureFrom","pixelStore","updateForTextures","vs","inject","combinedInject","combineInjects","fs","_fs","getPassthroughFS","version","getShaderVersion","input","inputType","output","modules","transformModule","concat"],"sources":["../../../src/transform/texture-transform.js"],"sourcesContent":["/** @typedef {import('./transform').TransformProps} TransformProps */\nimport GL from '@luma.gl/constants';\n\nimport {\n  cloneTextureFrom,\n  readPixelsToArray,\n  getShaderVersion,\n  Buffer,\n  Texture2D,\n  Framebuffer\n} from '@luma.gl/webgl';\n\nimport {\n  _transform as transformModule,\n  getPassthroughFS,\n  typeToChannelCount,\n  combineInjects\n} from '@luma.gl/shadertools';\n\nimport {updateForTextures, getSizeUniforms} from './transform-shader-utils';\n\n// TODO: move these constants to transform-shader-utils\n// Texture parameters needed so sample can precisely pick pixel for given element id.\nconst SRC_TEX_PARAMETER_OVERRIDES = {\n  [GL.TEXTURE_MIN_FILTER]: GL.NEAREST,\n  [GL.TEXTURE_MAG_FILTER]: GL.NEAREST,\n  [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n  [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE\n};\nconst FS_OUTPUT_VARIABLE = 'transform_output';\n\nexport default class TextureTransform {\n  constructor(gl, props = {}) {\n    this.gl = gl;\n    this.id = this.currentIndex = 0;\n    this._swapTexture = null;\n    this.targetTextureVarying = null;\n    this.targetTextureType = null;\n    this.samplerTextureMap = null;\n    this.bindings = []; // each element is an object : {sourceTextures, targetTexture, framebuffer}\n\n    this.resources = {}; // resources to be deleted\n\n    this._initialize(props);\n    Object.seal(this);\n  }\n\n  updateModelProps(props = {}) {\n    const updatedModelProps = this._processVertexShader(props);\n    return Object.assign({}, props, updatedModelProps);\n  }\n\n  getDrawOptions(opts = {}) {\n    const {sourceBuffers, sourceTextures, framebuffer, targetTexture} = this.bindings[\n      this.currentIndex\n    ];\n\n    const attributes = Object.assign({}, sourceBuffers, opts.attributes);\n    const uniforms = Object.assign({}, opts.uniforms);\n    const parameters = Object.assign({}, opts.parameters);\n    let discard = opts.discard;\n\n    if (this.hasSourceTextures || this.hasTargetTexture) {\n      attributes.transform_elementID = this.elementIDBuffer;\n\n      for (const sampler in this.samplerTextureMap) {\n        const textureName = this.samplerTextureMap[sampler];\n        uniforms[sampler] = sourceTextures[textureName];\n      }\n      this._setSourceTextureParameters();\n      // get texture size uniforms\n      const sizeUniforms = getSizeUniforms({\n        sourceTextureMap: sourceTextures,\n        targetTextureVarying: this.targetTextureVarying,\n        targetTexture\n      });\n      Object.assign(uniforms, sizeUniforms);\n    }\n\n    if (this.hasTargetTexture) {\n      discard = false;\n      parameters.viewport = [0, 0, framebuffer.width, framebuffer.height];\n    }\n\n    return {attributes, framebuffer, uniforms, discard, parameters};\n  }\n\n  swap() {\n    if (this._swapTexture) {\n      this.currentIndex = this._getNextIndex();\n      return true;\n    }\n    return false;\n  }\n\n  // update source and/or feedbackBuffers\n  update(opts = {}) {\n    this._setupTextures(opts);\n  }\n\n  // returns current target texture\n  getTargetTexture() {\n    const {targetTexture} = this.bindings[this.currentIndex];\n    return targetTexture;\n  }\n\n  getData({packed = false} = {}) {\n    const {framebuffer} = this.bindings[this.currentIndex];\n    const pixels = readPixelsToArray(framebuffer);\n\n    if (!packed) {\n      return pixels;\n    }\n\n    // readPixels returns 4 elements for each pixel, pack the elements when requested\n    const ArrayType = pixels.constructor;\n    const channelCount = typeToChannelCount(this.targetTextureType);\n    // @ts-ignore\n    const packedPixels = new ArrayType((pixels.length * channelCount) / 4);\n    let packCount = 0;\n    for (let i = 0; i < pixels.length; i += 4) {\n      for (let j = 0; j < channelCount; j++) {\n        packedPixels[packCount++] = pixels[i + j];\n      }\n    }\n    return packedPixels;\n  }\n\n  // returns current framebuffer object that is being used.\n  getFramebuffer() {\n    const currentResources = this.bindings[this.currentIndex];\n    return currentResources.framebuffer;\n  }\n\n  // Delete owned resources.\n  delete() {\n    if (this.ownTexture) {\n      this.ownTexture.delete();\n    }\n    if (this.elementIDBuffer) {\n      this.elementIDBuffer.delete();\n    }\n  }\n\n  // Private\n\n  _initialize(props = {}) {\n    const {_targetTextureVarying, _swapTexture} = props;\n    this._swapTexture = _swapTexture;\n    this.targetTextureVarying = _targetTextureVarying;\n    this.hasTargetTexture = _targetTextureVarying;\n    this._setupTextures(props);\n  }\n\n  // auto create target texture if requested\n  _createTargetTexture(props) {\n    const {sourceTextures, textureOrReference} = props;\n    if (textureOrReference instanceof Texture2D) {\n      return textureOrReference;\n    }\n    // 'targetTexture' is a reference souce texture.\n    const refTexture = sourceTextures[textureOrReference];\n    if (!refTexture) {\n      return null;\n    }\n\n    // save reference texture name, when corresponding source texture is updated\n    // we also update target texture.\n    this._targetRefTexName = textureOrReference;\n\n    return this._createNewTexture(refTexture);\n  }\n\n  /** @param {TransformProps} props */\n  _setupTextures(props = {}) {\n    const {sourceBuffers, _sourceTextures = {}, _targetTexture} = props;\n    const targetTexture = this._createTargetTexture({\n      sourceTextures: _sourceTextures,\n      textureOrReference: _targetTexture\n    });\n    this.hasSourceTextures =\n      this.hasSourceTextures || (_sourceTextures && Object.keys(_sourceTextures).length > 0);\n    this._updateBindings({sourceBuffers, sourceTextures: _sourceTextures, targetTexture});\n    if ('elementCount' in props) {\n      this._updateElementIDBuffer(props.elementCount);\n    }\n  }\n\n  _updateElementIDBuffer(elementCount) {\n    if (typeof elementCount !== 'number' || this.elementCount >= elementCount) {\n      return;\n    }\n    // NOTE: using float so this will work with GLSL 1.0 shaders.\n    const elementIds = new Float32Array(elementCount);\n    elementIds.forEach((_, index, array) => {\n      array[index] = index;\n    });\n    if (!this.elementIDBuffer) {\n      this.elementIDBuffer = new Buffer(this.gl, {\n        data: elementIds,\n        accessor: {size: 1}\n      });\n    } else {\n      this.elementIDBuffer.setData({data: elementIds});\n    }\n    this.elementCount = elementCount;\n  }\n\n  _updateBindings(opts) {\n    this.bindings[this.currentIndex] = this._updateBinding(this.bindings[this.currentIndex], opts);\n    if (this._swapTexture) {\n      const {sourceTextures, targetTexture} = this._swapTextures(this.bindings[this.currentIndex]);\n      const nextIndex = this._getNextIndex();\n      this.bindings[nextIndex] = this._updateBinding(this.bindings[nextIndex], {\n        sourceTextures,\n        targetTexture\n      });\n    }\n  }\n\n  _updateBinding(binding, opts) {\n    const {sourceBuffers, sourceTextures, targetTexture} = opts;\n    if (!binding) {\n      binding = {\n        sourceBuffers: {},\n        sourceTextures: {},\n        targetTexture: null\n      };\n    }\n    Object.assign(binding.sourceTextures, sourceTextures);\n    Object.assign(binding.sourceBuffers, sourceBuffers);\n    if (targetTexture) {\n      binding.targetTexture = targetTexture;\n\n      const {width, height} = targetTexture;\n      const {framebuffer} = binding;\n      if (framebuffer) {\n        // First update texture without re-sizing attachments\n        framebuffer.update({\n          attachments: {[GL.COLOR_ATTACHMENT0]: targetTexture},\n          resizeAttachments: false\n        });\n        // Resize to new taget texture size\n        framebuffer.resize({width, height});\n      } else {\n        binding.framebuffer = new Framebuffer(this.gl, {\n          id: `transform-framebuffer`,\n          width,\n          height,\n          attachments: {\n            [GL.COLOR_ATTACHMENT0]: targetTexture\n          }\n        });\n      }\n    }\n    return binding;\n  }\n\n  // set texture filtering parameters on source textures.\n  _setSourceTextureParameters() {\n    const index = this.currentIndex;\n    const {sourceTextures} = this.bindings[index];\n    for (const name in sourceTextures) {\n      sourceTextures[name].setParameters(SRC_TEX_PARAMETER_OVERRIDES);\n    }\n  }\n\n  _swapTextures(opts) {\n    if (!this._swapTexture) {\n      return null;\n    }\n    const sourceTextures = Object.assign({}, opts.sourceTextures);\n    sourceTextures[this._swapTexture] = opts.targetTexture;\n\n    const targetTexture = opts.sourceTextures[this._swapTexture];\n\n    return {sourceTextures, targetTexture};\n  }\n\n  // Create a buffer and add to list of buffers to be deleted.\n  _createNewTexture(refTexture) {\n    const texture = cloneTextureFrom(refTexture, {\n      parameters: {\n        [GL.TEXTURE_MIN_FILTER]: GL.NEAREST,\n        [GL.TEXTURE_MAG_FILTER]: GL.NEAREST,\n        [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n        [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE\n      },\n      pixelStore: {\n        [GL.UNPACK_FLIP_Y_WEBGL]: false\n      }\n    });\n\n    // thre can only be one target texture\n    if (this.ownTexture) {\n      this.ownTexture.delete();\n    }\n    this.ownTexture = texture;\n\n    return texture;\n  }\n\n  _getNextIndex() {\n    return (this.currentIndex + 1) % 2;\n  }\n\n  // build and return shader releated parameters\n  _processVertexShader(props = {}) {\n    const {sourceTextures, targetTexture} = this.bindings[this.currentIndex];\n    // @ts-ignore TODO - uniforms is not present\n    const {vs, uniforms, targetTextureType, inject, samplerTextureMap} = updateForTextures({\n      vs: props.vs,\n      sourceTextureMap: sourceTextures,\n      targetTextureVarying: this.targetTextureVarying,\n      targetTexture\n    });\n    const combinedInject = combineInjects([props.inject || {}, inject]);\n    this.targetTextureType = targetTextureType;\n    this.samplerTextureMap = samplerTextureMap;\n    const fs =\n      props._fs ||\n      getPassthroughFS({\n        version: getShaderVersion(vs),\n        input: this.targetTextureVarying,\n        inputType: targetTextureType,\n        output: FS_OUTPUT_VARIABLE\n      });\n    const modules =\n      this.hasSourceTextures || this.targetTextureVarying\n        ? [transformModule].concat(props.modules || [])\n        : props.modules;\n    return {vs, fs, modules, uniforms, inject: combinedInject};\n  }\n}\n"],"mappings":"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"}