(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("deck"));
	else if(typeof define === 'function' && define.amd)
		define(["deck"], factory);
	else if(typeof exports === 'object')
		exports["deck"] = factory(require("deck"));
	else
		root["deck"] = factory(root["deck"]);
})(window, function(__WEBPACK_EXTERNAL_MODULE__deck_gl_core__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./bundle.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./bundle.ts":
/*!*******************!*\
  !*** ./bundle.ts ***!
  \*******************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

const MapboxUtils = __webpack_require__(/*! ./src */ "./src/index.ts"); // @ts-ignore (2339) undefined property


const deck = globalThis.deck || {}; // Check if peer dependencies are included

if (!deck.Layer) {
  throw new Error('@deck.gl/core is not found');
}

module.exports = Object.assign(deck, MapboxUtils);

/***/ }),

/***/ "./src/deck-utils.ts":
/*!***************************!*\
  !*** ./src/deck-utils.ts ***!
  \***************************/
/*! exports provided: getDeckInstance, addLayer, removeLayer, updateLayer, drawLayer, getViewState */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getDeckInstance", function() { return getDeckInstance; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "addLayer", function() { return addLayer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "removeLayer", function() { return removeLayer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "updateLayer", function() { return updateLayer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "drawLayer", function() { return drawLayer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getViewState", function() { return getViewState; });
/* harmony import */ var _deck_gl_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @deck.gl/core */ "@deck.gl/core");
/* harmony import */ var _deck_gl_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_deck_gl_core__WEBPACK_IMPORTED_MODULE_0__);

function getDeckInstance({
  map,
  gl,
  deck
}) {
  // Only create one deck instance per context
  if (map.__deck) {
    return map.__deck;
  }

  const customRender = deck?.props._customRender;
  const deckProps = {
    useDevicePixels: true,
    _customRender: () => {
      map.triggerRepaint(); // customRender may be subscribed by DeckGL React component to update child props
      // make sure it is still called
      // Hack - do not pass a redraw reason here to prevent the React component from clearing the context
      // Rerender will be triggered by MapboxLayer's render()

      customRender?.('');
    },
    // TODO: import these defaults from a single source of truth
    parameters: {
      depthMask: true,
      depthTest: true,
      blend: true,
      blendFunc: [gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA],
      polygonOffsetFill: true,
      depthFunc: gl.LEQUAL,
      blendEquation: gl.FUNC_ADD
    },
    views: deck && deck.props.views || [new _deck_gl_core__WEBPACK_IMPORTED_MODULE_0__["MapView"]({
      id: 'mapbox'
    })]
  };
  let deckInstance;

  if (!deck || deck.props.gl === gl) {
    // deck is using the WebGLContext created by mapbox
    // block deck from setting the canvas size
    Object.assign(deckProps, {
      gl,
      width: null,
      height: null,
      touchAction: 'unset',
      viewState: getViewState(map)
    }); // If using the WebGLContext created by deck (React use case), we use deck's viewState to drive the map.
    // Otherwise (pure JS use case), we use the map's viewState to drive deck.

    map.on('move', () => onMapMove(deckInstance, map));
  }

  if (deck) {
    deckInstance = deck;
    deck.setProps(deckProps);
    deck.userData.isExternal = true;
  } else {
    deckInstance = new _deck_gl_core__WEBPACK_IMPORTED_MODULE_0__["Deck"](deckProps);
    map.on('remove', () => {
      deckInstance.finalize();
      map.__deck = null;
    });
  }

  deckInstance.userData.mapboxLayers = new Set();
  deckInstance.userData.mapboxVersion = getMapboxVersion(map);
  map.__deck = deckInstance;
  map.on('render', () => {
    if (deckInstance.isInitialized) afterRender(deckInstance, map);
  });
  return deckInstance;
}
function addLayer(deck, layer) {
  deck.userData.mapboxLayers.add(layer);
  updateLayers(deck);
}
function removeLayer(deck, layer) {
  deck.userData.mapboxLayers.delete(layer);
  updateLayers(deck);
}
function updateLayer(deck, layer) {
  updateLayers(deck);
}
function drawLayer(deck, map, layer) {
  let {
    currentViewport
  } = deck.userData;
  let clearStack = false;

  if (!currentViewport) {
    // This is the first layer drawn in this render cycle.
    // Generate viewport from the current map state.
    currentViewport = getViewport(deck, map, true);
    deck.userData.currentViewport = currentViewport;
    clearStack = true;
  }

  if (!deck.isInitialized) {
    return;
  }

  deck._drawLayers('mapbox-repaint', {
    viewports: [currentViewport],
    layerFilter: ({
      layer: deckLayer
    }) => layer.id === deckLayer.id,
    clearStack,
    clearCanvas: false
  });
}
function getViewState(map) {
  const {
    lng,
    lat
  } = map.getCenter();
  return {
    // Longitude returned by getCenter can be outside of [-180, 180] when zooming near the anti meridian
    // https://github.com/visgl/deck.gl/issues/6894
    longitude: (lng + 540) % 360 - 180,
    latitude: lat,
    zoom: map.getZoom(),
    bearing: map.getBearing(),
    pitch: map.getPitch(),
    padding: map.getPadding(),
    repeat: map.getRenderWorldCopies()
  };
}

function getMapboxVersion(map) {
  // parse mapbox version string
  let major = 0;
  let minor = 0; // @ts-ignore (2339) undefined property

  const version = map.version;

  if (version) {
    [major, minor] = version.split('.').slice(0, 2).map(Number);
  }

  return {
    major,
    minor
  };
}

function getViewport(deck, map, useMapboxProjection = true) {
  const {
    mapboxVersion
  } = deck.userData;
  return new _deck_gl_core__WEBPACK_IMPORTED_MODULE_0__["WebMercatorViewport"](Object.assign({
    id: 'mapbox',
    x: 0,
    y: 0,
    width: deck.width,
    height: deck.height
  }, getViewState(map), useMapboxProjection ? {
    // match mapbox's projection matrix
    // A change of near plane was made in 1.3.0
    // https://github.com/mapbox/mapbox-gl-js/pull/8502
    nearZMultiplier: mapboxVersion.major === 1 && mapboxVersion.minor >= 3 || mapboxVersion.major >= 2 ? 0.02 : 1 / (deck.height || 1)
  } : {
    // use deck.gl's own default
    nearZMultiplier: 0.1
  }));
}

function afterRender(deck, map) {
  const {
    mapboxLayers,
    isExternal
  } = deck.userData;

  if (isExternal) {
    // Draw non-Mapbox layers
    const mapboxLayerIds = Array.from(mapboxLayers, layer => layer.id);
    const deckLayers = Object(_deck_gl_core__WEBPACK_IMPORTED_MODULE_0__["_flatten"])(deck.props.layers, Boolean);
    const hasNonMapboxLayers = deckLayers.some(layer => layer && !mapboxLayerIds.includes(layer.id));
    let viewports = deck.getViewports();
    const mapboxViewportIdx = viewports.findIndex(vp => vp.id === 'mapbox');
    const hasNonMapboxViews = viewports.length > 1 || mapboxViewportIdx < 0;

    if (hasNonMapboxLayers || hasNonMapboxViews) {
      if (mapboxViewportIdx >= 0) {
        viewports = viewports.slice();
        viewports[mapboxViewportIdx] = getViewport(deck, map, false);
      }

      deck._drawLayers('mapbox-repaint', {
        viewports,
        layerFilter: params => (!deck.props.layerFilter || deck.props.layerFilter(params)) && (params.viewport.id !== 'mapbox' || !mapboxLayerIds.includes(params.layer.id)),
        clearCanvas: false
      });
    }
  } // End of render cycle, clear generated viewport


  deck.userData.currentViewport = null;
}

function onMapMove(deck, map) {
  deck.setProps({
    viewState: getViewState(map)
  }); // Camera changed, will trigger a map repaint right after this
  // Clear any change flag triggered by setting viewState so that deck does not request
  // a second repaint

  deck.needsRedraw({
    clearRedrawFlags: true
  });
}

function updateLayers(deck) {
  if (deck.userData.isExternal) {
    return;
  }

  const layers = [];
  deck.userData.mapboxLayers.forEach(deckLayer => {
    const LayerType = deckLayer.props.type;
    const layer = new LayerType(deckLayer.props);
    layers.push(layer);
  });
  deck.setProps({
    layers
  });
}

/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/*! exports provided: MapboxLayer, MapboxOverlay */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _mapbox_layer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./mapbox-layer */ "./src/mapbox-layer.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MapboxLayer", function() { return _mapbox_layer__WEBPACK_IMPORTED_MODULE_0__["default"]; });

/* harmony import */ var _mapbox_overlay__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./mapbox-overlay */ "./src/mapbox-overlay.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MapboxOverlay", function() { return _mapbox_overlay__WEBPACK_IMPORTED_MODULE_1__["default"]; });




/***/ }),

/***/ "./src/mapbox-layer.ts":
/*!*****************************!*\
  !*** ./src/mapbox-layer.ts ***!
  \*****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return MapboxLayer; });
/* harmony import */ var _deck_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./deck-utils */ "./src/deck-utils.ts");
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }


class MapboxLayer {
  /* eslint-disable no-this-before-super */
  constructor(props) {
    _defineProperty(this, "id", void 0);

    _defineProperty(this, "type", void 0);

    _defineProperty(this, "renderingMode", void 0);

    _defineProperty(this, "map", void 0);

    _defineProperty(this, "deck", void 0);

    _defineProperty(this, "props", void 0);

    if (!props.id) {
      throw new Error('Layer must have an unique id');
    }

    this.id = props.id;
    this.type = 'custom';
    this.renderingMode = props.renderingMode || '3d';
    this.map = null;
    this.deck = null;
    this.props = props;
  }
  /* Mapbox custom layer methods */


  onAdd(map, gl) {
    this.map = map;
    this.deck = Object(_deck_utils__WEBPACK_IMPORTED_MODULE_0__["getDeckInstance"])({
      map,
      gl,
      deck: this.props.deck
    });
    Object(_deck_utils__WEBPACK_IMPORTED_MODULE_0__["addLayer"])(this.deck, this);
  }

  onRemove() {
    if (this.deck) {
      Object(_deck_utils__WEBPACK_IMPORTED_MODULE_0__["removeLayer"])(this.deck, this);
    }
  }

  setProps(props) {
    // id cannot be changed
    Object.assign(this.props, props, {
      id: this.id
    }); // safe guard in case setProps is called before onAdd

    if (this.deck) {
      Object(_deck_utils__WEBPACK_IMPORTED_MODULE_0__["updateLayer"])(this.deck, this);
    }
  }

  render() {
    Object(_deck_utils__WEBPACK_IMPORTED_MODULE_0__["drawLayer"])(this.deck, this.map, this);
  }

}

/***/ }),

/***/ "./src/mapbox-overlay.ts":
/*!*******************************!*\
  !*** ./src/mapbox-overlay.ts ***!
  \*******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return MapboxOverlay; });
/* harmony import */ var _deck_gl_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @deck.gl/core */ "@deck.gl/core");
/* harmony import */ var _deck_gl_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_deck_gl_core__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _deck_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./deck-utils */ "./src/deck-utils.ts");
/* harmony import */ var _resolve_layers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./resolve-layers */ "./src/resolve-layers.ts");
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }





/**
 * Implements Mapbox [IControl](https://docs.mapbox.com/mapbox-gl-js/api/markers/#icontrol) interface
 * Renders deck.gl layers over the base map and automatically synchronizes with the map's camera
 */
class MapboxOverlay {
  constructor(props) {
    _defineProperty(this, "_props", void 0);

    _defineProperty(this, "_deck", void 0);

    _defineProperty(this, "_map", void 0);

    _defineProperty(this, "_container", void 0);

    _defineProperty(this, "_interleaved", void 0);

    _defineProperty(this, "_handleStyleChange", () => {
      Object(_resolve_layers__WEBPACK_IMPORTED_MODULE_2__["resolveLayers"])(this._map, this._deck, this._props.layers, this._props.layers);
    });

    _defineProperty(this, "_updateContainerSize", () => {
      if (this._map && this._container) {
        const {
          clientWidth,
          clientHeight
        } = this._map.getContainer();

        Object.assign(this._container.style, {
          width: `${clientWidth}px`,
          height: `${clientHeight}px`
        });
      }
    });

    _defineProperty(this, "_updateViewState", () => {
      const deck = this._deck;

      if (deck) {
        // @ts-ignore (2345) map is always defined if deck is
        deck.setProps({
          viewState: Object(_deck_utils__WEBPACK_IMPORTED_MODULE_1__["getViewState"])(this._map)
        }); // Redraw immediately if view state has changed

        deck.redraw();
      }
    });

    _defineProperty(this, "_handleMouseEvent", event => {
      const deck = this._deck;

      if (!deck) {
        return;
      }

      const mockEvent = {
        type: event.type,
        offsetCenter: event.point,
        srcEvent: event
      };

      switch (event.type) {
        case 'click':
          mockEvent.tapCount = 1; // Hack: because we do not listen to pointer down, perform picking now

          deck._onPointerDown(mockEvent);

          deck._onEvent(mockEvent);

          break;

        case 'dblclick':
          mockEvent.type = 'click';
          mockEvent.tapCount = 2;

          deck._onEvent(mockEvent);

          break;

        case 'mousemove':
          mockEvent.type = 'pointermove';

          deck._onPointerMove(mockEvent);

          break;

        case 'mouseout':
          mockEvent.type = 'pointerleave';

          deck._onPointerMove(mockEvent);

          break;

        default:
          return;
      }
    });

    const {
      interleaved = false,
      ...otherProps
    } = props;
    this._interleaved = interleaved;
    this._props = otherProps;
  }
  /** Update (partial) props of the underlying Deck instance. */


  setProps(props) {
    if (this._interleaved && props.layers) {
      Object(_resolve_layers__WEBPACK_IMPORTED_MODULE_2__["resolveLayers"])(this._map, this._deck, this._props.layers, props.layers);
    }

    Object.assign(this._props, props);

    if (this._deck) {
      this._deck.setProps(this._props);
    }
  }
  /** Called when the control is added to a map */


  onAdd(map) {
    this._map = map;
    return this._interleaved ? this._onAddInterleaved(map) : this._onAddOverlaid(map);
  }

  _onAddOverlaid(map) {
    /* global document */
    const container = document.createElement('div');
    Object.assign(container.style, {
      position: 'absolute',
      left: 0,
      top: 0,
      pointerEvents: 'none'
    });
    this._container = container;
    this._deck = new _deck_gl_core__WEBPACK_IMPORTED_MODULE_0__["Deck"]({ ...this._props,
      parent: container,
      viewState: Object(_deck_utils__WEBPACK_IMPORTED_MODULE_1__["getViewState"])(map)
    });
    map.on('resize', this._updateContainerSize);
    map.on('render', this._updateViewState);
    map.on('mousemove', this._handleMouseEvent);
    map.on('mouseout', this._handleMouseEvent);
    map.on('click', this._handleMouseEvent);
    map.on('dblclick', this._handleMouseEvent);

    this._updateContainerSize();

    return container;
  }

  _onAddInterleaved(map) {
    this._deck = new _deck_gl_core__WEBPACK_IMPORTED_MODULE_0__["Deck"]({ ...this._props,
      // @ts-ignore non-public map property
      gl: map.painter.context.gl
    });
    map.on('styledata', this._handleStyleChange);
    Object(_resolve_layers__WEBPACK_IMPORTED_MODULE_2__["resolveLayers"])(map, this._deck, [], this._props.layers);
    return document.createElement('div');
  }
  /** Called when the control is removed from a map */


  onRemove() {
    const map = this._map;

    if (map) {
      if (this._interleaved) {
        this._onRemoveInterleaved(map);
      } else {
        this._onRemoveOverlaid(map);
      }
    }

    this._deck?.finalize();
    this._deck = undefined;
    this._map = undefined;
    this._container = undefined;
  }

  _onRemoveOverlaid(map) {
    map.off('resize', this._updateContainerSize);
    map.off('render', this._updateViewState);
    map.off('mousemove', this._handleMouseEvent);
    map.off('mouseout', this._handleMouseEvent);
    map.off('click', this._handleMouseEvent);
    map.off('dblclick', this._handleMouseEvent);
  }

  _onRemoveInterleaved(map) {
    map.off('styledata', this._handleStyleChange);
    Object(_resolve_layers__WEBPACK_IMPORTED_MODULE_2__["resolveLayers"])(map, this._deck, this._props.layers, []);
  }

  getDefaultPosition() {
    return 'top-left';
  }
  /** Forwards the Deck.pickObject method */


  pickObject(params) {
    Object(_deck_gl_core__WEBPACK_IMPORTED_MODULE_0__["assert"])(this._deck);
    return this._deck.pickObject(params);
  }
  /** Forwards the Deck.pickMultipleObjects method */


  pickMultipleObjects(params) {
    Object(_deck_gl_core__WEBPACK_IMPORTED_MODULE_0__["assert"])(this._deck);
    return this._deck.pickMultipleObjects(params);
  }
  /** Forwards the Deck.pickObjects method */


  pickObjects(params) {
    Object(_deck_gl_core__WEBPACK_IMPORTED_MODULE_0__["assert"])(this._deck);
    return this._deck.pickObjects(params);
  }
  /** Remove from map and releases all resources */


  finalize() {
    if (this._map) {
      this._map.removeControl(this);
    }
  }

}

/***/ }),

/***/ "./src/resolve-layers.ts":
/*!*******************************!*\
  !*** ./src/resolve-layers.ts ***!
  \*******************************/
/*! exports provided: resolveLayers */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "resolveLayers", function() { return resolveLayers; });
/* harmony import */ var _deck_gl_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @deck.gl/core */ "@deck.gl/core");
/* harmony import */ var _deck_gl_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_deck_gl_core__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _mapbox_layer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./mapbox-layer */ "./src/mapbox-layer.ts");


const UNDEFINED_BEFORE_ID = '__UNDEFINED__';
/** Insert Deck layers into the mapbox Map according to the user-defined order */

function resolveLayers(map, deck, oldLayers, newLayers) {
  // Wait until map style is loaded
  // @ts-ignore non-public map property
  if (!map || !deck || !map.style || !map.style._loaded) {
    return;
  }

  const layers = Object(_deck_gl_core__WEBPACK_IMPORTED_MODULE_0__["_flatten"])(newLayers, Boolean);

  if (oldLayers !== newLayers) {
    // Step 1: remove layers that no longer exist
    const prevLayers = Object(_deck_gl_core__WEBPACK_IMPORTED_MODULE_0__["_flatten"])(oldLayers, Boolean);
    const prevLayerIds = new Set(prevLayers.map(l => l.id));

    for (const layer of layers) {
      prevLayerIds.delete(layer.id);
    }

    for (const id of prevLayerIds) {
      if (map.getLayer(id)) {
        map.removeLayer(id);
      }
    }
  } // Step 2: add missing layers


  for (const layer of layers) {
    const mapboxLayer = map.getLayer(layer.id);

    if (mapboxLayer) {
      // @ts-expect-error not typed
      mapboxLayer.implementation.setProps(layer.props);
    } else {
      map.addLayer(new _mapbox_layer__WEBPACK_IMPORTED_MODULE_1__["default"]({
        id: layer.id,
        deck
      }), // @ts-expect-error beforeId is not defined in LayerProps
      layer.props.beforeId);
    }
  } // Step 3: check the order of layers
  // If beforeId is defined, the deck layer should always render before the mapbox layer [beforeId]
  // If beforeId is not defined, the deck layer should appear after all mapbox layers
  // When two deck layers share the same beforeId, they are rendered in the order that is passed into Deck props.layers
  // @ts-ignore non-public map property


  const mapLayers = map.style._order; // Group deck layers by beforeId

  const layerGroups = {};

  for (const layer of layers) {
    // @ts-expect-error beforeId is not defined in LayerProps
    let {
      beforeId
    } = layer.props;

    if (!beforeId || !mapLayers.includes(beforeId)) {
      beforeId = UNDEFINED_BEFORE_ID;
    }

    layerGroups[beforeId] = layerGroups[beforeId] || [];
    layerGroups[beforeId].push(layer.id);
  }

  for (const beforeId in layerGroups) {
    const layerGroup = layerGroups[beforeId];
    let lastLayerIndex = beforeId === UNDEFINED_BEFORE_ID ? mapLayers.length : mapLayers.indexOf(beforeId);
    let lastLayerId = beforeId === UNDEFINED_BEFORE_ID ? undefined : beforeId;

    for (let i = layerGroup.length - 1; i >= 0; i--) {
      const layerId = layerGroup[i];
      const layerIndex = mapLayers.indexOf(layerId);

      if (layerIndex !== lastLayerIndex - 1) {
        map.moveLayer(layerId, lastLayerId);

        if (layerIndex > lastLayerIndex) {
          // The last layer's index have changed
          lastLayerIndex++;
        }
      }

      lastLayerIndex--;
      lastLayerId = layerId;
    }
  }
}

/***/ }),

/***/ "@deck.gl/core":
/*!***********************!*\
  !*** external "deck" ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__deck_gl_core__;

/***/ })

/******/ });
});