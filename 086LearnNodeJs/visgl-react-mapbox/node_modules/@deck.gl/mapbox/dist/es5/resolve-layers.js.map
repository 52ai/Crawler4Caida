{"version":3,"sources":["../../src/resolve-layers.ts"],"names":["UNDEFINED_BEFORE_ID","resolveLayers","map","deck","oldLayers","newLayers","style","_loaded","layers","Boolean","prevLayers","prevLayerIds","Set","l","id","layer","delete","getLayer","removeLayer","mapboxLayer","implementation","setProps","props","addLayer","MapboxLayer","beforeId","mapLayers","_order","layerGroups","includes","push","layerGroup","lastLayerIndex","length","indexOf","lastLayerId","undefined","i","layerId","layerIndex","moveLayer"],"mappings":"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","sourcesContent":["import {_flatten as flatten} from '@deck.gl/core';\nimport MapboxLayer from './mapbox-layer';\n\nimport type {Deck, LayersList, Layer} from '@deck.gl/core';\nimport type {Map} from 'mapbox-gl';\n\nconst UNDEFINED_BEFORE_ID = '__UNDEFINED__';\n\n/** Insert Deck layers into the mapbox Map according to the user-defined order */\nexport function resolveLayers(\n  map?: Map,\n  deck?: Deck,\n  oldLayers?: LayersList,\n  newLayers?: LayersList\n) {\n  // Wait until map style is loaded\n  // @ts-ignore non-public map property\n  if (!map || !deck || !map.style || !map.style._loaded) {\n    return;\n  }\n\n  const layers = flatten(newLayers, Boolean) as Layer[];\n\n  if (oldLayers !== newLayers) {\n    // Step 1: remove layers that no longer exist\n    const prevLayers = flatten(oldLayers, Boolean) as Layer[];\n    const prevLayerIds = new Set<string>(prevLayers.map(l => l.id));\n\n    for (const layer of layers) {\n      prevLayerIds.delete(layer.id);\n    }\n\n    for (const id of prevLayerIds) {\n      if (map.getLayer(id)) {\n        map.removeLayer(id);\n      }\n    }\n  }\n\n  // Step 2: add missing layers\n  for (const layer of layers) {\n    const mapboxLayer = map.getLayer(layer.id) as MapboxLayer<Layer>;\n    if (mapboxLayer) {\n      // @ts-expect-error not typed\n      mapboxLayer.implementation.setProps(layer.props);\n    } else {\n      map.addLayer(\n        new MapboxLayer({id: layer.id, deck}),\n        // @ts-expect-error beforeId is not defined in LayerProps\n        layer.props.beforeId\n      );\n    }\n  }\n\n  // Step 3: check the order of layers\n  // If beforeId is defined, the deck layer should always render before the mapbox layer [beforeId]\n  // If beforeId is not defined, the deck layer should appear after all mapbox layers\n  // When two deck layers share the same beforeId, they are rendered in the order that is passed into Deck props.layers\n  // @ts-ignore non-public map property\n  const mapLayers: string[] = map.style._order;\n\n  // Group deck layers by beforeId\n  const layerGroups: Record<string, string[]> = {};\n  for (const layer of layers) {\n    // @ts-expect-error beforeId is not defined in LayerProps\n    let {beforeId} = layer.props;\n    if (!beforeId || !mapLayers.includes(beforeId)) {\n      beforeId = UNDEFINED_BEFORE_ID;\n    }\n    layerGroups[beforeId] = layerGroups[beforeId] || [];\n    layerGroups[beforeId].push(layer.id);\n  }\n\n  for (const beforeId in layerGroups) {\n    const layerGroup = layerGroups[beforeId];\n    let lastLayerIndex =\n      beforeId === UNDEFINED_BEFORE_ID ? mapLayers.length : mapLayers.indexOf(beforeId);\n    let lastLayerId = beforeId === UNDEFINED_BEFORE_ID ? undefined : beforeId;\n    for (let i = layerGroup.length - 1; i >= 0; i--) {\n      const layerId = layerGroup[i];\n      const layerIndex = mapLayers.indexOf(layerId);\n      if (layerIndex !== lastLayerIndex - 1) {\n        map.moveLayer(layerId, lastLayerId);\n        if (layerIndex > lastLayerIndex) {\n          // The last layer's index have changed\n          lastLayerIndex++;\n        }\n      }\n      lastLayerIndex--;\n      lastLayerId = layerId;\n    }\n  }\n}\n"],"file":"resolve-layers.js"}