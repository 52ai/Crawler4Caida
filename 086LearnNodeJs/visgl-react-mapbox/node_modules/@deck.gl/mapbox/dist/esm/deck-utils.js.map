{"version":3,"sources":["../../src/deck-utils.ts"],"names":["Deck","WebMercatorViewport","MapView","_flatten","flatten","getDeckInstance","map","gl","deck","__deck","customRender","props","_customRender","deckProps","useDevicePixels","triggerRepaint","parameters","depthMask","depthTest","blend","blendFunc","polygonOffsetFill","depthFunc","blendEquation","views","id","deckInstance","Object","assign","width","height","touchAction","viewState","getViewState","on","onMapMove","setProps","userData","isExternal","finalize","mapboxLayers","Set","mapboxVersion","getMapboxVersion","isInitialized","afterRender","addLayer","layer","add","updateLayers","removeLayer","delete","updateLayer","drawLayer","currentViewport","clearStack","getViewport","_drawLayers","viewports","layerFilter","deckLayer","clearCanvas","lng","lat","getCenter","longitude","latitude","zoom","getZoom","bearing","getBearing","pitch","getPitch","padding","getPadding","repeat","getRenderWorldCopies","major","minor","version","split","slice","Number","useMapboxProjection","x","y","nearZMultiplier","mapboxLayerIds","Array","from","deckLayers","layers","Boolean","hasNonMapboxLayers","some","includes","getViewports","mapboxViewportIdx","findIndex","vp","hasNonMapboxViews","length","params","viewport","needsRedraw","clearRedrawFlags","forEach","LayerType","type","push"],"mappings":"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","sourcesContent":["import {Deck, WebMercatorViewport, MapView, _flatten as flatten} from '@deck.gl/core';\nimport type {DeckProps, MapViewState, Layer} from '@deck.gl/core';\nimport type MapboxLayer from './mapbox-layer';\nimport type {Map} from 'mapbox-gl';\n\ntype UserData = {\n  isExternal: boolean;\n  currentViewport?: WebMercatorViewport | null;\n  mapboxLayers: Set<MapboxLayer<any>>;\n  mapboxVersion: {minor: number; major: number};\n};\n\nexport function getDeckInstance({\n  map,\n  gl,\n  deck\n}: {\n  map: Map & {__deck?: Deck | null};\n  gl: WebGLRenderingContext;\n  deck?: Deck;\n}): Deck {\n  // Only create one deck instance per context\n  if (map.__deck) {\n    return map.__deck;\n  }\n\n  const customRender = deck?.props._customRender;\n\n  const deckProps: DeckProps = {\n    useDevicePixels: true,\n    _customRender: () => {\n      map.triggerRepaint();\n      // customRender may be subscribed by DeckGL React component to update child props\n      // make sure it is still called\n      // Hack - do not pass a redraw reason here to prevent the React component from clearing the context\n      // Rerender will be triggered by MapboxLayer's render()\n      customRender?.('');\n    },\n    // TODO: import these defaults from a single source of truth\n    parameters: {\n      depthMask: true,\n      depthTest: true,\n      blend: true,\n      blendFunc: [gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA],\n      polygonOffsetFill: true,\n      depthFunc: gl.LEQUAL,\n      blendEquation: gl.FUNC_ADD\n    },\n    views: (deck && deck.props.views) || [new MapView({id: 'mapbox'})]\n  };\n\n  let deckInstance: Deck;\n\n  if (!deck || deck.props.gl === gl) {\n    // deck is using the WebGLContext created by mapbox\n    // block deck from setting the canvas size\n    Object.assign(deckProps, {\n      gl,\n      width: null,\n      height: null,\n      touchAction: 'unset',\n      viewState: getViewState(map)\n    });\n    // If using the WebGLContext created by deck (React use case), we use deck's viewState to drive the map.\n    // Otherwise (pure JS use case), we use the map's viewState to drive deck.\n    map.on('move', () => onMapMove(deckInstance, map));\n  }\n\n  if (deck) {\n    deckInstance = deck;\n    deck.setProps(deckProps);\n    (deck.userData as UserData).isExternal = true;\n  } else {\n    deckInstance = new Deck(deckProps);\n    map.on('remove', () => {\n      deckInstance.finalize();\n      map.__deck = null;\n    });\n  }\n\n  (deckInstance.userData as UserData).mapboxLayers = new Set();\n  (deckInstance.userData as UserData).mapboxVersion = getMapboxVersion(map);\n  map.__deck = deckInstance;\n  map.on('render', () => {\n    if (deckInstance.isInitialized) afterRender(deckInstance, map);\n  });\n\n  return deckInstance;\n}\n\nexport function addLayer(deck: Deck, layer: MapboxLayer<any>): void {\n  (deck.userData as UserData).mapboxLayers.add(layer);\n  updateLayers(deck);\n}\n\nexport function removeLayer(deck: Deck, layer: MapboxLayer<any>): void {\n  (deck.userData as UserData).mapboxLayers.delete(layer);\n  updateLayers(deck);\n}\n\nexport function updateLayer(deck: Deck, layer: MapboxLayer<any>): void {\n  updateLayers(deck);\n}\n\nexport function drawLayer(deck: Deck, map: Map, layer: MapboxLayer<any>): void {\n  let {currentViewport} = deck.userData as UserData;\n  let clearStack: boolean = false;\n  if (!currentViewport) {\n    // This is the first layer drawn in this render cycle.\n    // Generate viewport from the current map state.\n    currentViewport = getViewport(deck, map, true);\n    (deck.userData as UserData).currentViewport = currentViewport;\n    clearStack = true;\n  }\n\n  if (!deck.isInitialized) {\n    return;\n  }\n\n  deck._drawLayers('mapbox-repaint', {\n    viewports: [currentViewport],\n    layerFilter: ({layer: deckLayer}) => layer.id === deckLayer.id,\n    clearStack,\n    clearCanvas: false\n  });\n}\n\nexport function getViewState(map: Map): MapViewState & {\n  repeat: boolean;\n  padding: {\n    left: number;\n    right: number;\n    top: number;\n    bottom: number;\n  };\n} {\n  const {lng, lat} = map.getCenter();\n  return {\n    // Longitude returned by getCenter can be outside of [-180, 180] when zooming near the anti meridian\n    // https://github.com/visgl/deck.gl/issues/6894\n    longitude: ((lng + 540) % 360) - 180,\n    latitude: lat,\n    zoom: map.getZoom(),\n    bearing: map.getBearing(),\n    pitch: map.getPitch(),\n    padding: map.getPadding(),\n    repeat: map.getRenderWorldCopies()\n  };\n}\n\nfunction getMapboxVersion(map: Map): {minor: number; major: number} {\n  // parse mapbox version string\n  let major = 0;\n  let minor = 0;\n  // @ts-ignore (2339) undefined property\n  const version: string = map.version;\n  if (version) {\n    [major, minor] = version.split('.').slice(0, 2).map(Number);\n  }\n  return {major, minor};\n}\n\nfunction getViewport(deck: Deck, map: Map, useMapboxProjection = true): WebMercatorViewport {\n  const {mapboxVersion} = deck.userData as UserData;\n\n  return new WebMercatorViewport(\n    Object.assign(\n      {\n        id: 'mapbox',\n        x: 0,\n        y: 0,\n        width: deck.width,\n        height: deck.height\n      },\n      getViewState(map),\n      useMapboxProjection\n        ? {\n            // match mapbox's projection matrix\n            // A change of near plane was made in 1.3.0\n            // https://github.com/mapbox/mapbox-gl-js/pull/8502\n            nearZMultiplier:\n              (mapboxVersion.major === 1 && mapboxVersion.minor >= 3) || mapboxVersion.major >= 2\n                ? 0.02\n                : 1 / (deck.height || 1)\n          }\n        : {\n            // use deck.gl's own default\n            nearZMultiplier: 0.1\n          }\n    )\n  );\n}\n\nfunction afterRender(deck: Deck, map: Map): void {\n  const {mapboxLayers, isExternal} = deck.userData as UserData;\n\n  if (isExternal) {\n    // Draw non-Mapbox layers\n    const mapboxLayerIds = Array.from(mapboxLayers, layer => layer.id);\n    const deckLayers = flatten(deck.props.layers, Boolean) as Layer[];\n    const hasNonMapboxLayers = deckLayers.some(\n      layer => layer && !mapboxLayerIds.includes(layer.id)\n    );\n    let viewports = deck.getViewports();\n    const mapboxViewportIdx = viewports.findIndex(vp => vp.id === 'mapbox');\n    const hasNonMapboxViews = viewports.length > 1 || mapboxViewportIdx < 0;\n\n    if (hasNonMapboxLayers || hasNonMapboxViews) {\n      if (mapboxViewportIdx >= 0) {\n        viewports = viewports.slice();\n        viewports[mapboxViewportIdx] = getViewport(deck, map, false);\n      }\n\n      deck._drawLayers('mapbox-repaint', {\n        viewports,\n        layerFilter: params =>\n          (!deck.props.layerFilter || deck.props.layerFilter(params)) &&\n          (params.viewport.id !== 'mapbox' || !mapboxLayerIds.includes(params.layer.id)),\n        clearCanvas: false\n      });\n    }\n  }\n\n  // End of render cycle, clear generated viewport\n  (deck.userData as UserData).currentViewport = null;\n}\n\nfunction onMapMove(deck: Deck, map: Map): void {\n  deck.setProps({\n    viewState: getViewState(map)\n  });\n  // Camera changed, will trigger a map repaint right after this\n  // Clear any change flag triggered by setting viewState so that deck does not request\n  // a second repaint\n  deck.needsRedraw({clearRedrawFlags: true});\n}\n\nfunction updateLayers(deck: Deck): void {\n  if ((deck.userData as UserData).isExternal) {\n    return;\n  }\n\n  const layers: Layer[] = [];\n  (deck.userData as UserData).mapboxLayers.forEach(deckLayer => {\n    const LayerType = deckLayer.props.type;\n    const layer = new LayerType(deckLayer.props);\n    layers.push(layer);\n  });\n  deck.setProps({layers});\n}\n"],"file":"deck-utils.js"}