{"version":3,"sources":["../../../src/tile-layer/tileset-2d.ts"],"names":["Tile2DHeader","getTileIndices","tileToBoundingBox","getCullBounds","RequestScheduler","Matrix4","equals","_memoize","memoize","TILE_STATE_VISITED","TILE_STATE_VISIBLE","STRATEGY_NEVER","STRATEGY_REPLACE","STRATEGY_DEFAULT","DEFAULT_CACHE_SCALE","STRATEGIES","updateTileStateDefault","updateTileStateReplace","Tileset2D","constructor","opts","onTileLoad","tile","maxCacheByteSize","_cacheByteSize","byteLength","_resizeCache","_requestScheduler","maxRequests","throttleRequests","_cache","Map","_tiles","_dirty","_viewport","_selectedTiles","_frameNumber","_modelMatrix","_modelMatrixInverse","setOptions","tiles","selectedTiles","isLoaded","every","needsReload","some","Object","assign","Number","isFinite","maxZoom","_maxZoom","Math","floor","minZoom","_minZoom","ceil","finalize","values","isLoading","abort","clear","reloadAll","id","keys","get","includes","delete","setNeedsReload","update","viewport","zRange","modelMatrix","modelMatrixAsMatrix4","isModelMatrixNew","_zRange","clone","invert","tileIndices","modelMatrixInverse","map","index","_getTile","_rebuildTree","changed","updateTileStates","_pruneRequests","isTileVisible","cullRect","isVisible","minX","minY","maxX","maxY","z","bbox","west","east","south","north","y0","min","top","bottom","y1","max","left","right","tileSize","extent","zoomOffset","getTileId","x","y","getTileZoom","getTileMetadata","getParentIndex","refinementStrategy","visibilities","Array","size","i","isSelected","from","abortCandidates","ongoingRequestCount","push","length","shift","parent","children","_getNearestAncestor","maxCacheSize","Infinity","overflown","onTileUnload","sort","t1","t2","zoom","create","set","loadData","getData","getTileData","requestScheduler","onLoad","onError","onTileError","allTiles","state","getPlaceholderInAncestors","getPlaceholderInChildren","Boolean","sortedTiles","child","startTile","content"],"mappings":"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","sourcesContent":["import Tile2DHeader from './tile-2d-header';\nimport {getTileIndices, tileToBoundingBox, getCullBounds} from './utils';\nimport {RequestScheduler} from '@loaders.gl/loader-utils';\nimport {Matrix4, equals} from '@math.gl/core';\nimport {Viewport} from '@deck.gl/core';\nimport {Bounds, TileIndex, ZRange} from './types';\nimport {TileLayerProps} from './tile-layer';\nimport {_memoize as memoize} from '@deck.gl/core';\n\n// bit masks\nconst TILE_STATE_VISITED = 1;\nconst TILE_STATE_VISIBLE = 2;\n/*\n   show cached parent tile if children are loading\n   +-----------+       +-----+            +-----+-----+\n   |           |       |     |            |     |     |\n   |           |       |     |            |     |     |\n   |           |  -->  +-----+-----+  ->  +-----+-----+\n   |           |             |     |      |     |     |\n   |           |             |     |      |     |     |\n   +-----------+             +-----+      +-----+-----+\n\n   show cached children tiles when parent is loading\n   +-------+----       +------------\n   |       |           |\n   |       |           |\n   |       |           |\n   +-------+----  -->  |\n   |       |           |\n */\n\nexport const STRATEGY_NEVER = 'never';\nexport const STRATEGY_REPLACE = 'no-overlap';\nexport const STRATEGY_DEFAULT = 'best-available';\n\nexport type RefinementStrategyFunction = (tiles: Tile2DHeader[]) => void;\nexport type RefinementStrategy =\n  | typeof STRATEGY_NEVER\n  | typeof STRATEGY_REPLACE\n  | typeof STRATEGY_DEFAULT\n  | RefinementStrategyFunction;\n\nconst DEFAULT_CACHE_SCALE = 5;\n\nconst STRATEGIES = {\n  [STRATEGY_DEFAULT]: updateTileStateDefault,\n  [STRATEGY_REPLACE]: updateTileStateReplace,\n  [STRATEGY_NEVER]: () => {}\n};\n\nexport type Tileset2DProps = Pick<\n  Required<TileLayerProps>,\n  | 'tileSize'\n  | 'maxCacheSize'\n  | 'maxCacheByteSize'\n  | 'refinementStrategy'\n  | 'extent'\n  | 'maxZoom'\n  | 'minZoom'\n  | 'maxRequests'\n  | 'zoomOffset'\n> & {\n  getTileData: NonNullable<TileLayerProps['getTileData']>;\n  onTileLoad: (tile: Tile2DHeader) => void;\n  onTileUnload: (tile: Tile2DHeader) => void;\n  onTileError: (error: any, tile: Tile2DHeader) => void;\n};\n\n/**\n * Manages loading and purging of tile data. This class caches recently visited tiles\n * and only creates new tiles if they are present.\n */\nexport default class Tileset2D {\n  private opts: Tileset2DProps;\n  private _requestScheduler: RequestScheduler;\n  private _cache: Map<string, Tile2DHeader>;\n  private _dirty: boolean;\n  private _tiles: Tile2DHeader[];\n\n  private _cacheByteSize: number;\n  private _viewport: Viewport | null;\n  private _zRange?: ZRange;\n  private _selectedTiles: Tile2DHeader[] | null;\n  private _frameNumber: number;\n  private _modelMatrix: Matrix4;\n  private _modelMatrixInverse: Matrix4;\n\n  private _maxZoom?: number;\n  private _minZoom?: number;\n\n  private onTileLoad: (tile: Tile2DHeader) => void;\n\n  /**\n   * Takes in a function that returns tile data, a cache size, and a max and a min zoom level.\n   * Cache size defaults to 5 * number of tiles in the current viewport\n   */\n  constructor(opts: Tileset2DProps) {\n    this.opts = opts;\n\n    this.onTileLoad = tile => {\n      this.opts.onTileLoad(tile);\n      if (this.opts.maxCacheByteSize) {\n        this._cacheByteSize += tile.byteLength;\n        this._resizeCache();\n      }\n    };\n\n    this._requestScheduler = new RequestScheduler({\n      maxRequests: opts.maxRequests,\n      throttleRequests: opts.maxRequests > 0\n    });\n\n    // Maps tile id in string {z}-{x}-{y} to a Tile object\n    this._cache = new Map();\n    this._tiles = [];\n    this._dirty = false;\n    this._cacheByteSize = 0;\n\n    // Cache the last processed viewport\n    this._viewport = null;\n    this._selectedTiles = null;\n    this._frameNumber = 0;\n\n    this._modelMatrix = new Matrix4();\n    this._modelMatrixInverse = new Matrix4();\n\n    this.setOptions(opts);\n  }\n\n  /* Public API */\n  get tiles() {\n    return this._tiles;\n  }\n\n  get selectedTiles(): Tile2DHeader[] | null {\n    return this._selectedTiles;\n  }\n\n  get isLoaded(): boolean {\n    return this._selectedTiles !== null && this._selectedTiles.every(tile => tile.isLoaded);\n  }\n\n  get needsReload(): boolean {\n    return this._selectedTiles !== null && this._selectedTiles.some(tile => tile.needsReload);\n  }\n\n  setOptions(opts: Tileset2DProps): void {\n    Object.assign(this.opts, opts);\n    if (Number.isFinite(opts.maxZoom)) {\n      this._maxZoom = Math.floor(opts.maxZoom as number);\n    }\n    if (Number.isFinite(opts.minZoom)) {\n      this._minZoom = Math.ceil(opts.minZoom as number);\n    }\n  }\n\n  // Clean up any outstanding tile requests.\n  finalize(): void {\n    for (const tile of this._cache.values()) {\n      if (tile.isLoading) {\n        tile.abort();\n      }\n    }\n    this._cache.clear();\n    this._tiles = [];\n    this._selectedTiles = null;\n  }\n\n  reloadAll(): void {\n    for (const id of this._cache.keys()) {\n      const tile = this._cache.get(id) as Tile2DHeader;\n      if (!this._selectedTiles || !this._selectedTiles.includes(tile)) {\n        this._cache.delete(id);\n      } else {\n        tile.setNeedsReload();\n      }\n    }\n  }\n\n  /**\n   * Update the cache with the given viewport and model matrix and triggers callback onUpdate.\n   */\n  update(\n    viewport: Viewport,\n    {zRange, modelMatrix}: {zRange?: ZRange; modelMatrix?: Matrix4} = {}\n  ): number {\n    const modelMatrixAsMatrix4 = new Matrix4(modelMatrix);\n    const isModelMatrixNew = !modelMatrixAsMatrix4.equals(this._modelMatrix);\n    if (\n      !this._viewport ||\n      !viewport.equals(this._viewport) ||\n      !equals(this._zRange, zRange) ||\n      isModelMatrixNew\n    ) {\n      if (isModelMatrixNew) {\n        this._modelMatrixInverse = modelMatrixAsMatrix4.clone().invert();\n        this._modelMatrix = modelMatrixAsMatrix4;\n      }\n      this._viewport = viewport;\n      this._zRange = zRange;\n      const tileIndices = this.getTileIndices({\n        viewport,\n        maxZoom: this._maxZoom,\n        minZoom: this._minZoom,\n        zRange,\n        modelMatrix: this._modelMatrix,\n        modelMatrixInverse: this._modelMatrixInverse\n      });\n      this._selectedTiles = tileIndices.map(index => this._getTile(index, true));\n\n      if (this._dirty) {\n        // Some new tiles are added\n        this._rebuildTree();\n      }\n      // Check for needed reloads explicitly even if the view/matrix has not changed.\n    } else if (this.needsReload) {\n      this._selectedTiles = this._selectedTiles!.map(tile => this._getTile(tile.index, true));\n    }\n\n    // Update tile states\n    const changed = this.updateTileStates();\n    this._pruneRequests();\n\n    if (this._dirty) {\n      // cache size is either the user defined maxSize or 5 * number of current tiles in the viewport.\n      this._resizeCache();\n    }\n\n    if (changed) {\n      this._frameNumber++;\n    }\n\n    return this._frameNumber;\n  }\n\n  isTileVisible(\n    tile: Tile2DHeader,\n    cullRect?: {x: number; y: number; width: number; height: number}\n  ): boolean {\n    if (!tile.isVisible) {\n      return false;\n    }\n\n    if (cullRect && this._viewport) {\n      const [minX, minY, maxX, maxY] = getCullBounds({\n        viewport: this._viewport,\n        z: this._zRange,\n        cullRect\n      });\n      const {bbox} = tile;\n      if ('west' in bbox) {\n        return bbox.west < maxX && bbox.east > minX && bbox.south < maxY && bbox.north > minY;\n      }\n      // top/bottom could be swapped depending on the indexing system\n      const y0 = Math.min(bbox.top, bbox.bottom);\n      const y1 = Math.max(bbox.top, bbox.bottom);\n      return bbox.left < maxX && bbox.right > minX && y0 < maxY && y1 > minY;\n    }\n    return true;\n  }\n\n  /* Public interface for subclassing */\n\n  /** Returns array of tile indices in the current viewport */\n  getTileIndices({\n    viewport,\n    maxZoom,\n    minZoom,\n    zRange,\n    modelMatrix,\n    modelMatrixInverse\n  }: {\n    viewport: Viewport;\n    maxZoom?: number;\n    minZoom?: number;\n    zRange: ZRange | undefined;\n    tileSize?: number;\n    modelMatrix?: Matrix4;\n    modelMatrixInverse?: Matrix4;\n    zoomOffset?: number;\n  }): TileIndex[] {\n    const {tileSize, extent, zoomOffset} = this.opts;\n    return getTileIndices({\n      viewport,\n      maxZoom,\n      minZoom,\n      zRange,\n      tileSize,\n      extent: extent as Bounds | undefined,\n      modelMatrix,\n      modelMatrixInverse,\n      zoomOffset\n    });\n  }\n\n  /** Returns unique string key for a tile index */\n  getTileId(index: TileIndex) {\n    return `${index.x}-${index.y}-${index.z}`;\n  }\n\n  /** Returns a zoom level for a tile index */\n  getTileZoom(index: TileIndex) {\n    return index.z;\n  }\n\n  /** Returns additional metadata to add to tile, bbox by default */\n  getTileMetadata(index: TileIndex): Record<string, any> {\n    const {tileSize} = this.opts;\n    // @ts-expect-error\n    return {bbox: tileToBoundingBox(this._viewport, index.x, index.y, index.z, tileSize)};\n  }\n\n  /** Returns index of the parent tile */\n  getParentIndex(index: TileIndex) {\n    const x = Math.floor(index.x / 2);\n    const y = Math.floor(index.y / 2);\n    const z = index.z - 1;\n    return {x, y, z};\n  }\n\n  // Returns true if any tile's visibility changed\n  private updateTileStates() {\n    const refinementStrategy = this.opts.refinementStrategy || STRATEGY_DEFAULT;\n\n    const visibilities = new Array(this._cache.size);\n    let i = 0;\n    // Reset state\n    for (const tile of this._cache.values()) {\n      // save previous state\n      visibilities[i++] = tile.isVisible;\n      tile.isSelected = false;\n      tile.isVisible = false;\n    }\n    // @ts-expect-error called only when _selectedTiles is already defined\n    for (const tile of this._selectedTiles) {\n      tile.isSelected = true;\n      tile.isVisible = true;\n    }\n\n    // Strategy-specific state logic\n    (typeof refinementStrategy === 'function'\n      ? refinementStrategy\n      : STRATEGIES[refinementStrategy])(Array.from(this._cache.values()));\n\n    i = 0;\n    // Check if any visibility has changed\n    for (const tile of this._cache.values()) {\n      if (visibilities[i++] !== tile.isVisible) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /* Private methods */\n\n  private _getCullBounds = memoize(getCullBounds);\n\n  private _pruneRequests(): void {\n    const {maxRequests} = this.opts;\n\n    const abortCandidates: Tile2DHeader[] = [];\n    let ongoingRequestCount = 0;\n    for (const tile of this._cache.values()) {\n      // Keep track of all the ongoing requests\n      if (tile.isLoading) {\n        ongoingRequestCount++;\n        if (!tile.isSelected && !tile.isVisible) {\n          abortCandidates.push(tile);\n        }\n      }\n    }\n\n    while (maxRequests > 0 && ongoingRequestCount > maxRequests && abortCandidates.length > 0) {\n      // There are too many ongoing requests, so abort some that are unselected\n      const tile = abortCandidates.shift()!;\n      tile.abort();\n      ongoingRequestCount--;\n    }\n  }\n\n  // This needs to be called every time some tiles have been added/removed from cache\n  private _rebuildTree() {\n    const {_cache} = this;\n\n    // Reset states\n    for (const tile of _cache.values()) {\n      tile.parent = null;\n      if (tile.children) {\n        tile.children.length = 0;\n      }\n    }\n\n    // Rebuild tree\n    for (const tile of _cache.values()) {\n      const parent = this._getNearestAncestor(tile);\n      tile.parent = parent;\n      if (parent?.children) {\n        parent.children.push(tile);\n      }\n    }\n  }\n\n  /**\n   * Clear tiles that are not visible when the cache is full\n   */\n  /* eslint-disable complexity */\n  private _resizeCache() {\n    const {_cache, opts} = this;\n\n    const maxCacheSize =\n      opts.maxCacheSize ||\n      // @ts-expect-error called only when selectedTiles is initialized\n      (opts.maxCacheByteSize ? Infinity : DEFAULT_CACHE_SCALE * this.selectedTiles.length);\n    const maxCacheByteSize = opts.maxCacheByteSize || Infinity;\n\n    const overflown = _cache.size > maxCacheSize || this._cacheByteSize > maxCacheByteSize;\n\n    if (overflown) {\n      for (const [id, tile] of _cache) {\n        if (!tile.isVisible) {\n          // delete tile\n          this._cacheByteSize -= opts.maxCacheByteSize ? tile.byteLength : 0;\n          _cache.delete(id);\n          this.opts.onTileUnload(tile);\n        }\n        if (_cache.size <= maxCacheSize && this._cacheByteSize <= maxCacheByteSize) {\n          break;\n        }\n      }\n      this._rebuildTree();\n      this._dirty = true;\n    }\n    if (this._dirty) {\n      // sort by zoom level so that smaller tiles are displayed on top\n      this._tiles = Array.from(this._cache.values()).sort((t1, t2) => t1.zoom - t2.zoom);\n\n      this._dirty = false;\n    }\n  }\n  /* eslint-enable complexity */\n\n  private _getTile(index: TileIndex, create: true): Tile2DHeader;\n  private _getTile(index: TileIndex, create?: false): Tile2DHeader | undefined;\n  private _getTile(index: TileIndex, create?: boolean): Tile2DHeader | undefined {\n    const id = this.getTileId(index);\n    let tile = this._cache.get(id);\n    let needsReload = false;\n\n    if (!tile && create) {\n      tile = new Tile2DHeader(index);\n      Object.assign(tile, this.getTileMetadata(tile.index));\n      Object.assign(tile, {id, zoom: this.getTileZoom(tile.index)});\n      needsReload = true;\n      this._cache.set(id, tile);\n      this._dirty = true;\n    } else if (tile && tile.needsReload) {\n      needsReload = true;\n    }\n    if (tile && needsReload) {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      tile.loadData({\n        getData: this.opts.getTileData,\n        requestScheduler: this._requestScheduler,\n        onLoad: this.onTileLoad,\n        onError: this.opts.onTileError\n      });\n    }\n\n    return tile;\n  }\n\n  _getNearestAncestor(tile: Tile2DHeader): Tile2DHeader | null {\n    const {_minZoom = 0} = this;\n\n    let index = tile.index;\n    while (this.getTileZoom(index) > _minZoom) {\n      index = this.getParentIndex(index);\n      const parent = this._getTile(index);\n      if (parent) {\n        return parent;\n      }\n    }\n    return null;\n  }\n}\n\n/* -- Refinement strategies --*/\n/* eslint-disable max-depth */\n\n// For all the selected && pending tiles:\n// - pick the closest ancestor as placeholder\n// - if no ancestor is visible, pick the closest children as placeholder\nfunction updateTileStateDefault(allTiles: Tile2DHeader[]) {\n  for (const tile of allTiles) {\n    tile.state = 0;\n  }\n  for (const tile of allTiles) {\n    if (tile.isSelected && !getPlaceholderInAncestors(tile)) {\n      getPlaceholderInChildren(tile);\n    }\n  }\n  for (const tile of allTiles) {\n    tile.isVisible = Boolean(tile.state! & TILE_STATE_VISIBLE);\n  }\n}\n\n// Until a selected tile and all its selected siblings are loaded, use the closest ancestor as placeholder\nfunction updateTileStateReplace(allTiles: Tile2DHeader[]) {\n  for (const tile of allTiles) {\n    tile.state = 0;\n  }\n  for (const tile of allTiles) {\n    if (tile.isSelected) {\n      getPlaceholderInAncestors(tile);\n    }\n  }\n  // Always process parents first\n  const sortedTiles = Array.from(allTiles).sort((t1, t2) => t1.zoom - t2.zoom);\n  for (const tile of sortedTiles) {\n    tile.isVisible = Boolean(tile.state! & TILE_STATE_VISIBLE);\n\n    if (tile.children && (tile.isVisible || tile.state! & TILE_STATE_VISITED)) {\n      // If the tile is rendered, or if the tile has been explicitly hidden, hide all of its children\n      for (const child of tile.children) {\n        child.state = TILE_STATE_VISITED;\n      }\n    } else if (tile.isSelected) {\n      getPlaceholderInChildren(tile);\n    }\n  }\n}\n\n// Walk up the tree until we find one ancestor that is loaded. Returns true if successful.\nfunction getPlaceholderInAncestors(startTile: Tile2DHeader) {\n  let tile: Tile2DHeader | null = startTile;\n  while (tile) {\n    if (tile.isLoaded || tile.content) {\n      tile.state! |= TILE_STATE_VISIBLE;\n      return true;\n    }\n    tile = tile.parent;\n  }\n  return false;\n}\n\n// Recursively set children as placeholder\nfunction getPlaceholderInChildren(tile) {\n  for (const child of tile.children) {\n    if (child.isLoaded || child.content) {\n      child.state |= TILE_STATE_VISIBLE;\n    } else {\n      getPlaceholderInChildren(child);\n    }\n  }\n}\n"],"file":"tileset-2d.js"}