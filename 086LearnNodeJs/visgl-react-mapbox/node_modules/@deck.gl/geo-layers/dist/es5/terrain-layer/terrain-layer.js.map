{"version":3,"sources":["../../../src/terrain-layer/terrain-layer.ts"],"names":["DUMMY_DATA","defaultProps","TileLayer","elevationData","urlType","texture","optional","meshMaxError","type","value","bounds","compare","color","elevationDecoder","rScaler","gScaler","bScaler","offset","workerUrl","wireframe","material","loaders","TerrainWorkerLoader","urlTemplateToUpdateTrigger","template","Array","isArray","join","TerrainLayer","props","oldProps","elevationDataChanged","isTiled","includes","setState","shouldReload","state","terrain","loadTerrain","log","removed","signal","loadOptions","getLoadOptions","skirtHeight","fetch","propName","layer","tile","viewport","context","dataUrl","textureUrl","bottomLeft","topRight","isGeospatial","bbox","projectFlat","west","south","east","north","left","bottom","right","top","surface","catch","_","Promise","resolve","all","SubLayerClass","getSubLayerClass","SimpleMeshLayer","data","mesh","_instanced","coordinateSystem","COORDINATE_SYSTEM","CARTESIAN","getPosition","d","getColor","tiles","zRange","ranges","map","content","filter","Boolean","arr","header","boundingBox","bound","length","minZ","Math","min","x","maxZ","max","tileSize","maxZoom","minZoom","extent","maxRequests","onTileLoad","onTileUnload","onTileError","maxCacheSize","maxCacheByteSize","refinementStrategy","getSubLayerProps","id","getTileData","getTiledTerrainData","bind","renderSubLayers","updateTriggers","onViewportLoad","CompositeLayer"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {\n  Color,\n  CompositeLayer,\n  CompositeLayerProps,\n  DefaultProps,\n  Layer,\n  LayersList,\n  log,\n  Material,\n  Texture,\n  UpdateParameters\n} from '@deck.gl/core';\nimport {SimpleMeshLayer} from '@deck.gl/mesh-layers';\nimport {COORDINATE_SYSTEM} from '@deck.gl/core';\nimport type {MeshAttributes} from '@loaders.gl/schema';\nimport {TerrainWorkerLoader} from '@loaders.gl/terrain';\nimport TileLayer, {TileLayerProps} from '../tile-layer/tile-layer';\nimport Tile2DHeader from '../tile-layer/tile-2d-header';\nimport {Bounds, GeoBoundingBox, TileBoundingBox, TileLoadProps, ZRange} from '../tile-layer/types';\nimport {urlType, getURLFromTemplate} from '../tile-layer/utils';\n\nconst DUMMY_DATA = [1];\n\nconst defaultProps: DefaultProps<TerrainLayerProps> = {\n  ...TileLayer.defaultProps,\n  // Image url that encodes height data\n  elevationData: urlType,\n  // Image url to use as texture\n  texture: {...urlType, optional: true},\n  // Martini error tolerance in meters, smaller number -> more detailed mesh\n  meshMaxError: {type: 'number', value: 4.0},\n  // Bounding box of the terrain image, [minX, minY, maxX, maxY] in world coordinates\n  bounds: {type: 'array', value: null, optional: true, compare: true},\n  // Color to use if texture is unavailable\n  color: {type: 'color', value: [255, 255, 255]},\n  // Object to decode height data, from (r, g, b) to height in meters\n  elevationDecoder: {\n    type: 'object',\n    value: {\n      rScaler: 1,\n      gScaler: 0,\n      bScaler: 0,\n      offset: 0\n    }\n  },\n  // Supply url to local terrain worker bundle. Only required if running offline and cannot access CDN.\n  workerUrl: {type: 'string', value: null},\n  // Same as SimpleMeshLayer wireframe\n  wireframe: false,\n  material: true,\n\n  loaders: [TerrainWorkerLoader]\n};\n\ntype URLTemplate = string | string[];\n\n// Turns array of templates into a single string to work around shallow change\nfunction urlTemplateToUpdateTrigger(template: URLTemplate | null): string {\n  if (Array.isArray(template)) {\n    return template.join(';');\n  }\n  return template || '';\n}\n\ntype ElevationDecoder = {rScaler: number; gScaler: number; bScaler: number; offset: number};\ntype TerrainLoadProps = {\n  bounds: Bounds;\n  elevationData: string | null;\n  elevationDecoder: ElevationDecoder;\n  meshMaxError: number;\n  signal?: AbortSignal;\n};\n\ntype MeshAndTexture = [MeshAttributes | null, Texture | null];\n\n/** All properties supported by TerrainLayer */\nexport type TerrainLayerProps = _TerrainLayerProps &\n  TileLayerProps<MeshAndTexture> &\n  CompositeLayerProps;\n\n/** Props added by the TerrainLayer */\ntype _TerrainLayerProps = {\n  /** Image url that encodes height data. **/\n  elevationData: URLTemplate;\n\n  /** Image url to use as texture. **/\n  texture?: URLTemplate | null;\n\n  /** Martini error tolerance in meters, smaller number -> more detailed mesh. **/\n  meshMaxError?: number;\n\n  /** Bounding box of the terrain image, [minX, minY, maxX, maxY] in world coordinates. **/\n  bounds?: Bounds | null;\n\n  /** Color to use if texture is unavailable. **/\n  color?: Color;\n\n  /** Object to decode height data, from (r, g, b) to height in meters. **/\n  elevationDecoder?: ElevationDecoder;\n\n  /** Whether to render the mesh in wireframe mode. **/\n  wireframe?: boolean;\n\n  /** Material props for lighting effect. **/\n  material?: Material;\n};\n\n/** Render mesh surfaces from height map images. */\nexport default class TerrainLayer<ExtraPropsT = {}> extends CompositeLayer<\n  ExtraPropsT & Required<_TerrainLayerProps & Required<TileLayerProps<MeshAndTexture>>>\n> {\n  static defaultProps = defaultProps;\n  static layerName = 'TerrainLayer';\n\n  state!: {\n    isTiled?: boolean;\n    terrain: MeshAttributes;\n    zRange?: ZRange | null;\n  };\n\n  updateState({props, oldProps}: UpdateParameters<this>): void {\n    const elevationDataChanged = props.elevationData !== oldProps.elevationData;\n    if (elevationDataChanged) {\n      const {elevationData} = props;\n      const isTiled =\n        elevationData &&\n        (Array.isArray(elevationData) ||\n          (elevationData.includes('{x}') && elevationData.includes('{y}')));\n      this.setState({isTiled});\n    }\n\n    // Reloading for single terrain mesh\n    const shouldReload =\n      elevationDataChanged ||\n      props.meshMaxError !== oldProps.meshMaxError ||\n      props.elevationDecoder !== oldProps.elevationDecoder ||\n      props.bounds !== oldProps.bounds;\n\n    if (!this.state.isTiled && shouldReload) {\n      // When state.isTiled, elevationData cannot be an array\n      const terrain = this.loadTerrain(props as TerrainLoadProps);\n      this.setState({terrain});\n    }\n\n    // TODO - remove in v9\n    // @ts-ignore\n    if (props.workerUrl) {\n      log.removed('workerUrl', 'loadOptions.terrain.workerUrl')();\n    }\n  }\n\n  loadTerrain({\n    elevationData,\n    bounds,\n    elevationDecoder,\n    meshMaxError,\n    signal\n  }: TerrainLoadProps): Promise<MeshAttributes> | null {\n    if (!elevationData) {\n      return null;\n    }\n    let loadOptions = this.getLoadOptions();\n    loadOptions = {\n      ...loadOptions,\n      terrain: {\n        skirtHeight: this.state.isTiled ? meshMaxError * 2 : 0,\n        ...loadOptions?.terrain,\n        bounds,\n        meshMaxError,\n        elevationDecoder\n      }\n    };\n    const {fetch} = this.props;\n    return fetch(elevationData, {propName: 'elevationData', layer: this, loadOptions, signal});\n  }\n\n  getTiledTerrainData(tile: TileLoadProps): Promise<MeshAndTexture> {\n    const {elevationData, fetch, texture, elevationDecoder, meshMaxError} = this.props;\n    const {viewport} = this.context;\n    const dataUrl = getURLFromTemplate(elevationData, tile);\n    const textureUrl = texture && getURLFromTemplate(texture, tile);\n\n    const {signal} = tile;\n    let bottomLeft = [0, 0] as [number, number];\n    let topRight = [0, 0] as [number, number];\n    if (viewport.isGeospatial) {\n      const bbox = tile.bbox as GeoBoundingBox;\n      bottomLeft = viewport.projectFlat([bbox.west, bbox.south]);\n      topRight = viewport.projectFlat([bbox.east, bbox.north]);\n    } else {\n      const bbox = tile.bbox as Exclude<TileBoundingBox, GeoBoundingBox>;\n      bottomLeft = [bbox.left, bbox.bottom];\n      topRight = [bbox.right, bbox.top];\n    }\n    const bounds: Bounds = [bottomLeft[0], bottomLeft[1], topRight[0], topRight[1]];\n\n    const terrain = this.loadTerrain({\n      elevationData: dataUrl,\n      bounds,\n      elevationDecoder,\n      meshMaxError,\n      signal\n    });\n    const surface = textureUrl\n      ? // If surface image fails to load, the tile should still be displayed\n        fetch(textureUrl, {propName: 'texture', layer: this, loaders: [], signal}).catch(_ => null)\n      : Promise.resolve(null);\n\n    return Promise.all([terrain, surface]);\n  }\n\n  renderSubLayers(\n    props: TileLayerProps<MeshAndTexture> & {\n      id: string;\n      data: MeshAndTexture;\n      tile: Tile2DHeader<MeshAndTexture>;\n    }\n  ) {\n    const SubLayerClass = this.getSubLayerClass('mesh', SimpleMeshLayer);\n\n    const {color, wireframe, material} = this.props;\n    const {data} = props;\n\n    if (!data) {\n      return null;\n    }\n\n    const [mesh, texture] = data;\n\n    return new SubLayerClass(props, {\n      data: DUMMY_DATA,\n      mesh,\n      texture,\n      _instanced: false,\n      coordinateSystem: COORDINATE_SYSTEM.CARTESIAN,\n      getPosition: d => [0, 0, 0],\n      getColor: color,\n      wireframe,\n      material\n    });\n  }\n\n  // Update zRange of viewport\n  onViewportLoad(tiles?: Tile2DHeader<MeshAndTexture>[]): void {\n    if (!tiles) {\n      return;\n    }\n\n    const {zRange} = this.state;\n    const ranges = tiles\n      .map(tile => tile.content)\n      .filter(Boolean)\n      .map(arr => {\n        // @ts-ignore\n        const bounds = arr[0].header.boundingBox;\n        return bounds.map(bound => bound[2]);\n      });\n    if (ranges.length === 0) {\n      return;\n    }\n    const minZ = Math.min(...ranges.map(x => x[0]));\n    const maxZ = Math.max(...ranges.map(x => x[1]));\n\n    if (!zRange || minZ < zRange[0] || maxZ > zRange[1]) {\n      this.setState({zRange: [minZ, maxZ]});\n    }\n  }\n\n  renderLayers(): Layer | null | LayersList {\n    const {\n      color,\n      material,\n      elevationData,\n      texture,\n      wireframe,\n      meshMaxError,\n      elevationDecoder,\n      tileSize,\n      maxZoom,\n      minZoom,\n      extent,\n      maxRequests,\n      onTileLoad,\n      onTileUnload,\n      onTileError,\n      maxCacheSize,\n      maxCacheByteSize,\n      refinementStrategy\n    } = this.props;\n\n    if (this.state.isTiled) {\n      return new TileLayer<MeshAndTexture>(\n        this.getSubLayerProps({\n          id: 'tiles'\n        }),\n        {\n          getTileData: this.getTiledTerrainData.bind(this),\n          renderSubLayers: this.renderSubLayers.bind(this),\n          updateTriggers: {\n            getTileData: {\n              elevationData: urlTemplateToUpdateTrigger(elevationData),\n              texture: urlTemplateToUpdateTrigger(texture),\n              meshMaxError,\n              elevationDecoder\n            }\n          },\n          onViewportLoad: this.onViewportLoad.bind(this),\n          zRange: this.state.zRange || null,\n          tileSize,\n          maxZoom,\n          minZoom,\n          extent,\n          maxRequests,\n          onTileLoad,\n          onTileUnload,\n          onTileError,\n          maxCacheSize,\n          maxCacheByteSize,\n          refinementStrategy\n        }\n      );\n    }\n\n    const SubLayerClass = this.getSubLayerClass('mesh', SimpleMeshLayer);\n    return new SubLayerClass(\n      this.getSubLayerProps({\n        id: 'mesh'\n      }),\n      {\n        data: DUMMY_DATA,\n        mesh: this.state.terrain,\n        texture,\n        _instanced: false,\n        getPosition: d => [0, 0, 0],\n        getColor: color,\n        material,\n        wireframe\n      }\n    );\n  }\n}\n"],"file":"terrain-layer.js"}