{"version":3,"sources":["../../../src/geohash-layer/geohash-utils.ts"],"names":["BASE32_CODES","BASE32_CODES_DICT","i","length","charAt","MIN_LAT","MAX_LAT","MIN_LON","MAX_LON","getGeohashBounds","geohash","isLon","maxLat","minLat","maxLon","minLon","mid","hashValue","l","code","toLowerCase","bits","bit","getGeohashPolygon","s","w","n","e"],"mappings":";;;;;;;;;;;;AAAA,IAAMA,YAAY,GAAG,kCAArB;AACA,IAAMC,iBAAiB,GAAG,EAA1B;;AACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,YAAY,CAACG,MAAjC,EAAyCD,CAAC,EAA1C,EAA8C;AAC5CD,EAAAA,iBAAiB,CAACD,YAAY,CAACI,MAAb,CAAoBF,CAApB,CAAD,CAAjB,GAA4CA,CAA5C;AACD;;AAED,IAAMG,OAAO,GAAG,CAAC,EAAjB;AACA,IAAMC,OAAO,GAAG,EAAhB;AACA,IAAMC,OAAO,GAAG,CAAC,GAAjB;AACA,IAAMC,OAAO,GAAG,GAAhB;;AAGO,SAASC,gBAAT,CAA0BC,OAA1B,EAAqD;AAC1D,MAAIC,KAAK,GAAG,IAAZ;AACA,MAAIC,MAAM,GAAGN,OAAb;AACA,MAAIO,MAAM,GAAGR,OAAb;AACA,MAAIS,MAAM,GAAGN,OAAb;AACA,MAAIO,MAAM,GAAGR,OAAb;AACA,MAAIS,GAAJ;AAEA,MAAIC,SAAS,GAAG,CAAhB;;AACA,OAAK,IAAIf,EAAC,GAAG,CAAR,EAAWgB,CAAC,GAAGR,OAAO,CAACP,MAA5B,EAAoCD,EAAC,GAAGgB,CAAxC,EAA2ChB,EAAC,EAA5C,EAAgD;AAC9C,QAAMiB,IAAI,GAAGT,OAAO,CAACR,EAAD,CAAP,CAAWkB,WAAX,EAAb;;AACAH,IAAAA,SAAS,GAAGhB,iBAAiB,CAACkB,IAAD,CAA7B;;AAEA,SAAK,IAAIE,IAAI,GAAG,CAAhB,EAAmBA,IAAI,IAAI,CAA3B,EAA8BA,IAAI,EAAlC,EAAsC;AACpC,UAAMC,GAAG,GAAIL,SAAS,IAAII,IAAd,GAAsB,CAAlC;;AACA,UAAIV,KAAJ,EAAW;AACTK,QAAAA,GAAG,GAAG,CAACF,MAAM,GAAGC,MAAV,IAAoB,CAA1B;;AACA,YAAIO,GAAG,KAAK,CAAZ,EAAe;AACbP,UAAAA,MAAM,GAAGC,GAAT;AACD,SAFD,MAEO;AACLF,UAAAA,MAAM,GAAGE,GAAT;AACD;AACF,OAPD,MAOO;AACLA,QAAAA,GAAG,GAAG,CAACJ,MAAM,GAAGC,MAAV,IAAoB,CAA1B;;AACA,YAAIS,GAAG,KAAK,CAAZ,EAAe;AACbT,UAAAA,MAAM,GAAGG,GAAT;AACD,SAFD,MAEO;AACLJ,UAAAA,MAAM,GAAGI,GAAT;AACD;AACF;;AACDL,MAAAA,KAAK,GAAG,CAACA,KAAT;AACD;AACF;;AAED,SAAO,CAACE,MAAD,EAASE,MAAT,EAAiBH,MAAjB,EAAyBE,MAAzB,CAAP;AACD;;AAEM,SAASS,iBAAT,CAA2Bb,OAA3B,EAAsD;AAC3D,0BAAqBD,gBAAgB,CAACC,OAAD,CAArC;AAAA;AAAA,MAAOc,CAAP;AAAA,MAAUC,CAAV;AAAA,MAAaC,CAAb;AAAA,MAAgBC,CAAhB;;AAEA,SAAO,CAACA,CAAD,EAAID,CAAJ,EAAOC,CAAP,EAAUH,CAAV,EAAaC,CAAb,EAAgBD,CAAhB,EAAmBC,CAAnB,EAAsBC,CAAtB,EAAyBC,CAAzB,EAA4BD,CAA5B,CAAP;AACD","sourcesContent":["const BASE32_CODES = '0123456789bcdefghjkmnpqrstuvwxyz';\nconst BASE32_CODES_DICT = {};\nfor (let i = 0; i < BASE32_CODES.length; i++) {\n  BASE32_CODES_DICT[BASE32_CODES.charAt(i)] = i;\n}\n\nconst MIN_LAT = -90;\nconst MAX_LAT = 90;\nconst MIN_LON = -180;\nconst MAX_LON = 180;\n\n// Adapted from ngeohash decode_bbox\nexport function getGeohashBounds(geohash: string): number[] {\n  let isLon = true;\n  let maxLat = MAX_LAT;\n  let minLat = MIN_LAT;\n  let maxLon = MAX_LON;\n  let minLon = MIN_LON;\n  let mid: number;\n\n  let hashValue = 0;\n  for (let i = 0, l = geohash.length; i < l; i++) {\n    const code = geohash[i].toLowerCase();\n    hashValue = BASE32_CODES_DICT[code];\n\n    for (let bits = 4; bits >= 0; bits--) {\n      const bit = (hashValue >> bits) & 1;\n      if (isLon) {\n        mid = (maxLon + minLon) / 2;\n        if (bit === 1) {\n          minLon = mid;\n        } else {\n          maxLon = mid;\n        }\n      } else {\n        mid = (maxLat + minLat) / 2;\n        if (bit === 1) {\n          minLat = mid;\n        } else {\n          maxLat = mid;\n        }\n      }\n      isLon = !isLon;\n    }\n  }\n\n  return [minLat, minLon, maxLat, maxLon];\n}\n\nexport function getGeohashPolygon(geohash: string): number[] {\n  const [s, w, n, e] = getGeohashBounds(geohash);\n\n  return [e, n, e, s, w, s, w, n, e, n];\n}\n"],"file":"geohash-utils.js"}