{"version":3,"sources":["../../../src/tile-layer/tile-2d-header.ts"],"names":["Tile2DHeader","index","isVisible","isSelected","parent","children","content","_loader","undefined","_abortController","_loaderId","_isLoaded","_isCancelled","_needsReload","isLoading","then","data","Boolean","result","byteLength","Number","isFinite","log","error","getData","requestScheduler","onLoad","onError","id","bbox","userData","zoom","loaderId","AbortController","signal","scheduleRequest","tile","requestToken","done","tileData","opts","_loadData","abort","isLoaded"],"mappings":"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","sourcesContent":["/* eslint-env browser */\nimport {Layer, log} from '@deck.gl/core';\nimport {RequestScheduler} from '@loaders.gl/loader-utils';\nimport {TileBoundingBox, TileIndex, TileLoadProps} from './types';\n\nexport type TileLoadDataProps<DataT = any> = {\n  requestScheduler: RequestScheduler;\n  getData: (props: TileLoadProps) => Promise<DataT>;\n  onLoad: (tile: Tile2DHeader<DataT>) => void;\n  onError: (error: any, tile: Tile2DHeader<DataT>) => void;\n};\n\nexport default class Tile2DHeader<DataT = any> {\n  index: TileIndex;\n  isVisible: boolean;\n  isSelected: boolean;\n  parent: Tile2DHeader | null;\n  children: Tile2DHeader[] | null;\n  content: DataT | null;\n  state?: number;\n  layers?: Layer[] | null;\n\n  id!: string; // assigned _always_ with result of `getTileId`\n  bbox!: TileBoundingBox; // assigned _always_ with result of `getTileMetadata`\n  zoom!: number; // assigned _always_ with result of `getTileZoom`\n  userData?: Record<string, any>; // _may be_ assigned with result of `getTileMetadata`\n\n  private _abortController: AbortController | null;\n  private _loader: Promise<void> | undefined;\n  private _loaderId: number;\n  private _isLoaded: boolean;\n  private _isCancelled: boolean;\n  private _needsReload: boolean;\n\n  constructor(index: TileIndex) {\n    this.index = index;\n    this.isVisible = false;\n    this.isSelected = false;\n    this.parent = null;\n    this.children = [];\n\n    this.content = null;\n\n    this._loader = undefined;\n    this._abortController = null;\n    this._loaderId = 0;\n    this._isLoaded = false;\n    this._isCancelled = false;\n    this._needsReload = false;\n  }\n\n  get data(): Promise<DataT | null> | DataT | null {\n    return this.isLoading && this._loader ? this._loader.then(() => this.data) : this.content;\n  }\n\n  get isLoaded(): boolean {\n    return this._isLoaded && !this._needsReload;\n  }\n\n  get isLoading(): boolean {\n    return Boolean(this._loader) && !this._isCancelled;\n  }\n\n  get needsReload(): boolean {\n    return this._needsReload || this._isCancelled;\n  }\n\n  get byteLength(): number {\n    const result = this.content ? (this.content as any).byteLength : 0;\n    if (!Number.isFinite(result)) {\n      log.error('byteLength not defined in tile data')();\n    }\n    return result;\n  }\n\n  /* eslint-disable max-statements */\n  private async _loadData({\n    getData,\n    requestScheduler,\n    onLoad,\n    onError\n  }: TileLoadDataProps<DataT>): Promise<void> {\n    const {index, id, bbox, userData, zoom} = this;\n    const loaderId = this._loaderId;\n\n    this._abortController = new AbortController();\n    const {signal} = this._abortController;\n\n    // @ts-expect-error (2345) Argument of type '(tile: any) => 1 | -1' is not assignable ...\n    const requestToken = await requestScheduler.scheduleRequest(this, tile => {\n      return tile.isSelected ? 1 : -1;\n    });\n\n    if (!requestToken) {\n      this._isCancelled = true;\n      return;\n    }\n    // A tile can be cancelled while being scheduled\n    if (this._isCancelled) {\n      requestToken.done();\n      return;\n    }\n\n    let tileData: DataT | null = null;\n    let error;\n    try {\n      tileData = await getData({index, id, bbox, userData, zoom, signal});\n    } catch (err) {\n      error = err || true;\n    } finally {\n      requestToken.done();\n    }\n\n    // If loadData has been called with a newer version, discard the result from this operation\n    if (loaderId !== this._loaderId) {\n      return;\n    }\n    // Clear the `isLoading` flag\n    this._loader = undefined;\n    // Rewrite tile content with the result of getTileData if successful, or `null` in case of\n    // error or cancellation\n    this.content = tileData;\n    // If cancelled, do not invoke the callbacks\n    // Consider it loaded if we tried to cancel but `getTileData` still returned data\n    if (this._isCancelled && !tileData) {\n      this._isLoaded = false;\n      return;\n    }\n    this._isLoaded = true;\n    this._isCancelled = false;\n\n    if (error) {\n      onError(error, this);\n    } else {\n      onLoad(this);\n    }\n  }\n\n  loadData(opts: TileLoadDataProps): Promise<void> {\n    this._isLoaded = false;\n    this._isCancelled = false;\n    this._needsReload = false;\n    this._loaderId++;\n    this._loader = this._loadData(opts);\n    return this._loader;\n  }\n\n  setNeedsReload(): void {\n    if (this.isLoading) {\n      this.abort();\n      this._loader = undefined;\n    }\n    this._needsReload = true;\n  }\n\n  abort(): void {\n    if (this.isLoaded) {\n      return;\n    }\n\n    this._isCancelled = true;\n    this._abortController?.abort();\n  }\n}\n"],"file":"tile-2d-header.js"}