import type { Framebuffer } from '@luma.gl/core';
import { ClipSpace } from '@luma.gl/core';
import Pass from './pass';
import type { ShaderModule } from '../types/types';
declare type ScreenPassProps = {
    module: ShaderModule;
    fs: string | null;
    id: string;
    moduleSettings: any;
};
declare type ScreenPassRenderOptions = {
    inputBuffer: Framebuffer;
    outputBuffer: Framebuffer;
};
export default class ScreenPass extends Pass {
    model: ClipSpace;
    constructor(gl: WebGLRenderingContext, props: ScreenPassProps);
    render(params: ScreenPassRenderOptions): void;
    delete(): void;
    /**
     * Renders the pass.
     * This is an abstract method that should be overridden.
     * @param inputBuffer - Frame buffer that contains the result of the previous pass
     * @param outputBuffer - Frame buffer that serves as the output render target
     */
    protected _renderPass(gl: WebGLRenderingContext, options: ScreenPassRenderOptions): void;
}
export {};
//# sourceMappingURL=screen-pass.d.ts.map