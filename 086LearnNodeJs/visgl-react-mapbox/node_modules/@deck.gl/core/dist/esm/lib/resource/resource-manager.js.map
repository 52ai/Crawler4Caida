{"version":3,"sources":["../../../../src/lib/resource/resource-manager.ts"],"names":["Resource","ResourceManager","constructor","gl","protocol","_context","resourceManager","_resources","_consumers","_pruneRequest","contains","resourceId","startsWith","add","data","forceUpdate","persistent","res","setData","remove","delete","unsubscribe","consumerId","consumer","requestId","request","resource","prune","subscribe","onChange","resources","replace","_track","getData","undefined","setTimeout","_prune","finalize","key","consumers","oldResource","id","Object","keys","inUse"],"mappings":"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","sourcesContent":["/* global setTimeout */\nimport Resource from './resource';\nimport type {ResourceSubscriber} from './resource';\n\nexport type ResourceManagerContext = {\n  gl: WebGLRenderingContext;\n  resourceManager: ResourceManager;\n};\n\nexport default class ResourceManager {\n  protocol: string;\n\n  private _context: ResourceManagerContext;\n  private _resources: Record<string, Resource>;\n  private _consumers: Record<\n    string,\n    Record<\n      string,\n      ResourceSubscriber & {\n        resourceId: string;\n      }\n    >\n  >;\n  private _pruneRequest: number | null;\n\n  constructor({gl, protocol}) {\n    this.protocol = protocol || 'resource://';\n\n    this._context = {\n      gl,\n      resourceManager: this\n    };\n    this._resources = {};\n    this._consumers = {};\n\n    this._pruneRequest = null;\n  }\n\n  contains(resourceId: string): boolean {\n    if (resourceId.startsWith(this.protocol)) {\n      return true;\n    }\n    return resourceId in this._resources;\n  }\n\n  add({\n    resourceId,\n    data,\n    forceUpdate = false,\n    persistent = true\n  }: {\n    resourceId: string;\n    data: any;\n    forceUpdate?: boolean;\n    persistent?: boolean;\n  }) {\n    let res = this._resources[resourceId];\n\n    if (res) {\n      res.setData(data, forceUpdate);\n    } else {\n      res = new Resource(resourceId, data, this._context);\n      this._resources[resourceId] = res;\n    }\n    // persistent resources can only be removed by calling `remove`\n    // non-persistent resources may be released when there are no more consumers\n    res.persistent = persistent;\n  }\n\n  remove(resourceId: string): void {\n    const res = this._resources[resourceId];\n\n    if (res) {\n      res.delete();\n      delete this._resources[resourceId];\n    }\n  }\n\n  unsubscribe({consumerId}: {consumerId: string}): void {\n    const consumer = this._consumers[consumerId];\n    if (consumer) {\n      for (const requestId in consumer) {\n        const request = consumer[requestId];\n        const resource = this._resources[request.resourceId];\n        if (resource) {\n          resource.unsubscribe(request);\n        }\n      }\n      delete this._consumers[consumerId];\n      this.prune();\n    }\n  }\n\n  subscribe<T>({\n    resourceId,\n    onChange,\n    consumerId,\n    requestId = 'default'\n  }: {\n    resourceId: string;\n    onChange: (data: T | Promise<T>) => void;\n    consumerId: string;\n    requestId: string;\n  }): T | Promise<T> | undefined {\n    const {_resources: resources, protocol} = this;\n    if (resourceId.startsWith(protocol)) {\n      resourceId = resourceId.replace(protocol, '');\n      if (!resources[resourceId]) {\n        // Add placeholder. When this resource becomes available, the consumer will be notified.\n        this.add({resourceId, data: null, persistent: false});\n      }\n    }\n    const res: Resource<T> = resources[resourceId];\n    this._track(consumerId, requestId, res, onChange);\n    if (res) {\n      return res.getData();\n    }\n\n    return undefined;\n  }\n\n  prune(): void {\n    if (!this._pruneRequest) {\n      // prune() may be called multiple times in the same animation frame.\n      // Batch multiple requests together\n      // @ts-ignore setTimeout returns NodeJS.Timeout in node\n      this._pruneRequest = setTimeout(() => this._prune(), 0);\n    }\n  }\n\n  finalize(): void {\n    for (const key in this._resources) {\n      this._resources[key].delete();\n    }\n  }\n\n  private _track(\n    consumerId: string,\n    requestId: string,\n    resource: Resource,\n    onChange: (data: any) => void\n  ) {\n    const consumers = this._consumers;\n    const consumer = (consumers[consumerId] = consumers[consumerId] || {});\n    const request = consumer[requestId] || {};\n\n    const oldResource = request.resourceId && this._resources[request.resourceId];\n    if (oldResource) {\n      oldResource.unsubscribe(request);\n      this.prune();\n    }\n    if (resource) {\n      consumer[requestId] = request;\n      request.onChange = onChange;\n      request.resourceId = resource.id;\n      resource.subscribe(request);\n    }\n  }\n\n  private _prune(): void {\n    this._pruneRequest = null;\n\n    for (const key of Object.keys(this._resources)) {\n      const res = this._resources[key];\n      if (!res.persistent && !res.inUse()) {\n        res.delete();\n        delete this._resources[key];\n      }\n    }\n  }\n}\n"],"file":"resource-manager.js"}