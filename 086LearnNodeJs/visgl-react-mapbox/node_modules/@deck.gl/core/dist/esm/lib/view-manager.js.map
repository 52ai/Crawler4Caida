{"version":3,"sources":["../../../src/lib/view-manager.ts"],"names":["deepEqual","log","flatten","ViewManager","constructor","props","views","width","height","viewState","controllers","timeline","_viewports","_viewportMap","_isUpdating","_needsRedraw","_needsUpdate","_eventManager","eventManager","_eventCallbacks","onViewStateChange","onInteractionStateChange","Object","seal","setProps","finalize","key","controller","needsRedraw","opts","clearRedrawFlags","redraw","setNeedsUpdate","reason","updateViewStates","viewId","updateTransition","getViewports","rect","filter","viewport","containsPixel","getViews","viewMap","forEach","view","id","getView","find","getViewState","viewOrViewId","getViewStateId","filterViewState","getViewport","unproject","xyz","viewports","pixel","x","y","i","length","p","slice","_setViews","_setViewState","_setSize","_update","_rebuildViewports","Boolean","viewsChanged","_diffViews","viewStateChanged","warn","_onViewStateChange","event","_createController","Controller","type","bind","onStateChange","makeViewport","_updateController","controllerProps","resolvedProps","oldControllers","invalidateControllers","oldController","hasController","unshift","_buildViewportMap","newViews","oldViews","some","_","equals"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {deepEqual} from '../utils/deep-equal';\nimport log from '../utils/log';\nimport {flatten} from '../utils/flatten';\n\nimport type Controller from '../controllers/controller';\nimport type {ViewStateChangeParameters, InteractionState} from '../controllers/controller';\nimport type Viewport from '../viewports/viewport';\nimport type View from '../views/view';\nimport type {Timeline} from '@luma.gl/engine';\nimport type {EventManager} from 'mjolnir.js';\nimport type {ConstructorOf} from '../types/types';\n\nexport default class ViewManager {\n  width: number;\n  height: number;\n  views: View[];\n  viewState: any;\n  controllers: {[viewId: string]: Controller<any> | null};\n  timeline: Timeline;\n\n  private _viewports: Viewport[];\n  private _viewportMap: {[viewId: string]: Viewport};\n  private _isUpdating: boolean;\n  private _needsRedraw: string | false;\n  private _needsUpdate: string | false;\n  private _eventManager: EventManager;\n  private _eventCallbacks: {\n    onViewStateChange?: (params: ViewStateChangeParameters & {viewId: string}) => void;\n    onInteractionStateChange?: (state: InteractionState) => void;\n  };\n\n  constructor(props: {\n    // Initial options\n    timeline: Timeline;\n    eventManager: EventManager;\n    onViewStateChange?: (params: ViewStateChangeParameters & {viewId: string}) => void;\n    onInteractionStateChange?: (state: InteractionState) => void;\n    // Props\n    views?: View[];\n    viewState?: any;\n    width?: number;\n    height?: number;\n  }) {\n    // List of view descriptors, gets re-evaluated when width/height changes\n    this.views = [];\n    this.width = 100;\n    this.height = 100;\n    this.viewState = {};\n    this.controllers = {};\n    this.timeline = props.timeline;\n\n    this._viewports = []; // Generated viewports\n    this._viewportMap = {};\n    this._isUpdating = false;\n    this._needsRedraw = 'First render';\n    this._needsUpdate = 'Initialize';\n\n    this._eventManager = props.eventManager;\n    this._eventCallbacks = {\n      onViewStateChange: props.onViewStateChange,\n      onInteractionStateChange: props.onInteractionStateChange\n    };\n\n    Object.seal(this);\n\n    // Init with default map viewport\n    this.setProps(props);\n  }\n\n  /** Remove all resources and event listeners */\n  finalize(): void {\n    for (const key in this.controllers) {\n      const controller = this.controllers[key];\n      if (controller) {\n        controller.finalize();\n      }\n    }\n    this.controllers = {};\n  }\n\n  /** Check if a redraw is needed */\n  needsRedraw(\n    opts: {\n      /** Reset redraw flags to false */\n      clearRedrawFlags?: boolean;\n    } = {clearRedrawFlags: false}\n  ): string | false {\n    const redraw = this._needsRedraw;\n    if (opts.clearRedrawFlags) {\n      this._needsRedraw = false;\n    }\n    return redraw;\n  }\n\n  /** Mark the manager as dirty. Will rebuild all viewports and update controllers. */\n  setNeedsUpdate(reason: string): void {\n    this._needsUpdate = this._needsUpdate || reason;\n    this._needsRedraw = this._needsRedraw || reason;\n  }\n\n  /** Checks each viewport for transition updates */\n  updateViewStates(): void {\n    for (const viewId in this.controllers) {\n      const controller = this.controllers[viewId];\n      if (controller) {\n        controller.updateTransition();\n      }\n    }\n  }\n\n  /** Get a set of viewports for a given width and height\n   * TODO - Intention is for deck.gl to autodeduce width and height and drop the need for props\n   * @param rect (object, optional) - filter the viewports\n   *   + not provided - return all viewports\n   *   + {x, y} - only return viewports that contain this pixel\n   *   + {x, y, width, height} - only return viewports that overlap with this rectangle\n   */\n  getViewports(rect?: {x: number; y: number; width?: number; height?: number}): Viewport[] {\n    if (rect) {\n      return this._viewports.filter(viewport => viewport.containsPixel(rect));\n    }\n    return this._viewports;\n  }\n\n  /** Get a map of all views */\n  getViews(): {[viewId: string]: View} {\n    const viewMap = {};\n    this.views.forEach(view => {\n      viewMap[view.id] = view;\n    });\n    return viewMap;\n  }\n\n  /** Resolves a viewId string to a View */\n  getView(viewId: string): View | undefined {\n    return this.views.find(view => view.id === viewId);\n  }\n\n  /** Returns the viewState for a specific viewId. Matches the viewState by\n    1. view.viewStateId\n    2. view.id\n    3. root viewState\n    then applies the view's filter if any */\n  getViewState(viewOrViewId: string | View): any {\n    const view: View | undefined =\n      typeof viewOrViewId === 'string' ? this.getView(viewOrViewId) : viewOrViewId;\n    // Backward compatibility: view state for single view\n    const viewState = (view && this.viewState[view.getViewStateId()]) || this.viewState;\n    return view ? view.filterViewState(viewState) : viewState;\n  }\n\n  getViewport(viewId: string): Viewport | undefined {\n    return this._viewportMap[viewId];\n  }\n\n  /**\n   * Unproject pixel coordinates on screen onto world coordinates,\n   * (possibly [lon, lat]) on map.\n   * - [x, y] => [lng, lat]\n   * - [x, y, z] => [lng, lat, Z]\n   * @param {Array} xyz -\n   * @param {Object} opts - options\n   * @param {Object} opts.topLeft=true - Whether origin is top left\n   * @return {Array|null} - [lng, lat, Z] or [X, Y, Z]\n   */\n  unproject(xyz: number[], opts?: {topLeft?: boolean}): number[] | null {\n    const viewports = this.getViewports();\n    const pixel = {x: xyz[0], y: xyz[1]};\n    for (let i = viewports.length - 1; i >= 0; --i) {\n      const viewport = viewports[i];\n      if (viewport.containsPixel(pixel)) {\n        const p = xyz.slice();\n        p[0] -= viewport.x;\n        p[1] -= viewport.y;\n        return viewport.unproject(p, opts);\n      }\n    }\n    return null;\n  }\n\n  /** Update the manager with new Deck props */\n  setProps(props: {views?: View[]; viewState?: any; width?: number; height?: number}) {\n    if (props.views) {\n      this._setViews(props.views);\n    }\n\n    if (props.viewState) {\n      this._setViewState(props.viewState);\n    }\n\n    if ('width' in props || 'height' in props) {\n      this._setSize(props.width as number, props.height as number);\n    }\n\n    // Important: avoid invoking _update() inside itself\n    // Nested updates result in unexpected side effects inside _rebuildViewports()\n    // when using auto control in pure-js\n    if (!this._isUpdating) {\n      this._update();\n    }\n  }\n\n  //\n  // PRIVATE METHODS\n  //\n\n  private _update(): void {\n    this._isUpdating = true;\n\n    // Only rebuild viewports if the update flag is set\n    if (this._needsUpdate) {\n      this._needsUpdate = false;\n      this._rebuildViewports();\n    }\n\n    // If viewport transition(s) are triggered during viewports update, controller(s)\n    // will immediately call `onViewStateChange` which calls `viewManager.setProps` again.\n    if (this._needsUpdate) {\n      this._needsUpdate = false;\n      this._rebuildViewports();\n    }\n\n    this._isUpdating = false;\n  }\n\n  private _setSize(width: number, height: number): void {\n    if (width !== this.width || height !== this.height) {\n      this.width = width;\n      this.height = height;\n      this.setNeedsUpdate('Size changed');\n    }\n  }\n\n  // Update the view descriptor list and set change flag if needed\n  // Does not actually rebuild the `Viewport`s until `getViewports` is called\n  private _setViews(views: View[]): void {\n    views = flatten(views, Boolean);\n\n    const viewsChanged = this._diffViews(views, this.views);\n    if (viewsChanged) {\n      this.setNeedsUpdate('views changed');\n    }\n\n    this.views = views;\n  }\n\n  private _setViewState(viewState: any): void {\n    if (viewState) {\n      const viewStateChanged = !deepEqual(viewState, this.viewState);\n\n      if (viewStateChanged) {\n        this.setNeedsUpdate('viewState changed');\n      }\n\n      this.viewState = viewState;\n    } else {\n      log.warn('missing `viewState` or `initialViewState`')();\n    }\n  }\n\n  private _onViewStateChange(viewId: string, event: ViewStateChangeParameters) {\n    if (this._eventCallbacks.onViewStateChange) {\n      this._eventCallbacks.onViewStateChange({...event, viewId});\n    }\n  }\n\n  private _createController(\n    view: View,\n    props: {id: string; type: ConstructorOf<Controller<any>>}\n  ): Controller<any> {\n    const Controller = props.type;\n\n    const controller = new Controller({\n      timeline: this.timeline,\n      eventManager: this._eventManager,\n      // Set an internal callback that calls the prop callback if provided\n      onViewStateChange: this._onViewStateChange.bind(this, props.id),\n      onStateChange: this._eventCallbacks.onInteractionStateChange,\n      makeViewport: viewState =>\n        this.getView(view.id)?.makeViewport({\n          viewState,\n          width: this.width,\n          height: this.height\n        })\n    });\n\n    return controller;\n  }\n\n  private _updateController(\n    view: View,\n    viewState: any,\n    viewport: Viewport,\n    controller?: Controller<any> | null\n  ): Controller<any> | null {\n    const controllerProps = view.controller;\n    if (controllerProps) {\n      const resolvedProps = {\n        ...viewState,\n        ...controllerProps,\n        id: view.id,\n        x: viewport.x,\n        y: viewport.y,\n        width: viewport.width,\n        height: viewport.height\n      };\n\n      // TODO - check if view / controller type has changed, and replace the controller\n      if (!controller) {\n        controller = this._createController(view, resolvedProps);\n      }\n      if (controller) {\n        controller.setProps(resolvedProps);\n      }\n      return controller;\n    }\n    return null;\n  }\n\n  // Rebuilds viewports from descriptors towards a certain window size\n  private _rebuildViewports(): void {\n    const {views} = this;\n\n    const oldControllers = this.controllers;\n    this._viewports = [];\n    this.controllers = {};\n\n    let invalidateControllers = false;\n    // Create controllers in reverse order, so that views on top receive events first\n    for (let i = views.length; i--; ) {\n      const view = views[i];\n      const viewState = this.getViewState(view);\n      const viewport = view.makeViewport({viewState, width: this.width, height: this.height});\n\n      let oldController = oldControllers[view.id];\n      const hasController = Boolean(view.controller);\n      if (hasController && !oldController) {\n        // When a new controller is added, invalidate all controllers below it so that\n        // events are registered in the correct order\n        invalidateControllers = true;\n      }\n      if ((invalidateControllers || !hasController) && oldController) {\n        // Remove and reattach invalidated controller\n        oldController.finalize();\n        oldController = null;\n      }\n\n      // Update the controller\n      this.controllers[view.id] = this._updateController(view, viewState, viewport, oldController);\n\n      this._viewports.unshift(viewport);\n    }\n\n    // Remove unused controllers\n    for (const id in oldControllers) {\n      const oldController = oldControllers[id];\n      if (oldController && !this.controllers[id]) {\n        oldController.finalize();\n      }\n    }\n\n    this._buildViewportMap();\n  }\n\n  _buildViewportMap(): void {\n    // Build a view id to view index\n    this._viewportMap = {};\n    this._viewports.forEach(viewport => {\n      if (viewport.id) {\n        // TODO - issue warning if multiple viewports use same id\n        this._viewportMap[viewport.id] = this._viewportMap[viewport.id] || viewport;\n      }\n    });\n  }\n\n  // Check if viewport array has changed, returns true if any change\n  // Note that descriptors can be the same\n  _diffViews(newViews: View[], oldViews: View[]): boolean {\n    if (newViews.length !== oldViews.length) {\n      return true;\n    }\n\n    return newViews.some((_, i) => !newViews[i].equals(oldViews[i]));\n  }\n}\n"],"file":"view-manager.js"}