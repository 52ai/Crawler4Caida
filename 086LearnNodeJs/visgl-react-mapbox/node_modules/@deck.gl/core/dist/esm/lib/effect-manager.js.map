{"version":3,"sources":["../../../src/lib/effect-manager.ts"],"names":["deepEqual","LightingEffect","MaskEffect","DEFAULT_LIGHTING_EFFECT","EffectManager","constructor","effects","_internalEffects","_needsRedraw","setEffects","setProps","props","length","needsRedraw","opts","clearRedrawFlags","redraw","getEffects","finalize","cleanup","slice","push","some","effect"],"mappings":";AAAA,SAAQA,SAAR,QAAwB,qBAAxB;AACA,OAAOC,cAAP,MAA2B,qCAA3B;AACA,OAAOC,UAAP,MAAuB,6BAAvB;AAGA,MAAMC,uBAAuB,GAAG,IAAIF,cAAJ,EAAhC;AAEA,eAAe,MAAMG,aAAN,CAAoB;AAKjCC,EAAAA,WAAW,GAAG;AAAA;;AAAA;;AAAA;;AACZ,SAAKC,OAAL,GAAe,EAAf;AACA,SAAKC,gBAAL,GAAwB,EAAxB;AACA,SAAKC,YAAL,GAAoB,gBAApB;AACA,SAAKC,UAAL;AACD;;AAEDC,EAAAA,QAAQ,CAACC,KAAD,EAAQ;AACd,QAAI,aAAaA,KAAjB,EAAwB;AACtB,UAAIA,KAAK,CAACL,OAAN,CAAcM,MAAd,KAAyB,KAAKN,OAAL,CAAaM,MAAtC,IAAgD,CAACZ,SAAS,CAACW,KAAK,CAACL,OAAP,EAAgB,KAAKA,OAArB,CAA9D,EAA6F;AAC3F,aAAKG,UAAL,CAAgBE,KAAK,CAACL,OAAtB;AACA,aAAKE,YAAL,GAAoB,iBAApB;AACD;AACF;AACF;;AAEDK,EAAAA,WAAW,CAACC,IAAI,GAAG;AAACC,IAAAA,gBAAgB,EAAE;AAAnB,GAAR,EAAmD;AAC5D,UAAMC,MAAM,GAAG,KAAKR,YAApB;;AACA,QAAIM,IAAI,CAACC,gBAAT,EAA2B;AACzB,WAAKP,YAAL,GAAoB,KAApB;AACD;;AACD,WAAOQ,MAAP;AACD;;AAEDC,EAAAA,UAAU,GAAG;AACX,WAAO,KAAKV,gBAAZ;AACD;;AAEDW,EAAAA,QAAQ,GAAG;AACT,SAAKC,OAAL;AACD;;AAGDV,EAAAA,UAAU,CAACH,OAAiB,GAAG,EAArB,EAAyB;AACjC,SAAKa,OAAL;AACA,SAAKb,OAAL,GAAeA,OAAf;AAEA,SAAKC,gBAAL,GAAwBD,OAAO,CAACc,KAAR,EAAxB;;AAEA,SAAKb,gBAAL,CAAsBc,IAAtB,CAA2B,IAAInB,UAAJ,EAA3B;;AACA,QAAI,CAACI,OAAO,CAACgB,IAAR,CAAaC,MAAM,IAAIA,MAAM,YAAYtB,cAAzC,CAAL,EAA+D;AAC7D,WAAKM,gBAAL,CAAsBc,IAAtB,CAA2BlB,uBAA3B;AACD;AACF;;AAEDgB,EAAAA,OAAO,GAAG;AACR,SAAK,MAAMI,MAAX,IAAqB,KAAKjB,OAA1B,EAAmC;AACjCiB,MAAAA,MAAM,CAACJ,OAAP;AACD;;AAED,SAAK,MAAMI,MAAX,IAAqB,KAAKhB,gBAA1B,EAA4C;AAC1CgB,MAAAA,MAAM,CAACJ,OAAP;AACD;;AACD,SAAKb,OAAL,CAAaM,MAAb,GAAsB,CAAtB;AACA,SAAKL,gBAAL,CAAsBK,MAAtB,GAA+B,CAA/B;AACD;;AA5DgC","sourcesContent":["import {deepEqual} from '../utils/deep-equal';\nimport LightingEffect from '../effects/lighting/lighting-effect';\nimport MaskEffect from '../effects/mask/mask-effect';\nimport type {Effect} from './effect';\n\nconst DEFAULT_LIGHTING_EFFECT = new LightingEffect();\n\nexport default class EffectManager {\n  effects: Effect[];\n  _internalEffects: Effect[];\n  _needsRedraw: false | string;\n\n  constructor() {\n    this.effects = [];\n    this._internalEffects = [];\n    this._needsRedraw = 'Initial render';\n    this.setEffects();\n  }\n\n  setProps(props) {\n    if ('effects' in props) {\n      if (props.effects.length !== this.effects.length || !deepEqual(props.effects, this.effects)) {\n        this.setEffects(props.effects);\n        this._needsRedraw = 'effects changed';\n      }\n    }\n  }\n\n  needsRedraw(opts = {clearRedrawFlags: false}): false | string {\n    const redraw = this._needsRedraw;\n    if (opts.clearRedrawFlags) {\n      this._needsRedraw = false;\n    }\n    return redraw;\n  }\n\n  getEffects() {\n    return this._internalEffects;\n  }\n\n  finalize() {\n    this.cleanup();\n  }\n\n  // Private\n  setEffects(effects: Effect[] = []) {\n    this.cleanup();\n    this.effects = effects;\n\n    this._internalEffects = effects.slice();\n    // Unique MaskEffect per EffectManager as GL context may be different\n    this._internalEffects.push(new MaskEffect());\n    if (!effects.some(effect => effect instanceof LightingEffect)) {\n      this._internalEffects.push(DEFAULT_LIGHTING_EFFECT);\n    }\n  }\n\n  cleanup() {\n    for (const effect of this.effects) {\n      effect.cleanup();\n    }\n\n    for (const effect of this._internalEffects) {\n      effect.cleanup();\n    }\n    this.effects.length = 0;\n    this._internalEffects.length = 0;\n  }\n}\n"],"file":"effect-manager.js"}