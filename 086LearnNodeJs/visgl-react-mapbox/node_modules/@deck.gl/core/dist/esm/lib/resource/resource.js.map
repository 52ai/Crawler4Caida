{"version":3,"sources":["../../../../src/lib/resource/resource.ts"],"names":["load","Resource","constructor","id","data","context","Set","setData","subscribe","consumer","_subscribers","add","unsubscribe","delete","inUse","size","getData","isLoaded","_error","Promise","reject","_content","_loader","then","forceUpdate","_data","loadCount","_loadCount","loader","result","undefined","catch","error","subscriber","onChange"],"mappings":";AAAA,SAAQA,IAAR,QAAmB,kBAAnB;AAQA,eAAe,MAAMC,QAAN,CAAwB;AAarCC,EAAAA,WAAW,CAACC,EAAD,EAAaC,IAAb,EAA4CC,OAA5C,EAA6E;AAAA;;AAAA;;AAAA;;AAAA;;AAAA,wCAP3D,CAO2D;;AAAA,0CANjE,IAAIC,GAAJ,EAMiE;;AAAA;;AAAA;;AAAA;;AAAA;;AACtF,SAAKH,EAAL,GAAUA,EAAV;AACA,SAAKE,OAAL,GAAeA,OAAf;AAEA,SAAKE,OAAL,CAAaH,IAAb;AACD;;AAGDI,EAAAA,SAAS,CAACC,QAAD,EAAwC;AAC/C,SAAKC,YAAL,CAAkBC,GAAlB,CAAsBF,QAAtB;AACD;;AAEDG,EAAAA,WAAW,CAACH,QAAD,EAAwC;AACjD,SAAKC,YAAL,CAAkBG,MAAlB,CAAyBJ,QAAzB;AACD;;AAEDK,EAAAA,KAAK,GAAY;AACf,WAAO,KAAKJ,YAAL,CAAkBK,IAAlB,GAAyB,CAAhC;AACD;;AAEDF,EAAAA,MAAM,GAAS,CAEd;;AAEDG,EAAAA,OAAO,GAAmB;AACxB,WAAO,KAAKC,QAAL,GACH,KAAKC,MAAL,GACEC,OAAO,CAACC,MAAR,CAAe,KAAKF,MAApB,CADF,GAEE,KAAKG,QAHJ,GAIH,KAAKC,OAAL,CAAcC,IAAd,CAAmB,MAAM,KAAKP,OAAL,EAAzB,CAJJ;AAKD;;AAEDT,EAAAA,OAAO,CAACH,IAAD,EAAYoB,WAAZ,EAAmC;AACxC,QAAIpB,IAAI,KAAK,KAAKqB,KAAd,IAAuB,CAACD,WAA5B,EAAyC;AACvC;AACD;;AACD,SAAKC,KAAL,GAAarB,IAAb;AACA,UAAMsB,SAAS,GAAG,EAAE,KAAKC,UAAzB;AAEA,QAAIC,MAAM,GAAGxB,IAAb;;AACA,QAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;AAC5BwB,MAAAA,MAAM,GAAG5B,IAAI,CAACI,IAAD,CAAb;AACD;;AACD,QAAIwB,MAAM,YAAYT,OAAtB,EAA+B;AAC7B,WAAKF,QAAL,GAAgB,KAAhB;AACA,WAAKK,OAAL,GAAeM,MAAM,CAClBL,IADY,CACPM,MAAM,IAAI;AAEd,YAAI,KAAKF,UAAL,KAAoBD,SAAxB,EAAmC;AACjC,eAAKT,QAAL,GAAgB,IAAhB;AACA,eAAKC,MAAL,GAAcY,SAAd;AACA,eAAKT,QAAL,GAAgBQ,MAAhB;AACD;AACF,OARY,EASZE,KATY,CASNC,KAAK,IAAI;AACd,YAAI,KAAKL,UAAL,KAAoBD,SAAxB,EAAmC;AACjC,eAAKT,QAAL,GAAgB,IAAhB;AACA,eAAKC,MAAL,GAAcc,KAAK,IAAI,IAAvB;AACD;AACF,OAdY,CAAf;AAeD,KAjBD,MAiBO;AACL,WAAKf,QAAL,GAAgB,IAAhB;AACA,WAAKC,MAAL,GAAcY,SAAd;AACA,WAAKT,QAAL,GAAgBjB,IAAhB;AACD;;AAED,SAAK,MAAM6B,UAAX,IAAyB,KAAKvB,YAA9B,EAA4C;AAC1CuB,MAAAA,UAAU,CAACC,QAAX,CAAoB,KAAKlB,OAAL,EAApB;AACD;AACF;;AAlFoC","sourcesContent":["import {load} from '@loaders.gl/core';\n\nimport type {ResourceManagerContext} from './resource-manager';\n\nexport type ResourceSubscriber<T = any> = {\n  onChange: (data: T | Promise<T>) => void;\n};\n\nexport default class Resource<T = any> {\n  id: string;\n  context: ResourceManagerContext;\n  isLoaded!: boolean;\n  persistent?: boolean;\n\n  private _loadCount: number = 0;\n  private _subscribers = new Set<ResourceSubscriber<T>>();\n  private _data!: T | Promise<T> | string;\n  private _loader?: Promise<void>;\n  private _error?: Error;\n  private _content?: T;\n\n  constructor(id: string, data: T | Promise<T> | string, context: ResourceManagerContext) {\n    this.id = id;\n    this.context = context;\n\n    this.setData(data);\n  }\n\n  // consumer: {onChange: Function}\n  subscribe(consumer: ResourceSubscriber<T>): void {\n    this._subscribers.add(consumer);\n  }\n\n  unsubscribe(consumer: ResourceSubscriber<T>): void {\n    this._subscribers.delete(consumer);\n  }\n\n  inUse(): boolean {\n    return this._subscribers.size > 0;\n  }\n\n  delete(): void {\n    // Remove any resources created\n  }\n\n  getData(): T | Promise<T> {\n    return this.isLoaded\n      ? this._error\n        ? Promise.reject(this._error)\n        : this._content!\n      : this._loader!.then(() => this.getData());\n  }\n\n  setData(data: any, forceUpdate?: boolean) {\n    if (data === this._data && !forceUpdate) {\n      return;\n    }\n    this._data = data;\n    const loadCount = ++this._loadCount;\n\n    let loader = data;\n    if (typeof data === 'string') {\n      loader = load(data);\n    }\n    if (loader instanceof Promise) {\n      this.isLoaded = false;\n      this._loader = loader\n        .then(result => {\n          // check if source has changed\n          if (this._loadCount === loadCount) {\n            this.isLoaded = true;\n            this._error = undefined;\n            this._content = result;\n          }\n        })\n        .catch(error => {\n          if (this._loadCount === loadCount) {\n            this.isLoaded = true;\n            this._error = error || true;\n          }\n        });\n    } else {\n      this.isLoaded = true;\n      this._error = undefined;\n      this._content = data;\n    }\n\n    for (const subscriber of this._subscribers) {\n      subscriber.onChange(this.getData());\n    }\n  }\n}\n"],"file":"resource.js"}