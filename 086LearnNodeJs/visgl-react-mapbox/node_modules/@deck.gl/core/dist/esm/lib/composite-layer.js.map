{"version":3,"sources":["../../../src/lib/composite-layer.ts"],"names":["Layer","debug","flatten","TRACE_RENDER_LAYERS","CompositeLayer","isComposite","isLoaded","getSubLayers","every","layer","internalState","subLayers","initializeState","context","setState","updateObject","setNeedsUpdate","getPickingInfo","info","object","isDataWrapped","__source","parent","id","index","filterSubLayer","shouldRenderSubLayer","subLayerId","data","length","getSubLayerClass","DefaultLayerClass","_subLayerProps","overridingProps","props","type","getSubLayerRow","row","sourceObject","sourceObjectIndex","getSubLayerAccessor","accessor","objectInfo","target","x","i","getSubLayerProps","sublayerProps","opacity","pickable","visible","parameters","getPolygonOffset","highlightedObjectIndex","autoHighlight","highlightColor","coordinateSystem","coordinateOrigin","wrapLongitude","positionFormat","modelMatrix","extensions","fetch","operation","newProps","updateTriggers","overridingSublayerProps","overridingSublayerTriggers","sublayerId","propTypes","constructor","_propTypes","subLayerPropTypes","key","propType","Object","assign","all","extension","passThroughProps","call","_updateAutoHighlight","updateAutoHighlight","_getAttributeManager","_postUpdate","updateParams","forceUpdate","shouldUpdate","needsUpdate","subLayersList","renderLayers","Boolean"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport Layer, {UpdateParameters} from './layer';\nimport debug from '../debug';\nimport {flatten} from '../utils/flatten';\n\nimport type AttributeManager from './attribute/attribute-manager';\nimport type {PickingInfo, GetPickingInfoParams} from './picking/pick-info';\nimport type {FilterContext} from '../passes/layers-pass';\nimport type {LayersList, LayerContext} from './layer-manager';\nimport type {CompositeLayerProps, Accessor, AccessorContext} from '../types/layer-props';\nimport {ConstructorOf} from '../types/types';\n\nconst TRACE_RENDER_LAYERS = 'compositeLayer.renderLayers';\n\nexport default abstract class CompositeLayer<PropsT = {}> extends Layer<\n  PropsT & Required<CompositeLayerProps>\n> {\n  static layerName: string = 'CompositeLayer';\n\n  /** `true` if this layer renders other layers */\n  get isComposite(): boolean {\n    return true;\n  }\n\n  /** Returns true if all async resources are loaded */\n  get isLoaded(): boolean {\n    return super.isLoaded && this.getSubLayers().every(layer => layer.isLoaded);\n  }\n\n  /** Return last rendered sub layers */\n  getSubLayers(): Layer[] {\n    return (this.internalState && this.internalState.subLayers) || [];\n  }\n\n  // initializeState is usually not needed for composite layers\n  // Provide empty definition to disable check for missing definition\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  initializeState(context: LayerContext): void {}\n\n  /** Updates selected state members and marks the composite layer to need rerender */\n  setState(updateObject: any): void {\n    super.setState(updateObject);\n    // Trigger a layer update\n    // Although conceptually layer.draw and compositeLayer.renderLayers are equivalent,\n    // they are executed during different lifecycles.\n    // draw can be called without calling updateState (e.g. most viewport changes),\n    // while renderLayers can only be called during a recursive layer update.\n    this.setNeedsUpdate();\n  }\n\n  /** called to augment the info object that is bubbled up from a sublayer\n      override Layer.getPickingInfo() because decoding / setting uniform do\n      not apply to a composite layer. */\n  getPickingInfo({info}: GetPickingInfoParams): PickingInfo {\n    const {object} = info;\n    const isDataWrapped =\n      object && object.__source && object.__source.parent && object.__source.parent.id === this.id;\n\n    if (!isDataWrapped) {\n      return info;\n    }\n\n    // override object with picked data\n    info.object = object.__source.object;\n    info.index = object.__source.index;\n\n    return info;\n  }\n\n  // Implement to generate subLayers\n  abstract renderLayers(): Layer | null | LayersList;\n\n  /**\n   * Filters sub layers at draw time. Return true if the sub layer should be drawn.\n   */\n  filterSubLayer(context: FilterContext): boolean {\n    return true;\n  }\n\n  /** Returns true if sub layer needs to be rendered */\n  protected shouldRenderSubLayer(subLayerId: string, data: any): boolean {\n    return data && data.length;\n  }\n\n  /** Returns sub layer class for a specific sublayer */\n  protected getSubLayerClass<T extends Layer>(\n    subLayerId: string,\n    DefaultLayerClass: ConstructorOf<T>\n  ): ConstructorOf<T> {\n    const {_subLayerProps: overridingProps} = this.props;\n\n    return (\n      (overridingProps &&\n        overridingProps[subLayerId] &&\n        (overridingProps[subLayerId].type as ConstructorOf<T>)) ||\n      DefaultLayerClass\n    );\n  }\n\n  /** When casting user data into another format to pass to sublayers,\n      add reference to the original object and object index */\n  protected getSubLayerRow<T>(row: T, sourceObject: any, sourceObjectIndex: number): T {\n    // @ts-ignore (TS2339) adding undefined property\n    row.__source = {\n      parent: this,\n      object: sourceObject,\n      index: sourceObjectIndex\n    };\n    return row;\n  }\n\n  /** Some composite layers cast user data into another format before passing to sublayers\n    We need to unwrap them before calling the accessor so that they see the original data\n    objects */\n  protected getSubLayerAccessor<In, Out>(accessor: Accessor<In, Out>): Accessor<In, Out> {\n    if (typeof accessor === 'function') {\n      const objectInfo: AccessorContext<In> = {\n        index: -1,\n        // @ts-ignore accessing resolved data\n        data: this.props.data,\n        target: []\n      };\n      return (x: any, i: AccessorContext<In>) => {\n        if (x && x.__source) {\n          objectInfo.index = x.__source.index;\n          // @ts-ignore (TS2349) Out is never a function\n          return accessor(x.__source.object as In, objectInfo);\n        }\n        // @ts-ignore (TS2349) Out is never a function\n        return accessor(x as In, i);\n      };\n    }\n    return accessor;\n  }\n\n  // eslint-disable-next-line complexity\n  /** Returns sub layer props for a specific sublayer */\n  protected getSubLayerProps(\n    sublayerProps: {\n      id?: string;\n      updateTriggers?: Record<string, any>;\n      [propName: string]: any;\n    } = {}\n  ): any {\n    const {\n      opacity,\n      pickable,\n      visible,\n      parameters,\n      getPolygonOffset,\n      highlightedObjectIndex,\n      autoHighlight,\n      highlightColor,\n      coordinateSystem,\n      coordinateOrigin,\n      wrapLongitude,\n      positionFormat,\n      modelMatrix,\n      extensions,\n      fetch,\n      operation,\n      _subLayerProps: overridingProps\n    } = this.props;\n    const newProps = {\n      id: '',\n      updateTriggers: {},\n      opacity,\n      pickable,\n      visible,\n      parameters,\n      getPolygonOffset,\n      highlightedObjectIndex,\n      autoHighlight,\n      highlightColor,\n      coordinateSystem,\n      coordinateOrigin,\n      wrapLongitude,\n      positionFormat,\n      modelMatrix,\n      extensions,\n      fetch,\n      operation\n    };\n\n    const overridingSublayerProps =\n      overridingProps && sublayerProps.id && overridingProps[sublayerProps.id];\n    const overridingSublayerTriggers =\n      overridingSublayerProps && overridingSublayerProps.updateTriggers;\n    const sublayerId = sublayerProps.id || 'sublayer';\n\n    if (overridingSublayerProps) {\n      // @ts-ignore (TS2339) hidden property\n      const propTypes = this.constructor._propTypes;\n      const subLayerPropTypes = sublayerProps.type ? sublayerProps.type._propTypes : {};\n      for (const key in overridingSublayerProps) {\n        const propType = subLayerPropTypes[key] || propTypes[key];\n        // eslint-disable-next-line\n        if (propType && propType.type === 'accessor') {\n          overridingSublayerProps[key] = this.getSubLayerAccessor(overridingSublayerProps[key]);\n        }\n      }\n    }\n\n    Object.assign(\n      newProps,\n      sublayerProps,\n      // experimental feature that allows users to override sublayer props via parent layer prop\n      overridingSublayerProps\n    );\n    newProps.id = `${this.props.id}-${sublayerId}`;\n    newProps.updateTriggers = {\n      all: this.props.updateTriggers?.all,\n      ...sublayerProps.updateTriggers,\n      ...overridingSublayerTriggers\n    };\n\n    // Pass through extension props\n    // @ts-ignore (TS2532) extensions is always defined after merging with default props\n    for (const extension of extensions) {\n      const passThroughProps = extension.getSubLayerProps.call(this, extension);\n      if (passThroughProps) {\n        Object.assign(newProps, passThroughProps, {\n          updateTriggers: Object.assign(newProps.updateTriggers, passThroughProps.updateTriggers)\n        });\n      }\n    }\n\n    return newProps;\n  }\n\n  /** Update sub layers to highlight the hovered object */\n  protected _updateAutoHighlight(info: PickingInfo): void {\n    for (const layer of this.getSubLayers()) {\n      layer.updateAutoHighlight(info);\n    }\n  }\n\n  /** Override base Layer method */\n  protected _getAttributeManager(): AttributeManager | null {\n    return null;\n  }\n\n  /** (Internal) Called after an update to rerender sub layers */\n  protected _postUpdate(updateParams: UpdateParameters<this>, forceUpdate: boolean) {\n    // @ts-ignore (TS2531) this method is only called internally when internalState is defined\n    let subLayers = this.internalState.subLayers as Layer[];\n    const shouldUpdate = !subLayers || this.needsUpdate();\n    if (shouldUpdate) {\n      const subLayersList = this.renderLayers();\n      // Flatten the returned array, removing any null, undefined or false\n      // this allows layers to render sublayers conditionally\n      // (see CompositeLayer.renderLayers docs)\n      subLayers = flatten(subLayersList, Boolean) as Layer[];\n      // @ts-ignore (TS2531) this method is only called internally when internalState is defined\n      this.internalState.subLayers = subLayers;\n    }\n    debug(TRACE_RENDER_LAYERS, this, shouldUpdate, subLayers);\n\n    // populate reference to parent layer (this layer)\n    // NOTE: needs to be done even when reusing layers as the parent may have changed\n    for (const layer of subLayers) {\n      layer.parent = this;\n    }\n  }\n}\n"],"file":"composite-layer.js"}