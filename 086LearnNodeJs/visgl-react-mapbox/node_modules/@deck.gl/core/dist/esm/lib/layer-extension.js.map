{"version":3,"sources":["../../../src/lib/layer-extension.ts"],"names":["deepEqual","LayerExtension","constructor","opts","equals","extension","getShaders","getSubLayerProps","defaultProps","newProps","updateTriggers","key","props","propDef","propValue","type","getSubLayerAccessor","initializeState","context","updateState","params","draw","finalizeState"],"mappings":";AAmBA,SAAQA,SAAR,QAAwB,qBAAxB;AAMA,eAAe,MAAeC,cAAf,CAAoD;AAWjEC,EAAAA,WAAW,CAACC,IAAD,EAAkB;AAAA;;AAC3B,QAAIA,IAAJ,EAAU;AACR,WAAKA,IAAL,GAAYA,IAAZ;AACD;AACF;;AAGDC,EAAAA,MAAM,CAACC,SAAD,EAA+C;AACnD,QAAI,SAASA,SAAb,EAAwB;AACtB,aAAO,IAAP;AACD;;AAED,WAAO,KAAKH,WAAL,KAAqBG,SAAS,CAACH,WAA/B,IAA8CF,SAAS,CAAC,KAAKG,IAAN,EAAYE,SAAS,CAACF,IAAtB,CAA9D;AACD;;AAGDG,EAAAA,UAAU,CAAcD,SAAd,EAAoC;AAC5C,WAAO,IAAP;AACD;;AAGDE,EAAAA,gBAAgB,CAAuBF,SAAvB,EAA6C;AAC3D,UAAM;AAACG,MAAAA;AAAD,QAAiBH,SAAS,CAACH,WAAjC;AACA,UAAMO,QAAQ,GAAG;AACfC,MAAAA,cAAc,EAAE;AADD,KAAjB;;AAKA,SAAK,MAAMC,GAAX,IAAkBH,YAAlB,EAAgC;AAC9B,UAAIG,GAAG,IAAI,KAAKC,KAAhB,EAAuB;AACrB,cAAMC,OAAO,GAAGL,YAAY,CAACG,GAAD,CAA5B;AACA,cAAMG,SAAS,GAAG,KAAKF,KAAL,CAAWD,GAAX,CAAlB;AACAF,QAAAA,QAAQ,CAACE,GAAD,CAAR,GAAgBG,SAAhB;;AACA,YAAID,OAAO,IAAIA,OAAO,CAACE,IAAR,KAAiB,UAAhC,EAA4C;AAC1CN,UAAAA,QAAQ,CAACC,cAAT,CAAwBC,GAAxB,IAA+B,KAAKC,KAAL,CAAWF,cAAX,CAA0BC,GAA1B,CAA/B;;AACA,cAAI,OAAOG,SAAP,KAAqB,UAAzB,EAAqC;AACnCL,YAAAA,QAAQ,CAACE,GAAD,CAAR,GAAgB,KAAKK,mBAAL,CAAyBF,SAAzB,CAAhB;AACD;AACF;AACF;AACF;;AAED,WAAOL,QAAP;AACD;;AAGDQ,EAAAA,eAAe,CAAcC,OAAd,EAAqCb,SAArC,EAA4D,CAAE;;AAE7Ec,EAAAA,WAAW,CAAcC,MAAd,EAA+Cf,SAA/C,EAAsE,CAAE;;AAEnFgB,EAAAA,IAAI,CAAcD,MAAd,EAA2Bf,SAA3B,EAAkD,CAAE;;AAExDiB,EAAAA,aAAa,CAAcJ,OAAd,EAAqCb,SAArC,EAA4D,CAAE;;AA/DV;;gBAArCJ,c,kBAQD,E","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport {deepEqual} from '../utils/deep-equal';\nimport type Layer from './layer';\nimport type CompositeLayer from './composite-layer';\nimport type {UpdateParameters} from './layer';\nimport type {LayerContext} from './layer-manager';\n\nexport default abstract class LayerExtension<OptionsT = undefined> {\n  /**\n   * Note that defaultProps of a LayerExtension does not behave like defaultProps of a Layer:\n      - The default values are not automatically merged with user-supplied props when the layer is constructed\n      - The types are not used during props diff\n   * Currently they are only used in getSubLayerProps\n   * TODO: find a more consistent solution\n   */\n  static defaultProps: any = {};\n  opts!: OptionsT;\n\n  constructor(opts?: OptionsT) {\n    if (opts) {\n      this.opts = opts;\n    }\n  }\n\n  /** Returns true if two extensions are equivalent */\n  equals(extension: LayerExtension<OptionsT>): boolean {\n    if (this === extension) {\n      return true;\n    }\n\n    return this.constructor === extension.constructor && deepEqual(this.opts, extension.opts);\n  }\n\n  /** Only called if attached to a primitive layer */\n  getShaders(this: Layer, extension: this): any {\n    return null;\n  }\n\n  /** Only called if attached to a CompositeLayer */\n  getSubLayerProps(this: CompositeLayer, extension: this): any {\n    const {defaultProps} = extension.constructor as typeof LayerExtension;\n    const newProps = {\n      updateTriggers: {}\n    };\n\n    /* eslint-disable max-depth */\n    for (const key in defaultProps) {\n      if (key in this.props) {\n        const propDef = defaultProps[key];\n        const propValue = this.props[key];\n        newProps[key] = propValue;\n        if (propDef && propDef.type === 'accessor') {\n          newProps.updateTriggers[key] = this.props.updateTriggers[key];\n          if (typeof propValue === 'function') {\n            newProps[key] = this.getSubLayerAccessor(propValue);\n          }\n        }\n      }\n    }\n    /* eslint-enable max-depth */\n    return newProps;\n  }\n\n  /* eslint-disable @typescript-eslint/no-empty-function */\n  initializeState(this: Layer, context: LayerContext, extension: this): void {}\n\n  updateState(this: Layer, params: UpdateParameters<Layer>, extension: this): void {}\n\n  draw(this: Layer, params: any, extension: this): void {}\n\n  finalizeState(this: Layer, context: LayerContext, extension: this): void {}\n}\n"],"file":"layer-extension.js"}