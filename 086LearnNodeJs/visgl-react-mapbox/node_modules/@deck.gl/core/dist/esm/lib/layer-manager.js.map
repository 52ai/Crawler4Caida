{"version":3,"sources":["../../../src/lib/layer-manager.ts"],"names":["Timeline","LIFECYCLE","log","debug","flatten","Stats","ResourceManager","Viewport","createProgramManager","TRACE_SET_LAYERS","TRACE_ACTIVATE_VIEWPORT","LayerManager","constructor","gl","deck","stats","viewport","timeline","context","layers","resourceManager","protocol","mousePosition","userData","layerManager","programManager","id","onError","undefined","Object","seal","finalize","layer","_finalizeLayer","needsRedraw","opts","clearRedrawFlags","redraw","_needsRedraw","layerNeedsRedraw","getNeedsRedraw","needsUpdate","_nextLayers","_lastRenderedLayers","_needsUpdate","setNeedsRedraw","reason","setNeedsUpdate","getLayers","layerIds","filter","find","layerId","indexOf","setProps","props","_debug","setLayers","newLayers","flatLayers","Boolean","_updateLayers","updateLayers","_handleError","stage","error","raiseError","oldLayers","oldLayerMap","oldLayer","warn","generatedLayers","_updateSublayersRecursively","_finalizeOldLayers","hasUniformTransition","newLayer","sublayers","validateProps","_initializeLayer","_transferLayerState","_updateLayer","push","isComposite","getSubLayers","err","_initialize","lifecycle","INITIALIZED","_transferState","MATCHED","AWAITING_GC","_update","AWAITING_FINALIZATION","_finalize","FINALIZED"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Timeline} from '@luma.gl/core';\nimport {LIFECYCLE} from '../lifecycle/constants';\nimport log from '../utils/log';\nimport debug from '../debug';\nimport {flatten} from '../utils/flatten';\nimport {Stats} from '@probe.gl/stats';\nimport ResourceManager from './resource/resource-manager';\n\nimport Viewport from '../viewports/viewport';\nimport {createProgramManager} from '../shaderlib';\n\nimport type Layer from './layer';\nimport type CompositeLayer from './composite-layer';\nimport type Deck from './deck';\nimport type {ProgramManager} from '@luma.gl/engine';\n\nconst TRACE_SET_LAYERS = 'layerManager.setLayers';\nconst TRACE_ACTIVATE_VIEWPORT = 'layerManager.activateViewport';\n\nexport type LayerContext = {\n  layerManager: LayerManager;\n  resourceManager: ResourceManager;\n  deck?: Deck;\n  gl: WebGLRenderingContext;\n  programManager: ProgramManager;\n  stats: Stats;\n  viewport: Viewport;\n  timeline: Timeline;\n  mousePosition: {x: number; y: number} | null;\n  userData: any;\n  onError?: <PropsT>(error: Error, source: Layer<PropsT>) => void;\n};\n\nexport type LayersList = (Layer | undefined | false | null | LayersList)[];\n\nexport default class LayerManager {\n  layers: Layer[];\n  context: LayerContext;\n  resourceManager: ResourceManager;\n\n  private _lastRenderedLayers: LayersList = [];\n  private _needsRedraw: string | false = false;\n  private _needsUpdate: string | false = false;\n  private _nextLayers: LayersList | null = null;\n  private _debug: boolean = false;\n\n  // eslint-disable-next-line\n  constructor(\n    gl,\n    {\n      deck,\n      stats,\n      viewport,\n      timeline\n    }: {\n      deck?: Deck;\n      stats?: Stats;\n      viewport?: Viewport;\n      timeline?: Timeline;\n    } = {}\n  ) {\n    // Currently deck.gl expects the DeckGL.layers array to be different\n    // whenever React rerenders. If the same layers array is used, the\n    // LayerManager's diffing algorithm will generate a fatal error and\n    // break the rendering.\n\n    // `this._lastRenderedLayers` stores the UNFILTERED layers sent\n    // down to LayerManager, so that `layers` reference can be compared.\n    // If it's the same across two React render calls, the diffing logic\n    // will be skipped.\n    this.layers = [];\n    this.resourceManager = new ResourceManager({gl, protocol: 'deck://'});\n\n    this.context = {\n      mousePosition: null,\n      userData: {},\n      layerManager: this,\n      gl,\n      deck,\n      // Enabling luma.gl Program caching using private API (_cachePrograms)\n      programManager: gl && createProgramManager(gl),\n      stats: stats || new Stats({id: 'deck.gl'}),\n      // Make sure context.viewport is not empty on the first layer initialization\n      viewport: viewport || new Viewport({id: 'DEFAULT-INITIAL-VIEWPORT'}), // Current viewport, exposed to layers for project* function\n      timeline: timeline || new Timeline(),\n      resourceManager: this.resourceManager,\n      onError: undefined\n    };\n\n    Object.seal(this);\n  }\n\n  /** Method to call when the layer manager is not needed anymore. */\n  finalize() {\n    this.resourceManager.finalize();\n    // Finalize all layers\n    for (const layer of this.layers) {\n      this._finalizeLayer(layer);\n    }\n  }\n\n  /** Check if a redraw is needed */\n  needsRedraw(\n    opts: {\n      /** Reset redraw flags to false after the call */\n      clearRedrawFlags: boolean;\n    } = {clearRedrawFlags: false}\n  ): string | false {\n    let redraw = this._needsRedraw;\n    if (opts.clearRedrawFlags) {\n      this._needsRedraw = false;\n    }\n\n    // This layers list doesn't include sublayers, relying on composite layers\n    for (const layer of this.layers) {\n      // Call every layer to clear their flags\n      const layerNeedsRedraw = layer.getNeedsRedraw(opts);\n      redraw = redraw || layerNeedsRedraw;\n    }\n\n    return redraw;\n  }\n\n  /** Check if a deep update of all layers is needed */\n  needsUpdate(): string | false {\n    if (this._nextLayers && this._nextLayers !== this._lastRenderedLayers) {\n      // New layers array may be the same as the old one if `setProps` is called by React\n      return 'layers changed';\n    }\n    return this._needsUpdate;\n  }\n\n  /** Layers will be redrawn (in next animation frame) */\n  setNeedsRedraw(reason: string): void {\n    this._needsRedraw = this._needsRedraw || reason;\n  }\n\n  /** Layers will be updated deeply (in next animation frame)\n    Potentially regenerating attributes and sub layers */\n  setNeedsUpdate(reason: string): void {\n    this._needsUpdate = this._needsUpdate || reason;\n  }\n\n  /** Gets a list of currently rendered layers. Optionally filter by id. */\n  getLayers({layerIds}: {layerIds?: string[]} = {}): Layer[] {\n    // Filtering by layerId compares beginning of strings, so that sublayers will be included\n    // Dependes on the convention of adding suffixes to the parent's layer name\n    return layerIds\n      ? this.layers.filter(layer => layerIds.find(layerId => layer.id.indexOf(layerId) === 0))\n      : this.layers;\n  }\n\n  /** Set props needed for layer rendering and picking. */\n  setProps(props: any): void {\n    if ('debug' in props) {\n      this._debug = props.debug;\n    }\n\n    // A way for apps to add data to context that can be accessed in layers\n    if ('userData' in props) {\n      this.context.userData = props.userData;\n    }\n\n    // New layers will be processed in `updateLayers` in the next update cycle\n    if ('layers' in props) {\n      this._nextLayers = props.layers;\n    }\n\n    if ('onError' in props) {\n      this.context.onError = props.onError;\n    }\n  }\n\n  /** Supply a new layer list, initiating sublayer generation and layer matching */\n  setLayers(newLayers: LayersList, reason?: string): void {\n    debug(TRACE_SET_LAYERS, this, reason, newLayers);\n\n    this._lastRenderedLayers = newLayers;\n\n    const flatLayers = flatten(newLayers, Boolean) as Layer[];\n\n    for (const layer of flatLayers) {\n      layer.context = this.context;\n    }\n\n    this._updateLayers(this.layers, flatLayers);\n  }\n\n  /** Update layers from last cycle if `setNeedsUpdate()` has been called */\n  updateLayers(): void {\n    // NOTE: For now, even if only some layer has changed, we update all layers\n    // to ensure that layer id maps etc remain consistent even if different\n    // sublayers are rendered\n    const reason = this.needsUpdate();\n    if (reason) {\n      this.setNeedsRedraw(`updating layers: ${reason}`);\n      // Force a full update\n      this.setLayers(this._nextLayers || this._lastRenderedLayers, reason);\n    }\n    // Updated, clear the backlog\n    this._nextLayers = null;\n  }\n\n  //\n  // INTERNAL METHODS\n  //\n\n  /** Make a viewport \"current\" in layer context, updating viewportChanged flags */\n  activateViewport = (viewport: Viewport) => {\n    debug(TRACE_ACTIVATE_VIEWPORT, this, viewport);\n    if (viewport) {\n      this.context.viewport = viewport;\n    }\n  };\n\n  private _handleError(stage: string, error: Error, layer: Layer) {\n    layer.raiseError(error, `${stage} of ${layer}`);\n  }\n\n  // TODO - mark layers with exceptions as bad and remove from rendering cycle?\n  /** Match all layers, checking for caught errors\n    to avoid having an exception in one layer disrupt other layers */\n  private _updateLayers(oldLayers: Layer[], newLayers: Layer[]): void {\n    // Create old layer map\n    const oldLayerMap: {[layerId: string]: Layer | null} = {};\n    for (const oldLayer of oldLayers) {\n      if (oldLayerMap[oldLayer.id]) {\n        log.warn(`Multiple old layers with same id ${oldLayer.id}`)();\n      } else {\n        oldLayerMap[oldLayer.id] = oldLayer;\n      }\n    }\n\n    // Allocate array for generated layers\n    const generatedLayers: Layer[] = [];\n\n    // Match sublayers\n    this._updateSublayersRecursively(newLayers, oldLayerMap, generatedLayers);\n\n    // Finalize unmatched layers\n    this._finalizeOldLayers(oldLayerMap);\n\n    let needsUpdate: string | false = false;\n    for (const layer of generatedLayers) {\n      if (layer.hasUniformTransition()) {\n        needsUpdate = `Uniform transition in ${layer}`;\n        break;\n      }\n    }\n\n    this._needsUpdate = needsUpdate;\n    this.layers = generatedLayers;\n  }\n\n  /* eslint-disable complexity,max-statements */\n  // Note: adds generated layers to `generatedLayers` array parameter\n  private _updateSublayersRecursively(\n    newLayers: Layer[],\n    oldLayerMap: {[layerId: string]: Layer | null},\n    generatedLayers: Layer[]\n  ) {\n    for (const newLayer of newLayers) {\n      newLayer.context = this.context;\n\n      // Given a new coming layer, find its matching old layer (if any)\n      const oldLayer = oldLayerMap[newLayer.id];\n      if (oldLayer === null) {\n        // null, rather than undefined, means this id was originally there\n        log.warn(`Multiple new layers with same id ${newLayer.id}`)();\n      }\n      // Remove the old layer from candidates, as it has been matched with this layer\n      oldLayerMap[newLayer.id] = null;\n\n      let sublayers: Layer[] | null = null;\n\n      // We must not generate exceptions until after layer matching is complete\n      try {\n        if (this._debug && oldLayer !== newLayer) {\n          newLayer.validateProps();\n        }\n\n        if (!oldLayer) {\n          this._initializeLayer(newLayer);\n        } else {\n          this._transferLayerState(oldLayer, newLayer);\n          this._updateLayer(newLayer);\n        }\n        generatedLayers.push(newLayer);\n\n        // Call layer lifecycle method: render sublayers\n        sublayers = newLayer.isComposite ? (newLayer as CompositeLayer).getSubLayers() : null;\n        // End layer lifecycle method: render sublayers\n      } catch (err) {\n        this._handleError('matching', err as Error, newLayer); // Record first exception\n      }\n\n      if (sublayers) {\n        this._updateSublayersRecursively(sublayers, oldLayerMap, generatedLayers);\n      }\n    }\n  }\n  /* eslint-enable complexity,max-statements */\n\n  // Finalize any old layers that were not matched\n  private _finalizeOldLayers(oldLayerMap: {[layerId: string]: Layer | null}): void {\n    for (const layerId in oldLayerMap) {\n      const layer = oldLayerMap[layerId];\n      if (layer) {\n        this._finalizeLayer(layer);\n      }\n    }\n  }\n\n  // / EXCEPTION SAFE LAYER ACCESS\n\n  /** Safely initializes a single layer, calling layer methods */\n  private _initializeLayer(layer: Layer): void {\n    try {\n      layer._initialize();\n      layer.lifecycle = LIFECYCLE.INITIALIZED;\n    } catch (err) {\n      this._handleError('initialization', err as Error, layer);\n      // TODO - what should the lifecycle state be here? LIFECYCLE.INITIALIZATION_FAILED?\n    }\n  }\n\n  /** Transfer state from one layer to a newer version */\n  private _transferLayerState(oldLayer: Layer, newLayer: Layer): void {\n    newLayer._transferState(oldLayer);\n    newLayer.lifecycle = LIFECYCLE.MATCHED;\n\n    if (newLayer !== oldLayer) {\n      oldLayer.lifecycle = LIFECYCLE.AWAITING_GC;\n    }\n  }\n\n  /** Safely updates a single layer, cleaning all flags */\n  private _updateLayer(layer: Layer): void {\n    try {\n      layer._update();\n    } catch (err) {\n      this._handleError('update', err as Error, layer);\n    }\n  }\n\n  /** Safely finalizes a single layer, removing all resources */\n  private _finalizeLayer(layer: Layer): void {\n    this._needsRedraw = this._needsRedraw || `finalized ${layer}`;\n\n    layer.lifecycle = LIFECYCLE.AWAITING_FINALIZATION;\n\n    try {\n      layer._finalize();\n      layer.lifecycle = LIFECYCLE.FINALIZED;\n    } catch (err) {\n      this._handleError('finalization', err as Error, layer);\n    }\n  }\n}\n"],"file":"layer-manager.js"}