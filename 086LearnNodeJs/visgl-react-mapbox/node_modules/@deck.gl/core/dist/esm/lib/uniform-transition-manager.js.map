{"version":3,"sources":["../../../src/lib/uniform-transition-manager.js"],"names":["normalizeTransitionSettings","CPUInterpolationTransition","CPUSpringTransition","log","TRANSITION_TYPES","interpolation","spring","UniformTransitionManager","constructor","timeline","transitions","Map","active","size","add","key","fromValue","toValue","settings","has","transition","get","value","remove","TransitionType","type","error","start","set","cancel","delete","update","propsInTransition","inProgress","clear","keys"],"mappings":"AAAA,SAAQA,2BAAR,QAA0C,wCAA1C;AACA,OAAOC,0BAAP,MAAuC,6CAAvC;AACA,OAAOC,mBAAP,MAAgC,sCAAhC;AACA,OAAOC,GAAP,MAAgB,cAAhB;AAEA,MAAMC,gBAAgB,GAAG;AACvBC,EAAAA,aAAa,EAAEJ,0BADQ;AAEvBK,EAAAA,MAAM,EAAEJ;AAFe,CAAzB;AAKA,eAAe,MAAMK,wBAAN,CAA+B;AAC5CC,EAAAA,WAAW,CAACC,QAAD,EAAW;AACpB,SAAKC,WAAL,GAAmB,IAAIC,GAAJ,EAAnB;AACA,SAAKF,QAAL,GAAgBA,QAAhB;AACD;;AAES,MAANG,MAAM,GAAG;AACX,WAAO,KAAKF,WAAL,CAAiBG,IAAjB,GAAwB,CAA/B;AACD;;AAEDC,EAAAA,GAAG,CAACC,GAAD,EAAMC,SAAN,EAAiBC,OAAjB,EAA0BC,QAA1B,EAAoC;AACrC,UAAM;AAACR,MAAAA;AAAD,QAAgB,IAAtB;;AACA,QAAIA,WAAW,CAACS,GAAZ,CAAgBJ,GAAhB,CAAJ,EAA0B;AACxB,YAAMK,UAAU,GAAGV,WAAW,CAACW,GAAZ,CAAgBN,GAAhB,CAAnB;AAEA,YAAM;AAACO,QAAAA,KAAK,GAAGF,UAAU,CAACF,QAAX,CAAoBF;AAA7B,UAA0CI,UAAhD;AAEAJ,MAAAA,SAAS,GAAGM,KAAZ;AACA,WAAKC,MAAL,CAAYR,GAAZ;AACD;;AAEDG,IAAAA,QAAQ,GAAGlB,2BAA2B,CAACkB,QAAD,CAAtC;;AACA,QAAI,CAACA,QAAL,EAAe;AACb;AACD;;AAED,UAAMM,cAAc,GAAGpB,gBAAgB,CAACc,QAAQ,CAACO,IAAV,CAAvC;;AACA,QAAI,CAACD,cAAL,EAAqB;AACnBrB,MAAAA,GAAG,CAACuB,KAAJ,wCAA0CR,QAAQ,CAACO,IAAnD;AACA;AACD;;AACD,UAAML,UAAU,GAAG,IAAII,cAAJ,CAAmB,KAAKf,QAAxB,CAAnB;AACAW,IAAAA,UAAU,CAACO,KAAX,CAAiB,EACf,GAAGT,QADY;AAEfF,MAAAA,SAFe;AAGfC,MAAAA;AAHe,KAAjB;AAKAP,IAAAA,WAAW,CAACkB,GAAZ,CAAgBb,GAAhB,EAAqBK,UAArB;AACD;;AAEDG,EAAAA,MAAM,CAACR,GAAD,EAAM;AACV,UAAM;AAACL,MAAAA;AAAD,QAAgB,IAAtB;;AACA,QAAIA,WAAW,CAACS,GAAZ,CAAgBJ,GAAhB,CAAJ,EAA0B;AACxBL,MAAAA,WAAW,CAACW,GAAZ,CAAgBN,GAAhB,EAAqBc,MAArB;AACAnB,MAAAA,WAAW,CAACoB,MAAZ,CAAmBf,GAAnB;AACD;AACF;;AAEDgB,EAAAA,MAAM,GAAG;AACP,UAAMC,iBAAiB,GAAG,EAA1B;;AAEA,SAAK,MAAM,CAACjB,GAAD,EAAMK,UAAN,CAAX,IAAgC,KAAKV,WAArC,EAAkD;AAChDU,MAAAA,UAAU,CAACW,MAAX;AACAC,MAAAA,iBAAiB,CAACjB,GAAD,CAAjB,GAAyBK,UAAU,CAACE,KAApC;;AACA,UAAI,CAACF,UAAU,CAACa,UAAhB,EAA4B;AAE1B,aAAKV,MAAL,CAAYR,GAAZ;AACD;AACF;;AAED,WAAOiB,iBAAP;AACD;;AAEDE,EAAAA,KAAK,GAAG;AACN,SAAK,MAAMnB,GAAX,IAAkB,KAAKL,WAAL,CAAiByB,IAAjB,EAAlB,EAA2C;AACzC,WAAKZ,MAAL,CAAYR,GAAZ;AACD;AACF;;AAnE2C","sourcesContent":["import {normalizeTransitionSettings} from './attribute/attribute-transition-utils';\nimport CPUInterpolationTransition from '../transitions/cpu-interpolation-transition';\nimport CPUSpringTransition from '../transitions/cpu-spring-transition';\nimport log from '../utils/log';\n\nconst TRANSITION_TYPES = {\n  interpolation: CPUInterpolationTransition,\n  spring: CPUSpringTransition\n};\n\nexport default class UniformTransitionManager {\n  constructor(timeline) {\n    this.transitions = new Map();\n    this.timeline = timeline;\n  }\n\n  get active() {\n    return this.transitions.size > 0;\n  }\n\n  add(key, fromValue, toValue, settings) {\n    const {transitions} = this;\n    if (transitions.has(key)) {\n      const transition = transitions.get(key);\n      // value may not be available if `update()` has not been called. Fallback to `fromValue`\n      const {value = transition.settings.fromValue} = transition;\n      // start from interrupted position\n      fromValue = value;\n      this.remove(key);\n    }\n\n    settings = normalizeTransitionSettings(settings);\n    if (!settings) {\n      return;\n    }\n\n    const TransitionType = TRANSITION_TYPES[settings.type];\n    if (!TransitionType) {\n      log.error(`unsupported transition type '${settings.type}'`)();\n      return;\n    }\n    const transition = new TransitionType(this.timeline);\n    transition.start({\n      ...settings,\n      fromValue,\n      toValue\n    });\n    transitions.set(key, transition);\n  }\n\n  remove(key) {\n    const {transitions} = this;\n    if (transitions.has(key)) {\n      transitions.get(key).cancel();\n      transitions.delete(key);\n    }\n  }\n\n  update() {\n    const propsInTransition = {};\n\n    for (const [key, transition] of this.transitions) {\n      transition.update();\n      propsInTransition[key] = transition.value;\n      if (!transition.inProgress) {\n        // transition ended\n        this.remove(key);\n      }\n    }\n\n    return propsInTransition;\n  }\n\n  clear() {\n    for (const key of this.transitions.keys()) {\n      this.remove(key);\n    }\n  }\n}\n"],"file":"uniform-transition-manager.js"}