{"version":3,"sources":["../../../../src/lib/attribute/attribute-transition-manager.ts"],"names":["Transform","GPUInterpolationTransition","GPUSpringTransition","log","TRANSITION_TYPES","interpolation","spring","AttributeTransitionManager","constructor","gl","id","timeline","transitions","needsRedraw","numInstances","isSupported","finalize","attributeName","_removeTransition","update","attributes","attribute","settings","getTransitionSetting","_updateAttribute","hasAttribute","transition","inProgress","getAttributes","animatedAttributes","attributeInTransition","run","updated","cancel","isNew","type","warn","TransitionType","error","start"],"mappings":"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","sourcesContent":["import {Transform} from '@luma.gl/core';\nimport GPUInterpolationTransition from '../../transitions/gpu-interpolation-transition';\nimport GPUSpringTransition from '../../transitions/gpu-spring-transition';\nimport log from '../../utils/log';\n\nimport type {TransitionSettings} from './attribute-transition-utils';\nimport type Attribute from './attribute';\nimport type {Timeline} from '@luma.gl/engine';\nimport type GPUTransition from '../../transitions/gpu-transition';\nimport type {ConstructorOf} from '../../types/types';\n\nconst TRANSITION_TYPES: Record<string, ConstructorOf<GPUTransition>> = {\n  interpolation: GPUInterpolationTransition,\n  spring: GPUSpringTransition\n};\n\nexport default class AttributeTransitionManager {\n  id: string;\n  isSupported: boolean;\n\n  private gl: WebGLRenderingContext;\n  private timeline?: Timeline;\n\n  private transitions: {[id: string]: GPUTransition};\n  private needsRedraw: boolean;\n  private numInstances: number;\n\n  constructor(\n    gl: WebGLRenderingContext,\n    {\n      id,\n      timeline\n    }: {\n      id: string;\n      timeline?: Timeline;\n    }\n  ) {\n    this.id = id;\n    this.gl = gl;\n    this.timeline = timeline;\n\n    this.transitions = {};\n    this.needsRedraw = false;\n    this.numInstances = 1;\n\n    this.isSupported = Transform.isSupported(gl);\n  }\n\n  finalize(): void {\n    for (const attributeName in this.transitions) {\n      this._removeTransition(attributeName);\n    }\n  }\n\n  /* Public methods */\n\n  // Called when attribute manager updates\n  // Check the latest attributes for updates.\n  update({\n    attributes,\n    transitions,\n    numInstances\n  }: {\n    attributes: {[id: string]: Attribute};\n    transitions: any;\n    numInstances: number;\n  }): void {\n    // Transform class will crash if elementCount is 0\n    this.numInstances = numInstances || 1;\n\n    for (const attributeName in attributes) {\n      const attribute = attributes[attributeName];\n      const settings = attribute.getTransitionSetting(transitions);\n\n      // this attribute might not support transitions?\n      if (!settings) continue; // eslint-disable-line no-continue\n      this._updateAttribute(attributeName, attribute, settings);\n    }\n\n    for (const attributeName in this.transitions) {\n      const attribute = attributes[attributeName];\n      if (!attribute || !attribute.getTransitionSetting(transitions)) {\n        // Animated attribute has been removed\n        this._removeTransition(attributeName);\n      }\n    }\n  }\n\n  // Returns `true` if attribute is transition-enabled\n  hasAttribute(attributeName: string): boolean {\n    const transition = this.transitions[attributeName];\n    return transition && transition.inProgress;\n  }\n\n  // Get all the animated attributes\n  getAttributes(): {[id: string]: Attribute} {\n    const animatedAttributes = {};\n\n    for (const attributeName in this.transitions) {\n      const transition = this.transitions[attributeName];\n      if (transition.inProgress) {\n        animatedAttributes[attributeName] = transition.attributeInTransition;\n      }\n    }\n\n    return animatedAttributes;\n  }\n\n  /* eslint-disable max-statements */\n  // Called every render cycle, run transform feedback\n  // Returns `true` if anything changes\n  run(): boolean {\n    if (!this.isSupported || this.numInstances === 0) {\n      return false;\n    }\n\n    for (const attributeName in this.transitions) {\n      const updated = this.transitions[attributeName].update();\n      if (updated) {\n        this.needsRedraw = true;\n      }\n    }\n\n    const needsRedraw = this.needsRedraw;\n    this.needsRedraw = false;\n    return needsRedraw;\n  }\n  /* eslint-enable max-statements */\n\n  /* Private methods */\n  private _removeTransition(attributeName: string): void {\n    this.transitions[attributeName].cancel();\n    delete this.transitions[attributeName];\n  }\n\n  // Check an attributes for updates\n  // Returns a transition object if a new transition is triggered.\n  private _updateAttribute(\n    attributeName: string,\n    attribute: Attribute,\n    settings: TransitionSettings\n  ): void {\n    const transition = this.transitions[attributeName];\n    // an attribute can change transition type when it updates\n    // let's remove the transition when that happens so we can create the new transition type\n    // TODO: when switching transition types, make sure to carry over the attribute's\n    // previous buffers, currentLength, startIndices, etc, to be used as the starting point\n    // for the next transition\n    let isNew = !transition || transition.type !== settings.type;\n    if (isNew) {\n      if (!this.isSupported) {\n        log.warn(\n          `WebGL2 not supported by this browser. Transition for ${attributeName} is disabled.`\n        )();\n        return;\n      }\n\n      if (transition) {\n        this._removeTransition(attributeName);\n      }\n\n      const TransitionType = TRANSITION_TYPES[settings.type];\n      if (TransitionType) {\n        this.transitions[attributeName] = new TransitionType({\n          attribute,\n          timeline: this.timeline,\n          gl: this.gl\n        });\n      } else {\n        log.error(`unsupported transition type '${settings.type}'`)();\n        isNew = false;\n      }\n    }\n\n    if (isNew || attribute.needsRedraw()) {\n      this.needsRedraw = true;\n      this.transitions[attributeName].start(settings, this.numInstances);\n    }\n  }\n}\n"],"file":"attribute-transition-manager.js"}