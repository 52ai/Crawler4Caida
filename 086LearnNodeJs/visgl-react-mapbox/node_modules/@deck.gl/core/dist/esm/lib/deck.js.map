{"version":3,"sources":["../../../src/lib/deck.ts"],"names":["LayerManager","ViewManager","MapView","EffectManager","DeckRenderer","DeckPicker","Tooltip","log","deepEqual","typedArrayManager","deckGlobal","getBrowser","AnimationLoop","createGLContext","instrumentGLContext","setParameters","Timeline","lumaStats","Stats","EventManager","assert","EVENTS","noop","getCursor","isDragging","defaultProps","id","width","height","style","viewState","initialViewState","pickingRadius","layerFilter","glOptions","parameters","parent","gl","canvas","layers","effects","views","controller","useDevicePixels","touchAction","eventRecognizerOptions","_framebuffer","_animate","_pickable","_typedArrayManagerProps","_customRender","onWebGLInitialized","onResize","onViewStateChange","onInteractionStateChange","onBeforeRender","onAfterRender","onLoad","onError","error","message","onHover","onClick","onDragStart","onDrag","onDragEnd","_onMetrics","getTooltip","debug","drawPickingColors","Deck","constructor","props","event","_pickRequest","type","x","y","radius","leftButton","rightButton","pos","offsetCenter","layerManager","context","mousePosition","eventOptions","getLayers","info","deckPicker","getLastPickedObject","viewports","getViewports","_lastPointerDownInfo","layer","layerHandler","handler","rootHandler","handled","call","pickedInfo","_pick","result","emptyInfo","_needsRedraw","mode","cursorState","isHovering","warn","document","_createCanvas","animationLoop","_createAnimationLoop","stats","metrics","fps","setPropsTime","updateAttributesTime","framesRedrawn","pickTime","pickCount","gpuTime","gpuTimePerFrame","cpuTime","cpuTimePerFrame","bufferMemory","textureMemory","renderbufferMemory","gpuMemory","_metricsCounter","setProps","setOptions","start","finalize","stop","viewManager","effectManager","deckRenderer","eventManager","destroy","tooltip","remove","parentElement","removeChild","get","timeStart","removed","Object","assign","_setCanvasSize","resolvedProps","create","_getViews","_getViewState","activateViewport","timeEnd","needsRedraw","opts","clearRedrawFlags","redraw","viewManagerNeedsRedraw","layerManagerNeedsRedraw","effectManagerNeedsRedraw","deckRendererNeedsRedraw","reason","redrawReason","incrementCount","_drawLayers","isInitialized","getViews","rect","pickObject","infos","length","pickMultipleObjects","depth","pickObjects","_addResources","resources","forceUpdate","resourceManager","add","resourceId","data","_removeResources","resourceIds","method","statKey","onViewportActive","getEffects","getElementById","createElement","body","appendChild","cssWidth","Number","isFinite","cssHeight","position","_updateCanvasSize","newWidth","clientWidth","newHeight","clientHeight","autoResizeViewport","onCreateContext","onContextLost","_onContextLost","onInitialize","_setGLContext","onRender","_onRenderFrame","bind","Array","isArray","Error","_pickAndCallback","displayInfo","setTooltip","_updateCursor","container","cursor","enable","copyState","blend","blendFunc","polygonOffsetFill","depthTest","depthFunc","timeline","play","attachTimeline","recognizerOptions","events","pointerdown","_onPointerDown","pointermove","_onPointerMove","pointerleave","eventType","on","_onEvent","_onViewStateChange","_onInteractionStateChange","viewport","deck","renderOptions","renderLayers","target","pass","animationProps","_getFrameStats","_getMetrics","reset","table","isVisible","updateLayers","updateViewStates","params","viewId","interactionState","animationLoopStats","addTime","lastTiming","getHz","time","count","getAverageTime","memoryStats","VERSION"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport LayerManager from './layer-manager';\nimport ViewManager from './view-manager';\nimport MapView from '../views/map-view';\nimport EffectManager from './effect-manager';\nimport DeckRenderer from './deck-renderer';\nimport DeckPicker from './deck-picker';\nimport Tooltip from './tooltip';\nimport log from '../utils/log';\nimport {deepEqual} from '../utils/deep-equal';\nimport typedArrayManager from '../utils/typed-array-manager';\nimport deckGlobal from './init';\n\nimport {getBrowser} from '@probe.gl/env';\nimport GL from '@luma.gl/constants';\nimport {\n  AnimationLoop,\n  createGLContext,\n  instrumentGLContext,\n  setParameters,\n  Timeline,\n  lumaStats\n} from '@luma.gl/core';\nimport {Stats} from '@probe.gl/stats';\nimport {EventManager} from 'mjolnir.js';\n\nimport assert from '../utils/assert';\nimport {EVENTS} from './constants';\n\nimport type {Effect} from './effect';\nimport type {FilterContext} from '../passes/layers-pass';\nimport type Layer from './layer';\nimport type View from '../views/view';\nimport type Viewport from '../viewports/viewport';\nimport type {RecognizerOptions, MjolnirGestureEvent, MjolnirPointerEvent} from 'mjolnir.js';\nimport type {Framebuffer} from '@luma.gl/core';\nimport type {TypedArrayManagerOptions} from '../utils/typed-array-manager';\nimport type {ViewStateChangeParameters, InteractionState} from '../controllers/controller';\nimport type {PickingInfo} from './picking/pick-info';\nimport type {PickByPointOptions, PickByRectOptions} from './deck-picker';\nimport type {LayersList} from './layer-manager';\nimport type {TooltipContent} from './tooltip';\n\n/* global document */\n\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nfunction noop() {}\n\nconst getCursor = ({isDragging}) => (isDragging ? 'grabbing' : 'grab');\n\nexport type DeckMetrics = {\n  fps: number;\n  setPropsTime: number;\n  updateAttributesTime: number;\n  framesRedrawn: number;\n  pickTime: number;\n  pickCount: number;\n  gpuTime: number;\n  gpuTimePerFrame: number;\n  cpuTime: number;\n  cpuTimePerFrame: number;\n  bufferMemory: number;\n  textureMemory: number;\n  renderbufferMemory: number;\n  gpuMemory: number;\n};\n\ntype CursorState = {\n  /** Whether the cursor is over a pickable object */\n  isHovering: boolean;\n  /** Whether the cursor is down */\n  isDragging: boolean;\n};\n\nexport type DeckProps = {\n  /** Id of this Deck instance */\n  id?: string;\n  /** Width of the canvas, a number in pixels or a valid CSS string.\n   * @default `'100%'`\n   */\n  width?: string | number | null;\n  /** Height of the canvas, a number in pixels or a valid CSS string.\n   * @default `'100%'`\n   */\n  height?: string | number | null;\n  /** Additional CSS styles for the canvas. */\n  style?: Partial<CSSStyleDeclaration> | null;\n\n  /** Controls the resolution of drawing buffer used for rendering.\n   * @default `true` (use browser devicePixelRatio)\n   */\n  useDevicePixels?: boolean | number;\n  /** Extra pixels around the pointer to include while picking.\n   * @default `0`\n   */\n  pickingRadius?: number;\n\n  /** WebGL parameters to be set before each frame is rendered.\n   * @see https://github.com/visgl/luma.gl/blob/8.5-release/modules/gltools/docs/api-reference/parameter-setting.md#parameters\n   */\n  parameters?: any;\n  /** If supplied, will be called before a layer is drawn to determine whether it should be rendered. */\n  layerFilter?: ((context: FilterContext) => boolean) | null;\n\n  /** The container to append the auto-created canvas to.\n   * @default `document.body`\n   */\n  parent?: HTMLDivElement | null;\n  /** The canvas to render into.\n   * Can be either a HTMLCanvasElement or the element id.\n   * Will be auto-created if not supplied.\n   */\n  canvas?: HTMLCanvasElement | string | null;\n  /** WebGL context. Will be auto-created if not supplied. */\n  gl?: WebGLRenderingContext | null;\n  /** Additional options used when creating the WebGL context. */\n  glOptions?: WebGLContextAttributes;\n\n  /**\n   * The array of Layer instances to be rendered.\n   * Nested arrays are accepted, as well as falsy values (`null`, `false`, `undefined`)\n   */\n  layers?: LayersList;\n  /** The array of effects to be rendered. A lighting effect will be added if an empty array is supplied. */\n  effects?: Effect[];\n  /** A single View instance, or an array of `View` instances.\n   * @default `new MapView()`\n   */\n  views?: View | View[] | null;\n  /** Options for viewport interactivity, e.g. pan, rotate and zoom with mouse, touch and keyboard.\n   * This is a shorthand for defining interaction with the `views` prop if you are using the default view (i.e. a single `MapView`)\n   */\n  controller?: View['props']['controller'];\n  /**\n   * An object that describes the view state for each view in the `views` prop.\n   * Use if the camera state should be managed external to the `Deck` instance.\n   */\n  viewState?: any;\n  /**\n   * If provided, the `Deck` instance will track camera state changes automatically,\n   * with `initialViewState` as its initial settings.\n   */\n  initialViewState?: any;\n\n  /** Allow browser default touch actions.\n   * @default `'none'`\n   */\n  touchAction?: string;\n  /** Set Hammer.js recognizer options for gesture recognition. See documentation for details. */\n  eventRecognizerOptions?: {\n    [type: string]: RecognizerOptions;\n  };\n\n  /** (Experimental) Render to a custom frame buffer other than to screen. */\n  _framebuffer?: Framebuffer | null;\n  /** (Experimental) Forces deck.gl to redraw layers every animation frame. */\n  _animate?: boolean;\n  /** (Experimental) If set to `false`, force disables all picking features, disregarding the `pickable` prop set in any layer. */\n  _pickable?: boolean;\n  /** (Experimental) Fine-tune attribute memory usage. See documentation for details. */\n  _typedArrayManagerProps?: TypedArrayManagerOptions;\n\n  /** Called once the WebGL context has been initiated. */\n  onWebGLInitialized?: (gl: WebGLRenderingContext) => void;\n  /** Called when the canvas resizes. */\n  onResize?: (dimensions: {width: number; height: number}) => void;\n  /** Called when the user has interacted with the deck.gl canvas, e.g. using mouse, touch or keyboard. */\n  onViewStateChange?: (params: ViewStateChangeParameters & {viewId: string}) => any;\n  /** Called when the user has interacted with the deck.gl canvas, e.g. using mouse, touch or keyboard. */\n  onInteractionStateChange?: (state: InteractionState) => void;\n  /** Called just before the canvas rerenders. */\n  onBeforeRender?: (context: {gl: WebGLRenderingContext}) => void;\n  /** Called right after the canvas rerenders. */\n  onAfterRender?: (context: {gl: WebGLRenderingContext}) => void;\n  /** Called once after gl context and all Deck components are created. */\n  onLoad?: () => void;\n  /** Called if deck.gl encounters an error.\n   * If this callback is set to `null`, errors are silently ignored.\n   * @default `console.error`\n   */\n  onError?: ((error: Error, layer?: Layer) => void) | null;\n  /** Called when the pointer moves over the canvas. */\n  onHover?: ((info: PickingInfo, event: MjolnirPointerEvent) => void) | null;\n  /** Called when clicking on the canvas. */\n  onClick?: ((info: PickingInfo, event: MjolnirGestureEvent) => void) | null;\n  /** Called when the user starts dragging on the canvas. */\n  onDragStart?: ((info: PickingInfo, event: MjolnirGestureEvent) => void) | null;\n  /** Called when dragging the canvas. */\n  onDrag?: ((info: PickingInfo, event: MjolnirGestureEvent) => void) | null;\n  /** Called when the user releases from dragging the canvas. */\n  onDragEnd?: ((info: PickingInfo, event: MjolnirGestureEvent) => void) | null;\n\n  /** (Experimental) Replace the default redraw procedure */\n  _customRender?: ((reason: string) => void) | null;\n  /** (Experimental) Called once every second with performance metrics. */\n  _onMetrics?: ((metrics: DeckMetrics) => void) | null;\n\n  /** A custom callback to retrieve the cursor type. */\n  getCursor?: (state: CursorState) => string;\n  /** Callback that takes a hovered-over point and renders a tooltip. */\n  getTooltip?: ((info: PickingInfo) => TooltipContent) | null;\n\n  /** (Debug) Flag to enable WebGL debug mode. Requires importing `@luma.gl/debug`. */\n  debug?: boolean;\n  /** (Debug) Render the picking buffer to screen. */\n  drawPickingColors?: boolean;\n};\n\nconst defaultProps = {\n  id: '',\n  width: '100%',\n  height: '100%',\n  style: null,\n  viewState: null,\n  initialViewState: null,\n  pickingRadius: 0,\n  layerFilter: null,\n  glOptions: {},\n  parameters: {},\n  parent: null,\n  gl: null,\n  canvas: null,\n  layers: [],\n  effects: [],\n  views: null,\n  controller: null, // Rely on external controller, e.g. react-map-gl\n  useDevicePixels: true,\n  touchAction: 'none',\n  eventRecognizerOptions: {},\n  _framebuffer: null,\n  _animate: false,\n  _pickable: true,\n  _typedArrayManagerProps: {},\n  _customRender: null,\n\n  onWebGLInitialized: noop,\n  onResize: noop,\n  onViewStateChange: noop,\n  onInteractionStateChange: noop,\n  onBeforeRender: noop,\n  onAfterRender: noop,\n  onLoad: noop,\n  onError: (error: Error) => log.error(error.message)(),\n  onHover: null,\n  onClick: null,\n  onDragStart: null,\n  onDrag: null,\n  onDragEnd: null,\n  _onMetrics: null,\n\n  getCursor,\n  getTooltip: null,\n\n  debug: false,\n  drawPickingColors: false\n};\n\n/* eslint-disable max-statements */\nexport default class Deck {\n  static defaultProps = defaultProps;\n  // This is used to defeat tree shaking of init.js\n  // https://github.com/visgl/deck.gl/issues/3213\n  static VERSION = deckGlobal.VERSION;\n\n  readonly props: Required<DeckProps>;\n  readonly width: number = 0;\n  readonly height: number = 0;\n  // Allows attaching arbitrary data to the instance\n  readonly userData: Record<string, any> = {};\n\n  protected canvas: HTMLCanvasElement | null = null;\n  protected viewManager: ViewManager | null = null;\n  protected layerManager: LayerManager | null = null;\n  protected effectManager: EffectManager | null = null;\n  protected deckRenderer: DeckRenderer | null = null;\n  protected deckPicker: DeckPicker | null = null;\n  protected eventManager: EventManager | null = null;\n  protected tooltip: Tooltip | null = null;\n  protected metrics: DeckMetrics;\n  protected animationLoop: AnimationLoop;\n  protected stats: Stats;\n\n  /** Internal view state if no callback is supplied */\n  protected viewState: any;\n  protected cursorState: CursorState;\n\n  private _needsRedraw: false | string;\n  private _pickRequest: {\n    mode: string;\n    event: MjolnirPointerEvent | null;\n    x: number;\n    y: number;\n    radius: number;\n  };\n  /**\n   * Pick and store the object under the pointer on `pointerdown`.\n   * This object is reused for subsequent `onClick` and `onDrag*` callbacks.\n   */\n  private _lastPointerDownInfo: PickingInfo | null = null;\n  private _metricsCounter: number;\n\n  constructor(props: DeckProps) {\n    this.props = {...defaultProps, ...props};\n    props = this.props;\n\n    this._needsRedraw = 'Initial render';\n    this._pickRequest = {\n      mode: 'hover',\n      x: -1,\n      y: -1,\n      radius: 0,\n      event: null\n    };\n\n    this.cursorState = {\n      isHovering: false,\n      isDragging: false\n    };\n\n    if (props.viewState && props.initialViewState) {\n      log.warn(\n        'View state tracking is disabled. Use either `initialViewState` for auto update or `viewState` for manual update.'\n      )();\n    }\n    if (getBrowser() === 'IE') {\n      log.warn('IE 11 is not supported')();\n    }\n    this.viewState = props.initialViewState;\n\n    if (!props.gl) {\n      // Note: LayerManager creation deferred until gl context available\n      if (typeof document !== 'undefined') {\n        this.canvas = this._createCanvas(props);\n      }\n    }\n    this.animationLoop = this._createAnimationLoop(props);\n\n    this.stats = new Stats({id: 'deck.gl'});\n    this.metrics = {\n      fps: 0,\n      setPropsTime: 0,\n      updateAttributesTime: 0,\n      framesRedrawn: 0,\n      pickTime: 0,\n      pickCount: 0,\n      gpuTime: 0,\n      gpuTimePerFrame: 0,\n      cpuTime: 0,\n      cpuTimePerFrame: 0,\n      bufferMemory: 0,\n      textureMemory: 0,\n      renderbufferMemory: 0,\n      gpuMemory: 0\n    };\n    this._metricsCounter = 0;\n\n    this.setProps(props);\n\n    // UNSAFE/experimental prop: only set at initialization to avoid performance hit\n    if (props._typedArrayManagerProps) {\n      typedArrayManager.setOptions(props._typedArrayManagerProps);\n    }\n\n    this.animationLoop.start();\n  }\n\n  /** Stop rendering and dispose all resources */\n  finalize() {\n    this.animationLoop.stop();\n    this.animationLoop = null;\n    this._lastPointerDownInfo = null;\n\n    this.layerManager?.finalize();\n    this.layerManager = null;\n\n    this.viewManager?.finalize();\n    this.viewManager = null;\n\n    this.effectManager?.finalize();\n    this.effectManager = null;\n\n    this.deckRenderer?.finalize();\n    this.deckRenderer = null;\n\n    this.deckPicker?.finalize();\n    this.deckPicker = null;\n\n    this.eventManager?.destroy();\n    this.eventManager = null;\n\n    this.tooltip?.remove();\n    this.tooltip = null;\n\n    if (!this.props.canvas && !this.props.gl && this.canvas) {\n      // remove internally created canvas\n      this.canvas.parentElement?.removeChild(this.canvas);\n      this.canvas = null;\n    }\n  }\n\n  /** Partially update props */\n  setProps(props: DeckProps): void {\n    this.stats.get('setProps Time').timeStart();\n\n    if ('onLayerHover' in props) {\n      log.removed('onLayerHover', 'onHover')();\n    }\n    if ('onLayerClick' in props) {\n      log.removed('onLayerClick', 'onClick')();\n    }\n    if (props.initialViewState && !deepEqual(this.props.initialViewState, props.initialViewState)) {\n      // Overwrite internal view state\n      this.viewState = props.initialViewState;\n    }\n\n    // Merge with existing props\n    Object.assign(this.props, props);\n\n    // Update CSS size of canvas\n    this._setCanvasSize(this.props);\n\n    // We need to overwrite CSS style width and height with actual, numeric values\n    const resolvedProps: Required<DeckProps> & {\n      width: number;\n      height: number;\n      views: View[];\n      viewState: Record<string, any>;\n    } = Object.create(this.props);\n    Object.assign(resolvedProps, {\n      views: this._getViews(),\n      width: this.width,\n      height: this.height,\n      viewState: this._getViewState()\n    });\n\n    // Update the animation loop\n    this.animationLoop.setProps(resolvedProps);\n\n    // If initialized, update sub manager props\n    if (this.layerManager) {\n      this.viewManager!.setProps(resolvedProps);\n      // Make sure that any new layer gets initialized with the current viewport\n      this.layerManager.activateViewport(this.getViewports()[0]);\n      this.layerManager.setProps(resolvedProps);\n      this.effectManager!.setProps(resolvedProps);\n      this.deckRenderer!.setProps(resolvedProps);\n      this.deckPicker!.setProps(resolvedProps);\n    }\n\n    this.stats.get('setProps Time').timeEnd();\n  }\n\n  // Public API\n\n  /**\n   * Check if a redraw is needed\n   * @returns `false` or a string summarizing the redraw reason\n   */\n  needsRedraw(\n    opts: {\n      /** Reset the redraw flag afterwards. Default `true` */\n      clearRedrawFlags: boolean;\n    } = {clearRedrawFlags: false}\n  ): false | string {\n    if (!this.layerManager) {\n      // Not initialized or already finalized\n      return false;\n    }\n    if (this.props._animate) {\n      return 'Deck._animate';\n    }\n\n    let redraw: false | string = this._needsRedraw;\n\n    if (opts.clearRedrawFlags) {\n      this._needsRedraw = false;\n    }\n\n    const viewManagerNeedsRedraw = this.viewManager!.needsRedraw(opts);\n    const layerManagerNeedsRedraw = this.layerManager.needsRedraw(opts);\n    const effectManagerNeedsRedraw = this.effectManager!.needsRedraw(opts);\n    const deckRendererNeedsRedraw = this.deckRenderer!.needsRedraw(opts);\n\n    redraw =\n      redraw ||\n      viewManagerNeedsRedraw ||\n      layerManagerNeedsRedraw ||\n      effectManagerNeedsRedraw ||\n      deckRendererNeedsRedraw;\n    return redraw;\n  }\n\n  /**\n   * Redraw the GL context\n   * @param reason If not provided, only redraw if deemed necessary. Otherwise redraw regardless of internal states.\n   * @returns\n   */\n  redraw(reason?: string): void {\n    if (!this.layerManager) {\n      // Not yet initialized\n      return;\n    }\n    // Check if we need to redraw\n    let redrawReason = this.needsRedraw({clearRedrawFlags: true});\n    // User-supplied should take precedent, however the redraw flags get cleared regardless\n    redrawReason = reason || redrawReason;\n\n    if (!redrawReason) {\n      return;\n    }\n\n    this.stats.get('Redraw Count').incrementCount();\n    if (this.props._customRender) {\n      this.props._customRender(redrawReason);\n    } else {\n      this._drawLayers(redrawReason);\n    }\n  }\n\n  /** Flag indicating that the Deck instance has initialized its resources and it's safe to call public methods. */\n  get isInitialized(): boolean {\n    return this.viewManager !== null;\n  }\n\n  /** Get a list of views that are currently rendered */\n  getViews(): View[] {\n    assert(this.viewManager);\n    return this.viewManager.views;\n  }\n\n  /** Get a list of viewports that are currently rendered.\n   * @param rect If provided, only returns viewports within the given bounding box.\n   */\n  getViewports(rect?: {x: number; y: number; width?: number; height?: number}): Viewport[] {\n    assert(this.viewManager);\n    return this.viewManager.getViewports(rect);\n  }\n\n  /** Query the object rendered on top at a given point */\n  pickObject(opts: {\n    /** x position in pixels */\n    x: number;\n    /** y position in pixels */\n    y: number;\n    /** Radius of tolerance in pixels. Default `0`. */\n    radius?: number;\n    /** A list of layer ids to query from. If not specified, then all pickable and visible layers are queried. */\n    layerIds?: string[];\n    /** If `true`, `info.coordinate` will be a 3D point by unprojecting the `x, y` screen coordinates onto the picked geometry. Default `false`. */\n    unproject3D?: boolean;\n  }): PickingInfo | null {\n    const infos = this._pick('pickObject', 'pickObject Time', opts).result;\n    return infos.length ? infos[0] : null;\n  }\n\n  /* Query all rendered objects at a given point */\n  pickMultipleObjects(opts: {\n    /** x position in pixels */\n    x: number;\n    /** y position in pixels */\n    y: number;\n    /** Radius of tolerance in pixels. Default `0`. */\n    radius?: number;\n    /** Specifies the max number of objects to return. Default `10`. */\n    depth?: number;\n    /** A list of layer ids to query from. If not specified, then all pickable and visible layers are queried. */\n    layerIds?: string[];\n    /** If `true`, `info.coordinate` will be a 3D point by unprojecting the `x, y` screen coordinates onto the picked geometry. Default `false`. */\n    unproject3D?: boolean;\n  }): PickingInfo[] {\n    opts.depth = opts.depth || 10;\n    return this._pick('pickObject', 'pickMultipleObjects Time', opts).result;\n  }\n\n  /* Query all objects rendered on top within a bounding box */\n  pickObjects(opts: {\n    /** Left of the bounding box in pixels */\n    x: number;\n    /** Top of the bounding box in pixels */\n    y: number;\n    /** Width of the bounding box in pixels. Default `1` */\n    width?: number;\n    /** Height of the bounding box in pixels. Default `1` */\n    height?: number;\n    /** A list of layer ids to query from. If not specified, then all pickable and visible layers are queried. */\n    layerIds?: string[];\n    /** If specified, limits the number of objects that can be returned. */\n    maxObjects?: number | null;\n  }): PickingInfo[] {\n    return this._pick('pickObjects', 'pickObjects Time', opts);\n  }\n\n  /** Experimental\n   * Add a global resource for sharing among layers\n   */\n  _addResources(\n    resources: {\n      [id: string]: any;\n    },\n    forceUpdate = false\n  ) {\n    for (const id in resources) {\n      this.layerManager!.resourceManager.add({resourceId: id, data: resources[id], forceUpdate});\n    }\n  }\n\n  /** Experimental\n   * Remove a global resource\n   */\n  _removeResources(resourceIds: string[]) {\n    for (const id of resourceIds) {\n      this.layerManager!.resourceManager.remove(id);\n    }\n  }\n\n  // Private Methods\n\n  private _pick(\n    method: 'pickObject',\n    statKey: string,\n    opts: PickByPointOptions & {layerIds?: string[]}\n  ): {\n    result: PickingInfo[];\n    emptyInfo: PickingInfo;\n  };\n  private _pick(\n    method: 'pickObjects',\n    statKey: string,\n    opts: PickByRectOptions & {layerIds?: string[]}\n  ): PickingInfo[];\n\n  private _pick(\n    method: 'pickObject' | 'pickObjects',\n    statKey: string,\n    opts: (PickByPointOptions | PickByRectOptions) & {layerIds?: string[]}\n  ) {\n    assert(this.deckPicker);\n\n    const {stats} = this;\n\n    stats.get('Pick Count').incrementCount();\n    stats.get(statKey).timeStart();\n\n    const infos = this.deckPicker[method]({\n      // layerManager, viewManager and effectManager are always defined if deckPicker is\n      layers: this.layerManager!.getLayers(opts),\n      views: this.viewManager!.getViews(),\n      viewports: this.getViewports(opts),\n      onViewportActive: this.layerManager!.activateViewport,\n      effects: this.effectManager!.getEffects(),\n      ...opts\n    });\n\n    stats.get(statKey).timeEnd();\n\n    return infos;\n  }\n\n  /** Resolve props.canvas to element */\n  private _createCanvas(props: DeckProps): HTMLCanvasElement {\n    let canvas = props.canvas;\n\n    // TODO EventManager should accept element id\n    if (typeof canvas === 'string') {\n      canvas = document.getElementById(canvas) as HTMLCanvasElement;\n      assert(canvas);\n    }\n\n    if (!canvas) {\n      canvas = document.createElement('canvas');\n      canvas.id = props.id || 'deckgl-overlay';\n      const parent = props.parent || document.body;\n      parent.appendChild(canvas);\n    }\n\n    Object.assign(canvas.style, props.style);\n\n    return canvas;\n  }\n\n  /** Updates canvas width and/or height, if provided as props */\n  private _setCanvasSize(props: Required<DeckProps>): void {\n    if (!this.canvas) {\n      return;\n    }\n\n    const {width, height} = props;\n    // Set size ONLY if props are being provided, otherwise let canvas be layouted freely\n    if (width || width === 0) {\n      const cssWidth = Number.isFinite(width) ? `${width}px` : (width as string);\n      this.canvas.style.width = cssWidth;\n    }\n    if (height || height === 0) {\n      const cssHeight = Number.isFinite(height) ? `${height}px` : (height as string);\n      // Note: position==='absolute' required for height 100% to work\n      this.canvas.style.position = props.style?.position || 'absolute';\n      this.canvas.style.height = cssHeight;\n    }\n  }\n\n  /** If canvas size has changed, reads out the new size and update */\n  private _updateCanvasSize(): void {\n    const {canvas} = this;\n    if (!canvas) {\n      return;\n    }\n    // Fallback to width/height when clientWidth/clientHeight are 0 or undefined.\n    const newWidth = canvas.clientWidth || canvas.width;\n    const newHeight = canvas.clientHeight || canvas.height;\n    if (newWidth !== this.width || newHeight !== this.height) {\n      // @ts-expect-error private assign to read-only property\n      this.width = newWidth;\n      // @ts-expect-error private assign to read-only property\n      this.height = newHeight;\n      this.viewManager?.setProps({width: newWidth, height: newHeight});\n      this.props.onResize({width: newWidth, height: newHeight});\n    }\n  }\n\n  private _createAnimationLoop(props: DeckProps): AnimationLoop {\n    const {\n      width,\n      height,\n      gl,\n      glOptions,\n      debug,\n      onError,\n      onBeforeRender,\n      onAfterRender,\n      useDevicePixels\n    } = props;\n\n    return new AnimationLoop({\n      width,\n      height,\n      useDevicePixels,\n      autoResizeViewport: false,\n      gl,\n      onCreateContext: opts =>\n        createGLContext({\n          ...glOptions,\n          ...opts,\n          canvas: this.canvas,\n          debug,\n          onContextLost: () => this._onContextLost()\n        }),\n      onInitialize: context => this._setGLContext(context.gl),\n      onRender: this._onRenderFrame.bind(this),\n      onBeforeRender,\n      onAfterRender,\n      onError\n    });\n  }\n\n  // Get the most relevant view state: props.viewState, if supplied, shadows internal viewState\n  // TODO: For backwards compatibility ensure numeric width and height is added to the viewState\n  private _getViewState(): Record<string, any> {\n    return this.props.viewState || this.viewState;\n  }\n\n  // Get the view descriptor list\n  private _getViews(): View[] {\n    // Default to a full screen map view port\n    let views = this.props.views || [new MapView({id: 'default-view'})];\n    views = Array.isArray(views) ? views : [views];\n    if (views.length && this.props.controller) {\n      // Backward compatibility: support controller prop\n      views[0].props.controller = this.props.controller;\n    }\n    return views;\n  }\n\n  private _onContextLost() {\n    const {onError} = this.props;\n    if (this.animationLoop && onError) {\n      onError(new Error('WebGL context is lost'));\n    }\n  }\n\n  // The `pointermove` event may fire multiple times in between two animation frames,\n  // it's a waste of time to run picking without rerender. Instead we save the last pick\n  // request and only do it once on the next animation frame.\n  /** Internal use only: event handler for pointerdown */\n  _onPointerMove = (event: MjolnirPointerEvent) => {\n    const {_pickRequest} = this;\n    if (event.type === 'pointerleave') {\n      _pickRequest.x = -1;\n      _pickRequest.y = -1;\n      _pickRequest.radius = 0;\n    } else if (event.leftButton || event.rightButton) {\n      // Do not trigger onHover callbacks if mouse button is down.\n      return;\n    } else {\n      const pos = event.offsetCenter;\n      // Do not trigger callbacks when click/hover position is invalid. Doing so will cause a\n      // assertion error when attempting to unproject the position.\n      if (!pos) {\n        return;\n      }\n      _pickRequest.x = pos.x;\n      _pickRequest.y = pos.y;\n      _pickRequest.radius = this.props.pickingRadius;\n    }\n\n    if (this.layerManager) {\n      this.layerManager.context.mousePosition = {x: _pickRequest.x, y: _pickRequest.y};\n    }\n\n    _pickRequest.event = event;\n  };\n\n  /** Actually run picking */\n  private _pickAndCallback() {\n    const {_pickRequest} = this;\n\n    if (_pickRequest.event) {\n      // Perform picking\n      const {result, emptyInfo} = this._pick('pickObject', 'pickObject Time', _pickRequest);\n      this.cursorState.isHovering = result.length > 0;\n\n      // There are 4 possible scenarios:\n      // result is [outInfo, pickedInfo] (moved from one pickable layer to another)\n      // result is [outInfo] (moved outside of a pickable layer)\n      // result is [pickedInfo] (moved into or over a pickable layer)\n      // result is [] (nothing is or was picked)\n      //\n      // `layer.props.onHover` should be called on all affected layers (out/over)\n      // `deck.props.onHover` should be called with the picked info if any, or empty info otherwise\n      // `deck.props.getTooltip` should be called with the picked info if any, or empty info otherwise\n\n      // Execute callbacks\n      let pickedInfo = emptyInfo;\n      let handled = false;\n      for (const info of result) {\n        pickedInfo = info;\n        handled = info.layer?.onHover(info, _pickRequest.event) || handled;\n      }\n      if (!handled && this.props.onHover) {\n        this.props.onHover(pickedInfo, _pickRequest.event);\n      }\n\n      // Update tooltip\n      if (this.props.getTooltip && this.tooltip) {\n        const displayInfo = this.props.getTooltip(pickedInfo);\n        this.tooltip.setTooltip(displayInfo, pickedInfo.x, pickedInfo.y);\n      }\n\n      // Clear pending pickRequest\n      _pickRequest.event = null;\n    }\n  }\n\n  private _updateCursor(): void {\n    const container = this.props.parent || this.canvas;\n    if (container) {\n      container.style.cursor = this.props.getCursor(this.cursorState);\n    }\n  }\n\n  private _setGLContext(gl: WebGLRenderingContext) {\n    if (this.layerManager) {\n      return;\n    }\n\n    // if external context...\n    if (!this.canvas) {\n      this.canvas = gl.canvas;\n      instrumentGLContext(gl, {enable: true, copyState: true});\n    }\n\n    this.tooltip = new Tooltip(this.canvas);\n\n    setParameters(gl, {\n      blend: true,\n      blendFunc: [GL.SRC_ALPHA, GL.ONE_MINUS_SRC_ALPHA, GL.ONE, GL.ONE_MINUS_SRC_ALPHA],\n      polygonOffsetFill: true,\n      depthTest: true,\n      depthFunc: GL.LEQUAL\n    });\n\n    this.props.onWebGLInitialized(gl);\n\n    // timeline for transitions\n    const timeline = new Timeline();\n    timeline.play();\n    this.animationLoop.attachTimeline(timeline);\n\n    this.eventManager = new EventManager(this.props.parent || gl.canvas, {\n      touchAction: this.props.touchAction,\n      recognizerOptions: this.props.eventRecognizerOptions,\n      events: {\n        pointerdown: this._onPointerDown,\n        pointermove: this._onPointerMove,\n        pointerleave: this._onPointerMove\n      }\n    });\n    for (const eventType in EVENTS) {\n      this.eventManager.on(eventType as keyof typeof EVENTS, this._onEvent);\n    }\n\n    this.viewManager = new ViewManager({\n      timeline,\n      eventManager: this.eventManager,\n      onViewStateChange: this._onViewStateChange.bind(this),\n      onInteractionStateChange: this._onInteractionStateChange.bind(this),\n      views: this._getViews(),\n      viewState: this._getViewState(),\n      width: this.width,\n      height: this.height\n    });\n\n    // viewManager must be initialized before layerManager\n    // layerManager depends on viewport created by viewManager.\n    const viewport = this.viewManager.getViewports()[0];\n\n    // Note: avoid React setState due GL animation loop / setState timing issue\n    this.layerManager = new LayerManager(gl, {\n      deck: this,\n      stats: this.stats,\n      viewport,\n      timeline\n    });\n\n    this.effectManager = new EffectManager();\n\n    this.deckRenderer = new DeckRenderer(gl);\n\n    this.deckPicker = new DeckPicker(gl);\n\n    this.setProps(this.props);\n\n    this._updateCanvasSize();\n    this.props.onLoad();\n  }\n\n  /** Internal only: default render function (redraw all layers and views) */\n  _drawLayers(\n    redrawReason: string,\n    renderOptions?: {\n      target?: Framebuffer;\n      layerFilter?: (context: FilterContext) => boolean;\n      layers?: Layer[];\n      viewports?: Viewport[];\n      views?: {[viewId: string]: View};\n      pass?: string;\n      effects?: Effect[];\n      clearStack?: boolean;\n      clearCanvas?: boolean;\n    }\n  ) {\n    const {gl} = this.layerManager!.context;\n\n    setParameters(gl, this.props.parameters);\n\n    this.props.onBeforeRender({gl});\n\n    this.deckRenderer!.renderLayers({\n      target: this.props._framebuffer,\n      layers: this.layerManager!.getLayers(),\n      viewports: this.viewManager!.getViewports(),\n      onViewportActive: this.layerManager!.activateViewport,\n      views: this.viewManager!.getViews(),\n      pass: 'screen',\n      redrawReason,\n      effects: this.effectManager!.getEffects(),\n      ...renderOptions\n    });\n\n    this.props.onAfterRender({gl});\n  }\n\n  // Callbacks\n\n  private _onRenderFrame(animationProps: any) {\n    this._getFrameStats();\n\n    // Log perf stats every second\n    if (this._metricsCounter++ % 60 === 0) {\n      this._getMetrics();\n      this.stats.reset();\n      log.table(4, this.metrics)();\n\n      // Experimental: report metrics\n      if (this.props._onMetrics) {\n        this.props._onMetrics(this.metrics);\n      }\n    }\n\n    this._updateCanvasSize();\n\n    this._updateCursor();\n\n    // If view state has changed, clear tooltip\n    if (this.tooltip!.isVisible && this.viewManager!.needsRedraw()) {\n      this.tooltip!.setTooltip(null);\n    }\n\n    // Update layers if needed (e.g. some async prop has loaded)\n    // Note: This can trigger a redraw\n    this.layerManager!.updateLayers();\n\n    // Perform picking request if any\n    this._pickAndCallback();\n\n    // Redraw if necessary\n    this.redraw();\n\n    // Update viewport transition if needed\n    // Note: this can trigger `onViewStateChange`, and affect layers\n    // We want to defer these changes to the next frame\n    if (this.viewManager) {\n      this.viewManager.updateViewStates();\n    }\n  }\n\n  // Callbacks\n\n  private _onViewStateChange(params: ViewStateChangeParameters & {viewId: string}) {\n    // Let app know that view state is changing, and give it a chance to change it\n    const viewState = this.props.onViewStateChange(params) || params.viewState;\n\n    // If initialViewState was set on creation, auto track position\n    if (this.viewState) {\n      this.viewState = {...this.viewState, [params.viewId]: viewState};\n      if (!this.props.viewState) {\n        // Apply internal view state\n        if (this.viewManager) {\n          this.viewManager.setProps({viewState: this.viewState});\n        }\n      }\n    }\n  }\n\n  private _onInteractionStateChange(interactionState: InteractionState) {\n    this.cursorState.isDragging = interactionState.isDragging || false;\n    this.props.onInteractionStateChange(interactionState);\n  }\n\n  /** Internal use only: event handler for click & drag */\n  _onEvent = (event: MjolnirGestureEvent) => {\n    const eventOptions = EVENTS[event.type];\n    const pos = event.offsetCenter;\n\n    if (!eventOptions || !pos || !this.layerManager) {\n      return;\n    }\n\n    // Reuse last picked object\n    const layers = this.layerManager.getLayers();\n    const info = this.deckPicker!.getLastPickedObject(\n      {\n        x: pos.x,\n        y: pos.y,\n        layers,\n        viewports: this.getViewports(pos)\n      },\n      this._lastPointerDownInfo\n    );\n\n    const {layer} = info;\n    const layerHandler =\n      layer && (layer[eventOptions.handler] || layer.props[eventOptions.handler]);\n    const rootHandler = this.props[eventOptions.handler];\n    let handled = false;\n\n    if (layerHandler) {\n      handled = layerHandler.call(layer, info, event);\n    }\n    if (!handled && rootHandler) {\n      rootHandler(info, event);\n    }\n  };\n\n  /** Internal use only: evnet handler for pointerdown */\n  _onPointerDown = (event: MjolnirPointerEvent) => {\n    const pos = event.offsetCenter;\n    const pickedInfo = this._pick('pickObject', 'pickObject Time', {\n      x: pos.x,\n      y: pos.y,\n      radius: this.props.pickingRadius\n    });\n    this._lastPointerDownInfo = pickedInfo.result[0] || pickedInfo.emptyInfo;\n  };\n\n  private _getFrameStats(): void {\n    const {stats} = this;\n    stats.get('frameRate').timeEnd();\n    stats.get('frameRate').timeStart();\n\n    // Get individual stats from luma.gl so reset works\n    const animationLoopStats = this.animationLoop.stats;\n    stats.get('GPU Time').addTime(animationLoopStats.get('GPU Time').lastTiming);\n    stats.get('CPU Time').addTime(animationLoopStats.get('CPU Time').lastTiming);\n  }\n\n  private _getMetrics(): void {\n    const {metrics, stats} = this;\n    metrics.fps = stats.get('frameRate').getHz();\n    metrics.setPropsTime = stats.get('setProps Time').time;\n    metrics.updateAttributesTime = stats.get('Update Attributes').time;\n    metrics.framesRedrawn = stats.get('Redraw Count').count;\n    metrics.pickTime =\n      stats.get('pickObject Time').time +\n      stats.get('pickMultipleObjects Time').time +\n      stats.get('pickObjects Time').time;\n    metrics.pickCount = stats.get('Pick Count').count;\n\n    // Luma stats\n    metrics.gpuTime = stats.get('GPU Time').time;\n    metrics.cpuTime = stats.get('CPU Time').time;\n    metrics.gpuTimePerFrame = stats.get('GPU Time').getAverageTime();\n    metrics.cpuTimePerFrame = stats.get('CPU Time').getAverageTime();\n\n    const memoryStats = lumaStats.get('Memory Usage');\n    metrics.bufferMemory = memoryStats.get('Buffer Memory').count;\n    metrics.textureMemory = memoryStats.get('Texture Memory').count;\n    metrics.renderbufferMemory = memoryStats.get('Renderbuffer Memory').count;\n    metrics.gpuMemory = memoryStats.get('GPU Memory').count;\n  }\n}\n"],"file":"deck.js"}