{"version":3,"sources":["../../../../src/effects/mask/mask-effect.ts"],"names":["Texture2D","equals","MaskPass","OPERATION","getMaskBounds","getMaskViewport","log","MaskEffect","preRender","gl","layers","layerFilter","viewports","onViewportActive","views","dummyMaskMap","width","height","maskLayers","filter","l","props","visible","operation","MASK","length","masks","channels","maskPass","id","maskMap","channelMap","_sortMaskChannels","viewport","viewportChanged","lastViewport","maskId","_renderChannel","channelInfo","oldChannelInfo","index","maskChanged","layerBounds","some","b","i","bounds","maskBounds","maskViewport","getBounds","render","pass","channel","moduleParameters","devicePixelRatio","coordinateOrigin","coordinateSystem","channelCount","layer","root","warn","findIndex","c","push","getModuleParameters","maskChannels","cleanup","delete","undefined"],"mappings":"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","sourcesContent":["import {Texture2D} from '@luma.gl/core';\n// import {readPixelsToArray} from '@luma.gl/core';\nimport {equals} from '@math.gl/core';\nimport MaskPass from '../../passes/mask-pass';\nimport {OPERATION} from '../../lib/constants';\nimport {getMaskBounds, getMaskViewport} from './utils';\nimport log from '../../utils/log';\n\nimport type {Effect, PreRenderOptions} from '../../lib/effect';\nimport type Layer from '../../lib/layer';\nimport type Viewport from '../../viewports/viewport';\nimport type {MaskBounds} from './utils';\nimport type {CoordinateSystem} from '../../lib/constants';\n\ntype Mask = {\n  /** The channel index */\n  index: number;\n  bounds: MaskBounds;\n  coordinateOrigin: [number, number, number];\n  coordinateSystem: CoordinateSystem;\n};\n\ntype Channel = {\n  id: string;\n  index: number;\n  layers: Layer[];\n  bounds: MaskBounds;\n  maskBounds: MaskBounds;\n  layerBounds: MaskBounds[];\n  coordinateOrigin: [number, number, number];\n  coordinateSystem: CoordinateSystem;\n};\n\n// Class to manage mask effect\nexport default class MaskEffect implements Effect {\n  id = 'mask-effect';\n  props = null;\n  useInPicking = true;\n\n  private dummyMaskMap?: Texture2D;\n  private channels: (Channel | null)[] = [];\n  private masks: Record<string, Mask> | null = null;\n  private maskPass?: MaskPass;\n  private maskMap?: Texture2D;\n  private lastViewport?: Viewport;\n\n  preRender(\n    gl: WebGLRenderingContext,\n    {layers, layerFilter, viewports, onViewportActive, views}: PreRenderOptions\n  ): void {\n    if (!this.dummyMaskMap) {\n      this.dummyMaskMap = new Texture2D(gl, {\n        width: 1,\n        height: 1\n      });\n    }\n\n    const maskLayers = layers.filter(l => l.props.visible && l.props.operation === OPERATION.MASK);\n    if (maskLayers.length === 0) {\n      this.masks = null;\n      this.channels.length = 0;\n      return;\n    }\n    this.masks = {};\n\n    if (!this.maskPass) {\n      this.maskPass = new MaskPass(gl, {id: 'default-mask'});\n      this.maskMap = this.maskPass.maskMap;\n    }\n\n    // Map layers to channels\n    const channelMap = this._sortMaskChannels(maskLayers);\n    // TODO - support multiple views\n    const viewport = viewports[0];\n    const viewportChanged = !this.lastViewport || !this.lastViewport.equals(viewport);\n\n    for (const maskId in channelMap) {\n      this._renderChannel(channelMap[maskId], {\n        layerFilter,\n        onViewportActive,\n        views,\n        viewport,\n        viewportChanged\n      });\n    }\n\n    // // Debug show FBO contents on screen\n    // const color = readPixelsToArray(this.maskMap);\n    // let canvas = document.getElementById('fbo-canvas');\n    // if (!canvas) {\n    //   canvas = document.createElement('canvas');\n    //   canvas.id = 'fbo-canvas';\n    //   canvas.width = this.maskMap.width;\n    //   canvas.height = this.maskMap.height;\n    //   canvas.style.zIndex = 100;\n    //   canvas.style.position = 'absolute';\n    //   canvas.style.right = 0;\n    //   canvas.style.border = 'blue 1px solid';\n    //   canvas.style.width = '256px';\n    //   canvas.style.transform = 'scaleY(-1)';\n    //   document.body.appendChild(canvas);\n    // }\n    // const ctx = canvas.getContext('2d');\n    // const imageData = ctx.createImageData(this.maskMap.width, this.maskMap.height);\n    // for (let i = 0; i < color.length; i += 4) {\n    //   imageData.data[i + 0] = color[i + 0];\n    //   imageData.data[i + 1] = color[i + 1];\n    //   imageData.data[i + 2] = color[i + 2];\n    //   imageData.data[i + 3] = color[i + 3] + 128;\n    // }\n    // ctx.putImageData(imageData, 0, 0);\n  }\n\n  private _renderChannel(\n    channelInfo: Channel,\n    {\n      layerFilter,\n      onViewportActive,\n      views,\n      viewport,\n      viewportChanged\n    }: {\n      layerFilter: PreRenderOptions['layerFilter'];\n      onViewportActive: PreRenderOptions['onViewportActive'];\n      views: PreRenderOptions['views'];\n      viewport: Viewport;\n      viewportChanged: boolean;\n    }\n  ) {\n    const oldChannelInfo = this.channels[channelInfo.index];\n    if (!oldChannelInfo) {\n      return;\n    }\n\n    const maskChanged =\n      // If a channel is new\n      channelInfo === oldChannelInfo ||\n      // If sublayers have changed\n      oldChannelInfo.layers.length !== channelInfo.layers.length ||\n      // If a sublayer's positions have been updated, the cached bounds will change shallowly\n      channelInfo.layerBounds.some((b, i) => b !== oldChannelInfo.layerBounds[i]);\n\n    channelInfo.bounds = oldChannelInfo.bounds;\n    channelInfo.maskBounds = oldChannelInfo.maskBounds;\n    this.channels[channelInfo.index] = channelInfo;\n\n    if (maskChanged || viewportChanged) {\n      // Recalculate mask bounds\n      this.lastViewport = viewport;\n\n      channelInfo.bounds = getMaskBounds({layers: channelInfo.layers, viewport});\n\n      if (maskChanged || !equals(channelInfo.bounds, oldChannelInfo.bounds)) {\n        // Rerender mask FBO\n        const {maskPass, maskMap} = this;\n\n        const maskViewport = getMaskViewport({\n          bounds: channelInfo.bounds,\n          viewport,\n          width: maskMap.width,\n          height: maskMap.height\n        });\n\n        channelInfo.maskBounds = maskViewport ? maskViewport.getBounds() : [0, 0, 1, 1];\n\n        // @ts-ignore (2532) This method is only called from preRender where maskPass is defined\n        maskPass.render({\n          pass: 'mask',\n          channel: channelInfo.index,\n          layers: channelInfo.layers,\n          layerFilter,\n          viewports: maskViewport ? [maskViewport] : [],\n          onViewportActive,\n          views,\n          moduleParameters: {\n            devicePixelRatio: 1\n          }\n        });\n      }\n    }\n\n    // @ts-ignore (2532) This method is only called from preRender where masks is defined\n    this.masks[channelInfo.id] = {\n      index: channelInfo.index,\n      bounds: channelInfo.maskBounds,\n      coordinateOrigin: channelInfo.coordinateOrigin,\n      coordinateSystem: channelInfo.coordinateSystem\n    };\n  }\n\n  /**\n   * Find a channel to render each mask into\n   * If a maskId already exists, diff and update the existing channel\n   * Otherwise replace a removed mask\n   * Otherwise create a new channel\n   * Returns a map from mask layer id to channel info\n   */\n  private _sortMaskChannels(maskLayers: Layer[]): Record<string, Channel> {\n    const channelMap = {};\n    let channelCount = 0;\n    for (const layer of maskLayers) {\n      const {id} = layer.root;\n      let channelInfo = channelMap[id];\n      if (!channelInfo) {\n        if (++channelCount > 4) {\n          log.warn('Too many mask layers. The max supported is 4')();\n          continue; // eslint-disable-line no-continue\n        }\n        channelInfo = {\n          id,\n          index: this.channels.findIndex(c => c?.id === id),\n          layers: [],\n          layerBounds: [],\n          coordinateOrigin: layer.root.props.coordinateOrigin,\n          coordinateSystem: layer.root.props.coordinateSystem\n        };\n        channelMap[id] = channelInfo;\n      }\n      channelInfo.layers.push(layer);\n      channelInfo.layerBounds.push(layer.getBounds());\n    }\n\n    for (let i = 0; i < 4; i++) {\n      const channelInfo = this.channels[i];\n      if (!channelInfo || !(channelInfo.id in channelMap)) {\n        // The mask id at this channel no longer exists\n        this.channels[i] = null;\n      }\n    }\n\n    for (const maskId in channelMap) {\n      const channelInfo = channelMap[maskId];\n\n      if (channelInfo.index < 0) {\n        channelInfo.index = this.channels.findIndex(c => !c);\n        this.channels[channelInfo.index] = channelInfo;\n      }\n    }\n    return channelMap;\n  }\n\n  getModuleParameters(): {\n    maskMap: Texture2D;\n    maskChannels: Record<string, Mask> | null;\n  } {\n    return {\n      maskMap: this.masks ? this.maskMap : this.dummyMaskMap,\n      maskChannels: this.masks\n    };\n  }\n\n  cleanup(): void {\n    if (this.dummyMaskMap) {\n      this.dummyMaskMap.delete();\n      this.dummyMaskMap = undefined;\n    }\n\n    if (this.maskPass) {\n      this.maskPass.delete();\n      this.maskPass = undefined;\n      this.maskMap = undefined;\n    }\n\n    this.lastViewport = undefined;\n    this.masks = null;\n    this.channels.length = 0;\n  }\n}\n"],"file":"mask-effect.js"}