{"version":3,"sources":["../../../src/views/view.ts"],"names":["Viewport","parsePosition","getPosition","deepEqual","assert","View","constructor","props","id","x","y","width","height","padding","viewportInstance","displayName","_x","_y","_width","_height","_padding","left","right","top","bottom","equals","bind","Object","seal","view","ViewportType","makeViewport","viewState","filterViewState","viewportDimensions","getDimensions","getViewStateId","newViewState","key","dimensions","controller","opts","type","ControllerType"],"mappings":"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","sourcesContent":["import Viewport from '../viewports/viewport';\nimport {parsePosition, getPosition, Position} from '../utils/positions';\nimport {deepEqual} from '../utils/deep-equal';\nimport assert from '../utils/assert';\nimport type Controller from '../controllers/controller';\nimport type {ControllerOptions} from '../controllers/controller';\nimport type {TransitionProps} from '../controllers/transition-manager';\nimport type {Padding} from '../viewports/viewport';\nimport type {ConstructorOf} from '../types/types';\n\nexport type CommonViewState = TransitionProps;\n\ntype CommonViewProps<ViewState> = {\n  /** A unique id of the view. In a multi-view use case, this is important for matching view states and place contents into this view. */\n  id?: string;\n  /** A relative (e.g. `'50%'`) or absolute position. Default `0`. */\n  x?: number | string;\n  /** A relative (e.g. `'50%'`) or absolute position. Default `0`. */\n  y?: number | string;\n  /** A relative (e.g. `'50%'`) or absolute extent. Default `'100%'`. */\n  width?: number | string;\n  /** A relative (e.g. `'50%'`) or absolute extent. Default `'100%'`. */\n  height?: number | string;\n  /** Padding around the view, expressed in either relative (e.g. `'50%'`) or absolute pixels. Default `null`. */\n  padding?: {\n    left?: number | string;\n    right?: number | string;\n    top?: number | string;\n    bottom?: number | string;\n  } | null;\n  /** State of the view */\n  viewState?:\n    | string\n    | ({\n        id?: string;\n      } & Partial<ViewState>);\n  /** Options for viewport interactivity. */\n  controller?:\n    | null\n    | boolean\n    | ConstructorOf<Controller<any>>\n    | (ControllerOptions & {\n        type?: ConstructorOf<Controller<any>>;\n      });\n\n  /** @deprecated Directly wrap a viewport instance */\n  viewportInstance?: Viewport;\n};\n\nexport default abstract class View<\n  ViewState extends CommonViewState = CommonViewState,\n  ViewProps = {}\n> {\n  id: string;\n  abstract get ViewportType(): ConstructorOf<Viewport>;\n  abstract get ControllerType(): ConstructorOf<Controller<any>>;\n\n  private viewportInstance?: Viewport;\n  private _x: Position;\n  private _y: Position;\n  private _width: Position;\n  private _height: Position;\n  private _padding: {\n    left: Position;\n    right: Position;\n    top: Position;\n    bottom: Position;\n  } | null;\n\n  readonly props: ViewProps & CommonViewProps<ViewState>;\n\n  constructor(props: ViewProps & CommonViewProps<ViewState>) {\n    const {\n      id,\n      x = 0,\n      y = 0,\n      width = '100%',\n      height = '100%',\n      padding = null,\n      viewportInstance\n    } = props || {};\n\n    assert(!viewportInstance || viewportInstance instanceof Viewport);\n    this.viewportInstance = viewportInstance;\n\n    // @ts-ignore\n    this.id = id || this.constructor.displayName || 'view';\n\n    this.props = {...props, id: this.id};\n\n    // Extents\n    this._x = parsePosition(x);\n    this._y = parsePosition(y);\n    this._width = parsePosition(width);\n    this._height = parsePosition(height);\n    this._padding = padding && {\n      left: parsePosition(padding.left || 0),\n      right: parsePosition(padding.right || 0),\n      top: parsePosition(padding.top || 0),\n      bottom: parsePosition(padding.bottom || 0)\n    };\n\n    // Bind methods for easy access\n    this.equals = this.equals.bind(this);\n\n    Object.seal(this);\n  }\n\n  equals(view: View<ViewState, ViewProps>): boolean {\n    if (this === view) {\n      return true;\n    }\n\n    // if `viewportInstance` is set, it is the only prop that is used\n    // Delegate to `Viewport.equals`\n    if (this.viewportInstance) {\n      return view.viewportInstance ? this.viewportInstance.equals(view.viewportInstance) : false;\n    }\n\n    return this.ViewportType === view.ViewportType && deepEqual(this.props, view.props);\n  }\n\n  /** Make viewport from canvas dimensions and view state */\n  makeViewport({width, height, viewState}: {width: number; height: number; viewState: any}) {\n    if (this.viewportInstance) {\n      return this.viewportInstance;\n    }\n\n    viewState = this.filterViewState(viewState);\n\n    // Resolve relative viewport dimensions\n    const viewportDimensions = this.getDimensions({width, height});\n    return new this.ViewportType({...viewState, ...this.props, ...viewportDimensions});\n  }\n\n  getViewStateId(): string {\n    const {viewState} = this.props;\n    if (typeof viewState === 'string') {\n      // if View.viewState is a string, return it\n      return viewState;\n    }\n    return viewState?.id || this.id;\n  }\n\n  // Allows view to override (or completely define) viewState\n  filterViewState(viewState: ViewState): ViewState {\n    if (this.props.viewState && typeof this.props.viewState === 'object') {\n      // If we have specified an id, then intent is to override,\n      // If not, completely specify the view state\n      if (!this.props.viewState.id) {\n        return this.props.viewState as ViewState;\n      }\n\n      // Merge in all props from View's viewState, except id\n      const newViewState = {...viewState};\n      for (const key in this.props.viewState) {\n        if (key !== 'id') {\n          newViewState[key] = this.props.viewState[key];\n        }\n      }\n      return newViewState;\n    }\n\n    return viewState;\n  }\n\n  /** Resolve the dimensions of the view from overall canvas dimensions */\n  getDimensions({width, height}: {width: number; height: number}): {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n    padding?: Padding;\n  } {\n    const dimensions: {\n      x: number;\n      y: number;\n      width: number;\n      height: number;\n      padding?: Padding;\n    } = {\n      x: getPosition(this._x, width),\n      y: getPosition(this._y, height),\n      width: getPosition(this._width, width),\n      height: getPosition(this._height, height)\n    };\n\n    if (this._padding) {\n      dimensions.padding = {\n        left: getPosition(this._padding.left, width),\n        top: getPosition(this._padding.top, height),\n        right: getPosition(this._padding.right, width),\n        bottom: getPosition(this._padding.bottom, height)\n      };\n    }\n    return dimensions;\n  }\n\n  // Used by sub classes to resolve controller props\n  get controller(): (ControllerOptions & {type: ConstructorOf<Controller<any>>}) | null {\n    const opts = this.props.controller;\n\n    if (!opts) {\n      return null;\n    }\n    if (opts === true) {\n      return {type: this.ControllerType};\n    }\n    if (typeof opts === 'function') {\n      return {type: opts};\n    }\n    return {type: this.ControllerType, ...opts};\n  }\n}\n"],"file":"view.js"}