{"version":3,"sources":["../../../src/controllers/controller.ts"],"names":["TransitionManager","LinearInterpolator","NO_TRANSITION_PROPS","transitionDuration","DEFAULT_INERTIA","INERTIA_EASING","t","EVENT_TYPES","WHEEL","PAN","PINCH","TRIPLE_PAN","DOUBLE_TAP","KEYBOARD","pinchEventWorkaround","Controller","constructor","opts","isDragging","transitionManager","getControllerState","props","ControllerState","onViewStateChange","_onTransition","bind","onStateChange","_setInteractionState","handleEvent","eventManager","makeViewport","events","customEvents","toggleEvents","_customEvents","setProps","finalize","eventName","_events","off","event","_controllerState","undefined","eventStartBlocked","_eventStartBlocked","type","_onPanStart","_onPan","_onPanEnd","_onPinchStart","_onPinch","_onPinchEnd","_onTriplePanStart","_onTriplePan","_onTriplePanEnd","_onDoubleTap","_onWheel","_onKeyDown","controllerState","state","getCenter","x","y","offsetCenter","isPointInBounds","pos","width","height","handled","inside","stopPropagation","isFunctionKeyPressed","srcEvent","Boolean","metaKey","altKey","ctrlKey","shiftKey","_interactionState","blockEvents","timeout","timer","setTimeout","dragMode","transitionInterpolator","_getTransitionProps","processViewStateChange","inertia","Number","isFinite","scrollZoom","dragPan","dragRotate","doubleClickZoom","touchZoom","touchRotate","keyboard","isInteractive","updateTransition","eventNames","enabled","forEach","on","updateViewport","newControllerState","extraProps","interactionState","viewState","getViewportProps","changed","getState","oldViewState","params","newStates","Object","assign","alternateMode","rightButton","invertPan","_panMove","_onPanMove","_onPanRotate","_onPanMoveEnd","_onPanRotateEnd","pan","isPanning","velocity","endPos","velocityX","velocityY","panEnd","transitionEasing","rotate","isRotating","rotateEnd","preventDefault","speed","smooth","delta","scale","Math","exp","abs","zoom","around","isZooming","rotateStart","deltaX","zoomStart","_startPinchRotation","rotation","_lastPinchEvent","deltaAngleX","z","log2","velocityZ","deltaTime","endScale","pow","zoomEnd","isZoomOut","funcKey","zoomSpeed","moveSpeed","rotateSpeedX","rotateSpeedY","code","zoomOut","zoomIn","rotateLeft","moveLeft","rotateRight","moveRight","rotateUp","moveUp","rotateDown","moveDown","transition"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 Uber Technologies, Inc.\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* eslint-disable max-statements, complexity */\nimport TransitionManager, {TransitionProps} from './transition-manager';\nimport LinearInterpolator from '../transitions/linear-interpolator';\nimport {IViewState} from './view-state';\nimport {ConstructorOf} from '../types/types';\n\nimport type Viewport from '../viewports/viewport';\n\nimport type {EventManager, MjolnirEvent, MjolnirGestureEvent, MjolnirWheelEvent, MjolnirKeyEvent} from 'mjolnir.js';\nimport type {Timeline} from '@luma.gl/core';\n\nconst NO_TRANSITION_PROPS = {\n  transitionDuration: 0\n} as const;\n\nconst DEFAULT_INERTIA = 300;\nconst INERTIA_EASING = t => 1 - (1 - t) * (1 - t);\n\nconst EVENT_TYPES = {\n  WHEEL: ['wheel'],\n  PAN: ['panstart', 'panmove', 'panend'],\n  PINCH: ['pinchstart', 'pinchmove', 'pinchend'],\n  TRIPLE_PAN: ['tripanstart', 'tripanmove', 'tripanend'],\n  DOUBLE_TAP: ['doubletap'],\n  KEYBOARD: ['keydown']\n} as const;\n\n/** Configuration of how user input is handled */\nexport type ControllerOptions = {\n  /** Enable zooming with mouse wheel. Default `true`. */\n  scrollZoom?: boolean | {\n    /** Scaler that translates wheel delta to the change of viewport scale. Default `0.01`. */\n    speed?: number;\n    /** Smoothly transition to the new zoom. If enabled, will provide a slightly lagged but smoother experience. Default `false`. */\n    smooth?: boolean\n  };\n  /** Enable panning with pointer drag. Default `true` */\n  dragPan?: boolean;\n  /** Enable rotating with pointer drag. Default `true` */\n  dragRotate?: boolean;\n  /** Enable zooming with double click. Default `true` */\n  doubleClickZoom?: boolean;\n  /** Enable zooming with multi-touch. Default `true` */\n  touchZoom?: boolean;\n  /** Enable rotating with multi-touch. Use two-finger rotating gesture for horizontal and three-finger swiping gesture for vertical rotation. Default `false` */\n  touchRotate?: boolean;\n  /** Enable interaction with keyboard. Default `true`. */\n  keyboard?:\n    | boolean\n    | {\n        /** Speed of zoom using +/- keys. Default `2` */\n        zoomSpeed?: number;\n        /** Speed of movement using arrow keys, in pixels. */\n        moveSpeed?: number;\n        /** Speed of rotation using shift + left/right arrow keys, in degrees. Default 15. */\n        rotateSpeedX?: number;\n        /** Speed of rotation using shift + up/down arrow keys, in degrees. Default 10. */\n        rotateSpeedY?: number;\n      };\n  /** Drag behavior without pressing function keys, one of `pan` and `rotate`. */\n  dragMode?: 'pan' | 'rotate';\n  /** Enable inertia after panning/pinching. If a number is provided, indicates the duration of time over which the velocity reduces to zero, in milliseconds. Default `false`. */\n  inertia?: boolean | number;\n};\n\nexport type ControllerProps = {\n  /** Identifier of the controller */\n  id: string;\n  /** Viewport x position */\n  x: number;\n  /** Viewport y position */\n  y: number;\n  /** Viewport width */\n  width: number;\n  /** Viewport height */\n  height: number;\n} & ControllerOptions & TransitionProps;\n\n/** The state of a controller */\nexport type InteractionState = {\n  /** If the view state is in transition */\n  inTransition?: boolean;\n  /** If the user is dragging */\n  isDragging?: boolean;\n  /** If the view is being panned, either from user input or transition */\n  isPanning?: boolean;\n  /** If the view is being rotated, either from user input or transition */\n  isRotating?: boolean;\n  /** If the view is being zoomed, either from user input or transition */\n  isZooming?: boolean;\n}\n\n/** Parameters passed to the onViewStateChange callback */\nexport type ViewStateChangeParameters = {\n  /** The next view state, either from user input or transition */\n  viewState: Record<string, any>;\n  /** Object describing the nature of the view state change */\n  interactionState: InteractionState;\n  /** The current view state */\n  oldViewState?: Record<string, any>;\n}\n\nconst pinchEventWorkaround: any = {};\n\nexport default abstract class Controller<ControllerState extends IViewState<ControllerState>> {\n  abstract get ControllerState(): ConstructorOf<ControllerState>;\n  abstract get transition(): TransitionProps;\n\n  // @ts-expect-error (2564) - not assigned in the constructor\n  protected props: ControllerProps;\n  protected state: Record<string, any> = {};\n\n  protected transitionManager: TransitionManager<ControllerState>;\n  protected eventManager: EventManager;\n  protected onViewStateChange: (params: ViewStateChangeParameters) => void;\n  protected onStateChange: (state: InteractionState) => void;\n  protected makeViewport: (opts: Record<string, any>) => Viewport\n\n  private _controllerState?: ControllerState;\n  private _events: Record<string, boolean> = {};\n  private _interactionState: InteractionState = {\n    isDragging: false\n  };\n  private _customEvents: string[] = [];\n  private _eventStartBlocked: any = null;\n  private _panMove: boolean = false;\n\n  protected invertPan: boolean = false;\n  protected dragMode: 'pan' | 'rotate' = 'rotate';\n  protected inertia: number = 0;\n  protected scrollZoom: boolean | {speed?: number; smooth?: boolean} = true;\n  protected dragPan: boolean = true;\n  protected dragRotate: boolean = true;\n  protected doubleClickZoom: boolean = true;\n  protected touchZoom: boolean = true;\n  protected touchRotate: boolean = false;\n  protected keyboard:\n    | boolean\n    | {\n        zoomSpeed?: number; //  speed of zoom using +/- keys. Default 2.\n        moveSpeed?: number; //  speed of movement using arrow keys, in pixels.\n        rotateSpeedX?: number; //  speed of rotation using shift + left/right arrow keys, in degrees. Default 15.\n        rotateSpeedY?: number; //  speed of rotation using shift + up/down arrow keys, in degrees. Default 10.\n      } = true;\n\n  constructor(opts: {\n    timeline: Timeline,\n    eventManager: EventManager;\n    makeViewport: (opts: Record<string, any>) => Viewport;\n    onViewStateChange: (params: ViewStateChangeParameters) => void;\n    onStateChange: (state: InteractionState) => void;\n  }) {\n    this.transitionManager = new TransitionManager<ControllerState>({\n      ...opts,\n      getControllerState: props => new this.ControllerState(props),\n      onViewStateChange: this._onTransition.bind(this),\n      onStateChange: this._setInteractionState.bind(this)\n    });\n\n    this.handleEvent = this.handleEvent.bind(this);\n\n    this.eventManager = opts.eventManager;\n    this.onViewStateChange = opts.onViewStateChange || (() => {});\n    this.onStateChange = opts.onStateChange || (() => {});\n    this.makeViewport = opts.makeViewport;\n  }\n\n  set events(customEvents) {\n    this.toggleEvents(this._customEvents, false);\n    this.toggleEvents(customEvents, true);\n    this._customEvents = customEvents;\n    // Make sure default events are not overwritten\n    if (this.props) {\n      this.setProps(this.props);\n    }\n  }\n\n  finalize() {\n    for (const eventName in this._events) {\n      if (this._events[eventName]) {\n        // @ts-ignore (2345) event type string cannot be assifned to enum\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        this.eventManager?.off(eventName, this.handleEvent);\n      }\n    }\n    this.transitionManager.finalize();\n  }\n\n  /**\n   * Callback for events\n   */\n  handleEvent(event: MjolnirEvent) {\n    // Force recalculate controller state\n    this._controllerState = undefined;\n    const eventStartBlocked = this._eventStartBlocked;\n\n    switch (event.type) {\n      case 'panstart':\n        return eventStartBlocked ? false : this._onPanStart(event);\n      case 'panmove':\n        return this._onPan(event);\n      case 'panend':\n        return this._onPanEnd(event);\n      case 'pinchstart':\n        return eventStartBlocked ? false : this._onPinchStart(event);\n      case 'pinchmove':\n        return this._onPinch(event);\n      case 'pinchend':\n        return this._onPinchEnd(event);\n      case 'tripanstart':\n        return eventStartBlocked ? false : this._onTriplePanStart(event);\n      case 'tripanmove':\n        return this._onTriplePan(event);\n      case 'tripanend':\n        return this._onTriplePanEnd(event);\n      case 'doubletap':\n        return this._onDoubleTap(event);\n      case 'wheel':\n        return this._onWheel(event);\n      case 'keydown':\n        return this._onKeyDown(event);\n      default:\n        return false;\n    }\n  }\n\n  /* Event utils */\n  // Event object: http://hammerjs.github.io/api/#event-object\n  get controllerState(): ControllerState {\n    this._controllerState = this._controllerState || new this.ControllerState({\n      makeViewport: this.makeViewport,\n      ...this.props,\n      ...this.state\n    });\n    return this._controllerState ;\n  }\n\n  getCenter(event: MjolnirGestureEvent | MjolnirWheelEvent) : [number, number] {\n    const {x, y} = this.props;\n    const {offsetCenter} = event;\n    return [offsetCenter.x - x, offsetCenter.y - y];\n  }\n\n  isPointInBounds(pos: [number, number], event: MjolnirEvent): boolean {\n    const {width, height} = this.props;\n    if (event && event.handled) {\n      return false;\n    }\n\n    const inside = pos[0] >= 0 && pos[0] <= width && pos[1] >= 0 && pos[1] <= height;\n    if (inside && event) {\n      event.stopPropagation();\n    }\n    return inside;\n  }\n\n  isFunctionKeyPressed(event: MjolnirEvent): boolean {\n    const {srcEvent} = event;\n    return Boolean(srcEvent.metaKey || srcEvent.altKey || srcEvent.ctrlKey || srcEvent.shiftKey);\n  }\n\n  isDragging(): boolean {\n    return this._interactionState.isDragging || false;\n  }\n\n  // When a multi-touch event ends, e.g. pinch, not all pointers are lifted at the same time.\n  // This triggers a brief `pan` event.\n  // Calling this method will temporarily disable *start events to avoid conflicting transitions.\n  blockEvents(timeout: number): void {\n    /* global setTimeout */\n    const timer = setTimeout(() => {\n      if (this._eventStartBlocked === timer) {\n        this._eventStartBlocked = null;\n      }\n    }, timeout);\n    this._eventStartBlocked = timer;\n  }\n\n  /**\n   * Extract interactivity options\n   */\n  setProps(props: ControllerProps) {\n    if (props.dragMode) {\n      this.dragMode = props.dragMode;\n    }\n    this.props = props;\n\n    if (!('transitionInterpolator' in props)) {\n      // Add default transition interpolator\n      props.transitionInterpolator = this._getTransitionProps().transitionInterpolator;\n    }\n\n    this.transitionManager.processViewStateChange(props);\n\n    const {inertia} = props;\n    this.inertia = Number.isFinite(inertia) ? (inertia as number) : (inertia === true ? DEFAULT_INERTIA : 0);\n\n    // TODO - make sure these are not reset on every setProps\n    const {\n      scrollZoom = true,\n      dragPan = true,\n      dragRotate = true,\n      doubleClickZoom = true,\n      touchZoom = true,\n      touchRotate = false,\n      keyboard = true\n    } = props;\n\n    // Register/unregister events\n    const isInteractive = Boolean(this.onViewStateChange);\n    this.toggleEvents(EVENT_TYPES.WHEEL, isInteractive && scrollZoom);\n    this.toggleEvents(EVENT_TYPES.PAN, isInteractive && (dragPan || dragRotate));\n    this.toggleEvents(EVENT_TYPES.PINCH, isInteractive && (touchZoom || touchRotate));\n    this.toggleEvents(EVENT_TYPES.TRIPLE_PAN, isInteractive && touchRotate);\n    this.toggleEvents(EVENT_TYPES.DOUBLE_TAP, isInteractive && doubleClickZoom);\n    this.toggleEvents(EVENT_TYPES.KEYBOARD, isInteractive && keyboard);\n\n    // Interaction toggles\n    this.scrollZoom = scrollZoom;\n    this.dragPan = dragPan;\n    this.dragRotate = dragRotate;\n    this.doubleClickZoom = doubleClickZoom;\n    this.touchZoom = touchZoom;\n    this.touchRotate = touchRotate;\n    this.keyboard = keyboard;\n  }\n\n  updateTransition() {\n    this.transitionManager.updateTransition();\n  }\n\n  toggleEvents(eventNames, enabled) {\n    if (this.eventManager) {\n      eventNames.forEach(eventName => {\n        if (this._events[eventName] !== enabled) {\n          this._events[eventName] = enabled;\n          if (enabled) {\n            // eslint-disable-next-line @typescript-eslint/unbound-method\n            this.eventManager.on(eventName, this.handleEvent);\n          } else {\n            // eslint-disable-next-line @typescript-eslint/unbound-method\n            this.eventManager.off(eventName, this.handleEvent);\n          }\n        }\n      });\n    }\n  }\n\n  // Private Methods\n\n  /* Callback util */\n  // formats map state and invokes callback function\n  protected updateViewport(newControllerState: ControllerState, extraProps: Record<string, any> | null = null, interactionState: InteractionState = {}) {\n    const viewState = {...newControllerState.getViewportProps(), ...extraProps};\n\n    // TODO - to restore diffing, we need to include interactionState\n    const changed = this.controllerState !== newControllerState;\n    // const oldViewState = this.controllerState.getViewportProps();\n    // const changed = Object.keys(viewState).some(key => oldViewState[key] !== viewState[key]);\n\n    this.state = newControllerState.getState();\n    this._setInteractionState(interactionState);\n\n    if (changed) {\n      const oldViewState = this.controllerState && this.controllerState.getViewportProps();\n      if (this.onViewStateChange) {\n        this.onViewStateChange({viewState, interactionState: this._interactionState, oldViewState});\n      }\n    }\n  }\n\n  private _onTransition(params: {viewState: Record<string, any>, oldViewState: Record<string, any>}) {\n    this.onViewStateChange({...params, interactionState: this._interactionState});\n  }\n\n  private _setInteractionState(newStates: InteractionState) {\n    Object.assign(this._interactionState, newStates);\n    this.onStateChange(this._interactionState);\n  }\n\n  /* Event handlers */\n  // Default handler for the `panstart` event.\n  protected _onPanStart(event: MjolnirGestureEvent): boolean {\n    const pos = this.getCenter(event);\n    if (!this.isPointInBounds(pos, event)) {\n      return false;\n    }\n    let alternateMode = this.isFunctionKeyPressed(event) || event.rightButton || false;\n    if (this.invertPan || this.dragMode === 'pan') {\n      // invertPan is replaced by props.dragMode, keeping for backward compatibility\n      alternateMode = !alternateMode;\n    }\n    const newControllerState = this.controllerState[alternateMode ? 'panStart' : 'rotateStart']({\n      pos\n    });\n    this._panMove = alternateMode;\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {isDragging: true});\n    return true;\n  }\n\n  // Default handler for the `panmove` and `panend` event.\n  protected _onPan(event: MjolnirGestureEvent): boolean {\n    if (!this.isDragging()) {\n      return false;\n    }\n    return this._panMove ? this._onPanMove(event) : this._onPanRotate(event);\n  }\n\n  protected _onPanEnd(event: MjolnirGestureEvent): boolean {\n    if (!this.isDragging()) {\n      return false;\n    }\n    return this._panMove ? this._onPanMoveEnd(event) : this._onPanRotateEnd(event);\n  }\n\n  // Default handler for panning to move.\n  // Called by `_onPan` when panning without function key pressed.\n  protected _onPanMove(event: MjolnirGestureEvent): boolean {\n    if (!this.dragPan) {\n      return false;\n    }\n    const pos = this.getCenter(event);\n    const newControllerState = this.controllerState.pan({pos});\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n      isDragging: true,\n      isPanning: true\n    });\n    return true;\n  }\n\n  protected _onPanMoveEnd(event: MjolnirGestureEvent): boolean {\n    const {inertia} = this;\n    if (this.dragPan && inertia && event.velocity) {\n      const pos = this.getCenter(event);\n      const endPos: [number, number] = [\n        pos[0] + (event.velocityX * inertia) / 2,\n        pos[1] + (event.velocityY * inertia) / 2\n      ];\n      const newControllerState = this.controllerState.pan({pos: endPos}).panEnd();\n      this.updateViewport(\n        newControllerState,\n        {\n          ...this._getTransitionProps(),\n          transitionDuration: inertia,\n          transitionEasing: INERTIA_EASING\n        },\n        {\n          isDragging: false,\n          isPanning: true\n        }\n      );\n    } else {\n      const newControllerState = this.controllerState.panEnd();\n      this.updateViewport(newControllerState, null, {\n        isDragging: false,\n        isPanning: false\n      });\n    }\n    return true;\n  }\n\n  // Default handler for panning to rotate.\n  // Called by `_onPan` when panning with function key pressed.\n  protected _onPanRotate(event: MjolnirGestureEvent): boolean {\n    if (!this.dragRotate) {\n      return false;\n    }\n\n    const pos = this.getCenter(event);\n    const newControllerState = this.controllerState.rotate({pos});\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n      isDragging: true,\n      isRotating: true\n    });\n    return true;\n  }\n\n  protected _onPanRotateEnd(event): boolean {\n    const {inertia} = this;\n    if (this.dragRotate && inertia && event.velocity) {\n      const pos = this.getCenter(event);\n      const endPos: [number, number] = [\n        pos[0] + (event.velocityX * inertia) / 2,\n        pos[1] + (event.velocityY * inertia) / 2\n      ];\n      const newControllerState = this.controllerState.rotate({pos: endPos}).rotateEnd();\n      this.updateViewport(\n        newControllerState,\n        {\n          ...this._getTransitionProps(),\n          transitionDuration: inertia,\n          transitionEasing: INERTIA_EASING\n        },\n        {\n          isDragging: false,\n          isRotating: true\n        }\n      );\n    } else {\n      const newControllerState = this.controllerState.rotateEnd();\n      this.updateViewport(newControllerState, null, {\n        isDragging: false,\n        isRotating: false\n      });\n    }\n    return true;\n  }\n\n  // Default handler for the `wheel` event.\n  protected _onWheel(event: MjolnirWheelEvent): boolean {\n    if (!this.scrollZoom) {\n      return false;\n    }\n    event.srcEvent.preventDefault();\n\n    const pos = this.getCenter(event);\n    if (!this.isPointInBounds(pos, event)) {\n      return false;\n    }\n\n    const {speed = 0.01, smooth = false} = this.scrollZoom === true ? {} : this.scrollZoom;\n    const {delta} = event;\n\n    // Map wheel delta to relative scale\n    let scale = 2 / (1 + Math.exp(-Math.abs(delta * speed)));\n    if (delta < 0 && scale !== 0) {\n      scale = 1 / scale;\n    }\n\n    const newControllerState = this.controllerState.zoom({pos, scale});\n    this.updateViewport(\n      newControllerState,\n      {...this._getTransitionProps({around: pos}), transitionDuration: smooth ? 250 : 1},\n      {\n        isZooming: true,\n        isPanning: true\n      }\n    );\n    return true;\n  }\n\n  protected _onTriplePanStart(event: MjolnirGestureEvent): boolean {\n    const pos = this.getCenter(event);\n    if (!this.isPointInBounds(pos, event)) {\n      return false;\n    }\n    const newControllerState = this.controllerState.rotateStart({pos});\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {isDragging: true});\n    return true;\n  }\n\n  protected _onTriplePan(event: MjolnirGestureEvent): boolean {\n    if (!this.touchRotate) {\n      return false;\n    }\n    if (!this.isDragging()) {\n      return false;\n    }\n\n    const pos = this.getCenter(event);\n    pos[0] -= event.deltaX;\n\n    const newControllerState = this.controllerState.rotate({pos});\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n      isDragging: true,\n      isRotating: true\n    });\n    return true;\n  }\n\n  protected _onTriplePanEnd(event: MjolnirGestureEvent): boolean {\n    if (!this.isDragging()) {\n      return false;\n    }\n    const {inertia} = this;\n    if (this.touchRotate && inertia && event.velocityY) {\n      const pos = this.getCenter(event);\n      const endPos: [number, number] = [pos[0], (pos[1] += (event.velocityY * inertia) / 2)];\n      const newControllerState = this.controllerState.rotate({pos: endPos});\n      this.updateViewport(\n        newControllerState,\n        {\n          ...this._getTransitionProps(),\n          transitionDuration: inertia,\n          transitionEasing: INERTIA_EASING\n        },\n        {\n          isDragging: false,\n          isRotating: true\n        }\n      );\n      this.blockEvents(inertia);\n    } else {\n      const newControllerState = this.controllerState.rotateEnd();\n      this.updateViewport(newControllerState, null, {\n        isDragging: false,\n        isRotating: false\n      });\n    }\n    return true;\n  }\n\n  // Default handler for the `pinchstart` event.\n  protected _onPinchStart(event: MjolnirGestureEvent): boolean {\n    const pos = this.getCenter(event);\n    if (!this.isPointInBounds(pos, event)) {\n      return false;\n    }\n\n    const newControllerState = this.controllerState.zoomStart({pos}).rotateStart({pos});\n    // hack - hammer's `rotation` field doesn't seem to produce the correct angle\n    pinchEventWorkaround._startPinchRotation = event.rotation;\n    pinchEventWorkaround._lastPinchEvent = event;\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {isDragging: true});\n    return true;\n  }\n\n  // Default handler for the `pinchmove` and `pinchend` events.\n  protected _onPinch(event: MjolnirGestureEvent): boolean {\n    if (!this.touchZoom && !this.touchRotate) {\n      return false;\n    }\n    if (!this.isDragging()) {\n      return false;\n    }\n\n    let newControllerState = this.controllerState;\n    if (this.touchZoom) {\n      const {scale} = event;\n      const pos = this.getCenter(event);\n      newControllerState = newControllerState.zoom({pos, scale});\n    }\n    if (this.touchRotate) {\n      const {rotation} = event;\n      newControllerState = newControllerState.rotate({\n        deltaAngleX: pinchEventWorkaround._startPinchRotation - rotation\n      });\n    }\n\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n      isDragging: true,\n      isPanning: this.touchZoom,\n      isZooming: this.touchZoom,\n      isRotating: this.touchRotate\n    });\n    pinchEventWorkaround._lastPinchEvent = event;\n    return true;\n  }\n\n  protected _onPinchEnd(event: MjolnirGestureEvent): boolean {\n    if (!this.isDragging()) {\n      return false;\n    }\n    const {inertia} = this;\n    const {_lastPinchEvent} = pinchEventWorkaround;\n    if (this.touchZoom && inertia && _lastPinchEvent && event.scale !== _lastPinchEvent.scale) {\n      const pos = this.getCenter(event);\n      let newControllerState = this.controllerState.rotateEnd();\n      const z = Math.log2(event.scale);\n      const velocityZ =\n        (z - Math.log2(_lastPinchEvent.scale)) / (event.deltaTime - _lastPinchEvent.deltaTime);\n      const endScale = Math.pow(2, z + (velocityZ * inertia) / 2);\n      newControllerState = newControllerState.zoom({pos, scale: endScale}).zoomEnd();\n\n      this.updateViewport(\n        newControllerState,\n        {\n          ...this._getTransitionProps({around: pos}),\n          transitionDuration: inertia,\n          transitionEasing: INERTIA_EASING\n        },\n        {\n          isDragging: false,\n          isPanning: this.touchZoom,\n          isZooming: this.touchZoom,\n          isRotating: false\n        }\n      );\n      this.blockEvents(inertia);\n    } else {\n      const newControllerState = this.controllerState.zoomEnd().rotateEnd();\n      this.updateViewport(newControllerState, null, {\n        isDragging: false,\n        isPanning: false,\n        isZooming: false,\n        isRotating: false\n      });\n    }\n    pinchEventWorkaround._startPinchRotation = null;\n    pinchEventWorkaround._lastPinchEvent = null;\n    return true;\n  }\n\n  // Default handler for the `doubletap` event.\n  protected _onDoubleTap(event: MjolnirGestureEvent): boolean {\n    if (!this.doubleClickZoom) {\n      return false;\n    }\n    const pos = this.getCenter(event);\n    if (!this.isPointInBounds(pos, event)) {\n      return false;\n    }\n\n    const isZoomOut = this.isFunctionKeyPressed(event);\n\n    const newControllerState = this.controllerState.zoom({pos, scale: isZoomOut ? 0.5 : 2});\n    this.updateViewport(newControllerState, this._getTransitionProps({around: pos}), {\n      isZooming: true,\n      isPanning: true\n    });\n    this.blockEvents(100);\n    return true;\n  }\n\n  // Default handler for the `keydown` event\n  protected _onKeyDown(event: MjolnirKeyEvent): boolean {\n    if (!this.keyboard) {\n      return false;\n    }\n    const funcKey = this.isFunctionKeyPressed(event);\n    // @ts-ignore\n    const {zoomSpeed, moveSpeed, rotateSpeedX, rotateSpeedY} = this.keyboard === true ? {} : this.keyboard;\n    const {controllerState} = this;\n    let newControllerState;\n    const interactionState: InteractionState = {};\n\n    switch (event.srcEvent.code) {\n      case 'Minus':\n        newControllerState = funcKey\n          ? controllerState.zoomOut(zoomSpeed).zoomOut(zoomSpeed)\n          : controllerState.zoomOut(zoomSpeed);\n        interactionState.isZooming = true;\n        break;\n      case 'Equal':\n        newControllerState = funcKey\n          ? controllerState.zoomIn(zoomSpeed).zoomIn(zoomSpeed)\n          : controllerState.zoomIn(zoomSpeed);\n        interactionState.isZooming = true;\n        break;\n      case 'ArrowLeft':\n        if (funcKey) {\n          newControllerState = controllerState.rotateLeft(rotateSpeedX);\n          interactionState.isRotating = true;\n        } else {\n          newControllerState = controllerState.moveLeft(moveSpeed);\n          interactionState.isPanning = true;\n        }\n        break;\n      case 'ArrowRight':\n        if (funcKey) {\n          newControllerState = controllerState.rotateRight(rotateSpeedX);\n          interactionState.isRotating = true;\n        } else {\n          newControllerState = controllerState.moveRight(moveSpeed);\n          interactionState.isPanning = true;\n        }\n        break;\n      case 'ArrowUp':\n        if (funcKey) {\n          newControllerState = controllerState.rotateUp(rotateSpeedY);\n          interactionState.isRotating = true;\n        } else {\n          newControllerState = controllerState.moveUp(moveSpeed);\n          interactionState.isPanning = true;\n        }\n        break;\n      case 'ArrowDown':\n        if (funcKey) {\n          newControllerState = controllerState.rotateDown(rotateSpeedY);\n          interactionState.isRotating = true;\n        } else {\n          newControllerState = controllerState.moveDown(moveSpeed);\n          interactionState.isPanning = true;\n        }\n        break;\n      default:\n        return false;\n    }\n    this.updateViewport(newControllerState, this._getTransitionProps(), interactionState);\n    return true;\n  }\n\n  protected _getTransitionProps(opts?: any): TransitionProps {\n    const {transition} = this;\n\n    if (!transition || !transition.transitionInterpolator) {\n      return NO_TRANSITION_PROPS;\n    }\n\n    // Enables Transitions on double-tap and key-down events.\n    return opts\n      ? {\n        ...transition,\n        transitionInterpolator: new LinearInterpolator({\n          ...opts,\n          ...(transition.transitionInterpolator as LinearInterpolator).opts,\n          makeViewport: this.controllerState.makeViewport\n        })\n      }\n      : transition;\n  }\n}\n"],"file":"controller.js"}