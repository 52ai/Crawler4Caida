{"version":3,"sources":["../../../src/controllers/globe-controller.ts"],"names":["clamp","Controller","MapState","mod","LinearInterpolator","GlobeState","applyConstraints","props","maxZoom","minZoom","zoom","longitude","latitude","GlobeController","transitionDuration","transitionInterpolator","setProps","dragRotate","touchRotate"],"mappings":";AAAA,SAAQA,KAAR,QAAoB,eAApB;AACA,OAAOC,UAAP,MAA0C,cAA1C;AAEA,SAAQC,QAAR,QAAsC,kBAAtC;AACA,SAAQC,GAAR,QAAkB,qBAAlB;AACA,OAAOC,kBAAP,MAA+B,oCAA/B;;AAEA,MAAMC,UAAN,SAAyBH,QAAzB,CAAkC;AAEhCI,EAAAA,gBAAgB,CAACC,KAAD,EAA0D;AAExE,UAAM;AAACC,MAAAA,OAAD;AAAUC,MAAAA,OAAV;AAAmBC,MAAAA;AAAnB,QAA2BH,KAAjC;AACAA,IAAAA,KAAK,CAACG,IAAN,GAAaV,KAAK,CAACU,IAAD,EAAOD,OAAP,EAAgBD,OAAhB,CAAlB;AAEA,UAAM;AAACG,MAAAA,SAAD;AAAYC,MAAAA;AAAZ,QAAwBL,KAA9B;;AACA,QAAII,SAAS,GAAG,CAAC,GAAb,IAAoBA,SAAS,GAAG,GAApC,EAAyC;AACvCJ,MAAAA,KAAK,CAACI,SAAN,GAAkBR,GAAG,CAACQ,SAAS,GAAG,GAAb,EAAkB,GAAlB,CAAH,GAA4B,GAA9C;AACD;;AACDJ,IAAAA,KAAK,CAACK,QAAN,GAAiBZ,KAAK,CAACY,QAAD,EAAW,CAAC,EAAZ,EAAgB,EAAhB,CAAtB;AAEA,WAAOL,KAAP;AACD;;AAd+B;;AAiBlC,eAAe,MAAMM,eAAN,SAA8BZ,UAA9B,CAAmD;AAAA;AAAA;;AAAA,6CAC9CI,UAD8C;;AAAA,wCAGnD;AACXS,MAAAA,kBAAkB,EAAE,GADT;AAEXC,MAAAA,sBAAsB,EAAE,IAAIX,kBAAJ,CAAuB,CAAC,WAAD,EAAc,UAAd,EAA0B,MAA1B,CAAvB;AAFb,KAHmD;;AAAA,sCAQnC,KARmC;AAAA;;AAUhEY,EAAAA,QAAQ,CAACT,KAAD,EAAyB;AAC/B,UAAMS,QAAN,CAAeT,KAAf;AAGA,SAAKU,UAAL,GAAkB,KAAlB;AACA,SAAKC,WAAL,GAAmB,KAAnB;AACD;;AAhB+D","sourcesContent":["import {clamp} from '@math.gl/core';\nimport Controller, {ControllerProps} from './controller';\n\nimport {MapState, MapStateProps} from './map-controller';\nimport {mod} from '../utils/math-utils';\nimport LinearInterpolator from '../transitions/linear-interpolator';\n\nclass GlobeState extends MapState {\n  // Apply any constraints (mathematical or defined by _viewportProps) to map state\n  applyConstraints(props: Required<MapStateProps>): Required<MapStateProps> {\n    // Ensure zoom is within specified range\n    const {maxZoom, minZoom, zoom} = props;\n    props.zoom = clamp(zoom, minZoom, maxZoom);\n\n    const {longitude, latitude} = props;\n    if (longitude < -180 || longitude > 180) {\n      props.longitude = mod(longitude + 180, 360) - 180;\n    }\n    props.latitude = clamp(latitude, -89, 89);\n\n    return props;\n  }\n}\n\nexport default class GlobeController extends Controller<MapState> {\n  ControllerState = GlobeState;\n\n  transition = {\n    transitionDuration: 300,\n    transitionInterpolator: new LinearInterpolator(['longitude', 'latitude', 'zoom'])\n  };\n\n  dragMode: 'pan' | 'rotate' = 'pan';\n\n  setProps(props: ControllerProps) {\n    super.setProps(props);\n\n    // TODO - support pitching?\n    this.dragRotate = false;\n    this.touchRotate = false;\n  }\n}\n"],"file":"globe-controller.js"}