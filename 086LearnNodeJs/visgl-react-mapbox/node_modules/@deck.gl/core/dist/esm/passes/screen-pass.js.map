{"version":3,"sources":["../../../src/passes/screen-pass.ts"],"names":["ClipSpace","setParameters","withParameters","clear","Pass","ScreenPass","constructor","gl","props","module","fs","id","model","modules","render","params","viewport","drawingBufferWidth","drawingBufferHeight","framebuffer","outputBuffer","clearColor","_renderPass","delete","options","inputBuffer","color","draw","moduleSettings","uniforms","texture","texSize","width","height","parameters","depthWrite","depthTest"],"mappings":";AAOA,SAAQA,SAAR,EAAmBC,aAAnB,EAAkCC,cAAlC,EAAkDC,KAAlD,QAA8D,eAA9D;AACA,OAAOC,IAAP,MAAiB,QAAjB;AAgBA,eAAe,MAAMC,UAAN,SAAyBD,IAAzB,CAA8B;AAG3CE,EAAAA,WAAW,CAACC,EAAD,EAA4BC,KAA5B,EAAoD;AAC7D,UAAMD,EAAN,EAAUC,KAAV;;AAD6D;;AAE7D,UAAM;AAACC,MAAAA,MAAD;AAASC,MAAAA,EAAT;AAAaC,MAAAA;AAAb,QAAmBH,KAAzB;AACA,SAAKI,KAAL,GAAa,IAAIZ,SAAJ,CAAcO,EAAd,EAAkB;AAACI,MAAAA,EAAD;AAAKD,MAAAA,EAAL;AAASG,MAAAA,OAAO,EAAE,CAACJ,MAAD;AAAlB,KAAlB,CAAb;AACD;;AAEDK,EAAAA,MAAM,CAACC,MAAD,EAAwC;AAC5C,UAAMR,EAAE,GAAG,KAAKA,EAAhB;AAEAN,IAAAA,aAAa,CAACM,EAAD,EAAK;AAACS,MAAAA,QAAQ,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAOT,EAAE,CAACU,kBAAV,EAA8BV,EAAE,CAACW,mBAAjC;AAAX,KAAL,CAAb;AAEAhB,IAAAA,cAAc,CAACK,EAAD,EAAK;AAACY,MAAAA,WAAW,EAAEJ,MAAM,CAACK,YAArB;AAAmCC,MAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV;AAA/C,KAAL,EAAmE,MAC/E,KAAKC,WAAL,CAAiBf,EAAjB,EAAqBQ,MAArB,CADY,CAAd;AAGD;;AAEDQ,EAAAA,MAAM,GAAG;AACP,SAAKX,KAAL,CAAWW,MAAX;AACA,SAAKX,KAAL,GAAa,IAAb;AACD;;AAUSU,EAAAA,WAAW,CAACf,EAAD,EAA4BiB,OAA5B,EAA8D;AACjF,UAAM;AAACC,MAAAA;AAAD,QAAgBD,OAAtB;AACArB,IAAAA,KAAK,CAACI,EAAD,EAAK;AAACmB,MAAAA,KAAK,EAAE;AAAR,KAAL,CAAL;AACA,SAAKd,KAAL,CAAWe,IAAX,CAAgB;AACdC,MAAAA,cAAc,EAAE,KAAKpB,KAAL,CAAWoB,cADb;AAEdC,MAAAA,QAAQ,EAAE;AACRC,QAAAA,OAAO,EAAEL,WADD;AAERM,QAAAA,OAAO,EAAE,CAACN,WAAW,CAACO,KAAb,EAAoBP,WAAW,CAACQ,MAAhC;AAFD,OAFI;AAMdC,MAAAA,UAAU,EAAE;AACVC,QAAAA,UAAU,EAAE,KADF;AAEVC,QAAAA,SAAS,EAAE;AAFD;AANE,KAAhB;AAWD;;AA9C0C","sourcesContent":["//\n// A base render pass.\n//\n// Attribution: This class and the multipass system were inspired by\n// the THREE.js EffectComposer and *Pass classes\n\nimport type {Framebuffer} from '@luma.gl/core';\nimport {ClipSpace, setParameters, withParameters, clear} from '@luma.gl/core';\nimport Pass from './pass';\n\nimport type {ShaderModule} from '../types/types';\n\ntype ScreenPassProps = {\n  module: ShaderModule;\n  fs: string | null;\n  id: string;\n  moduleSettings: any;\n};\n\ntype ScreenPassRenderOptions = {\n  inputBuffer: Framebuffer;\n  outputBuffer: Framebuffer;\n};\n\nexport default class ScreenPass extends Pass {\n  model: ClipSpace;\n\n  constructor(gl: WebGLRenderingContext, props: ScreenPassProps) {\n    super(gl, props);\n    const {module, fs, id} = props;\n    this.model = new ClipSpace(gl, {id, fs, modules: [module]});\n  }\n\n  render(params: ScreenPassRenderOptions): void {\n    const gl = this.gl;\n\n    setParameters(gl, {viewport: [0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight]});\n\n    withParameters(gl, {framebuffer: params.outputBuffer, clearColor: [0, 0, 0, 0]}, () =>\n      this._renderPass(gl, params)\n    );\n  }\n\n  delete() {\n    this.model.delete();\n    this.model = null;\n  }\n\n  // Private methods\n\n  /**\n   * Renders the pass.\n   * This is an abstract method that should be overridden.\n   * @param inputBuffer - Frame buffer that contains the result of the previous pass\n   * @param outputBuffer - Frame buffer that serves as the output render target\n   */\n  protected _renderPass(gl: WebGLRenderingContext, options: ScreenPassRenderOptions) {\n    const {inputBuffer} = options;\n    clear(gl, {color: true});\n    this.model.draw({\n      moduleSettings: this.props.moduleSettings,\n      uniforms: {\n        texture: inputBuffer,\n        texSize: [inputBuffer.width, inputBuffer.height]\n      },\n      parameters: {\n        depthWrite: false,\n        depthTest: false\n      }\n    });\n  }\n}\n"],"file":"screen-pass.js"}