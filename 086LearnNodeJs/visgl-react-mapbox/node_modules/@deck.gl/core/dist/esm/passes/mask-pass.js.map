{"version":3,"sources":["../../../src/passes/mask-pass.ts"],"names":["Framebuffer","Texture2D","withParameters","OPERATION","LayersPass","MaskPass","constructor","gl","props","mapSize","maskMap","width","height","parameters","fbo","id","attachments","render","options","colorMask","channel","clearColor","blend","blendFunc","blendEquation","depthTest","target","pass","shouldDrawLayer","layer","operation","MASK","delete"],"mappings":";AAAA,SAAQA,WAAR,EAAqBC,SAArB,EAAgCC,cAAhC,QAAqD,eAArD;AACA,SAAQC,SAAR,QAAwB,kBAAxB;AACA,OAAOC,UAAP,MAAuB,eAAvB;AASA,eAAe,MAAMC,QAAN,SAAuBD,UAAvB,CAAkC;AAI/CE,EAAAA,WAAW,CAACC,EAAD,EAAKC,KAAL,EAA4C;AACrD,UAAMD,EAAN,EAAUC,KAAV;;AADqD;;AAAA;;AAGrD,UAAM;AAACC,MAAAA,OAAO,GAAG;AAAX,QAAmBD,KAAzB;AAEA,SAAKE,OAAL,GAAe,IAAIT,SAAJ,CAAcM,EAAd,EAAkB;AAC/BI,MAAAA,KAAK,EAAEF,OADwB;AAE/BG,MAAAA,MAAM,EAAEH,OAFuB;AAG/BI,MAAAA,UAAU,EAAE;AACV,qBADU;AAEV,qBAFU;AAGV,sBAHU;AAIV;AAJU;AAHmB,KAAlB,CAAf;AAWA,SAAKC,GAAL,GAAW,IAAId,WAAJ,CAAgBO,EAAhB,EAAoB;AAC7BQ,MAAAA,EAAE,EAAE,SADyB;AAE7BJ,MAAAA,KAAK,EAAEF,OAFsB;AAG7BG,MAAAA,MAAM,EAAEH,OAHqB;AAI7BO,MAAAA,WAAW,EAAE;AACX,iBAAwB,KAAKN;AADlB;AAJgB,KAApB,CAAX;AAQD;;AAEDO,EAAAA,MAAM,CAACC,OAAD,EAAiC;AACrC,UAAMX,EAAE,GAAG,KAAKA,EAAhB;AAEA,UAAMY,SAAS,GAAG,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsB,KAAtB,CAAlB;AACAA,IAAAA,SAAS,CAACD,OAAO,CAACE,OAAT,CAAT,GAA6B,IAA7B;AAEA,WAAOlB,cAAc,CACnBK,EADmB,EAEnB;AACEc,MAAAA,UAAU,EAAE,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,CADd;AAEEC,MAAAA,KAAK,EAAE,IAFT;AAGEC,MAAAA,SAAS,EAAE,MAHb;AAIEC,MAAAA,aAAa,OAJf;AAKEL,MAAAA,SALF;AAMEM,MAAAA,SAAS,EAAE;AANb,KAFmB,EAUnB,MAAM,MAAMR,MAAN,CAAa,EAAC,GAAGC,OAAJ;AAAaQ,MAAAA,MAAM,EAAE,KAAKZ,GAA1B;AAA+Ba,MAAAA,IAAI,EAAE;AAArC,KAAb,CAVa,CAArB;AAYD;;AAEDC,EAAAA,eAAe,CAACC,KAAD,EAAQ;AACrB,WAAOA,KAAK,CAACrB,KAAN,CAAYsB,SAAZ,KAA0B3B,SAAS,CAAC4B,IAA3C;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP,SAAKlB,GAAL,CAASkB,MAAT;AACA,SAAKtB,OAAL,CAAasB,MAAb;AACD;;AAzD8C","sourcesContent":["import {Framebuffer, Texture2D, withParameters} from '@luma.gl/core';\nimport {OPERATION} from '../lib/constants';\nimport LayersPass from './layers-pass';\n\nimport type {LayersPassRenderOptions} from './layers-pass';\n\ntype MaskPassRenderOptions = LayersPassRenderOptions & {\n  /** The channel to render into, 0:red, 1:green, 2:blue, 3:alpha */\n  channel: number;\n};\n\nexport default class MaskPass extends LayersPass {\n  maskMap: Texture2D;\n  fbo: Framebuffer;\n\n  constructor(gl, props: {id: string; mapSize?: number}) {\n    super(gl, props);\n\n    const {mapSize = 2048} = props;\n\n    this.maskMap = new Texture2D(gl, {\n      width: mapSize,\n      height: mapSize,\n      parameters: {\n        [gl.TEXTURE_MIN_FILTER]: gl.LINEAR,\n        [gl.TEXTURE_MAG_FILTER]: gl.LINEAR,\n        [gl.TEXTURE_WRAP_S]: gl.CLAMP_TO_EDGE,\n        [gl.TEXTURE_WRAP_T]: gl.CLAMP_TO_EDGE\n      }\n    });\n\n    this.fbo = new Framebuffer(gl, {\n      id: 'maskmap',\n      width: mapSize,\n      height: mapSize,\n      attachments: {\n        [gl.COLOR_ATTACHMENT0]: this.maskMap\n      }\n    });\n  }\n\n  render(options: MaskPassRenderOptions) {\n    const gl = this.gl;\n\n    const colorMask = [false, false, false, false];\n    colorMask[options.channel] = true;\n\n    return withParameters(\n      gl,\n      {\n        clearColor: [255, 255, 255, 255],\n        blend: true,\n        blendFunc: [gl.ZERO, gl.ONE],\n        blendEquation: gl.FUNC_SUBTRACT,\n        colorMask,\n        depthTest: false\n      },\n      () => super.render({...options, target: this.fbo, pass: 'mask'})\n    );\n  }\n\n  shouldDrawLayer(layer) {\n    return layer.props.operation === OPERATION.MASK;\n  }\n\n  delete() {\n    this.fbo.delete();\n    this.maskMap.delete();\n  }\n}\n"],"file":"mask-pass.js"}