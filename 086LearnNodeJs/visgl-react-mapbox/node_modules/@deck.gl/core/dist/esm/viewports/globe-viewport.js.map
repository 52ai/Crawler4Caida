{"version":3,"sources":["../../../src/viewports/globe-viewport.ts"],"names":["Matrix4","Viewport","PROJECTION_MODE","vec3","vec4","DEGREES_TO_RADIANS","Math","PI","RADIANS_TO_DEGREES","EARTH_RADIUS","GLOBE_RADIUS","getDistanceScales","unitsPerMeter","unitsPerDegree","unitsPerMeter2","metersPerUnit","unitsPerDegree2","degreesPerUnit","GlobeViewport","constructor","opts","latitude","longitude","zoom","nearZMultiplier","farZMultiplier","resolution","height","altitude","max","viewMatrix","lookAt","eye","up","scale","pow","rotateX","rotateZ","halfFov","atan","relativeScale","distanceScales","fovyRadians","focalDistance","near","far","min","projectionMode","GLOBE","getBounds","options","unprojectOption","targetZ","z","left","unproject","top","width","right","bottom","xyz","topLeft","x","y","y2","pixelUnprojectionMatrix","coord","Number","isFinite","transformVector","coord0","coord1","lt","lSqr","sqrLen","sub","l0Sqr","l1Sqr","sSqr","dSqr","r0","sqrt","dr","t","lerp","X","Y","Z","unprojectPosition","projectPosition","lng","lat","lambda","phi","cosPhi","cos","D","sin","len","asin","atan2","projectFlat","unprojectFlat","panByPosition","coords","pixel","fromPosition","matrix","vector","result","transformMat4"],"mappings":"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","sourcesContent":["import {Matrix4} from '@math.gl/core';\nimport Viewport from './viewport';\nimport {PROJECTION_MODE} from '../lib/constants';\n\nimport * as vec3 from 'gl-matrix/vec3';\nimport * as vec4 from 'gl-matrix/vec4';\n\nconst DEGREES_TO_RADIANS = Math.PI / 180;\nconst RADIANS_TO_DEGREES = 180 / Math.PI;\nconst EARTH_RADIUS = 6370972;\nconst GLOBE_RADIUS = 256;\n\nfunction getDistanceScales() {\n  const unitsPerMeter = GLOBE_RADIUS / EARTH_RADIUS;\n  const unitsPerDegree = (Math.PI / 180) * GLOBE_RADIUS;\n\n  return {\n    unitsPerMeter: [unitsPerMeter, unitsPerMeter, unitsPerMeter],\n    unitsPerMeter2: [0, 0, 0],\n    metersPerUnit: [1 / unitsPerMeter, 1 / unitsPerMeter, 1 / unitsPerMeter],\n    unitsPerDegree: [unitsPerDegree, unitsPerDegree, unitsPerMeter],\n    unitsPerDegree2: [0, 0, 0],\n    degreesPerUnit: [1 / unitsPerDegree, 1 / unitsPerDegree, 1 / unitsPerMeter]\n  };\n}\n\nexport type GlobeViewportOptions = {\n  /** Name of the viewport */\n  id?: string;\n  /** Left offset from the canvas edge, in pixels */\n  x?: number;\n  /** Top offset from the canvas edge, in pixels */\n  y?: number;\n  /** Viewport width in pixels */\n  width?: number;\n  /** Viewport height in pixels */\n  height?: number;\n  /** Longitude in degrees */\n  longitude?: number;\n  /** Latitude in degrees */\n  latitude?: number;\n  /** Camera altitude relative to the viewport height, used to control the FOV. Default `1.5` */\n  altitude?: number;\n  /* Meter offsets of the viewport center from lng, lat */\n  position?: number[];\n  /** Zoom level */\n  zoom?: number;\n  /** Use orthographic projection */\n  orthographic?: boolean;\n  /** Scaler for the near plane, 1 unit equals to the height of the viewport. Default `0.1` */\n  nearZMultiplier?: number;\n  /** Scaler for the far plane, 1 unit equals to the distance from the camera to the edge of the screen. Default `2` */\n  farZMultiplier?: number;\n  /** The resolution at which to turn flat features into 3D meshes, in degrees. Smaller numbers will generate more detailed mesh. Default `10` */\n  resolution?: number;\n};\n\nexport default class GlobeViewport extends Viewport {\n  // @ts-ignore\n  longitude: number;\n  // @ts-ignore\n  latitude: number;\n  resolution: number;\n\n  constructor(opts: GlobeViewportOptions = {}) {\n    const {\n      latitude = 0,\n      longitude = 0,\n      zoom = 0,\n      nearZMultiplier = 0.1,\n      farZMultiplier = 2,\n      resolution = 10\n    } = opts;\n\n    let {height, altitude = 1.5} = opts;\n\n    height = height || 1;\n    altitude = Math.max(0.75, altitude);\n\n    // Calculate view matrix\n    const viewMatrix = new Matrix4().lookAt({eye: [0, -altitude, 0], up: [0, 0, 1]});\n    const scale = Math.pow(2, zoom);\n    viewMatrix.rotateX(latitude * DEGREES_TO_RADIANS);\n    viewMatrix.rotateZ(-longitude * DEGREES_TO_RADIANS);\n    viewMatrix.scale(scale / height);\n\n    const halfFov = Math.atan(0.5 / altitude);\n    const relativeScale = (GLOBE_RADIUS * 2 * scale) / height;\n\n    super({\n      ...opts,\n      // x, y, width,\n      height,\n\n      // view matrix\n      viewMatrix,\n      longitude,\n      latitude,\n      zoom,\n\n      // projection matrix parameters\n      distanceScales: getDistanceScales(),\n      fovyRadians: halfFov * 2,\n      focalDistance: altitude,\n      near: nearZMultiplier,\n      far: Math.min(2, 1 / relativeScale + 1) * altitude * farZMultiplier\n    });\n\n    this.latitude = latitude;\n    this.longitude = longitude;\n    this.resolution = resolution;\n  }\n\n  get projectionMode() {\n    return PROJECTION_MODE.GLOBE;\n  }\n\n  getDistanceScales() {\n    return this.distanceScales;\n  }\n\n  getBounds(options: {z?: number} = {}): [number, number, number, number] {\n    const unprojectOption = {targetZ: options.z || 0};\n\n    const left = this.unproject([0, this.height / 2], unprojectOption);\n    const top = this.unproject([this.width / 2, 0], unprojectOption);\n    const right = this.unproject([this.width, this.height / 2], unprojectOption);\n    const bottom = this.unproject([this.width / 2, this.height], unprojectOption);\n\n    if (right[0] < this.longitude) right[0] += 360;\n    if (left[0] > this.longitude) left[0] -= 360;\n\n    return [\n      Math.min(left[0], right[0], top[0], bottom[0]),\n      Math.min(left[1], right[1], top[1], bottom[1]),\n      Math.max(left[0], right[0], top[0], bottom[0]),\n      Math.max(left[1], right[1], top[1], bottom[1])\n    ];\n  }\n\n  unproject(\n    xyz: number[],\n    {topLeft = true, targetZ}: {topLeft?: boolean; targetZ?: number} = {}\n  ): number[] {\n    const [x, y, z] = xyz;\n\n    const y2 = topLeft ? y : this.height - y;\n    const {pixelUnprojectionMatrix} = this;\n\n    let coord;\n    if (Number.isFinite(z)) {\n      // Has depth component\n      coord = transformVector(pixelUnprojectionMatrix, [x, y2, z, 1]);\n    } else {\n      // since we don't know the correct projected z value for the point,\n      // unproject two points to get a line and then find the point on that line that intersects with the sphere\n      const coord0 = transformVector(pixelUnprojectionMatrix, [x, y2, -1, 1]);\n      const coord1 = transformVector(pixelUnprojectionMatrix, [x, y2, 1, 1]);\n\n      const lt = ((targetZ || 0) / EARTH_RADIUS + 1) * GLOBE_RADIUS;\n      const lSqr = vec3.sqrLen(vec3.sub([], coord0, coord1));\n      const l0Sqr = vec3.sqrLen(coord0);\n      const l1Sqr = vec3.sqrLen(coord1);\n      const sSqr = (4 * l0Sqr * l1Sqr - (lSqr - l0Sqr - l1Sqr) ** 2) / 16;\n      const dSqr = (4 * sSqr) / lSqr;\n      const r0 = Math.sqrt(l0Sqr - dSqr);\n      const dr = Math.sqrt(Math.max(0, lt * lt - dSqr));\n      const t = (r0 - dr) / Math.sqrt(lSqr);\n\n      coord = vec3.lerp([], coord0, coord1, t);\n    }\n    const [X, Y, Z] = this.unprojectPosition(coord);\n\n    if (Number.isFinite(z)) {\n      return [X, Y, Z];\n    }\n    return Number.isFinite(targetZ) ? [X, Y, targetZ as number] : [X, Y];\n  }\n\n  projectPosition(xyz: number[]): [number, number, number] {\n    const [lng, lat, Z = 0] = xyz;\n    const lambda = lng * DEGREES_TO_RADIANS;\n    const phi = lat * DEGREES_TO_RADIANS;\n    const cosPhi = Math.cos(phi);\n    const D = (Z / EARTH_RADIUS + 1) * GLOBE_RADIUS;\n\n    return [Math.sin(lambda) * cosPhi * D, -Math.cos(lambda) * cosPhi * D, Math.sin(phi) * D];\n  }\n\n  unprojectPosition(xyz: number[]): [number, number, number] {\n    const [x, y, z] = xyz;\n    const D = vec3.len(xyz);\n    const phi = Math.asin(z / D);\n    const lambda = Math.atan2(x, -y);\n\n    const lng = lambda * RADIANS_TO_DEGREES;\n    const lat = phi * RADIANS_TO_DEGREES;\n    const Z = (D / GLOBE_RADIUS - 1) * EARTH_RADIUS;\n    return [lng, lat, Z];\n  }\n\n  projectFlat(xyz: number[]): [number, number] {\n    return xyz as [number, number];\n  }\n\n  unprojectFlat(xyz: number[]): [number, number] {\n    return xyz as [number, number];\n  }\n\n  panByPosition(coords: number[], pixel: number[]): GlobeViewportOptions {\n    const fromPosition = this.unproject(pixel);\n    return {\n      longitude: coords[0] - fromPosition[0] + this.longitude,\n      latitude: coords[1] - fromPosition[1] + this.latitude\n    };\n  }\n}\n\nfunction transformVector(matrix: number[], vector: number[]): number[] {\n  const result = vec4.transformMat4([], vector, matrix);\n  vec4.scale(result, result, 1 / result[3]);\n  return result;\n}\n"],"file":"globe-viewport.js"}