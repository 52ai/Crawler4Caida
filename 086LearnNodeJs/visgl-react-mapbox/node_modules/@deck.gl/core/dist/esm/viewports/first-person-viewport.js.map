{"version":3,"sources":["../../../src/viewports/first-person-viewport.ts"],"names":["Viewport","getMeterZoom","Matrix4","_SphericalCoordinates","SphericalCoordinates","FirstPersonViewport","constructor","props","longitude","latitude","modelMatrix","bearing","pitch","up","spherical","dir","toVector3","normalize","center","transformAsVector","zoom","Number","isFinite","scale","Math","pow","viewMatrix","lookAt","eye"],"mappings":";AAAA,OAAOA,QAAP,MAAqB,uBAArB;AACA,SAAQC,YAAR,QAA2B,uBAA3B;AACA,SAAQC,OAAR,EAAiBC,qBAAqB,IAAIC,oBAA1C,QAAqE,eAArE;AAuCA,eAAe,MAAMC,mBAAN,SAAkCL,QAAlC,CAA2C;AAIxDM,EAAAA,WAAW,CAACC,KAAD,EAAoC;AAE7C,UAAM;AAACC,MAAAA,SAAD;AAAYC,MAAAA,QAAZ;AAAsBC,MAAAA,WAAtB;AAAmCC,MAAAA,OAAO,GAAG,CAA7C;AAAgDC,MAAAA,KAAK,GAAG,CAAxD;AAA2DC,MAAAA,EAAE,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP;AAAhE,QAA6EN,KAAnF;AAGA,UAAMO,SAAS,GAAG,IAAIV,oBAAJ,CAAyB;AACzCO,MAAAA,OADyC;AAGzCC,MAAAA,KAAK,EAAEA,KAAK,KAAK,CAAC,EAAX,GAAgB,MAAhB,GAAyB,KAAKA;AAHI,KAAzB,CAAlB;AAKA,UAAMG,GAAG,GAAGD,SAAS,CAACE,SAAV,GAAsBC,SAAtB,EAAZ;AAGA,UAAMC,MAAM,GAAGR,WAAW,GAAG,IAAIR,OAAJ,CAAYQ,WAAZ,EAAyBS,iBAAzB,CAA2CJ,GAA3C,CAAH,GAAqDA,GAA/E;AAGA,UAAMK,IAAI,GAAGC,MAAM,CAACC,QAAP,CAAgBb,QAAhB,IAA4BR,YAAY,CAAC;AAACQ,MAAAA,QAAQ,EAAEA;AAAX,KAAD,CAAxC,GAA2E,CAAxF;AACA,UAAMc,KAAK,GAAGC,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYL,IAAZ,CAAd;AACA,UAAMM,UAAU,GAAG,IAAIxB,OAAJ,GAAcyB,MAAd,CAAqB;AAACC,MAAAA,GAAG,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAN;AAAiBV,MAAAA,MAAjB;AAAyBL,MAAAA;AAAzB,KAArB,EAAmDU,KAAnD,CAAyDA,KAAzD,CAAnB;AAEA,UAAM,EACJ,GAAGhB,KADC;AAEJa,MAAAA,IAFI;AAGJM,MAAAA;AAHI,KAAN;;AApB6C;;AAAA;;AA0B7C,SAAKjB,QAAL,GAAgBA,QAAhB;AACA,SAAKD,SAAL,GAAiBA,SAAjB;AACD;;AAhCuD","sourcesContent":["import Viewport from '../viewports/viewport';\nimport {getMeterZoom} from '@math.gl/web-mercator';\nimport {Matrix4, _SphericalCoordinates as SphericalCoordinates} from '@math.gl/core';\n\nexport type FirstPersonViewportOptions = {\n  /** Name of the viewport */\n  id?: string;\n  /** Left offset from the canvas edge, in pixels */\n  x?: number;\n  /** Top offset from the canvas edge, in pixels */\n  y?: number;\n  /** Viewport width in pixels */\n  width?: number;\n  /** Viewport height in pixels */\n  height?: number;\n  /** Longitude of the camera, in the geospatial case. */\n  longitude?: number;\n  /** Latitude of the camera, in the geospatial case. */\n  latitude?: number;\n  /** Meter offsets of the camera from the lng-lat anchor point. Default `[0, 0, 0]`. */\n  position?: [number, number, number];\n  /** Bearing (heading) of the camera in degrees. Default `0` (north). */\n  bearing?: number;\n  /** Pitch (tilt) of the camera in degrees. Default `0` (horizontal). */\n  pitch?: number;\n  /** Transform applied to the camera position and direction */\n  modelMatrix?: number[] | null;\n  /** Custom projection matrix */\n  projectionMatrix?: number[];\n  /** The up direction, default positive z axis. */\n  up?: [number, number, number];\n  /** Field of view covered by camera, in degrees. Default `75`. */\n  fovy?: number;\n  /** Distance of near clipping plane. Default `0.1`. */\n  near?: number;\n  /** Distance of far clipping plane. Default `1000`. */\n  far?: number;\n  /** Modifier of viewport scale. Corresponds to the number of pixels per meter. Default `1`. */\n  focalDistance?: number;\n};\n\nexport default class FirstPersonViewport extends Viewport {\n  longitude?: number;\n  latitude?: number;\n\n  constructor(props: FirstPersonViewportOptions) {\n    // TODO - push direction handling into Matrix4.lookAt\n    const {longitude, latitude, modelMatrix, bearing = 0, pitch = 0, up = [0, 0, 1]} = props;\n\n    // Always calculate direction from bearing and pitch\n    const spherical = new SphericalCoordinates({\n      bearing,\n      // Avoid \"pixel project matrix not invertible\" error\n      pitch: pitch === -90 ? 0.0001 : 90 + pitch\n    });\n    const dir = spherical.toVector3().normalize();\n\n    // Direction is relative to model coordinates, of course\n    const center = modelMatrix ? new Matrix4(modelMatrix).transformAsVector(dir) : dir;\n\n    // Just the direction. All the positioning is done in viewport.js\n    const zoom = Number.isFinite(latitude) ? getMeterZoom({latitude: latitude as number}) : 0;\n    const scale = Math.pow(2, zoom);\n    const viewMatrix = new Matrix4().lookAt({eye: [0, 0, 0], center, up}).scale(scale);\n\n    super({\n      ...props,\n      zoom,\n      viewMatrix\n    });\n\n    this.latitude = latitude;\n    this.longitude = longitude;\n  }\n}\n"],"file":"first-person-viewport.js"}