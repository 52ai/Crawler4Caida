{"version":3,"sources":["../../../src/utils/math-utils.ts"],"names":["typedArrayManager","Vector3","createMat4","mod","value","divisor","modulus","getCameraPosition","viewMatrixInverse","getFrustumPlanes","viewProjectionMatrix","left","getFrustumPlane","right","bottom","top","near","far","scratchVector","a","b","c","d","set","L","len","distance","normal","fp64LowPart","x","Math","fround","scratchArray","toDoublePrecisionArray","typedArray","options","size","startIndex","endIndex","undefined","length","count","allocate","type","Float32Array","sourceIndex","targetIndex","j","subarray"],"mappings":"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","sourcesContent":["// Extensions to math.gl library. Intended to be folded back.\nimport typedArrayManager from './typed-array-manager';\nimport {Vector3, NumericArray} from '@math.gl/core';\n\nimport type {Matrix4} from '@math.gl/core';\n\n// Helper, avoids low-precision 32 bit matrices from gl-matrix mat4.create()\nexport function createMat4(): number[] {\n  return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n}\n\nexport function mod(value: number, divisor: number): number {\n  const modulus = value % divisor;\n  return modulus < 0 ? divisor + modulus : modulus;\n}\n\n// Extract camera vectors (move to math library?)\nexport function getCameraPosition(\n  viewMatrixInverse: Matrix4 | NumericArray\n): [number, number, number] {\n  // Read the translation from the inverse view matrix\n  return [viewMatrixInverse[12], viewMatrixInverse[13], viewMatrixInverse[14]];\n}\n\nexport type FrustumPlane = {\n  distance: number;\n  normal: Vector3;\n};\n\n// https://www.gamedevs.org/uploads/fast-extraction-viewing-frustum-planes-from-world-view-projection-matrix.pdf\nexport function getFrustumPlanes(viewProjectionMatrix: Matrix4 | NumericArray): {\n  left: FrustumPlane;\n  right: FrustumPlane;\n  top: FrustumPlane;\n  bottom: FrustumPlane;\n  near: FrustumPlane;\n  far: FrustumPlane;\n} {\n  return {\n    left: getFrustumPlane(\n      viewProjectionMatrix[3] + viewProjectionMatrix[0],\n      viewProjectionMatrix[7] + viewProjectionMatrix[4],\n      viewProjectionMatrix[11] + viewProjectionMatrix[8],\n      viewProjectionMatrix[15] + viewProjectionMatrix[12]\n    ),\n    right: getFrustumPlane(\n      viewProjectionMatrix[3] - viewProjectionMatrix[0],\n      viewProjectionMatrix[7] - viewProjectionMatrix[4],\n      viewProjectionMatrix[11] - viewProjectionMatrix[8],\n      viewProjectionMatrix[15] - viewProjectionMatrix[12]\n    ),\n    bottom: getFrustumPlane(\n      viewProjectionMatrix[3] + viewProjectionMatrix[1],\n      viewProjectionMatrix[7] + viewProjectionMatrix[5],\n      viewProjectionMatrix[11] + viewProjectionMatrix[9],\n      viewProjectionMatrix[15] + viewProjectionMatrix[13]\n    ),\n    top: getFrustumPlane(\n      viewProjectionMatrix[3] - viewProjectionMatrix[1],\n      viewProjectionMatrix[7] - viewProjectionMatrix[5],\n      viewProjectionMatrix[11] - viewProjectionMatrix[9],\n      viewProjectionMatrix[15] - viewProjectionMatrix[13]\n    ),\n    near: getFrustumPlane(\n      viewProjectionMatrix[3] + viewProjectionMatrix[2],\n      viewProjectionMatrix[7] + viewProjectionMatrix[6],\n      viewProjectionMatrix[11] + viewProjectionMatrix[10],\n      viewProjectionMatrix[15] + viewProjectionMatrix[14]\n    ),\n    far: getFrustumPlane(\n      viewProjectionMatrix[3] - viewProjectionMatrix[2],\n      viewProjectionMatrix[7] - viewProjectionMatrix[6],\n      viewProjectionMatrix[11] - viewProjectionMatrix[10],\n      viewProjectionMatrix[15] - viewProjectionMatrix[14]\n    )\n  };\n}\n\nconst scratchVector = new Vector3();\n\nfunction getFrustumPlane(a: number, b: number, c: number, d: number): FrustumPlane {\n  scratchVector.set(a, b, c);\n  const L = scratchVector.len();\n  return {distance: d / L, normal: new Vector3(-a / L, -b / L, -c / L)};\n}\n\n/**\n * Calculate the low part of a WebGL 64 bit float\n * @param x {number} - the input float number\n * @returns {number} - the lower 32 bit of the number\n */\nexport function fp64LowPart(x: number): number {\n  return x - Math.fround(x);\n}\n\nlet scratchArray;\n\n/**\n * Split a Float64Array into a double-length Float32Array\n * @param typedArray\n * @param options\n * @param options.size  - per attribute size\n * @param options.startIndex - start index in the source array\n * @param options.endIndex  - end index in the source array\n * @returns {} - high part, low part for each attribute:\n    [1xHi, 1yHi, 1zHi, 1xLow, 1yLow, 1zLow, 2xHi, ...]\n */\nexport function toDoublePrecisionArray(\n  typedArray: Float64Array,\n  options: {size?: number; startIndex?: number; endIndex?: number}\n): Float32Array {\n  const {size = 1, startIndex = 0} = options;\n\n  const endIndex = options.endIndex !== undefined ? options.endIndex : typedArray.length;\n\n  const count = (endIndex - startIndex) / size;\n  scratchArray = typedArrayManager.allocate(scratchArray, count, {\n    type: Float32Array,\n    size: size * 2\n  });\n\n  let sourceIndex = startIndex;\n  let targetIndex = 0;\n  while (sourceIndex < endIndex) {\n    for (let j = 0; j < size; j++) {\n      const value = typedArray[sourceIndex++];\n      scratchArray[targetIndex + j] = value;\n      scratchArray[targetIndex + j + size] = fp64LowPart(value);\n    }\n    targetIndex += size * 2;\n  }\n\n  return scratchArray.subarray(0, count * size * 2);\n}\n"],"file":"math-utils.js"}