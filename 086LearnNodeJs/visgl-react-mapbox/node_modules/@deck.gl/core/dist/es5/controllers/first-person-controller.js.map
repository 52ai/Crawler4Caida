{"version":3,"sources":["../../../src/controllers/first-person-controller.ts"],"names":["MOVEMENT_SPEED","FirstPersonState","options","width","height","position","bearing","pitch","longitude","latitude","maxPitch","minPitch","startRotatePos","startBearing","startPitch","startZoomPosition","pos","_getUpdatedState","getViewportProps","deltaAngleX","deltaAngleY","getState","undefined","newRotation","deltaScaleX","deltaScaleY","scale","direction","getDirection","_move","Math","log2","speed","rotateZ","radians","PI","negate","zoom","viewState","fromProps","props","abs","fromPosition","delta","Vector3","add","use2D","spherical","SphericalCoordinates","toVector3","normalize","newProps","ViewState","FirstPersonController","transitionDuration","transitionInterpolator","LinearInterpolator","Controller"],"mappings":"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","sourcesContent":["import Controller from './controller';\nimport ViewState from './view-state';\nimport {mod} from '../utils/math-utils';\nimport LinearInterpolator from '../transitions/linear-interpolator';\n\nimport {Vector3, _SphericalCoordinates as SphericalCoordinates, clamp} from '@math.gl/core';\n\nconst MOVEMENT_SPEED = 20;\n\ntype FirstPersonStateProps = {\n  width: number;\n  height: number;\n\n  position?: number[];\n  bearing?: number;\n  pitch?: number;\n\n  // Geospatial anchor\n  longitude?: number | null;\n  latitude?: number | null;\n\n  maxPitch?: number;\n  minPitch?: number;\n};\n\ntype FirstPersonStateInternal = {\n  startRotatePos?: [number, number];\n  startBearing?: number;\n  startPitch?: number;\n  startZoomPosition?: number[];\n};\n\nclass FirstPersonState extends ViewState<\n  FirstPersonState,\n  FirstPersonStateProps,\n  FirstPersonStateInternal\n> {\n  constructor(options: FirstPersonStateProps & FirstPersonStateInternal) {\n    const {\n      /* Viewport arguments */\n      width, // Width of viewport\n      height, // Height of viewport\n\n      // Position and orientation\n      position = [0, 0, 0], // typically in meters from anchor point\n\n      bearing = 0, // Rotation around y axis\n      pitch = 0, // Rotation around x axis\n\n      // Geospatial anchor\n      longitude = null,\n      latitude = null,\n\n      maxPitch = 90,\n      minPitch = -90,\n\n      // Model state when the rotate operation first started\n      startRotatePos,\n      startBearing,\n      startPitch,\n      startZoomPosition\n    } = options;\n\n    super(\n      {\n        width,\n        height,\n        position,\n        bearing,\n        pitch,\n        longitude,\n        latitude,\n        maxPitch,\n        minPitch\n      },\n      {\n        startRotatePos,\n        startBearing,\n        startPitch,\n        startZoomPosition\n      }\n    );\n  }\n\n  /* Public API */\n\n  /**\n   * Start panning\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  panStart(): FirstPersonState {\n    return this;\n  }\n\n  /**\n   * Pan\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   */\n  pan(): FirstPersonState {\n    return this;\n  }\n\n  /**\n   * End panning\n   * Must call if `panStart()` was called\n   */\n  panEnd(): FirstPersonState {\n    return this;\n  }\n\n  /**\n   * Start rotating\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  rotateStart({pos}: {pos: [number, number]}): FirstPersonState {\n    return this._getUpdatedState({\n      startRotatePos: pos,\n      startBearing: this.getViewportProps().bearing,\n      startPitch: this.getViewportProps().pitch\n    });\n  }\n\n  /**\n   * Rotate\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   */\n  rotate({\n    pos,\n    deltaAngleX = 0,\n    deltaAngleY = 0\n  }: {\n    pos?: [number, number];\n    deltaAngleX?: number;\n    deltaAngleY: number;\n  }): FirstPersonState {\n    const {startRotatePos, startBearing, startPitch} = this.getState();\n    const {width, height} = this.getViewportProps();\n\n    if (!startRotatePos || startBearing === undefined || startPitch === undefined) {\n      return this;\n    }\n\n    let newRotation;\n    if (pos) {\n      const deltaScaleX = (pos[0] - startRotatePos[0]) / width;\n      const deltaScaleY = (pos[1] - startRotatePos[1]) / height;\n      newRotation = {\n        bearing: startBearing - deltaScaleX * 180,\n        pitch: startPitch - deltaScaleY * 90\n      };\n    } else {\n      newRotation = {\n        bearing: startBearing - deltaAngleX,\n        pitch: startPitch - deltaAngleY\n      };\n    }\n\n    return this._getUpdatedState(newRotation);\n  }\n\n  /**\n   * End rotating\n   * Must call if `rotateStart()` was called\n   */\n  rotateEnd(): FirstPersonState {\n    return this._getUpdatedState({\n      startRotatePos: null,\n      startBearing: null,\n      startPitch: null\n    });\n  }\n\n  /**\n   * Start zooming\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  zoomStart(): FirstPersonState {\n    return this._getUpdatedState({\n      startZoomPosition: this.getViewportProps().position\n    });\n  }\n\n  /**\n   * Zoom\n   * @param {[Number, Number]} pos - position on screen where the current center is\n   * @param {[Number, Number]} startPos - the center position at\n   *   the start of the operation. Must be supplied of `zoomStart()` was not called\n   * @param {Number} scale - a number between [0, 1] specifying the accumulated\n   *   relative scale.\n   */\n  zoom({scale}: {scale: number}): FirstPersonState {\n    let {startZoomPosition} = this.getState();\n    if (!startZoomPosition) {\n      startZoomPosition = this.getViewportProps().position;\n    }\n\n    const direction = this.getDirection();\n    return this._move(direction, Math.log2(scale) * MOVEMENT_SPEED, startZoomPosition);\n  }\n\n  /**\n   * End zooming\n   * Must call if `zoomStart()` was called\n   */\n  zoomEnd(): FirstPersonState {\n    return this._getUpdatedState({\n      startZoomPosition: null\n    });\n  }\n\n  moveLeft(speed: number = MOVEMENT_SPEED): FirstPersonState {\n    const direction = this.getDirection(true);\n    return this._move(direction.rotateZ({radians: Math.PI / 2}), speed);\n  }\n\n  moveRight(speed: number = MOVEMENT_SPEED): FirstPersonState {\n    const direction = this.getDirection(true);\n    return this._move(direction.rotateZ({radians: -Math.PI / 2}), speed);\n  }\n\n  // forward\n  moveUp(speed: number = MOVEMENT_SPEED): FirstPersonState {\n    const direction = this.getDirection(true);\n    return this._move(direction, speed);\n  }\n\n  // backward\n  moveDown(speed: number = MOVEMENT_SPEED): FirstPersonState {\n    const direction = this.getDirection(true);\n    return this._move(direction.negate(), speed);\n  }\n\n  rotateLeft(speed: number = 15): FirstPersonState {\n    return this._getUpdatedState({\n      bearing: this.getViewportProps().bearing - speed\n    });\n  }\n\n  rotateRight(speed: number = 15): FirstPersonState {\n    return this._getUpdatedState({\n      bearing: this.getViewportProps().bearing + speed\n    });\n  }\n\n  rotateUp(speed: number = 10): FirstPersonState {\n    return this._getUpdatedState({\n      pitch: this.getViewportProps().pitch + speed\n    });\n  }\n\n  rotateDown(speed: number = 10): FirstPersonState {\n    return this._getUpdatedState({\n      pitch: this.getViewportProps().pitch - speed\n    });\n  }\n\n  zoomIn(speed: number = 2): FirstPersonState {\n    return this.zoom({scale: speed});\n  }\n\n  zoomOut(speed: number = 2): FirstPersonState {\n    return this.zoom({scale: 1 / speed});\n  }\n\n  // shortest path between two view states\n  shortestPathFrom(viewState: FirstPersonState) {\n    const fromProps = viewState.getViewportProps();\n    const props = {...this.getViewportProps()};\n    const {bearing, longitude} = props;\n\n    if (Math.abs(bearing - fromProps.bearing) > 180) {\n      props.bearing = bearing < 0 ? bearing + 360 : bearing - 360;\n    }\n    if (\n      longitude !== null &&\n      fromProps.longitude !== null &&\n      Math.abs(longitude - fromProps.longitude) > 180\n    ) {\n      props.longitude = longitude < 0 ? longitude + 360 : longitude - 360;\n    }\n    return props;\n  }\n\n  /* Private methods */\n  _move(\n    direction: Vector3,\n    speed: number,\n    fromPosition: number[] = this.getViewportProps().position\n  ) {\n    const delta = direction.scale(speed);\n    return this._getUpdatedState({\n      position: new Vector3(fromPosition).add(delta)\n    });\n  }\n\n  getDirection(use2D: boolean = false): Vector3 {\n    const spherical = new SphericalCoordinates({\n      bearing: this.getViewportProps().bearing,\n      pitch: use2D ? 90 : 90 + this.getViewportProps().pitch\n    });\n    const direction = spherical.toVector3().normalize();\n    return direction;\n  }\n\n  _getUpdatedState(newProps: Record<string, any>): FirstPersonState {\n    // Update _viewportProps\n    return new FirstPersonState({...this.getViewportProps(), ...this.getState(), ...newProps});\n  }\n\n  // Apply any constraints (mathematical or defined by _viewportProps) to map state\n  applyConstraints(props: Required<FirstPersonStateProps>): Required<FirstPersonStateProps> {\n    // Ensure pitch and zoom are within specified range\n    const {pitch, maxPitch, minPitch, longitude, bearing} = props;\n    props.pitch = clamp(pitch, minPitch, maxPitch);\n\n    // Normalize degrees\n    if (longitude !== null && (longitude < -180 || longitude > 180)) {\n      props.longitude = mod(longitude + 180, 360) - 180;\n    }\n    if (bearing < -180 || bearing > 180) {\n      props.bearing = mod(bearing + 180, 360) - 180;\n    }\n\n    return props;\n  }\n}\n\nexport default class FirstPersonController extends Controller<FirstPersonState> {\n  ControllerState = FirstPersonState;\n\n  transition = {\n    transitionDuration: 300,\n    transitionInterpolator: new LinearInterpolator(['position', 'pitch', 'bearing'])\n  };\n}\n"],"file":"first-person-controller.js"}