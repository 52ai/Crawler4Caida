{"version":3,"sources":["../../../src/controllers/controller.ts"],"names":["NO_TRANSITION_PROPS","transitionDuration","DEFAULT_INERTIA","INERTIA_EASING","t","EVENT_TYPES","WHEEL","PAN","PINCH","TRIPLE_PAN","DOUBLE_TAP","KEYBOARD","pinchEventWorkaround","Controller","opts","isDragging","transitionManager","TransitionManager","getControllerState","props","ControllerState","onViewStateChange","_onTransition","bind","onStateChange","_setInteractionState","handleEvent","eventManager","makeViewport","customEvents","toggleEvents","_customEvents","setProps","eventName","_events","off","finalize","event","_controllerState","undefined","eventStartBlocked","_eventStartBlocked","type","_onPanStart","_onPan","_onPanEnd","_onPinchStart","_onPinch","_onPinchEnd","_onTriplePanStart","_onTriplePan","_onTriplePanEnd","_onDoubleTap","_onWheel","_onKeyDown","state","x","y","offsetCenter","pos","width","height","handled","inside","stopPropagation","srcEvent","Boolean","metaKey","altKey","ctrlKey","shiftKey","_interactionState","timeout","timer","setTimeout","dragMode","transitionInterpolator","_getTransitionProps","processViewStateChange","inertia","Number","isFinite","scrollZoom","dragPan","dragRotate","doubleClickZoom","touchZoom","touchRotate","keyboard","isInteractive","updateTransition","eventNames","enabled","forEach","on","newControllerState","extraProps","interactionState","viewState","getViewportProps","changed","controllerState","getState","oldViewState","params","newStates","Object","assign","getCenter","isPointInBounds","alternateMode","isFunctionKeyPressed","rightButton","invertPan","_panMove","updateViewport","_onPanMove","_onPanRotate","_onPanMoveEnd","_onPanRotateEnd","pan","isPanning","velocity","endPos","velocityX","velocityY","panEnd","transitionEasing","rotate","isRotating","rotateEnd","preventDefault","speed","smooth","delta","scale","Math","exp","abs","zoom","around","isZooming","rotateStart","deltaX","blockEvents","zoomStart","_startPinchRotation","rotation","_lastPinchEvent","deltaAngleX","z","log2","velocityZ","deltaTime","endScale","pow","zoomEnd","isZoomOut","funcKey","zoomSpeed","moveSpeed","rotateSpeedX","rotateSpeedY","code","zoomOut","zoomIn","rotateLeft","moveLeft","rotateRight","moveRight","rotateUp","moveUp","rotateDown","moveDown","transition","LinearInterpolator"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 Uber Technologies, Inc.\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* eslint-disable max-statements, complexity */\nimport TransitionManager, {TransitionProps} from './transition-manager';\nimport LinearInterpolator from '../transitions/linear-interpolator';\nimport {IViewState} from './view-state';\nimport {ConstructorOf} from '../types/types';\n\nimport type Viewport from '../viewports/viewport';\n\nimport type {EventManager, MjolnirEvent, MjolnirGestureEvent, MjolnirWheelEvent, MjolnirKeyEvent} from 'mjolnir.js';\nimport type {Timeline} from '@luma.gl/core';\n\nconst NO_TRANSITION_PROPS = {\n  transitionDuration: 0\n} as const;\n\nconst DEFAULT_INERTIA = 300;\nconst INERTIA_EASING = t => 1 - (1 - t) * (1 - t);\n\nconst EVENT_TYPES = {\n  WHEEL: ['wheel'],\n  PAN: ['panstart', 'panmove', 'panend'],\n  PINCH: ['pinchstart', 'pinchmove', 'pinchend'],\n  TRIPLE_PAN: ['tripanstart', 'tripanmove', 'tripanend'],\n  DOUBLE_TAP: ['doubletap'],\n  KEYBOARD: ['keydown']\n} as const;\n\n/** Configuration of how user input is handled */\nexport type ControllerOptions = {\n  /** Enable zooming with mouse wheel. Default `true`. */\n  scrollZoom?: boolean | {\n    /** Scaler that translates wheel delta to the change of viewport scale. Default `0.01`. */\n    speed?: number;\n    /** Smoothly transition to the new zoom. If enabled, will provide a slightly lagged but smoother experience. Default `false`. */\n    smooth?: boolean\n  };\n  /** Enable panning with pointer drag. Default `true` */\n  dragPan?: boolean;\n  /** Enable rotating with pointer drag. Default `true` */\n  dragRotate?: boolean;\n  /** Enable zooming with double click. Default `true` */\n  doubleClickZoom?: boolean;\n  /** Enable zooming with multi-touch. Default `true` */\n  touchZoom?: boolean;\n  /** Enable rotating with multi-touch. Use two-finger rotating gesture for horizontal and three-finger swiping gesture for vertical rotation. Default `false` */\n  touchRotate?: boolean;\n  /** Enable interaction with keyboard. Default `true`. */\n  keyboard?:\n    | boolean\n    | {\n        /** Speed of zoom using +/- keys. Default `2` */\n        zoomSpeed?: number;\n        /** Speed of movement using arrow keys, in pixels. */\n        moveSpeed?: number;\n        /** Speed of rotation using shift + left/right arrow keys, in degrees. Default 15. */\n        rotateSpeedX?: number;\n        /** Speed of rotation using shift + up/down arrow keys, in degrees. Default 10. */\n        rotateSpeedY?: number;\n      };\n  /** Drag behavior without pressing function keys, one of `pan` and `rotate`. */\n  dragMode?: 'pan' | 'rotate';\n  /** Enable inertia after panning/pinching. If a number is provided, indicates the duration of time over which the velocity reduces to zero, in milliseconds. Default `false`. */\n  inertia?: boolean | number;\n};\n\nexport type ControllerProps = {\n  /** Identifier of the controller */\n  id: string;\n  /** Viewport x position */\n  x: number;\n  /** Viewport y position */\n  y: number;\n  /** Viewport width */\n  width: number;\n  /** Viewport height */\n  height: number;\n} & ControllerOptions & TransitionProps;\n\n/** The state of a controller */\nexport type InteractionState = {\n  /** If the view state is in transition */\n  inTransition?: boolean;\n  /** If the user is dragging */\n  isDragging?: boolean;\n  /** If the view is being panned, either from user input or transition */\n  isPanning?: boolean;\n  /** If the view is being rotated, either from user input or transition */\n  isRotating?: boolean;\n  /** If the view is being zoomed, either from user input or transition */\n  isZooming?: boolean;\n}\n\n/** Parameters passed to the onViewStateChange callback */\nexport type ViewStateChangeParameters = {\n  /** The next view state, either from user input or transition */\n  viewState: Record<string, any>;\n  /** Object describing the nature of the view state change */\n  interactionState: InteractionState;\n  /** The current view state */\n  oldViewState?: Record<string, any>;\n}\n\nconst pinchEventWorkaround: any = {};\n\nexport default abstract class Controller<ControllerState extends IViewState<ControllerState>> {\n  abstract get ControllerState(): ConstructorOf<ControllerState>;\n  abstract get transition(): TransitionProps;\n\n  // @ts-expect-error (2564) - not assigned in the constructor\n  protected props: ControllerProps;\n  protected state: Record<string, any> = {};\n\n  protected transitionManager: TransitionManager<ControllerState>;\n  protected eventManager: EventManager;\n  protected onViewStateChange: (params: ViewStateChangeParameters) => void;\n  protected onStateChange: (state: InteractionState) => void;\n  protected makeViewport: (opts: Record<string, any>) => Viewport\n\n  private _controllerState?: ControllerState;\n  private _events: Record<string, boolean> = {};\n  private _interactionState: InteractionState = {\n    isDragging: false\n  };\n  private _customEvents: string[] = [];\n  private _eventStartBlocked: any = null;\n  private _panMove: boolean = false;\n\n  protected invertPan: boolean = false;\n  protected dragMode: 'pan' | 'rotate' = 'rotate';\n  protected inertia: number = 0;\n  protected scrollZoom: boolean | {speed?: number; smooth?: boolean} = true;\n  protected dragPan: boolean = true;\n  protected dragRotate: boolean = true;\n  protected doubleClickZoom: boolean = true;\n  protected touchZoom: boolean = true;\n  protected touchRotate: boolean = false;\n  protected keyboard:\n    | boolean\n    | {\n        zoomSpeed?: number; //  speed of zoom using +/- keys. Default 2.\n        moveSpeed?: number; //  speed of movement using arrow keys, in pixels.\n        rotateSpeedX?: number; //  speed of rotation using shift + left/right arrow keys, in degrees. Default 15.\n        rotateSpeedY?: number; //  speed of rotation using shift + up/down arrow keys, in degrees. Default 10.\n      } = true;\n\n  constructor(opts: {\n    timeline: Timeline,\n    eventManager: EventManager;\n    makeViewport: (opts: Record<string, any>) => Viewport;\n    onViewStateChange: (params: ViewStateChangeParameters) => void;\n    onStateChange: (state: InteractionState) => void;\n  }) {\n    this.transitionManager = new TransitionManager<ControllerState>({\n      ...opts,\n      getControllerState: props => new this.ControllerState(props),\n      onViewStateChange: this._onTransition.bind(this),\n      onStateChange: this._setInteractionState.bind(this)\n    });\n\n    this.handleEvent = this.handleEvent.bind(this);\n\n    this.eventManager = opts.eventManager;\n    this.onViewStateChange = opts.onViewStateChange || (() => {});\n    this.onStateChange = opts.onStateChange || (() => {});\n    this.makeViewport = opts.makeViewport;\n  }\n\n  set events(customEvents) {\n    this.toggleEvents(this._customEvents, false);\n    this.toggleEvents(customEvents, true);\n    this._customEvents = customEvents;\n    // Make sure default events are not overwritten\n    if (this.props) {\n      this.setProps(this.props);\n    }\n  }\n\n  finalize() {\n    for (const eventName in this._events) {\n      if (this._events[eventName]) {\n        // @ts-ignore (2345) event type string cannot be assifned to enum\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        this.eventManager?.off(eventName, this.handleEvent);\n      }\n    }\n    this.transitionManager.finalize();\n  }\n\n  /**\n   * Callback for events\n   */\n  handleEvent(event: MjolnirEvent) {\n    // Force recalculate controller state\n    this._controllerState = undefined;\n    const eventStartBlocked = this._eventStartBlocked;\n\n    switch (event.type) {\n      case 'panstart':\n        return eventStartBlocked ? false : this._onPanStart(event);\n      case 'panmove':\n        return this._onPan(event);\n      case 'panend':\n        return this._onPanEnd(event);\n      case 'pinchstart':\n        return eventStartBlocked ? false : this._onPinchStart(event);\n      case 'pinchmove':\n        return this._onPinch(event);\n      case 'pinchend':\n        return this._onPinchEnd(event);\n      case 'tripanstart':\n        return eventStartBlocked ? false : this._onTriplePanStart(event);\n      case 'tripanmove':\n        return this._onTriplePan(event);\n      case 'tripanend':\n        return this._onTriplePanEnd(event);\n      case 'doubletap':\n        return this._onDoubleTap(event);\n      case 'wheel':\n        return this._onWheel(event);\n      case 'keydown':\n        return this._onKeyDown(event);\n      default:\n        return false;\n    }\n  }\n\n  /* Event utils */\n  // Event object: http://hammerjs.github.io/api/#event-object\n  get controllerState(): ControllerState {\n    this._controllerState = this._controllerState || new this.ControllerState({\n      makeViewport: this.makeViewport,\n      ...this.props,\n      ...this.state\n    });\n    return this._controllerState ;\n  }\n\n  getCenter(event: MjolnirGestureEvent | MjolnirWheelEvent) : [number, number] {\n    const {x, y} = this.props;\n    const {offsetCenter} = event;\n    return [offsetCenter.x - x, offsetCenter.y - y];\n  }\n\n  isPointInBounds(pos: [number, number], event: MjolnirEvent): boolean {\n    const {width, height} = this.props;\n    if (event && event.handled) {\n      return false;\n    }\n\n    const inside = pos[0] >= 0 && pos[0] <= width && pos[1] >= 0 && pos[1] <= height;\n    if (inside && event) {\n      event.stopPropagation();\n    }\n    return inside;\n  }\n\n  isFunctionKeyPressed(event: MjolnirEvent): boolean {\n    const {srcEvent} = event;\n    return Boolean(srcEvent.metaKey || srcEvent.altKey || srcEvent.ctrlKey || srcEvent.shiftKey);\n  }\n\n  isDragging(): boolean {\n    return this._interactionState.isDragging || false;\n  }\n\n  // When a multi-touch event ends, e.g. pinch, not all pointers are lifted at the same time.\n  // This triggers a brief `pan` event.\n  // Calling this method will temporarily disable *start events to avoid conflicting transitions.\n  blockEvents(timeout: number): void {\n    /* global setTimeout */\n    const timer = setTimeout(() => {\n      if (this._eventStartBlocked === timer) {\n        this._eventStartBlocked = null;\n      }\n    }, timeout);\n    this._eventStartBlocked = timer;\n  }\n\n  /**\n   * Extract interactivity options\n   */\n  setProps(props: ControllerProps) {\n    if (props.dragMode) {\n      this.dragMode = props.dragMode;\n    }\n    this.props = props;\n\n    if (!('transitionInterpolator' in props)) {\n      // Add default transition interpolator\n      props.transitionInterpolator = this._getTransitionProps().transitionInterpolator;\n    }\n\n    this.transitionManager.processViewStateChange(props);\n\n    const {inertia} = props;\n    this.inertia = Number.isFinite(inertia) ? (inertia as number) : (inertia === true ? DEFAULT_INERTIA : 0);\n\n    // TODO - make sure these are not reset on every setProps\n    const {\n      scrollZoom = true,\n      dragPan = true,\n      dragRotate = true,\n      doubleClickZoom = true,\n      touchZoom = true,\n      touchRotate = false,\n      keyboard = true\n    } = props;\n\n    // Register/unregister events\n    const isInteractive = Boolean(this.onViewStateChange);\n    this.toggleEvents(EVENT_TYPES.WHEEL, isInteractive && scrollZoom);\n    this.toggleEvents(EVENT_TYPES.PAN, isInteractive && (dragPan || dragRotate));\n    this.toggleEvents(EVENT_TYPES.PINCH, isInteractive && (touchZoom || touchRotate));\n    this.toggleEvents(EVENT_TYPES.TRIPLE_PAN, isInteractive && touchRotate);\n    this.toggleEvents(EVENT_TYPES.DOUBLE_TAP, isInteractive && doubleClickZoom);\n    this.toggleEvents(EVENT_TYPES.KEYBOARD, isInteractive && keyboard);\n\n    // Interaction toggles\n    this.scrollZoom = scrollZoom;\n    this.dragPan = dragPan;\n    this.dragRotate = dragRotate;\n    this.doubleClickZoom = doubleClickZoom;\n    this.touchZoom = touchZoom;\n    this.touchRotate = touchRotate;\n    this.keyboard = keyboard;\n  }\n\n  updateTransition() {\n    this.transitionManager.updateTransition();\n  }\n\n  toggleEvents(eventNames, enabled) {\n    if (this.eventManager) {\n      eventNames.forEach(eventName => {\n        if (this._events[eventName] !== enabled) {\n          this._events[eventName] = enabled;\n          if (enabled) {\n            // eslint-disable-next-line @typescript-eslint/unbound-method\n            this.eventManager.on(eventName, this.handleEvent);\n          } else {\n            // eslint-disable-next-line @typescript-eslint/unbound-method\n            this.eventManager.off(eventName, this.handleEvent);\n          }\n        }\n      });\n    }\n  }\n\n  // Private Methods\n\n  /* Callback util */\n  // formats map state and invokes callback function\n  protected updateViewport(newControllerState: ControllerState, extraProps: Record<string, any> | null = null, interactionState: InteractionState = {}) {\n    const viewState = {...newControllerState.getViewportProps(), ...extraProps};\n\n    // TODO - to restore diffing, we need to include interactionState\n    const changed = this.controllerState !== newControllerState;\n    // const oldViewState = this.controllerState.getViewportProps();\n    // const changed = Object.keys(viewState).some(key => oldViewState[key] !== viewState[key]);\n\n    this.state = newControllerState.getState();\n    this._setInteractionState(interactionState);\n\n    if (changed) {\n      const oldViewState = this.controllerState && this.controllerState.getViewportProps();\n      if (this.onViewStateChange) {\n        this.onViewStateChange({viewState, interactionState: this._interactionState, oldViewState});\n      }\n    }\n  }\n\n  private _onTransition(params: {viewState: Record<string, any>, oldViewState: Record<string, any>}) {\n    this.onViewStateChange({...params, interactionState: this._interactionState});\n  }\n\n  private _setInteractionState(newStates: InteractionState) {\n    Object.assign(this._interactionState, newStates);\n    this.onStateChange(this._interactionState);\n  }\n\n  /* Event handlers */\n  // Default handler for the `panstart` event.\n  protected _onPanStart(event: MjolnirGestureEvent): boolean {\n    const pos = this.getCenter(event);\n    if (!this.isPointInBounds(pos, event)) {\n      return false;\n    }\n    let alternateMode = this.isFunctionKeyPressed(event) || event.rightButton || false;\n    if (this.invertPan || this.dragMode === 'pan') {\n      // invertPan is replaced by props.dragMode, keeping for backward compatibility\n      alternateMode = !alternateMode;\n    }\n    const newControllerState = this.controllerState[alternateMode ? 'panStart' : 'rotateStart']({\n      pos\n    });\n    this._panMove = alternateMode;\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {isDragging: true});\n    return true;\n  }\n\n  // Default handler for the `panmove` and `panend` event.\n  protected _onPan(event: MjolnirGestureEvent): boolean {\n    if (!this.isDragging()) {\n      return false;\n    }\n    return this._panMove ? this._onPanMove(event) : this._onPanRotate(event);\n  }\n\n  protected _onPanEnd(event: MjolnirGestureEvent): boolean {\n    if (!this.isDragging()) {\n      return false;\n    }\n    return this._panMove ? this._onPanMoveEnd(event) : this._onPanRotateEnd(event);\n  }\n\n  // Default handler for panning to move.\n  // Called by `_onPan` when panning without function key pressed.\n  protected _onPanMove(event: MjolnirGestureEvent): boolean {\n    if (!this.dragPan) {\n      return false;\n    }\n    const pos = this.getCenter(event);\n    const newControllerState = this.controllerState.pan({pos});\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n      isDragging: true,\n      isPanning: true\n    });\n    return true;\n  }\n\n  protected _onPanMoveEnd(event: MjolnirGestureEvent): boolean {\n    const {inertia} = this;\n    if (this.dragPan && inertia && event.velocity) {\n      const pos = this.getCenter(event);\n      const endPos: [number, number] = [\n        pos[0] + (event.velocityX * inertia) / 2,\n        pos[1] + (event.velocityY * inertia) / 2\n      ];\n      const newControllerState = this.controllerState.pan({pos: endPos}).panEnd();\n      this.updateViewport(\n        newControllerState,\n        {\n          ...this._getTransitionProps(),\n          transitionDuration: inertia,\n          transitionEasing: INERTIA_EASING\n        },\n        {\n          isDragging: false,\n          isPanning: true\n        }\n      );\n    } else {\n      const newControllerState = this.controllerState.panEnd();\n      this.updateViewport(newControllerState, null, {\n        isDragging: false,\n        isPanning: false\n      });\n    }\n    return true;\n  }\n\n  // Default handler for panning to rotate.\n  // Called by `_onPan` when panning with function key pressed.\n  protected _onPanRotate(event: MjolnirGestureEvent): boolean {\n    if (!this.dragRotate) {\n      return false;\n    }\n\n    const pos = this.getCenter(event);\n    const newControllerState = this.controllerState.rotate({pos});\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n      isDragging: true,\n      isRotating: true\n    });\n    return true;\n  }\n\n  protected _onPanRotateEnd(event): boolean {\n    const {inertia} = this;\n    if (this.dragRotate && inertia && event.velocity) {\n      const pos = this.getCenter(event);\n      const endPos: [number, number] = [\n        pos[0] + (event.velocityX * inertia) / 2,\n        pos[1] + (event.velocityY * inertia) / 2\n      ];\n      const newControllerState = this.controllerState.rotate({pos: endPos}).rotateEnd();\n      this.updateViewport(\n        newControllerState,\n        {\n          ...this._getTransitionProps(),\n          transitionDuration: inertia,\n          transitionEasing: INERTIA_EASING\n        },\n        {\n          isDragging: false,\n          isRotating: true\n        }\n      );\n    } else {\n      const newControllerState = this.controllerState.rotateEnd();\n      this.updateViewport(newControllerState, null, {\n        isDragging: false,\n        isRotating: false\n      });\n    }\n    return true;\n  }\n\n  // Default handler for the `wheel` event.\n  protected _onWheel(event: MjolnirWheelEvent): boolean {\n    if (!this.scrollZoom) {\n      return false;\n    }\n    event.srcEvent.preventDefault();\n\n    const pos = this.getCenter(event);\n    if (!this.isPointInBounds(pos, event)) {\n      return false;\n    }\n\n    const {speed = 0.01, smooth = false} = this.scrollZoom === true ? {} : this.scrollZoom;\n    const {delta} = event;\n\n    // Map wheel delta to relative scale\n    let scale = 2 / (1 + Math.exp(-Math.abs(delta * speed)));\n    if (delta < 0 && scale !== 0) {\n      scale = 1 / scale;\n    }\n\n    const newControllerState = this.controllerState.zoom({pos, scale});\n    this.updateViewport(\n      newControllerState,\n      {...this._getTransitionProps({around: pos}), transitionDuration: smooth ? 250 : 1},\n      {\n        isZooming: true,\n        isPanning: true\n      }\n    );\n    return true;\n  }\n\n  protected _onTriplePanStart(event: MjolnirGestureEvent): boolean {\n    const pos = this.getCenter(event);\n    if (!this.isPointInBounds(pos, event)) {\n      return false;\n    }\n    const newControllerState = this.controllerState.rotateStart({pos});\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {isDragging: true});\n    return true;\n  }\n\n  protected _onTriplePan(event: MjolnirGestureEvent): boolean {\n    if (!this.touchRotate) {\n      return false;\n    }\n    if (!this.isDragging()) {\n      return false;\n    }\n\n    const pos = this.getCenter(event);\n    pos[0] -= event.deltaX;\n\n    const newControllerState = this.controllerState.rotate({pos});\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n      isDragging: true,\n      isRotating: true\n    });\n    return true;\n  }\n\n  protected _onTriplePanEnd(event: MjolnirGestureEvent): boolean {\n    if (!this.isDragging()) {\n      return false;\n    }\n    const {inertia} = this;\n    if (this.touchRotate && inertia && event.velocityY) {\n      const pos = this.getCenter(event);\n      const endPos: [number, number] = [pos[0], (pos[1] += (event.velocityY * inertia) / 2)];\n      const newControllerState = this.controllerState.rotate({pos: endPos});\n      this.updateViewport(\n        newControllerState,\n        {\n          ...this._getTransitionProps(),\n          transitionDuration: inertia,\n          transitionEasing: INERTIA_EASING\n        },\n        {\n          isDragging: false,\n          isRotating: true\n        }\n      );\n      this.blockEvents(inertia);\n    } else {\n      const newControllerState = this.controllerState.rotateEnd();\n      this.updateViewport(newControllerState, null, {\n        isDragging: false,\n        isRotating: false\n      });\n    }\n    return true;\n  }\n\n  // Default handler for the `pinchstart` event.\n  protected _onPinchStart(event: MjolnirGestureEvent): boolean {\n    const pos = this.getCenter(event);\n    if (!this.isPointInBounds(pos, event)) {\n      return false;\n    }\n\n    const newControllerState = this.controllerState.zoomStart({pos}).rotateStart({pos});\n    // hack - hammer's `rotation` field doesn't seem to produce the correct angle\n    pinchEventWorkaround._startPinchRotation = event.rotation;\n    pinchEventWorkaround._lastPinchEvent = event;\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {isDragging: true});\n    return true;\n  }\n\n  // Default handler for the `pinchmove` and `pinchend` events.\n  protected _onPinch(event: MjolnirGestureEvent): boolean {\n    if (!this.touchZoom && !this.touchRotate) {\n      return false;\n    }\n    if (!this.isDragging()) {\n      return false;\n    }\n\n    let newControllerState = this.controllerState;\n    if (this.touchZoom) {\n      const {scale} = event;\n      const pos = this.getCenter(event);\n      newControllerState = newControllerState.zoom({pos, scale});\n    }\n    if (this.touchRotate) {\n      const {rotation} = event;\n      newControllerState = newControllerState.rotate({\n        deltaAngleX: pinchEventWorkaround._startPinchRotation - rotation\n      });\n    }\n\n    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n      isDragging: true,\n      isPanning: this.touchZoom,\n      isZooming: this.touchZoom,\n      isRotating: this.touchRotate\n    });\n    pinchEventWorkaround._lastPinchEvent = event;\n    return true;\n  }\n\n  protected _onPinchEnd(event: MjolnirGestureEvent): boolean {\n    if (!this.isDragging()) {\n      return false;\n    }\n    const {inertia} = this;\n    const {_lastPinchEvent} = pinchEventWorkaround;\n    if (this.touchZoom && inertia && _lastPinchEvent && event.scale !== _lastPinchEvent.scale) {\n      const pos = this.getCenter(event);\n      let newControllerState = this.controllerState.rotateEnd();\n      const z = Math.log2(event.scale);\n      const velocityZ =\n        (z - Math.log2(_lastPinchEvent.scale)) / (event.deltaTime - _lastPinchEvent.deltaTime);\n      const endScale = Math.pow(2, z + (velocityZ * inertia) / 2);\n      newControllerState = newControllerState.zoom({pos, scale: endScale}).zoomEnd();\n\n      this.updateViewport(\n        newControllerState,\n        {\n          ...this._getTransitionProps({around: pos}),\n          transitionDuration: inertia,\n          transitionEasing: INERTIA_EASING\n        },\n        {\n          isDragging: false,\n          isPanning: this.touchZoom,\n          isZooming: this.touchZoom,\n          isRotating: false\n        }\n      );\n      this.blockEvents(inertia);\n    } else {\n      const newControllerState = this.controllerState.zoomEnd().rotateEnd();\n      this.updateViewport(newControllerState, null, {\n        isDragging: false,\n        isPanning: false,\n        isZooming: false,\n        isRotating: false\n      });\n    }\n    pinchEventWorkaround._startPinchRotation = null;\n    pinchEventWorkaround._lastPinchEvent = null;\n    return true;\n  }\n\n  // Default handler for the `doubletap` event.\n  protected _onDoubleTap(event: MjolnirGestureEvent): boolean {\n    if (!this.doubleClickZoom) {\n      return false;\n    }\n    const pos = this.getCenter(event);\n    if (!this.isPointInBounds(pos, event)) {\n      return false;\n    }\n\n    const isZoomOut = this.isFunctionKeyPressed(event);\n\n    const newControllerState = this.controllerState.zoom({pos, scale: isZoomOut ? 0.5 : 2});\n    this.updateViewport(newControllerState, this._getTransitionProps({around: pos}), {\n      isZooming: true,\n      isPanning: true\n    });\n    this.blockEvents(100);\n    return true;\n  }\n\n  // Default handler for the `keydown` event\n  protected _onKeyDown(event: MjolnirKeyEvent): boolean {\n    if (!this.keyboard) {\n      return false;\n    }\n    const funcKey = this.isFunctionKeyPressed(event);\n    // @ts-ignore\n    const {zoomSpeed, moveSpeed, rotateSpeedX, rotateSpeedY} = this.keyboard === true ? {} : this.keyboard;\n    const {controllerState} = this;\n    let newControllerState;\n    const interactionState: InteractionState = {};\n\n    switch (event.srcEvent.code) {\n      case 'Minus':\n        newControllerState = funcKey\n          ? controllerState.zoomOut(zoomSpeed).zoomOut(zoomSpeed)\n          : controllerState.zoomOut(zoomSpeed);\n        interactionState.isZooming = true;\n        break;\n      case 'Equal':\n        newControllerState = funcKey\n          ? controllerState.zoomIn(zoomSpeed).zoomIn(zoomSpeed)\n          : controllerState.zoomIn(zoomSpeed);\n        interactionState.isZooming = true;\n        break;\n      case 'ArrowLeft':\n        if (funcKey) {\n          newControllerState = controllerState.rotateLeft(rotateSpeedX);\n          interactionState.isRotating = true;\n        } else {\n          newControllerState = controllerState.moveLeft(moveSpeed);\n          interactionState.isPanning = true;\n        }\n        break;\n      case 'ArrowRight':\n        if (funcKey) {\n          newControllerState = controllerState.rotateRight(rotateSpeedX);\n          interactionState.isRotating = true;\n        } else {\n          newControllerState = controllerState.moveRight(moveSpeed);\n          interactionState.isPanning = true;\n        }\n        break;\n      case 'ArrowUp':\n        if (funcKey) {\n          newControllerState = controllerState.rotateUp(rotateSpeedY);\n          interactionState.isRotating = true;\n        } else {\n          newControllerState = controllerState.moveUp(moveSpeed);\n          interactionState.isPanning = true;\n        }\n        break;\n      case 'ArrowDown':\n        if (funcKey) {\n          newControllerState = controllerState.rotateDown(rotateSpeedY);\n          interactionState.isRotating = true;\n        } else {\n          newControllerState = controllerState.moveDown(moveSpeed);\n          interactionState.isPanning = true;\n        }\n        break;\n      default:\n        return false;\n    }\n    this.updateViewport(newControllerState, this._getTransitionProps(), interactionState);\n    return true;\n  }\n\n  protected _getTransitionProps(opts?: any): TransitionProps {\n    const {transition} = this;\n\n    if (!transition || !transition.transitionInterpolator) {\n      return NO_TRANSITION_PROPS;\n    }\n\n    // Enables Transitions on double-tap and key-down events.\n    return opts\n      ? {\n        ...transition,\n        transitionInterpolator: new LinearInterpolator({\n          ...opts,\n          ...(transition.transitionInterpolator as LinearInterpolator).opts,\n          makeViewport: this.controllerState.makeViewport\n        })\n      }\n      : transition;\n  }\n}\n"],"file":"controller.js"}