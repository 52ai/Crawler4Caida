{"version":3,"sources":["../../../src/controllers/orthographic-controller.ts"],"names":["OrthographicState","props","zoomAxis","scale","startZoom","getViewportProps","maxZoom","minZoom","undefined","zoom","deltaZoom","Math","log2","Array","isArray","newZoomX","newZoomY","z","min","max","OrbitState","OrthographicController","transitionDuration","transitionInterpolator","LinearInterpolator","Controller"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;IAEMA,iB;;;;;AAGJ,6BAAYC,KAAZ,EAAmB;AAAA;;AAAA;AACjB,8BAAMA,KAAN;AADiB;AAGjB,UAAKC,QAAL,GAAgBD,KAAK,CAACC,QAAN,IAAkB,KAAlC;AAHiB;AAIlB;;;;WAED,iCAAsC;AAAA,UAAnBC,KAAmB,QAAnBA,KAAmB;AAAA,UAAZC,SAAY,QAAZA,SAAY;;AACpC,kCAA2B,KAAKC,gBAAL,EAA3B;AAAA,UAAOC,OAAP,yBAAOA,OAAP;AAAA,UAAgBC,OAAhB,yBAAgBA,OAAhB;;AACA,UAAIH,SAAS,KAAKI,SAAlB,EAA6B;AAC3BJ,QAAAA,SAAS,GAAG,KAAKC,gBAAL,GAAwBI,IAApC;AACD;;AACD,UAAIC,SAAS,GAAGC,IAAI,CAACC,IAAL,CAAUT,KAAV,CAAhB;;AACA,UAAIU,KAAK,CAACC,OAAN,CAAcV,SAAd,CAAJ,EAA8B;AAC5B,yBAA2BA,SAA3B;AAAA;AAAA,YAAKW,QAAL;AAAA,YAAeC,QAAf;;AACA,gBAAQ,KAAKd,QAAb;AACE,eAAK,GAAL;AAEEa,YAAAA,QAAQ,GAAG,iBAAMA,QAAQ,GAAGL,SAAjB,EAA4BH,OAA5B,EAAqCD,OAArC,CAAX;AACA;;AACF,eAAK,GAAL;AAEEU,YAAAA,QAAQ,GAAG,iBAAMA,QAAQ,GAAGN,SAAjB,EAA4BH,OAA5B,EAAqCD,OAArC,CAAX;AACA;;AACF;AAEE,gBAAIW,CAAC,GAAGN,IAAI,CAACO,GAAL,CAASH,QAAQ,GAAGL,SAApB,EAA+BM,QAAQ,GAAGN,SAA1C,CAAR;;AACA,gBAAIO,CAAC,GAAGV,OAAR,EAAiB;AACfG,cAAAA,SAAS,IAAIH,OAAO,GAAGU,CAAvB;AACD;;AACDA,YAAAA,CAAC,GAAGN,IAAI,CAACQ,GAAL,CAASJ,QAAQ,GAAGL,SAApB,EAA+BM,QAAQ,GAAGN,SAA1C,CAAJ;;AACA,gBAAIO,CAAC,GAAGX,OAAR,EAAiB;AACfI,cAAAA,SAAS,IAAIJ,OAAO,GAAGW,CAAvB;AACD;;AACDF,YAAAA,QAAQ,IAAIL,SAAZ;AACAM,YAAAA,QAAQ,IAAIN,SAAZ;AApBJ;;AAsBA,eAAO,CAACK,QAAD,EAAWC,QAAX,CAAP;AACD;;AAID,aAAO,iBAAMZ,SAAS,GAAGM,SAAlB,EAA6BH,OAA7B,EAAsCD,OAAtC,CAAP;AACD;;;EA7C6Bc,2B;;IAgDXC,sB;;;;;;;;;;;;;;;mGACDrB,iB;8FACL;AACXsB,MAAAA,kBAAkB,EAAE,GADT;AAEXC,MAAAA,sBAAsB,EAAE,IAAIC,2BAAJ,CAAuB,CAAC,QAAD,EAAW,MAAX,CAAvB;AAFb,K;4FAIgB,K;;;;;;WAE7B,wBAAe;AAEb,aAAO,KAAP;AACD;;;EAXiDC,mB","sourcesContent":["import {clamp} from '@math.gl/core';\nimport Controller from './controller';\nimport {OrbitState} from './orbit-controller';\nimport LinearInterpolator from '../transitions/linear-interpolator';\n\nclass OrthographicState extends OrbitState {\n  zoomAxis: 'X' | 'Y' | 'all';\n\n  constructor(props) {\n    super(props);\n\n    this.zoomAxis = props.zoomAxis || 'all';\n  }\n\n  _calculateNewZoom({scale, startZoom}) {\n    const {maxZoom, minZoom} = this.getViewportProps();\n    if (startZoom === undefined) {\n      startZoom = this.getViewportProps().zoom;\n    }\n    let deltaZoom = Math.log2(scale);\n    if (Array.isArray(startZoom)) {\n      let [newZoomX, newZoomY] = startZoom;\n      switch (this.zoomAxis) {\n        case 'X':\n          // Scale x only\n          newZoomX = clamp(newZoomX + deltaZoom, minZoom, maxZoom);\n          break;\n        case 'Y':\n          // Scale y only\n          newZoomY = clamp(newZoomY + deltaZoom, minZoom, maxZoom);\n          break;\n        default:\n          // Lock aspect ratio\n          let z = Math.min(newZoomX + deltaZoom, newZoomY + deltaZoom);\n          if (z < minZoom) {\n            deltaZoom += minZoom - z;\n          }\n          z = Math.max(newZoomX + deltaZoom, newZoomY + deltaZoom);\n          if (z > maxZoom) {\n            deltaZoom += maxZoom - z;\n          }\n          newZoomX += deltaZoom;\n          newZoomY += deltaZoom;\n      }\n      return [newZoomX, newZoomY];\n    }\n    // Ignore `zoomAxis`\n    // `LinearTransitionInterpolator` does not support interpolation between a number and an array\n    // So if zoom is a number (legacy use case), new zoom still has to be a number\n    return clamp(startZoom + deltaZoom, minZoom, maxZoom);\n  }\n}\n\nexport default class OrthographicController extends Controller<OrbitState> {\n  ControllerState = OrthographicState;\n  transition = {\n    transitionDuration: 300,\n    transitionInterpolator: new LinearInterpolator(['target', 'zoom'])\n  };\n  dragMode: 'pan' | 'rotate' = 'pan';\n\n  _onPanRotate() {\n    // No rotation in orthographic view\n    return false;\n  }\n}\n"],"file":"orthographic-controller.js"}