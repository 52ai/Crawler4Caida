{"version":3,"sources":["../../../src/controllers/map-controller.ts"],"names":["PITCH_MOUSE_THRESHOLD","PITCH_ACCEL","MapState","options","width","height","latitude","longitude","zoom","bearing","pitch","altitude","position","maxZoom","minZoom","maxPitch","minPitch","startPanLngLat","startZoomLngLat","startRotatePos","startBearing","startPitch","startZoom","normalize","Number","isFinite","makeViewport","pos","_getUpdatedState","_unproject","startPos","getState","viewport","getViewportProps","newProps","panByPosition","deltaAngleX","deltaAngleY","undefined","newRotation","_getNewRotation","scale","Math","log2","zoomedViewport","speed","_zoomFromCenter","_panFromCenter","viewState","fromProps","props","abs","Object","assign","offset","pan","constructor","unproject","deltaX","deltaY","centerY","startY","deltaScaleX","deltaScaleY","ViewState","MapController","transitionDuration","transitionInterpolator","LinearInterpolator","transitionProps","compare","required","oldProps","dimensionChanged","updateViewport","ControllerState","state","Controller"],"mappings":"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","sourcesContent":["import {clamp} from '@math.gl/core';\nimport Controller, {ControllerProps} from './controller';\nimport ViewState from './view-state';\nimport {normalizeViewportProps} from '@math.gl/web-mercator';\nimport assert from '../utils/assert';\n\nimport LinearInterpolator from '../transitions/linear-interpolator';\nimport type Viewport from '../viewports/viewport';\n\nconst PITCH_MOUSE_THRESHOLD = 5;\nconst PITCH_ACCEL = 1.2;\n\nexport type MapStateProps = {\n  /** Mapbox viewport properties */\n  /** The width of the viewport */\n  width: number;\n  /** The height of the viewport */\n  height: number;\n  /** The latitude at the center of the viewport */\n  latitude: number;\n  /** The longitude at the center of the viewport */\n  longitude: number;\n  /** The tile zoom level of the map. */\n  zoom: number;\n  /** The bearing of the viewport in degrees */\n  bearing?: number;\n  /** The pitch of the viewport in degrees */\n  pitch?: number;\n  /**\n   * Specify the altitude of the viewport camera\n   * Unit: map heights, default 1.5\n   * Non-public API, see https://github.com/mapbox/mapbox-gl-js/issues/1137\n   */\n  altitude?: number;\n  /** Viewport position */\n  position?: [number, number, number];\n\n  /** Viewport constraints */\n  maxZoom?: number;\n  minZoom?: number;\n  maxPitch?: number;\n  minPitch?: number;\n\n  /** Normalize viewport props to fit map height into viewport. Default `true` */\n  normalize?: boolean;\n};\n\ntype MapStateInternal = {\n  /** Interaction states, required to calculate change during transform */\n  /* The point on map being grabbed when the operation first started */\n  startPanLngLat?: [number, number];\n  /* Center of the zoom when the operation first started */\n  startZoomLngLat?: [number, number];\n  /* Pointer position when rotation started */\n  startRotatePos?: [number, number];\n  /** Bearing when current perspective rotate operation started */\n  startBearing?: number;\n  /** Pitch when current perspective rotate operation started */\n  startPitch?: number;\n  /** Zoom when current zoom operation started */\n  startZoom?: number;\n};\n\n/* Utils */\n\nexport class MapState extends ViewState<MapState, MapStateProps, MapStateInternal> {\n  makeViewport: (props: Record<string, any>) => Viewport;\n\n  constructor(\n    options: MapStateProps &\n      MapStateInternal & {\n        makeViewport: (props: Record<string, any>) => Viewport;\n      }\n  ) {\n    const {\n      /** Mapbox viewport properties */\n      /** The width of the viewport */\n      width,\n      /** The height of the viewport */\n      height,\n      /** The latitude at the center of the viewport */\n      latitude,\n      /** The longitude at the center of the viewport */\n      longitude,\n      /** The tile zoom level of the map. */\n      zoom,\n      /** The bearing of the viewport in degrees */\n      bearing = 0,\n      /** The pitch of the viewport in degrees */\n      pitch = 0,\n      /**\n       * Specify the altitude of the viewport camera\n       * Unit: map heights, default 1.5\n       * Non-public API, see https://github.com/mapbox/mapbox-gl-js/issues/1137\n       */\n      altitude = 1.5,\n      /** Viewport position */\n      position = [0, 0, 0],\n\n      /** Viewport constraints */\n      maxZoom = 20,\n      minZoom = 0,\n      maxPitch = 60,\n      minPitch = 0,\n\n      /** Interaction states, required to calculate change during transform */\n      /* The point on map being grabbed when the operation first started */\n      startPanLngLat,\n      /* Center of the zoom when the operation first started */\n      startZoomLngLat,\n      /* Pointer position when rotation started */\n      startRotatePos,\n      /** Bearing when current perspective rotate operation started */\n      startBearing,\n      /** Pitch when current perspective rotate operation started */\n      startPitch,\n      /** Zoom when current zoom operation started */\n      startZoom,\n\n      /** Normalize viewport props to fit map height into viewport */\n      normalize = true\n    } = options;\n\n    assert(Number.isFinite(longitude)); // `longitude` must be supplied\n    assert(Number.isFinite(latitude)); // `latitude` must be supplied\n    assert(Number.isFinite(zoom)); // `zoom` must be supplied\n\n    super(\n      {\n        width,\n        height,\n        latitude,\n        longitude,\n        zoom,\n        bearing,\n        pitch,\n        altitude,\n        maxZoom,\n        minZoom,\n        maxPitch,\n        minPitch,\n        normalize,\n        position\n      },\n      {\n        startPanLngLat,\n        startZoomLngLat,\n        startRotatePos,\n        startBearing,\n        startPitch,\n        startZoom\n      }\n    );\n\n    this.makeViewport = options.makeViewport;\n  }\n\n  /**\n   * Start panning\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  panStart({pos}: {pos: [number, number]}): MapState {\n    return this._getUpdatedState({\n      startPanLngLat: this._unproject(pos)\n    });\n  }\n\n  /**\n   * Pan\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   * @param {[Number, Number], optional} startPos - where the pointer grabbed at\n   *   the start of the operation. Must be supplied of `panStart()` was not called\n   */\n  pan({pos, startPos}: {pos: [number, number]; startPos?: [number, number]}): MapState {\n    const startPanLngLat = this.getState().startPanLngLat || this._unproject(startPos);\n\n    if (!startPanLngLat) {\n      return this;\n    }\n\n    const viewport = this.makeViewport(this.getViewportProps());\n    const newProps = viewport.panByPosition(startPanLngLat, pos);\n\n    return this._getUpdatedState(newProps);\n  }\n\n  /**\n   * End panning\n   * Must call if `panStart()` was called\n   */\n  panEnd(): MapState {\n    return this._getUpdatedState({\n      startPanLngLat: null\n    });\n  }\n\n  /**\n   * Start rotating\n   * @param {[Number, Number]} pos - position on screen where the center is\n   */\n  rotateStart({pos}: {pos: [number, number]}): MapState {\n    return this._getUpdatedState({\n      startRotatePos: pos,\n      startBearing: this.getViewportProps().bearing,\n      startPitch: this.getViewportProps().pitch\n    });\n  }\n\n  /**\n   * Rotate\n   * @param {[Number, Number]} pos - position on screen where the center is\n   */\n  rotate({\n    pos,\n    deltaAngleX = 0,\n    deltaAngleY = 0\n  }: {\n    pos?: [number, number];\n    deltaAngleX?: number;\n    deltaAngleY?: number;\n  }): MapState {\n    const {startRotatePos, startBearing, startPitch} = this.getState();\n\n    if (!startRotatePos || startBearing === undefined || startPitch === undefined) {\n      return this;\n    }\n    let newRotation;\n    if (pos) {\n      newRotation = this._getNewRotation(pos, startRotatePos, startPitch, startBearing);\n    } else {\n      newRotation = {\n        bearing: startBearing + deltaAngleX,\n        pitch: startPitch + deltaAngleY\n      };\n    }\n    return this._getUpdatedState(newRotation);\n  }\n\n  /**\n   * End rotating\n   * Must call if `rotateStart()` was called\n   */\n  rotateEnd(): MapState {\n    return this._getUpdatedState({\n      startBearing: null,\n      startPitch: null\n    });\n  }\n\n  /**\n   * Start zooming\n   * @param {[Number, Number]} pos - position on screen where the center is\n   */\n  zoomStart({pos}: {pos: [number, number]}): MapState {\n    return this._getUpdatedState({\n      startZoomLngLat: this._unproject(pos),\n      startZoom: this.getViewportProps().zoom\n    });\n  }\n\n  /**\n   * Zoom\n   * @param {[Number, Number]} pos - position on screen where the current center is\n   * @param {[Number, Number]} startPos - the center position at\n   *   the start of the operation. Must be supplied of `zoomStart()` was not called\n   * @param {Number} scale - a number between [0, 1] specifying the accumulated\n   *   relative scale.\n   */\n  zoom({\n    pos,\n    startPos,\n    scale\n  }: {\n    pos: [number, number];\n    startPos?: [number, number];\n    scale: number;\n  }): MapState {\n    // Make sure we zoom around the current mouse position rather than map center\n    let {startZoom, startZoomLngLat} = this.getState();\n\n    if (!startZoomLngLat) {\n      // We have two modes of zoom:\n      // scroll zoom that are discrete events (transform from the current zoom level),\n      // and pinch zoom that are continuous events (transform from the zoom level when\n      // pinch started).\n      // If startZoom state is defined, then use the startZoom state;\n      // otherwise assume discrete zooming\n      startZoom = this.getViewportProps().zoom;\n      startZoomLngLat = this._unproject(startPos) || this._unproject(pos);\n    }\n    if (!startZoomLngLat) {\n      return this;\n    }\n\n    const {maxZoom, minZoom} = this.getViewportProps();\n    let zoom = (startZoom as number) + Math.log2(scale);\n    zoom = clamp(zoom, minZoom, maxZoom);\n\n    const zoomedViewport = this.makeViewport({...this.getViewportProps(), zoom});\n\n    return this._getUpdatedState({\n      zoom,\n      ...zoomedViewport.panByPosition(startZoomLngLat, pos)\n    });\n  }\n\n  /**\n   * End zooming\n   * Must call if `zoomStart()` was called\n   */\n  zoomEnd(): MapState {\n    return this._getUpdatedState({\n      startZoomLngLat: null,\n      startZoom: null\n    });\n  }\n\n  zoomIn(speed: number = 2): MapState {\n    return this._zoomFromCenter(speed);\n  }\n\n  zoomOut(speed: number = 2): MapState {\n    return this._zoomFromCenter(1 / speed);\n  }\n\n  moveLeft(speed: number = 100): MapState {\n    return this._panFromCenter([speed, 0]);\n  }\n\n  moveRight(speed: number = 100): MapState {\n    return this._panFromCenter([-speed, 0]);\n  }\n\n  moveUp(speed: number = 100): MapState {\n    return this._panFromCenter([0, speed]);\n  }\n\n  moveDown(speed: number = 100): MapState {\n    return this._panFromCenter([0, -speed]);\n  }\n\n  rotateLeft(speed: number = 15): MapState {\n    return this._getUpdatedState({\n      bearing: this.getViewportProps().bearing - speed\n    });\n  }\n\n  rotateRight(speed: number = 15): MapState {\n    return this._getUpdatedState({\n      bearing: this.getViewportProps().bearing + speed\n    });\n  }\n\n  rotateUp(speed: number = 10): MapState {\n    return this._getUpdatedState({\n      pitch: this.getViewportProps().pitch + speed\n    });\n  }\n\n  rotateDown(speed: number = 10): MapState {\n    return this._getUpdatedState({\n      pitch: this.getViewportProps().pitch - speed\n    });\n  }\n\n  shortestPathFrom(viewState: MapState): MapStateProps {\n    // const endViewStateProps = new this.ControllerState(endProps).shortestPathFrom(startViewstate);\n    const fromProps = viewState.getViewportProps();\n    const props = {...this.getViewportProps()};\n    const {bearing, longitude} = props;\n\n    if (Math.abs(bearing - fromProps.bearing) > 180) {\n      props.bearing = bearing < 0 ? bearing + 360 : bearing - 360;\n    }\n    if (Math.abs(longitude - fromProps.longitude) > 180) {\n      props.longitude = longitude < 0 ? longitude + 360 : longitude - 360;\n    }\n    return props;\n  }\n\n  // Apply any constraints (mathematical or defined by _viewportProps) to map state\n  applyConstraints(props: Required<MapStateProps>): Required<MapStateProps> {\n    // Ensure zoom is within specified range\n    const {maxZoom, minZoom, zoom} = props;\n    props.zoom = clamp(zoom, minZoom, maxZoom);\n\n    // Ensure pitch is within specified range\n    const {maxPitch, minPitch, pitch} = props;\n    props.pitch = clamp(pitch, minPitch, maxPitch);\n\n    // Normalize viewport props to fit map height into viewport\n    const {normalize = true} = props;\n    if (normalize) {\n      Object.assign(props, normalizeViewportProps(props));\n    }\n\n    return props;\n  }\n\n  /* Private methods */\n\n  _zoomFromCenter(scale) {\n    const {width, height} = this.getViewportProps();\n    return this.zoom({\n      pos: [width / 2, height / 2],\n      scale\n    });\n  }\n\n  _panFromCenter(offset) {\n    const {width, height} = this.getViewportProps();\n    return this.pan({\n      startPos: [width / 2, height / 2],\n      pos: [width / 2 + offset[0], height / 2 + offset[1]]\n    });\n  }\n\n  _getUpdatedState(newProps): MapState {\n    // @ts-ignore\n    return new this.constructor({\n      makeViewport: this.makeViewport,\n      ...this.getViewportProps(),\n      ...this.getState(),\n      ...newProps\n    });\n  }\n\n  _unproject(pos?: [number, number]): [number, number] | undefined {\n    const viewport = this.makeViewport(this.getViewportProps());\n    // @ts-ignore\n    return pos && viewport.unproject(pos);\n  }\n\n  _getNewRotation(\n    pos: [number, number],\n    startPos: [number, number],\n    startPitch: number,\n    startBearing: number\n  ): {\n    pitch: number;\n    bearing: number;\n  } {\n    const deltaX = pos[0] - startPos[0];\n    const deltaY = pos[1] - startPos[1];\n    const centerY = pos[1];\n    const startY = startPos[1];\n    const {width, height} = this.getViewportProps();\n\n    const deltaScaleX = deltaX / width;\n    let deltaScaleY = 0;\n\n    if (deltaY > 0) {\n      if (Math.abs(height - startY) > PITCH_MOUSE_THRESHOLD) {\n        // Move from 0 to -1 as we drag upwards\n        deltaScaleY = (deltaY / (startY - height)) * PITCH_ACCEL;\n      }\n    } else if (deltaY < 0) {\n      if (startY > PITCH_MOUSE_THRESHOLD) {\n        // Move from 0 to 1 as we drag upwards\n        deltaScaleY = 1 - centerY / startY;\n      }\n    }\n    // clamp deltaScaleY to [-1, 1] so that rotation is constrained between minPitch and maxPitch.\n    // deltaScaleX does not need to be clamped as bearing does not have constraints.\n    deltaScaleY = clamp(deltaScaleY, -1, 1);\n\n    const {minPitch, maxPitch} = this.getViewportProps();\n\n    const bearing = startBearing + 180 * deltaScaleX;\n    let pitch = startPitch;\n    if (deltaScaleY > 0) {\n      // Gradually increase pitch\n      pitch = startPitch + deltaScaleY * (maxPitch - startPitch);\n    } else if (deltaScaleY < 0) {\n      // Gradually decrease pitch\n      pitch = startPitch - deltaScaleY * (minPitch - startPitch);\n    }\n\n    return {\n      pitch,\n      bearing\n    };\n  }\n}\n\nexport default class MapController extends Controller<MapState> {\n  ControllerState = MapState;\n\n  transition = {\n    transitionDuration: 300,\n    transitionInterpolator: new LinearInterpolator({\n      transitionProps: {\n        compare: ['longitude', 'latitude', 'zoom', 'bearing', 'pitch', 'position'],\n        required: ['longitude', 'latitude', 'zoom']\n      }\n    })\n  };\n\n  dragMode: 'pan' | 'rotate' = 'pan';\n\n  setProps(props: ControllerProps & MapStateProps) {\n    props.position = props.position || [0, 0, 0];\n    const oldProps = this.props;\n\n    super.setProps(props);\n\n    const dimensionChanged = !oldProps || oldProps.height !== props.height;\n    if (dimensionChanged) {\n      // Dimensions changed, normalize the props\n      this.updateViewport(\n        new this.ControllerState({\n          makeViewport: this.makeViewport,\n          ...props,\n          ...this.state\n        })\n      );\n    }\n  }\n}\n"],"file":"map-controller.js"}