{"version":3,"sources":["../../../../src/effects/lighting/sun-light.ts"],"names":["SunLight","opts","timestamp","layer","viewport","context","isGlobe","resolution","x","y","z","direction","latitude","longitude","DirectionalLight"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;;;;;IAwBqBA,Q;;;;;AAGnB,oBAAYC,IAAZ,EAAmC;AAAA;;AAAA;AACjC,8BAAMA,IAAN;AADiC;AAGjC,UAAKC,SAAL,GAAiBD,IAAI,CAACC,SAAtB;AAHiC;AAIlC;;;;WAED,iCAA6D;AAAA,UAA1CC,KAA0C,QAA1CA,KAA0C;AAC3D,UAAOC,QAAP,GAAmBD,KAAK,CAACE,OAAzB,CAAOD,QAAP;AACA,UAAME,OAAO,GAAGF,QAAQ,CAACG,UAAT,IAAuBH,QAAQ,CAACG,UAAT,GAAsB,CAA7D;;AAEA,UAAID,OAAJ,EAAa;AAEX,+BAAkB,0BAAgB,KAAKJ,SAArB,EAAgC,CAAhC,EAAmC,CAAnC,CAAlB;AAAA;AAAA,YAAOM,CAAP;AAAA,YAAUC,CAAV;AAAA,YAAaC,CAAb;;AACA,aAAKC,SAAL,GAAiB,CAACH,CAAD,EAAI,CAACE,CAAL,EAAQD,CAAR,CAAjB;AACD,OAJD,MAIO;AAEL,YAAOG,QAAP,GAA8BR,QAA9B,CAAOQ,QAAP;AAAA,YAAiBC,SAAjB,GAA8BT,QAA9B,CAAiBS,SAAjB;AACA,aAAKF,SAAL,GAAiB,0BAAgB,KAAKT,SAArB,EAAgCU,QAAhC,EAA0CC,SAA1C,CAAjB;AACD;;AAED,aAAO,IAAP;AACD;;;EAxBmCC,kC","sourcesContent":["import {DirectionalLight} from './directional-light';\nimport {getSunDirection} from '@math.gl/sun';\n\nimport type Layer from '../../lib/layer';\n\nexport type SunLightOptions = {\n  id?: string;\n  /** Light color, [r, g, b] in the 0-255 range\n   * @default [255, 255, 255]\n   */\n  color?: number[];\n  /** Light intensity, higher number is brighter\n   * @default 1.0\n   */\n  intensity?: number;\n  /**\n   * The time at which to position the sun. Either a Date object or a timestamp (milliseconds elapsed since unix time 0)\n   */\n  timestamp: number | Date;\n  /** (Experimental) render shadows casted by this light\n   * @default false\n   */\n  _shadow?: boolean;\n};\n\nexport default class SunLight extends DirectionalLight {\n  timestamp: number | Date;\n\n  constructor(opts: SunLightOptions) {\n    super(opts);\n\n    this.timestamp = opts.timestamp;\n  }\n\n  getProjectedLight({layer}: {layer: Layer}): DirectionalLight {\n    const {viewport} = layer.context;\n    const isGlobe = viewport.resolution && viewport.resolution > 0;\n\n    if (isGlobe) {\n      // Rotate vector to align with the direction of the globe projection (up at lon:0,lat:0 is [0, -1, 0])\n      const [x, y, z] = getSunDirection(this.timestamp, 0, 0);\n      this.direction = [x, -z, y];\n    } else {\n      // @ts-expect-error longitude and latitude are not defined on all viewports\n      const {latitude, longitude} = viewport;\n      this.direction = getSunDirection(this.timestamp, latitude, longitude);\n    }\n\n    return this;\n  }\n}\n"],"file":"sun-light.js"}