{"version":3,"sources":["../../../../src/shaderlib/project/project-functions.ts"],"names":["lngLatZToWorldPosition","lngLatZ","viewport","offsetMode","p","projectPosition","WebMercatorViewport","longitude","latitude","z","distanceScales","getDistanceScales","unitsPerMeter","normalizeParameters","opts","modelMatrix","coordinateOrigin","coordinateSystem","fromCoordinateSystem","fromCoordinateOrigin","COORDINATE_SYSTEM","DEFAULT","isGeospatial","LNGLAT","CARTESIAN","undefined","getWorldPosition","position","x","y","vec4","transformMat4","LNGLAT_OFFSETS","METER_OFFSETS","params","geospatialOrigin","shaderCoordinateOrigin","worldPosition","positionCommonSpace","vec3","sub"],"mappings":"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","sourcesContent":["/**\n * Projection utils\n * TODO: move to Viewport class?\n */\nimport {COORDINATE_SYSTEM} from '../../lib/constants';\nimport {getOffsetOrigin} from './viewport-uniforms';\nimport WebMercatorViewport from '../../viewports/web-mercator-viewport';\n\nimport * as vec4 from 'gl-matrix/vec4';\nimport * as vec3 from 'gl-matrix/vec3';\nimport {addMetersToLngLat} from '@math.gl/web-mercator';\n\nimport type {CoordinateSystem} from '../../lib/constants';\nimport type Viewport from '../../viewports/viewport';\nimport type {NumericArray} from '../../types/types';\n\n// In project.glsl, offset modes calculate z differently from LNG_LAT mode.\n// offset modes apply the y adjustment (unitsPerMeter2) when projecting z\n// LNG_LAT mode only use the linear scale.\nfunction lngLatZToWorldPosition(\n  lngLatZ: [number, number, number],\n  viewport: Viewport,\n  offsetMode: boolean = false\n): [number, number, number] {\n  const p = viewport.projectPosition(lngLatZ);\n\n  // TODO - avoid using instanceof\n  if (offsetMode && viewport instanceof WebMercatorViewport) {\n    const [longitude, latitude, z = 0] = lngLatZ;\n    const distanceScales = viewport.getDistanceScales([longitude, latitude]);\n    p[2] = z * distanceScales.unitsPerMeter[2];\n  }\n  return p;\n}\n\nfunction normalizeParameters(opts: {\n  viewport: Viewport;\n  coordinateSystem: CoordinateSystem;\n  coordinateOrigin: [number, number, number];\n  modelMatrix?: NumericArray | null;\n  fromCoordinateSystem?: CoordinateSystem;\n  fromCoordinateOrigin?: [number, number, number];\n}): {\n  viewport: Viewport;\n  coordinateSystem: CoordinateSystem;\n  coordinateOrigin: [number, number, number];\n  modelMatrix?: NumericArray | null;\n  fromCoordinateSystem: CoordinateSystem;\n  fromCoordinateOrigin: [number, number, number];\n} {\n  const {viewport, modelMatrix, coordinateOrigin} = opts;\n  let {coordinateSystem, fromCoordinateSystem, fromCoordinateOrigin} = opts;\n\n  if (coordinateSystem === COORDINATE_SYSTEM.DEFAULT) {\n    coordinateSystem = viewport.isGeospatial\n      ? COORDINATE_SYSTEM.LNGLAT\n      : COORDINATE_SYSTEM.CARTESIAN;\n  }\n\n  if (fromCoordinateSystem === undefined) {\n    fromCoordinateSystem = coordinateSystem;\n  }\n  if (fromCoordinateOrigin === undefined) {\n    fromCoordinateOrigin = coordinateOrigin;\n  }\n\n  return {\n    viewport,\n    coordinateSystem,\n    coordinateOrigin,\n    modelMatrix,\n    fromCoordinateSystem,\n    fromCoordinateOrigin\n  };\n}\n\n/** Get the common space position from world coordinates in the given coordinate system */\nexport function getWorldPosition(\n  position: number[],\n  {\n    viewport,\n    modelMatrix,\n    coordinateSystem,\n    coordinateOrigin,\n    offsetMode\n  }: {\n    viewport: Viewport;\n    modelMatrix?: NumericArray | null;\n    coordinateSystem: CoordinateSystem;\n    coordinateOrigin: [number, number, number];\n    offsetMode?: boolean;\n  }\n): [number, number, number] {\n  let [x, y, z = 0] = position;\n\n  if (modelMatrix) {\n    [x, y, z] = vec4.transformMat4([], [x, y, z, 1.0], modelMatrix);\n  }\n\n  switch (coordinateSystem) {\n    case COORDINATE_SYSTEM.LNGLAT:\n      return lngLatZToWorldPosition([x, y, z], viewport, offsetMode);\n\n    case COORDINATE_SYSTEM.LNGLAT_OFFSETS:\n      return lngLatZToWorldPosition(\n        [x + coordinateOrigin[0], y + coordinateOrigin[1], z + (coordinateOrigin[2] || 0)],\n        viewport,\n        offsetMode\n      );\n\n    case COORDINATE_SYSTEM.METER_OFFSETS:\n      return lngLatZToWorldPosition(\n        addMetersToLngLat(coordinateOrigin, [x, y, z]) as [number, number, number],\n        viewport,\n        offsetMode\n      );\n\n    case COORDINATE_SYSTEM.CARTESIAN:\n    default:\n      return viewport.isGeospatial\n        ? [x + coordinateOrigin[0], y + coordinateOrigin[1], z + coordinateOrigin[2]]\n        : viewport.projectPosition([x, y, z]);\n  }\n}\n\n/**\n * Equivalent to project_position in project.glsl\n * projects a user supplied position to world position directly with or without\n * a reference coordinate system\n */\nexport function projectPosition(\n  position: number[],\n  params: {\n    /** The current viewport */\n    viewport: Viewport;\n    /** The reference coordinate system used to align world position */\n    coordinateSystem: CoordinateSystem;\n    /** The reference coordinate origin used to align world position */\n    coordinateOrigin: [number, number, number];\n    /** The model matrix of the supplied position */\n    modelMatrix?: NumericArray | null;\n    /** The coordinate system that the supplied position is in. Default to the same as `coordinateSystem`. */\n    fromCoordinateSystem?: CoordinateSystem;\n    /** The coordinate origin that the supplied position is in. Default to the same as `coordinateOrigin`. */\n    fromCoordinateOrigin?: [number, number, number];\n  }\n): [number, number, number] {\n  const {\n    viewport,\n    coordinateSystem,\n    coordinateOrigin,\n    modelMatrix,\n    fromCoordinateSystem,\n    fromCoordinateOrigin\n  } = normalizeParameters(params);\n\n  const {geospatialOrigin, shaderCoordinateOrigin, offsetMode} = getOffsetOrigin(\n    viewport,\n    coordinateSystem,\n    coordinateOrigin\n  );\n\n  const worldPosition = getWorldPosition(position, {\n    viewport,\n    modelMatrix,\n    coordinateSystem: fromCoordinateSystem,\n    coordinateOrigin: fromCoordinateOrigin,\n    offsetMode\n  });\n\n  if (offsetMode) {\n    const positionCommonSpace = viewport.projectPosition(\n      geospatialOrigin || shaderCoordinateOrigin\n    );\n    vec3.sub(worldPosition, worldPosition, positionCommonSpace);\n  }\n\n  return worldPosition;\n}\n"],"file":"project-functions.js"}