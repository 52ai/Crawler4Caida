{"version":3,"sources":["../../../src/transitions/linear-interpolator.ts"],"names":["DEFAULT_PROPS","DEFAULT_REQUIRED_PROPS","LinearInterpolator","opts","transitionProps","Array","isArray","normalizedOpts","compare","required","startProps","endProps","result","makeViewport","around","startViewport","endViewport","aroundPosition","unproject","start","Object","assign","end","project","width","height","t","propsInTransition","_propsToExtract","key","viewport","panByPosition","TransitionInterpolator"],"mappings":"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","sourcesContent":["import TransitionInterpolator from './transition-interpolator';\nimport {lerp} from '@math.gl/core';\n\nimport type Viewport from '../viewports/viewport';\n\nconst DEFAULT_PROPS = ['longitude', 'latitude', 'zoom', 'bearing', 'pitch'];\nconst DEFAULT_REQUIRED_PROPS = ['longitude', 'latitude', 'zoom'];\n\ntype PropsWithAnchor = {\n  around?: number[];\n  aroundPosition?: number[];\n  [key: string]: any;\n};\n\n/**\n * Performs linear interpolation of two view states.\n */\nexport default class LinearInterpolator extends TransitionInterpolator {\n  opts: {\n    around?: number[];\n    makeViewport?: (props: Record<string, any>) => Viewport;\n  };\n\n  /**\n   * @param {Object} opts\n   * @param {Array} opts.transitionProps - list of props to apply linear transition to.\n   * @param {Array} opts.around - a screen point to zoom/rotate around.\n   * @param {Function} opts.makeViewport - construct a viewport instance with given props.\n   */\n  constructor(\n    opts:\n      | string[]\n      | {\n          transitionProps?:\n            | string[]\n            | {\n                compare: string[];\n                extract?: string[];\n                required?: string[];\n              };\n          around?: number[];\n          makeViewport?: (props: Record<string, any>) => Viewport;\n        } = {}\n  ) {\n    // Backward compatibility\n    const transitionProps = Array.isArray(opts) ? opts : opts.transitionProps;\n\n    const normalizedOpts = Array.isArray(opts) ? {} : opts;\n    normalizedOpts.transitionProps = Array.isArray(transitionProps)\n      ? {\n          compare: transitionProps,\n          required: transitionProps\n        }\n      : transitionProps || {\n          compare: DEFAULT_PROPS,\n          required: DEFAULT_REQUIRED_PROPS\n        };\n\n    super(normalizedOpts.transitionProps);\n    this.opts = normalizedOpts;\n  }\n\n  initializeProps(\n    startProps: Record<string, any>,\n    endProps: Record<string, any>\n  ): {\n    start: PropsWithAnchor;\n    end: PropsWithAnchor;\n  } {\n    const result = super.initializeProps(startProps, endProps);\n\n    const {makeViewport, around} = this.opts;\n    if (makeViewport && around) {\n      const startViewport = makeViewport(startProps);\n      const endViewport = makeViewport(endProps);\n      const aroundPosition = startViewport.unproject(around);\n      result.start.around = around;\n      Object.assign(result.end, {\n        around: endViewport.project(aroundPosition),\n        aroundPosition,\n        width: endProps.width,\n        height: endProps.height\n      });\n    }\n\n    return result;\n  }\n\n  interpolateProps(\n    startProps: PropsWithAnchor,\n    endProps: PropsWithAnchor,\n    t: number\n  ): Record<string, any> {\n    const propsInTransition = {};\n    for (const key of this._propsToExtract) {\n      propsInTransition[key] = lerp(startProps[key] || 0, endProps[key] || 0, t);\n    }\n\n    if (endProps.aroundPosition && this.opts.makeViewport) {\n      // Linear transition should be performed in common space\n      const viewport = this.opts.makeViewport({...endProps, ...propsInTransition});\n      Object.assign(\n        propsInTransition,\n        viewport.panByPosition(\n          endProps.aroundPosition,\n          // anchor point in current screen coordinates\n          lerp(startProps.around as number[], endProps.around as number[], t) as number[]\n        )\n      );\n    }\n    return propsInTransition;\n  }\n}\n"],"file":"linear-interpolator.js"}