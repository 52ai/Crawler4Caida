{"version":3,"sources":["../../../src/transitions/cpu-spring-transition.js"],"names":["EPSILON","updateSpringElement","prev","cur","dest","damping","stiffness","velocity","delta","spring","damper","updateSpring","Array","isArray","next","i","length","distance","value1","value2","distanceSquare","d","Math","sqrt","abs","CPUSpringTransition","_currValue","settings","fromValue","toValue","_prevValue","nextValue","end","Transition"],"mappings":"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","sourcesContent":["import Transition from './transition';\n\nconst EPSILON = 1e-5;\n\n/*\n * Calculate the next value in the spring transition\n * @param prev {Number} - previous value\n * @param cur {Number} - current value\n * @param dest {Number} - destination value\n * @param damping {Number}\n * @param stiffness {Number}\n */\nfunction updateSpringElement(prev, cur, dest, damping, stiffness) {\n  const velocity = cur - prev;\n  const delta = dest - cur;\n  const spring = delta * stiffness;\n  const damper = -velocity * damping;\n  return spring + damper + velocity + cur;\n}\n\n/*\n * Calculate the next value in the spring transition\n * @param prev {Number|Array} - previous value\n * @param cur {Number|Array} - current value\n * @param dest {Number|Array} - destination value\n * @param damping {Number}\n * @param stiffness {Number}\n */\nfunction updateSpring(prev, cur, dest, damping, stiffness) {\n  if (Array.isArray(dest)) {\n    const next = [];\n    for (let i = 0; i < dest.length; i++) {\n      next[i] = updateSpringElement(prev[i], cur[i], dest[i], damping, stiffness);\n    }\n    return next;\n  }\n  return updateSpringElement(prev, cur, dest, damping, stiffness);\n}\n\n/*\n * Calculate the distance between two numbers or two vectors\n */\nfunction distance(value1, value2) {\n  if (Array.isArray(value1)) {\n    let distanceSquare = 0;\n    for (let i = 0; i < value1.length; i++) {\n      const d = value1[i] - value2[i];\n      distanceSquare += d * d;\n    }\n    return Math.sqrt(distanceSquare);\n  }\n  return Math.abs(value1 - value2);\n}\n\nexport default class CPUSpringTransition extends Transition {\n  get value() {\n    return this._currValue;\n  }\n\n  _onUpdate() {\n    // TODO - use timeline\n    // const {time} = this;\n\n    const {fromValue, toValue, damping, stiffness} = this.settings;\n    const {_prevValue = fromValue, _currValue = fromValue} = this;\n    let nextValue = updateSpring(_prevValue, _currValue, toValue, damping, stiffness);\n    const delta = distance(nextValue, toValue);\n    const velocity = distance(nextValue, _currValue);\n\n    if (delta < EPSILON && velocity < EPSILON) {\n      nextValue = toValue;\n      this.end();\n    }\n\n    this._prevValue = _currValue;\n    this._currValue = nextValue;\n  }\n}\n"],"file":"cpu-spring-transition.js"}