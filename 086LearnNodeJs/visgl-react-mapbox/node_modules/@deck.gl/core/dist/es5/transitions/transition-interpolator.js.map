{"version":3,"sources":["../../../src/transitions/transition-interpolator.ts"],"names":["TransitionInterpolator","opts","compare","extract","required","_propsToCompare","_propsToExtract","_requiredProps","currentProps","nextProps","key","startProps","endProps","startViewStateProps","endViewStateProps","_checkRequiredProps","start","end","transitionDuration","props","forEach","propName","value","Number","isFinite","Array","isArray"],"mappings":";;;;;;;;;;;;;;;AAAA;;AACA;;;;;;;;IAE8BA,sB;AAY5B,kCAAYC,IAAZ,EAAgF;AAAA;AAAA;AAAA;AAAA;AAC9E,QAAOC,OAAP,GAAqCD,IAArC,CAAOC,OAAP;AAAA,QAAgBC,OAAhB,GAAqCF,IAArC,CAAgBE,OAAhB;AAAA,QAAyBC,QAAzB,GAAqCH,IAArC,CAAyBG,QAAzB;AAEA,SAAKC,eAAL,GAAuBH,OAAvB;AACA,SAAKI,eAAL,GAAuBH,OAAO,IAAID,OAAlC;AACA,SAAKK,cAAL,GAAsBH,QAAtB;AACD;;;;WAQD,uBAAcI,YAAd,EAAiDC,SAAjD,EAA0F;AAAA,iDACtE,KAAKJ,eADiE;AAAA;;AAAA;AACxF,4DAAwC;AAAA,cAA7BK,GAA6B;;AACtC,cACE,EAAEA,GAAG,IAAIF,YAAT,KACA,EAAEE,GAAG,IAAID,SAAT,CADA,IAEA,CAAC,kBAAOD,YAAY,CAACE,GAAD,CAAnB,EAA0BD,SAAS,CAACC,GAAD,CAAnC,CAHH,EAIE;AACA,mBAAO,KAAP;AACD;AACF;AATuF;AAAA;AAAA;AAAA;AAAA;;AAUxF,aAAO,IAAP;AACD;;;WASD,yBACEC,UADF,EAEEC,QAFF,EAME;AACA,UAAMC,mBAAmB,GAAG,EAA5B;AACA,UAAMC,iBAAiB,GAAG,EAA1B;;AAFA,kDAIkB,KAAKR,eAJvB;AAAA;;AAAA;AAIA,+DAAwC;AAAA,cAA7BI,GAA6B;;AACtC,cAAIA,GAAG,IAAIC,UAAP,IAAqBD,GAAG,IAAIE,QAAhC,EAA0C;AACxCC,YAAAA,mBAAmB,CAACH,GAAD,CAAnB,GAA2BC,UAAU,CAACD,GAAD,CAArC;AACAI,YAAAA,iBAAiB,CAACJ,GAAD,CAAjB,GAAyBE,QAAQ,CAACF,GAAD,CAAjC;AACD;AACF;AATD;AAAA;AAAA;AAAA;AAAA;;AAWA,WAAKK,mBAAL,CAAyBF,mBAAzB;;AACA,WAAKE,mBAAL,CAAyBD,iBAAzB;;AAEA,aAAO;AAACE,QAAAA,KAAK,EAAEH,mBAAR;AAA6BI,QAAAA,GAAG,EAAEH;AAAlC,OAAP;AACD;;;WAqBD,qBAAYH,UAAZ,EAA6CC,QAA7C,EAAoF;AAClF,aAAOA,QAAQ,CAACM,kBAAhB;AACD;;;WAED,6BAAoBC,KAApB,EAA2B;AACzB,UAAI,CAAC,KAAKZ,cAAV,EAA0B;AACxB;AACD;;AAED,WAAKA,cAAL,CAAoBa,OAApB,CAA4B,UAAAC,QAAQ,EAAI;AACtC,YAAMC,KAAK,GAAGH,KAAK,CAACE,QAAD,CAAnB;AACA,6BACEE,MAAM,CAACC,QAAP,CAAgBF,KAAhB,KAA0BG,KAAK,CAACC,OAAN,CAAcJ,KAAd,CAD5B,YAEKD,QAFL;AAID,OAND;AAOD","sourcesContent":["import {equals} from '@math.gl/core';\nimport assert from '../utils/assert';\n\nexport default abstract class TransitionInterpolator {\n  protected _propsToCompare: string[];\n  protected _propsToExtract: string[];\n  protected _requiredProps?: string[];\n\n  /**\n   * @param opts {array|object}\n   * @param opts.compare {array} - prop names used in equality check\n   * @param opts.extract {array} - prop names needed for interpolation\n   * @param opts.required {array} - prop names that must be supplied\n   * alternatively, supply one list of prop names as `opts` if all of the above are the same.\n   */\n  constructor(opts: {compare: string[]; extract?: string[]; required?: string[]}) {\n    const {compare, extract, required} = opts;\n\n    this._propsToCompare = compare;\n    this._propsToExtract = extract || compare;\n    this._requiredProps = required;\n  }\n\n  /**\n   * Checks if two sets of props need transition in between\n   * @param currentProps {object} - a list of viewport props\n   * @param nextProps {object} - a list of viewport props\n   * @returns {bool} - true if two props are equivalent\n   */\n  arePropsEqual(currentProps: Record<string, any>, nextProps: Record<string, any>): boolean {\n    for (const key of this._propsToCompare) {\n      if (\n        !(key in currentProps) ||\n        !(key in nextProps) ||\n        !equals(currentProps[key], nextProps[key])\n      ) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Called before transition starts to validate/pre-process start and end props\n   * @param startProps {object} - a list of starting viewport props\n   * @param endProps {object} - a list of target viewport props\n   * @returns {Object} {start, end} - start and end props to be passed\n   *   to `interpolateProps`\n   */\n  initializeProps(\n    startProps: Record<string, any>,\n    endProps: Record<string, any>\n  ): {\n    start: Record<string, any>;\n    end: Record<string, any>;\n  } {\n    const startViewStateProps = {};\n    const endViewStateProps = {};\n\n    for (const key of this._propsToExtract) {\n      if (key in startProps || key in endProps) {\n        startViewStateProps[key] = startProps[key];\n        endViewStateProps[key] = endProps[key];\n      }\n    }\n\n    this._checkRequiredProps(startViewStateProps);\n    this._checkRequiredProps(endViewStateProps);\n\n    return {start: startViewStateProps, end: endViewStateProps};\n  }\n\n  /**\n   * Returns viewport props in transition\n   * @param startProps {object} - a list of starting viewport props\n   * @param endProps {object} - a list of target viewport props\n   * @param t {number} - a time factor between [0, 1]\n   * @returns {object} - a list of interpolated viewport props\n   */\n  abstract interpolateProps(\n    startProps: Record<string, any>,\n    endProps: Record<string, any>,\n    t: number\n  ): Record<string, any>;\n\n  /**\n   * Returns transition duration\n   * @param startProps {object} - a list of starting viewport props\n   * @param endProps {object} - a list of target viewport props\n   * @returns {Number} - transition duration in milliseconds\n   */\n  getDuration(startProps: Record<string, any>, endProps: Record<string, any>): number {\n    return endProps.transitionDuration;\n  }\n\n  _checkRequiredProps(props) {\n    if (!this._requiredProps) {\n      return;\n    }\n\n    this._requiredProps.forEach(propName => {\n      const value = props[propName];\n      assert(\n        Number.isFinite(value) || Array.isArray(value),\n        `${propName} is required for transition`\n      );\n    });\n  }\n}\n"],"file":"transition-interpolator.js"}