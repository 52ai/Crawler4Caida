{"version":3,"sources":["../../../src/transitions/gpu-spring-transition.ts"],"names":["GPUSpringTransition","gl","attribute","timeline","type","transition","Transition","attributeInTransition","Attribute","settings","normalized","currentStartIndices","startIndices","currentLength","texture","getTexture","framebuffer","getFramebuffer","transform","getTransform","bufferOpts","byteLength","usage","buffers","Buffer","inProgress","transitionSettings","numInstances","padBufferOpts","fromLength","fromStartIndices","getData","enter","buffer","setData","value","start","duration","Infinity","update","elementCount","Math","floor","size","sourceBuffers","aTo","updated","aPrev","aCur","feedbackBuffers","vNext","run","discard","clearRenderTarget","uniforms","stiffness","damping","parameters","depthTest","blend","viewport","blendFunc","blendEquation","isTransitioning","end","cancel","delete","length","attributeType","Transform","vs","fs","defines","ATTRIBUTE_TYPE","varyings","Texture2D","data","Uint8Array","format","border","mipmaps","dataFormat","width","height","Framebuffer","id","attachments"],"mappings":"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","sourcesContent":["/* eslint-disable complexity, max-statements, max-params */\nimport GL from '@luma.gl/constants';\nimport {Buffer, Transform, Framebuffer, Texture2D, readPixelsToArray} from '@luma.gl/core';\nimport {\n  padBuffer,\n  getAttributeTypeFromSize,\n  getSourceBufferAttribute,\n  getAttributeBufferLength,\n  cycleBuffers,\n  SpringTransitionSettings\n} from '../lib/attribute/attribute-transition-utils';\nimport Attribute from '../lib/attribute/attribute';\nimport Transition from './transition';\n\nimport type {Timeline, Transform as LumaTransform} from '@luma.gl/engine';\nimport type {\n  Buffer as LumaBuffer,\n  Framebuffer as LumaFramebuffer,\n  Texture2D as LumaTexture2D\n} from '@luma.gl/webgl';\nimport type {NumericArray} from '../types/types';\nimport type GPUTransition from './gpu-transition';\n\nexport default class GPUSpringTransition implements GPUTransition {\n  gl: WebGLRenderingContext;\n  type = 'spring';\n  attributeInTransition: Attribute;\n\n  private settings?: SpringTransitionSettings;\n  private attribute: Attribute;\n  private transition: Transition;\n  private currentStartIndices: NumericArray | null;\n  private currentLength: number;\n  private texture: LumaTexture2D;\n  private framebuffer: LumaFramebuffer;\n  private transform: LumaTransform;\n  private buffers: LumaBuffer[];\n\n  constructor({\n    gl,\n    attribute,\n    timeline\n  }: {\n    gl: WebGLRenderingContext;\n    attribute: Attribute;\n    timeline: Timeline;\n  }) {\n    this.gl = gl;\n    this.type = 'spring';\n    this.transition = new Transition(timeline);\n    this.attribute = attribute;\n    // this is the attribute we return during the transition - note: if it is a constant\n    // attribute, it will be converted and returned as a regular attribute\n    // `attribute.userData` is the original options passed when constructing the attribute.\n    // This ensures that we set the proper `doublePrecision` flag and shader attributes.\n    this.attributeInTransition = new Attribute(gl, {...attribute.settings, normalized: false});\n    this.currentStartIndices = attribute.startIndices;\n    // storing currentLength because this.buffer may be larger than the actual length we want to use\n    // this is because we only reallocate buffers when they grow, not when they shrink,\n    // due to performance costs\n    this.currentLength = 0;\n    this.texture = getTexture(gl);\n    this.framebuffer = getFramebuffer(gl, this.texture);\n    this.transform = getTransform(gl, attribute, this.framebuffer);\n    const bufferOpts = {\n      byteLength: 0,\n      usage: GL.DYNAMIC_COPY\n    };\n    this.buffers = [\n      new Buffer(gl, bufferOpts), // previous\n      new Buffer(gl, bufferOpts), // current\n      new Buffer(gl, bufferOpts) // next\n    ];\n  }\n\n  get inProgress(): boolean {\n    return this.transition.inProgress;\n  }\n\n  // this is called when an attribute's values have changed and\n  // we need to start animating towards the new values\n  // this also correctly resizes / pads the transform's buffers\n  // in case the attribute's buffer has changed in length or in\n  // startIndices\n  start(transitionSettings: SpringTransitionSettings, numInstances: number): void {\n    const {gl, buffers, attribute} = this;\n    const padBufferOpts = {\n      numInstances,\n      attribute,\n      fromLength: this.currentLength,\n      fromStartIndices: this.currentStartIndices,\n      getData: transitionSettings.enter\n    };\n\n    for (const buffer of buffers) {\n      padBuffer({buffer, ...padBufferOpts});\n    }\n\n    this.settings = transitionSettings;\n    this.currentStartIndices = attribute.startIndices;\n    this.currentLength = getAttributeBufferLength(attribute, numInstances);\n    this.attributeInTransition.setData({\n      buffer: buffers[1],\n      // Hack: Float64Array is required for double-precision attributes\n      // to generate correct shader attributes\n      value: attribute.value as NumericArray\n    });\n\n    // when an attribute changes values, a new transition is started. These\n    // are properties that we have to store on this.transition but can change\n    // when new transitions are started, so we have to keep them up-to-date.\n    // this.transition.start() takes the latest settings and updates them.\n    this.transition.start({...transitionSettings, duration: Infinity});\n\n    this.transform.update({\n      elementCount: Math.floor(this.currentLength / attribute.size),\n      sourceBuffers: {\n        aTo: getSourceBufferAttribute(gl, attribute)\n      }\n    });\n  }\n\n  update() {\n    const {buffers, transform, framebuffer, transition} = this;\n    const updated = transition.update();\n    if (!updated) {\n      return false;\n    }\n    const settings = this.settings as SpringTransitionSettings;\n\n    transform.update({\n      sourceBuffers: {\n        aPrev: buffers[0],\n        aCur: buffers[1]\n      },\n      feedbackBuffers: {\n        vNext: buffers[2]\n      }\n    });\n    transform.run({\n      framebuffer,\n      discard: false,\n      clearRenderTarget: true,\n      uniforms: {\n        stiffness: settings.stiffness,\n        damping: settings.damping\n      },\n      parameters: {\n        depthTest: false,\n        blend: true,\n        viewport: [0, 0, 1, 1],\n        blendFunc: [GL.ONE, GL.ONE],\n        blendEquation: [GL.MAX, GL.MAX]\n      }\n    });\n\n    cycleBuffers(buffers);\n    this.attributeInTransition.setData({\n      buffer: buffers[1],\n      // Hack: Float64Array is required for double-precision attributes\n      // to generate correct shader attributes\n      value: this.attribute.value as NumericArray\n    });\n\n    const isTransitioning = readPixelsToArray(framebuffer)[0] > 0;\n\n    if (!isTransitioning) {\n      transition.end();\n    }\n\n    return true;\n  }\n\n  cancel() {\n    this.transition.cancel();\n    this.transform.delete();\n    for (const buffer of this.buffers) {\n      buffer.delete();\n    }\n    this.buffers.length = 0;\n    this.texture.delete();\n    this.framebuffer.delete();\n  }\n}\n\nfunction getTransform(\n  gl: WebGLRenderingContext,\n  attribute: Attribute,\n  framebuffer: LumaFramebuffer\n): LumaTransform {\n  const attributeType = getAttributeTypeFromSize(attribute.size);\n  return new Transform(gl, {\n    framebuffer,\n    vs: `\n#define SHADER_NAME spring-transition-vertex-shader\n\n#define EPSILON 0.00001\n\nuniform float stiffness;\nuniform float damping;\nattribute ATTRIBUTE_TYPE aPrev;\nattribute ATTRIBUTE_TYPE aCur;\nattribute ATTRIBUTE_TYPE aTo;\nvarying ATTRIBUTE_TYPE vNext;\nvarying float vIsTransitioningFlag;\n\nATTRIBUTE_TYPE getNextValue(ATTRIBUTE_TYPE cur, ATTRIBUTE_TYPE prev, ATTRIBUTE_TYPE dest) {\n  ATTRIBUTE_TYPE velocity = cur - prev;\n  ATTRIBUTE_TYPE delta = dest - cur;\n  ATTRIBUTE_TYPE spring = delta * stiffness;\n  ATTRIBUTE_TYPE damper = velocity * -1.0 * damping;\n  return spring + damper + velocity + cur;\n}\n\nvoid main(void) {\n  bool isTransitioning = length(aCur - aPrev) > EPSILON || length(aTo - aCur) > EPSILON;\n  vIsTransitioningFlag = isTransitioning ? 1.0 : 0.0;\n\n  vNext = getNextValue(aCur, aPrev, aTo);\n  gl_Position = vec4(0, 0, 0, 1);\n  gl_PointSize = 100.0;\n}\n`,\n    fs: `\n#define SHADER_NAME spring-transition-is-transitioning-fragment-shader\n\nvarying float vIsTransitioningFlag;\n\nvoid main(void) {\n  if (vIsTransitioningFlag == 0.0) {\n    discard;\n  }\n  gl_FragColor = vec4(1.0);\n}`,\n    defines: {\n      ATTRIBUTE_TYPE: attributeType\n    },\n    varyings: ['vNext']\n  });\n}\n\nfunction getTexture(gl: WebGLRenderingContext): LumaTexture2D {\n  return new Texture2D(gl, {\n    data: new Uint8Array(4),\n    format: GL.RGBA,\n    type: GL.UNSIGNED_BYTE,\n    border: 0,\n    mipmaps: false,\n    dataFormat: GL.RGBA,\n    width: 1,\n    height: 1\n  });\n}\n\nfunction getFramebuffer(gl: WebGLRenderingContext, texture: LumaTexture2D): LumaFramebuffer {\n  return new Framebuffer(gl, {\n    id: 'spring-transition-is-transitioning-framebuffer',\n    width: 1,\n    height: 1,\n    attachments: {\n      [GL.COLOR_ATTACHMENT0]: texture\n    }\n  });\n}\n"],"file":"gpu-spring-transition.js"}