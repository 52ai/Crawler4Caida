"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _layersPass = _interopRequireDefault(require("./layers-pass"));

var _core = require("@luma.gl/core");

var _constants = require("../lib/constants");

var _log = _interopRequireDefault(require("../utils/log"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var PICKING_PARAMETERS = {
  blendFunc: [1, 0, 32771, 0],
  blendEquation: 32774
};

var PickLayersPass = function (_LayersPass) {
  (0, _inherits2.default)(PickLayersPass, _LayersPass);

  var _super = _createSuper(PickLayersPass);

  function PickLayersPass() {
    var _this;

    (0, _classCallCheck2.default)(this, PickLayersPass);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "pickZ", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "_colors", null);
    return _this;
  }

  (0, _createClass2.default)(PickLayersPass, [{
    key: "render",
    value: function render(props) {
      if (props.pickingFBO) {
        return this._drawPickingBuffer(props);
      }

      return (0, _get2.default)((0, _getPrototypeOf2.default)(PickLayersPass.prototype), "render", this).call(this, props);
    }
  }, {
    key: "_drawPickingBuffer",
    value: function _drawPickingBuffer(_ref) {
      var _this2 = this;

      var layers = _ref.layers,
          layerFilter = _ref.layerFilter,
          views = _ref.views,
          viewports = _ref.viewports,
          onViewportActive = _ref.onViewportActive,
          pickingFBO = _ref.pickingFBO,
          _ref$deviceRect = _ref.deviceRect,
          x = _ref$deviceRect.x,
          y = _ref$deviceRect.y,
          width = _ref$deviceRect.width,
          height = _ref$deviceRect.height,
          cullRect = _ref.cullRect,
          effects = _ref.effects,
          _ref$pass = _ref.pass,
          pass = _ref$pass === void 0 ? 'picking' : _ref$pass,
          pickZ = _ref.pickZ;
      var gl = this.gl;
      this.pickZ = pickZ;
      var encodedColors = pickZ ? null : {
        byLayer: new Map(),
        byAlpha: []
      };
      this._colors = encodedColors;
      var renderStatus = (0, _core.withParameters)(gl, _objectSpread(_objectSpread({
        scissorTest: true,
        scissor: [x, y, width, height],
        clearColor: [0, 0, 0, 0],
        depthMask: true,
        depthTest: true,
        depthRange: [0, 1],
        colorMask: [true, true, true, true]
      }, PICKING_PARAMETERS), {}, {
        blend: !pickZ
      }), function () {
        return (0, _get2.default)((0, _getPrototypeOf2.default)(PickLayersPass.prototype), "render", _this2).call(_this2, {
          target: pickingFBO,
          layers: layers,
          layerFilter: layerFilter,
          views: views,
          viewports: viewports,
          onViewportActive: onViewportActive,
          cullRect: cullRect,
          effects: effects === null || effects === void 0 ? void 0 : effects.filter(function (e) {
            return e.useInPicking;
          }),
          pass: pass
        });
      });
      this._colors = null;
      var decodePickingColor = encodedColors && decodeColor.bind(null, encodedColors);
      return {
        decodePickingColor: decodePickingColor,
        stats: renderStatus
      };
    }
  }, {
    key: "shouldDrawLayer",
    value: function shouldDrawLayer(layer) {
      return layer.props.pickable && layer.props.operation === _constants.OPERATION.DRAW;
    }
  }, {
    key: "getModuleParameters",
    value: function getModuleParameters() {
      return {
        pickingActive: 1,
        pickingAttribute: this.pickZ,
        lightSources: {}
      };
    }
  }, {
    key: "getLayerParameters",
    value: function getLayerParameters(layer, layerIndex, viewport) {
      var pickParameters = _objectSpread({}, layer.props.parameters);

      if (!this._colors) {
        pickParameters.blend = false;
      } else {
        Object.assign(pickParameters, PICKING_PARAMETERS);
        pickParameters.blend = true;
        pickParameters.blendColor = encodeColor(this._colors, layer, viewport);
      }

      return pickParameters;
    }
  }]);
  return PickLayersPass;
}(_layersPass.default);

exports.default = PickLayersPass;

function encodeColor(encoded, layer, viewport) {
  var byLayer = encoded.byLayer,
      byAlpha = encoded.byAlpha;
  var a;
  var entry = byLayer.get(layer);

  if (entry) {
    entry.viewports.push(viewport);
    a = entry.a;
  } else {
    a = byLayer.size + 1;

    if (a <= 255) {
      entry = {
        a: a,
        layer: layer,
        viewports: [viewport]
      };
      byLayer.set(layer, entry);
      byAlpha[a] = entry;
    } else {
      _log.default.warn('Too many pickable layers, only picking the first 255')();

      a = 0;
    }
  }

  return [0, 0, 0, a / 255];
}

function decodeColor(encoded, pickedColor) {
  var entry = encoded.byAlpha[pickedColor[3]];
  return entry && {
    pickedLayer: entry.layer,
    pickedViewports: entry.viewports,
    pickedObjectIndex: entry.layer.decodePickingColor(pickedColor)
  };
}
//# sourceMappingURL=pick-layers-pass.js.map