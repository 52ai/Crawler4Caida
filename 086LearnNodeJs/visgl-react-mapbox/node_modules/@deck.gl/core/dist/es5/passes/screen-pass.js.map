{"version":3,"sources":["../../../src/passes/screen-pass.ts"],"names":["ScreenPass","gl","props","module","fs","id","model","ClipSpace","modules","params","viewport","drawingBufferWidth","drawingBufferHeight","framebuffer","outputBuffer","clearColor","_renderPass","delete","options","inputBuffer","color","draw","moduleSettings","uniforms","texture","texSize","width","height","parameters","depthWrite","depthTest","Pass"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAOA;;AACA;;;;;;IAgBqBA,U;;;;;AAGnB,sBAAYC,EAAZ,EAAuCC,KAAvC,EAA+D;AAAA;;AAAA;AAC7D,8BAAMD,EAAN,EAAUC,KAAV;AAD6D;AAE7D,QAAOC,MAAP,GAAyBD,KAAzB,CAAOC,MAAP;AAAA,QAAeC,EAAf,GAAyBF,KAAzB,CAAeE,EAAf;AAAA,QAAmBC,EAAnB,GAAyBH,KAAzB,CAAmBG,EAAnB;AACA,UAAKC,KAAL,GAAa,IAAIC,eAAJ,CAAcN,EAAd,EAAkB;AAACI,MAAAA,EAAE,EAAFA,EAAD;AAAKD,MAAAA,EAAE,EAAFA,EAAL;AAASI,MAAAA,OAAO,EAAE,CAACL,MAAD;AAAlB,KAAlB,CAAb;AAH6D;AAI9D;;;;WAED,gBAAOM,MAAP,EAA8C;AAAA;;AAC5C,UAAMR,EAAE,GAAG,KAAKA,EAAhB;AAEA,+BAAcA,EAAd,EAAkB;AAACS,QAAAA,QAAQ,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAOT,EAAE,CAACU,kBAAV,EAA8BV,EAAE,CAACW,mBAAjC;AAAX,OAAlB;AAEA,gCAAeX,EAAf,EAAmB;AAACY,QAAAA,WAAW,EAAEJ,MAAM,CAACK,YAArB;AAAmCC,QAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV;AAA/C,OAAnB,EAAiF;AAAA,eAC/E,MAAI,CAACC,WAAL,CAAiBf,EAAjB,EAAqBQ,MAArB,CAD+E;AAAA,OAAjF;AAGD;;;WAED,mBAAS;AACP,WAAKH,KAAL,CAAWW,MAAX;AACA,WAAKX,KAAL,GAAa,IAAb;AACD;;;WAUD,qBAAsBL,EAAtB,EAAiDiB,OAAjD,EAAmF;AACjF,UAAOC,WAAP,GAAsBD,OAAtB,CAAOC,WAAP;AACA,uBAAMlB,EAAN,EAAU;AAACmB,QAAAA,KAAK,EAAE;AAAR,OAAV;AACA,WAAKd,KAAL,CAAWe,IAAX,CAAgB;AACdC,QAAAA,cAAc,EAAE,KAAKpB,KAAL,CAAWoB,cADb;AAEdC,QAAAA,QAAQ,EAAE;AACRC,UAAAA,OAAO,EAAEL,WADD;AAERM,UAAAA,OAAO,EAAE,CAACN,WAAW,CAACO,KAAb,EAAoBP,WAAW,CAACQ,MAAhC;AAFD,SAFI;AAMdC,QAAAA,UAAU,EAAE;AACVC,UAAAA,UAAU,EAAE,KADF;AAEVC,UAAAA,SAAS,EAAE;AAFD;AANE,OAAhB;AAWD;;;EA9CqCC,a","sourcesContent":["//\n// A base render pass.\n//\n// Attribution: This class and the multipass system were inspired by\n// the THREE.js EffectComposer and *Pass classes\n\nimport type {Framebuffer} from '@luma.gl/core';\nimport {ClipSpace, setParameters, withParameters, clear} from '@luma.gl/core';\nimport Pass from './pass';\n\nimport type {ShaderModule} from '../types/types';\n\ntype ScreenPassProps = {\n  module: ShaderModule;\n  fs: string | null;\n  id: string;\n  moduleSettings: any;\n};\n\ntype ScreenPassRenderOptions = {\n  inputBuffer: Framebuffer;\n  outputBuffer: Framebuffer;\n};\n\nexport default class ScreenPass extends Pass {\n  model: ClipSpace;\n\n  constructor(gl: WebGLRenderingContext, props: ScreenPassProps) {\n    super(gl, props);\n    const {module, fs, id} = props;\n    this.model = new ClipSpace(gl, {id, fs, modules: [module]});\n  }\n\n  render(params: ScreenPassRenderOptions): void {\n    const gl = this.gl;\n\n    setParameters(gl, {viewport: [0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight]});\n\n    withParameters(gl, {framebuffer: params.outputBuffer, clearColor: [0, 0, 0, 0]}, () =>\n      this._renderPass(gl, params)\n    );\n  }\n\n  delete() {\n    this.model.delete();\n    this.model = null;\n  }\n\n  // Private methods\n\n  /**\n   * Renders the pass.\n   * This is an abstract method that should be overridden.\n   * @param inputBuffer - Frame buffer that contains the result of the previous pass\n   * @param outputBuffer - Frame buffer that serves as the output render target\n   */\n  protected _renderPass(gl: WebGLRenderingContext, options: ScreenPassRenderOptions) {\n    const {inputBuffer} = options;\n    clear(gl, {color: true});\n    this.model.draw({\n      moduleSettings: this.props.moduleSettings,\n      uniforms: {\n        texture: inputBuffer,\n        texSize: [inputBuffer.width, inputBuffer.height]\n      },\n      parameters: {\n        depthWrite: false,\n        depthTest: false\n      }\n    });\n  }\n}\n"],"file":"screen-pass.js"}