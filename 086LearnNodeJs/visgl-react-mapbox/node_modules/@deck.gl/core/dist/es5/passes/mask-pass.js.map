{"version":3,"sources":["../../../src/passes/mask-pass.ts"],"names":["MaskPass","gl","props","mapSize","maskMap","Texture2D","width","height","parameters","fbo","Framebuffer","id","attachments","options","colorMask","channel","clearColor","blend","blendFunc","blendEquation","depthTest","target","pass","layer","operation","OPERATION","MASK","delete","LayersPass"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;;;;;;;;;IASqBA,Q;;;;;AAInB,oBAAYC,EAAZ,EAAgBC,KAAhB,EAAuD;AAAA;;AAAA;;AAAA;AACrD,8BAAMD,EAAN,EAAUC,KAAV;AADqD;AAAA;AAGrD,yBAAyBA,KAAzB,CAAOC,OAAP;AAAA,QAAOA,OAAP,+BAAiB,IAAjB;AAEA,UAAKC,OAAL,GAAe,IAAIC,eAAJ,CAAcJ,EAAd,EAAkB;AAC/BK,MAAAA,KAAK,EAAEH,OADwB;AAE/BI,MAAAA,MAAM,EAAEJ,OAFuB;AAG/BK,MAAAA,UAAU;AAHqB,KAAlB,CAAf;AAWA,UAAKC,GAAL,GAAW,IAAIC,iBAAJ,CAAgBT,EAAhB,EAAoB;AAC7BU,MAAAA,EAAE,EAAE,SADyB;AAE7BL,MAAAA,KAAK,EAAEH,OAFsB;AAG7BI,MAAAA,MAAM,EAAEJ,OAHqB;AAI7BS,MAAAA,WAAW,2CACe,MAAKR,OADpB;AAJkB,KAApB,CAAX;AAhBqD;AAwBtD;;;;WAED,gBAAOS,OAAP,EAAuC;AAAA;;AACrC,UAAMZ,EAAE,GAAG,KAAKA,EAAhB;AAEA,UAAMa,SAAS,GAAG,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsB,KAAtB,CAAlB;AACAA,MAAAA,SAAS,CAACD,OAAO,CAACE,OAAT,CAAT,GAA6B,IAA7B;AAEA,aAAO,0BACLd,EADK,EAEL;AACEe,QAAAA,UAAU,EAAE,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,CADd;AAEEC,QAAAA,KAAK,EAAE,IAFT;AAGEC,QAAAA,SAAS,EAAE,MAHb;AAIEC,QAAAA,aAAa,OAJf;AAKEL,QAAAA,SAAS,EAATA,SALF;AAMEM,QAAAA,SAAS,EAAE;AANb,OAFK,EAUL;AAAA,oJAAuBP,OAAvB;AAAgCQ,UAAAA,MAAM,EAAE,MAAI,CAACZ,GAA7C;AAAkDa,UAAAA,IAAI,EAAE;AAAxD;AAAA,OAVK,CAAP;AAYD;;;WAED,yBAAgBC,KAAhB,EAAuB;AACrB,aAAOA,KAAK,CAACrB,KAAN,CAAYsB,SAAZ,KAA0BC,qBAAUC,IAA3C;AACD;;;WAED,mBAAS;AACP,WAAKjB,GAAL,CAASkB,MAAT;AACA,WAAKvB,OAAL,CAAauB,MAAb;AACD;;;EAzDmCC,mB","sourcesContent":["import {Framebuffer, Texture2D, withParameters} from '@luma.gl/core';\nimport {OPERATION} from '../lib/constants';\nimport LayersPass from './layers-pass';\n\nimport type {LayersPassRenderOptions} from './layers-pass';\n\ntype MaskPassRenderOptions = LayersPassRenderOptions & {\n  /** The channel to render into, 0:red, 1:green, 2:blue, 3:alpha */\n  channel: number;\n};\n\nexport default class MaskPass extends LayersPass {\n  maskMap: Texture2D;\n  fbo: Framebuffer;\n\n  constructor(gl, props: {id: string; mapSize?: number}) {\n    super(gl, props);\n\n    const {mapSize = 2048} = props;\n\n    this.maskMap = new Texture2D(gl, {\n      width: mapSize,\n      height: mapSize,\n      parameters: {\n        [gl.TEXTURE_MIN_FILTER]: gl.LINEAR,\n        [gl.TEXTURE_MAG_FILTER]: gl.LINEAR,\n        [gl.TEXTURE_WRAP_S]: gl.CLAMP_TO_EDGE,\n        [gl.TEXTURE_WRAP_T]: gl.CLAMP_TO_EDGE\n      }\n    });\n\n    this.fbo = new Framebuffer(gl, {\n      id: 'maskmap',\n      width: mapSize,\n      height: mapSize,\n      attachments: {\n        [gl.COLOR_ATTACHMENT0]: this.maskMap\n      }\n    });\n  }\n\n  render(options: MaskPassRenderOptions) {\n    const gl = this.gl;\n\n    const colorMask = [false, false, false, false];\n    colorMask[options.channel] = true;\n\n    return withParameters(\n      gl,\n      {\n        clearColor: [255, 255, 255, 255],\n        blend: true,\n        blendFunc: [gl.ZERO, gl.ONE],\n        blendEquation: gl.FUNC_SUBTRACT,\n        colorMask,\n        depthTest: false\n      },\n      () => super.render({...options, target: this.fbo, pass: 'mask'})\n    );\n  }\n\n  shouldDrawLayer(layer) {\n    return layer.props.operation === OPERATION.MASK;\n  }\n\n  delete() {\n    this.fbo.delete();\n    this.maskMap.delete();\n  }\n}\n"],"file":"mask-pass.js"}