{"version":3,"sources":["../../../src/views/view.ts"],"names":["View","props","id","x","y","width","height","padding","viewportInstance","Viewport","constructor","displayName","_x","_y","_width","_height","_padding","left","right","top","bottom","equals","bind","Object","seal","view","ViewportType","viewState","filterViewState","viewportDimensions","getDimensions","newViewState","key","dimensions","opts","controller","type","ControllerType"],"mappings":"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","sourcesContent":["import Viewport from '../viewports/viewport';\nimport {parsePosition, getPosition, Position} from '../utils/positions';\nimport {deepEqual} from '../utils/deep-equal';\nimport assert from '../utils/assert';\nimport type Controller from '../controllers/controller';\nimport type {ControllerOptions} from '../controllers/controller';\nimport type {TransitionProps} from '../controllers/transition-manager';\nimport type {Padding} from '../viewports/viewport';\nimport type {ConstructorOf} from '../types/types';\n\nexport type CommonViewState = TransitionProps;\n\ntype CommonViewProps<ViewState> = {\n  /** A unique id of the view. In a multi-view use case, this is important for matching view states and place contents into this view. */\n  id?: string;\n  /** A relative (e.g. `'50%'`) or absolute position. Default `0`. */\n  x?: number | string;\n  /** A relative (e.g. `'50%'`) or absolute position. Default `0`. */\n  y?: number | string;\n  /** A relative (e.g. `'50%'`) or absolute extent. Default `'100%'`. */\n  width?: number | string;\n  /** A relative (e.g. `'50%'`) or absolute extent. Default `'100%'`. */\n  height?: number | string;\n  /** Padding around the view, expressed in either relative (e.g. `'50%'`) or absolute pixels. Default `null`. */\n  padding?: {\n    left?: number | string;\n    right?: number | string;\n    top?: number | string;\n    bottom?: number | string;\n  } | null;\n  /** State of the view */\n  viewState?:\n    | string\n    | ({\n        id?: string;\n      } & Partial<ViewState>);\n  /** Options for viewport interactivity. */\n  controller?:\n    | null\n    | boolean\n    | ConstructorOf<Controller<any>>\n    | (ControllerOptions & {\n        type?: ConstructorOf<Controller<any>>;\n      });\n\n  /** @deprecated Directly wrap a viewport instance */\n  viewportInstance?: Viewport;\n};\n\nexport default abstract class View<\n  ViewState extends CommonViewState = CommonViewState,\n  ViewProps = {}\n> {\n  id: string;\n  abstract get ViewportType(): ConstructorOf<Viewport>;\n  abstract get ControllerType(): ConstructorOf<Controller<any>>;\n\n  private viewportInstance?: Viewport;\n  private _x: Position;\n  private _y: Position;\n  private _width: Position;\n  private _height: Position;\n  private _padding: {\n    left: Position;\n    right: Position;\n    top: Position;\n    bottom: Position;\n  } | null;\n\n  readonly props: ViewProps & CommonViewProps<ViewState>;\n\n  constructor(props: ViewProps & CommonViewProps<ViewState>) {\n    const {\n      id,\n      x = 0,\n      y = 0,\n      width = '100%',\n      height = '100%',\n      padding = null,\n      viewportInstance\n    } = props || {};\n\n    assert(!viewportInstance || viewportInstance instanceof Viewport);\n    this.viewportInstance = viewportInstance;\n\n    // @ts-ignore\n    this.id = id || this.constructor.displayName || 'view';\n\n    this.props = {...props, id: this.id};\n\n    // Extents\n    this._x = parsePosition(x);\n    this._y = parsePosition(y);\n    this._width = parsePosition(width);\n    this._height = parsePosition(height);\n    this._padding = padding && {\n      left: parsePosition(padding.left || 0),\n      right: parsePosition(padding.right || 0),\n      top: parsePosition(padding.top || 0),\n      bottom: parsePosition(padding.bottom || 0)\n    };\n\n    // Bind methods for easy access\n    this.equals = this.equals.bind(this);\n\n    Object.seal(this);\n  }\n\n  equals(view: View<ViewState, ViewProps>): boolean {\n    if (this === view) {\n      return true;\n    }\n\n    // if `viewportInstance` is set, it is the only prop that is used\n    // Delegate to `Viewport.equals`\n    if (this.viewportInstance) {\n      return view.viewportInstance ? this.viewportInstance.equals(view.viewportInstance) : false;\n    }\n\n    return this.ViewportType === view.ViewportType && deepEqual(this.props, view.props);\n  }\n\n  /** Make viewport from canvas dimensions and view state */\n  makeViewport({width, height, viewState}: {width: number; height: number; viewState: any}) {\n    if (this.viewportInstance) {\n      return this.viewportInstance;\n    }\n\n    viewState = this.filterViewState(viewState);\n\n    // Resolve relative viewport dimensions\n    const viewportDimensions = this.getDimensions({width, height});\n    return new this.ViewportType({...viewState, ...this.props, ...viewportDimensions});\n  }\n\n  getViewStateId(): string {\n    const {viewState} = this.props;\n    if (typeof viewState === 'string') {\n      // if View.viewState is a string, return it\n      return viewState;\n    }\n    return viewState?.id || this.id;\n  }\n\n  // Allows view to override (or completely define) viewState\n  filterViewState(viewState: ViewState): ViewState {\n    if (this.props.viewState && typeof this.props.viewState === 'object') {\n      // If we have specified an id, then intent is to override,\n      // If not, completely specify the view state\n      if (!this.props.viewState.id) {\n        return this.props.viewState as ViewState;\n      }\n\n      // Merge in all props from View's viewState, except id\n      const newViewState = {...viewState};\n      for (const key in this.props.viewState) {\n        if (key !== 'id') {\n          newViewState[key] = this.props.viewState[key];\n        }\n      }\n      return newViewState;\n    }\n\n    return viewState;\n  }\n\n  /** Resolve the dimensions of the view from overall canvas dimensions */\n  getDimensions({width, height}: {width: number; height: number}): {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n    padding?: Padding;\n  } {\n    const dimensions: {\n      x: number;\n      y: number;\n      width: number;\n      height: number;\n      padding?: Padding;\n    } = {\n      x: getPosition(this._x, width),\n      y: getPosition(this._y, height),\n      width: getPosition(this._width, width),\n      height: getPosition(this._height, height)\n    };\n\n    if (this._padding) {\n      dimensions.padding = {\n        left: getPosition(this._padding.left, width),\n        top: getPosition(this._padding.top, height),\n        right: getPosition(this._padding.right, width),\n        bottom: getPosition(this._padding.bottom, height)\n      };\n    }\n    return dimensions;\n  }\n\n  // Used by sub classes to resolve controller props\n  get controller(): (ControllerOptions & {type: ConstructorOf<Controller<any>>}) | null {\n    const opts = this.props.controller;\n\n    if (!opts) {\n      return null;\n    }\n    if (opts === true) {\n      return {type: this.ControllerType};\n    }\n    if (typeof opts === 'function') {\n      return {type: opts};\n    }\n    return {type: this.ControllerType, ...opts};\n  }\n}\n"],"file":"view.js"}