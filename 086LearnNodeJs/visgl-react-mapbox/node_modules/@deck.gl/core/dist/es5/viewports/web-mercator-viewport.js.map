{"version":3,"sources":["../../../src/viewports/web-mercator-viewport.ts"],"names":["TILE_SIZE","EARTH_CIRCUMFERENCE","DEGREES_TO_RADIANS","Math","PI","unitsPerMeter","latitude","latCosine","cos","WebMercatorViewport","opts","longitude","zoom","pitch","bearing","nearZMultiplier","farZMultiplier","orthographic","projectionMatrix","repeat","worldOffset","legacyMeterSizes","width","height","altitude","scale","pow","fovy","projectionParameters","viewMatrixUncentered","viewOffset","Matrix4","translate","multiplyLeft","viewMatrix","focalDistance","_subViewports","_pseudoMeters","Object","freeze","length","bounds","getBounds","minOffset","floor","maxOffset","ceil","x","offsetViewport","push","xyz","projectFlat","X","Y","Z","unprojectFlat","lngLatZ","coords","pixel","fromLocation","pixelUnprojectionMatrix","toLocation","vec2","add","negate","newCenter","center","options","corners","z","min","max","Viewport"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n// View and Projection Matrix calculations for mapbox-js style\n// map view properties\nimport Viewport from './viewport';\n\nimport {\n  pixelsToWorld,\n  getViewMatrix,\n  addMetersToLngLat,\n  getProjectionParameters,\n  altitudeToFovy,\n  fovyToAltitude,\n  fitBounds,\n  getBounds\n} from '@math.gl/web-mercator';\nimport {Padding} from './viewport';\n\n// TODO - import from math.gl\nimport * as vec2 from 'gl-matrix/vec2';\nimport {Matrix4} from '@math.gl/core';\n\nconst TILE_SIZE = 512;\nconst EARTH_CIRCUMFERENCE = 40.03e6;\nconst DEGREES_TO_RADIANS = Math.PI / 180;\n\nexport type WebMercatorViewportOptions = {\n  /** Name of the viewport */\n  id?: string;\n  /** Left offset from the canvas edge, in pixels */\n  x?: number;\n  /** Top offset from the canvas edge, in pixels */\n  y?: number;\n  /** Viewport width in pixels */\n  width?: number;\n  /** Viewport height in pixels */\n  height?: number;\n  /** Longitude in degrees */\n  longitude?: number;\n  /** Latitude in degrees */\n  latitude?: number;\n  /** Tilt of the camera in degrees */\n  pitch?: number;\n  /** Heading of the camera in degrees */\n  bearing?: number;\n  /** Camera altitude relative to the viewport height, legacy property used to control the FOV. Default `1.5` */\n  altitude?: number;\n  /** Camera fovy in degrees. If provided, overrides `altitude` */\n  fovy?: number;\n  /** Viewport center in world space. If geospatial, refers to meter offsets from lng, lat */\n  position?: number[];\n  /** Zoom level */\n  zoom?: number;\n  /** Model matrix of viewport center */\n  modelMatrix?: number[] | null;\n  /** Custom projection matrix */\n  projectionMatrix?: number[];\n  /** Use orthographic projection */\n  orthographic?: boolean;\n  /** Scaler for the near plane, 1 unit equals to the height of the viewport. Default `0.1` */\n  nearZMultiplier?: number;\n  /** Scaler for the far plane, 1 unit equals to the distance from the camera to the edge of the screen. Default `1.01` */\n  farZMultiplier?: number;\n  /** Render multiple copies of the world */\n  repeat?: boolean;\n  /** Internal use */\n  worldOffset?: number;\n  /** @deprecated Revert to approximated meter size calculation prior to v8.5 */\n  legacyMeterSizes?: boolean;\n};\n\nfunction unitsPerMeter(latitude: number): number {\n  const latCosine = Math.cos(latitude * DEGREES_TO_RADIANS);\n  return TILE_SIZE / EARTH_CIRCUMFERENCE / latCosine;\n}\n\n/**\n * Manages transformations to/from WGS84 coordinates using the Web Mercator Projection.\n */\nexport default class WebMercatorViewport extends Viewport {\n  static displayName = 'WebMercatorViewport';\n\n  longitude: number;\n  latitude: number;\n  pitch: number;\n  bearing: number;\n  altitude: number;\n  fovy: number;\n  orthographic: boolean;\n\n  /** Each sub viewport renders one copy of the world if repeat:true. The list is generated and cached on first request. */\n  private _subViewports: WebMercatorViewport[] | null;\n  /** @deprecated Revert to approximated meter size calculation prior to v8.5 */\n  private _pseudoMeters: boolean;\n\n  /* eslint-disable complexity, max-statements */\n  constructor(opts: WebMercatorViewportOptions = {}) {\n    const {\n      latitude = 0,\n      longitude = 0,\n      zoom = 0,\n      pitch = 0,\n      bearing = 0,\n      nearZMultiplier = 0.1,\n      farZMultiplier = 1.01,\n      orthographic = false,\n      projectionMatrix,\n\n      repeat = false,\n      worldOffset = 0,\n\n      // backward compatibility\n      // TODO: remove in v9\n      legacyMeterSizes = false\n    } = opts;\n\n    let {width, height, altitude = 1.5} = opts;\n    const scale = Math.pow(2, zoom);\n\n    // Silently allow apps to send in 0,0 to facilitate isomorphic render etc\n    width = width || 1;\n    height = height || 1;\n\n    let fovy;\n    let projectionParameters: any = null;\n    if (projectionMatrix) {\n      altitude = projectionMatrix[5] / 2;\n      fovy = altitudeToFovy(altitude);\n    } else {\n      if (opts.fovy) {\n        fovy = opts.fovy;\n        altitude = fovyToAltitude(fovy);\n      } else {\n        fovy = altitudeToFovy(altitude);\n      }\n      projectionParameters = getProjectionParameters({\n        width,\n        height,\n        pitch,\n        fovy,\n        nearZMultiplier,\n        farZMultiplier\n      });\n    }\n\n    // The uncentered matrix allows us two move the center addition to the\n    // shader (cheap) which gives a coordinate system that has its center in\n    // the layer's center position. This makes rotations and other modelMatrx\n    // transforms much more useful.\n    let viewMatrixUncentered = getViewMatrix({\n      height,\n      pitch,\n      bearing,\n      scale,\n      altitude\n    });\n\n    if (worldOffset) {\n      const viewOffset = new Matrix4().translate([512 * worldOffset, 0, 0]);\n      viewMatrixUncentered = viewOffset.multiplyLeft(viewMatrixUncentered);\n    }\n\n    super({\n      ...opts,\n      // x, y,\n      width,\n      height,\n\n      // view matrix\n      viewMatrix: viewMatrixUncentered,\n      longitude,\n      latitude,\n      zoom,\n\n      // projection matrix parameters\n      ...projectionParameters,\n      fovy,\n      focalDistance: altitude\n    });\n\n    // Save parameters\n    this.latitude = latitude;\n    this.longitude = longitude;\n    this.zoom = zoom;\n    this.pitch = pitch;\n    this.bearing = bearing;\n    this.altitude = altitude;\n    this.fovy = fovy;\n\n    this.orthographic = orthographic;\n\n    this._subViewports = repeat ? [] : null;\n    this._pseudoMeters = legacyMeterSizes;\n\n    Object.freeze(this);\n  }\n  /* eslint-enable complexity, max-statements */\n\n  get subViewports(): WebMercatorViewport[] | null {\n    if (this._subViewports && !this._subViewports.length) {\n      // Cache sub viewports so that we only calculate them once\n      const bounds = this.getBounds();\n\n      const minOffset = Math.floor((bounds[0] + 180) / 360);\n      const maxOffset = Math.ceil((bounds[2] - 180) / 360);\n\n      for (let x = minOffset; x <= maxOffset; x++) {\n        const offsetViewport = x\n          ? new WebMercatorViewport({\n              ...this,\n              worldOffset: x\n            })\n          : this;\n        this._subViewports.push(offsetViewport);\n      }\n    }\n    return this._subViewports;\n  }\n\n  projectPosition(xyz: number[]): [number, number, number] {\n    if (this._pseudoMeters) {\n      // Backward compatibility\n      return super.projectPosition(xyz);\n    }\n    const [X, Y] = this.projectFlat(xyz);\n    const Z = (xyz[2] || 0) * unitsPerMeter(xyz[1]);\n    return [X, Y, Z];\n  }\n\n  unprojectPosition(xyz: number[]): [number, number, number] {\n    if (this._pseudoMeters) {\n      // Backward compatibility\n      return super.unprojectPosition(xyz);\n    }\n    const [X, Y] = this.unprojectFlat(xyz);\n    const Z = (xyz[2] || 0) / unitsPerMeter(Y);\n    return [X, Y, Z];\n  }\n\n  /**\n   * Add a meter delta to a base lnglat coordinate, returning a new lnglat array\n   *\n   * Note: Uses simple linear approximation around the viewport center\n   * Error increases with size of offset (roughly 1% per 100km)\n   *\n   * @param {[Number,Number]|[Number,Number,Number]) lngLatZ - base coordinate\n   * @param {[Number,Number]|[Number,Number,Number]) xyz - array of meter deltas\n   * @return {[Number,Number]|[Number,Number,Number]) array of [lng,lat,z] deltas\n   */\n  addMetersToLngLat(lngLatZ: number[], xyz: number[]): number[] {\n    return addMetersToLngLat(lngLatZ, xyz);\n  }\n\n  panByPosition(coords: number[], pixel: number[]): WebMercatorViewportOptions {\n    const fromLocation = pixelsToWorld(pixel, this.pixelUnprojectionMatrix);\n    const toLocation = this.projectFlat(coords);\n\n    const translate = vec2.add([], toLocation, vec2.negate([], fromLocation));\n    const newCenter = vec2.add([], this.center, translate);\n\n    const [longitude, latitude] = this.unprojectFlat(newCenter);\n    return {longitude, latitude};\n  }\n\n  getBounds(options: {z?: number} = {}): [number, number, number, number] {\n    // @ts-ignore\n    const corners = getBounds(this, options.z || 0);\n\n    return [\n      Math.min(corners[0][0], corners[1][0], corners[2][0], corners[3][0]),\n      Math.min(corners[0][1], corners[1][1], corners[2][1], corners[3][1]),\n      Math.max(corners[0][0], corners[1][0], corners[2][0], corners[3][0]),\n      Math.max(corners[0][1], corners[1][1], corners[2][1], corners[3][1])\n    ];\n  }\n\n  /**\n   * Returns a new viewport that fit around the given rectangle.\n   * Only supports non-perspective mode.\n   */\n  fitBounds(\n    /** [[lon, lat], [lon, lat]] */\n    bounds: [[number, number], [number, number]],\n    options: {\n      /** If not supplied, will use the current width of the viewport (default `1`) */\n      width?: number;\n      /** If not supplied, will use the current height of the viewport (default `1`) */\n      height?: number;\n      /** In degrees, 0.01 would be about 1000 meters */\n      minExtent?: number;\n      /** Max zoom level */\n      maxZoom?: number;\n      /** Extra padding in pixels */\n      padding?: number | Required<Padding>;\n      /** Center shift in pixels */\n      offset?: number[];\n    } = {}\n  ) {\n    const {width, height} = this;\n    const {longitude, latitude, zoom} = fitBounds({width, height, bounds, ...options});\n    return new WebMercatorViewport({width, height, longitude, latitude, zoom});\n  }\n}\n"],"file":"web-mercator-viewport.js"}