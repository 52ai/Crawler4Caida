{"version":3,"sources":["../../../src/lib/layer-state.ts"],"names":["LayerState","attributeManager","layer","needsRedraw","needsUpdate","subLayers","usesPickingColorCache","component","propName","url","fetch","props","value","onDataLoad","error","raiseError","ComponentState"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;IAqBqBA,U;;;;;AAwBnB,4BAMG;AAAA;;AAAA,QALDC,gBAKC,QALDA,gBAKC;AAAA,QAJDC,KAIC,QAJDA,KAIC;AAAA;AACD,8BAAMA,KAAN;AADC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAED,UAAKD,gBAAL,GAAwBA,gBAAxB;AACA,UAAKE,WAAL,GAAmB,IAAnB;AACA,UAAKC,WAAL,GAAmB,IAAnB;AACA,UAAKC,SAAL,GAAiB,IAAjB;AACA,UAAKC,qBAAL,GAA6B,KAA7B;AANC;AAOF;;;;SAED,eAAoB;AAClB,aAAO,KAAKC,SAAZ;AACD,K;SAED,aAAUL,KAAV,EAAyB;AACvB,WAAKK,SAAL,GAAiBL,KAAjB;AACD;;;WAID,gBAAiBM,QAAjB,EAA2BC,GAA3B,EAAwC;AACtC,UAAMC,KAAK,GAAG,KAAKH,SAAL,CAAeI,KAAf,CAAqBD,KAAnC;;AACA,UAAIA,KAAJ,EAAW;AACT,eAAOA,KAAK,CAACD,GAAD,EAAM;AAACD,UAAAA,QAAQ,EAARA,QAAD;AAAWN,UAAAA,KAAK,EAAE,KAAKA;AAAvB,SAAN,CAAZ;AACD;;AACD,gHAAoBM,QAApB,EAA8BC,GAA9B;AACD;;;WAED,oBAAqBD,QAArB,EAAuCI,KAAvC,EAAmD;AACjD,UAAMC,UAAU,GAAG,KAAKN,SAAL,CAAeI,KAAf,CAAqBE,UAAxC;;AACA,UAAIL,QAAQ,KAAK,MAAb,IAAuBK,UAA3B,EAAuC;AACrCA,QAAAA,UAAU,CAACD,KAAD,EAAQ;AAACJ,UAAAA,QAAQ,EAARA,QAAD;AAAWN,UAAAA,KAAK,EAAE,KAAKA;AAAvB,SAAR,CAAV;AACD;AACF;;;WAED,kBAAmBM,QAAnB,EAAqCM,KAArC,EAAmD;AACjD,WAAKZ,KAAL,CAAWa,UAAX,CAAsBD,KAAtB,oBAAwCN,QAAxC,iBAAuD,KAAKN,KAA5D;AACD;;;EAlE2Dc,uB","sourcesContent":["import ComponentState from '../lifecycle/component-state';\n\nimport type Layer from './layer';\nimport type AttributeManager from './attribute/attribute-manager';\nimport type Viewport from '../viewports/viewport';\nimport type UniformTransitionManager from './uniform-transition-manager';\n\nexport type ChangeFlags = {\n  // Primary changeFlags, can be strings stating reason for change\n  dataChanged: string | false | {startRow: number; endRow?: number}[];\n  propsChanged: string | false;\n  updateTriggersChanged: Record<string, true> | false;\n  extensionsChanged: boolean;\n  viewportChanged: boolean;\n  stateChanged: boolean;\n\n  // Derived changeFlags\n  propsOrDataChanged: boolean;\n  somethingChanged: boolean;\n};\n\nexport default class LayerState<LayerT extends Layer> extends ComponentState<LayerT> {\n  attributeManager: AttributeManager | null;\n  needsRedraw: boolean;\n  needsUpdate: boolean;\n  /**\n   * Sublayers rendered in a previous cycle\n   */\n  subLayers: Layer[] | null;\n  /**\n   * If the layer is using the shared instancedPickingColors buffer\n   */\n  usesPickingColorCache: boolean;\n  /**\n   * Dirty flags of the layer's props and state\n   */\n  changeFlags!: ChangeFlags;\n\n  /** The last viewport rendered by this layer */\n  viewport?: Viewport;\n\n  uniformTransitions!: UniformTransitionManager;\n  /** Populated during uniform transition to replace user-supplied values */\n  propsInTransition?: LayerT['props'];\n\n  constructor({\n    attributeManager,\n    layer\n  }: {\n    attributeManager: AttributeManager | null;\n    layer: LayerT;\n  }) {\n    super(layer);\n    this.attributeManager = attributeManager;\n    this.needsRedraw = true;\n    this.needsUpdate = true;\n    this.subLayers = null;\n    this.usesPickingColorCache = false;\n  }\n\n  get layer(): LayerT {\n    return this.component;\n  }\n\n  set layer(layer: LayerT) {\n    this.component = layer;\n  }\n\n  /* Override base Component methods with Layer-specific handling */\n\n  protected _fetch(propName, url: string) {\n    const fetch = this.component.props.fetch;\n    if (fetch) {\n      return fetch(url, {propName, layer: this.layer});\n    }\n    return super._fetch(propName, url);\n  }\n\n  protected _onResolve(propName: string, value: any) {\n    const onDataLoad = this.component.props.onDataLoad;\n    if (propName === 'data' && onDataLoad) {\n      onDataLoad(value, {propName, layer: this.layer});\n    }\n  }\n\n  protected _onError(propName: string, error: Error) {\n    this.layer.raiseError(error, `loading ${propName} of ${this.layer}`);\n  }\n}\n"],"file":"layer-state.js"}