{"version":3,"sources":["../../../../src/lib/resource/resource-manager.ts"],"names":["ResourceManager","gl","protocol","_context","resourceManager","_resources","_consumers","_pruneRequest","resourceId","startsWith","data","forceUpdate","persistent","res","setData","Resource","delete","consumerId","consumer","requestId","request","resource","unsubscribe","prune","onChange","resources","replace","add","_track","getData","undefined","setTimeout","_prune","key","consumers","oldResource","id","subscribe","Object","keys","inUse"],"mappings":"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","sourcesContent":["/* global setTimeout */\nimport Resource from './resource';\nimport type {ResourceSubscriber} from './resource';\n\nexport type ResourceManagerContext = {\n  gl: WebGLRenderingContext;\n  resourceManager: ResourceManager;\n};\n\nexport default class ResourceManager {\n  protocol: string;\n\n  private _context: ResourceManagerContext;\n  private _resources: Record<string, Resource>;\n  private _consumers: Record<\n    string,\n    Record<\n      string,\n      ResourceSubscriber & {\n        resourceId: string;\n      }\n    >\n  >;\n  private _pruneRequest: number | null;\n\n  constructor({gl, protocol}) {\n    this.protocol = protocol || 'resource://';\n\n    this._context = {\n      gl,\n      resourceManager: this\n    };\n    this._resources = {};\n    this._consumers = {};\n\n    this._pruneRequest = null;\n  }\n\n  contains(resourceId: string): boolean {\n    if (resourceId.startsWith(this.protocol)) {\n      return true;\n    }\n    return resourceId in this._resources;\n  }\n\n  add({\n    resourceId,\n    data,\n    forceUpdate = false,\n    persistent = true\n  }: {\n    resourceId: string;\n    data: any;\n    forceUpdate?: boolean;\n    persistent?: boolean;\n  }) {\n    let res = this._resources[resourceId];\n\n    if (res) {\n      res.setData(data, forceUpdate);\n    } else {\n      res = new Resource(resourceId, data, this._context);\n      this._resources[resourceId] = res;\n    }\n    // persistent resources can only be removed by calling `remove`\n    // non-persistent resources may be released when there are no more consumers\n    res.persistent = persistent;\n  }\n\n  remove(resourceId: string): void {\n    const res = this._resources[resourceId];\n\n    if (res) {\n      res.delete();\n      delete this._resources[resourceId];\n    }\n  }\n\n  unsubscribe({consumerId}: {consumerId: string}): void {\n    const consumer = this._consumers[consumerId];\n    if (consumer) {\n      for (const requestId in consumer) {\n        const request = consumer[requestId];\n        const resource = this._resources[request.resourceId];\n        if (resource) {\n          resource.unsubscribe(request);\n        }\n      }\n      delete this._consumers[consumerId];\n      this.prune();\n    }\n  }\n\n  subscribe<T>({\n    resourceId,\n    onChange,\n    consumerId,\n    requestId = 'default'\n  }: {\n    resourceId: string;\n    onChange: (data: T | Promise<T>) => void;\n    consumerId: string;\n    requestId: string;\n  }): T | Promise<T> | undefined {\n    const {_resources: resources, protocol} = this;\n    if (resourceId.startsWith(protocol)) {\n      resourceId = resourceId.replace(protocol, '');\n      if (!resources[resourceId]) {\n        // Add placeholder. When this resource becomes available, the consumer will be notified.\n        this.add({resourceId, data: null, persistent: false});\n      }\n    }\n    const res: Resource<T> = resources[resourceId];\n    this._track(consumerId, requestId, res, onChange);\n    if (res) {\n      return res.getData();\n    }\n\n    return undefined;\n  }\n\n  prune(): void {\n    if (!this._pruneRequest) {\n      // prune() may be called multiple times in the same animation frame.\n      // Batch multiple requests together\n      // @ts-ignore setTimeout returns NodeJS.Timeout in node\n      this._pruneRequest = setTimeout(() => this._prune(), 0);\n    }\n  }\n\n  finalize(): void {\n    for (const key in this._resources) {\n      this._resources[key].delete();\n    }\n  }\n\n  private _track(\n    consumerId: string,\n    requestId: string,\n    resource: Resource,\n    onChange: (data: any) => void\n  ) {\n    const consumers = this._consumers;\n    const consumer = (consumers[consumerId] = consumers[consumerId] || {});\n    const request = consumer[requestId] || {};\n\n    const oldResource = request.resourceId && this._resources[request.resourceId];\n    if (oldResource) {\n      oldResource.unsubscribe(request);\n      this.prune();\n    }\n    if (resource) {\n      consumer[requestId] = request;\n      request.onChange = onChange;\n      request.resourceId = resource.id;\n      resource.subscribe(request);\n    }\n  }\n\n  private _prune(): void {\n    this._pruneRequest = null;\n\n    for (const key of Object.keys(this._resources)) {\n      const res = this._resources[key];\n      if (!res.persistent && !res.inUse()) {\n        res.delete();\n        delete this._resources[key];\n      }\n    }\n  }\n}\n"],"file":"resource-manager.js"}