{"version":3,"sources":["../../../src/lib/composite-layer.ts"],"names":["TRACE_RENDER_LAYERS","CompositeLayer","getSubLayers","every","layer","isLoaded","internalState","subLayers","context","updateObject","setNeedsUpdate","info","object","isDataWrapped","__source","parent","id","index","subLayerId","data","length","DefaultLayerClass","overridingProps","props","_subLayerProps","type","row","sourceObject","sourceObjectIndex","accessor","objectInfo","target","x","i","sublayerProps","opacity","pickable","visible","parameters","getPolygonOffset","highlightedObjectIndex","autoHighlight","highlightColor","coordinateSystem","coordinateOrigin","wrapLongitude","positionFormat","modelMatrix","extensions","fetch","operation","newProps","updateTriggers","overridingSublayerProps","overridingSublayerTriggers","sublayerId","propTypes","constructor","_propTypes","subLayerPropTypes","key","propType","getSubLayerAccessor","Object","assign","all","extension","passThroughProps","getSubLayerProps","call","updateAutoHighlight","updateParams","forceUpdate","shouldUpdate","needsUpdate","subLayersList","renderLayers","Boolean","Layer"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAmBA;;AACA;;AACA;;;;;;;;;;;;;;;;AASA,IAAMA,mBAAmB,GAAG,6BAA5B;;IAE8BC,c;;;;;;;;;;;;SAM5B,eAA2B;AACzB,aAAO,IAAP;AACD;;;SAGD,eAAwB;AACtB,aAAO,iGAAkB,KAAKC,YAAL,GAAoBC,KAApB,CAA0B,UAAAC,KAAK;AAAA,eAAIA,KAAK,CAACC,QAAV;AAAA,OAA/B,CAAzB;AACD;;;WAGD,wBAAwB;AACtB,aAAQ,KAAKC,aAAL,IAAsB,KAAKA,aAAL,CAAmBC,SAA1C,IAAwD,EAA/D;AACD;;;WAKD,yBAAgBC,OAAhB,EAA6C,CAAE;;;WAG/C,kBAASC,YAAT,EAAkC;AAChC,+GAAeA,YAAf;AAMA,WAAKC,cAAL;AACD;;;WAKD,8BAA0D;AAAA,UAA1CC,IAA0C,QAA1CA,IAA0C;AACxD,UAAOC,MAAP,GAAiBD,IAAjB,CAAOC,MAAP;AACA,UAAMC,aAAa,GACjBD,MAAM,IAAIA,MAAM,CAACE,QAAjB,IAA6BF,MAAM,CAACE,QAAP,CAAgBC,MAA7C,IAAuDH,MAAM,CAACE,QAAP,CAAgBC,MAAhB,CAAuBC,EAAvB,KAA8B,KAAKA,EAD5F;;AAGA,UAAI,CAACH,aAAL,EAAoB;AAClB,eAAOF,IAAP;AACD;;AAGDA,MAAAA,IAAI,CAACC,MAAL,GAAcA,MAAM,CAACE,QAAP,CAAgBF,MAA9B;AACAD,MAAAA,IAAI,CAACM,KAAL,GAAaL,MAAM,CAACE,QAAP,CAAgBG,KAA7B;AAEA,aAAON,IAAP;AACD;;;WAQD,wBAAeH,OAAf,EAAgD;AAC9C,aAAO,IAAP;AACD;;;WAGD,8BAA+BU,UAA/B,EAAmDC,IAAnD,EAAuE;AACrE,aAAOA,IAAI,IAAIA,IAAI,CAACC,MAApB;AACD;;;WAGD,0BACEF,UADF,EAEEG,iBAFF,EAGoB;AAClB,UAAuBC,eAAvB,GAA0C,KAAKC,KAA/C,CAAOC,cAAP;AAEA,aACGF,eAAe,IACdA,eAAe,CAACJ,UAAD,CADhB,IAEEI,eAAe,CAACJ,UAAD,CAAf,CAA4BO,IAF/B,IAGAJ,iBAJF;AAMD;;;WAID,wBAA4BK,GAA5B,EAAoCC,YAApC,EAAuDC,iBAAvD,EAAqF;AAEnFF,MAAAA,GAAG,CAACZ,QAAJ,GAAe;AACbC,QAAAA,MAAM,EAAE,IADK;AAEbH,QAAAA,MAAM,EAAEe,YAFK;AAGbV,QAAAA,KAAK,EAAEW;AAHM,OAAf;AAKA,aAAOF,GAAP;AACD;;;WAKD,6BAAuCG,QAAvC,EAAuF;AACrF,UAAI,OAAOA,QAAP,KAAoB,UAAxB,EAAoC;AAClC,YAAMC,UAA+B,GAAG;AACtCb,UAAAA,KAAK,EAAE,CAAC,CAD8B;AAGtCE,UAAAA,IAAI,EAAE,KAAKI,KAAL,CAAWJ,IAHqB;AAItCY,UAAAA,MAAM,EAAE;AAJ8B,SAAxC;AAMA,eAAO,UAACC,CAAD,EAASC,CAAT,EAAoC;AACzC,cAAID,CAAC,IAAIA,CAAC,CAAClB,QAAX,EAAqB;AACnBgB,YAAAA,UAAU,CAACb,KAAX,GAAmBe,CAAC,CAAClB,QAAF,CAAWG,KAA9B;AAEA,mBAAOY,QAAQ,CAACG,CAAC,CAAClB,QAAF,CAAWF,MAAZ,EAA0BkB,UAA1B,CAAf;AACD;;AAED,iBAAOD,QAAQ,CAACG,CAAD,EAAUC,CAAV,CAAf;AACD,SARD;AASD;;AACD,aAAOJ,QAAP;AACD;;;WAID,4BAMO;AAAA;;AAAA,UALLK,aAKK,uEADD,EACC;AACL,wBAkBI,KAAKX,KAlBT;AAAA,UACEY,OADF,eACEA,OADF;AAAA,UAEEC,QAFF,eAEEA,QAFF;AAAA,UAGEC,OAHF,eAGEA,OAHF;AAAA,UAIEC,UAJF,eAIEA,UAJF;AAAA,UAKEC,gBALF,eAKEA,gBALF;AAAA,UAMEC,sBANF,eAMEA,sBANF;AAAA,UAOEC,aAPF,eAOEA,aAPF;AAAA,UAQEC,cARF,eAQEA,cARF;AAAA,UASEC,gBATF,eASEA,gBATF;AAAA,UAUEC,gBAVF,eAUEA,gBAVF;AAAA,UAWEC,aAXF,eAWEA,aAXF;AAAA,UAYEC,cAZF,eAYEA,cAZF;AAAA,UAaEC,WAbF,eAaEA,WAbF;AAAA,UAcEC,UAdF,eAcEA,UAdF;AAAA,UAeEC,KAfF,eAeEA,KAfF;AAAA,UAgBEC,SAhBF,eAgBEA,SAhBF;AAAA,UAiBkB5B,eAjBlB,eAiBEE,cAjBF;AAmBA,UAAM2B,QAAQ,GAAG;AACfnC,QAAAA,EAAE,EAAE,EADW;AAEfoC,QAAAA,cAAc,EAAE,EAFD;AAGfjB,QAAAA,OAAO,EAAPA,OAHe;AAIfC,QAAAA,QAAQ,EAARA,QAJe;AAKfC,QAAAA,OAAO,EAAPA,OALe;AAMfC,QAAAA,UAAU,EAAVA,UANe;AAOfC,QAAAA,gBAAgB,EAAhBA,gBAPe;AAQfC,QAAAA,sBAAsB,EAAtBA,sBARe;AASfC,QAAAA,aAAa,EAAbA,aATe;AAUfC,QAAAA,cAAc,EAAdA,cAVe;AAWfC,QAAAA,gBAAgB,EAAhBA,gBAXe;AAYfC,QAAAA,gBAAgB,EAAhBA,gBAZe;AAafC,QAAAA,aAAa,EAAbA,aAbe;AAcfC,QAAAA,cAAc,EAAdA,cAde;AAefC,QAAAA,WAAW,EAAXA,WAfe;AAgBfC,QAAAA,UAAU,EAAVA,UAhBe;AAiBfC,QAAAA,KAAK,EAALA,KAjBe;AAkBfC,QAAAA,SAAS,EAATA;AAlBe,OAAjB;AAqBA,UAAMG,uBAAuB,GAC3B/B,eAAe,IAAIY,aAAa,CAAClB,EAAjC,IAAuCM,eAAe,CAACY,aAAa,CAAClB,EAAf,CADxD;AAEA,UAAMsC,0BAA0B,GAC9BD,uBAAuB,IAAIA,uBAAuB,CAACD,cADrD;AAEA,UAAMG,UAAU,GAAGrB,aAAa,CAAClB,EAAd,IAAoB,UAAvC;;AAEA,UAAIqC,uBAAJ,EAA6B;AAE3B,YAAMG,SAAS,GAAG,KAAKC,WAAL,CAAiBC,UAAnC;AACA,YAAMC,iBAAiB,GAAGzB,aAAa,CAACT,IAAd,GAAqBS,aAAa,CAACT,IAAd,CAAmBiC,UAAxC,GAAqD,EAA/E;;AACA,aAAK,IAAME,GAAX,IAAkBP,uBAAlB,EAA2C;AACzC,cAAMQ,QAAQ,GAAGF,iBAAiB,CAACC,GAAD,CAAjB,IAA0BJ,SAAS,CAACI,GAAD,CAApD;;AAEA,cAAIC,QAAQ,IAAIA,QAAQ,CAACpC,IAAT,KAAkB,UAAlC,EAA8C;AAC5C4B,YAAAA,uBAAuB,CAACO,GAAD,CAAvB,GAA+B,KAAKE,mBAAL,CAAyBT,uBAAuB,CAACO,GAAD,CAAhD,CAA/B;AACD;AACF;AACF;;AAEDG,MAAAA,MAAM,CAACC,MAAP,CACEb,QADF,EAEEjB,aAFF,EAIEmB,uBAJF;AAMAF,MAAAA,QAAQ,CAACnC,EAAT,aAAiB,KAAKO,KAAL,CAAWP,EAA5B,cAAkCuC,UAAlC;AACAJ,MAAAA,QAAQ,CAACC,cAAT;AACEa,QAAAA,GAAG,2BAAE,KAAK1C,KAAL,CAAW6B,cAAb,0DAAE,sBAA2Ba;AADlC,SAEK/B,aAAa,CAACkB,cAFnB,GAGKE,0BAHL;;AAnEK,iDA2EmBN,UA3EnB;AAAA;;AAAA;AA2EL,4DAAoC;AAAA,cAAzBkB,SAAyB;AAClC,cAAMC,gBAAgB,GAAGD,SAAS,CAACE,gBAAV,CAA2BC,IAA3B,CAAgC,IAAhC,EAAsCH,SAAtC,CAAzB;;AACA,cAAIC,gBAAJ,EAAsB;AACpBJ,YAAAA,MAAM,CAACC,MAAP,CAAcb,QAAd,EAAwBgB,gBAAxB,EAA0C;AACxCf,cAAAA,cAAc,EAAEW,MAAM,CAACC,MAAP,CAAcb,QAAQ,CAACC,cAAvB,EAAuCe,gBAAgB,CAACf,cAAxD;AADwB,aAA1C;AAGD;AACF;AAlFI;AAAA;AAAA;AAAA;AAAA;;AAoFL,aAAOD,QAAP;AACD;;;WAGD,8BAA+BxC,IAA/B,EAAwD;AAAA,kDAClC,KAAKT,YAAL,EADkC;AAAA;;AAAA;AACtD,+DAAyC;AAAA,cAA9BE,KAA8B;AACvCA,UAAAA,KAAK,CAACkE,mBAAN,CAA0B3D,IAA1B;AACD;AAHqD;AAAA;AAAA;AAAA;AAAA;AAIvD;;;WAGD,gCAA0D;AACxD,aAAO,IAAP;AACD;;;WAGD,qBAAsB4D,YAAtB,EAA4DC,WAA5D,EAAkF;AAEhF,UAAIjE,SAAS,GAAG,KAAKD,aAAL,CAAmBC,SAAnC;AACA,UAAMkE,YAAY,GAAG,CAAClE,SAAD,IAAc,KAAKmE,WAAL,EAAnC;;AACA,UAAID,YAAJ,EAAkB;AAChB,YAAME,aAAa,GAAG,KAAKC,YAAL,EAAtB;AAIArE,QAAAA,SAAS,GAAG,sBAAQoE,aAAR,EAAuBE,OAAvB,CAAZ;AAEA,aAAKvE,aAAL,CAAmBC,SAAnB,GAA+BA,SAA/B;AACD;;AACD,0BAAMP,mBAAN,EAA2B,IAA3B,EAAiCyE,YAAjC,EAA+ClE,SAA/C;;AAbgF,kDAiB5DA,SAjB4D;AAAA;;AAAA;AAiBhF,+DAA+B;AAAA,cAApBH,KAAoB;AAC7BA,UAAAA,KAAK,CAACW,MAAN,GAAe,IAAf;AACD;AAnB+E;AAAA;AAAA;AAAA;AAAA;AAoBjF;;;EAzP+D+D,c;;;8BAApC7E,c,eAGD,gB","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport Layer, {UpdateParameters} from './layer';\nimport debug from '../debug';\nimport {flatten} from '../utils/flatten';\n\nimport type AttributeManager from './attribute/attribute-manager';\nimport type {PickingInfo, GetPickingInfoParams} from './picking/pick-info';\nimport type {FilterContext} from '../passes/layers-pass';\nimport type {LayersList, LayerContext} from './layer-manager';\nimport type {CompositeLayerProps, Accessor, AccessorContext} from '../types/layer-props';\nimport {ConstructorOf} from '../types/types';\n\nconst TRACE_RENDER_LAYERS = 'compositeLayer.renderLayers';\n\nexport default abstract class CompositeLayer<PropsT = {}> extends Layer<\n  PropsT & Required<CompositeLayerProps>\n> {\n  static layerName: string = 'CompositeLayer';\n\n  /** `true` if this layer renders other layers */\n  get isComposite(): boolean {\n    return true;\n  }\n\n  /** Returns true if all async resources are loaded */\n  get isLoaded(): boolean {\n    return super.isLoaded && this.getSubLayers().every(layer => layer.isLoaded);\n  }\n\n  /** Return last rendered sub layers */\n  getSubLayers(): Layer[] {\n    return (this.internalState && this.internalState.subLayers) || [];\n  }\n\n  // initializeState is usually not needed for composite layers\n  // Provide empty definition to disable check for missing definition\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  initializeState(context: LayerContext): void {}\n\n  /** Updates selected state members and marks the composite layer to need rerender */\n  setState(updateObject: any): void {\n    super.setState(updateObject);\n    // Trigger a layer update\n    // Although conceptually layer.draw and compositeLayer.renderLayers are equivalent,\n    // they are executed during different lifecycles.\n    // draw can be called without calling updateState (e.g. most viewport changes),\n    // while renderLayers can only be called during a recursive layer update.\n    this.setNeedsUpdate();\n  }\n\n  /** called to augment the info object that is bubbled up from a sublayer\n      override Layer.getPickingInfo() because decoding / setting uniform do\n      not apply to a composite layer. */\n  getPickingInfo({info}: GetPickingInfoParams): PickingInfo {\n    const {object} = info;\n    const isDataWrapped =\n      object && object.__source && object.__source.parent && object.__source.parent.id === this.id;\n\n    if (!isDataWrapped) {\n      return info;\n    }\n\n    // override object with picked data\n    info.object = object.__source.object;\n    info.index = object.__source.index;\n\n    return info;\n  }\n\n  // Implement to generate subLayers\n  abstract renderLayers(): Layer | null | LayersList;\n\n  /**\n   * Filters sub layers at draw time. Return true if the sub layer should be drawn.\n   */\n  filterSubLayer(context: FilterContext): boolean {\n    return true;\n  }\n\n  /** Returns true if sub layer needs to be rendered */\n  protected shouldRenderSubLayer(subLayerId: string, data: any): boolean {\n    return data && data.length;\n  }\n\n  /** Returns sub layer class for a specific sublayer */\n  protected getSubLayerClass<T extends Layer>(\n    subLayerId: string,\n    DefaultLayerClass: ConstructorOf<T>\n  ): ConstructorOf<T> {\n    const {_subLayerProps: overridingProps} = this.props;\n\n    return (\n      (overridingProps &&\n        overridingProps[subLayerId] &&\n        (overridingProps[subLayerId].type as ConstructorOf<T>)) ||\n      DefaultLayerClass\n    );\n  }\n\n  /** When casting user data into another format to pass to sublayers,\n      add reference to the original object and object index */\n  protected getSubLayerRow<T>(row: T, sourceObject: any, sourceObjectIndex: number): T {\n    // @ts-ignore (TS2339) adding undefined property\n    row.__source = {\n      parent: this,\n      object: sourceObject,\n      index: sourceObjectIndex\n    };\n    return row;\n  }\n\n  /** Some composite layers cast user data into another format before passing to sublayers\n    We need to unwrap them before calling the accessor so that they see the original data\n    objects */\n  protected getSubLayerAccessor<In, Out>(accessor: Accessor<In, Out>): Accessor<In, Out> {\n    if (typeof accessor === 'function') {\n      const objectInfo: AccessorContext<In> = {\n        index: -1,\n        // @ts-ignore accessing resolved data\n        data: this.props.data,\n        target: []\n      };\n      return (x: any, i: AccessorContext<In>) => {\n        if (x && x.__source) {\n          objectInfo.index = x.__source.index;\n          // @ts-ignore (TS2349) Out is never a function\n          return accessor(x.__source.object as In, objectInfo);\n        }\n        // @ts-ignore (TS2349) Out is never a function\n        return accessor(x as In, i);\n      };\n    }\n    return accessor;\n  }\n\n  // eslint-disable-next-line complexity\n  /** Returns sub layer props for a specific sublayer */\n  protected getSubLayerProps(\n    sublayerProps: {\n      id?: string;\n      updateTriggers?: Record<string, any>;\n      [propName: string]: any;\n    } = {}\n  ): any {\n    const {\n      opacity,\n      pickable,\n      visible,\n      parameters,\n      getPolygonOffset,\n      highlightedObjectIndex,\n      autoHighlight,\n      highlightColor,\n      coordinateSystem,\n      coordinateOrigin,\n      wrapLongitude,\n      positionFormat,\n      modelMatrix,\n      extensions,\n      fetch,\n      operation,\n      _subLayerProps: overridingProps\n    } = this.props;\n    const newProps = {\n      id: '',\n      updateTriggers: {},\n      opacity,\n      pickable,\n      visible,\n      parameters,\n      getPolygonOffset,\n      highlightedObjectIndex,\n      autoHighlight,\n      highlightColor,\n      coordinateSystem,\n      coordinateOrigin,\n      wrapLongitude,\n      positionFormat,\n      modelMatrix,\n      extensions,\n      fetch,\n      operation\n    };\n\n    const overridingSublayerProps =\n      overridingProps && sublayerProps.id && overridingProps[sublayerProps.id];\n    const overridingSublayerTriggers =\n      overridingSublayerProps && overridingSublayerProps.updateTriggers;\n    const sublayerId = sublayerProps.id || 'sublayer';\n\n    if (overridingSublayerProps) {\n      // @ts-ignore (TS2339) hidden property\n      const propTypes = this.constructor._propTypes;\n      const subLayerPropTypes = sublayerProps.type ? sublayerProps.type._propTypes : {};\n      for (const key in overridingSublayerProps) {\n        const propType = subLayerPropTypes[key] || propTypes[key];\n        // eslint-disable-next-line\n        if (propType && propType.type === 'accessor') {\n          overridingSublayerProps[key] = this.getSubLayerAccessor(overridingSublayerProps[key]);\n        }\n      }\n    }\n\n    Object.assign(\n      newProps,\n      sublayerProps,\n      // experimental feature that allows users to override sublayer props via parent layer prop\n      overridingSublayerProps\n    );\n    newProps.id = `${this.props.id}-${sublayerId}`;\n    newProps.updateTriggers = {\n      all: this.props.updateTriggers?.all,\n      ...sublayerProps.updateTriggers,\n      ...overridingSublayerTriggers\n    };\n\n    // Pass through extension props\n    // @ts-ignore (TS2532) extensions is always defined after merging with default props\n    for (const extension of extensions) {\n      const passThroughProps = extension.getSubLayerProps.call(this, extension);\n      if (passThroughProps) {\n        Object.assign(newProps, passThroughProps, {\n          updateTriggers: Object.assign(newProps.updateTriggers, passThroughProps.updateTriggers)\n        });\n      }\n    }\n\n    return newProps;\n  }\n\n  /** Update sub layers to highlight the hovered object */\n  protected _updateAutoHighlight(info: PickingInfo): void {\n    for (const layer of this.getSubLayers()) {\n      layer.updateAutoHighlight(info);\n    }\n  }\n\n  /** Override base Layer method */\n  protected _getAttributeManager(): AttributeManager | null {\n    return null;\n  }\n\n  /** (Internal) Called after an update to rerender sub layers */\n  protected _postUpdate(updateParams: UpdateParameters<this>, forceUpdate: boolean) {\n    // @ts-ignore (TS2531) this method is only called internally when internalState is defined\n    let subLayers = this.internalState.subLayers as Layer[];\n    const shouldUpdate = !subLayers || this.needsUpdate();\n    if (shouldUpdate) {\n      const subLayersList = this.renderLayers();\n      // Flatten the returned array, removing any null, undefined or false\n      // this allows layers to render sublayers conditionally\n      // (see CompositeLayer.renderLayers docs)\n      subLayers = flatten(subLayersList, Boolean) as Layer[];\n      // @ts-ignore (TS2531) this method is only called internally when internalState is defined\n      this.internalState.subLayers = subLayers;\n    }\n    debug(TRACE_RENDER_LAYERS, this, shouldUpdate, subLayers);\n\n    // populate reference to parent layer (this layer)\n    // NOTE: needs to be done even when reusing layers as the parent may have changed\n    for (const layer of subLayers) {\n      layer.parent = this;\n    }\n  }\n}\n"],"file":"composite-layer.js"}