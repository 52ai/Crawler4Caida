{"version":3,"sources":["../../../src/solid-polygon-layer/polygon-tesselator.ts"],"names":["PolygonTesselator","opts","fp64","IndexType","Uint32Array","attributes","positions","size","type","Float64Array","Float32Array","vertexValid","Uint8ClampedArray","indices","attributeName","subarray","vertexCount","externalIndices","buffers","value","length","data","getGeometry","Error","polygon","normalize","normalizedPolygon","Polygon","positionSize","resolution","getPositions","getHoleIndices","gridResolution","edgeTypes","wrapLongitude","maxLatitude","isCut","subPolygon","getGeometrySize","buffer","context","geometrySize","updateGeometryAttributes","vertexStart","indexStart","indexStarts","geometryIndex","_updateIndices","_updatePositions","_updateVertexValid","offset","typedArrayManager","target","i","getSurfaceIndices","preproject","allocate","copy","j","polygonPositions","x","y","z","holeIndices","set","fill","Tesselator","Array","isArray","Number","isFinite"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n// Handles tesselation of polygons with holes\n// - 2D surfaces\n// - 2D outlines\n// - 3D surfaces (top and sides only)\n// - 3D wireframes (not yet)\nimport * as Polygon from './polygon';\nimport {Tesselator} from '@deck.gl/core';\nimport {cutPolygonByGrid, cutPolygonByMercatorBounds} from '@math.gl/polygon';\n\nimport type {\n  PolygonGeometry,\n  NormalizedPolygonGeometry,\n  FlatComplexPolygonGeometry\n} from './polygon';\nimport type {TypedArray} from '@math.gl/core';\n\ntype GeometryUpdateContext = {\n  vertexStart: number;\n  indexStart: number;\n  geometrySize: number;\n  geometryIndex: number;\n};\n\ntype CutPolygon = FlatComplexPolygonGeometry & {\n  edgeTypes: number[];\n};\n\n// This class is set up to allow querying one attribute at a time\n// the way the AttributeManager expects it\nexport default class PolygonTesselator extends Tesselator<\n  PolygonGeometry,\n  NormalizedPolygonGeometry | CutPolygon[],\n  {\n    fp64?: boolean;\n    IndexType?: Uint32ArrayConstructor | Uint16ArrayConstructor;\n    resolution?: number;\n    wrapLongitude?: boolean;\n    preproject?: (xy: number[]) => number[];\n  }\n> {\n  constructor(opts) {\n    const {fp64, IndexType = Uint32Array} = opts;\n    super({\n      ...opts,\n      attributes: {\n        positions: {size: 3, type: fp64 ? Float64Array : Float32Array},\n        vertexValid: {type: Uint8ClampedArray, size: 1},\n        indices: {type: IndexType, size: 1}\n      }\n    });\n  }\n\n  /** Get attribute by name */\n  get(attributeName: string): TypedArray | null {\n    const {attributes} = this;\n    if (attributeName === 'indices') {\n      return attributes.indices && attributes.indices.subarray(0, this.vertexCount);\n    }\n\n    return attributes[attributeName];\n  }\n\n  /** Override base Tesselator method */\n  updateGeometry(opts) {\n    super.updateGeometry(opts);\n\n    const externalIndices = this.buffers.indices;\n    if (externalIndices) {\n      // @ts-ignore (2339) value is not defined on TypedArray (fall through)\n      this.vertexCount = (externalIndices.value || externalIndices).length;\n    } else if (this.data && !this.getGeometry) {\n      throw new Error('missing indices buffer');\n    }\n  }\n\n  /** Implement base Tesselator interface */\n  protected normalizeGeometry(polygon: PolygonGeometry): NormalizedPolygonGeometry | CutPolygon[] {\n    if (this.normalize) {\n      const normalizedPolygon = Polygon.normalize(polygon, this.positionSize);\n      if (this.opts.resolution) {\n        return cutPolygonByGrid(\n          Polygon.getPositions(normalizedPolygon),\n          Polygon.getHoleIndices(normalizedPolygon),\n          {\n            size: this.positionSize,\n            gridResolution: this.opts.resolution,\n            edgeTypes: true\n          }\n        ) as CutPolygon[];\n      }\n      if (this.opts.wrapLongitude) {\n        return cutPolygonByMercatorBounds(\n          Polygon.getPositions(normalizedPolygon),\n          Polygon.getHoleIndices(normalizedPolygon),\n          {\n            size: this.positionSize,\n            maxLatitude: 86,\n            edgeTypes: true\n          }\n        ) as CutPolygon[];\n      }\n      return normalizedPolygon;\n    }\n    // normalize is explicitly set to false, assume that user passed in already normalized polygons\n    return polygon as NormalizedPolygonGeometry;\n  }\n\n  /** Implement base Tesselator interface */\n  protected getGeometrySize(polygon: NormalizedPolygonGeometry | CutPolygon[]): number {\n    if (isCut(polygon)) {\n      let size = 0;\n      for (const subPolygon of polygon) {\n        size += this.getGeometrySize(subPolygon);\n      }\n      return size;\n    }\n    return Polygon.getPositions(polygon).length / this.positionSize;\n  }\n\n  /** Override base Tesselator method */\n  protected getGeometryFromBuffer(buffer) {\n    if (this.normalize || !this.buffers.indices) {\n      return super.getGeometryFromBuffer(buffer);\n    }\n    // we don't need to read the positions if no normalization/tesselation\n    return null;\n  }\n\n  /** Implement base Tesselator interface */\n  protected updateGeometryAttributes(\n    polygon: NormalizedPolygonGeometry | CutPolygon[] | null,\n    context: GeometryUpdateContext\n  ) {\n    if (polygon && isCut(polygon)) {\n      for (const subPolygon of polygon) {\n        const geometrySize = this.getGeometrySize(subPolygon);\n        context.geometrySize = geometrySize;\n        this.updateGeometryAttributes(subPolygon, context);\n        context.vertexStart += geometrySize;\n        context.indexStart = this.indexStarts[context.geometryIndex + 1];\n      }\n    } else {\n      this._updateIndices(polygon, context);\n      this._updatePositions(polygon, context);\n      this._updateVertexValid(polygon, context);\n    }\n  }\n\n  // Flatten the indices array\n  private _updateIndices(\n    polygon: NormalizedPolygonGeometry | null,\n    {geometryIndex, vertexStart: offset, indexStart}: GeometryUpdateContext\n  ) {\n    const {attributes, indexStarts, typedArrayManager} = this;\n\n    let target = attributes.indices;\n    if (!target || !polygon) {\n      return;\n    }\n    let i = indexStart;\n\n    // 1. get triangulated indices for the internal areas\n    const indices = Polygon.getSurfaceIndices(polygon, this.positionSize, this.opts.preproject);\n\n    // make sure the buffer is large enough\n    target = typedArrayManager.allocate(target, indexStart + indices.length, {\n      copy: true\n    });\n\n    // 2. offset each index by the number of indices in previous polygons\n    for (let j = 0; j < indices.length; j++) {\n      target[i++] = indices[j] + offset;\n    }\n\n    indexStarts[geometryIndex + 1] = indexStart + indices.length;\n    attributes.indices = target;\n  }\n\n  // Flatten out all the vertices of all the sub subPolygons\n  private _updatePositions(\n    polygon: NormalizedPolygonGeometry | null,\n    {vertexStart, geometrySize}: GeometryUpdateContext\n  ) {\n    const {\n      attributes: {positions},\n      positionSize\n    } = this;\n    if (!positions || !polygon) {\n      return;\n    }\n    const polygonPositions = Polygon.getPositions(polygon);\n\n    for (let i = vertexStart, j = 0; j < geometrySize; i++, j++) {\n      const x = polygonPositions[j * positionSize];\n      const y = polygonPositions[j * positionSize + 1];\n      const z = positionSize > 2 ? polygonPositions[j * positionSize + 2] : 0;\n\n      positions[i * 3] = x;\n      positions[i * 3 + 1] = y;\n      positions[i * 3 + 2] = z;\n    }\n  }\n\n  private _updateVertexValid(\n    polygon: NormalizedPolygonGeometry | null,\n    {vertexStart, geometrySize}: GeometryUpdateContext\n  ) {\n    const {positionSize} = this;\n    const vertexValid = this.attributes.vertexValid as TypedArray;\n    const holeIndices = polygon && Polygon.getHoleIndices(polygon);\n    /* We are reusing the some buffer for `nextPositions` by offseting one vertex\n     * to the left. As a result,\n     * the last vertex of each ring overlaps with the first vertex of the next ring.\n     * `vertexValid` is used to mark the end of each ring so we don't draw these\n     * segments:\n      positions      A0 A1 A2 A3 A4 B0 B1 B2 C0 ...\n      nextPositions  A1 A2 A3 A4 B0 B1 B2 C0 C1 ...\n      vertexValid    1  1  1  1  0  1  1  0  1 ...\n     */\n    if (polygon && (polygon as CutPolygon).edgeTypes) {\n      vertexValid.set((polygon as CutPolygon).edgeTypes, vertexStart);\n    } else {\n      vertexValid.fill(1, vertexStart, vertexStart + geometrySize);\n    }\n    if (holeIndices) {\n      for (let j = 0; j < holeIndices.length; j++) {\n        vertexValid[vertexStart + holeIndices[j] / positionSize - 1] = 0;\n      }\n    }\n    vertexValid[vertexStart + geometrySize - 1] = 0;\n  }\n}\n\nfunction isCut(polygon: NormalizedPolygonGeometry | CutPolygon[]): polygon is CutPolygon[] {\n  return Array.isArray(polygon) && polygon.length > 0 && !Number.isFinite(polygon[0]);\n}\n"],"file":"polygon-tesselator.js"}