{"version":3,"sources":["../../../src/polygon-layer/polygon-layer.ts"],"names":["defaultLineColor","defaultFillColor","defaultProps","stroked","filled","extruded","elevationScale","wireframe","_normalize","_windingOrder","lineWidthUnits","lineWidthScale","lineWidthMinPixels","lineWidthMaxPixels","Number","MAX_SAFE_INTEGER","lineJointRounded","lineMiterLimit","getPolygon","type","value","f","polygon","getFillColor","getLineColor","getLineWidth","getElevation","material","PolygonLayer","state","paths","props","getLineDashArray","log","removed","changeFlags","geometryChanged","dataChanged","updateTriggersChanged","all","Array","isArray","slice","pathsDiff","map","dataRange","data","getIndex","p","__source","index","replace","_getPaths","setState","positionFormat","positionSize","startRow","endRow","iterable","objectInfo","object","Polygon","normalize","holeIndices","positions","i","length","path","push","getSubLayerRow","_dataDiff","transitions","lineDashJustified","updateTriggers","FillLayer","getSubLayerClass","SolidPolygonLayer","StrokeLayer","PathLayer","polygonLayer","shouldRenderSubLayer","getSubLayerProps","id","lineColors","polygonLineLayer","widthUnits","widthScale","widthMinPixels","widthMaxPixels","jointRounded","miterLimit","dashJustified","_pathType","getWidth","getColor","getPath","getSubLayerAccessor","getDashArray","x","CompositeLayer"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {\n  Accessor,\n  AccessorFunction,\n  Color,\n  CompositeLayer,\n  CompositeLayerProps,\n  createIterable,\n  Layer,\n  LayersList,\n  log,\n  Unit,\n  Material,\n  UpdateParameters,\n  DefaultProps\n} from '@deck.gl/core';\nimport SolidPolygonLayer from '../solid-polygon-layer/solid-polygon-layer';\nimport PathLayer from '../path-layer/path-layer';\nimport * as Polygon from '../solid-polygon-layer/polygon';\nimport {replaceInRange} from '../utils';\n\n/**\n * All properties supported by `PolygonLayer`.\n */\nexport type PolygonLayerProps<DataT = any> = _PolygonLayerProps<DataT> & CompositeLayerProps<DataT>;\n\n/**\n * Properties added by `PolygonLayer`.\n */\ntype _PolygonLayerProps<DataT = any> = {\n  /**\n   * Whether to draw an outline around the polygon (solid fill).\n   *\n   * Note that both the outer polygon as well the outlines of any holes will be drawn.\n   *\n   * @default true\n   */\n  stroked?: boolean;\n\n  /**\n   * Whether to draw a filled polygon (solid fill).\n   *\n   * Note that only the area between the outer polygon and any holes will be filled.\n   *\n   * @default true\n   */\n  filled?: boolean;\n\n  /**\n   * Whether to extrude the polygons.\n   *\n   * Based on the elevations provided by the `getElevation` accessor.\n   *\n   * If set to `false`, all polygons will be flat, this generates less geometry and is faster\n   * than simply returning 0 from getElevation.\n   *\n   * @default false\n   */\n  extruded?: boolean;\n\n  /**\n   * Elevation multiplier.\n   *\n   * The final elevation is calculated by `elevationScale * getElevation(d)`.\n   * `elevationScale` is a handy property to scale all elevation without updating the data.\n   *\n   * @default 1\n   */\n  elevationScale?: number;\n\n  /**\n   * Whether to generate a line wireframe of the hexagon.\n   *\n   * The outline will have \"horizontal\" lines closing the top and bottom polygons and a vertical\n   * line (a \"strut\") for each vertex on the polygon.\n   *\n   * @default false\n   */\n  wireframe?: boolean;\n\n  /**\n   * The units of the line width, one of `meters`, `common`, and `pixels`.\n   *\n   * @default 'meters'\n   * @see Unit.\n   */\n  lineWidthUnits?: Unit;\n\n  /**\n   * The line width multiplier that multiplied to all outlines of `Polygon` and `MultiPolygon`\n   * features if the stroked attribute is true.\n   *\n   * @default 1\n   */\n  lineWidthScale?: number;\n\n  /**\n   * The minimum line width in pixels.\n   *\n   * @default 0\n   */\n  lineWidthMinPixels?: number;\n\n  /**\n   * The maximum line width in pixels\n   *\n   * @default Number.MAX_SAFE_INTEGER\n   */\n  lineWidthMaxPixels?: number;\n\n  /**\n   * Type of joint. If `true`, draw round joints. Otherwise draw miter joints.\n   *\n   * @default false\n   */\n  lineJointRounded?: boolean;\n\n  /**\n   * The maximum extent of a joint in ratio to the stroke width.\n   *\n   * Only works if `lineJointRounded` is false.\n   *\n   * @default 4\n   */\n  lineMiterLimit?: number;\n\n  lineDashJustified?: boolean;\n\n  /** Called on each object in the data stream to retrieve its corresponding polygon. */\n  getPolygon?: AccessorFunction<DataT, any>;\n\n  /**\n   * Fill collor value or accessor.\n   *\n   * @default [0, 0, 0, 255]\n   */\n  getFillColor?: Accessor<DataT, Color>;\n\n  /**\n   * Line color value or accessor.\n   *\n   * @default [0, 0, 0, 255]\n   */\n  getLineColor?: Accessor<DataT, Color>;\n\n  /**\n   * Line width value or accessor.\n   *\n   * @default [0, 0, 0, 255]\n   */\n  getLineWidth?: Accessor<DataT, number>;\n\n  /**\n   * Elevation valur or accessor.\n   *\n   * Only used if `extruded: true`.\n   *\n   * @default 1000\n   */\n  getElevation?: Accessor<DataT, number>;\n\n  /**\n   * This property has been moved to `PathStyleExtension`.\n   *\n   * @deprecated\n   */\n  getLineDashArray?: Accessor<DataT, number> | null;\n\n  /**\n   * If `false`, will skip normalizing the coordinates returned by `getPolygon`.\n   *\n   * **Note**: This prop is experimental\n   *\n   * @default true\n   */\n  _normalize?: boolean;\n\n  /**\n   * Specifies the winding order of rings in the polygon data.\n   *\n   * **Note**: This prop is experimental\n   *\n   * @default 'CW'\n   */\n  _windingOrder?: 'CW' | 'CCW';\n\n  /**\n   * Material settings for lighting effect. Applies if `extruded: true`.\n   *\n   * @default true\n   * @see https://deck.gl/docs/developer-guide/using-lighting\n   */\n  material?: Material;\n};\n\nconst defaultLineColor: [number, number, number, number] = [0, 0, 0, 255];\nconst defaultFillColor: [number, number, number, number] = [0, 0, 0, 255];\n\nconst defaultProps: DefaultProps<PolygonLayerProps> = {\n  stroked: true,\n  filled: true,\n  extruded: false,\n  elevationScale: 1,\n  wireframe: false,\n  _normalize: true,\n  _windingOrder: 'CW',\n\n  lineWidthUnits: 'meters',\n  lineWidthScale: 1,\n  lineWidthMinPixels: 0,\n  lineWidthMaxPixels: Number.MAX_SAFE_INTEGER,\n  lineJointRounded: false,\n  lineMiterLimit: 4,\n\n  getPolygon: {type: 'accessor', value: f => f.polygon},\n  // Polygon fill color\n  getFillColor: {type: 'accessor', value: defaultFillColor},\n  // Point, line and polygon outline color\n  getLineColor: {type: 'accessor', value: defaultLineColor},\n  // Line and polygon outline accessors\n  getLineWidth: {type: 'accessor', value: 1},\n  // Polygon extrusion accessor\n  getElevation: {type: 'accessor', value: 1000},\n\n  // Optional material for 'lighting' shader module\n  material: true\n};\n\n/** A composite layer that renders filled, stroked and/or extruded polygons. */\nexport default class PolygonLayer<DataT = any, ExtraProps = {}> extends CompositeLayer<\n  Required<_PolygonLayerProps<DataT>> & ExtraProps\n> {\n  static layerName = 'PolygonLayer';\n  static defaultProps = defaultProps;\n\n  initializeState(): void {\n    this.state = {\n      paths: []\n    };\n\n    if (this.props.getLineDashArray) {\n      log.removed('getLineDashArray', 'PathStyleExtension')();\n    }\n  }\n\n  updateState({changeFlags}: UpdateParameters<this>) {\n    const geometryChanged =\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPolygon));\n\n    if (geometryChanged && Array.isArray(changeFlags.dataChanged)) {\n      const paths = this.state.paths.slice();\n      const pathsDiff = changeFlags.dataChanged.map(dataRange =>\n        replaceInRange({\n          data: paths,\n          getIndex: p => p.__source.index,\n          dataRange,\n          replace: this._getPaths(dataRange)\n        })\n      );\n      this.setState({paths, pathsDiff});\n    } else if (geometryChanged) {\n      this.setState({\n        paths: this._getPaths(),\n        pathsDiff: null\n      });\n    }\n  }\n\n  private _getPaths(dataRange: {startRow?: number; endRow?: number} = {}): {path: number[]}[] {\n    const {data, getPolygon, positionFormat, _normalize} = this.props;\n    const paths: {path: number[]}[] = [];\n    const positionSize = positionFormat === 'XY' ? 2 : 3;\n    const {startRow, endRow} = dataRange;\n\n    const {iterable, objectInfo} = createIterable(data, startRow, endRow);\n    for (const object of iterable) {\n      objectInfo.index++;\n      let polygon = getPolygon(object, objectInfo);\n      if (_normalize) {\n        polygon = Polygon.normalize(polygon, positionSize);\n      }\n      const {holeIndices} = polygon;\n      const positions = polygon.positions || polygon;\n\n      if (holeIndices) {\n        // split the positions array into `holeIndices.length + 1` rings\n        // holeIndices[-1] falls back to 0\n        // holeIndices[holeIndices.length] falls back to positions.length\n        for (let i = 0; i <= holeIndices.length; i++) {\n          const path = positions.slice(holeIndices[i - 1] || 0, holeIndices[i] || positions.length);\n          paths.push(this.getSubLayerRow({path}, object, objectInfo.index));\n        }\n      } else {\n        paths.push(this.getSubLayerRow({path: positions}, object, objectInfo.index));\n      }\n    }\n    return paths;\n  }\n\n  /* eslint-disable complexity */\n  renderLayers(): Layer | null | LayersList {\n    // Layer composition props\n    const {\n      data,\n      _dataDiff,\n      stroked,\n      filled,\n      extruded,\n      wireframe,\n      _normalize,\n      _windingOrder,\n      elevationScale,\n      transitions,\n      positionFormat\n    } = this.props;\n\n    // Rendering props underlying layer\n    const {\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      lineJointRounded,\n      lineMiterLimit,\n      lineDashJustified\n    } = this.props;\n\n    // Accessor props for underlying layers\n    const {\n      getFillColor,\n      getLineColor,\n      getLineWidth,\n      getLineDashArray,\n      getElevation,\n      getPolygon,\n      updateTriggers,\n      material\n    } = this.props;\n\n    const {paths, pathsDiff} = this.state;\n\n    const FillLayer = this.getSubLayerClass('fill', SolidPolygonLayer);\n    const StrokeLayer = this.getSubLayerClass('stroke', PathLayer);\n\n    // Filled Polygon Layer\n    const polygonLayer =\n      this.shouldRenderSubLayer('fill', paths) &&\n      new FillLayer(\n        {\n          _dataDiff,\n          extruded,\n          elevationScale,\n\n          filled,\n          wireframe,\n          _normalize,\n          _windingOrder,\n\n          getElevation,\n          getFillColor,\n          getLineColor: extruded && wireframe ? getLineColor : defaultLineColor,\n\n          material,\n          transitions\n        },\n        this.getSubLayerProps({\n          id: 'fill',\n          updateTriggers: updateTriggers && {\n            getPolygon: updateTriggers.getPolygon,\n            getElevation: updateTriggers.getElevation,\n            getFillColor: updateTriggers.getFillColor,\n            // using a legacy API to invalid lineColor attributes\n            // if (extruded && wireframe) has changed\n            lineColors: extruded && wireframe,\n            getLineColor: updateTriggers.getLineColor\n          }\n        }),\n        {\n          data,\n          positionFormat,\n          getPolygon\n        }\n      );\n\n    // Polygon line layer\n    const polygonLineLayer =\n      !extruded &&\n      stroked &&\n      this.shouldRenderSubLayer('stroke', paths) &&\n      new StrokeLayer(\n        {\n          _dataDiff: pathsDiff && (() => pathsDiff),\n          widthUnits: lineWidthUnits,\n          widthScale: lineWidthScale,\n          widthMinPixels: lineWidthMinPixels,\n          widthMaxPixels: lineWidthMaxPixels,\n          jointRounded: lineJointRounded,\n          miterLimit: lineMiterLimit,\n          dashJustified: lineDashJustified,\n\n          // Already normalized\n          _pathType: 'loop',\n\n          transitions: transitions && {\n            getWidth: transitions.getLineWidth,\n            getColor: transitions.getLineColor,\n            getPath: transitions.getPolygon\n          },\n\n          getColor: this.getSubLayerAccessor(getLineColor),\n          getWidth: this.getSubLayerAccessor(getLineWidth),\n          getDashArray: this.getSubLayerAccessor(getLineDashArray)\n        },\n        this.getSubLayerProps({\n          id: 'stroke',\n          updateTriggers: updateTriggers && {\n            getWidth: updateTriggers.getLineWidth,\n            getColor: updateTriggers.getLineColor,\n            getDashArray: updateTriggers.getLineDashArray\n          }\n        }),\n        {\n          data: paths,\n          positionFormat,\n          getPath: x => x.path\n        }\n      );\n\n    return [\n      // If not extruded: flat fill layer is drawn below outlines\n      !extruded && polygonLayer,\n      polygonLineLayer,\n      // If extruded: draw fill layer last for correct blending behavior\n      extruded && polygonLayer\n    ];\n  }\n  /* eslint-enable complexity */\n}\n"],"file":"polygon-layer.js"}