{"version":3,"sources":["../../../src/icon-layer/icon-manager.ts"],"names":["DEFAULT_CANVAS_WIDTH","DEFAULT_BUFFER","noop","DEFAULT_TEXTURE_PARAMETERS","nextPowOfTwo","number","Math","pow","ceil","log2","resizeImage","ctx","imageData","width","height","canvas","clearRect","drawImage","getIconId","icon","id","url","resizeTexture","texture","parameters","oldWidth","oldHeight","newTexture","Texture2D","gl","targetY","delete","buildRowMapping","mapping","columns","yOffset","i","length","xOffset","x","y","buildMapping","icons","buffer","rowHeight","canvasWidth","push","max","canvasHeight","getDiffIcons","data","getIcon","cachedIcons","iterable","objectInfo","object","index","Error","source","sourceIndex","IconManager","onUpdate","onError","_texture","_externalTexture","_autoPacking","_mapping","loadOptions","autoPacking","iconAtlas","iconMapping","textureParameters","_loadOptions","undefined","_textureParameters","_pendingCount","document","Object","values","_buffer","_canvasWidth","_rowHeight","_xOffset","_yOffset","_canvasHeight","_canvas","createElement","_loadIcons","getContext","ImageLoader","then","setSubImageData","generateMipmap","catch","error","finally"],"mappings":"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","sourcesContent":["/* global document */\nimport GL from '@luma.gl/constants';\nimport {Texture2D, copyToTexture} from '@luma.gl/core';\nimport {ImageLoader} from '@loaders.gl/images';\nimport {load} from '@loaders.gl/core';\nimport {createIterable} from '@deck.gl/core';\n\nimport type {AccessorFunction} from '@deck.gl/core';\n\nconst DEFAULT_CANVAS_WIDTH = 1024;\nconst DEFAULT_BUFFER = 4;\n\nconst noop = () => {};\n\nconst DEFAULT_TEXTURE_PARAMETERS = {\n  [GL.TEXTURE_MIN_FILTER]: GL.LINEAR_MIPMAP_LINEAR,\n  // GL.LINEAR is the default value but explicitly set it here\n  [GL.TEXTURE_MAG_FILTER]: GL.LINEAR,\n  // for texture boundary artifact\n  [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n  [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE\n};\n\ntype IconDef = {\n  /** Width of the icon */\n  width: number;\n  /** Height of the icon */\n  height: number;\n  /** Horizontal position of icon anchor. Default: half width. */\n  anchorX?: number;\n  /** Vertical position of icon anchor. Default: half height. */\n  anchorY?: number;\n  /**\n   * Whether the icon is treated as a transparency mask.\n   * If `true`, color defined by `getColor` is applied.\n   * If `false`, pixel color from the icon image is applied.\n   * @default false\n   */\n  mask?: boolean;\n};\n\nexport type UnpackedIcon = {\n  /** Url to fetch the icon */\n  url: string;\n  /** Unique identifier of the icon. Icons of the same id are only fetched once. Fallback to `url` if not specified. */\n  id?: string;\n} & IconDef;\n\ntype PrepackedIcon = {\n  /** Left position of the icon on the atlas */\n  x: number;\n  /** Top position of the icon on the atlas */\n  y: number;\n} & IconDef;\n\nexport type IconMapping = Record<string, PrepackedIcon>;\n\nexport type LoadIconErrorContext = {\n  error: Error;\n  /** The URL that was trying to fetch */\n  url: string;\n  /** The original data object that requested this icon */\n  source: any;\n  /** The index of the original data object that requested this icon */\n  sourceIndex: number;\n  /** The load options used for the fetch */\n  loadOptions: any;\n};\n\nfunction nextPowOfTwo(number: number): number {\n  return Math.pow(2, Math.ceil(Math.log2(number)));\n}\n\n// update comment to create a new texture and copy original data.\nfunction resizeImage(\n  ctx: CanvasRenderingContext2D,\n  imageData: HTMLImageElement | ImageBitmap,\n  width: number,\n  height: number\n): HTMLImageElement | HTMLCanvasElement | ImageBitmap {\n  if (width === imageData.width && height === imageData.height) {\n    return imageData;\n  }\n\n  ctx.canvas.height = height;\n  ctx.canvas.width = width;\n\n  ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n\n  // image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight\n  ctx.drawImage(imageData, 0, 0, imageData.width, imageData.height, 0, 0, width, height);\n\n  return ctx.canvas;\n}\n\nfunction getIconId(icon: UnpackedIcon): string {\n  return icon && (icon.id || icon.url);\n}\n\n// resize texture without losing original data\nfunction resizeTexture(\n  texture: Texture2D,\n  width: number,\n  height: number,\n  parameters: any\n): Texture2D {\n  const oldWidth = texture.width;\n  const oldHeight = texture.height;\n\n  const newTexture = new Texture2D(texture.gl, {width, height, parameters});\n  copyToTexture(texture, newTexture, {\n    targetY: 0,\n    width: oldWidth,\n    height: oldHeight\n  });\n\n  texture.delete();\n  return newTexture;\n}\n\n// traverse icons in a row of icon atlas\n// extend each icon with left-top coordinates\nfunction buildRowMapping(\n  mapping: IconMapping,\n  columns: {\n    icon: UnpackedIcon;\n    xOffset: number;\n  }[],\n  yOffset: number\n): void {\n  for (let i = 0; i < columns.length; i++) {\n    const {icon, xOffset} = columns[i];\n    const id = getIconId(icon);\n    mapping[id] = {\n      ...icon,\n      x: xOffset,\n      y: yOffset\n    };\n  }\n}\n\n/**\n * Generate coordinate mapping to retrieve icon left-top position from an icon atlas\n */\nexport function buildMapping({\n  icons,\n  buffer,\n  mapping = {},\n  xOffset = 0,\n  yOffset = 0,\n  rowHeight = 0,\n  canvasWidth\n}: {\n  /** list of icon definitions */\n  icons: UnpackedIcon[];\n  /** add bleeding buffer to the right and bottom side of the image */\n  buffer: number;\n  /** right position of last icon in old mapping */\n  xOffset: number;\n  /** top position in last icon in old mapping */\n  yOffset: number;\n  /** height of the last icon's row */\n  rowHeight: number;\n  /** max width of canvas */\n  canvasWidth: number;\n  mapping: IconMapping;\n}): {\n  mapping: IconMapping;\n  rowHeight: number;\n  xOffset: number;\n  yOffset: number;\n  canvasWidth: number;\n  canvasHeight: number;\n} {\n  let columns: {\n    icon: UnpackedIcon;\n    xOffset: number;\n  }[] = [];\n  // Strategy to layout all the icons into a texture:\n  // traverse the icons sequentially, layout the icons from left to right, top to bottom\n  // when the sum of the icons width is equal or larger than canvasWidth,\n  // move to next row starting from total height so far plus max height of the icons in previous row\n  // row width is equal to canvasWidth\n  // row height is decided by the max height of the icons in that row\n  // mapping coordinates of each icon is its left-top position in the texture\n  for (let i = 0; i < icons.length; i++) {\n    const icon = icons[i];\n    const id = getIconId(icon);\n\n    if (!mapping[id]) {\n      const {height, width} = icon;\n\n      // fill one row\n      if (xOffset + width + buffer > canvasWidth) {\n        buildRowMapping(mapping, columns, yOffset);\n\n        xOffset = 0;\n        yOffset = rowHeight + yOffset + buffer;\n        rowHeight = 0;\n        columns = [];\n      }\n\n      columns.push({\n        icon,\n        xOffset\n      });\n\n      xOffset = xOffset + width + buffer;\n      rowHeight = Math.max(rowHeight, height);\n    }\n  }\n\n  if (columns.length > 0) {\n    buildRowMapping(mapping, columns, yOffset);\n  }\n\n  return {\n    mapping,\n    rowHeight,\n    xOffset,\n    yOffset,\n    canvasWidth,\n    canvasHeight: nextPowOfTwo(rowHeight + yOffset + buffer)\n  };\n}\n\n// extract icons from data\n// return icons should be unique, and not cached or cached but url changed\nexport function getDiffIcons(\n  data: any,\n  getIcon: AccessorFunction<any, UnpackedIcon> | null,\n  cachedIcons: Record<string, PrepackedIcon & {url?: string}>\n): Record<\n  string,\n  UnpackedIcon & {\n    source: any;\n    sourceIndex: number;\n  }\n> | null {\n  if (!data || !getIcon) {\n    return null;\n  }\n\n  cachedIcons = cachedIcons || {};\n  const icons = {};\n  const {iterable, objectInfo} = createIterable(data);\n  for (const object of iterable) {\n    objectInfo.index++;\n    const icon = getIcon(object, objectInfo);\n    const id = getIconId(icon);\n\n    if (!icon) {\n      throw new Error('Icon is missing.');\n    }\n\n    if (!icon.url) {\n      throw new Error('Icon url is missing.');\n    }\n\n    if (!icons[id] && (!cachedIcons[id] || icon.url !== cachedIcons[id].url)) {\n      icons[id] = {...icon, source: object, sourceIndex: objectInfo.index};\n    }\n  }\n  return icons;\n}\n\nexport default class IconManager {\n  gl: WebGLRenderingContext;\n\n  private onUpdate: () => void;\n  private onError: (context: LoadIconErrorContext) => void;\n  private _loadOptions: any = null;\n  private _texture: Texture2D | null = null;\n  private _externalTexture: Texture2D | null = null;\n  private _mapping: IconMapping = {};\n  private _textureParameters: Record<number, number> | null = null;\n\n  /** count of pending requests to fetch icons */\n  private _pendingCount: number = 0;\n\n  private _autoPacking: boolean = false;\n\n  // / internal state used for autoPacking\n\n  private _xOffset: number = 0;\n  private _yOffset: number = 0;\n  private _rowHeight: number = 0;\n  private _buffer: number = DEFAULT_BUFFER;\n  private _canvasWidth: number = DEFAULT_CANVAS_WIDTH;\n  private _canvasHeight: number = 0;\n  private _canvas: HTMLCanvasElement | null = null;\n\n  constructor(\n    gl: WebGLRenderingContext,\n    {\n      onUpdate = noop,\n      onError = noop\n    }: {\n      /** Callback when the texture updates */\n      onUpdate: () => void;\n      /** Callback when an error is encountered */\n      onError: (context: LoadIconErrorContext) => void;\n    }\n  ) {\n    this.gl = gl;\n    this.onUpdate = onUpdate;\n    this.onError = onError;\n  }\n\n  finalize(): void {\n    this._texture?.delete();\n  }\n\n  getTexture(): Texture2D | null {\n    return this._texture || this._externalTexture;\n  }\n\n  getIconMapping(icon: string | UnpackedIcon): PrepackedIcon {\n    const id = this._autoPacking ? getIconId(icon as UnpackedIcon) : (icon as string);\n    return this._mapping[id] || {};\n  }\n\n  setProps({\n    loadOptions,\n    autoPacking,\n    iconAtlas,\n    iconMapping,\n    textureParameters\n  }: {\n    loadOptions?: any;\n    autoPacking?: boolean;\n    iconAtlas?: Texture2D | null;\n    iconMapping?: IconMapping | null;\n    textureParameters?: Record<number, number> | null;\n  }) {\n    if (loadOptions) {\n      this._loadOptions = loadOptions;\n    }\n\n    if (autoPacking !== undefined) {\n      this._autoPacking = autoPacking;\n    }\n\n    if (iconMapping) {\n      this._mapping = iconMapping;\n    }\n\n    if (iconAtlas) {\n      this._texture?.delete();\n      this._texture = null;\n      this._externalTexture = iconAtlas;\n    }\n\n    if (textureParameters) {\n      this._textureParameters = textureParameters;\n    }\n  }\n\n  get isLoaded(): boolean {\n    return this._pendingCount === 0;\n  }\n\n  packIcons(data: any, getIcon: AccessorFunction<any, UnpackedIcon>): void {\n    if (!this._autoPacking || typeof document === 'undefined') {\n      return;\n    }\n\n    const icons = Object.values(getDiffIcons(data, getIcon, this._mapping) || {});\n\n    if (icons.length > 0) {\n      // generate icon mapping\n      const {mapping, xOffset, yOffset, rowHeight, canvasHeight} = buildMapping({\n        icons,\n        buffer: this._buffer,\n        canvasWidth: this._canvasWidth,\n        mapping: this._mapping,\n        rowHeight: this._rowHeight,\n        xOffset: this._xOffset,\n        yOffset: this._yOffset\n      });\n\n      this._rowHeight = rowHeight;\n      this._mapping = mapping;\n      this._xOffset = xOffset;\n      this._yOffset = yOffset;\n      this._canvasHeight = canvasHeight;\n\n      // create new texture\n      if (!this._texture) {\n        this._texture = new Texture2D(this.gl, {\n          width: this._canvasWidth,\n          height: this._canvasHeight,\n          parameters: this._textureParameters || DEFAULT_TEXTURE_PARAMETERS\n        });\n      }\n\n      if (this._texture.height !== this._canvasHeight) {\n        this._texture = resizeTexture(\n          this._texture,\n          this._canvasWidth,\n          this._canvasHeight,\n          this._textureParameters || DEFAULT_TEXTURE_PARAMETERS\n        );\n      }\n\n      this.onUpdate();\n\n      // load images\n      this._canvas = this._canvas || document.createElement('canvas');\n      this._loadIcons(icons);\n    }\n  }\n\n  private _loadIcons(\n    icons: (UnpackedIcon & {\n      source: any;\n      sourceIndex: number;\n    })[]\n  ): void {\n    // This method is only called in the auto packing case, where _canvas is defined\n    const ctx = this._canvas!.getContext('2d') as CanvasRenderingContext2D;\n\n    for (const icon of icons) {\n      this._pendingCount++;\n      load(icon.url, ImageLoader, this._loadOptions)\n        .then(imageData => {\n          const id = getIconId(icon);\n          const {x, y, width, height} = this._mapping[id];\n\n          const data = resizeImage(ctx, imageData, width, height);\n\n          this._texture.setSubImageData({\n            data,\n            x,\n            y,\n            width,\n            height\n          });\n\n          // Call to regenerate mipmaps after modifying texture(s)\n          this._texture.generateMipmap();\n\n          this.onUpdate();\n        })\n        .catch(error => {\n          this.onError({\n            url: icon.url,\n            source: icon.source,\n            sourceIndex: icon.sourceIndex,\n            loadOptions: this._loadOptions,\n            error\n          });\n        })\n        .finally(() => {\n          this._pendingCount--;\n        });\n    }\n  }\n}\n"],"file":"icon-manager.js"}