{"version":3,"sources":["../../../src/icon-layer/icon-layer.ts"],"names":["DEFAULT_COLOR","defaultProps","iconAtlas","type","value","async","iconMapping","sizeScale","min","billboard","sizeUnits","sizeMinPixels","sizeMaxPixels","Number","MAX_SAFE_INTEGER","alphaCutoff","max","getPosition","x","position","getIcon","icon","getColor","getSize","getAngle","getPixelOffset","onIconError","compare","optional","IconLayer","vs","fs","modules","project32","picking","state","iconManager","IconManager","context","gl","onUpdate","_onUpdate","bind","onError","_onError","attributeManager","getAttributeManager","addInstanced","instancePositions","size","fp64","use64bitPositions","transition","accessor","instanceSizes","defaultValue","instanceOffsets","transform","getInstanceOffset","instanceIconFrames","getInstanceIconFrame","instanceColorModes","getInstanceColorMode","instanceColors","props","colorFormat","length","normalized","instanceAngles","instancePixelOffset","params","oldProps","changeFlags","data","textureParameters","prePacked","internalState","isAsyncPropLoading","setProps","loadOptions","autoPacking","invalidate","dataChanged","updateTriggersChanged","all","packIcons","extensionsChanged","model","delete","_getModel","invalidateAll","isLoaded","finalize","uniforms","iconsTexture","getTexture","setUniforms","iconsTextureDim","width","height","UNIT","draw","positions","Model","getShaders","id","geometry","Geometry","drawMode","attributes","Float32Array","isInstanced","setNeedsRedraw","evt","getCurrentLayer","log","error","message","getIconMapping","anchorX","anchorY","mapping","mask","y","Layer"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport {Layer, project32, picking, log, UNIT} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry} from '@luma.gl/core';\n\nimport vs from './icon-layer-vertex.glsl';\nimport fs from './icon-layer-fragment.glsl';\nimport IconManager from './icon-manager';\n\nimport type {\n  LayerProps,\n  Accessor,\n  AccessorFunction,\n  Position,\n  Color,\n  Texture,\n  Unit,\n  UpdateParameters,\n  LayerContext,\n  DefaultProps\n} from '@deck.gl/core';\nimport type {UnpackedIcon, IconMapping, LoadIconErrorContext} from './icon-manager';\n\ntype _IconLayerProps<DataT> = {\n  /** A prepacked image that contains all icons. */\n  iconAtlas?: string | Texture;\n  /** Icon names mapped to icon definitions, or a URL to load such mapping from a JSON file. */\n  iconMapping?: string | IconMapping;\n\n  /** Icon size multiplier.\n   * @default 1\n   */\n  sizeScale?: number;\n  /**\n   * The units of the icon size, one of `meters`, `common`, and `pixels`.\n   *\n   * @default 'pixels'\n   */\n  sizeUnits?: Unit;\n  /**\n   * The minimum size in pixels. When using non-pixel `sizeUnits`, this prop can be used to prevent the icon from getting too small when zoomed out.\n   */\n  sizeMinPixels?: number;\n  /**\n   * The maximum size in pixels. When using non-pixel `sizeUnits`, this prop can be used to prevent the icon from getting too big when zoomed in.\n   */\n  sizeMaxPixels?: number;\n  /** If `true`, the icon always faces camera. Otherwise the icon faces up (z)\n   * @default true\n   */\n  billboard?: boolean;\n  /**\n   * Discard pixels whose opacity is below this threshold.\n   * A discarded pixel would create a \"hole\" in the icon that is not considered part of the object.\n   * @default 0.05\n   */\n  alphaCutoff?: number;\n\n  /** Anchor position accessor. */\n  getPosition?: Accessor<DataT, Position>;\n  /** Icon definition accessor.\n   * Should return the icon id if using pre-packed icons (`iconAtlas` + `iconMapping`).\n   * Return an object that defines the icon if using auto-packing.\n   */\n  getIcon?: AccessorFunction<DataT, string> | AccessorFunction<DataT, UnpackedIcon>;\n  /** Icon color accessor.\n   * @default [0, 0, 0, 255]\n   */\n  getColor?: Accessor<DataT, Color>;\n  /** Icon size accessor.\n   * @default 1\n   */\n  getSize?: Accessor<DataT, number>;\n  /** Icon rotation accessor, in degrees.\n   * @default 0\n   */\n  getAngle?: Accessor<DataT, number>;\n  /**\n   * Icon offsest accessor, in pixels.\n   * @default [0, 0]\n   */\n  getPixelOffset?: Accessor<DataT, [number, number]>;\n  /**\n   * Callback called if the attempt to fetch an icon returned by `getIcon` fails.\n   */\n  onIconError?: ((context: LoadIconErrorContext) => void) | null;\n\n  /** Customize the [texture parameters](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/texParameter). */\n  textureParameters?: Record<number, number> | null;\n};\n\nexport type IconLayerProps<DataT = any> = _IconLayerProps<DataT> & LayerProps<DataT>;\n\nconst DEFAULT_COLOR: [number, number, number, number] = [0, 0, 0, 255];\n\nconst defaultProps: DefaultProps<IconLayerProps> = {\n  iconAtlas: {type: 'image', value: null, async: true},\n  iconMapping: {type: 'object', value: {}, async: true},\n  sizeScale: {type: 'number', value: 1, min: 0},\n  billboard: true,\n  sizeUnits: 'pixels',\n  sizeMinPixels: {type: 'number', min: 0, value: 0}, //  min point radius in pixels\n  sizeMaxPixels: {type: 'number', min: 0, value: Number.MAX_SAFE_INTEGER}, // max point radius in pixels\n  alphaCutoff: {type: 'number', value: 0.05, min: 0, max: 1},\n\n  getPosition: {type: 'accessor', value: x => x.position},\n  getIcon: {type: 'accessor', value: x => x.icon},\n  getColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getSize: {type: 'accessor', value: 1},\n  getAngle: {type: 'accessor', value: 0},\n  getPixelOffset: {type: 'accessor', value: [0, 0]},\n\n  onIconError: {type: 'function', value: null, compare: false, optional: true}\n};\n\n/** Render raster icons at given coordinates. */\nexport default class IconLayer<DataT = any, ExtraPropsT = {}> extends Layer<\n  ExtraPropsT & Required<_IconLayerProps<DataT>>\n> {\n  static defaultProps = defaultProps;\n  static layerName = 'IconLayer';\n\n  state!: {\n    model?: Model;\n    iconManager: IconManager;\n  };\n\n  getShaders() {\n    return super.getShaders({vs, fs, modules: [project32, picking]});\n  }\n\n  initializeState() {\n    this.state = {\n      iconManager: new IconManager(this.context.gl, {\n        onUpdate: this._onUpdate.bind(this),\n        onError: this._onError.bind(this)\n      })\n    };\n\n    const attributeManager = this.getAttributeManager();\n    /* eslint-disable max-len */\n    attributeManager!.addInstanced({\n      instancePositions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instanceSizes: {\n        size: 1,\n        transition: true,\n        accessor: 'getSize',\n        defaultValue: 1\n      },\n      instanceOffsets: {\n        size: 2,\n        accessor: 'getIcon',\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        transform: this.getInstanceOffset\n      },\n      instanceIconFrames: {\n        size: 4,\n        accessor: 'getIcon',\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        transform: this.getInstanceIconFrame\n      },\n      instanceColorModes: {\n        size: 1,\n        type: GL.UNSIGNED_BYTE,\n        accessor: 'getIcon',\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        transform: this.getInstanceColorMode\n      },\n      instanceColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: true,\n        accessor: 'getColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      instanceAngles: {\n        size: 1,\n        transition: true,\n        accessor: 'getAngle'\n      },\n      instancePixelOffset: {\n        size: 2,\n        transition: true,\n        accessor: 'getPixelOffset'\n      }\n    });\n    /* eslint-enable max-len */\n  }\n\n  /* eslint-disable max-statements, complexity */\n  updateState(params: UpdateParameters<this>) {\n    super.updateState(params);\n    const {props, oldProps, changeFlags} = params;\n\n    const attributeManager = this.getAttributeManager();\n    const {iconAtlas, iconMapping, data, getIcon, textureParameters} = props;\n    const {iconManager} = this.state;\n\n    // internalState is always defined during updateState\n    const prePacked = iconAtlas || this.internalState!.isAsyncPropLoading('iconAtlas');\n    iconManager.setProps({\n      loadOptions: props.loadOptions,\n      autoPacking: !prePacked,\n      iconAtlas,\n      iconMapping: prePacked ? (iconMapping as IconMapping) : null,\n      textureParameters\n    });\n\n    // prepacked iconAtlas from user\n    if (prePacked) {\n      if (oldProps.iconMapping !== props.iconMapping) {\n        attributeManager!.invalidate('getIcon');\n      }\n    } else if (\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getIcon))\n    ) {\n      // Auto packing - getIcon is expected to return an object\n      iconManager.packIcons(data, getIcon as AccessorFunction<any, UnpackedIcon>);\n    }\n\n    if (changeFlags.extensionsChanged) {\n      const {gl} = this.context;\n      this.state.model?.delete();\n      this.state.model = this._getModel(gl);\n      attributeManager!.invalidateAll();\n    }\n  }\n  /* eslint-enable max-statements, complexity */\n\n  get isLoaded(): boolean {\n    return super.isLoaded && this.state.iconManager.isLoaded;\n  }\n\n  finalizeState(context: LayerContext): void {\n    super.finalizeState(context);\n    // Release resources held by the icon manager\n    this.state.iconManager.finalize();\n  }\n\n  draw({uniforms}): void {\n    const {sizeScale, sizeMinPixels, sizeMaxPixels, sizeUnits, billboard, alphaCutoff} = this.props;\n    const {iconManager} = this.state;\n\n    const iconsTexture = iconManager.getTexture();\n    if (iconsTexture) {\n      this.state.model\n        .setUniforms(uniforms)\n        .setUniforms({\n          iconsTexture,\n          iconsTextureDim: [iconsTexture.width, iconsTexture.height],\n          sizeUnits: UNIT[sizeUnits],\n          sizeScale,\n          sizeMinPixels,\n          sizeMaxPixels,\n          billboard,\n          alphaCutoff\n        })\n        .draw();\n    }\n  }\n\n  protected _getModel(gl: WebGLRenderingContext): Model {\n    // The icon-layer vertex shader uses 2d positions\n    // specifed via: attribute vec2 positions;\n    const positions = [-1, -1, -1, 1, 1, 1, 1, -1];\n\n    return new Model(gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: GL.TRIANGLE_FAN,\n        attributes: {\n          // The size must be explicitly passed here otherwise luma.gl\n          // will default to assuming that positions are 3D (x,y,z)\n          positions: {\n            size: 2,\n            value: new Float32Array(positions)\n          }\n        }\n      }),\n      isInstanced: true\n    });\n  }\n\n  private _onUpdate(): void {\n    this.setNeedsRedraw();\n  }\n\n  private _onError(evt: LoadIconErrorContext): void {\n    const onIconError = this.getCurrentLayer()?.props.onIconError;\n    if (onIconError) {\n      onIconError(evt);\n    } else {\n      log.error(evt.error.message)();\n    }\n  }\n\n  protected getInstanceOffset(icon: string): number[] {\n    const {\n      width,\n      height,\n      anchorX = width / 2,\n      anchorY = height / 2\n    } = this.state.iconManager.getIconMapping(icon);\n    return [width / 2 - anchorX, height / 2 - anchorY];\n  }\n\n  protected getInstanceColorMode(icon: string): number {\n    const mapping = this.state.iconManager.getIconMapping(icon);\n    return mapping.mask ? 1 : 0;\n  }\n\n  protected getInstanceIconFrame(icon: string): number[] {\n    const {x, y, width, height} = this.state.iconManager.getIconMapping(icon);\n    return [x, y, width, height];\n  }\n}\n"],"file":"icon-layer.js"}