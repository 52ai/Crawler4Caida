{"version":3,"sources":["../../../../src/text-layer/text-background-layer/text-background-layer.ts"],"names":["defaultProps","billboard","sizeScale","sizeUnits","sizeMinPixels","sizeMaxPixels","Number","MAX_SAFE_INTEGER","padding","type","value","getPosition","x","position","getSize","getAngle","getPixelOffset","getBoundingRect","getFillColor","getLineColor","getLineWidth","TextBackgroundLayer","vs","fs","modules","project32","picking","getAttributeManager","addInstanced","instancePositions","size","fp64","use64bitPositions","transition","accessor","instanceSizes","defaultValue","instanceAngles","instanceRects","instancePixelOffsets","instanceFillColors","normalized","instanceLineColors","instanceLineWidths","params","changeFlags","extensionsChanged","gl","context","state","model","delete","_getModel","invalidateAll","uniforms","props","length","setUniforms","stroked","Boolean","UNIT","draw","positions","Model","getShaders","id","geometry","Geometry","drawMode","vertexCount","attributes","Float32Array","isInstanced","Layer"],"mappings":"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","sourcesContent":["import {Layer, project32, picking, UNIT} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry} from '@luma.gl/core';\n\nimport vs from './text-background-layer-vertex.glsl';\nimport fs from './text-background-layer-fragment.glsl';\n\nimport type {\n  LayerProps,\n  Accessor,\n  Unit,\n  Position,\n  Color,\n  UpdateParameters,\n  DefaultProps\n} from '@deck.gl/core';\n\ntype _TextBackgroundLayerProps<DataT> = {\n  billboard?: boolean;\n  sizeScale?: number;\n  sizeUnits?: Unit;\n  sizeMinPixels?: number;\n  sizeMaxPixels?: number;\n\n  padding?: [number, number] | [number, number, number, number];\n\n  getPosition?: Accessor<DataT, Position>;\n  getSize?: Accessor<DataT, number>;\n  getAngle?: Accessor<DataT, number>;\n  getPixelOffset?: Accessor<DataT, [number, number]>;\n  getBoundingRect?: Accessor<DataT, [number, number, number, number]>;\n  getFillColor?: Accessor<DataT, Color>;\n  getLineColor?: Accessor<DataT, Color>;\n  getLineWidth?: Accessor<DataT, number>;\n};\n\nexport type TextBackgroundLayerProps<DataT = any> = _TextBackgroundLayerProps<DataT> &\n  LayerProps<DataT>;\n\nconst defaultProps: DefaultProps<TextBackgroundLayerProps> = {\n  billboard: true,\n  sizeScale: 1,\n  sizeUnits: 'pixels',\n  sizeMinPixels: 0,\n  sizeMaxPixels: Number.MAX_SAFE_INTEGER,\n\n  padding: {type: 'array', value: [0, 0, 0, 0]},\n\n  getPosition: {type: 'accessor', value: x => x.position},\n  getSize: {type: 'accessor', value: 1},\n  getAngle: {type: 'accessor', value: 0},\n  getPixelOffset: {type: 'accessor', value: [0, 0]},\n  getBoundingRect: {type: 'accessor', value: [0, 0, 0, 0]},\n  getFillColor: {type: 'accessor', value: [0, 0, 0, 255]},\n  getLineColor: {type: 'accessor', value: [0, 0, 0, 255]},\n  getLineWidth: {type: 'accessor', value: 1}\n};\n\nexport default class TextBackgroundLayer<DataT = any, ExtraPropsT = {}> extends Layer<\n  ExtraPropsT & Required<_TextBackgroundLayerProps<DataT>>\n> {\n  static defaultProps = defaultProps;\n  static layerName = 'TextBackgroundLayer';\n\n  state!: {\n    model: Model;\n  };\n\n  getShaders() {\n    return super.getShaders({vs, fs, modules: [project32, picking]});\n  }\n\n  initializeState() {\n    this.getAttributeManager()!.addInstanced({\n      instancePositions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instanceSizes: {\n        size: 1,\n        transition: true,\n        accessor: 'getSize',\n        defaultValue: 1\n      },\n      instanceAngles: {\n        size: 1,\n        transition: true,\n        accessor: 'getAngle'\n      },\n      instanceRects: {\n        size: 4,\n        accessor: 'getBoundingRect'\n      },\n      instancePixelOffsets: {\n        size: 2,\n        transition: true,\n        accessor: 'getPixelOffset'\n      },\n      instanceFillColors: {\n        size: 4,\n        transition: true,\n        normalized: true,\n        type: GL.UNSIGNED_BYTE,\n        accessor: 'getFillColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceLineColors: {\n        size: 4,\n        transition: true,\n        normalized: true,\n        type: GL.UNSIGNED_BYTE,\n        accessor: 'getLineColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceLineWidths: {\n        size: 1,\n        transition: true,\n        accessor: 'getLineWidth',\n        defaultValue: 1\n      }\n    });\n  }\n\n  updateState(params: UpdateParameters<this>) {\n    super.updateState(params);\n    const {changeFlags} = params;\n    if (changeFlags.extensionsChanged) {\n      const {gl} = this.context;\n      this.state.model?.delete();\n      this.state.model = this._getModel(gl);\n      this.getAttributeManager()!.invalidateAll();\n    }\n  }\n\n  draw({uniforms}) {\n    const {billboard, sizeScale, sizeUnits, sizeMinPixels, sizeMaxPixels, getLineWidth} =\n      this.props;\n    let {padding} = this.props;\n\n    if (padding.length < 4) {\n      padding = [padding[0], padding[1], padding[0], padding[1]];\n    }\n\n    this.state.model\n      .setUniforms(uniforms)\n      .setUniforms({\n        billboard,\n        stroked: Boolean(getLineWidth),\n        padding,\n        sizeUnits: UNIT[sizeUnits],\n        sizeScale,\n        sizeMinPixels,\n        sizeMaxPixels\n      })\n      .draw();\n  }\n\n  protected _getModel(gl: WebGLRenderingContext): Model {\n    // a square that minimally cover the unit circle\n    const positions = [0, 0, 1, 0, 1, 1, 0, 1];\n\n    return new Model(gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: GL.TRIANGLE_FAN,\n        vertexCount: 4,\n        attributes: {\n          positions: {size: 2, value: new Float32Array(positions)}\n        }\n      }),\n      isInstanced: true\n    });\n  }\n}\n"],"file":"text-background-layer.js"}