{"version":3,"sources":["../../../src/bitmap-layer/create-mesh.ts"],"names":["DEFAULT_INDICES","Uint16Array","DEFAULT_TEX_COORDS","Float32Array","createMesh","bounds","resolution","createQuad","maxXSpan","Math","max","abs","maxYSpan","uCount","ceil","vCount","vertexCount","indices","Uint32Array","texCoords","positions","Float64Array","vertex","index","u","ut","v","vt","p","interpolateQuad","i","length","quad"],"mappings":";;;;;;;AAAA;;AAEA,IAAMA,eAAe,GAAG,IAAIC,WAAJ,CAAgB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,CAAhB,CAAxB;AACA,IAAMC,kBAAkB,GAAG,IAAIC,YAAJ,CAAiB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,CAAjB,CAA3B;;AASe,SAASC,UAAT,CAAoBC,MAApB,EAA4BC,UAA5B,EAAwC;AACrD,MAAI,CAACA,UAAL,EAAiB;AACf,WAAOC,UAAU,CAACF,MAAD,CAAjB;AACD;;AACD,MAAMG,QAAQ,GAAGC,IAAI,CAACC,GAAL,CACfD,IAAI,CAACE,GAAL,CAASN,MAAM,CAAC,CAAD,CAAN,CAAU,CAAV,IAAeA,MAAM,CAAC,CAAD,CAAN,CAAU,CAAV,CAAxB,CADe,EAEfI,IAAI,CAACE,GAAL,CAASN,MAAM,CAAC,CAAD,CAAN,CAAU,CAAV,IAAeA,MAAM,CAAC,CAAD,CAAN,CAAU,CAAV,CAAxB,CAFe,CAAjB;AAIA,MAAMO,QAAQ,GAAGH,IAAI,CAACC,GAAL,CACfD,IAAI,CAACE,GAAL,CAASN,MAAM,CAAC,CAAD,CAAN,CAAU,CAAV,IAAeA,MAAM,CAAC,CAAD,CAAN,CAAU,CAAV,CAAxB,CADe,EAEfI,IAAI,CAACE,GAAL,CAASN,MAAM,CAAC,CAAD,CAAN,CAAU,CAAV,IAAeA,MAAM,CAAC,CAAD,CAAN,CAAU,CAAV,CAAxB,CAFe,CAAjB;AAIA,MAAMQ,MAAM,GAAGJ,IAAI,CAACK,IAAL,CAAUN,QAAQ,GAAGF,UAArB,IAAmC,CAAlD;AACA,MAAMS,MAAM,GAAGN,IAAI,CAACK,IAAL,CAAUF,QAAQ,GAAGN,UAArB,IAAmC,CAAlD;AAEA,MAAMU,WAAW,GAAG,CAACH,MAAM,GAAG,CAAV,KAAgBE,MAAM,GAAG,CAAzB,IAA8B,CAAlD;AACA,MAAME,OAAO,GAAG,IAAIC,WAAJ,CAAgBF,WAAhB,CAAhB;AACA,MAAMG,SAAS,GAAG,IAAIhB,YAAJ,CAAiBU,MAAM,GAAGE,MAAT,GAAkB,CAAnC,CAAlB;AACA,MAAMK,SAAS,GAAG,IAAIC,YAAJ,CAAiBR,MAAM,GAAGE,MAAT,GAAkB,CAAnC,CAAlB;AAGA,MAAIO,MAAM,GAAG,CAAb;AACA,MAAIC,KAAK,GAAG,CAAZ;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGX,MAApB,EAA4BW,CAAC,EAA7B,EAAiC;AAC/B,QAAMC,EAAE,GAAGD,CAAC,IAAIX,MAAM,GAAG,CAAb,CAAZ;;AACA,SAAK,IAAIa,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGX,MAApB,EAA4BW,CAAC,EAA7B,EAAiC;AAC/B,UAAMC,EAAE,GAAGD,CAAC,IAAIX,MAAM,GAAG,CAAb,CAAZ;AACA,UAAMa,CAAC,GAAGC,eAAe,CAACxB,MAAD,EAASoB,EAAT,EAAaE,EAAb,CAAzB;AAEAP,MAAAA,SAAS,CAACE,MAAM,GAAG,CAAT,GAAa,CAAd,CAAT,GAA4BM,CAAC,CAAC,CAAD,CAA7B;AACAR,MAAAA,SAAS,CAACE,MAAM,GAAG,CAAT,GAAa,CAAd,CAAT,GAA4BM,CAAC,CAAC,CAAD,CAA7B;AACAR,MAAAA,SAAS,CAACE,MAAM,GAAG,CAAT,GAAa,CAAd,CAAT,GAA4BM,CAAC,CAAC,CAAD,CAAD,IAAQ,CAApC;AAEAT,MAAAA,SAAS,CAACG,MAAM,GAAG,CAAT,GAAa,CAAd,CAAT,GAA4BG,EAA5B;AACAN,MAAAA,SAAS,CAACG,MAAM,GAAG,CAAT,GAAa,CAAd,CAAT,GAA4B,IAAIK,EAAhC;;AAEA,UAAIH,CAAC,GAAG,CAAJ,IAASE,CAAC,GAAG,CAAjB,EAAoB;AAClBT,QAAAA,OAAO,CAACM,KAAK,EAAN,CAAP,GAAmBD,MAAM,GAAGP,MAA5B;AACAE,QAAAA,OAAO,CAACM,KAAK,EAAN,CAAP,GAAmBD,MAAM,GAAGP,MAAT,GAAkB,CAArC;AACAE,QAAAA,OAAO,CAACM,KAAK,EAAN,CAAP,GAAmBD,MAAM,GAAG,CAA5B;AACAL,QAAAA,OAAO,CAACM,KAAK,EAAN,CAAP,GAAmBD,MAAM,GAAGP,MAA5B;AACAE,QAAAA,OAAO,CAACM,KAAK,EAAN,CAAP,GAAmBD,MAAM,GAAG,CAA5B;AACAL,QAAAA,OAAO,CAACM,KAAK,EAAN,CAAP,GAAmBD,MAAnB;AACD;;AAEDA,MAAAA,MAAM;AACP;AACF;;AACD,SAAO;AACLN,IAAAA,WAAW,EAAXA,WADK;AAELI,IAAAA,SAAS,EAATA,SAFK;AAGLH,IAAAA,OAAO,EAAPA,OAHK;AAILE,IAAAA,SAAS,EAATA;AAJK,GAAP;AAMD;;AAED,SAASZ,UAAT,CAAoBF,MAApB,EAA4B;AAC1B,MAAMe,SAAS,GAAG,IAAIC,YAAJ,CAAiB,EAAjB,CAAlB;;AAEA,OAAK,IAAIS,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGzB,MAAM,CAAC0B,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACtCV,IAAAA,SAAS,CAACU,CAAC,GAAG,CAAJ,GAAQ,CAAT,CAAT,GAAuBzB,MAAM,CAACyB,CAAD,CAAN,CAAU,CAAV,CAAvB;AACAV,IAAAA,SAAS,CAACU,CAAC,GAAG,CAAJ,GAAQ,CAAT,CAAT,GAAuBzB,MAAM,CAACyB,CAAD,CAAN,CAAU,CAAV,CAAvB;AACAV,IAAAA,SAAS,CAACU,CAAC,GAAG,CAAJ,GAAQ,CAAT,CAAT,GAAuBzB,MAAM,CAACyB,CAAD,CAAN,CAAU,CAAV,KAAgB,CAAvC;AACD;;AAED,SAAO;AACLd,IAAAA,WAAW,EAAE,CADR;AAELI,IAAAA,SAAS,EAATA,SAFK;AAGLH,IAAAA,OAAO,EAAEjB,eAHJ;AAILmB,IAAAA,SAAS,EAAEjB;AAJN,GAAP;AAMD;;AAED,SAAS2B,eAAT,CAAyBG,IAAzB,EAA+BP,EAA/B,EAAmCE,EAAnC,EAAuC;AACrC,SAAO,gBAAK,gBAAKK,IAAI,CAAC,CAAD,CAAT,EAAcA,IAAI,CAAC,CAAD,CAAlB,EAAuBL,EAAvB,CAAL,EAAiC,gBAAKK,IAAI,CAAC,CAAD,CAAT,EAAcA,IAAI,CAAC,CAAD,CAAlB,EAAuBL,EAAvB,CAAjC,EAA6DF,EAA7D,CAAP;AACD","sourcesContent":["import {lerp} from '@math.gl/core';\n\nconst DEFAULT_INDICES = new Uint16Array([0, 2, 1, 0, 3, 2]);\nconst DEFAULT_TEX_COORDS = new Float32Array([0, 1, 0, 0, 1, 0, 1, 1]);\n\n/*\n  1 ---- 2\n  |      |\n  |      |\n  0 ---- 3\n*/\n/* eslint-disable max-statements */\nexport default function createMesh(bounds, resolution) {\n  if (!resolution) {\n    return createQuad(bounds);\n  }\n  const maxXSpan = Math.max(\n    Math.abs(bounds[0][0] - bounds[3][0]),\n    Math.abs(bounds[1][0] - bounds[2][0])\n  );\n  const maxYSpan = Math.max(\n    Math.abs(bounds[1][1] - bounds[0][1]),\n    Math.abs(bounds[2][1] - bounds[3][1])\n  );\n  const uCount = Math.ceil(maxXSpan / resolution) + 1;\n  const vCount = Math.ceil(maxYSpan / resolution) + 1;\n\n  const vertexCount = (uCount - 1) * (vCount - 1) * 6;\n  const indices = new Uint32Array(vertexCount);\n  const texCoords = new Float32Array(uCount * vCount * 2);\n  const positions = new Float64Array(uCount * vCount * 3);\n\n  // Tesselate\n  let vertex = 0;\n  let index = 0;\n  for (let u = 0; u < uCount; u++) {\n    const ut = u / (uCount - 1);\n    for (let v = 0; v < vCount; v++) {\n      const vt = v / (vCount - 1);\n      const p = interpolateQuad(bounds, ut, vt);\n\n      positions[vertex * 3 + 0] = p[0];\n      positions[vertex * 3 + 1] = p[1];\n      positions[vertex * 3 + 2] = p[2] || 0;\n\n      texCoords[vertex * 2 + 0] = ut;\n      texCoords[vertex * 2 + 1] = 1 - vt;\n\n      if (u > 0 && v > 0) {\n        indices[index++] = vertex - vCount;\n        indices[index++] = vertex - vCount - 1;\n        indices[index++] = vertex - 1;\n        indices[index++] = vertex - vCount;\n        indices[index++] = vertex - 1;\n        indices[index++] = vertex;\n      }\n\n      vertex++;\n    }\n  }\n  return {\n    vertexCount,\n    positions,\n    indices,\n    texCoords\n  };\n}\n\nfunction createQuad(bounds) {\n  const positions = new Float64Array(12);\n  // [[minX, minY], [minX, maxY], [maxX, maxY], [maxX, minY]]\n  for (let i = 0; i < bounds.length; i++) {\n    positions[i * 3 + 0] = bounds[i][0];\n    positions[i * 3 + 1] = bounds[i][1];\n    positions[i * 3 + 2] = bounds[i][2] || 0;\n  }\n\n  return {\n    vertexCount: 6,\n    positions,\n    indices: DEFAULT_INDICES,\n    texCoords: DEFAULT_TEX_COORDS\n  };\n}\n\nfunction interpolateQuad(quad, ut, vt) {\n  return lerp(lerp(quad[0], quad[1], vt), lerp(quad[3], quad[2], vt), ut);\n}\n"],"file":"create-mesh.js"}