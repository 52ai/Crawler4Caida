{"version":3,"sources":["../../../src/bitmap-layer/bitmap-layer.ts"],"names":["defaultProps","image","type","value","async","bounds","compare","_imageCoordinateSystem","COORDINATE_SYSTEM","DEFAULT","desaturate","min","max","transparentColor","tintColor","BitmapLayer","vs","fs","modules","project32","picking","attributeManager","getAttributeManager","remove","noAlloc","add","indices","size","isIndexed","update","attribute","state","mesh","positions","fp64","use64bitPositions","texCoords","props","oldProps","changeFlags","extensionsChanged","gl","context","model","delete","_getModel","invalidateAll","oldMesh","_createMesh","setVertexCount","vertexCount","key","invalidate","setState","_getCoordinateUniforms","params","info","color","bitmap","width","height","index","uv","unpackUVsFromRGB","pixel","Math","floor","disablePicking","encodePickingColor","normalizedBounds","isRectangularBounds","viewport","resolution","Model","getShaders","id","geometry","Geometry","drawMode","isInstanced","opts","uniforms","moduleParameters","coordinateConversion","pickingActive","setUniforms","bitmapTexture","map","x","slice","draw","LNGLAT","CARTESIAN","imageCoordinateSystem","Error","defaultImageCoordinateSystem","bottomLeft","topRight","Layer","u","v","fracUV","vFrac","uFrac","Number","isFinite"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport GL from '@luma.gl/constants';\nimport {\n  Layer,\n  project32,\n  picking,\n  CoordinateSystem,\n  COORDINATE_SYSTEM,\n  LayerProps,\n  PickingInfo,\n  GetPickingInfoParams,\n  UpdateParameters,\n  Color,\n  Texture,\n  Position,\n  DefaultProps\n} from '@deck.gl/core';\nimport {Model, Geometry} from '@luma.gl/core';\nimport {lngLatToWorld} from '@math.gl/web-mercator';\n\nimport createMesh from './create-mesh';\n\nimport vs from './bitmap-layer-vertex';\nimport fs from './bitmap-layer-fragment';\n\nconst defaultProps: DefaultProps<BitmapLayerProps> = {\n  image: {type: 'image', value: null, async: true},\n  bounds: {type: 'array', value: [1, 0, 0, 1], compare: true},\n  _imageCoordinateSystem: COORDINATE_SYSTEM.DEFAULT,\n\n  desaturate: {type: 'number', min: 0, max: 1, value: 0},\n  // More context: because of the blending mode we're using for ground imagery,\n  // alpha is not effective when blending the bitmap layers with the base map.\n  // Instead we need to manually dim/blend rgb values with a background color.\n  transparentColor: {type: 'color', value: [0, 0, 0, 0]},\n  tintColor: {type: 'color', value: [255, 255, 255]}\n};\n\n/** All properties supported by BitmapLayer. */\nexport type BitmapLayerProps = _BitmapLayerProps & LayerProps;\nexport type BitmapBoundingBox =\n  | [left: number, bottom: number, right: number, top: number]\n  | [Position, Position, Position, Position];\n\n/** Properties added by BitmapLayer. */\ntype _BitmapLayerProps = {\n  /**\n   * The image to display.\n   *\n   * @default null\n   */\n  image?: string | Texture | null;\n\n  /**\n   * Supported formats:\n   *  - Coordinates of the bounding box of the bitmap `[left, bottom, right, top]`\n   *  - Coordinates of four corners of the bitmap, should follow the sequence of `[[left, bottom], [left, top], [right, top], [right, bottom]]`.\n   *   Each position could optionally contain a third component `z`.\n   * @default [1, 0, 0, 1]\n   */\n  bounds?: BitmapBoundingBox;\n\n  /**\n   * > Note: this prop is experimental.\n   *\n   * Specifies how image coordinates should be geographically interpreted.\n   * @default COORDINATE_SYSTEM.DEFAULT\n   */\n  _imageCoordinateSystem?: CoordinateSystem;\n\n  /**\n   * The desaturation of the bitmap. Between `[0, 1]`.\n   * @default 0\n   */\n  desaturate?: number;\n\n  /**\n   * The color to use for transparent pixels, in `[r, g, b, a]`.\n   * @default [0, 0, 0, 0]\n   */\n  transparentColor?: Color;\n\n  /**\n   * The color to tint the bitmap by, in `[r, g, b]`.\n   * @default [255, 255, 255]\n   */\n  tintColor?: Color;\n\n  /** Customize the [texture parameters](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/texParameter). */\n  textureParameters?: Record<number, number> | null;\n};\n\n/** Render a bitmap at specified boundaries. */\nexport default class BitmapLayer<ExtraPropsT = {}> extends Layer<\n  ExtraPropsT & Required<_BitmapLayerProps>\n> {\n  static layerName = 'BitmapLayer';\n  static defaultProps = defaultProps;\n\n  state!: Layer['state'] & {\n    disablePicking?: boolean;\n    model?: Model;\n    mesh?: any;\n    coordinateConversion?: number;\n    bounds?: number[];\n  };\n\n  getShaders() {\n    return super.getShaders({vs, fs, modules: [project32, picking]});\n  }\n\n  initializeState() {\n    const attributeManager = this.getAttributeManager()!;\n\n    attributeManager.remove(['instancePickingColors']);\n    const noAlloc = true;\n\n    attributeManager.add({\n      indices: {\n        size: 1,\n        isIndexed: true,\n        update: attribute => (attribute.value = this.state.mesh.indices),\n        noAlloc\n      },\n      positions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        update: attribute => (attribute.value = this.state.mesh.positions),\n        noAlloc\n      },\n      texCoords: {\n        size: 2,\n        update: attribute => (attribute.value = this.state.mesh.texCoords),\n        noAlloc\n      }\n    });\n  }\n\n  updateState({props, oldProps, changeFlags}: UpdateParameters<this>): void {\n    // setup model first\n    const attributeManager = this.getAttributeManager()!;\n\n    if (changeFlags.extensionsChanged) {\n      const {gl} = this.context;\n      this.state.model?.delete();\n      this.state.model = this._getModel(gl);\n      attributeManager.invalidateAll();\n    }\n\n    if (props.bounds !== oldProps.bounds) {\n      const oldMesh = this.state.mesh;\n      const mesh = this._createMesh();\n      this.state.model.setVertexCount(mesh.vertexCount);\n      for (const key in mesh) {\n        if (oldMesh && oldMesh[key] !== mesh[key]) {\n          attributeManager.invalidate(key);\n        }\n      }\n      this.setState({mesh, ...this._getCoordinateUniforms()});\n    } else if (props._imageCoordinateSystem !== oldProps._imageCoordinateSystem) {\n      this.setState(this._getCoordinateUniforms());\n    }\n  }\n\n  getPickingInfo(params: GetPickingInfoParams): PickingInfo {\n    const {image} = this.props;\n    const info: PickingInfo & {bitmap?: any} = params.info;\n\n    if (!info.color || !image) {\n      info.bitmap = null;\n      return info;\n    }\n\n    const {width, height} = image as Texture;\n\n    // Picking color doesn't represent object index in this layer\n    info.index = 0;\n\n    // Calculate uv and pixel in bitmap\n    const uv = unpackUVsFromRGB(info.color);\n\n    const pixel = [Math.floor(uv[0] * (width as number)), Math.floor(uv[1] * (height as number))];\n\n    info.bitmap = {\n      size: {width, height}, // Size of bitmap\n      uv, // Floating point precision in 0-1 range\n      pixel // Truncated to integer and scaled to pixel size\n    };\n\n    return info;\n  }\n\n  // Override base Layer multi-depth picking logic\n  disablePickingIndex() {\n    this.setState({disablePicking: true});\n  }\n\n  restorePickingColors() {\n    this.setState({disablePicking: false});\n  }\n\n  protected _updateAutoHighlight(info) {\n    super._updateAutoHighlight({\n      ...info,\n      color: this.encodePickingColor(0)\n    });\n  }\n\n  protected _createMesh() {\n    const {bounds} = this.props;\n\n    let normalizedBounds = bounds;\n    // bounds as [minX, minY, maxX, maxY]\n    if (isRectangularBounds(bounds)) {\n      /*\n        (minX0, maxY3) ---- (maxX2, maxY3)\n               |                  |\n               |                  |\n               |                  |\n        (minX0, minY1) ---- (maxX2, minY1)\n     */\n      normalizedBounds = [\n        [bounds[0], bounds[1]],\n        [bounds[0], bounds[3]],\n        [bounds[2], bounds[3]],\n        [bounds[2], bounds[1]]\n      ];\n    }\n\n    return createMesh(normalizedBounds, this.context.viewport.resolution);\n  }\n\n  protected _getModel(gl: WebGLRenderingContext): Model {\n    if (!gl) {\n      return null;\n    }\n\n    /*\n      0,0 --- 1,0\n       |       |\n      0,1 --- 1,1\n    */\n    return new Model(gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: GL.TRIANGLES,\n        vertexCount: 6\n      }),\n      isInstanced: false\n    });\n  }\n\n  draw(opts) {\n    const {uniforms, moduleParameters} = opts;\n    const {model, coordinateConversion, bounds, disablePicking} = this.state;\n    const {image, desaturate, transparentColor, tintColor} = this.props;\n\n    if (moduleParameters.pickingActive && disablePicking) {\n      return;\n    }\n\n    // // TODO fix zFighting\n    // Render the image\n    if (image && model) {\n      model\n        .setUniforms(uniforms)\n        .setUniforms({\n          bitmapTexture: image,\n          desaturate,\n          transparentColor: transparentColor.map(x => x / 255),\n          tintColor: tintColor.slice(0, 3).map(x => x / 255),\n          coordinateConversion,\n          bounds\n        })\n        .draw();\n    }\n  }\n\n  _getCoordinateUniforms() {\n    const {LNGLAT, CARTESIAN, DEFAULT} = COORDINATE_SYSTEM;\n    let {_imageCoordinateSystem: imageCoordinateSystem} = this.props;\n    if (imageCoordinateSystem !== DEFAULT) {\n      const {bounds} = this.props;\n      if (!isRectangularBounds(bounds)) {\n        throw new Error('_imageCoordinateSystem only supports rectangular bounds');\n      }\n\n      // The default behavior (linearly interpolated tex coords)\n      const defaultImageCoordinateSystem = this.context.viewport.resolution ? LNGLAT : CARTESIAN;\n      imageCoordinateSystem = imageCoordinateSystem === LNGLAT ? LNGLAT : CARTESIAN;\n\n      if (imageCoordinateSystem === LNGLAT && defaultImageCoordinateSystem === CARTESIAN) {\n        // LNGLAT in Mercator, e.g. display LNGLAT-encoded image in WebMercator projection\n        return {coordinateConversion: -1, bounds};\n      }\n      if (imageCoordinateSystem === CARTESIAN && defaultImageCoordinateSystem === LNGLAT) {\n        // Mercator in LNGLAT, e.g. display WebMercator encoded image in Globe projection\n        const bottomLeft = lngLatToWorld([bounds[0], bounds[1]]);\n        const topRight = lngLatToWorld([bounds[2], bounds[3]]);\n        return {\n          coordinateConversion: 1,\n          bounds: [bottomLeft[0], bottomLeft[1], topRight[0], topRight[1]]\n        };\n      }\n    }\n    return {\n      coordinateConversion: 0,\n      bounds: [0, 0, 0, 0]\n    };\n  }\n}\n\n/**\n * Decode uv floats from rgb bytes where b contains 4-bit fractions of uv\n * @param {number[]} color\n * @returns {number[]} uvs\n * https://stackoverflow.com/questions/30242013/glsl-compressing-packing-multiple-0-1-colours-var4-into-a-single-var4-variab\n */\nfunction unpackUVsFromRGB(color) {\n  const [u, v, fracUV] = color;\n  const vFrac = (fracUV & 0xf0) / 256;\n  const uFrac = (fracUV & 0x0f) / 16;\n  return [(u + uFrac) / 256, (v + vFrac) / 256];\n}\n\nfunction isRectangularBounds(\n  bounds: [number, number, number, number] | [Position, Position, Position, Position]\n): bounds is [number, number, number, number] {\n  return Number.isFinite(bounds[0]);\n}\n"],"file":"bitmap-layer.js"}