{"version":3,"sources":["../../../src/geojson-layer/geojson-binary.ts"],"names":["binaryToFeatureForAccesor","data","index","featureIndex","startIndices","geometryIndex","featureIds","value","getPropertiesForIndex","propertiesIndex","numericPropsIndex","feature","properties","prop","numericProps","calculatePickingColors","geojsonBinary","encodePickingColor","pickingColors","points","lines","polygons","key","globalFeatureIds","Uint8ClampedArray","length","pickingColor","i"],"mappings":"AAmBA,OAAO,SAASA,yBAAT,CACLC,IADK,EAELC,KAFK,EAGwB;AAC7B,MAAI,CAACD,IAAL,EAAW;AACT,WAAO,IAAP;AACD;;AAED,QAAME,YAAY,GAAG,kBAAkBF,IAAlB,GAA0BA,IAAD,CAAcG,YAAd,CAA2BF,KAA3B,CAAzB,GAA6DA,KAAlF;AACA,QAAMG,aAAa,GAAGJ,IAAI,CAACK,UAAL,CAAgBC,KAAhB,CAAsBJ,YAAtB,CAAtB;;AAEA,MAAIA,YAAY,KAAK,CAAC,CAAtB,EAAyB;AACvB,WAAOK,qBAAqB,CAACP,IAAD,EAAOI,aAAP,EAAsBF,YAAtB,CAA5B;AACD;;AAED,SAAO,IAAP;AACD;;AAED,SAASK,qBAAT,CACEP,IADF,EAEEQ,eAFF,EAGEC,iBAHF,EAIwB;AACtB,QAAMC,OAAO,GAAG;AACdC,IAAAA,UAAU,EAAE,EAAC,GAAGX,IAAI,CAACW,UAAL,CAAgBH,eAAhB;AAAJ;AADE,GAAhB;;AAIA,OAAK,MAAMI,IAAX,IAAmBZ,IAAI,CAACa,YAAxB,EAAsC;AACpCH,IAAAA,OAAO,CAACC,UAAR,CAAmBC,IAAnB,IAA2BZ,IAAI,CAACa,YAAL,CAAkBD,IAAlB,EAAwBN,KAAxB,CAA8BG,iBAA9B,CAA3B;AACD;;AAED,SAAOC,OAAP;AACD;;AAGD,OAAO,SAASI,sBAAT,CACLC,aADK,EAELC,kBAFK,EAGqC;AAC1C,QAAMC,aAAuD,GAAG;AAC9DC,IAAAA,MAAM,EAAE,IADsD;AAE9DC,IAAAA,KAAK,EAAE,IAFuD;AAG9DC,IAAAA,QAAQ,EAAE;AAHoD,GAAhE;;AAKA,OAAK,MAAMC,GAAX,IAAkBJ,aAAlB,EAAiC;AAC/B,UAAMZ,UAAU,GAAGU,aAAa,CAACM,GAAD,CAAb,CAAmBC,gBAAnB,CAAoChB,KAAvD;AACAW,IAAAA,aAAa,CAACI,GAAD,CAAb,GAAqB,IAAIE,iBAAJ,CAAsBlB,UAAU,CAACmB,MAAX,GAAoB,CAA1C,CAArB;AACA,UAAMC,YAAY,GAAG,EAArB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGrB,UAAU,CAACmB,MAA/B,EAAuCE,CAAC,EAAxC,EAA4C;AAC1CV,MAAAA,kBAAkB,CAACX,UAAU,CAACqB,CAAD,CAAX,EAAgBD,YAAhB,CAAlB;AACAR,MAAAA,aAAa,CAACI,GAAD,CAAb,CAAoBK,CAAC,GAAG,CAAJ,GAAQ,CAA5B,IAAiCD,YAAY,CAAC,CAAD,CAA7C;AACAR,MAAAA,aAAa,CAACI,GAAD,CAAb,CAAoBK,CAAC,GAAG,CAAJ,GAAQ,CAA5B,IAAiCD,YAAY,CAAC,CAAD,CAA7C;AACAR,MAAAA,aAAa,CAACI,GAAD,CAAb,CAAoBK,CAAC,GAAG,CAAJ,GAAQ,CAA5B,IAAiCD,YAAY,CAAC,CAAD,CAA7C;AACD;AACF;;AAED,SAAOR,aAAP;AACD","sourcesContent":["// This module implement some utility functions to work with\n// the geojson-binary format defined at loaders.gl:\n// https://github.com/visgl/loaders.gl/blob/master/modules/gis/docs/api-reference/geojson-to-binary.md\n\nimport {\n  BinaryFeatures,\n  BinaryLineFeatures,\n  BinaryPointFeatures,\n  BinaryPolygonFeatures,\n  Feature\n} from '@loaders.gl/schema';\n\nexport type BinaryFeatureTypes = BinaryPointFeatures | BinaryLineFeatures | BinaryPolygonFeatures;\n\ntype FeaureOnlyProperties = Pick<Feature, 'properties'>;\n\n/**\n * Return the feature for an accesor\n */\nexport function binaryToFeatureForAccesor(\n  data: BinaryFeatureTypes,\n  index: number\n): FeaureOnlyProperties | null {\n  if (!data) {\n    return null;\n  }\n\n  const featureIndex = 'startIndices' in data ? (data as any).startIndices[index] : index;\n  const geometryIndex = data.featureIds.value[featureIndex];\n\n  if (featureIndex !== -1) {\n    return getPropertiesForIndex(data, geometryIndex, featureIndex);\n  }\n\n  return null;\n}\n\nfunction getPropertiesForIndex(\n  data: BinaryFeatureTypes,\n  propertiesIndex: number,\n  numericPropsIndex: number\n): FeaureOnlyProperties {\n  const feature = {\n    properties: {...data.properties[propertiesIndex]}\n  };\n\n  for (const prop in data.numericProps) {\n    feature.properties[prop] = data.numericProps[prop].value[numericPropsIndex];\n  }\n\n  return feature;\n}\n\n// Custom picking color to keep binary indexes\nexport function calculatePickingColors(\n  geojsonBinary: BinaryFeatures,\n  encodePickingColor: (id: number, result: number[]) => void\n): Record<string, Uint8ClampedArray | null> {\n  const pickingColors: Record<string, Uint8ClampedArray | null> = {\n    points: null,\n    lines: null,\n    polygons: null\n  };\n  for (const key in pickingColors) {\n    const featureIds = geojsonBinary[key].globalFeatureIds.value;\n    pickingColors[key] = new Uint8ClampedArray(featureIds.length * 3);\n    const pickingColor = [];\n    for (let i = 0; i < featureIds.length; i++) {\n      encodePickingColor(featureIds[i], pickingColor);\n      pickingColors[key]![i * 3 + 0] = pickingColor[0];\n      pickingColors[key]![i * 3 + 1] = pickingColor[1];\n      pickingColors[key]![i * 3 + 2] = pickingColor[2];\n    }\n  }\n\n  return pickingColors;\n}\n"],"file":"geojson-binary.js"}