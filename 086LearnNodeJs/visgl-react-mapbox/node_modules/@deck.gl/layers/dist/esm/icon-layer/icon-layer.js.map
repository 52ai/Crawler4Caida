{"version":3,"sources":["../../../src/icon-layer/icon-layer.ts"],"names":["Layer","project32","picking","log","UNIT","Model","Geometry","vs","fs","IconManager","DEFAULT_COLOR","defaultProps","iconAtlas","type","value","async","iconMapping","sizeScale","min","billboard","sizeUnits","sizeMinPixels","sizeMaxPixels","Number","MAX_SAFE_INTEGER","alphaCutoff","max","getPosition","x","position","getIcon","icon","getColor","getSize","getAngle","getPixelOffset","onIconError","compare","optional","IconLayer","getShaders","modules","initializeState","state","iconManager","context","gl","onUpdate","_onUpdate","bind","onError","_onError","attributeManager","getAttributeManager","addInstanced","instancePositions","size","fp64","use64bitPositions","transition","accessor","instanceSizes","defaultValue","instanceOffsets","transform","getInstanceOffset","instanceIconFrames","getInstanceIconFrame","instanceColorModes","getInstanceColorMode","instanceColors","props","colorFormat","length","normalized","instanceAngles","instancePixelOffset","updateState","params","oldProps","changeFlags","data","textureParameters","prePacked","internalState","isAsyncPropLoading","setProps","loadOptions","autoPacking","invalidate","dataChanged","updateTriggersChanged","all","packIcons","extensionsChanged","model","delete","_getModel","invalidateAll","isLoaded","finalizeState","finalize","draw","uniforms","iconsTexture","getTexture","setUniforms","iconsTextureDim","width","height","positions","id","geometry","drawMode","attributes","Float32Array","isInstanced","setNeedsRedraw","evt","getCurrentLayer","error","message","anchorX","anchorY","getIconMapping","mapping","mask","y"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport {Layer, project32, picking, log, UNIT} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry} from '@luma.gl/core';\n\nimport vs from './icon-layer-vertex.glsl';\nimport fs from './icon-layer-fragment.glsl';\nimport IconManager from './icon-manager';\n\nimport type {\n  LayerProps,\n  Accessor,\n  AccessorFunction,\n  Position,\n  Color,\n  Texture,\n  Unit,\n  UpdateParameters,\n  LayerContext,\n  DefaultProps\n} from '@deck.gl/core';\nimport type {UnpackedIcon, IconMapping, LoadIconErrorContext} from './icon-manager';\n\ntype _IconLayerProps<DataT> = {\n  /** A prepacked image that contains all icons. */\n  iconAtlas?: string | Texture;\n  /** Icon names mapped to icon definitions, or a URL to load such mapping from a JSON file. */\n  iconMapping?: string | IconMapping;\n\n  /** Icon size multiplier.\n   * @default 1\n   */\n  sizeScale?: number;\n  /**\n   * The units of the icon size, one of `meters`, `common`, and `pixels`.\n   *\n   * @default 'pixels'\n   */\n  sizeUnits?: Unit;\n  /**\n   * The minimum size in pixels. When using non-pixel `sizeUnits`, this prop can be used to prevent the icon from getting too small when zoomed out.\n   */\n  sizeMinPixels?: number;\n  /**\n   * The maximum size in pixels. When using non-pixel `sizeUnits`, this prop can be used to prevent the icon from getting too big when zoomed in.\n   */\n  sizeMaxPixels?: number;\n  /** If `true`, the icon always faces camera. Otherwise the icon faces up (z)\n   * @default true\n   */\n  billboard?: boolean;\n  /**\n   * Discard pixels whose opacity is below this threshold.\n   * A discarded pixel would create a \"hole\" in the icon that is not considered part of the object.\n   * @default 0.05\n   */\n  alphaCutoff?: number;\n\n  /** Anchor position accessor. */\n  getPosition?: Accessor<DataT, Position>;\n  /** Icon definition accessor.\n   * Should return the icon id if using pre-packed icons (`iconAtlas` + `iconMapping`).\n   * Return an object that defines the icon if using auto-packing.\n   */\n  getIcon?: AccessorFunction<DataT, string> | AccessorFunction<DataT, UnpackedIcon>;\n  /** Icon color accessor.\n   * @default [0, 0, 0, 255]\n   */\n  getColor?: Accessor<DataT, Color>;\n  /** Icon size accessor.\n   * @default 1\n   */\n  getSize?: Accessor<DataT, number>;\n  /** Icon rotation accessor, in degrees.\n   * @default 0\n   */\n  getAngle?: Accessor<DataT, number>;\n  /**\n   * Icon offsest accessor, in pixels.\n   * @default [0, 0]\n   */\n  getPixelOffset?: Accessor<DataT, [number, number]>;\n  /**\n   * Callback called if the attempt to fetch an icon returned by `getIcon` fails.\n   */\n  onIconError?: ((context: LoadIconErrorContext) => void) | null;\n\n  /** Customize the [texture parameters](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/texParameter). */\n  textureParameters?: Record<number, number> | null;\n};\n\nexport type IconLayerProps<DataT = any> = _IconLayerProps<DataT> & LayerProps<DataT>;\n\nconst DEFAULT_COLOR: [number, number, number, number] = [0, 0, 0, 255];\n\nconst defaultProps: DefaultProps<IconLayerProps> = {\n  iconAtlas: {type: 'image', value: null, async: true},\n  iconMapping: {type: 'object', value: {}, async: true},\n  sizeScale: {type: 'number', value: 1, min: 0},\n  billboard: true,\n  sizeUnits: 'pixels',\n  sizeMinPixels: {type: 'number', min: 0, value: 0}, //  min point radius in pixels\n  sizeMaxPixels: {type: 'number', min: 0, value: Number.MAX_SAFE_INTEGER}, // max point radius in pixels\n  alphaCutoff: {type: 'number', value: 0.05, min: 0, max: 1},\n\n  getPosition: {type: 'accessor', value: x => x.position},\n  getIcon: {type: 'accessor', value: x => x.icon},\n  getColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getSize: {type: 'accessor', value: 1},\n  getAngle: {type: 'accessor', value: 0},\n  getPixelOffset: {type: 'accessor', value: [0, 0]},\n\n  onIconError: {type: 'function', value: null, compare: false, optional: true}\n};\n\n/** Render raster icons at given coordinates. */\nexport default class IconLayer<DataT = any, ExtraPropsT = {}> extends Layer<\n  ExtraPropsT & Required<_IconLayerProps<DataT>>\n> {\n  static defaultProps = defaultProps;\n  static layerName = 'IconLayer';\n\n  state!: {\n    model?: Model;\n    iconManager: IconManager;\n  };\n\n  getShaders() {\n    return super.getShaders({vs, fs, modules: [project32, picking]});\n  }\n\n  initializeState() {\n    this.state = {\n      iconManager: new IconManager(this.context.gl, {\n        onUpdate: this._onUpdate.bind(this),\n        onError: this._onError.bind(this)\n      })\n    };\n\n    const attributeManager = this.getAttributeManager();\n    /* eslint-disable max-len */\n    attributeManager!.addInstanced({\n      instancePositions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instanceSizes: {\n        size: 1,\n        transition: true,\n        accessor: 'getSize',\n        defaultValue: 1\n      },\n      instanceOffsets: {\n        size: 2,\n        accessor: 'getIcon',\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        transform: this.getInstanceOffset\n      },\n      instanceIconFrames: {\n        size: 4,\n        accessor: 'getIcon',\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        transform: this.getInstanceIconFrame\n      },\n      instanceColorModes: {\n        size: 1,\n        type: GL.UNSIGNED_BYTE,\n        accessor: 'getIcon',\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        transform: this.getInstanceColorMode\n      },\n      instanceColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: true,\n        accessor: 'getColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      instanceAngles: {\n        size: 1,\n        transition: true,\n        accessor: 'getAngle'\n      },\n      instancePixelOffset: {\n        size: 2,\n        transition: true,\n        accessor: 'getPixelOffset'\n      }\n    });\n    /* eslint-enable max-len */\n  }\n\n  /* eslint-disable max-statements, complexity */\n  updateState(params: UpdateParameters<this>) {\n    super.updateState(params);\n    const {props, oldProps, changeFlags} = params;\n\n    const attributeManager = this.getAttributeManager();\n    const {iconAtlas, iconMapping, data, getIcon, textureParameters} = props;\n    const {iconManager} = this.state;\n\n    // internalState is always defined during updateState\n    const prePacked = iconAtlas || this.internalState!.isAsyncPropLoading('iconAtlas');\n    iconManager.setProps({\n      loadOptions: props.loadOptions,\n      autoPacking: !prePacked,\n      iconAtlas,\n      iconMapping: prePacked ? (iconMapping as IconMapping) : null,\n      textureParameters\n    });\n\n    // prepacked iconAtlas from user\n    if (prePacked) {\n      if (oldProps.iconMapping !== props.iconMapping) {\n        attributeManager!.invalidate('getIcon');\n      }\n    } else if (\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getIcon))\n    ) {\n      // Auto packing - getIcon is expected to return an object\n      iconManager.packIcons(data, getIcon as AccessorFunction<any, UnpackedIcon>);\n    }\n\n    if (changeFlags.extensionsChanged) {\n      const {gl} = this.context;\n      this.state.model?.delete();\n      this.state.model = this._getModel(gl);\n      attributeManager!.invalidateAll();\n    }\n  }\n  /* eslint-enable max-statements, complexity */\n\n  get isLoaded(): boolean {\n    return super.isLoaded && this.state.iconManager.isLoaded;\n  }\n\n  finalizeState(context: LayerContext): void {\n    super.finalizeState(context);\n    // Release resources held by the icon manager\n    this.state.iconManager.finalize();\n  }\n\n  draw({uniforms}): void {\n    const {sizeScale, sizeMinPixels, sizeMaxPixels, sizeUnits, billboard, alphaCutoff} = this.props;\n    const {iconManager} = this.state;\n\n    const iconsTexture = iconManager.getTexture();\n    if (iconsTexture) {\n      this.state.model\n        .setUniforms(uniforms)\n        .setUniforms({\n          iconsTexture,\n          iconsTextureDim: [iconsTexture.width, iconsTexture.height],\n          sizeUnits: UNIT[sizeUnits],\n          sizeScale,\n          sizeMinPixels,\n          sizeMaxPixels,\n          billboard,\n          alphaCutoff\n        })\n        .draw();\n    }\n  }\n\n  protected _getModel(gl: WebGLRenderingContext): Model {\n    // The icon-layer vertex shader uses 2d positions\n    // specifed via: attribute vec2 positions;\n    const positions = [-1, -1, -1, 1, 1, 1, 1, -1];\n\n    return new Model(gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: GL.TRIANGLE_FAN,\n        attributes: {\n          // The size must be explicitly passed here otherwise luma.gl\n          // will default to assuming that positions are 3D (x,y,z)\n          positions: {\n            size: 2,\n            value: new Float32Array(positions)\n          }\n        }\n      }),\n      isInstanced: true\n    });\n  }\n\n  private _onUpdate(): void {\n    this.setNeedsRedraw();\n  }\n\n  private _onError(evt: LoadIconErrorContext): void {\n    const onIconError = this.getCurrentLayer()?.props.onIconError;\n    if (onIconError) {\n      onIconError(evt);\n    } else {\n      log.error(evt.error.message)();\n    }\n  }\n\n  protected getInstanceOffset(icon: string): number[] {\n    const {\n      width,\n      height,\n      anchorX = width / 2,\n      anchorY = height / 2\n    } = this.state.iconManager.getIconMapping(icon);\n    return [width / 2 - anchorX, height / 2 - anchorY];\n  }\n\n  protected getInstanceColorMode(icon: string): number {\n    const mapping = this.state.iconManager.getIconMapping(icon);\n    return mapping.mask ? 1 : 0;\n  }\n\n  protected getInstanceIconFrame(icon: string): number[] {\n    const {x, y, width, height} = this.state.iconManager.getIconMapping(icon);\n    return [x, y, width, height];\n  }\n}\n"],"file":"icon-layer.js"}