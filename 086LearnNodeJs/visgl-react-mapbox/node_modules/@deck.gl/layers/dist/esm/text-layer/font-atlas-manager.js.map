{"version":3,"sources":["../../../src/text-layer/font-atlas-manager.ts"],"names":["TinySDF","log","buildMapping","LRUCache","getDefaultCharacterSet","charSet","i","push","String","fromCharCode","DEFAULT_FONT_SETTINGS","fontFamily","fontWeight","characterSet","fontSize","buffer","sdf","cutoff","radius","smoothing","MAX_CANVAS_WIDTH","BASELINE_SCALE","HEIGHT_SCALE","CACHE_LIMIT","cache","getNewChars","cacheKey","newCharSet","Set","Array","from","cachedFontAtlas","get","char","mapping","has","delete","populateAlphaChannel","alphaChannel","imageData","length","data","setTextStyle","ctx","font","fillStyle","textBaseline","textAlign","setFontAtlasCacheLimit","limit","assert","Number","isFinite","FontAtlasManager","texture","_atlas","scale","setProps","props","Object","assign","oldKey","_key","_getKey","size","fontAtlas","_generateFontAtlas","set","key","canvas","document","createElement","width","getContext","canvasHeight","xOffset","yOffset","getFontWidth","measureText","fontHeight","maxCanvasWidth","height","getImageData","putImageData","tinySDF","draw","x","y","fillText"],"mappings":"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","sourcesContent":["/* global document */\nimport TinySDF from '@mapbox/tiny-sdf';\n\nimport {log} from '@deck.gl/core';\n\nimport {buildMapping, CharacterMapping} from './utils';\nimport LRUCache from './lru-cache';\n\nimport type {Texture} from '@deck.gl/core';\n\nfunction getDefaultCharacterSet() {\n  const charSet: string[] = [];\n  for (let i = 32; i < 128; i++) {\n    charSet.push(String.fromCharCode(i));\n  }\n  return charSet;\n}\n\nexport type FontSettings = {\n  /** CSS font family\n   * @default 'Monaco, monospace'\n   */\n  fontFamily?: string;\n  /** CSS font weight\n   * @default 'normal'\n   */\n  fontWeight?: string | number;\n  /** Specifies a list of characters to include in the font.\n   * @default (ASCII characters 32-128)\n   */\n  characterSet?: Set<string> | string[] | string;\n  /** Font size in pixels. This option is only applied for generating `fontAtlas`, it does not impact the size of displayed text labels. Larger `fontSize` will give you a sharper look when rendering text labels with very large font sizes. But larger `fontSize` requires more time and space to generate the `fontAtlas`.\n   * @default 64\n   */\n  fontSize?: number;\n  /** Whitespace buffer around each side of the character. In general, bigger `fontSize` requires bigger `buffer`. Increase `buffer` will add more space between each character when layout `characterSet` in `fontAtlas`. This option could be tuned to provide sufficient space for drawing each character and avoiding overlapping of neighboring characters.\n   * @default 4\n   */\n  buffer?: number;\n  /** Flag to enable / disable `sdf`. [`sdf` (Signed Distance Fields)](http://cs.brown.edu/people/pfelzens/papers/dt-final.pdf) will provide a sharper look when rendering with very large or small font sizes. `TextLayer` integrates with [`TinySDF`](https://github.com/mapbox/tiny-sdf) which implements the `sdf` algorithm.\n   * @default false\n   */\n  sdf?: boolean;\n  /** How much of the radius (relative) is used for the inside part the glyph. Bigger `cutoff` makes character thinner. Smaller `cutoff` makes character look thicker. Only applies when `sdf: true`.\n   * @default 0.25\n   */\n  cutoff?: number;\n  /** How many pixels around the glyph shape to use for encoding distance. Bigger radius yields higher quality outcome. Only applies when `sdf: true`.\n   * @default 12\n   */\n  radius?: number;\n  /** How much smoothing to apply to the text edges. Only applies when `sdf: true`.\n   * @default 0.1\n   */\n  smoothing?: number;\n};\n\nexport const DEFAULT_FONT_SETTINGS: Required<FontSettings> = {\n  fontFamily: 'Monaco, monospace',\n  fontWeight: 'normal',\n  characterSet: getDefaultCharacterSet(),\n  fontSize: 64,\n  buffer: 4,\n  sdf: false,\n  cutoff: 0.25,\n  radius: 12,\n  smoothing: 0.1\n};\n\nconst MAX_CANVAS_WIDTH = 1024;\n\nconst BASELINE_SCALE = 0.9;\nconst HEIGHT_SCALE = 1.2;\n\n// only preserve latest three fontAtlas\nconst CACHE_LIMIT = 3;\n\ntype FontAtlas = {\n  /** x position of last character in mapping */\n  xOffset: number;\n  /** y position of last character in mapping */\n  yOffset: number;\n  /** bounding box of each character in the texture */\n  mapping: CharacterMapping;\n  /** packed texture */\n  data: HTMLCanvasElement;\n  /** texture width */\n  width: number;\n  /** texture height */\n  height: number;\n};\n\nlet cache = new LRUCache<FontAtlas>(CACHE_LIMIT);\n\n/**\n * get all the chars not in cache\n * @returns chars not in cache\n */\nfunction getNewChars(cacheKey: string, characterSet: Set<string> | string[] | string): Set<string> {\n  let newCharSet: Set<string>;\n  if (typeof characterSet === 'string') {\n    newCharSet = new Set(Array.from(characterSet));\n  } else {\n    newCharSet = new Set(characterSet);\n  }\n\n  const cachedFontAtlas = cache.get(cacheKey);\n  if (!cachedFontAtlas) {\n    return newCharSet;\n  }\n\n  for (const char in cachedFontAtlas.mapping) {\n    if (newCharSet.has(char)) {\n      newCharSet.delete(char);\n    }\n  }\n  return newCharSet;\n}\n\nfunction populateAlphaChannel(alphaChannel: number[], imageData: ImageData): void {\n  // populate distance value from tinySDF to image alpha channel\n  for (let i = 0; i < alphaChannel.length; i++) {\n    imageData.data[4 * i + 3] = alphaChannel[i];\n  }\n}\n\nfunction setTextStyle(\n  ctx: CanvasRenderingContext2D,\n  fontFamily: string,\n  fontSize: number,\n  fontWeight: string | number\n): void {\n  ctx.font = `${fontWeight} ${fontSize}px ${fontFamily}`;\n  ctx.fillStyle = '#000';\n  ctx.textBaseline = 'alphabetic';\n  ctx.textAlign = 'left';\n}\n\n/**\n * Sets the Font Atlas LRU Cache Limit\n * @param {number} limit LRU Cache limit\n */\nexport function setFontAtlasCacheLimit(limit: number): void {\n  log.assert(Number.isFinite(limit) && limit >= CACHE_LIMIT, 'Invalid cache limit');\n\n  cache = new LRUCache(limit);\n}\n\nexport default class FontAtlasManager {\n  /** Font settings */\n  props: Required<FontSettings> = {...DEFAULT_FONT_SETTINGS};\n\n  /** Cache key of the current font atlas */\n  private _key?: string;\n  /** The current font atlas */\n  private _atlas?: FontAtlas;\n\n  get texture(): Texture | undefined {\n    return this._atlas;\n  }\n\n  get mapping(): CharacterMapping | undefined {\n    return this._atlas && this._atlas.mapping;\n  }\n\n  get scale(): number {\n    return HEIGHT_SCALE;\n  }\n\n  setProps(props: FontSettings = {}) {\n    Object.assign(this.props, props);\n\n    // update cache key\n    const oldKey = this._key;\n    this._key = this._getKey();\n\n    const charSet = getNewChars(this._key, this.props.characterSet);\n    const cachedFontAtlas = cache.get(this._key);\n\n    // if a fontAtlas associated with the new settings is cached and\n    // there are no new chars\n    if (cachedFontAtlas && charSet.size === 0) {\n      // update texture with cached fontAtlas\n      if (this._key !== oldKey) {\n        this._atlas = cachedFontAtlas;\n      }\n      return;\n    }\n\n    // update fontAtlas with new settings\n    const fontAtlas = this._generateFontAtlas(this._key, charSet, cachedFontAtlas);\n    this._atlas = fontAtlas;\n\n    // update cache\n    cache.set(this._key, fontAtlas);\n  }\n\n  private _generateFontAtlas(\n    key: string,\n    characterSet: Set<string>,\n    cachedFontAtlas?: FontAtlas\n  ): FontAtlas {\n    const {fontFamily, fontWeight, fontSize, buffer, sdf, radius, cutoff} = this.props;\n    let canvas = cachedFontAtlas && cachedFontAtlas.data;\n    if (!canvas) {\n      canvas = document.createElement('canvas');\n      canvas.width = MAX_CANVAS_WIDTH;\n    }\n    const ctx = canvas.getContext('2d')!;\n\n    setTextStyle(ctx, fontFamily, fontSize, fontWeight);\n\n    // 1. build mapping\n    const {mapping, canvasHeight, xOffset, yOffset} = buildMapping({\n      getFontWidth: char => ctx.measureText(char).width,\n      fontHeight: fontSize * HEIGHT_SCALE,\n      buffer,\n      characterSet,\n      maxCanvasWidth: MAX_CANVAS_WIDTH,\n      ...(cachedFontAtlas && {\n        mapping: cachedFontAtlas.mapping,\n        xOffset: cachedFontAtlas.xOffset,\n        yOffset: cachedFontAtlas.yOffset\n      })\n    });\n\n    // 2. update canvas\n    // copy old canvas data to new canvas only when height changed\n    if (canvas.height !== canvasHeight) {\n      const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n      canvas.height = canvasHeight;\n      ctx.putImageData(imageData, 0, 0);\n    }\n    setTextStyle(ctx, fontFamily, fontSize, fontWeight);\n\n    // 3. layout characters\n    if (sdf) {\n      const tinySDF = new TinySDF(fontSize, buffer, radius, cutoff, fontFamily, fontWeight);\n      // used to store distance values from tinySDF\n      // tinySDF.size equals `fontSize + buffer * 2`\n      const imageData = ctx.getImageData(0, 0, tinySDF.size, tinySDF.size);\n\n      for (const char of characterSet) {\n        populateAlphaChannel(tinySDF.draw(char), imageData);\n        ctx.putImageData(imageData, mapping[char].x - buffer, mapping[char].y + buffer);\n      }\n    } else {\n      for (const char of characterSet) {\n        ctx.fillText(char, mapping[char].x, mapping[char].y + fontSize * BASELINE_SCALE);\n      }\n    }\n\n    return {\n      xOffset,\n      yOffset,\n      mapping,\n      data: canvas,\n      width: canvas.width,\n      height: canvas.height\n    };\n  }\n\n  private _getKey(): string {\n    const {fontFamily, fontWeight, fontSize, buffer, sdf, radius, cutoff} = this.props;\n    if (sdf) {\n      return `${fontFamily} ${fontWeight} ${fontSize} ${buffer} ${radius} ${cutoff}`;\n    }\n    return `${fontFamily} ${fontWeight} ${fontSize} ${buffer}`;\n  }\n}\n"],"file":"font-atlas-manager.js"}