{"version":3,"sources":["../../../src/text-layer/text-layer.ts"],"names":["CompositeLayer","createIterable","MultiIconLayer","FontAtlasManager","DEFAULT_FONT_SETTINGS","setFontAtlasCacheLimit","transformParagraph","getTextFromBuffer","TextBackgroundLayer","TEXT_ANCHOR","start","middle","end","ALIGNMENT_BASELINE","top","center","bottom","DEFAULT_COLOR","DEFAULT_LINE_HEIGHT","defaultProps","billboard","sizeScale","sizeUnits","sizeMinPixels","sizeMaxPixels","Number","MAX_SAFE_INTEGER","background","getBackgroundColor","type","value","getBorderColor","getBorderWidth","backgroundPadding","characterSet","fontFamily","fontWeight","lineHeight","outlineWidth","min","outlineColor","fontSettings","wordBreak","maxWidth","getText","x","text","getPosition","position","getColor","getSize","getAngle","getTextAnchor","getAlignmentBaseline","getPixelOffset","backgroundColor","deprecatedFor","TextLayer","object","objectInfo","iconMapping","state","fontAtlasManager","mapping","props","paragraph","size","width","height","anchorX","anchorY","y","rowWidth","numCharacters","length","offsets","Array","index","i","rowOffset","initializeState","styleVersion","updateState","params","oldProps","changeFlags","textChanged","dataChanged","updateTriggersChanged","all","_updateText","fontChanged","_updateFontAtlas","styleChanged","setState","getPickingInfo","info","data","fontProps","setProps","key","textBuffer","attributes","startIndices","numInstances","autoCharacterSet","Set","texts","characterCount","ArrayBuffer","isView","_","iterable","from","forEach","add","push","renderLayers","scale","texture","_dataDiff","transitions","updateTriggers","CharactersLayerClass","getSubLayerClass","BackgroundLayerClass","getFillColor","getLineColor","getLineWidth","padding","fontSize","getSubLayerProps","id","getBoundingRect","autoHighlight","sdf","smoothing","isFinite","iconAtlas","getIcon","getIconOffsets","fontAtlasCacheLimit","limit"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {CompositeLayer, createIterable} from '@deck.gl/core';\nimport MultiIconLayer from './multi-icon-layer/multi-icon-layer';\nimport FontAtlasManager, {\n  DEFAULT_FONT_SETTINGS,\n  setFontAtlasCacheLimit\n} from './font-atlas-manager';\nimport {transformParagraph, getTextFromBuffer} from './utils';\n\nimport TextBackgroundLayer from './text-background-layer/text-background-layer';\n\nimport type {FontSettings} from './font-atlas-manager';\nimport type {\n  LayerProps,\n  Accessor,\n  AccessorFunction,\n  Unit,\n  Position,\n  Color,\n  UpdateParameters,\n  GetPickingInfoParams,\n  PickingInfo,\n  DefaultProps\n} from '@deck.gl/core';\n\nconst TEXT_ANCHOR = {\n  start: 1,\n  middle: 0,\n  end: -1\n} as const;\n\nconst ALIGNMENT_BASELINE = {\n  top: 1,\n  center: 0,\n  bottom: -1\n} as const;\n\nconst DEFAULT_COLOR: [number, number, number, number] = [0, 0, 0, 255];\n\nconst DEFAULT_LINE_HEIGHT = 1.0;\n\ntype _TextLayerProps<DataT> = {\n  /** If `true`, the text always faces camera. Otherwise the text faces up (z).\n   * @default true\n   */\n  billboard?: boolean;\n  /**\n   * Text size multiplier.\n   * @default 1\n   */\n  sizeScale?: number;\n  /**\n   * The units of the size, one of `'meters'`, `'common'`, and `'pixels'`.\n   * @default 'pixels'\n   */\n  sizeUnits?: Unit;\n  /**\n   * The minimum size in pixels. When using non-pixel `sizeUnits`, this prop can be used to prevent the icon from getting too small when zoomed out.\n   * @default 0\n   */\n  sizeMinPixels?: number;\n  /**\n   * The maximum size in pixels. When using non-pixel `sizeUnits`, this prop can be used to prevent the icon from getting too big when zoomed in.\n   * @default Number.MAX_SAFE_INTEGER\n   */\n  sizeMaxPixels?: number;\n\n  /** Whether to render background for the text blocks.\n   * @default false\n   */\n  background?: boolean;\n  /** Background color accessor.\n   * @default [255, 255, 255, 255]\n   */\n  getBackgroundColor?: Accessor<DataT, Color>;\n  /** Border color accessor.\n   * @default [0, 0, 0, 255]\n   */\n  getBorderColor?: Accessor<DataT, Color>;\n  /** Border width accessor.\n   * @default 0\n   */\n  getBorderWidth?: Accessor<DataT, number>;\n  /**\n   * The padding of the background..\n   * If an array of 2 is supplied, it is interpreted as `[padding_x, padding_y]` in pixels.\n   * If an array of 4 is supplied, it is interpreted as `[padding_left, padding_top, padding_right, padding_bottom]` in pixels.\n   * @default [0, 0, 0, 0]\n   */\n  backgroundPadding?: [number, number] | [number, number, number, number];\n  /**\n   * Specifies a list of characters to include in the font. If set to 'auto', will be automatically generated from the data set.\n   * @default (ASCII characters 32-128)\n   */\n  characterSet?: FontSettings['characterSet'] | 'auto';\n  /** CSS font family\n   * @default 'Monaco, monospace'\n   */\n  fontFamily?: FontSettings['fontFamily'];\n  /** CSS font weight\n   * @default 'normal'\n   */\n  fontWeight?: FontSettings['fontWeight'];\n  /** A unitless number that will be multiplied with the current font size to set the line height.\n   * @default 'normal'\n   */\n  lineHeight?: number;\n  /**\n   * Width of outline around the text, relative to the font size. Only effective if `fontSettings.sdf` is `true`.\n   * @default 0\n   */\n  outlineWidth?: number;\n  /**\n   * Color of outline around the text, in `[r, g, b, [a]]`. Each channel is a number between 0-255 and `a` is 255 if not supplied.\n   * @default [0, 0, 0, 255]\n   */\n  outlineColor?: Color;\n  /**\n   * Advance options for fine tuning the appearance and performance of the generated shared `fontAtlas`.\n   */\n  fontSettings?: FontSettings;\n  /**\n   * Available options are `break-all` and `break-word`. A valid `maxWidth` has to be provided to use `wordBreak`.\n   * @default 'break-word'\n   */\n  wordBreak?: 'break-word' | 'break-all';\n  /**\n   * `maxWidth` is used together with `break-word` for wrapping text. The value of `maxWidth` specifies the width limit to break the text into multiple lines.\n   * @default -1\n   */\n  maxWidth?: number;\n  /**\n   * Label text accessor\n   */\n  getText?: AccessorFunction<DataT, string>;\n  /**\n   * Anchor position accessor\n   */\n  getPosition?: Accessor<DataT, Position>;\n  /**\n   * Label color accessor\n   * @default [0, 0, 0, 255]\n   */\n  getColor?: Accessor<DataT, Color>;\n  /**\n   * Label size accessor\n   * @default 32\n   */\n  getSize?: Accessor<DataT, number>;\n  /**\n   * Label rotation accessor, in degrees\n   * @default 0\n   */\n  getAngle?: Accessor<DataT, number>;\n  /**\n   * Horizontal alignment accessor\n   * @default 'middle'\n   */\n  getTextAnchor?: Accessor<DataT, 'start' | 'middle' | 'end'>;\n  /**\n   * Vertical alignment accessor\n   * @default 'center'\n   */\n  getAlignmentBaseline?: Accessor<DataT, 'top' | 'center' | 'bottom'>;\n  /**\n   * Label offset from the anchor position, [x, y] in pixels\n   * @default [0, 0]\n   */\n  getPixelOffset?: Accessor<DataT, [number, number]>;\n  /**\n   * @deprecated Use `background` and `getBackgroundColor` instead\n   */\n  backgroundColor?: Color;\n};\n\nexport type TextLayerProps<DataT = any> = _TextLayerProps<DataT> & LayerProps<DataT>;\n\nconst defaultProps: DefaultProps<TextLayerProps> = {\n  billboard: true,\n  sizeScale: 1,\n  sizeUnits: 'pixels',\n  sizeMinPixels: 0,\n  sizeMaxPixels: Number.MAX_SAFE_INTEGER,\n\n  background: false,\n  getBackgroundColor: {type: 'accessor', value: [255, 255, 255, 255]},\n  getBorderColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getBorderWidth: {type: 'accessor', value: 0},\n  backgroundPadding: {type: 'array', value: [0, 0, 0, 0]},\n\n  characterSet: {type: 'object', value: DEFAULT_FONT_SETTINGS.characterSet},\n  fontFamily: DEFAULT_FONT_SETTINGS.fontFamily,\n  fontWeight: DEFAULT_FONT_SETTINGS.fontWeight,\n  lineHeight: DEFAULT_LINE_HEIGHT,\n  outlineWidth: {type: 'number', value: 0, min: 0},\n  outlineColor: {type: 'color', value: DEFAULT_COLOR},\n  fontSettings: {},\n\n  // auto wrapping options\n  wordBreak: 'break-word',\n  maxWidth: {type: 'number', value: -1},\n\n  getText: {type: 'accessor', value: x => x.text},\n  getPosition: {type: 'accessor', value: x => x.position},\n  getColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getSize: {type: 'accessor', value: 32},\n  getAngle: {type: 'accessor', value: 0},\n  getTextAnchor: {type: 'accessor', value: 'middle'},\n  getAlignmentBaseline: {type: 'accessor', value: 'center'},\n  getPixelOffset: {type: 'accessor', value: [0, 0]},\n\n  // deprecated\n  backgroundColor: {deprecatedFor: ['background', 'getBackgroundColor']}\n};\n\n/** Render text labels at given coordinates. */\nexport default class TextLayer<DataT = any, ExtraPropsT = {}> extends CompositeLayer<\n  ExtraPropsT & Required<_TextLayerProps<DataT>>\n> {\n  static defaultProps = defaultProps;\n  static layerName = 'TextLayer';\n\n  state!: {\n    styleVersion: number;\n    fontAtlasManager: FontAtlasManager;\n    characterSet?: Set<string>;\n    startIndices?: number[];\n    numInstances?: number;\n    getText?: AccessorFunction<DataT, string>;\n  };\n\n  initializeState() {\n    this.state = {\n      styleVersion: 0,\n      fontAtlasManager: new FontAtlasManager()\n    };\n  }\n\n  // eslint-disable-next-line complexity\n  updateState(params: UpdateParameters<this>) {\n    const {props, oldProps, changeFlags} = params;\n    const textChanged =\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getText));\n\n    if (textChanged) {\n      this._updateText();\n    }\n\n    const fontChanged = this._updateFontAtlas();\n\n    const styleChanged =\n      fontChanged ||\n      props.lineHeight !== oldProps.lineHeight ||\n      props.wordBreak !== oldProps.wordBreak ||\n      props.maxWidth !== oldProps.maxWidth;\n\n    if (styleChanged) {\n      this.setState({\n        styleVersion: this.state.styleVersion + 1\n      });\n    }\n  }\n\n  getPickingInfo({info}: GetPickingInfoParams): PickingInfo {\n    // because `TextLayer` assign the same pickingInfoIndex for one text label,\n    // here info.index refers the index of text label in props.data\n    info.object = info.index >= 0 ? this.props.data[info.index] : null;\n    return info;\n  }\n\n  /** Returns true if font has changed */\n  private _updateFontAtlas(): boolean {\n    const {fontSettings, fontFamily, fontWeight} = this.props;\n    const {fontAtlasManager, characterSet} = this.state;\n\n    const fontProps = {\n      ...fontSettings,\n      characterSet,\n      fontFamily,\n      fontWeight\n    };\n\n    if (!fontAtlasManager.mapping) {\n      // This is the first update\n      fontAtlasManager.setProps(fontProps);\n      return true;\n    }\n\n    for (const key in fontProps) {\n      if (fontProps[key] !== fontAtlasManager.props[key]) {\n        fontAtlasManager.setProps(fontProps);\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  // Text strings are variable width objects\n  // Count characters and start offsets\n  private _updateText() {\n    const {data, characterSet} = this.props;\n    const textBuffer = (data as any).attributes?.getText;\n    let {getText} = this.props;\n    let startIndices: number[] = (data as any).startIndices;\n    let numInstances: number;\n\n    const autoCharacterSet = characterSet === 'auto' && new Set();\n\n    if (textBuffer && startIndices) {\n      const {texts, characterCount} = getTextFromBuffer({\n        ...(ArrayBuffer.isView(textBuffer) ? {value: textBuffer} : textBuffer),\n        // @ts-ignore if data.attribute is defined then length is expected\n        length: data.length,\n        startIndices,\n        characterSet: autoCharacterSet\n      });\n      numInstances = characterCount;\n      getText = (_, {index}) => texts[index];\n    } else {\n      const {iterable, objectInfo} = createIterable(data);\n      startIndices = [0];\n      numInstances = 0;\n\n      for (const object of iterable) {\n        objectInfo.index++;\n        // Break into an array of characters\n        // When dealing with double-length unicode characters, `str.length` or `str[i]` do not work\n        const text = Array.from(getText(object, objectInfo) || '');\n        if (autoCharacterSet) {\n          // eslint-disable-next-line @typescript-eslint/unbound-method\n          text.forEach(autoCharacterSet.add, autoCharacterSet);\n        }\n        numInstances += text.length;\n        startIndices.push(numInstances);\n      }\n    }\n\n    this.setState({\n      getText,\n      startIndices,\n      numInstances,\n      characterSet: autoCharacterSet || characterSet\n    });\n  }\n\n  // Returns the x, y offsets of each character in a text string\n  private getBoundingRect: AccessorFunction<DataT, [number, number, number, number]> = (\n    object,\n    objectInfo\n  ) => {\n    const iconMapping = this.state.fontAtlasManager.mapping!;\n    const getText = this.state.getText!;\n    const {wordBreak, maxWidth, lineHeight, getTextAnchor, getAlignmentBaseline} = this.props;\n\n    const paragraph = getText(object, objectInfo) || '';\n    const {\n      size: [width, height]\n    } = transformParagraph(paragraph, lineHeight, wordBreak, maxWidth, iconMapping);\n    const anchorX =\n      TEXT_ANCHOR[\n        typeof getTextAnchor === 'function' ? getTextAnchor(object, objectInfo) : getTextAnchor\n      ];\n    const anchorY =\n      ALIGNMENT_BASELINE[\n        typeof getAlignmentBaseline === 'function'\n          ? getAlignmentBaseline(object, objectInfo)\n          : getAlignmentBaseline\n      ];\n\n    return [((anchorX - 1) * width) / 2, ((anchorY - 1) * height) / 2, width, height];\n  };\n\n  // Returns the x, y, w, h of each text object\n  private getIconOffsets: AccessorFunction<DataT, number[]> = (object, objectInfo) => {\n    const iconMapping = this.state.fontAtlasManager.mapping!;\n    const getText = this.state.getText!;\n    const {wordBreak, maxWidth, lineHeight, getTextAnchor, getAlignmentBaseline} = this.props;\n\n    const paragraph = getText(object, objectInfo) || '';\n    const {\n      x,\n      y,\n      rowWidth,\n      size: [width, height]\n    } = transformParagraph(paragraph, lineHeight, wordBreak, maxWidth, iconMapping);\n    const anchorX =\n      TEXT_ANCHOR[\n        typeof getTextAnchor === 'function' ? getTextAnchor(object, objectInfo) : getTextAnchor\n      ];\n    const anchorY =\n      ALIGNMENT_BASELINE[\n        typeof getAlignmentBaseline === 'function'\n          ? getAlignmentBaseline(object, objectInfo)\n          : getAlignmentBaseline\n      ];\n\n    const numCharacters = x.length;\n    const offsets = new Array(numCharacters * 2);\n    let index = 0;\n\n    for (let i = 0; i < numCharacters; i++) {\n      // For a multi-line object, offset in x-direction needs consider\n      // the row offset in the paragraph and the object offset in the row\n      const rowOffset = ((1 - anchorX) * (width - rowWidth[i])) / 2;\n      offsets[index++] = ((anchorX - 1) * width) / 2 + rowOffset + x[i];\n      offsets[index++] = ((anchorY - 1) * height) / 2 + y[i];\n    }\n    return offsets;\n  };\n\n  renderLayers() {\n    const {\n      startIndices,\n      numInstances,\n      getText,\n      fontAtlasManager: {scale, texture, mapping},\n      styleVersion\n    } = this.state;\n\n    const {\n      data,\n      _dataDiff,\n      getPosition,\n      getColor,\n      getSize,\n      getAngle,\n      getPixelOffset,\n      getBackgroundColor,\n      getBorderColor,\n      getBorderWidth,\n      backgroundPadding,\n      background,\n      billboard,\n      fontSettings,\n      outlineWidth,\n      outlineColor,\n      sizeScale,\n      sizeUnits,\n      sizeMinPixels,\n      sizeMaxPixels,\n      transitions,\n      updateTriggers\n    } = this.props;\n\n    const CharactersLayerClass = this.getSubLayerClass('characters', MultiIconLayer);\n    const BackgroundLayerClass = this.getSubLayerClass('background', TextBackgroundLayer);\n\n    return [\n      background &&\n        new BackgroundLayerClass(\n          {\n            // background props\n            getFillColor: getBackgroundColor,\n            getLineColor: getBorderColor,\n            getLineWidth: getBorderWidth,\n            padding: backgroundPadding,\n\n            // props shared with characters layer\n            getPosition,\n            getSize,\n            getAngle,\n            getPixelOffset,\n            billboard,\n            sizeScale: sizeScale / this.state.fontAtlasManager.props.fontSize,\n            sizeUnits,\n            sizeMinPixels,\n            sizeMaxPixels,\n\n            transitions: transitions && {\n              getPosition: transitions.getPosition,\n              getAngle: transitions.getAngle,\n              getSize: transitions.getSize,\n              getFillColor: transitions.getBackgroundColor,\n              getLineColor: transitions.getBorderColor,\n              getLineWidth: transitions.getBorderWidth,\n              getPixelOffset: transitions.getPixelOffset\n            }\n          },\n          this.getSubLayerProps({\n            id: 'background',\n            updateTriggers: {\n              getPosition: updateTriggers.getPosition,\n              getAngle: updateTriggers.getAngle,\n              getSize: updateTriggers.getSize,\n              getFillColor: updateTriggers.getBackgroundColor,\n              getLineColor: updateTriggers.getBorderColor,\n              getLineWidth: updateTriggers.getBorderWidth,\n              getPixelOffset: updateTriggers.getPixelOffset,\n              getBoundingRect: {\n                getText: updateTriggers.getText,\n                getTextAnchor: updateTriggers.getTextAnchor,\n                getAlignmentBaseline: updateTriggers.getAlignmentBaseline,\n                styleVersion\n              }\n            }\n          }),\n          {\n            data:\n              // @ts-ignore (2339) attribute is not defined on all data types\n              data.attributes && data.attributes.background\n                ? // @ts-ignore (2339) attribute is not defined on all data types\n                  {length: data.length, attributes: data.attributes.background}\n                : data,\n            _dataDiff,\n            // Maintain the same background behavior as <=8.3. Remove in v9?\n            autoHighlight: false,\n            getBoundingRect: this.getBoundingRect\n          }\n        ),\n      new CharactersLayerClass(\n        {\n          sdf: fontSettings.sdf,\n          smoothing: Number.isFinite(fontSettings.smoothing)\n            ? fontSettings.smoothing\n            : DEFAULT_FONT_SETTINGS.smoothing,\n          outlineWidth,\n          outlineColor,\n          iconAtlas: texture,\n          iconMapping: mapping,\n\n          getPosition,\n          getColor,\n          getSize,\n          getAngle,\n          getPixelOffset,\n\n          billboard,\n          sizeScale: sizeScale * scale,\n          sizeUnits,\n          sizeMinPixels: sizeMinPixels * scale,\n          sizeMaxPixels: sizeMaxPixels * scale,\n\n          transitions: transitions && {\n            getPosition: transitions.getPosition,\n            getAngle: transitions.getAngle,\n            getColor: transitions.getColor,\n            getSize: transitions.getSize,\n            getPixelOffset: transitions.getPixelOffset\n          }\n        },\n        this.getSubLayerProps({\n          id: 'characters',\n          updateTriggers: {\n            getIcon: updateTriggers.getText,\n            getPosition: updateTriggers.getPosition,\n            getAngle: updateTriggers.getAngle,\n            getColor: updateTriggers.getColor,\n            getSize: updateTriggers.getSize,\n            getPixelOffset: updateTriggers.getPixelOffset,\n            getIconOffsets: {\n              getText: updateTriggers.getText,\n              getTextAnchor: updateTriggers.getTextAnchor,\n              getAlignmentBaseline: updateTriggers.getAlignmentBaseline,\n              styleVersion\n            }\n          }\n        }),\n        {\n          data,\n          _dataDiff,\n          startIndices,\n          numInstances,\n          getIconOffsets: this.getIconOffsets,\n          getIcon: getText\n        }\n      )\n    ];\n  }\n\n  static set fontAtlasCacheLimit(limit: number) {\n    setFontAtlasCacheLimit(limit);\n  }\n}\n"],"file":"text-layer.js"}