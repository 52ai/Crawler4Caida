{"version":3,"sources":["../../../../src/text-layer/text-background-layer/text-background-layer.ts"],"names":["Layer","project32","picking","UNIT","Model","Geometry","vs","fs","defaultProps","billboard","sizeScale","sizeUnits","sizeMinPixels","sizeMaxPixels","Number","MAX_SAFE_INTEGER","padding","type","value","getPosition","x","position","getSize","getAngle","getPixelOffset","getBoundingRect","getFillColor","getLineColor","getLineWidth","TextBackgroundLayer","getShaders","modules","initializeState","getAttributeManager","addInstanced","instancePositions","size","fp64","use64bitPositions","transition","accessor","instanceSizes","defaultValue","instanceAngles","instanceRects","instancePixelOffsets","instanceFillColors","normalized","instanceLineColors","instanceLineWidths","updateState","params","changeFlags","extensionsChanged","gl","context","state","model","delete","_getModel","invalidateAll","draw","uniforms","props","length","setUniforms","stroked","Boolean","positions","id","geometry","drawMode","vertexCount","attributes","Float32Array","isInstanced"],"mappings":"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","sourcesContent":["import {Layer, project32, picking, UNIT} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry} from '@luma.gl/core';\n\nimport vs from './text-background-layer-vertex.glsl';\nimport fs from './text-background-layer-fragment.glsl';\n\nimport type {\n  LayerProps,\n  Accessor,\n  Unit,\n  Position,\n  Color,\n  UpdateParameters,\n  DefaultProps\n} from '@deck.gl/core';\n\ntype _TextBackgroundLayerProps<DataT> = {\n  billboard?: boolean;\n  sizeScale?: number;\n  sizeUnits?: Unit;\n  sizeMinPixels?: number;\n  sizeMaxPixels?: number;\n\n  padding?: [number, number] | [number, number, number, number];\n\n  getPosition?: Accessor<DataT, Position>;\n  getSize?: Accessor<DataT, number>;\n  getAngle?: Accessor<DataT, number>;\n  getPixelOffset?: Accessor<DataT, [number, number]>;\n  getBoundingRect?: Accessor<DataT, [number, number, number, number]>;\n  getFillColor?: Accessor<DataT, Color>;\n  getLineColor?: Accessor<DataT, Color>;\n  getLineWidth?: Accessor<DataT, number>;\n};\n\nexport type TextBackgroundLayerProps<DataT = any> = _TextBackgroundLayerProps<DataT> &\n  LayerProps<DataT>;\n\nconst defaultProps: DefaultProps<TextBackgroundLayerProps> = {\n  billboard: true,\n  sizeScale: 1,\n  sizeUnits: 'pixels',\n  sizeMinPixels: 0,\n  sizeMaxPixels: Number.MAX_SAFE_INTEGER,\n\n  padding: {type: 'array', value: [0, 0, 0, 0]},\n\n  getPosition: {type: 'accessor', value: x => x.position},\n  getSize: {type: 'accessor', value: 1},\n  getAngle: {type: 'accessor', value: 0},\n  getPixelOffset: {type: 'accessor', value: [0, 0]},\n  getBoundingRect: {type: 'accessor', value: [0, 0, 0, 0]},\n  getFillColor: {type: 'accessor', value: [0, 0, 0, 255]},\n  getLineColor: {type: 'accessor', value: [0, 0, 0, 255]},\n  getLineWidth: {type: 'accessor', value: 1}\n};\n\nexport default class TextBackgroundLayer<DataT = any, ExtraPropsT = {}> extends Layer<\n  ExtraPropsT & Required<_TextBackgroundLayerProps<DataT>>\n> {\n  static defaultProps = defaultProps;\n  static layerName = 'TextBackgroundLayer';\n\n  state!: {\n    model: Model;\n  };\n\n  getShaders() {\n    return super.getShaders({vs, fs, modules: [project32, picking]});\n  }\n\n  initializeState() {\n    this.getAttributeManager()!.addInstanced({\n      instancePositions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instanceSizes: {\n        size: 1,\n        transition: true,\n        accessor: 'getSize',\n        defaultValue: 1\n      },\n      instanceAngles: {\n        size: 1,\n        transition: true,\n        accessor: 'getAngle'\n      },\n      instanceRects: {\n        size: 4,\n        accessor: 'getBoundingRect'\n      },\n      instancePixelOffsets: {\n        size: 2,\n        transition: true,\n        accessor: 'getPixelOffset'\n      },\n      instanceFillColors: {\n        size: 4,\n        transition: true,\n        normalized: true,\n        type: GL.UNSIGNED_BYTE,\n        accessor: 'getFillColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceLineColors: {\n        size: 4,\n        transition: true,\n        normalized: true,\n        type: GL.UNSIGNED_BYTE,\n        accessor: 'getLineColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceLineWidths: {\n        size: 1,\n        transition: true,\n        accessor: 'getLineWidth',\n        defaultValue: 1\n      }\n    });\n  }\n\n  updateState(params: UpdateParameters<this>) {\n    super.updateState(params);\n    const {changeFlags} = params;\n    if (changeFlags.extensionsChanged) {\n      const {gl} = this.context;\n      this.state.model?.delete();\n      this.state.model = this._getModel(gl);\n      this.getAttributeManager()!.invalidateAll();\n    }\n  }\n\n  draw({uniforms}) {\n    const {billboard, sizeScale, sizeUnits, sizeMinPixels, sizeMaxPixels, getLineWidth} =\n      this.props;\n    let {padding} = this.props;\n\n    if (padding.length < 4) {\n      padding = [padding[0], padding[1], padding[0], padding[1]];\n    }\n\n    this.state.model\n      .setUniforms(uniforms)\n      .setUniforms({\n        billboard,\n        stroked: Boolean(getLineWidth),\n        padding,\n        sizeUnits: UNIT[sizeUnits],\n        sizeScale,\n        sizeMinPixels,\n        sizeMaxPixels\n      })\n      .draw();\n  }\n\n  protected _getModel(gl: WebGLRenderingContext): Model {\n    // a square that minimally cover the unit circle\n    const positions = [0, 0, 1, 0, 1, 1, 0, 1];\n\n    return new Model(gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: GL.TRIANGLE_FAN,\n        vertexCount: 4,\n        attributes: {\n          positions: {size: 2, value: new Float32Array(positions)}\n        }\n      }),\n      isInstanced: true\n    });\n  }\n}\n"],"file":"text-background-layer.js"}