{"version":3,"sources":["../../../src/arc-layer/arc-layer.ts"],"names":["Layer","project32","picking","UNIT","Model","Geometry","vs","fs","DEFAULT_COLOR","defaultProps","getSourcePosition","type","value","x","sourcePosition","getTargetPosition","targetPosition","getSourceColor","getTargetColor","getWidth","getHeight","getTilt","greatCircle","widthUnits","widthScale","min","widthMinPixels","widthMaxPixels","Number","MAX_SAFE_INTEGER","ArcLayer","getShaders","modules","wrapLongitude","initializeState","attributeManager","getAttributeManager","addInstanced","instanceSourcePositions","size","fp64","use64bitPositions","transition","accessor","instanceTargetPositions","instanceSourceColors","props","colorFormat","length","normalized","defaultValue","instanceTargetColors","instanceWidths","instanceHeights","instanceTilts","updateState","opts","changeFlags","extensionsChanged","gl","context","state","model","delete","_getModel","invalidateAll","draw","uniforms","setUniforms","useShortestPath","positions","NUM_SEGMENTS","i","concat","id","geometry","drawMode","attributes","Float32Array","isInstanced","numSegments"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {\n  Layer,\n  project32,\n  picking,\n  UNIT,\n  UpdateParameters,\n  LayerProps,\n  Unit,\n  AccessorFunction,\n  Position,\n  Accessor,\n  Color,\n  DefaultProps\n} from '@deck.gl/core';\n\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry} from '@luma.gl/core';\n\nimport vs from './arc-layer-vertex.glsl';\nimport fs from './arc-layer-fragment.glsl';\n\nconst DEFAULT_COLOR: [number, number, number, number] = [0, 0, 0, 255];\n\nconst defaultProps: DefaultProps<ArcLayerProps> = {\n  getSourcePosition: {type: 'accessor', value: x => x.sourcePosition},\n  getTargetPosition: {type: 'accessor', value: x => x.targetPosition},\n  getSourceColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getTargetColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getWidth: {type: 'accessor', value: 1},\n  getHeight: {type: 'accessor', value: 1},\n  getTilt: {type: 'accessor', value: 0},\n\n  greatCircle: false,\n\n  widthUnits: 'pixels',\n  widthScale: {type: 'number', value: 1, min: 0},\n  widthMinPixels: {type: 'number', value: 0, min: 0},\n  widthMaxPixels: {type: 'number', value: Number.MAX_SAFE_INTEGER, min: 0}\n};\n\n/** All properties supported by ArcLayer. */\nexport type ArcLayerProps<DataT = any> = _ArcLayerProps<DataT> & LayerProps<DataT>;\n\n/** Properties added by ArcLayer. */\ntype _ArcLayerProps<DataT> = {\n  /**\n   * If `true`, create the arc along the shortest path on the earth surface.\n   * @default false\n   */\n  greatCircle?: boolean;\n\n  /**\n   * The units of the line width, one of `'meters'`, `'common'`, and `'pixels'`\n   * @default 'pixels'\n   */\n  widthUnits?: Unit;\n\n  /**\n   * The scaling multiplier for the width of each line.\n   * @default 1\n   */\n  widthScale?: number;\n\n  /**\n   * The minimum line width in pixels.\n   * @default 0\n   */\n  widthMinPixels?: number;\n\n  /**\n   * The maximum line width in pixels.\n   * @default Number.MAX_SAFE_INTEGER\n   */\n  widthMaxPixels?: number;\n\n  /**\n   * Method called to retrieve the source position of each object.\n   * @default object => object.sourcePosition\n   */\n  getSourcePosition?: AccessorFunction<DataT, Position>;\n\n  /**\n   * Method called to retrieve the target position of each object.\n   * @default object => object.targetPosition\n   */\n  getTargetPosition?: AccessorFunction<DataT, Position>;\n\n  /**\n   * The rgba color is in the format of `[r, g, b, [a]]`.\n   * @default [0, 0, 0, 255]\n   */\n  getSourceColor?: Accessor<DataT, Color>;\n\n  /**\n   * The rgba color is in the format of `[r, g, b, [a]]`.\n   * @default [0, 0, 0, 255]\n   */\n  getTargetColor?: Accessor<DataT, Color>;\n\n  /**\n   * The line width of each object, in units specified by `widthUnits`.\n   * @default 1\n   */\n  getWidth?: Accessor<DataT, number>;\n\n  /**\n   * Multiplier of layer height. `0` will make the layer flat.\n   * @default 1\n   */\n  getHeight?: Accessor<DataT, number>;\n\n  /**\n   * Use to tilt the arc to the side if you have multiple arcs with the same source and target positions.\n   * @default 0\n   */\n  getTilt?: Accessor<DataT, number>;\n};\n\n/** Render raised arcs joining pairs of source and target coordinates. */\nexport default class ArcLayer<DataT = any, ExtraPropsT = {}> extends Layer<\n  ExtraPropsT & Required<_ArcLayerProps<DataT>>\n> {\n  static layerName = 'ArcLayer';\n  static defaultProps = defaultProps;\n\n  state!: Layer['state'] & {\n    model?: Model;\n  };\n\n  getShaders() {\n    return super.getShaders({vs, fs, modules: [project32, picking]}); // 'project' module added by default.\n  }\n\n  // This layer has its own wrapLongitude logic\n  get wrapLongitude() {\n    return false;\n  }\n\n  initializeState() {\n    const attributeManager = this.getAttributeManager()!;\n\n    /* eslint-disable max-len */\n    attributeManager.addInstanced({\n      instanceSourcePositions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getSourcePosition'\n      },\n      instanceTargetPositions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getTargetPosition'\n      },\n      instanceSourceColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: true,\n        accessor: 'getSourceColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      instanceTargetColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: true,\n        accessor: 'getTargetColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      instanceWidths: {\n        size: 1,\n        transition: true,\n        accessor: 'getWidth',\n        defaultValue: 1\n      },\n      instanceHeights: {\n        size: 1,\n        transition: true,\n        accessor: 'getHeight',\n        defaultValue: 1\n      },\n      instanceTilts: {\n        size: 1,\n        transition: true,\n        accessor: 'getTilt',\n        defaultValue: 0\n      }\n    });\n    /* eslint-enable max-len */\n  }\n\n  updateState(opts: UpdateParameters<this>): void {\n    super.updateState(opts);\n    // Re-generate model if geometry changed\n    if (opts.changeFlags.extensionsChanged) {\n      const {gl} = this.context;\n      this.state.model?.delete();\n      this.state.model = this._getModel(gl);\n      this.getAttributeManager()!.invalidateAll();\n    }\n  }\n\n  draw({uniforms}) {\n    const {widthUnits, widthScale, widthMinPixels, widthMaxPixels, greatCircle, wrapLongitude} =\n      this.props;\n\n    this.state.model\n      .setUniforms(uniforms)\n      .setUniforms({\n        greatCircle,\n        widthUnits: UNIT[widthUnits],\n        widthScale,\n        widthMinPixels,\n        widthMaxPixels,\n        useShortestPath: wrapLongitude\n      })\n      .draw();\n  }\n\n  protected _getModel(gl: WebGLRenderingContext): Model {\n    let positions: number[] = [];\n    const NUM_SEGMENTS = 50;\n    /*\n     *  (0, -1)-------------_(1, -1)\n     *       |          _,-\"  |\n     *       o      _,-\"      o\n     *       |  _,-\"          |\n     *   (0, 1)\"-------------(1, 1)\n     */\n    for (let i = 0; i < NUM_SEGMENTS; i++) {\n      positions = positions.concat([i, 1, 0, i, -1, 0]);\n    }\n\n    const model = new Model(gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: GL.TRIANGLE_STRIP,\n        attributes: {\n          positions: new Float32Array(positions)\n        }\n      }),\n      isInstanced: true\n    });\n\n    model.setUniforms({numSegments: NUM_SEGMENTS});\n\n    return model;\n  }\n}\n"],"file":"arc-layer.js"}