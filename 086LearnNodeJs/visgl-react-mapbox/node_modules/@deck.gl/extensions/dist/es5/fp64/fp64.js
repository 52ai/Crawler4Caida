"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _core = require("@deck.gl/core");

var _project = _interopRequireDefault(require("./project64"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var Fp64Extension = function (_LayerExtension) {
  (0, _inherits2.default)(Fp64Extension, _LayerExtension);

  var _super = _createSuper(Fp64Extension);

  function Fp64Extension() {
    (0, _classCallCheck2.default)(this, Fp64Extension);
    return _super.apply(this, arguments);
  }

  (0, _createClass2.default)(Fp64Extension, [{
    key: "getShaders",
    value: function getShaders() {
      var coordinateSystem = this.props.coordinateSystem;

      if (coordinateSystem !== _core.COORDINATE_SYSTEM.LNGLAT && coordinateSystem !== _core.COORDINATE_SYSTEM.DEFAULT) {
        throw new Error('fp64: coordinateSystem must be LNGLAT');
      }

      return {
        modules: [_project.default]
      };
    }
  }]);
  return Fp64Extension;
}(_core.LayerExtension);

exports.default = Fp64Extension;
(0, _defineProperty2.default)(Fp64Extension, "extensionName", 'Fp64Extension');
//# sourceMappingURL=fp64.js.map