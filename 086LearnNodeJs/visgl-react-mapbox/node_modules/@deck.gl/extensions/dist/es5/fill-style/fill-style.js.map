{"version":3,"sources":["../../../src/fill-style/fill-style.ts"],"names":["defaultProps","fillPatternEnabled","fillPatternAtlas","fillPatternMapping","fillPatternMask","getFillPattern","type","value","d","pattern","getFillPatternScale","getFillPatternOffset","DEFAULT_TEXTURE_PARAMETERS","FillStyleExtension","layer","getAttributeManager","state","extension","isEnabled","modules","opts","patternShaders","filter","Boolean","context","attributeManager","add","fillPatternFrames","size","accessor","transform","getPatternFrame","bind","shaderAttributes","divisor","instanceFillPatternFrames","fillPatternScales","defaultValue","instanceFillPatternScales","fillPatternOffsets","instanceFillPatternOffsets","setState","emptyTexture","Texture2D","gl","data","Uint8Array","width","height","props","oldProps","loadPatternAtlas","call","loadPatternMapping","params","patternTexture","setModuleParameters","fillPatternTexture","delete","fetch","image","propName","parameters","patternMapping","invalidate","setNeedsUpdate","name","def","x","y","LayerExtension"],"mappings":"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","sourcesContent":["import {LayerExtension} from '@deck.gl/core';\nimport {Texture2D} from '@luma.gl/core';\nimport GL from '@luma.gl/constants';\n\nimport {patternShaders} from './shaders.glsl';\n\nimport type {\n  Layer,\n  LayerContext,\n  Accessor,\n  AccessorFunction,\n  Texture,\n  UpdateParameters\n} from '@deck.gl/core';\n\nconst defaultProps = {\n  fillPatternEnabled: true,\n  fillPatternAtlas: null,\n  fillPatternMapping: null,\n  fillPatternMask: true,\n  getFillPattern: {type: 'accessor', value: d => d.pattern},\n  getFillPatternScale: {type: 'accessor', value: 1},\n  getFillPatternOffset: {type: 'accessor', value: [0, 0]}\n};\n\nexport type FillStyleExtensionProps<DataT = any> = {\n  /** Cheap toggle to enable/disable pattern fill. Requires the `pattern` option to be on.\n   * @default true\n   */\n  fillPatternEnabled?: boolean;\n  /** Sprite image url or texture that packs all your patterns into one layout. */\n  fillPatternAtlas?: Texture;\n  /** Pattern names mapped to pattern definitions, or a url that points to a JSON file. */\n  fillPatternMapping?:\n    | string\n    | Record<\n        string,\n        {\n          /** Left position of the pattern on the atlas */\n          x: number;\n          /** Top position of the pattern on the atlas */\n          y: number;\n          /** Width of the pattern */\n          width: number;\n          /** Height of the pattern */\n          height: number;\n        }\n      >;\n  /**\n   * Whether to treat the patterns as transparency masks.\n   * @default true\n   */\n  fillPatternMask?: boolean;\n  /** Accessor for the name of the pattern. */\n  getFillPattern?: AccessorFunction<DataT, string>;\n  /** Accessor for the scale of the pattern, relative to the original size. If the pattern is 24 x 24 pixels, scale `1` roughly yields 24 meters.\n   * @default 1\n   */\n  getFillPatternScale?: Accessor<DataT, number>;\n  /**\n   * Accessor for the offset of the pattern, relative to the original size. Offset `[0.5, 0.5]` shifts the pattern alignment by half.\n   * @default [0, 0]\n   */\n  getFillPatternOffset?: Accessor<DataT, [number, number]>;\n};\n\ntype FillStyleExtensionOptions = {\n  /** If `true`, adds the ability to tile the filled area with a pattern.\n   * @default false\n   */\n  pattern: boolean;\n};\n\nconst DEFAULT_TEXTURE_PARAMETERS = {\n  [GL.TEXTURE_MIN_FILTER]: GL.LINEAR,\n  // GL.LINEAR is the default value but explicitly set it here\n  [GL.TEXTURE_MAG_FILTER]: GL.LINEAR,\n  // for texture boundary artifact\n  [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n  [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE\n};\n\n/** Adds selected features to layers that render a \"fill\", such as the `PolygonLayer` and `ScatterplotLayer`. */\nexport default class FillStyleExtension extends LayerExtension<FillStyleExtensionOptions> {\n  static defaultProps = defaultProps;\n  static extensionName = 'FillStyleExtension';\n\n  constructor({pattern = false}: Partial<FillStyleExtensionOptions> = {}) {\n    super({pattern});\n  }\n\n  isEnabled(layer: Layer<FillStyleExtensionProps>): boolean {\n    return layer.getAttributeManager() !== null && !('pathTesselator' in layer.state);\n  }\n\n  getShaders(this: Layer<FillStyleExtensionProps>, extension: this): any {\n    if (!extension.isEnabled(this)) {\n      return null;\n    }\n\n    return {\n      modules: [extension.opts.pattern && patternShaders].filter(Boolean)\n    };\n  }\n\n  initializeState(this: Layer<FillStyleExtensionProps>, context: LayerContext, extension: this) {\n    if (!extension.isEnabled(this)) {\n      return;\n    }\n\n    const attributeManager = this.getAttributeManager();\n\n    if (extension.opts.pattern) {\n      attributeManager!.add({\n        fillPatternFrames: {\n          size: 4,\n          accessor: 'getFillPattern',\n          transform: extension.getPatternFrame.bind(this),\n          shaderAttributes: {\n            fillPatternFrames: {\n              divisor: 0\n            },\n            instanceFillPatternFrames: {\n              divisor: 1\n            }\n          }\n        },\n        fillPatternScales: {\n          size: 1,\n          accessor: 'getFillPatternScale',\n          defaultValue: 1,\n          shaderAttributes: {\n            fillPatternScales: {\n              divisor: 0\n            },\n            instanceFillPatternScales: {\n              divisor: 1\n            }\n          }\n        },\n        fillPatternOffsets: {\n          size: 2,\n          accessor: 'getFillPatternOffset',\n          shaderAttributes: {\n            fillPatternOffsets: {\n              divisor: 0\n            },\n            instanceFillPatternOffsets: {\n              divisor: 1\n            }\n          }\n        }\n      });\n    }\n    this.setState({\n      emptyTexture: new Texture2D(this.context.gl, {\n        data: new Uint8Array(4),\n        width: 1,\n        height: 1\n      })\n    });\n  }\n\n  updateState(\n    this: Layer<FillStyleExtensionProps>,\n    {props, oldProps}: UpdateParameters<Layer<FillStyleExtensionProps>>,\n    extension: this\n  ) {\n    if (!extension.isEnabled(this)) {\n      return;\n    }\n\n    if (props.fillPatternAtlas && props.fillPatternAtlas !== oldProps.fillPatternAtlas) {\n      extension.loadPatternAtlas.call(this);\n    }\n    if (props.fillPatternMapping && props.fillPatternMapping !== oldProps.fillPatternMapping) {\n      extension.loadPatternMapping.call(this);\n    }\n  }\n\n  draw(this: Layer<FillStyleExtensionProps>, params: any, extension: this) {\n    if (!extension.isEnabled(this)) {\n      return;\n    }\n\n    const {patternTexture} = this.state;\n    this.setModuleParameters({\n      fillPatternTexture: patternTexture || this.state.emptyTexture\n    });\n  }\n\n  finalizeState(this: Layer<FillStyleExtensionProps>) {\n    const {patternTexture, emptyTexture} = this.state;\n    patternTexture?.delete();\n    emptyTexture?.delete();\n  }\n\n  async loadPatternAtlas(this: Layer<FillStyleExtensionProps>) {\n    const {fillPatternAtlas, fetch} = this.props;\n    this.state.patternTexture?.delete();\n    this.setState({patternTexture: null});\n    let image = fillPatternAtlas;\n    if (typeof image === 'string') {\n      image = await fetch(image, {propName: 'fillPatternAtlas', layer: this});\n    }\n    const patternTexture =\n      image instanceof Texture2D\n        ? image\n        : new Texture2D(this.context.gl, {\n            data: image,\n            parameters: DEFAULT_TEXTURE_PARAMETERS\n          });\n    this.setState({patternTexture});\n  }\n\n  async loadPatternMapping(this: Layer<FillStyleExtensionProps>) {\n    const {fillPatternMapping, fetch} = this.props;\n    this.setState({patternMapping: null});\n    let patternMapping = fillPatternMapping;\n    if (typeof patternMapping === 'string') {\n      patternMapping = await fetch(patternMapping, {\n        propName: 'fillPatternMapping',\n        layer: this\n      });\n    }\n    this.setState({patternMapping});\n    this.getAttributeManager()!.invalidate('getFillPattern');\n    this.setNeedsUpdate();\n  }\n\n  getPatternFrame(this: Layer<FillStyleExtensionProps>, name: string) {\n    const {patternMapping} = this.state;\n    const def = patternMapping && patternMapping[name];\n    return def ? [def.x, def.y, def.width, def.height] : [0, 0, 0, 0];\n  }\n}\n"],"file":"fill-style.js"}