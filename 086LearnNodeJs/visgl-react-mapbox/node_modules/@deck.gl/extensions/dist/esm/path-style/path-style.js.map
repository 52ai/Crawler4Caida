{"version":3,"sources":["../../../src/path-style/path-style.ts"],"names":["LayerExtension","_mergeShaders","mergeShaders","dashShaders","offsetShaders","dist","defaultProps","getDashArray","type","value","getOffset","dashJustified","dashGapPickable","PathStyleExtension","constructor","dash","offset","highPrecisionDash","isEnabled","layer","state","getShaders","extension","result","opts","initializeState","context","attributeManager","getAttributeManager","addInstanced","instanceDashArrays","size","accessor","instanceDashOffsets","transform","getDashOffsets","bind","instanceOffsets","updateState","params","uniforms","dashAlignMode","props","Boolean","model","setUniforms","path","positionSize","positionFormat","isNested","Array","isArray","geometrySize","length","p","prevP","i","slice","projectPosition"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {LayerExtension, _mergeShaders as mergeShaders} from '@deck.gl/core';\nimport {dashShaders, offsetShaders} from './shaders.glsl';\nimport {dist} from 'gl-matrix/vec3';\n\nimport type {Layer, LayerContext, Accessor, UpdateParameters} from '@deck.gl/core';\n\nconst defaultProps = {\n  getDashArray: {type: 'accessor', value: [0, 0]},\n  getOffset: {type: 'accessor', value: 0},\n  dashJustified: false,\n  dashGapPickable: false\n};\n\nexport type PathStyleExtensionProps<DataT = any> = {\n  /**\n   * Accessor for the dash array to draw each path with: `[dashSize, gapSize]` relative to the width of the path.\n   * Requires the `dash` option to be on.\n   */\n  getDashArray?: Accessor<DataT, [number, number]>;\n  /**\n   * Accessor for the offset to draw each path with, relative to the width of the path.\n   * Negative offset is to the left hand side, and positive offset is to the right hand side.\n   * @default 0\n   */\n  getOffset?: Accessor<DataT, number>;\n  /**\n   * If `true`, adjust gaps for the dashes to align at both ends.\n   * @default false\n   */\n  dashJustified?: boolean;\n  /**\n   * If `true`, gaps between solid strokes are pickable. If `false`, only the solid strokes are pickable.\n   * @default false\n   */\n  dashGapPickable?: boolean;\n};\n\ntype PathStyleExtensionOptions = {\n  /**\n   * Add capability to render dashed lines.\n   * @default false\n   */\n  dash: boolean;\n  /**\n   * Add capability to offset lines.\n   * @default false\n   */\n  offset: boolean;\n  /**\n   * Improve dash rendering quality in certain circumstances. Note that this option introduces additional performance overhead.\n   * @default false\n   */\n  highPrecisionDash: boolean;\n};\n\n/** Adds selected features to the `PathLayer` and composite layers that render the `PathLayer`. */\nexport default class PathStyleExtension extends LayerExtension<PathStyleExtensionOptions> {\n  static defaultProps = defaultProps;\n  static extensionName = 'PathStyleExtension';\n\n  constructor({\n    dash = false,\n    offset = false,\n    highPrecisionDash = false\n  }: Partial<PathStyleExtensionOptions> = {}) {\n    super({dash: dash || highPrecisionDash, offset, highPrecisionDash});\n  }\n\n  isEnabled(layer: Layer<PathStyleExtensionProps>): boolean {\n    return 'pathTesselator' in layer.state;\n  }\n\n  getShaders(this: Layer<PathStyleExtensionProps>, extension: this): any {\n    if (!extension.isEnabled(this)) {\n      return null;\n    }\n\n    // Merge shader injection\n    let result = {};\n    if (extension.opts.dash) {\n      result = mergeShaders(result, dashShaders);\n    }\n    if (extension.opts.offset) {\n      result = mergeShaders(result, offsetShaders);\n    }\n\n    return result;\n  }\n\n  initializeState(this: Layer<PathStyleExtensionProps>, context: LayerContext, extension: this) {\n    const attributeManager = this.getAttributeManager();\n    if (!attributeManager || !extension.isEnabled(this)) {\n      // This extension only works with the PathLayer\n      return;\n    }\n\n    if (extension.opts.dash) {\n      attributeManager.addInstanced({\n        instanceDashArrays: {size: 2, accessor: 'getDashArray'}\n      });\n    }\n    if (extension.opts.highPrecisionDash) {\n      attributeManager.addInstanced({\n        instanceDashOffsets: {\n          size: 1,\n          accessor: 'getPath',\n          transform: extension.getDashOffsets.bind(this)\n        }\n      });\n    }\n    if (extension.opts.offset) {\n      attributeManager.addInstanced({\n        instanceOffsets: {size: 1, accessor: 'getOffset'}\n      });\n    }\n  }\n\n  updateState(\n    this: Layer<PathStyleExtensionProps>,\n    params: UpdateParameters<Layer<PathStyleExtensionProps>>,\n    extension: this\n  ) {\n    if (!extension.isEnabled(this)) {\n      return;\n    }\n\n    const uniforms: any = {};\n\n    if (extension.opts.dash) {\n      uniforms.dashAlignMode = this.props.dashJustified ? 1 : 0;\n      uniforms.dashGapPickable = Boolean(this.props.dashGapPickable);\n    }\n\n    this.state.model.setUniforms(uniforms);\n  }\n\n  getDashOffsets(this: Layer<PathStyleExtensionProps>, path: number[] | number[][]): number[] {\n    const result = [0];\n    const positionSize = this.props.positionFormat === 'XY' ? 2 : 3;\n    const isNested = Array.isArray(path[0]);\n    const geometrySize = isNested ? path.length : path.length / positionSize;\n\n    let p;\n    let prevP;\n    for (let i = 0; i < geometrySize - 1; i++) {\n      p = isNested ? path[i] : path.slice(i * positionSize, i * positionSize + positionSize);\n      p = this.projectPosition(p);\n\n      if (i > 0) {\n        result[i] = result[i - 1] + dist(prevP, p);\n      }\n\n      prevP = p;\n    }\n    return result;\n  }\n}\n"],"file":"path-style.js"}