{"version":3,"sources":["../../../src/data-filter/data-filter.ts"],"names":["LayerExtension","shaderModule","shaderModule64","aggregator","readPixelsToArray","clear","defaultProps","getFilterValue","type","value","onFilteredItemsChange","compare","filterEnabled","filterRange","filterSoftRange","filterTransformSize","filterTransformColor","DATA_TYPE_FROM_SIZE","DataFilterExtension","constructor","filterSize","fp64","countItems","Error","getShaders","extension","opts","modules","defines","DATAFILTER_TYPE","DATAFILTER_DOUBLE","Boolean","initializeState","context","attributeManager","getAttributeManager","add","filterValues","size","accessor","shaderAttributes","divisor","instanceFilterValues","gl","useFloatTarget","supportsFloatTarget","filterIndices","vertexOffset","normalized","object","index","i","__source","Math","floor","filterPrevIndices","filterFBO","getFramebuffer","filterModel","getModel","call","setState","updateState","props","oldProps","state","filterNeedsUpdate","attributes","needsUpdate","draw","params","setVertexCount","getNumInstances","framebuffer","color","updateModuleSettings","moduleParameters","setAttributes","getShaderAttributes","parameters","viewport","width","height","count","length","id","finalizeState","delete"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {LayerExtension} from '@deck.gl/core';\nimport {shaderModule, shaderModule64} from './shader-module';\nimport * as aggregator from './aggregator';\nimport {readPixelsToArray, clear} from '@luma.gl/core';\nimport GL from '@luma.gl/constants';\n\nimport type {Layer, LayerContext, Accessor, UpdateParameters} from '@deck.gl/core';\n\nconst defaultProps = {\n  getFilterValue: {type: 'accessor', value: 0},\n  onFilteredItemsChange: {type: 'function', value: null, compare: false},\n\n  filterEnabled: true,\n  filterRange: [-1, 1],\n  filterSoftRange: null,\n  filterTransformSize: true,\n  filterTransformColor: true\n};\n\nexport type DataFilterExtensionProps<DataT = any> = {\n  /**\n   * Accessor to retrieve the value for each object that it will be filtered by.\n   * Returns either a number (if `filterSize: 1`) or an array of numbers.\n   */\n  getFilterValue?: Accessor<DataT, number | number[]>;\n  /**\n   * Enable/disable the data filter. If the data filter is disabled, all objects are rendered.\n   * @default true\n   */\n  filterEnabled?: boolean;\n  /**\n   * The [min, max] bounds which defines whether an object should be rendered.\n   * If an object's filtered value is within the bounds, the object will be rendered; otherwise it will be hidden.\n   * @default [-1, 1]\n   */\n  filterRange?: [number, number] | [number, number][];\n  /**\n   * If specified, objects will be faded in/out instead of abruptly shown/hidden.\n   * When the filtered value is outside of the bounds defined by `filterSoftRange` but still within the bounds defined by `filterRange`, the object will be rendered as \"faded.\"\n   * @default null\n   */\n  filterSoftRange?: [number, number] | [number, number][] | null;\n  /**\n   * When an object is \"faded\", manipulate its size so that it appears smaller or thinner. Only works if `filterSoftRange` is specified.\n   * @default true\n   */\n  filterTransformSize?: boolean;\n  /**\n   * When an object is \"faded\", manipulate its opacity so that it appears more translucent. Only works if `filterSoftRange` is specified.\n   * @default true\n   */\n  filterTransformColor?: boolean;\n  /**\n   * Only called if the `countItems` option is enabled.\n   */\n  onFilteredItemsChange?: (evt: {\n    /** The id of the source layer. */\n    id: string;\n    /** The number of data objects that pass the filter. */\n    count: number;\n  }) => void;\n};\n\ntype DataFilterExtensionOptions = {\n  /**\n   * The size of the filter (number of columns to filter by). The data filter can show/hide data based on 1-4 numeric properties of each object.\n   * @default 1\n   */\n  filterSize: number;\n  /**\n   * Use 64-bit precision instead of 32-bit.\n   * @default false\n   */\n  fp64: boolean;\n  /**\n   * If `true`, reports the number of filtered objects with the `onFilteredItemsChange` callback.\n   * @default `false`.\n   */\n  countItems: boolean;\n};\n\nconst DATA_TYPE_FROM_SIZE = {\n  1: 'float',\n  2: 'vec2',\n  3: 'vec3',\n  4: 'vec4'\n};\n\n/** Adds GPU-based data filtering functionalities to layers. It allows the layer to show/hide objects based on user-defined properties. */\nexport default class DataFilterExtension extends LayerExtension<DataFilterExtensionOptions> {\n  static defaultProps = defaultProps;\n  static extensionName = 'DataFilterExtension';\n\n  constructor({\n    filterSize = 1,\n    fp64 = false,\n    countItems = false\n  }: Partial<DataFilterExtensionOptions> = {}) {\n    if (!DATA_TYPE_FROM_SIZE[filterSize]) {\n      throw new Error('filterSize out of range');\n    }\n\n    super({filterSize, fp64, countItems});\n  }\n\n  getShaders(this: Layer<DataFilterExtensionProps>, extension: this): any {\n    const {filterSize, fp64} = extension.opts;\n\n    return {\n      modules: [fp64 ? shaderModule64 : shaderModule],\n      defines: {\n        DATAFILTER_TYPE: DATA_TYPE_FROM_SIZE[filterSize],\n        DATAFILTER_DOUBLE: Boolean(fp64)\n      }\n    };\n  }\n\n  initializeState(this: Layer<DataFilterExtensionProps>, context: LayerContext, extension: this) {\n    const attributeManager = this.getAttributeManager();\n    if (attributeManager) {\n      attributeManager.add({\n        filterValues: {\n          size: extension.opts.filterSize,\n          type: extension.opts.fp64 ? GL.DOUBLE : GL.FLOAT,\n          accessor: 'getFilterValue',\n          shaderAttributes: {\n            filterValues: {\n              divisor: 0\n            },\n            instanceFilterValues: {\n              divisor: 1\n            }\n          }\n        }\n      });\n    }\n\n    const {gl} = this.context;\n    if (attributeManager && extension.opts.countItems) {\n      const useFloatTarget = aggregator.supportsFloatTarget(gl);\n      // This attribute is needed for variable-width data, e.g. Path, SolidPolygon, Text\n      // The vertex shader checks if a vertex has the same \"index\" as the previous vertex\n      // so that we only write one count cross multiple vertices of the same object\n      attributeManager.add({\n        filterIndices: {\n          size: useFloatTarget ? 1 : 2,\n          vertexOffset: 1,\n          type: GL.UNSIGNED_BYTE,\n          normalized: true,\n          accessor: (object, {index}) => {\n            const i = object && object.__source ? object.__source.index : index;\n            return useFloatTarget ? (i + 1) % 255 : [(i + 1) % 255, Math.floor(i / 255) % 255];\n          },\n          shaderAttributes: {\n            filterPrevIndices: {\n              vertexOffset: 0\n            },\n            filterIndices: {\n              vertexOffset: 1\n            }\n          }\n        }\n      });\n\n      const filterFBO = aggregator.getFramebuffer(gl, useFloatTarget);\n      const filterModel = aggregator.getModel(\n        gl,\n        extension.getShaders.call(this, extension),\n        useFloatTarget\n      );\n      this.setState({filterFBO, filterModel});\n    }\n  }\n\n  updateState(\n    this: Layer<DataFilterExtensionProps>,\n    {props, oldProps}: UpdateParameters<Layer<DataFilterExtensionProps>>\n  ) {\n    if (this.state.filterModel) {\n      const attributeManager = this.getAttributeManager();\n      const filterNeedsUpdate =\n        // attributeManager must be defined for filterModel to be set\n        attributeManager!.attributes.filterValues.needsUpdate() ||\n        props.filterEnabled !== oldProps.filterEnabled ||\n        props.filterRange !== oldProps.filterRange ||\n        props.filterSoftRange !== oldProps.filterSoftRange;\n      if (filterNeedsUpdate) {\n        this.setState({filterNeedsUpdate});\n      }\n    }\n  }\n\n  draw(this: Layer<DataFilterExtensionProps>, params: any, extension: this) {\n    const {filterFBO, filterModel, filterNeedsUpdate} = this.state;\n    const {onFilteredItemsChange} = this.props;\n    if (filterNeedsUpdate && onFilteredItemsChange && filterModel) {\n      const {\n        attributes: {filterValues, filterIndices}\n      } = this.getAttributeManager()!;\n      filterModel.setVertexCount(this.getNumInstances());\n\n      const {gl} = this.context;\n      clear(gl, {framebuffer: filterFBO, color: [0, 0, 0, 0]});\n\n      filterModel\n        .updateModuleSettings(params.moduleParameters)\n        .setAttributes({\n          ...filterValues.getShaderAttributes(),\n          ...(filterIndices && filterIndices.getShaderAttributes())\n        })\n        .draw({\n          framebuffer: filterFBO,\n          parameters: {\n            ...aggregator.parameters,\n            viewport: [0, 0, filterFBO.width, filterFBO.height]\n          }\n        });\n      const color = readPixelsToArray(filterFBO);\n      let count = 0;\n      for (let i = 0; i < color.length; i++) {\n        count += color[i];\n      }\n      onFilteredItemsChange({id: this.id, count});\n\n      this.state.filterNeedsUpdate = false;\n    }\n  }\n\n  finalizeState(this: Layer<DataFilterExtensionProps>) {\n    const {filterFBO, filterModel} = this.state;\n    if (filterFBO) {\n      filterFBO.color.delete();\n      filterFBO.delete();\n      filterModel.delete();\n    }\n  }\n}\n"],"file":"data-filter.js"}