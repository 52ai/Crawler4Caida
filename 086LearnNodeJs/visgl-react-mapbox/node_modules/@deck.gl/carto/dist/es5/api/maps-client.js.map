{"version":3,"sources":["../../../src/api/maps-client.ts"],"names":["CONNECTIONS","BIGQUERY","CARTO","BUFFER_SIZE","TILE_EXTENT","getDataV2","type","source","credentials","defaultCredentials","apiVersion","localCreds","API_VERSIONS","V3","defaultCloudNativeCredentials","defaultClassicCredentials","mapsUrl","DEFAULT_MAPS_URL_FORMAT","connection","MAP_TYPES","TILESET","V1","V2","mapConfig","createMapConfig","url","buildURLMapsAPIv1","request","layergroup","metadata","tilejson","vector","buildURLMapsAPIv2","Error","fetch","headers","Accept","response","json","ok","dealWithError","status","username","apiKey","e","JSON","stringify","errors","error","initURLParameters","encodedApiKey","encodedClient","parameters","cfg","join","mapsApiType","QUERY","replace","DEFAULT_USER_COMPONENT_IN_URL","DEFAULT_REGION_COMPONENT_IN_URL","region","sql","version","buffersize","mvt","layers","options","vector_extent"],"mappings":"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","sourcesContent":["/**\n * Maps API Client for Maps API v1 and Maps API v2\n */\nimport {\n  ClassicCredentials,\n  defaultClassicCredentials,\n  defaultCloudNativeCredentials,\n  getDefaultCredentials\n} from '../config';\nimport {\n  API_VERSIONS,\n  DEFAULT_MAPS_URL_FORMAT,\n  DEFAULT_REGION_COMPONENT_IN_URL,\n  DEFAULT_USER_COMPONENT_IN_URL,\n  encodeParameter,\n  MapType,\n  MAP_TYPES\n} from './maps-api-common';\n\nexport const CONNECTIONS = {\n  BIGQUERY: 'bigquery',\n  CARTO: 'carto'\n};\n\nconst BUFFER_SIZE = 16;\nconst TILE_EXTENT = 4096;\n\n/**\n * Obtain a TileJson from Maps API v1 and v2\n */\nexport async function getDataV2({\n  type,\n  source,\n  credentials\n}: {\n  type: MapType;\n  source: string;\n  credentials?: Partial<ClassicCredentials>;\n}) {\n  const defaultCredentials = getDefaultCredentials();\n  const apiVersion = credentials?.apiVersion || defaultCredentials.apiVersion;\n  // Only pick up default credentials if they have been defined for\n  // correct API version\n  const localCreds = {\n    ...(apiVersion === API_VERSIONS.V3 ? defaultCloudNativeCredentials : defaultClassicCredentials),\n    mapsUrl: DEFAULT_MAPS_URL_FORMAT[apiVersion],\n    ...(defaultCredentials.apiVersion === apiVersion && defaultCredentials),\n    ...credentials\n  } as unknown as Required<ClassicCredentials>;\n\n  let url: string;\n\n  const connection = type === MAP_TYPES.TILESET ? CONNECTIONS.BIGQUERY : CONNECTIONS.CARTO;\n\n  switch (apiVersion) {\n    case API_VERSIONS.V1:\n      // Maps API v1\n      const mapConfig = createMapConfig(source);\n      url = buildURLMapsAPIv1({mapConfig, credentials: localCreds});\n      const layergroup = await request({url, credentials: localCreds});\n      return layergroup.metadata.tilejson.vector;\n\n    case API_VERSIONS.V2:\n      // Maps API v2\n      url = buildURLMapsAPIv2({connection, type, source, credentials: localCreds});\n      return await request({url, credentials: localCreds});\n\n    default:\n      throw new Error(\n        `Invalid maps API version. It should be ${API_VERSIONS.V1} or ${API_VERSIONS.V2}`\n      );\n  }\n}\n\n/**\n * Request against Maps API\n */\nasync function request({url, credentials}: {url: string; credentials: ClassicCredentials}) {\n  let response;\n\n  try {\n    /* global fetch */\n    response = await fetch(url, {\n      headers: {\n        Accept: 'application/json'\n      }\n    });\n  } catch (error) {\n    throw new Error(`Failed to connect to Maps API: ${error}`);\n  }\n\n  const json = await response.json();\n\n  if (!response.ok) {\n    dealWithError({response, json, credentials});\n  }\n\n  return json;\n}\n\n/**\n * Display proper message from Maps API error\n */\nfunction dealWithError({\n  response,\n  json,\n  credentials\n}: {\n  response: Response;\n  json: any;\n  credentials: ClassicCredentials;\n}) {\n  switch (response.status) {\n    case 401:\n      throw new Error(\n        `Unauthorized access to Maps API: invalid combination of user ('${credentials.username}') and apiKey ('${credentials.apiKey}')`\n      );\n    case 403:\n      throw new Error(\n        `Unauthorized access to dataset: the provided apiKey('${credentials.apiKey}') doesn't provide access to the requested data`\n      );\n\n    default:\n      const e =\n        credentials.apiVersion === API_VERSIONS.V1 ? JSON.stringify(json.errors) : json.error;\n      throw new Error(e);\n  }\n}\n\nfunction initURLParameters(credentials: ClassicCredentials): string[] {\n  const encodedApiKey = encodeParameter('api_key', credentials.apiKey);\n  const encodedClient = encodeParameter('client', 'deck-gl-carto');\n  return [encodedApiKey, encodedClient];\n}\n\n/**\n * Build a URL with all required parameters\n */\nfunction buildURLMapsAPIv1({\n  mapConfig,\n  credentials\n}: {\n  mapConfig: unknown;\n  credentials: Required<ClassicCredentials>;\n}): string {\n  const parameters = initURLParameters(credentials);\n  const cfg = JSON.stringify(mapConfig);\n  return `${mapsUrl(credentials)}?${parameters.join('&')}&${encodeParameter('config', cfg)}`;\n}\n\nfunction buildURLMapsAPIv2({\n  connection,\n  type,\n  source,\n  credentials\n}: {\n  connection: string;\n  type: MapType;\n  source: string;\n  credentials: Required<ClassicCredentials>;\n}): string {\n  const parameters = initURLParameters(credentials);\n  // Query type is mapped to 'sql' at maps api v1\n  const mapsApiType = type === MAP_TYPES.QUERY ? 'sql' : type;\n  let url = `${mapsUrl(credentials)}/${connection}/${mapsApiType}?`;\n  url += `${encodeParameter('source', source)}&format=tilejson&${parameters.join('&')}`;\n  return url;\n}\n\n/**\n * Prepare a url valid for the specified user\n */\nfunction mapsUrl(credentials: Required<ClassicCredentials>) {\n  return credentials.mapsUrl\n    .replace(DEFAULT_USER_COMPONENT_IN_URL, credentials.username)\n    .replace(DEFAULT_REGION_COMPONENT_IN_URL, credentials.region);\n}\n\nfunction createMapConfig(sql: string) {\n  return {\n    version: '1.3.1',\n    buffersize: {\n      mvt: BUFFER_SIZE\n    },\n    layers: [\n      {\n        type: 'mapnik',\n        options: {\n          sql,\n          // eslint-disable-next-line camelcase\n          vector_extent: TILE_EXTENT\n        }\n      }\n    ]\n  };\n}\n"],"file":"maps-client.js"}