{"version":3,"sources":["../../../../src/layers/schema/carto-spatial-tile.ts"],"names":["IndicesReader","pbf","end","readFields","_readField","value","BigUint64Array","tag","obj","readPackedFixed64","CellsReader","indices","properties","numericProps","read","readVarint","pos","push","PropertiesReader","entry","NumericPropKeyValueReader","key","TileReader","scheme","cells","SHIFT_LEFT_32","BigInt","readPackedEnd","type","readFixed64","a","readFixed32","b","arr"],"mappings":"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","sourcesContent":["import {Indices, IndexScheme} from './spatialjson-utils';\nimport {\n  KeyValueProperties,\n  NumericProp,\n  NumericPropKeyValueReader,\n  PropertiesReader\n} from './carto-tile';\n\n// Indices =====================================\n\nexport class IndicesReader {\n  static read(pbf, end?: number): Indices {\n    const {value} = pbf.readFields(IndicesReader._readField, {value: []}, end);\n    return {value: new BigUint64Array(value)};\n  }\n  static _readField(this: void, tag: number, obj, pbf) {\n    if (tag === 1) readPackedFixed64(pbf, obj.value);\n  }\n}\n\n// Cells =========================================\n\ninterface Cells {\n  indices: Indices;\n  properties: KeyValueProperties[];\n  numericProps: Record<string, NumericProp>;\n}\n\nclass CellsReader {\n  static read(pbf, end?: number): Cells {\n    return pbf.readFields(\n      CellsReader._readField,\n      {indices: null, properties: [], numericProps: {}},\n      end\n    );\n  }\n  static _readField(this: void, tag: number, obj: Cells, pbf) {\n    if (tag === 1) obj.indices = IndicesReader.read(pbf, pbf.readVarint() + pbf.pos);\n    else if (tag === 2) obj.properties.push(PropertiesReader.read(pbf, pbf.readVarint() + pbf.pos));\n    else if (tag === 3) {\n      const entry = NumericPropKeyValueReader.read(pbf, pbf.readVarint() + pbf.pos);\n      obj.numericProps[entry.key] = entry.value;\n    }\n  }\n}\n\n// Tile ========================================\n\n// TODO this type is very similar to SpatialBinary, should align\nexport interface Tile {\n  scheme: IndexScheme;\n  cells: Cells;\n}\n\nexport class TileReader {\n  static read(pbf, end?: number): Tile {\n    return pbf.readFields(TileReader._readField, {scheme: 0, cells: null}, end);\n  }\n  static _readField(this: void, tag: number, obj: Tile, pbf) {\n    if (tag === 1) obj.scheme = pbf.readVarint();\n    else if (tag === 2) obj.cells = CellsReader.read(pbf, pbf.readVarint() + pbf.pos);\n  }\n}\n\n// pbf doesn't support BigInt natively, implement support for packed fixed64 type\nconst SHIFT_LEFT_32 = BigInt((1 << 16) * (1 << 16));\n\nfunction readPackedEnd(pbf) {\n  return pbf.type === 2 ? pbf.readVarint() + pbf.pos : pbf.pos + 1;\n}\nfunction readFixed64(pbf) {\n  const a = BigInt(pbf.readFixed32());\n  const b = BigInt(pbf.readFixed32());\n  return a + b * SHIFT_LEFT_32;\n}\n\nfunction readPackedFixed64(pbf, arr) {\n  if (pbf.type !== 2) return arr.push(readFixed64(pbf));\n  const end = readPackedEnd(pbf);\n  arr = arr || [];\n  while (pbf.pos < end) arr.push(readFixed64(pbf));\n  return arr;\n}\n"],"file":"carto-spatial-tile.js"}