{"version":3,"sources":["../../../src/layers/h3-tile-layer.ts"],"names":["CompositeLayer","H3HexagonLayer","H3Tileset2D","getHexagonResolution","SpatialIndexTileLayer","renderSubLayers","props","data","index","tile","length","getHexagon","d","id","centerHexagon","highPrecision","defaultProps","aggregationResLevel","H3TileLayer","initializeState","_checkH3Lib","setState","tileJSON","updateState","changeFlags","dataChanged","tiles","renderLayers","state","minresolution","parseInt","maxresolution","minZoom","Math","max","zoom","latitude","maxZoom","min","TilesetClass"],"mappings":";AAAA,SACEA,cADF,QAOO,eAPP;AAQA,SAAQC,cAAR,QAA6B,qBAA7B;AACA,OAAOC,WAAP,IAAqBC,oBAArB,QAAgD,iBAAhD;AACA,OAAOC,qBAAP,MAAkC,4BAAlC;;AAEA,MAAMC,eAAe,GAAGC,KAAK,IAAI;AAC/B,QAAM;AAACC,IAAAA;AAAD,MAASD,KAAf;AACA,QAAM;AAACE,IAAAA;AAAD,MAAUF,KAAK,CAACG,IAAtB;AACA,MAAI,CAACF,IAAD,IAAS,CAACA,IAAI,CAACG,MAAnB,EAA2B,OAAO,IAAP;AAE3B,SAAO,IAAIT,cAAJ,CAAmBK,KAAnB,EAA0B;AAC/BK,IAAAA,UAAU,EAAEC,CAAC,IAAIA,CAAC,CAACC,EADY;AAE/BC,IAAAA,aAAa,EAAEN,KAFgB;AAG/BO,IAAAA,aAAa,EAAE;AAHgB,GAA1B,CAAP;AAKD,CAVD;;AAYA,MAAMC,YAA+C,GAAG;AACtDC,EAAAA,mBAAmB,EAAE;AADiC,CAAxD;AAgBA,eAAe,MAAMC,WAAN,SAAyDlB,cAAzD,CAEb;AAAA;AAAA;;AAAA;AAAA;;AASAmB,EAAAA,eAAe,GAAS;AACtBlB,IAAAA,cAAc,CAACmB,WAAf;;AACA,SAAKC,QAAL,CAAc;AAACd,MAAAA,IAAI,EAAE,IAAP;AAAae,MAAAA,QAAQ,EAAE;AAAvB,KAAd;AACD;;AAEDC,EAAAA,WAAW,CAAC;AAACC,IAAAA;AAAD,GAAD,EAA8C;AACvD,QAAIA,WAAW,CAACC,WAAhB,EAA6B;AAC3B,UAAI;AAAClB,QAAAA;AAAD,UAAS,KAAKD,KAAlB;AACA,YAAMgB,QAAQ,GAAGf,IAAjB;AACAA,MAAAA,IAAI,GAAIe,QAAD,CAAkBI,KAAzB;AACA,WAAKL,QAAL,CAAc;AAACd,QAAAA,IAAD;AAAOe,QAAAA;AAAP,OAAd;AACD;AACF;;AAEDK,EAAAA,YAAY,GAA8B;AACxC,UAAM;AAACpB,MAAAA,IAAD;AAAOe,MAAAA;AAAP,QAAmB,KAAKM,KAA9B;AACA,QAAIC,aAAa,GAAGC,QAAQ,CAACR,QAAQ,CAACO,aAAV,CAA5B;AACA,QAAIE,aAAa,GAAGD,QAAQ,CAACR,QAAQ,CAACS,aAAV,CAA5B;;AAIA,QAAI,KAAKzB,KAAL,CAAW0B,OAAf,EAAwB;AACtBH,MAAAA,aAAa,GAAGI,IAAI,CAACC,GAAL,CACdL,aADc,EAEd1B,oBAAoB,CAAC;AAACgC,QAAAA,IAAI,EAAE,KAAK7B,KAAL,CAAW0B,OAAlB;AAA2BI,QAAAA,QAAQ,EAAE;AAArC,OAAD,CAFN,CAAhB;AAID;;AACD,QAAI,KAAK9B,KAAL,CAAW+B,OAAf,EAAwB;AACtBN,MAAAA,aAAa,GAAGE,IAAI,CAACK,GAAL,CACdP,aADc,EAEd5B,oBAAoB,CAAC;AAACgC,QAAAA,IAAI,EAAE,KAAK7B,KAAL,CAAW+B,OAAlB;AAA2BD,QAAAA,QAAQ,EAAE;AAArC,OAAD,CAFN,CAAhB;AAID;;AAID,WAAO,CACL,IAAIhC,qBAAJ,CAA0B,KAAKE,KAA/B,EAAsC;AACpCO,MAAAA,EAAE,0BAAmB,KAAKP,KAAL,CAAWO,EAA9B,CADkC;AAEpCN,MAAAA,IAFoC;AAIpCgC,MAAAA,YAAY,EAAErC,WAJsB;AAKpCG,MAAAA,eALoC;AAOpC2B,MAAAA,OAAO,EAAEH,aAP2B;AAQpCQ,MAAAA,OAAO,EAAEN;AAR2B,KAAtC,CADK,CAAP;AAYD;;AAzDD;;gBAFmBb,W,eAGA,a;;gBAHAA,W,kBAIGF,Y","sourcesContent":["import {\n  CompositeLayer,\n  CompositeLayerProps,\n  Layer,\n  LayersList,\n  UpdateParameters,\n  DefaultProps\n} from '@deck.gl/core';\nimport {H3HexagonLayer} from '@deck.gl/geo-layers';\nimport H3Tileset2D, {getHexagonResolution} from './h3-tileset-2d';\nimport SpatialIndexTileLayer from './spatial-index-tile-layer';\n\nconst renderSubLayers = props => {\n  const {data} = props;\n  const {index} = props.tile;\n  if (!data || !data.length) return null;\n\n  return new H3HexagonLayer(props, {\n    getHexagon: d => d.id,\n    centerHexagon: index,\n    highPrecision: true\n  });\n};\n\nconst defaultProps: DefaultProps<H3HexagonLayerProps> = {\n  aggregationResLevel: 4\n};\n\n/** All properties supported by H3TileLayer. */\nexport type H3TileLayerProps<DataT = any> = _H3TileLayerProps<DataT> & CompositeLayerProps<DataT>;\n\n// TODO: use type from h3-hexagon-layer when available\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\ntype H3HexagonLayerProps<DataT = any> = Record<string, any>;\n\n/** Properties added by H3TileLayer. */\ntype _H3TileLayerProps<DataT> = H3HexagonLayerProps<DataT> & {\n  aggregationResLevel?: number;\n};\n\nexport default class H3TileLayer<DataT = any, ExtraPropsT = {}> extends CompositeLayer<\n  ExtraPropsT & Required<_H3TileLayerProps<DataT>>\n> {\n  static layerName = 'H3TileLayer';\n  static defaultProps = defaultProps;\n\n  state!: {\n    tileJSON: any;\n    data: any;\n  };\n\n  initializeState(): void {\n    H3HexagonLayer._checkH3Lib();\n    this.setState({data: null, tileJSON: null});\n  }\n\n  updateState({changeFlags}: UpdateParameters<this>): void {\n    if (changeFlags.dataChanged) {\n      let {data} = this.props;\n      const tileJSON = data;\n      data = (tileJSON as any).tiles;\n      this.setState({data, tileJSON});\n    }\n  }\n\n  renderLayers(): Layer | null | LayersList {\n    const {data, tileJSON} = this.state;\n    let minresolution = parseInt(tileJSON.minresolution);\n    let maxresolution = parseInt(tileJSON.maxresolution);\n\n    // Convert Mercator zooms provided in props into H3 res levels\n    // and clip into valid range provided from the tilejson\n    if (this.props.minZoom) {\n      minresolution = Math.max(\n        minresolution,\n        getHexagonResolution({zoom: this.props.minZoom, latitude: 0})\n      );\n    }\n    if (this.props.maxZoom) {\n      maxresolution = Math.min(\n        maxresolution,\n        getHexagonResolution({zoom: this.props.maxZoom, latitude: 0})\n      );\n    }\n\n    // The naming is unfortunate, but minZoom & maxZoom in the context\n    // of a Tileset2D refer to the resolution levels, not the Mercator zooms\n    return [\n      new SpatialIndexTileLayer(this.props, {\n        id: `h3-tile-layer-${this.props.id}`,\n        data,\n        // @ts-expect-error Tileset2D should be generic over TileIndex\n        TilesetClass: H3Tileset2D,\n        renderSubLayers,\n        // minZoom and maxZoom are H3 resolutions, however we must use this naming as that is what the Tileset2D class expects\n        minZoom: minresolution,\n        maxZoom: maxresolution\n      })\n    ];\n  }\n}\n"],"file":"h3-tile-layer.js"}