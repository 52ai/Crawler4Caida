{"version":3,"sources":["../../../../src/layers/schema/carto-spatial-tile.ts"],"names":["NumericPropKeyValueReader","PropertiesReader","IndicesReader","read","pbf","end","value","readFields","_readField","BigUint64Array","tag","obj","readPackedFixed64","CellsReader","indices","properties","numericProps","readVarint","pos","push","entry","key","TileReader","scheme","cells","SHIFT_LEFT_32","BigInt","readPackedEnd","type","readFixed64","a","readFixed32","b","arr"],"mappings":"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","sourcesContent":["import {Indices, IndexScheme} from './spatialjson-utils';\nimport {\n  KeyValueProperties,\n  NumericProp,\n  NumericPropKeyValueReader,\n  PropertiesReader\n} from './carto-tile';\n\n// Indices =====================================\n\nexport class IndicesReader {\n  static read(pbf, end?: number): Indices {\n    const {value} = pbf.readFields(IndicesReader._readField, {value: []}, end);\n    return {value: new BigUint64Array(value)};\n  }\n  static _readField(this: void, tag: number, obj, pbf) {\n    if (tag === 1) readPackedFixed64(pbf, obj.value);\n  }\n}\n\n// Cells =========================================\n\ninterface Cells {\n  indices: Indices;\n  properties: KeyValueProperties[];\n  numericProps: Record<string, NumericProp>;\n}\n\nclass CellsReader {\n  static read(pbf, end?: number): Cells {\n    return pbf.readFields(\n      CellsReader._readField,\n      {indices: null, properties: [], numericProps: {}},\n      end\n    );\n  }\n  static _readField(this: void, tag: number, obj: Cells, pbf) {\n    if (tag === 1) obj.indices = IndicesReader.read(pbf, pbf.readVarint() + pbf.pos);\n    else if (tag === 2) obj.properties.push(PropertiesReader.read(pbf, pbf.readVarint() + pbf.pos));\n    else if (tag === 3) {\n      const entry = NumericPropKeyValueReader.read(pbf, pbf.readVarint() + pbf.pos);\n      obj.numericProps[entry.key] = entry.value;\n    }\n  }\n}\n\n// Tile ========================================\n\n// TODO this type is very similar to SpatialBinary, should align\nexport interface Tile {\n  scheme: IndexScheme;\n  cells: Cells;\n}\n\nexport class TileReader {\n  static read(pbf, end?: number): Tile {\n    return pbf.readFields(TileReader._readField, {scheme: 0, cells: null}, end);\n  }\n  static _readField(this: void, tag: number, obj: Tile, pbf) {\n    if (tag === 1) obj.scheme = pbf.readVarint();\n    else if (tag === 2) obj.cells = CellsReader.read(pbf, pbf.readVarint() + pbf.pos);\n  }\n}\n\n// pbf doesn't support BigInt natively, implement support for packed fixed64 type\nconst SHIFT_LEFT_32 = BigInt((1 << 16) * (1 << 16));\n\nfunction readPackedEnd(pbf) {\n  return pbf.type === 2 ? pbf.readVarint() + pbf.pos : pbf.pos + 1;\n}\nfunction readFixed64(pbf) {\n  const a = BigInt(pbf.readFixed32());\n  const b = BigInt(pbf.readFixed32());\n  return a + b * SHIFT_LEFT_32;\n}\n\nfunction readPackedFixed64(pbf, arr) {\n  if (pbf.type !== 2) return arr.push(readFixed64(pbf));\n  const end = readPackedEnd(pbf);\n  arr = arr || [];\n  while (pbf.pos < end) arr.push(readFixed64(pbf));\n  return arr;\n}\n"],"file":"carto-spatial-tile.js"}