import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import { registerLoaders } from '@loaders.gl/core';
import CartoSpatialTileLoader from './schema/carto-spatial-tile-loader';
registerLoaders([CartoSpatialTileLoader]);
import { TileLayer, _getURLFromTemplate } from '@deck.gl/geo-layers';
import { TILE_FORMATS } from '../api/maps-api-common';

function isFeatureIdDefined(value) {
  return value !== undefined && value !== null && value !== '';
}

export default class SpatialIndexTileLayer extends TileLayer {
  getTileData(tile) {
    const {
      data,
      getTileData,
      fetch
    } = this.props;
    const {
      signal
    } = tile;
    tile.url = typeof data === 'string' || Array.isArray(data) ? _getURLFromTemplate(data, tile) : null;

    if (!tile.url) {
      return Promise.reject('Invalid URL');
    }

    if (getTileData) {
      return getTileData(tile);
    }

    let loadOptions = this.getLoadOptions();
    const {
      formatTiles
    } = this.props;

    if (formatTiles === TILE_FORMATS.BINARY) {
      loadOptions = { ...loadOptions,
        mimeType: 'application/vnd.carto-spatial-tile'
      };
    }

    return fetch(tile.url, {
      propName: 'data',
      layer: this,
      loadOptions,
      signal
    });
  }

  _updateAutoHighlight(info) {
    const {
      hoveredFeatureId
    } = this.state;
    const hoveredFeature = info.object;
    let newHoveredFeatureId;

    if (hoveredFeature) {
      newHoveredFeatureId = hoveredFeature.id;
    }

    if (hoveredFeatureId !== newHoveredFeatureId) {
      let {
        highlightColor
      } = this.props;

      if (typeof highlightColor === 'function') {
        highlightColor = highlightColor(info);
      }

      this.setState({
        highlightColor,
        hoveredFeatureId: newHoveredFeatureId
      });
    }
  }

  getSubLayerPropsByTile(tile) {
    return {
      highlightedObjectIndex: this.getHighlightedObjectIndex(tile),
      highlightColor: this.state.highlightColor
    };
  }

  getHighlightedObjectIndex(tile) {
    const {
      hoveredFeatureId
    } = this.state;
    const data = tile.content;
    const isFeatureIdPresent = isFeatureIdDefined(hoveredFeatureId);

    if (!isFeatureIdPresent || !Array.isArray(data)) {
      return -1;
    }

    return data.findIndex(feature => feature.id === hoveredFeatureId);
  }

}

_defineProperty(SpatialIndexTileLayer, "layerName", 'SpatialIndexTileLayer');
//# sourceMappingURL=spatial-index-tile-layer.js.map