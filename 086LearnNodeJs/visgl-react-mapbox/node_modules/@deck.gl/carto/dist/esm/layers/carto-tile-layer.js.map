{"version":3,"sources":["../../../src/layers/carto-tile-layer.ts"],"names":["registerLoaders","CartoVectorTileLoader","ClipExtension","MVTLayer","_getURLFromTemplate","GeoJsonLayer","binaryToGeojson","TILE_FORMATS","defaultTileFormat","BINARY","defaultProps","formatTiles","CartoTileLayer","initializeState","binary","props","setState","getTileData","tile","url","state","data","Promise","reject","loadOptions","getLoadOptions","fetch","signal","mimeType","propName","layer","renderSubLayers","tileBbox","bbox","west","south","east","north","subLayerProps","autoHighlight","extensions","clipBounds","subLayer","getPickingInfo","params","info","index","sourceLayer","object","globalFeatureId"],"mappings":"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","sourcesContent":["import {registerLoaders} from '@loaders.gl/core';\nimport CartoVectorTileLoader from './schema/carto-vector-tile-loader';\nregisterLoaders([CartoVectorTileLoader]);\n\nimport {DefaultProps} from '@deck.gl/core';\nimport {ClipExtension} from '@deck.gl/extensions';\nimport {\n  MVTLayer,\n  MVTLayerProps,\n  TileLayer,\n  _getURLFromTemplate,\n  _Tile2DHeader,\n  _TileLoadProps as TileLoadProps\n} from '@deck.gl/geo-layers';\nimport {GeoJsonLayer} from '@deck.gl/layers';\nimport {binaryToGeojson, geojsonToBinary} from '@loaders.gl/gis';\nimport type {BinaryFeatures} from '@loaders.gl/schema';\nimport {TileFormat, TILE_FORMATS} from '../api/maps-api-common';\nimport type {Feature} from 'geojson';\n\nconst defaultTileFormat = TILE_FORMATS.BINARY;\n\nconst defaultProps: DefaultProps<CartoTileLayerProps> = {\n  ...MVTLayer.defaultProps,\n  formatTiles: defaultTileFormat\n};\n\n/** All properties supported by CartoTileLayer. */\nexport type CartoTileLayerProps<DataT extends Feature = Feature> = _CartoTileLayerProps &\n  MVTLayerProps<DataT>;\n\n/** Properties added by CartoTileLayer. */\ntype _CartoTileLayerProps = {\n  /** Use to override the default tile data format.\n   *\n   * Possible values are: `TILE_FORMATS.BINARY`, `TILE_FORMATS.GEOJSON` and `TILE_FORMATS.MVT`.\n   *\n   * Only supported when `apiVersion` is `API_VERSIONS.V3` and `format` is `FORMATS.TILEJSON`.\n   */\n  formatTiles?: TileFormat;\n};\n\nexport default class CartoTileLayer<\n  DataT extends Feature = Feature,\n  ExtraProps = {}\n> extends MVTLayer<DataT, Required<_CartoTileLayerProps> & ExtraProps> {\n  static layerName = 'CartoTileLayer';\n  static defaultProps = defaultProps;\n\n  initializeState(): void {\n    super.initializeState();\n    const binary = this.props.formatTiles === TILE_FORMATS.BINARY;\n    this.setState({binary});\n  }\n\n  getTileData(tile: TileLoadProps) {\n    const url = _getURLFromTemplate(this.state.data, tile);\n    if (!url) {\n      return Promise.reject('Invalid URL');\n    }\n\n    let loadOptions = this.getLoadOptions();\n    const {fetch, formatTiles} = this.props;\n    const {signal} = tile;\n\n    // The backend doesn't yet support our custom mime-type, so force it here\n    // TODO remove once backend sends the correct mime-type\n    if (formatTiles === TILE_FORMATS.BINARY) {\n      loadOptions = {\n        ...loadOptions,\n        mimeType: 'application/vnd.carto-vector-tile'\n      };\n    }\n\n    return fetch(url, {propName: 'data', layer: this, loadOptions, signal});\n  }\n\n  renderSubLayers(\n    props: TileLayer['props'] & {\n      id: string;\n      data: any;\n      _offset: number;\n      tile: _Tile2DHeader;\n    }\n  ): GeoJsonLayer | null {\n    if (props.data === null) {\n      return null;\n    }\n\n    const tileBbox = props.tile.bbox as any;\n    const {west, south, east, north} = tileBbox;\n\n    const subLayerProps = {\n      ...props,\n      autoHighlight: false,\n      extensions: [new ClipExtension(), ...(props.extensions || [])],\n      clipBounds: [west, south, east, north]\n    };\n\n    const subLayer = new GeoJsonLayer(subLayerProps);\n    return subLayer;\n  }\n\n  getPickingInfo(params) {\n    const info = super.getPickingInfo(params);\n\n    if (this.state.binary && info.index !== -1) {\n      const {data} = params.sourceLayer!.props;\n      info.object = binaryToGeojson(data as BinaryFeatures, {globalFeatureId: info.index}) as DataT;\n    }\n\n    return info;\n  }\n}\n"],"file":"carto-tile-layer.js"}