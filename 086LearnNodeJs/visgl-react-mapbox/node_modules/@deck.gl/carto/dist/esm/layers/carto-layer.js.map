{"version":3,"sources":["../../../src/layers/carto-layer.ts"],"names":["CompositeLayer","log","MVTLayer","fetchLayerData","getDataV2","API_VERSIONS","layerFromTileDataset","COLUMNS_SUPPORT","FORMATS","GEO_COLUMN_SUPPORT","MAP_TYPES","getDefaultCredentials","assert","defaultProps","data","type","onDataLoad","value","compare","onDataError","optional","uniqueIdProperty","credentials","connection","format","formatTiles","clientId","geoColumn","columns","headers","aggregationExp","aggregationResLevel","queryParameters","CartoLayer","initializeState","state","apiVersion","isLoaded","getSubLayers","length","_checkProps","props","localCreds","Object","values","includes","V1","V2","QUERY","TILESET","V3","join","Array","isArray","updateState","oldProps","changeFlags","shouldUpdateData","dataChanged","JSON","stringify","setState","_updateData","source","rest","localConfig","result","TILEJSON","propName","layer","err","_getSubLayerAndProps","_notUsed","propsNoData","tileUrl","URL","tiles","searchParams","get","scheme","renderLayers","updateTriggers","getSubLayerProps","id","layerName"],"mappings":";AAAA,SACEA,cADF,EAKEC,GALF,QAOO,eAPP;AASA,SAAQC,QAAR,QAAuB,qBAAvB;AACA,SAAQC,cAAR,EAAwBC,SAAxB,EAAmCC,YAAnC,QAAsD,QAAtD;AACA,SAAQC,oBAAR,QAAmC,kBAAnC;AACA,SACEC,eADF,EAEEC,OAFF,EAGEC,kBAHF,EAKEC,SALF,QAQO,wBARP;AASA,SAIEC,qBAJF,QAKO,WALP;AAOA,SAAQC,MAAR,QAAqB,UAArB;AAEA,MAAMC,YAAY,GAAG;AAEnBC,EAAAA,IAAI,EAAE,IAFa;AAInBC,EAAAA,IAAI,EAAE,IAJa;AAKnBC,EAAAA,UAAU,EAAE;AAACD,IAAAA,IAAI,EAAE,UAAP;AAAmBE,IAAAA,KAAK,EAAEH,IAAI,IAAI,CAAE,CAApC;AAAsCI,IAAAA,OAAO,EAAE;AAA/C,GALO;AAMnBC,EAAAA,WAAW,EAAE;AAACJ,IAAAA,IAAI,EAAE,UAAP;AAAmBE,IAAAA,KAAK,EAAE,IAA1B;AAAgCC,IAAAA,OAAO,EAAE,KAAzC;AAAgDE,IAAAA,QAAQ,EAAE;AAA1D,GANM;AAOnBC,EAAAA,gBAAgB,EAAE,YAPC;AAUnBC,EAAAA,WAAW,EAAE,IAVM;AAgBnBC,EAAAA,UAAU,EAAE,IAhBO;AAmBnBC,EAAAA,MAAM,EAAE,IAnBW;AAsBnBC,EAAAA,WAAW,EAAE,IAtBM;AAyBnBC,EAAAA,QAAQ,EAAE,IAzBS;AA4BnBC,EAAAA,SAAS,EAAE,IA5BQ;AA+BnBC,EAAAA,OAAO,EAAE;AAACb,IAAAA,IAAI,EAAE,OAAP;AAAgBE,IAAAA,KAAK,EAAE;AAAvB,GA/BU;AAkCnBY,EAAAA,OAAO,EAAE;AAACd,IAAAA,IAAI,EAAE,QAAP;AAAiBE,IAAAA,KAAK,EAAE,EAAxB;AAA4BG,IAAAA,QAAQ,EAAE;AAAtC,GAlCU;AAqCnBU,EAAAA,cAAc,EAAE,IArCG;AAwCnBC,EAAAA,mBAAmB,EAAE,IAxCF;AA2CnBC,EAAAA,eAAe,EAAE;AA3CE,CAArB;AAwIA,eAAe,MAAMC,UAAN,SAA0CjC,cAA1C,CAEb;AAIAkC,EAAAA,eAAe,GAAS;AACtB,SAAKC,KAAL,GAAa;AACXrB,MAAAA,IAAI,EAAE,IADK;AAEXsB,MAAAA,UAAU,EAAE;AAFD,KAAb;AAID;;AAEW,MAARC,QAAQ,GAAY;AACtB,WAAO,KAAKC,YAAL,GAAoBC,MAApB,GAA6B,CAA7B,IAAkC,MAAMF,QAA/C;AACD;;AAEDG,EAAAA,WAAW,CAACC,KAAD,EAA+B;AACxC,UAAM;AAAC1B,MAAAA,IAAD;AAAOO,MAAAA,WAAP;AAAoBC,MAAAA,UAApB;AAAgCI,MAAAA,SAAhC;AAA2CC,MAAAA;AAA3C,QAAsDa,KAA5D;AACA,UAAMC,UAAU,GAAG,EAAC,GAAG/B,qBAAqB,EAAzB;AAA6B,SAAGW;AAAhC,KAAnB;AACA,UAAM;AAACc,MAAAA;AAAD,QAAeM,UAArB;AAEAzC,IAAAA,GAAG,CAACW,MAAJ,CACE+B,MAAM,CAACC,MAAP,CAAcvC,YAAd,EAA4BwC,QAA5B,CAAqCT,UAArC,CADF,+BAEwBA,UAFxB;;AAKA,QAAIA,UAAU,KAAK/B,YAAY,CAACyC,EAA5B,IAAkCV,UAAU,KAAK/B,YAAY,CAAC0C,EAAlE,EAAsE;AACpE9C,MAAAA,GAAG,CAACW,MAAJ,CACEG,IAAI,KAAKL,SAAS,CAACsC,KAAnB,IAA4BjC,IAAI,KAAKL,SAAS,CAACuC,OADjD,yBAEkBlC,IAFlB,4EAEwFqB,UAFxF;AAIAnC,MAAAA,GAAG,CAACW,MAAJ,CAAW,CAACW,UAAZ,4DAA2Ea,UAA3E;AACAnC,MAAAA,GAAG,CAACW,MAAJ,CAAW,CAACe,SAAZ,2DAAyES,UAAzE;AACAnC,MAAAA,GAAG,CAACW,MAAJ,CAAW,CAACgB,OAAZ,yDAAqEQ,UAArE;AACD,KARD,MAQO,IAAIA,UAAU,KAAK/B,YAAY,CAAC6C,EAAhC,EAAoC;AACzCjD,MAAAA,GAAG,CAACW,MAAJ,CAAWW,UAAX,EAAuB,wCAAvB;AACAtB,MAAAA,GAAG,CAACW,MAAJ,CACE+B,MAAM,CAACC,MAAP,CAAclC,SAAd,EAAyBmC,QAAzB,CAAkC9B,IAAlC,CADF,yBAEkBA,IAFlB;;AAIA,UAAI,CAACR,eAAe,CAACsC,QAAhB,CAAyB9B,IAAzB,CAAL,EAAqC;AACnCd,QAAAA,GAAG,CAACW,MAAJ,CAAW,CAACgB,OAAZ,sDAAkErB,eAAe,CAAC4C,IAAhB,EAAlE;AACD;;AACD,UAAI,CAAC1C,kBAAkB,CAACoC,QAAnB,CAA4B9B,IAA5B,CAAL,EAAwC;AACtCd,QAAAA,GAAG,CAACW,MAAJ,CACE,CAACe,SADH,wDAEiDlB,kBAAkB,CAAC0C,IAAnB,EAFjD;AAID;;AACD,UAAIvB,OAAJ,EAAa;AACX3B,QAAAA,GAAG,CAACW,MAAJ,CAAWwC,KAAK,CAACC,OAAN,CAAczB,OAAd,CAAX,EAAmC,+BAAnC;AACD;AACF;AACF;;AAED0B,EAAAA,WAAW,CAAC;AAACb,IAAAA,KAAD;AAAQc,IAAAA,QAAR;AAAkBC,IAAAA;AAAlB,GAAD,EAAyD;AAClE,SAAKhB,WAAL,CAAiBC,KAAjB;;AACA,UAAMgB,gBAAgB,GACpBD,WAAW,CAACE,WAAZ,IACAjB,KAAK,CAACX,cAAN,KAAyByB,QAAQ,CAACzB,cADlC,IAEAW,KAAK,CAACV,mBAAN,KAA8BwB,QAAQ,CAACxB,mBAFvC,IAGAU,KAAK,CAAClB,UAAN,KAAqBgC,QAAQ,CAAChC,UAH9B,IAIAkB,KAAK,CAACd,SAAN,KAAoB4B,QAAQ,CAAC5B,SAJ7B,IAKAc,KAAK,CAAChB,WAAN,KAAsB8B,QAAQ,CAAC9B,WAL/B,IAMAgB,KAAK,CAAC1B,IAAN,KAAewC,QAAQ,CAACxC,IANxB,IAOA4C,IAAI,CAACC,SAAL,CAAenB,KAAK,CAACb,OAArB,MAAkC+B,IAAI,CAACC,SAAL,CAAeL,QAAQ,CAAC3B,OAAxB,CAPlC,IAQA+B,IAAI,CAACC,SAAL,CAAenB,KAAK,CAACnB,WAArB,MAAsCqC,IAAI,CAACC,SAAL,CAAeL,QAAQ,CAACjC,WAAxB,CARtC,IASAqC,IAAI,CAACC,SAAL,CAAenB,KAAK,CAACT,eAArB,MAA0C2B,IAAI,CAACC,SAAL,CAAeL,QAAQ,CAACvB,eAAxB,CAV5C;;AAYA,QAAIyB,gBAAJ,EAAsB;AACpB,WAAKI,QAAL,CAAc;AAAC/C,QAAAA,IAAI,EAAE,IAAP;AAAasB,QAAAA,UAAU,EAAE;AAAzB,OAAd;;AAEA,WAAK0B,WAAL;AACD;AACF;;AAEgB,QAAXA,WAAW,GAAkB;AACjC,QAAI;AAAA;;AACF,YAAM;AAAC/C,QAAAA,IAAD;AAAOD,QAAAA,IAAI,EAAEiD,MAAb;AAAqBzC,QAAAA,WAArB;AAAkCC,QAAAA,UAAlC;AAA8C,WAAGyC;AAAjD,UAAyD,KAAKvB,KAApE;AACA,YAAMwB,WAAW,GAAG,EAAC,GAAGtD,qBAAqB,EAAzB;AAA6B,WAAGW;AAAhC,OAApB;AACA,YAAM;AAACc,QAAAA;AAAD,UAAe6B,WAArB;AAEA,UAAIC,MAAJ;;AACA,UAAI9B,UAAU,KAAK/B,YAAY,CAACyC,EAA5B,IAAkCV,UAAU,KAAK/B,YAAY,CAAC0C,EAAlE,EAAsE;AACpEmB,QAAAA,MAAM,GAAG;AACPpD,UAAAA,IAAI,EAAE,MAAMV,SAAS,CAAC;AAACW,YAAAA,IAAD;AAAOgD,YAAAA,MAAP;AAAezC,YAAAA,WAAW,EAAEA;AAA5B,WAAD;AADd,SAAT;AAGD,OAJD,MAIO;AACL4C,QAAAA,MAAM,GAAG,MAAM/D,cAAc,CAAC;AAC5BY,UAAAA,IAD4B;AAE5BgD,UAAAA,MAF4B;AAG5BzC,UAAAA,WAAW,EAAEA,WAHe;AAI5BC,UAAAA,UAJ4B;AAK5B,aAAGyC,IALyB;AAO5BxC,UAAAA,MAAM,EAAEhB,OAAO,CAAC2D;AAPY,SAAD,CAA7B;AASD;;AAED,WAAKN,QAAL,CAAc,EAAC,GAAGK,MAAJ;AAAY9B,QAAAA;AAAZ,OAAd;AAEA,mDAAKK,KAAL,EAAWzB,UAAX,kGAAwBkD,MAAM,CAACpD,IAA/B,EAAqC;AACnCsD,QAAAA,QAAQ,EAAE,MADyB;AAEnCC,QAAAA,KAAK,EAAE;AAF4B,OAArC;AAID,KA5BD,CA4BE,OAAOC,GAAP,EAAY;AACZ,UAAI,KAAK7B,KAAL,CAAWtB,WAAf,EAA4B;AAC1B,aAAKsB,KAAL,CAAWtB,WAAX,CAAuBmD,GAAvB;AACD,OAFD,MAEO;AACL,cAAMA,GAAN;AACD;AACF;AACF;;AAEDC,EAAAA,oBAAoB,GAAsB;AACxC3D,IAAAA,MAAM,CAAC,KAAKuB,KAAN,CAAN;AAEA,UAAM;AAACrB,MAAAA,IAAD;AAAOsB,MAAAA;AAAP,QAAqB,KAAKD,KAAhC;AAEA,UAAM;AAACd,MAAAA;AAAD,QAAqBR,YAA3B;AAEA,UAAM;AAACC,MAAAA,IAAI,EAAE0D,QAAP;AAAiB,SAAGC;AAApB,QAAmC,KAAKhC,KAA9C;AAEA,UAAMA,KAAK,GAAG;AAACpB,MAAAA,gBAAD;AAAmB,SAAGoD;AAAtB,KAAd;;AAEA,QAAIrC,UAAU,KAAK/B,YAAY,CAACyC,EAA5B,IAAkCV,UAAU,KAAK/B,YAAY,CAAC0C,EAAlE,EAAsE;AACpE,aAAO,CAAC7C,QAAD,EAAWuC,KAAX,CAAP;AACD;;AAGD,UAAMiC,OAAO,GAAG,IAAIC,GAAJ,CAAQ7D,IAAI,CAAC8D,KAAL,CAAW,CAAX,CAAR,CAAhB;AACAnC,IAAAA,KAAK,CAAChB,WAAN,GACEgB,KAAK,CAAChB,WAAN,IAAsBiD,OAAO,CAACG,YAAR,CAAqBC,GAArB,CAAyB,aAAzB,CADxB;AAGA,WAAO,CAACxE,oBAAoB,CAACmC,KAAK,CAAChB,WAAP,EAAoBX,IAAI,CAACiE,MAAzB,CAArB,EAAuDtC,KAAvD,CAAP;AACD;;AAEDuC,EAAAA,YAAY,GAAiB;AAC3BpE,IAAAA,MAAM,CAAC,KAAKuB,KAAN,CAAN;AAEA,UAAM;AAACrB,MAAAA;AAAD,QAAS,KAAKqB,KAApB;AAEA,QAAI,CAACrB,IAAL,EAAW,OAAO,IAAP;AAEX,UAAM;AAACmE,MAAAA;AAAD,QAAmB,KAAKxC,KAA9B;;AAEA,UAAM,CAAC4B,KAAD,EAAQ5B,KAAR,IAAiB,KAAK8B,oBAAL,EAAvB;;AAGA,WAAO,IAAIF,KAAJ,CACL5B,KADK,EAEL,KAAKyC,gBAAL,CAAsB;AACpBC,MAAAA,EAAE,kBAAWd,KAAK,CAACe,SAAjB,CADkB;AAEpBtE,MAAAA,IAFoB;AAGpBmE,MAAAA;AAHoB,KAAtB,CAFK,CAAP;AAQD;;AA5JD;;gBAFmBhD,U,eAGA,Y;;gBAHAA,U,kBAIGpB,Y","sourcesContent":["import {\n  CompositeLayer,\n  CompositeLayerProps,\n  Layer,\n  LayerProps,\n  log,\n  UpdateParameters\n} from '@deck.gl/core';\n\nimport {MVTLayer} from '@deck.gl/geo-layers';\nimport {fetchLayerData, getDataV2, API_VERSIONS} from '../api';\nimport {layerFromTileDataset} from '../api/layer-map';\nimport {\n  COLUMNS_SUPPORT,\n  FORMATS,\n  GEO_COLUMN_SUPPORT,\n  MapType,\n  MAP_TYPES,\n  TileFormat,\n  QueryParameters\n} from '../api/maps-api-common';\nimport {\n  ClassicCredentials,\n  CloudNativeCredentials,\n  Credentials,\n  getDefaultCredentials\n} from '../config';\nimport {FetchLayerDataResult, Headers} from '../api/maps-v3-client';\nimport {assert} from '../utils';\n\nconst defaultProps = {\n  // (String, required): data resource to load. table name, sql query or tileset name.\n  data: null,\n  // (Enum (MAP_TYPES), required)\n  type: null,\n  onDataLoad: {type: 'function', value: data => {}, compare: false},\n  onDataError: {type: 'function', value: null, compare: false, optional: true},\n  uniqueIdProperty: 'cartodb_id',\n\n  // override carto credentials for the layer, set to null to read from default\n  credentials: null,\n\n  /*********************/\n  /* API v3 PARAMETERS */\n  /**********************/\n  // (String, required): connection name at CARTO platform\n  connection: null,\n\n  // (String, optional): format of data\n  format: null,\n\n  // (String, optional): force format of data for tiles\n  formatTiles: null,\n\n  // (String, optional): clientId identifier used for internal tracing, place here a string to identify the client who is doing the request.\n  clientId: null,\n\n  // (String, optional): name of the `geo_column` in the CARTO platform. Use this override the default column ('geom'), from which the geometry information should be fetched.\n  geoColumn: null,\n\n  // (Array<String>, optional): names of columns to fetch. By default, all columns are fetched.\n  columns: {type: 'array', value: null},\n\n  // (Headers, optional): Custom headers to include in the map instantiation request.\n  headers: {type: 'object', value: {}, optional: true},\n\n  // (String, optional): aggregation SQL expression. Only used for spatial index datasets\n  aggregationExp: null,\n\n  // (Number, optional): aggregation resolution level. Only used for spatial index datasets, defaults to 6 for quadbins, 4 for h3\n  aggregationResLevel: null,\n\n  // (QueryParameters, optional): query parameters to be sent to the server.\n  queryParameters: null\n};\n\n/** All properties supported by CartoLayer. */\nexport type CartoLayerProps<DataT = any> = _CartoLayerProps & CompositeLayerProps<DataT>;\n\n/** Properties added by CartoLayer. */\ntype _CartoLayerProps = {\n  /**\n   * Either a SQL query or a name of dataset/tileset.\n   */\n  data: string;\n\n  /**\n   * Data type.\n   *\n   * Possible values are:\n   *  * `MAP_TYPES.QUERY`, if data is a SQL query.\n   *  * `MAP_TYPES.TILESET`, if data is a tileset name.\n   *  * `MAP_TYPES.TABLE`, if data is a dataset name. Only supported with API v3.\n   */\n  type: MapType;\n\n  /**\n   * Name of the connection registered in the CARTO workspace.\n   *\n   * Required when apiVersion is `API_VERSIONS.V3`.\n   */\n  connection?: string;\n\n  /**\n   * Use to override the default tile data format.\n   *\n   * Only supported when apiVersion is `API_VERSIONS.V3`.\n   *\n   * Possible values are: `TILE_FORMATS.BINARY`, `TILE_FORMATS.GEOJSON` and `TILE_FORMATS.MVT`.\n   */\n  formatTiles?: TileFormat;\n\n  /**\n   * Name of the geo_column in the CARTO platform.\n   *\n   * Use this override the default column (`'geom'`), from which the geometry information should be fetched.\n   *\n   * Only supported when apiVersion is `API_VERSIONS.V3` and type is `MAP_TYPES.TABLE`.\n   */\n  geoColumn?: string;\n\n  /**\n   * Names of columns to fetch.\n   *\n   * By default, all columns are fetched\n   *\n   * Only supported when apiVersion is `API_VERSIONS.V3` and type is `MAP_TYPES.TABLE`.\n   */\n  columns?: string[];\n\n  /**\n   * A string pointing to a unique attribute at the result of the query.\n   *\n   * A unique attribute is needed for highlighting with vector tiles when a feature is split across two or more tiles.\n   */\n  uniqueIdProperty?: string;\n\n  /**\n   * Optional. Overrides the configuration to connect with CARTO.\n   *\n   * @see Credentials\n   */\n  credentials?: Credentials;\n\n  /**\n   * Called when the request to the CARTO Maps API failed.\n   *\n   * By default the Error is thrown.\n   */\n  onDataError?: (err: unknown) => void;\n\n  clientId?: string;\n\n  /** Custom headers to include in the map instantiation request **/\n  headers?: Headers;\n\n  /** Aggregation SQL expression. Only used for spatial index datasets **/\n  aggregationExp?: string;\n\n  /** Aggregation resolution level. Only used for spatial index datasets, defaults to 6 for quadbins, 4 for h3. **/\n  aggregationResLevel?: number;\n\n  /** Query parameters to be sent to the server. **/\n  queryParameters?: QueryParameters;\n};\n\nexport default class CartoLayer<ExtraProps = {}> extends CompositeLayer<\n  Required<_CartoLayerProps> & ExtraProps\n> {\n  static layerName = 'CartoLayer';\n  static defaultProps = defaultProps as any;\n\n  initializeState(): void {\n    this.state = {\n      data: null,\n      apiVersion: null\n    };\n  }\n\n  get isLoaded(): boolean {\n    return this.getSubLayers().length > 0 && super.isLoaded;\n  }\n\n  _checkProps(props: CartoLayerProps): void {\n    const {type, credentials, connection, geoColumn, columns} = props;\n    const localCreds = {...getDefaultCredentials(), ...credentials};\n    const {apiVersion} = localCreds;\n\n    log.assert(\n      Object.values(API_VERSIONS).includes(apiVersion),\n      `Invalid apiVersion ${apiVersion}. Use API_VERSIONS enum.`\n    );\n\n    if (apiVersion === API_VERSIONS.V1 || apiVersion === API_VERSIONS.V2) {\n      log.assert(\n        type === MAP_TYPES.QUERY || type === MAP_TYPES.TILESET,\n        `Invalid type ${type}. Use type MAP_TYPES.QUERY or MAP_TYPES.TILESET for apiVersion ${apiVersion}`\n      );\n      log.assert(!connection, `Connection prop is not supported for apiVersion ${apiVersion}`);\n      log.assert(!geoColumn, `geoColumn prop is not supported for apiVersion ${apiVersion}`);\n      log.assert(!columns, `columns prop is not supported for apiVersion ${apiVersion}`);\n    } else if (apiVersion === API_VERSIONS.V3) {\n      log.assert(connection, 'Missing mandatory connection parameter');\n      log.assert(\n        Object.values(MAP_TYPES).includes(type),\n        `Invalid type ${type}. Use MAP_TYPES enum.`\n      );\n      if (!COLUMNS_SUPPORT.includes(type)) {\n        log.assert(!columns, `columns prop is only supported for types: ${COLUMNS_SUPPORT.join()}`);\n      }\n      if (!GEO_COLUMN_SUPPORT.includes(type)) {\n        log.assert(\n          !geoColumn,\n          `geoColumn prop is only supported for types: ${GEO_COLUMN_SUPPORT.join()}`\n        );\n      }\n      if (columns) {\n        log.assert(Array.isArray(columns), 'columns prop must be an Array');\n      }\n    }\n  }\n\n  updateState({props, oldProps, changeFlags}: UpdateParameters<this>) {\n    this._checkProps(props);\n    const shouldUpdateData =\n      changeFlags.dataChanged ||\n      props.aggregationExp !== oldProps.aggregationExp ||\n      props.aggregationResLevel !== oldProps.aggregationResLevel ||\n      props.connection !== oldProps.connection ||\n      props.geoColumn !== oldProps.geoColumn ||\n      props.formatTiles !== oldProps.formatTiles ||\n      props.type !== oldProps.type ||\n      JSON.stringify(props.columns) !== JSON.stringify(oldProps.columns) ||\n      JSON.stringify(props.credentials) !== JSON.stringify(oldProps.credentials) ||\n      JSON.stringify(props.queryParameters) !== JSON.stringify(oldProps.queryParameters);\n\n    if (shouldUpdateData) {\n      this.setState({data: null, apiVersion: null});\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this._updateData();\n    }\n  }\n\n  async _updateData(): Promise<void> {\n    try {\n      const {type, data: source, credentials, connection, ...rest} = this.props;\n      const localConfig = {...getDefaultCredentials(), ...credentials};\n      const {apiVersion} = localConfig;\n\n      let result: Partial<FetchLayerDataResult>;\n      if (apiVersion === API_VERSIONS.V1 || apiVersion === API_VERSIONS.V2) {\n        result = {\n          data: await getDataV2({type, source, credentials: credentials as ClassicCredentials})\n        };\n      } else {\n        result = await fetchLayerData({\n          type,\n          source,\n          credentials: credentials as CloudNativeCredentials,\n          connection,\n          ...rest,\n          // CartoLayer only supports tiled output from v8.8, force data format\n          format: FORMATS.TILEJSON\n        });\n      }\n\n      this.setState({...result, apiVersion});\n\n      this.props.onDataLoad?.(result.data, {\n        propName: 'data',\n        layer: this\n      });\n    } catch (err) {\n      if (this.props.onDataError) {\n        this.props.onDataError(err as Error);\n      } else {\n        throw err;\n      }\n    }\n  }\n\n  _getSubLayerAndProps(): [any, LayerProps] {\n    assert(this.state);\n\n    const {data, apiVersion} = this.state;\n\n    const {uniqueIdProperty} = defaultProps;\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const {data: _notUsed, ...propsNoData} = this.props;\n    // @ts-expect-error 'uniqueIdProperty' is specified more than once, so this usage will be overwritten.\n    const props = {uniqueIdProperty, ...propsNoData};\n\n    if (apiVersion === API_VERSIONS.V1 || apiVersion === API_VERSIONS.V2) {\n      return [MVTLayer, props];\n    }\n\n    /* global URL */\n    const tileUrl = new URL(data.tiles[0]);\n    props.formatTiles =\n      props.formatTiles || (tileUrl.searchParams.get('formatTiles') as TileFormat);\n\n    return [layerFromTileDataset(props.formatTiles, data.scheme), props];\n  }\n\n  renderLayers(): Layer | null {\n    assert(this.state);\n\n    const {data} = this.state;\n\n    if (!data) return null;\n\n    const {updateTriggers} = this.props;\n\n    const [layer, props] = this._getSubLayerAndProps();\n\n    // eslint-disable-next-line new-cap\n    return new layer(\n      props,\n      this.getSubLayerProps({\n        id: `carto-${layer.layerName}`,\n        data,\n        updateTriggers\n      })\n    );\n  }\n}\n"],"file":"carto-layer.js"}