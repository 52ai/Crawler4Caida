{"version":3,"sources":["../../../src/api/parseMap.ts"],"names":["AGGREGATION","getLayer","getColorAccessor","getColorValueAccessor","getSizeAccessor","getTextAccessor","getTextPixelOffsetAccessor","OPACITY_MAP","opacityToAlpha","getIconUrlAccessor","negateAccessor","getMaxMarkerSize","_flatten","flatten","log","assert","parseMap","json","keplerMapConfig","datasets","version","mapState","mapStyle","config","layers","layerBlending","interactionConfig","visState","id","title","description","createdAt","updatedAt","initialViewState","extractTextLayers","reverse","map","type","visualChannels","dataId","dataset","find","d","data","Layer","propMap","defaultProps","createBlendingProps","textLabel","createInteractionProps","createStyleProps","createChannelProps","e","error","message","undefined","rest","configRest","filter","t","field","name","label","visConfig","opacity","parameters","blendFunc","blendEquation","pickable","tooltip","enabled","autoHighlight","mapProps","source","target","mapping","sourceKey","sourceValue","targetKey","key","value","Object","entries","result","stroked","getLineColor","getFillColor","colorAccessor","Array","isArray","color","opacityKey","highlightColor","enable3d","colorField","colorScale","radiusField","radiusScale","sizeField","sizeScale","strokeColorField","strokeColorScale","heightField","heightScale","textLabelField","colorScaleType","colorAggregation","getColorValue","getColorWeight","aggregation","colorRange","range","getPointRadius","sizeAggregation","radiusRange","sizeRange","fallbackOpacity","strokeOpacity","strokeColorAggregation","strokeColorRange","getElevation","heightAggregation","heightRange","getText","pointType","radius","getTextPixelOffset","customMarkers","maxIconSize","getIcon","customMarkersField","customMarkersUrl","customMarkersRange","_subLayerProps","loadOptions","image","imagebitmap","resizeWidth","resizeHeight","resizeQuality","getIconColor","getIconSize","rotationField","getIconAngle"],"mappings":"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","sourcesContent":["import GL from '@luma.gl/constants';\nimport {\n  AGGREGATION,\n  getLayer,\n  getColorAccessor,\n  getColorValueAccessor,\n  getSizeAccessor,\n  getTextAccessor,\n  getTextPixelOffsetAccessor,\n  OPACITY_MAP,\n  opacityToAlpha,\n  getIconUrlAccessor,\n  negateAccessor,\n  getMaxMarkerSize\n} from './layer-map';\nimport {_flatten as flatten, log} from '@deck.gl/core';\nimport {assert} from '../utils';\nimport {MapDataset, MapTextSubLayerConfig, VisualChannels} from './types';\n\nexport function parseMap(json) {\n  const {keplerMapConfig, datasets} = json;\n  assert(keplerMapConfig.version === 'v1', 'Only support Kepler v1');\n  const {mapState, mapStyle} = keplerMapConfig.config;\n  const {layers, layerBlending, interactionConfig} = keplerMapConfig.config.visState;\n\n  return {\n    id: json.id,\n    title: json.title,\n    description: json.description,\n    createdAt: json.createdAt,\n    updatedAt: json.updatedAt,\n    initialViewState: mapState,\n    mapStyle,\n    layers: extractTextLayers(layers.reverse()).map(({id, type, config, visualChannels}) => {\n      try {\n        const {dataId} = config;\n        const dataset: MapDataset | null = datasets.find(d => d.id === dataId);\n        assert(dataset, `No dataset matching dataId: ${dataId}`);\n        const {data} = dataset;\n        assert(data, `No data loaded for dataId: ${dataId}`);\n        const {Layer, propMap, defaultProps} = getLayer(type, config, dataset);\n        return new Layer({\n          id,\n          data,\n          ...defaultProps,\n          ...createBlendingProps(layerBlending),\n          ...(!config.textLabel && createInteractionProps(interactionConfig)),\n          ...createStyleProps(config, propMap),\n          ...createChannelProps(visualChannels, type, config, data) // Must come after style\n        });\n      } catch (e: any) {\n        log.error(e.message)();\n        return undefined;\n      }\n    })\n  };\n}\n\nfunction extractTextLayers(layers) {\n  return flatten(\n    layers.map(({id, config, ...rest}) => {\n      const {textLabel, ...configRest} = config;\n      return [\n        // Original layer without textLabel\n        {id, config: configRest, ...rest},\n\n        // One layer per valid text label, with full opacity\n        ...textLabel\n          .filter(t => t.field)\n          .map(t => {\n            return {\n              id: `${id}-label-${t.field.name}`,\n              config: {\n                textLabel: t,\n                ...configRest,\n                label: `${config.label}-label-${t.field.name}`,\n                visConfig: {...configRest.visConfig, opacity: 1}\n              },\n              ...rest\n            };\n          })\n      ];\n    })\n  );\n}\n\nfunction createBlendingProps(layerBlending) {\n  if (layerBlending === 'additive') {\n    return {\n      parameters: {\n        blendFunc: [GL.SRC_ALPHA, GL.DST_ALPHA],\n        blendEquation: GL.FUNC_ADD\n      }\n    };\n  } else if (layerBlending === 'subtractive') {\n    return {\n      parameters: {\n        blendFunc: [GL.ONE, GL.ONE_MINUS_DST_COLOR, GL.SRC_ALPHA, GL.DST_ALPHA],\n        blendEquation: [GL.FUNC_SUBTRACT, GL.FUNC_ADD]\n      }\n    };\n  }\n\n  return {};\n}\n\nfunction createInteractionProps(interactionConfig) {\n  const pickable = interactionConfig && interactionConfig.tooltip.enabled;\n  return {\n    autoHighlight: pickable,\n    pickable\n  };\n}\n\nfunction mapProps(source, target, mapping) {\n  for (const sourceKey in mapping) {\n    const sourceValue = source[sourceKey];\n    const targetKey = mapping[sourceKey];\n    if (sourceValue === undefined) {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n    if (typeof targetKey === 'string') {\n      target[targetKey] = sourceValue;\n    } else if (typeof targetKey === 'function') {\n      const [key, value] = Object.entries(targetKey(sourceValue))[0];\n      target[key] = value;\n    } else if (typeof targetKey === 'object') {\n      // Nested definition, recurse down one level (also handles arrays)\n      mapProps(sourceValue, target, targetKey);\n    }\n  }\n}\n\nfunction createStyleProps(config: MapTextSubLayerConfig, mapping) {\n  const result: Record<string, any> = {};\n  mapProps(config, result, mapping);\n\n  // Kepler format sometimes omits strokeColor. TODO: remove once we can rely on\n  // `strokeColor` always being set when `stroke: true`.\n  if (result.stroked && !result.getLineColor) {\n    result.getLineColor = result.getFillColor;\n  }\n\n  for (const colorAccessor in OPACITY_MAP) {\n    if (Array.isArray(result[colorAccessor])) {\n      const color = [...result[colorAccessor]];\n      const opacityKey = OPACITY_MAP[colorAccessor];\n      const opacity = config.visConfig[opacityKey];\n      color[3] = opacityToAlpha(opacity);\n      result[colorAccessor] = color;\n    }\n  }\n\n  result.highlightColor = config.visConfig.enable3d ? [255, 255, 255, 60] : [252, 242, 26, 255];\n  return result;\n}\n\n/* eslint-disable complexity, max-statements */\nfunction createChannelProps(\n  visualChannels: VisualChannels,\n  type: string,\n  config: MapTextSubLayerConfig,\n  data\n) {\n  const {\n    colorField,\n    colorScale,\n    radiusField,\n    radiusScale,\n    sizeField,\n    sizeScale,\n    strokeColorField,\n    strokeColorScale\n  } = visualChannels;\n  let {heightField, heightScale} = visualChannels;\n  if (type === 'hexagonId') {\n    heightField = sizeField;\n    heightScale = sizeScale;\n  }\n  const {textLabel, visConfig} = config;\n  const result: Record<string, any> = {};\n  const textLabelField = textLabel && textLabel.field;\n\n  if (type === 'grid' || type === 'hexagon') {\n    result.colorScaleType = colorScale;\n    if (colorField) {\n      const {colorAggregation} = config.visConfig;\n      if (!AGGREGATION[colorAggregation]) {\n        result.getColorValue = getColorValueAccessor(colorField, colorAggregation, data);\n      } else {\n        result.getColorWeight = d => d[colorField.name];\n      }\n    }\n  } else if (colorField) {\n    const {colorAggregation: aggregation, colorRange: range} = visConfig;\n    result.getFillColor = getColorAccessor(\n      colorField,\n      // @ts-ignore\n      colorScale,\n      {aggregation, range},\n      visConfig.opacity,\n      data\n    );\n  }\n\n  if (radiusField || sizeField) {\n    result.getPointRadius = getSizeAccessor(\n      // @ts-ignore\n      radiusField || sizeField,\n      // @ts-ignore\n      radiusScale || sizeScale,\n      visConfig.sizeAggregation,\n      visConfig.radiusRange || visConfig.sizeRange,\n      data\n    );\n  }\n\n  if (strokeColorField) {\n    const fallbackOpacity = type === 'point' ? visConfig.opacity : 1;\n    const opacity =\n      visConfig.strokeOpacity !== undefined ? visConfig.strokeOpacity : fallbackOpacity;\n    const {strokeColorAggregation: aggregation, strokeColorRange: range} = visConfig;\n    result.getLineColor = getColorAccessor(\n      strokeColorField,\n      // @ts-ignore\n      strokeColorScale,\n      // @ts-ignore\n      {aggregation, range},\n      opacity,\n      data\n    );\n  }\n\n  if (heightField) {\n    result.getElevation = getSizeAccessor(\n      heightField,\n      // @ts-ignore\n      heightScale,\n      visConfig.heightAggregation,\n      visConfig.heightRange || visConfig.sizeRange,\n      data\n    );\n  }\n\n  if (textLabelField) {\n    result.getText = getTextAccessor(textLabelField, data);\n    result.pointType = 'text';\n    const radius = result.getPointRadius || visConfig.radius;\n    result.getTextPixelOffset = getTextPixelOffsetAccessor(textLabel, radius);\n  } else if (visConfig.customMarkers) {\n    const maxIconSize = getMaxMarkerSize(visConfig, visualChannels);\n    const {getPointRadius, getFillColor} = result;\n    result.pointType = 'icon';\n    result.getIcon = getIconUrlAccessor(\n      visualChannels.customMarkersField,\n      visConfig.customMarkersUrl,\n      visConfig.customMarkersRange,\n      maxIconSize,\n      data\n    );\n    result._subLayerProps = {\n      'points-icon': {\n        loadOptions: {\n          image: {\n            type: 'imagebitmap'\n          },\n          imagebitmap: {\n            resizeWidth: maxIconSize,\n            resizeHeight: maxIconSize,\n            resizeQuality: 'high'\n          }\n        }\n      }\n    };\n\n    if (getFillColor) {\n      result.getIconColor = getFillColor;\n    }\n\n    if (getPointRadius) {\n      result.getIconSize = getPointRadius;\n    }\n\n    if (visualChannels.rotationField) {\n      result.getIconAngle = negateAccessor(\n        getSizeAccessor(visualChannels.rotationField, undefined, null, undefined, data)\n      );\n    }\n  }\n\n  return result;\n}\n"],"file":"parseMap.js"}