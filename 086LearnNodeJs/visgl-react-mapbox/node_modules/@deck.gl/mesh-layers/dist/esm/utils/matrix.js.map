{"version":3,"sources":["../../../src/utils/matrix.ts"],"names":["COORDINATE_SYSTEM","createIterable","RADIAN_PER_DEGREE","Math","PI","modelMatrix","Float32Array","valueArray","calculateTransformMatrix","targetMatrix","orientation","scale","pitch","yaw","roll","sr","sin","sp","sw","cr","cos","cp","cw","scx","scy","scz","getExtendedMat3FromMat4","mat4","subarray","MATRIX_ATTRIBUTES","size","accessor","shaderAttributes","instanceModelMatrix__LOCATION_0","elementOffset","instanceModelMatrix__LOCATION_1","instanceModelMatrix__LOCATION_2","instanceTranslation","update","attribute","startRow","endRow","data","getOrientation","getScale","getTranslation","getTransformMatrix","props","arrayMatrix","Array","isArray","constantMatrix","length","constantScale","constantOrientation","constantTranslation","hasMatrix","Boolean","constant","instanceModelMatrixData","value","matrix","set","i","iterable","objectInfo","object","index","shouldComposeModelMatrix","viewport","coordinateSystem","CARTESIAN","METER_OFFSETS","DEFAULT","isGeospatial"],"mappings":"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","sourcesContent":["import {COORDINATE_SYSTEM, createIterable} from '@deck.gl/core';\n\n/* eslint-disable max-statements, complexity, camelcase */\nconst RADIAN_PER_DEGREE = Math.PI / 180;\nconst modelMatrix = new Float32Array(16);\nconst valueArray = new Float32Array(12);\n\nfunction calculateTransformMatrix(targetMatrix, orientation, scale) {\n  const pitch = orientation[0] * RADIAN_PER_DEGREE;\n  const yaw = orientation[1] * RADIAN_PER_DEGREE;\n  const roll = orientation[2] * RADIAN_PER_DEGREE;\n\n  const sr = Math.sin(roll);\n  const sp = Math.sin(pitch);\n  const sw = Math.sin(yaw);\n\n  const cr = Math.cos(roll);\n  const cp = Math.cos(pitch);\n  const cw = Math.cos(yaw);\n\n  const scx = scale[0];\n  const scy = scale[1];\n  const scz = scale[2];\n\n  targetMatrix[0] = scx * cw * cp; // 0,0\n  targetMatrix[1] = scx * sw * cp; // 1,0\n  targetMatrix[2] = scx * -sp; // 2,0\n  targetMatrix[3] = scy * (-sw * cr + cw * sp * sr); // 0,1\n  targetMatrix[4] = scy * (cw * cr + sw * sp * sr); // 1,1\n  targetMatrix[5] = scy * cp * sr; // 2,1\n  targetMatrix[6] = scz * (sw * sr + cw * sp * cr); // 0,2\n  targetMatrix[7] = scz * (-cw * sr + sw * sp * cr); // 1,2\n  targetMatrix[8] = scz * cp * cr; // 2,2\n}\n\nfunction getExtendedMat3FromMat4(mat4) {\n  mat4[0] = mat4[0];\n  mat4[1] = mat4[1];\n  mat4[2] = mat4[2];\n  mat4[3] = mat4[4];\n  mat4[4] = mat4[5];\n  mat4[5] = mat4[6];\n  mat4[6] = mat4[8];\n  mat4[7] = mat4[9];\n  mat4[8] = mat4[10];\n  mat4[9] = mat4[12];\n  mat4[10] = mat4[13];\n  mat4[11] = mat4[14];\n\n  return mat4.subarray(0, 12);\n}\n\nexport const MATRIX_ATTRIBUTES = {\n  size: 12,\n  accessor: ['getOrientation', 'getScale', 'getTranslation', 'getTransformMatrix'],\n  shaderAttributes: {\n    instanceModelMatrix__LOCATION_0: {\n      size: 3,\n      elementOffset: 0\n    },\n    instanceModelMatrix__LOCATION_1: {\n      size: 3,\n      elementOffset: 3\n    },\n    instanceModelMatrix__LOCATION_2: {\n      size: 3,\n      elementOffset: 6\n    },\n    instanceTranslation: {\n      size: 3,\n      elementOffset: 9\n    }\n  } as const,\n\n  update(attribute, {startRow, endRow}) {\n    // @ts-expect-error: \"this\" will be bound to a layer when this function is called\n    const {data, getOrientation, getScale, getTranslation, getTransformMatrix} = this.props;\n\n    const arrayMatrix = Array.isArray(getTransformMatrix);\n    const constantMatrix = arrayMatrix && getTransformMatrix.length === 16;\n    const constantScale = Array.isArray(getScale);\n    const constantOrientation = Array.isArray(getOrientation);\n    const constantTranslation = Array.isArray(getTranslation);\n\n    const hasMatrix = constantMatrix || (!arrayMatrix && Boolean(getTransformMatrix(data[0])));\n\n    if (hasMatrix) {\n      attribute.constant = constantMatrix;\n    } else {\n      attribute.constant = constantOrientation && constantScale && constantTranslation;\n    }\n\n    const instanceModelMatrixData = attribute.value;\n\n    if (attribute.constant) {\n      let matrix;\n\n      if (hasMatrix) {\n        modelMatrix.set(getTransformMatrix);\n        matrix = getExtendedMat3FromMat4(modelMatrix);\n      } else {\n        matrix = valueArray;\n\n        const orientation = getOrientation;\n        const scale = getScale;\n\n        calculateTransformMatrix(matrix, orientation, scale);\n        matrix.set(getTranslation, 9);\n      }\n\n      attribute.value = new Float32Array(matrix);\n    } else {\n      let i = startRow * attribute.size;\n      const {iterable, objectInfo} = createIterable(data, startRow, endRow);\n      for (const object of iterable) {\n        objectInfo.index++;\n        let matrix;\n\n        if (hasMatrix) {\n          modelMatrix.set(\n            constantMatrix ? getTransformMatrix : getTransformMatrix(object, objectInfo)\n          );\n          matrix = getExtendedMat3FromMat4(modelMatrix);\n        } else {\n          matrix = valueArray;\n\n          const orientation = constantOrientation\n            ? getOrientation\n            : getOrientation(object, objectInfo);\n          const scale = constantScale ? getScale : getScale(object, objectInfo);\n\n          calculateTransformMatrix(matrix, orientation, scale);\n          matrix.set(constantTranslation ? getTranslation : getTranslation(object, objectInfo), 9);\n        }\n\n        instanceModelMatrixData[i++] = matrix[0];\n        instanceModelMatrixData[i++] = matrix[1];\n        instanceModelMatrixData[i++] = matrix[2];\n        instanceModelMatrixData[i++] = matrix[3];\n        instanceModelMatrixData[i++] = matrix[4];\n        instanceModelMatrixData[i++] = matrix[5];\n        instanceModelMatrixData[i++] = matrix[6];\n        instanceModelMatrixData[i++] = matrix[7];\n        instanceModelMatrixData[i++] = matrix[8];\n        instanceModelMatrixData[i++] = matrix[9];\n        instanceModelMatrixData[i++] = matrix[10];\n        instanceModelMatrixData[i++] = matrix[11];\n      }\n    }\n  }\n};\n\n// only apply composeModelMatrix when in cartesian or meter_offsets coordinate system\n// with `composeModelMatrix` enabled, the rotation part of the layer's modelMatrix will be composed to instance's transformations\n// since rotating latitude and longitude can not provide meaningful results, hence `composeModelMatrix` is disabled\n// when in LNGLAT and LNGLAT_OFFSET coordinates.\nexport function shouldComposeModelMatrix(viewport, coordinateSystem) {\n  return (\n    coordinateSystem === COORDINATE_SYSTEM.CARTESIAN ||\n    coordinateSystem === COORDINATE_SYSTEM.METER_OFFSETS ||\n    (coordinateSystem === COORDINATE_SYSTEM.DEFAULT && !viewport.isGeospatial)\n  );\n}\n"],"file":"matrix.js"}