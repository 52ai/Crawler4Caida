{"version":3,"sources":["../../../src/simple-mesh-layer/simple-mesh-layer.ts"],"names":["validateGeometryAttributes","attributes","useMeshColors","hasColorAttribute","COLOR_0","colors","useColorAttribute","constant","value","Float32Array","log","assert","positions","POSITION","getGeometry","data","Geometry","Error","DEFAULT_COLOR","defaultProps","mesh","type","async","texture","sizeScale","min","_useMeshColors","_instanced","wireframe","material","getPosition","x","position","getColor","getOrientation","getScale","getTranslation","getTransformMatrix","SimpleMeshLayer","transpileToGLSL100","context","gl","defines","FEATURES","GLSL_DERIVATIVES","DERIVATIVES_AVAILABLE","vs","fs","modules","project32","phongLighting","picking","attributeManager","getAttributeManager","addInstanced","instancePositions","transition","fp64","use64bitPositions","size","accessor","instanceColors","props","colorFormat","length","normalized","defaultValue","instanceModelMatrix","MATRIX_ATTRIBUTES","setState","emptyTexture","Texture2D","Uint8Array","width","height","params","oldProps","changeFlags","extensionsChanged","state","model","delete","getModel","hasNormals","Boolean","NORMAL","normals","invalidateAll","setTexture","setDrawMode","uniforms","viewport","coordinateSystem","setUniforms","composeModelMatrix","flatShading","draw","Model","getShaders","id","geometry","isInstanced","sampler","hasTexture","Layer"],"mappings":"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","sourcesContent":["// Note: This file will either be moved back to deck.gl or reformatted to web-monorepo standards\n// Disabling lint temporarily to facilitate copying code in and out of this repo\n/* eslint-disable */\n\n// Copyright (c) 2015 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {\n  Layer,\n  project32,\n  phongLighting,\n  picking,\n  DefaultProps,\n  log,\n  LayerContext,\n  Material\n} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry, Texture2D, isWebGL2} from '@luma.gl/core';\nimport {hasFeature, FEATURES} from '@luma.gl/webgl';\n\nimport {MATRIX_ATTRIBUTES, shouldComposeModelMatrix} from '../utils/matrix';\n\nimport vs from './simple-mesh-layer-vertex.glsl';\nimport fs from './simple-mesh-layer-fragment.glsl';\n\nimport type {LayerProps, UpdateParameters, Accessor, Position, Color, Texture} from '@deck.gl/core';\nimport type {MeshAttribute, MeshAttributes} from '@loaders.gl/schema';\nimport type {Geometry as GeometryType} from '@luma.gl/engine';\nimport {GLTFMaterialParser} from '@luma.gl/experimental';\n\nfunction validateGeometryAttributes(attributes: Record<string, any>, useMeshColors: boolean): void {\n  const hasColorAttribute = attributes.COLOR_0 || attributes.colors;\n  const useColorAttribute = hasColorAttribute && useMeshColors;\n  if (!useColorAttribute) {\n    attributes.colors = {constant: true, value: new Float32Array([1, 1, 1])};\n  }\n  log.assert(\n    attributes.positions || attributes.POSITION,\n    'no \"postions\" or \"POSITION\" attribute in mesh'\n  );\n}\n\n/*\n * Convert mesh data into geometry\n * @returns {Geometry} geometry\n */\nfunction getGeometry(data: Mesh, useMeshColors: boolean): Geometry {\n  if ((data as any).attributes) {\n    validateGeometryAttributes((data as any).attributes, useMeshColors);\n    if (data instanceof Geometry) {\n      return data;\n    } else {\n      return new Geometry(data);\n    }\n  } else if ((data as MeshAttributes).positions || (data as MeshAttributes).POSITION) {\n    validateGeometryAttributes(data, useMeshColors);\n    return new Geometry({\n      attributes: data\n    });\n  }\n  throw Error('Invalid mesh');\n}\n\nconst DEFAULT_COLOR: [number, number, number, number] = [0, 0, 0, 255];\n\ntype Mesh =\n  | GeometryType\n  | {\n      attributes: MeshAttributes;\n      indices?: MeshAttribute;\n    }\n  | MeshAttributes;\n\ntype _SimpleMeshLayerProps<DataT> = {\n  mesh: string | Mesh | Promise<Mesh> | null;\n  texture?: string | Texture | Promise<Texture>;\n  /** Customize the [texture parameters](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/texParameter). */\n  textureParameters?: Record<number, number> | null;\n\n  /** Anchor position accessor. */\n  getPosition?: Accessor<DataT, Position>;\n  /** Color value or accessor.\n   * If `mesh` does not contain vertex colors, use this color to render each object.\n   * If `mesh` contains vertex colors, then the two colors are mixed together.\n   * Use `[255, 255, 255]` to use the original mesh colors.\n   * If `texture` is assigned, then both colors will be ignored.\n   * @default [0, 0, 0, 255]\n   */\n  getColor?: Accessor<DataT, Color>;\n  /**\n   * Orientation in [pitch, yaw, roll] in degrees.\n   * @see https://en.wikipedia.org/wiki/Euler_angles\n   * @default [0, 0, 0]\n   */\n  getOrientation?: Accessor<DataT, [number, number, number]>;\n  /**\n   * Scaling factor of the model along each axis.\n   * @default [1, 1, 1]\n   */\n  getScale?: Accessor<DataT, [number, number, number]>;\n  /**\n   * Translation from the anchor point, [x, y, z] in meters.\n   * @default [0, 0, 0]\n   */\n  getTranslation?: Accessor<DataT, [number, number, number]>;\n  /**\n   * TransformMatrix. If specified, `getOrientation`, `getScale` and `getTranslation` are ignored.\n   */\n  getTransformMatrix?: Accessor<DataT, number[]>;\n  /**\n   * Multiplier to scale each geometry by.\n   * @default 1\n   */\n  sizeScale?: number;\n  /**\n   * @deprecated Whether to color pixels using vertex colors supplied in the mesh (the `COLOR_0` or `colors` attribute).\n   * If set to `false` vertex colors will be ignored.\n   * This prop will be removed and set to always true in the next major release.\n   * @default false\n   */\n  _useMeshColors?: boolean;\n\n  /**\n   * (Experimental) If rendering only one instance of the mesh, set this to false to treat mesh positions\n   * as deltas of the world coordinates of the anchor.\n   * E.g. in LNGLAT coordinates, mesh positions are interpreted as meter offsets by default.\n   * setting _instanced to false interpreted mesh positions as lnglat deltas.\n   * @default true\n   */\n  _instanced?: true; // TODO - formalize API\n  /**\n   * Whether to render the mesh in wireframe mode.\n   * @default false\n   */\n  wireframe?: false;\n  /**\n   * Material props for lighting effect.\n   *\n   * @default true\n   * @see https://deck.gl/docs/developer-guide/using-lighting#constructing-a-material-instance\n   */\n  material?: Material;\n};\n\nexport type SimpleMeshLayerProps<DataT = any> = _SimpleMeshLayerProps<DataT> & LayerProps<DataT>;\n\nconst defaultProps: DefaultProps<SimpleMeshLayerProps> = {\n  mesh: {type: 'object', value: null, async: true},\n  texture: {type: 'image', value: null, async: true},\n  sizeScale: {type: 'number', value: 1, min: 0},\n  // Whether the color attribute in a mesh will be used\n  // This prop will be removed and set to true in next major release\n  _useMeshColors: {type: 'boolean', value: false},\n\n  // _instanced is a hack to use world position instead of meter offsets in mesh\n  // TODO - formalize API\n  _instanced: true,\n  // NOTE(Tarek): Quick and dirty wireframe. Just draws\n  // the same mesh with LINE_STRIPS. Won't follow edges\n  // of the original mesh.\n  wireframe: false,\n  // Optional material for 'lighting' shader module\n  material: true,\n  getPosition: {type: 'accessor', value: x => x.position},\n  getColor: {type: 'accessor', value: DEFAULT_COLOR},\n\n  // yaw, pitch and roll are in degrees\n  // https://en.wikipedia.org/wiki/Euler_angles\n  // [pitch, yaw, roll]\n  getOrientation: {type: 'accessor', value: [0, 0, 0]},\n  getScale: {type: 'accessor', value: [1, 1, 1]},\n  getTranslation: {type: 'accessor', value: [0, 0, 0]},\n  // 4x4 matrix\n  getTransformMatrix: {type: 'accessor', value: []}\n};\n\n/** Render a number of instances of an arbitrary 3D geometry. */\nexport default class SimpleMeshLayer<DataT = any, ExtraPropsT = {}> extends Layer<\n  ExtraPropsT & Required<_SimpleMeshLayerProps<DataT>>\n> {\n  static defaultProps = defaultProps;\n  static layerName = 'SimpleMeshLayer';\n\n  state!: {\n    materialParser?: GLTFMaterialParser;\n    model?: Model;\n    emptyTexture: Texture2D;\n    hasNormals?: boolean;\n  };\n\n  getShaders() {\n    const transpileToGLSL100 = !isWebGL2(this.context.gl);\n\n    const defines: any = {};\n\n    if (hasFeature(this.context.gl, FEATURES.GLSL_DERIVATIVES)) {\n      defines.DERIVATIVES_AVAILABLE = 1;\n    }\n\n    return super.getShaders({\n      vs,\n      fs,\n      modules: [project32, phongLighting, picking],\n      transpileToGLSL100,\n      defines\n    });\n  }\n\n  initializeState() {\n    const attributeManager = this.getAttributeManager();\n    // attributeManager is always defined in a primitive layer\n    attributeManager!.addInstanced({\n      instancePositions: {\n        transition: true,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        size: 3,\n        accessor: 'getPosition'\n      },\n      instanceColors: {\n        type: GL.UNSIGNED_BYTE,\n        transition: true,\n        size: this.props.colorFormat.length,\n        normalized: true,\n        accessor: 'getColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceModelMatrix: MATRIX_ATTRIBUTES\n    });\n\n    this.setState({\n      // Avoid luma.gl's missing uniform warning\n      // TODO - add feature to luma.gl to specify ignored uniforms?\n      emptyTexture: new Texture2D(this.context.gl, {\n        data: new Uint8Array(4),\n        width: 1,\n        height: 1\n      })\n    });\n  }\n\n  updateState(params: UpdateParameters<this>) {\n    super.updateState(params);\n\n    const {props, oldProps, changeFlags} = params;\n    if (props.mesh !== oldProps.mesh || changeFlags.extensionsChanged) {\n      this.state.model?.delete();\n      if (props.mesh) {\n        this.state.model = this.getModel(props.mesh as Mesh);\n\n        const attributes = (props.mesh as any).attributes || props.mesh;\n        this.setState({\n          hasNormals: Boolean(attributes.NORMAL || attributes.normals)\n        });\n      }\n      // attributeManager is always defined in a primitive layer\n      this.getAttributeManager()!.invalidateAll();\n    }\n\n    if (props.texture !== oldProps.texture) {\n      this.setTexture(props.texture);\n    }\n\n    if (this.state.model) {\n      this.state.model.setDrawMode(this.props.wireframe ? GL.LINE_STRIP : GL.TRIANGLES);\n    }\n  }\n\n  finalizeState(context: LayerContext) {\n    super.finalizeState(context);\n\n    this.state.emptyTexture.delete();\n  }\n\n  draw({uniforms}) {\n    if (!this.state.model) {\n      return;\n    }\n\n    const {viewport} = this.context;\n    const {sizeScale, coordinateSystem, _instanced} = this.props;\n\n    this.state.model\n      .setUniforms(uniforms)\n      .setUniforms({\n        sizeScale,\n        composeModelMatrix: !_instanced || shouldComposeModelMatrix(viewport, coordinateSystem),\n        flatShading: !this.state.hasNormals\n      })\n      .draw();\n  }\n\n  protected getModel(mesh: Mesh): Model {\n    const model = new Model(this.context.gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      geometry: getGeometry(mesh, this.props._useMeshColors),\n      isInstanced: true\n    });\n\n    const {texture} = this.props;\n    const {emptyTexture} = this.state;\n    model.setUniforms({\n      sampler: texture || emptyTexture,\n      hasTexture: Boolean(texture)\n    });\n\n    return model;\n  }\n\n  private setTexture(texture: Texture2D): void {\n    const {emptyTexture, model} = this.state;\n\n    // props.mesh may not be ready at this time.\n    // The sampler will be set when `getModel` is called\n    if (model) {\n      model.setUniforms({\n        sampler: texture || emptyTexture,\n        hasTexture: Boolean(texture)\n      });\n    }\n  }\n}\n"],"file":"simple-mesh-layer.js"}