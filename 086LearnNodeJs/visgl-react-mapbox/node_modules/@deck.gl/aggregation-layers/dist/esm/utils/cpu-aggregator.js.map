{"version":3,"sources":["../../../src/utils/cpu-aggregator.js"],"names":["BinSorter","getScaleFunctionByScaleType","getValueFunc","wrapGetValueFunc","nop","dimensionSteps","defaultDimensions","key","accessor","pickingInfo","getBins","triggers","value","prop","updateTrigger","weight","aggregation","filterData","getDomain","lowerPercentile","upperPercentile","scaleType","getScaleFunc","domain","range","onSet","props","nullValue","defaultGetCellSize","cellSize","CPUAggregator","constructor","opts","state","layerData","dimensions","changeFlags","dimensionUpdaters","_getCellSize","getCellSize","_getAggregator","getAggregator","_addDimension","updateState","aggregationParams","oldProps","updateGetValueFuncs","reprojectNeeded","needsReProjectPoints","aggregationDirty","dataChanged","getAggregatedData","dimensionChanges","getDimensionChanges","forEach","f","setState","updateObject","setDimensionState","normalizeResult","result","hexagons","data","aggregator","getSortedBins","getValue","getValueChanged","needUpdateDimensionStep","updateTriggersChanged","all","getPosition","addDimension","dimension","getDimensionUpdaters","sortedBins","scaleFunc","updater","getDimensionSortedBins","getDimensionValueDomain","getDimensionScale","attributeAccessor","getSubLayerDimensionAttribute","dimensionStep","Object","values","some","item","updaters","needUpdate","find","step","push","bind","length","getUpdateTriggers","_updateTriggers","updateTriggers","fromProp","Array","isArray","assign","undefined","dimensionUpdater","_filterData","valueDomain","getValueDomainByScale","dimensionRange","dimensionDomain","getScaleFunction","cell","bin","binMap","index","counts","cv","isValueInDomain","getSubLayerAccessors","accessors","getPickingInfo","info","isPicked","picked","object","binInfo","points","filteredPoints","Boolean","getAccessor","dimensionKey","hasOwnProperty"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2018 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport BinSorter from './bin-sorter';\nimport {getScaleFunctionByScaleType} from './scale-utils';\nimport {getValueFunc, wrapGetValueFunc} from './aggregation-operation-utils';\n\nfunction nop() {}\n\nconst dimensionSteps = ['getBins', 'getDomain', 'getScaleFunc'];\nconst defaultDimensions = [\n  {\n    key: 'fillColor',\n    accessor: 'getFillColor',\n    pickingInfo: 'colorValue',\n    getBins: {\n      triggers: {\n        value: {\n          prop: 'getColorValue',\n          updateTrigger: 'getColorValue'\n        },\n        weight: {\n          prop: 'getColorWeight',\n          updateTrigger: 'getColorWeight'\n        },\n        aggregation: {\n          prop: 'colorAggregation'\n        },\n        filterData: {\n          prop: '_filterData',\n          updateTrigger: '_filterData'\n        }\n      }\n    },\n    getDomain: {\n      triggers: {\n        lowerPercentile: {\n          prop: 'lowerPercentile'\n        },\n        upperPercentile: {\n          prop: 'upperPercentile'\n        },\n        scaleType: {\n          prop: 'colorScaleType'\n        }\n      }\n    },\n    getScaleFunc: {\n      triggers: {\n        domain: {prop: 'colorDomain'},\n        range: {prop: 'colorRange'}\n      },\n      onSet: {\n        props: 'onSetColorDomain'\n      }\n    },\n    nullValue: [0, 0, 0, 0]\n  },\n  {\n    key: 'elevation',\n    accessor: 'getElevation',\n    pickingInfo: 'elevationValue',\n    getBins: {\n      triggers: {\n        value: {\n          prop: 'getElevationValue',\n          updateTrigger: 'getElevationValue'\n        },\n        weight: {\n          prop: 'getElevationWeight',\n          updateTrigger: 'getElevationWeight'\n        },\n        aggregation: {\n          prop: 'elevationAggregation'\n        },\n        filterData: {\n          prop: '_filterData',\n          updateTrigger: '_filterData'\n        }\n      }\n    },\n    getDomain: {\n      triggers: {\n        lowerPercentile: {\n          prop: 'elevationLowerPercentile'\n        },\n        upperPercentile: {\n          prop: 'elevationUpperPercentile'\n        },\n        scaleType: {\n          prop: 'elevationScaleType'\n        }\n      }\n    },\n    getScaleFunc: {\n      triggers: {\n        domain: {prop: 'elevationDomain'},\n        range: {prop: 'elevationRange'}\n      },\n      onSet: {\n        props: 'onSetElevationDomain'\n      }\n    },\n    nullValue: -1\n  }\n];\nconst defaultGetCellSize = props => props.cellSize;\nexport default class CPUAggregator {\n  constructor(opts) {\n    this.state = {\n      layerData: {},\n      dimensions: {\n        // color: {\n        //   getValue: null,\n        //   domain: null,\n        //   sortedBins: null,\n        //   scaleFunc: nop\n        // },\n        // elevation: {\n        //   getValue: null,\n        //   domain: null,\n        //   sortedBins: null,\n        //   scaleFunc: nop\n        // }\n      }\n    };\n    this.changeFlags = {};\n    this.dimensionUpdaters = {};\n\n    this._getCellSize = opts.getCellSize || defaultGetCellSize;\n    this._getAggregator = opts.getAggregator;\n    this._addDimension(opts.dimensions || defaultDimensions);\n  }\n\n  static defaultDimensions() {\n    return defaultDimensions;\n  }\n\n  updateState(opts, aggregationParams) {\n    const {oldProps, props, changeFlags} = opts;\n    this.updateGetValueFuncs(oldProps, props, changeFlags);\n    const reprojectNeeded = this.needsReProjectPoints(oldProps, props, changeFlags);\n    let aggregationDirty = false;\n    if (changeFlags.dataChanged || reprojectNeeded) {\n      // project data into bin and aggregate wegiths per bin\n      this.getAggregatedData(props, aggregationParams);\n      aggregationDirty = true;\n    } else {\n      const dimensionChanges = this.getDimensionChanges(oldProps, props, changeFlags) || [];\n      // this here is layer\n      dimensionChanges.forEach(f => typeof f === 'function' && f());\n      aggregationDirty = true;\n    }\n    this.setState({aggregationDirty});\n\n    return this.state;\n  }\n\n  // Update private state\n  setState(updateObject) {\n    this.state = {...this.state, ...updateObject};\n  }\n\n  // Update private state.dimensions\n  setDimensionState(key, updateObject) {\n    this.setState({\n      dimensions: {\n        ...this.state.dimensions,\n        [key]: {...this.state.dimensions[key], ...updateObject}\n      }\n    });\n  }\n\n  normalizeResult(result = {}) {\n    // support previous hexagonAggregator API\n    if (result.hexagons) {\n      return {data: result.hexagons, ...result};\n    } else if (result.layerData) {\n      return {data: result.layerData, ...result};\n    }\n\n    return result;\n  }\n\n  getAggregatedData(props, aggregationParams) {\n    const aggregator = this._getAggregator(props);\n\n    const result = aggregator(props, aggregationParams);\n    this.setState({\n      layerData: this.normalizeResult(result)\n    });\n    this.changeFlags = {\n      layerData: true\n    };\n    this.getSortedBins(props);\n  }\n\n  updateGetValueFuncs(oldProps, props, changeFlags) {\n    for (const key in this.dimensionUpdaters) {\n      const {value, weight, aggregation} = this.dimensionUpdaters[key].getBins.triggers;\n      let getValue = props[value.prop];\n      const getValueChanged = this.needUpdateDimensionStep(\n        this.dimensionUpdaters[key].getBins,\n        oldProps,\n        props,\n        changeFlags\n      );\n\n      if (getValueChanged) {\n        if (getValue) {\n          getValue = wrapGetValueFunc(getValue, {data: props.data});\n        } else {\n          // If `getValue` is not provided from props, build it with aggregation and weight.\n          getValue = getValueFunc(props[aggregation.prop], props[weight.prop], {data: props.data});\n        }\n      }\n\n      if (getValue) {\n        this.setDimensionState(key, {getValue});\n      }\n    }\n  }\n\n  needsReProjectPoints(oldProps, props, changeFlags) {\n    return (\n      this._getCellSize(oldProps) !== this._getCellSize(props) ||\n      this._getAggregator(oldProps) !== this._getAggregator(props) ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPosition))\n    );\n  }\n\n  // Adds dimensions\n  addDimension(dimensions) {\n    this._addDimension(dimensions);\n  }\n\n  _addDimension(dimensions = []) {\n    dimensions.forEach(dimension => {\n      const {key} = dimension;\n      this.dimensionUpdaters[key] = this.getDimensionUpdaters(dimension);\n      this.state.dimensions[key] = {\n        getValue: null,\n        domain: null,\n        sortedBins: null,\n        scaleFunc: nop\n      };\n    });\n  }\n\n  getDimensionUpdaters({key, accessor, pickingInfo, getBins, getDomain, getScaleFunc, nullValue}) {\n    return {\n      key,\n      accessor,\n      pickingInfo,\n      getBins: {updater: this.getDimensionSortedBins, ...getBins},\n      getDomain: {updater: this.getDimensionValueDomain, ...getDomain},\n      getScaleFunc: {updater: this.getDimensionScale, ...getScaleFunc},\n      attributeAccessor: this.getSubLayerDimensionAttribute(key, nullValue)\n    };\n  }\n\n  needUpdateDimensionStep(dimensionStep, oldProps, props, changeFlags) {\n    // whether need to update current dimension step\n    // dimension step is the value, domain, scaleFunction of each dimension\n    // each step is an object with properties links to layer prop and whether the prop is\n    // controlled by updateTriggers\n    // getBins: {\n    //   value: {\n    //     prop: 'getElevationValue',\n    //     updateTrigger: 'getElevationValue'\n    //   },\n    //   weight: {\n    //     prop: 'getElevationWeight',\n    //     updateTrigger: 'getElevationWeight'\n    //   },\n    //   aggregation: {\n    //     prop: 'elevationAggregation'\n    //   }\n    // }\n    return Object.values(dimensionStep.triggers).some(item => {\n      if (item.updateTrigger) {\n        // check based on updateTriggers change first\n        // if data has changed, always update value\n        return (\n          changeFlags.dataChanged ||\n          (changeFlags.updateTriggersChanged &&\n            (changeFlags.updateTriggersChanged.all ||\n              changeFlags.updateTriggersChanged[item.updateTrigger]))\n        );\n      }\n      // fallback to direct comparison\n      return oldProps[item.prop] !== props[item.prop];\n    });\n  }\n\n  getDimensionChanges(oldProps, props, changeFlags) {\n    // const {dimensionUpdaters} = this.state;\n    const updaters = [];\n\n    // get dimension to be updated\n    for (const key in this.dimensionUpdaters) {\n      // return the first triggered updater for each dimension\n      const needUpdate = dimensionSteps.find(step =>\n        this.needUpdateDimensionStep(\n          this.dimensionUpdaters[key][step],\n          oldProps,\n          props,\n          changeFlags\n        )\n      );\n\n      if (needUpdate) {\n        updaters.push(\n          this.dimensionUpdaters[key][needUpdate].updater.bind(\n            this,\n            props,\n            this.dimensionUpdaters[key]\n          )\n        );\n      }\n    }\n\n    return updaters.length ? updaters : null;\n  }\n\n  getUpdateTriggers(props) {\n    const _updateTriggers = props.updateTriggers || {};\n    const updateTriggers = {};\n\n    for (const key in this.dimensionUpdaters) {\n      const {accessor} = this.dimensionUpdaters[key];\n      // fold dimension triggers into each accessor\n      updateTriggers[accessor] = {};\n\n      dimensionSteps.forEach(step => {\n        Object.values(this.dimensionUpdaters[key][step].triggers).forEach(\n          ({prop, updateTrigger}) => {\n            if (updateTrigger) {\n              // if prop is based on updateTrigger e.g. getColorValue, getColorWeight\n              // and updateTriggers is passed in from layer prop\n              // fold the updateTriggers into accessor\n              const fromProp = _updateTriggers[updateTrigger];\n              if (typeof fromProp === 'object' && !Array.isArray(fromProp)) {\n                // if updateTrigger is an object spread it\n                Object.assign(updateTriggers[accessor], fromProp);\n              } else if (fromProp !== undefined) {\n                updateTriggers[accessor][prop] = fromProp;\n              }\n            } else {\n              // if prop is not based on updateTrigger\n              updateTriggers[accessor][prop] = props[prop];\n            }\n          }\n        );\n      });\n    }\n\n    return updateTriggers;\n  }\n\n  getSortedBins(props) {\n    for (const key in this.dimensionUpdaters) {\n      this.getDimensionSortedBins(props, this.dimensionUpdaters[key]);\n    }\n  }\n\n  getDimensionSortedBins(props, dimensionUpdater) {\n    const {key} = dimensionUpdater;\n    const {getValue} = this.state.dimensions[key];\n\n    const sortedBins = new BinSorter(this.state.layerData.data || [], {\n      getValue,\n      filterData: props._filterData\n    });\n    this.setDimensionState(key, {sortedBins});\n    this.getDimensionValueDomain(props, dimensionUpdater);\n  }\n\n  getDimensionValueDomain(props, dimensionUpdater) {\n    const {getDomain, key} = dimensionUpdater;\n    const {\n      triggers: {lowerPercentile, upperPercentile, scaleType}\n    } = getDomain;\n    const valueDomain = this.state.dimensions[key].sortedBins.getValueDomainByScale(\n      props[scaleType.prop],\n      [props[lowerPercentile.prop], props[upperPercentile.prop]]\n    );\n\n    this.setDimensionState(key, {valueDomain});\n    this.getDimensionScale(props, dimensionUpdater);\n  }\n\n  getDimensionScale(props, dimensionUpdater) {\n    const {key, getScaleFunc, getDomain} = dimensionUpdater;\n    const {domain, range} = getScaleFunc.triggers;\n    const {scaleType} = getDomain.triggers;\n    const {onSet} = getScaleFunc;\n    const dimensionRange = props[range.prop];\n    const dimensionDomain = props[domain.prop] || this.state.dimensions[key].valueDomain;\n    const getScaleFunction = getScaleFunctionByScaleType(scaleType && props[scaleType.prop]);\n    const scaleFunc = getScaleFunction(dimensionDomain, dimensionRange);\n\n    if (typeof onSet === 'object' && typeof props[onSet.props] === 'function') {\n      props[onSet.props](scaleFunc.domain());\n    }\n\n    this.setDimensionState(key, {scaleFunc});\n  }\n\n  getSubLayerDimensionAttribute(key, nullValue) {\n    return cell => {\n      const {sortedBins, scaleFunc} = this.state.dimensions[key];\n      const bin = sortedBins.binMap[cell.index];\n\n      if (bin && bin.counts === 0) {\n        // no points left in bin after filtering\n        return nullValue;\n      }\n      const cv = bin && bin.value;\n      const domain = scaleFunc.domain();\n\n      const isValueInDomain = cv >= domain[0] && cv <= domain[domain.length - 1];\n\n      // if cell value is outside domain, set alpha to 0\n      return isValueInDomain ? scaleFunc(cv) : nullValue;\n    };\n  }\n\n  getSubLayerAccessors(props) {\n    const accessors = {};\n    for (const key in this.dimensionUpdaters) {\n      const {accessor} = this.dimensionUpdaters[key];\n      accessors[accessor] = this.getSubLayerDimensionAttribute(props, key);\n    }\n\n    return accessors;\n  }\n\n  getPickingInfo({info}) {\n    const isPicked = info.picked && info.index > -1;\n    let object = null;\n\n    if (isPicked) {\n      // const {sortedColorBins, sortedElevationBins} = this.state;\n\n      const cell = this.state.layerData.data[info.index];\n\n      const binInfo = {};\n      for (const key in this.dimensionUpdaters) {\n        const {pickingInfo} = this.dimensionUpdaters[key];\n        const {sortedBins} = this.state.dimensions[key];\n        const value = sortedBins.binMap[cell.index] && sortedBins.binMap[cell.index].value;\n        binInfo[pickingInfo] = value;\n      }\n\n      object = Object.assign(binInfo, cell, {\n        points: cell.filteredPoints || cell.points\n      });\n    }\n\n    // override object with picked cell\n    info.picked = Boolean(object);\n    info.object = object;\n\n    return info;\n  }\n\n  getAccessor(dimensionKey) {\n    if (!this.dimensionUpdaters.hasOwnProperty(dimensionKey)) {\n      return nop;\n    }\n    return this.dimensionUpdaters[dimensionKey].attributeAccessor;\n  }\n}\n"],"file":"cpu-aggregator.js"}