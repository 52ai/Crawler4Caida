{"version":3,"sources":["../../../src/gpu-grid-layer/gpu-grid-layer.ts"],"names":["Buffer","log","GPUGridAggregator","AGGREGATION_OPERATION","defaultColorRange","colorRangeToFlatArray","GPUGridCellLayer","pointToDensityGridDataCPU","GridAggregationLayer","getBoundingBox","getGridParams","defaultProps","colorDomain","colorRange","getColorWeight","type","value","colorAggregation","elevationDomain","elevationRange","getElevationWeight","elevationAggregation","elevationScale","min","cellSize","max","coverage","getPosition","x","position","extruded","material","DIMENSIONS","data","props","POSITION_ATTRIBUTE_NAME","GPUGridLayer","initializeState","gl","isSupported","error","initializeAggregationLayer","dimensions","setState","gpuAggregation","projectPoints","weights","color","needMin","needMax","combineMaxMin","maxMinBuffer","byteLength","accessor","size","divisor","elevation","positionAttributeName","attributeManager","getAttributeManager","add","fp64","use64bitPositions","updateState","opts","state","aggregationDirty","gridHash","getHashKeyForIndex","index","numRow","numCol","boundingBox","gridOffset","gridSize","gridOrigin","xMin","yMin","xOffset","yOffset","yIndex","Math","floor","xIndex","latIdx","lonIdx","getPositionForIndex","yPos","xPos","getPickingInfo","info","mode","object","gpuGridAggregator","colorInfo","getAggregationData","pixelIndex","getData","elevationInfo","colorValue","cellWeight","elevationValue","count","cellCount","totalCount","translation","viewport","context","attributes","getAttributes","cpuAggregation","key","cpuAggregationData","Object","assign","picked","Boolean","renderLayers","cellSizeMeters","SubLayerClass","getSubLayerClass","getSubLayerProps","id","colors","aggregationBuffer","elevations","colorMaxMinBuffer","elevationMaxMinBuffer","numInstances","finalizeState","forEach","weight","delete","updateAggregationState","oldProps","coordinateSystem","cellSizeChanged","positionsChanged","isAttributeChanged","attributesChanged","getNumInstances","width","height","allocateResources","aggregationDataDirty","isAggregationDirty","dimension","compareAll","_updateAccessors","operation"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Buffer} from '@luma.gl/core';\nimport GL from '@luma.gl/constants';\nimport {\n  Accessor,\n  AccessorFunction,\n  Color,\n  Material,\n  GetPickingInfoParams,\n  LayerContext,\n  log,\n  PickingInfo,\n  Position,\n  DefaultProps\n} from '@deck.gl/core';\n\nimport GPUGridAggregator from '../utils/gpu-grid-aggregation/gpu-grid-aggregator';\nimport {AGGREGATION_OPERATION} from '../utils/aggregation-operation-utils';\nimport {defaultColorRange, colorRangeToFlatArray} from '../utils/color-utils';\nimport GPUGridCellLayer from './gpu-grid-cell-layer';\nimport {pointToDensityGridDataCPU} from './../cpu-grid-layer/grid-aggregator';\nimport GridAggregationLayer, {GridAggregationLayerProps} from '../grid-aggregation-layer';\nimport {getBoundingBox, getGridParams} from '../utils/grid-aggregation-utils';\n\nconst defaultProps: DefaultProps<GPUGridLayerProps> = {\n  // color\n  colorDomain: null,\n  colorRange: defaultColorRange,\n  getColorWeight: {type: 'accessor', value: 1},\n  colorAggregation: 'SUM',\n\n  // elevation\n  elevationDomain: null,\n  elevationRange: [0, 1000],\n  getElevationWeight: {type: 'accessor', value: 1},\n  elevationAggregation: 'SUM',\n  elevationScale: {type: 'number', min: 0, value: 1},\n\n  // grid\n  cellSize: {type: 'number', min: 1, max: 1000, value: 1000},\n  coverage: {type: 'number', min: 0, max: 1, value: 1},\n  getPosition: {type: 'accessor', value: x => x.position},\n  extruded: false,\n\n  // Optional material for 'lighting' shader module\n  material: true\n};\n\n// This layer only perform GPU aggregation, no need to seperate data and weight props\n// aggregation will be dirty when any of the props are changed.\n\nconst DIMENSIONS = {\n  data: {\n    props: ['cellSize', 'colorAggregation', 'elevationAggregation']\n  }\n  // rest of the changes are detected by `state.attributesChanged`\n};\nconst POSITION_ATTRIBUTE_NAME = 'positions';\n\n/** All properties supported by GPUGridLayer. */\nexport type GPUGridLayerProps<DataT = any> = _GPUGridLayerProps<DataT> &\n  GridAggregationLayerProps<DataT>;\n\n/** Properties added by GPUGridLayer. */\nexport type _GPUGridLayerProps<DataT> = {\n  /**\n   * Size of each cell in meters.\n   * @default 1000\n   */\n  cellSize?: number;\n\n  /**\n   * Color scale domain, default is set to the extent of aggregated weights in each cell.\n   * @default [min(colorWeight), max(colorWeight)]\n   */\n  colorDomain?: [number, number] | null;\n\n  /**\n   * Default: [colorbrewer](http://colorbrewer2.org/#type=sequential&scheme=YlOrRd&n=6) `6-class YlOrRd`\n   */\n  colorRange?: Color[];\n\n  /**\n   * Cell size multiplier, clamped between 0 - 1.\n   * @default 1\n   */\n  coverage?: number;\n\n  /**\n   * Elevation scale input domain, default is set to between 0 and the max of aggregated weights in each cell.\n   * @default [0, max(elevationWeight)]\n   */\n  elevationDomain?: [number, number] | null;\n\n  /**\n   * Elevation scale output range.\n   * @default [0, 1000]\n   */\n  elevationRange?: [number, number];\n\n  /**\n   * Cell elevation multiplier.\n   * @default 1\n   */\n  elevationScale?: number;\n\n  /**\n   * Whether to enable cell elevation. If set to false, all cell will be flat.\n   * @default true\n   */\n  extruded?: boolean;\n\n  /**\n   * Material settings for lighting effect. Applies if `extruded: true`.\n   *\n   * @default true\n   * @see https://deck.gl/docs/developer-guide/using-lighting\n   */\n  material?: Material;\n\n  /**\n   * Defines the operation used to aggregate all data object weights to calculate a cell's color value.\n   * @default 'SUM'\n   */\n  colorAggregation?: 'SUM' | 'MEAN' | 'MIN' | 'MAX';\n\n  /**\n   * Defines the operation used to aggregate all data object weights to calculate a cell's elevation value.\n   * @default 'SUM'\n   */\n  elevationAggregation?: 'SUM' | 'MEAN' | 'MIN' | 'MAX';\n\n  /**\n   * Method called to retrieve the position of each object.\n   * @default object => object.position\n   */\n  getPosition?: AccessorFunction<DataT, Position>;\n\n  /**\n   * The weight of a data object used to calculate the color value for a cell.\n   * @default 1\n   */\n  getColorWeight?: Accessor<DataT, number>;\n\n  /**\n   * The weight of a data object used to calculate the elevation value for a cell.\n   * @default 1\n   */\n  getElevationWeight?: Accessor<DataT, number>;\n};\n\n/** Aggregate data into a grid-based heatmap. Aggregation is performed on GPU (WebGL2 only). */\nexport default class GPUGridLayer<DataT = any, ExtraPropsT = {}> extends GridAggregationLayer<\n  ExtraPropsT & Required<_GPUGridLayerProps<DataT>>\n> {\n  static layerName = 'GPUGridLayer';\n  static defaultProps = defaultProps;\n\n  initializeState({gl}: LayerContext): void {\n    const isSupported = GPUGridAggregator.isSupported(gl);\n    if (!isSupported) {\n      log.error('GPUGridLayer is not supported on this browser, use GridLayer instead')();\n    }\n    super.initializeAggregationLayer({\n      dimensions: DIMENSIONS\n    });\n    this.setState({\n      gpuAggregation: true,\n      projectPoints: false, // aggregation in world space\n      isSupported,\n      weights: {\n        color: {\n          needMin: true,\n          needMax: true,\n          combineMaxMin: true,\n          maxMinBuffer: new Buffer(gl, {\n            byteLength: 4 * 4,\n            accessor: {size: 4, type: GL.FLOAT, divisor: 1}\n          })\n        },\n        elevation: {\n          needMin: true,\n          needMax: true,\n          combineMaxMin: true,\n          maxMinBuffer: new Buffer(gl, {\n            byteLength: 4 * 4,\n            accessor: {size: 4, type: GL.FLOAT, divisor: 1}\n          })\n        }\n      },\n      positionAttributeName: 'positions'\n    });\n    const attributeManager = this.getAttributeManager()!;\n    attributeManager.add({\n      [POSITION_ATTRIBUTE_NAME]: {\n        size: 3,\n        accessor: 'getPosition',\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions()\n      },\n      color: {size: 3, accessor: 'getColorWeight'},\n      elevation: {size: 3, accessor: 'getElevationWeight'}\n    });\n  }\n\n  updateState(opts) {\n    if (this.state.isSupported === false) {\n      // Skip update, layer not supported\n      return;\n    }\n    super.updateState(opts);\n    const {aggregationDirty} = this.state;\n    if (aggregationDirty) {\n      // reset cached CPU Aggregation results (used for picking)\n      this.setState({\n        gridHash: null\n      });\n    }\n  }\n\n  getHashKeyForIndex(index: number): string {\n    const {numRow, numCol, boundingBox, gridOffset} = this.state;\n    const gridSize = [numCol, numRow];\n    const gridOrigin = [boundingBox.xMin, boundingBox.yMin];\n    const cellSize = [gridOffset.xOffset, gridOffset.yOffset];\n\n    const yIndex = Math.floor(index / gridSize[0]);\n    const xIndex = index - yIndex * gridSize[0];\n    // This will match the index to the hash-key to access aggregation data from CPU aggregation results.\n    const latIdx = Math.floor(\n      (yIndex * cellSize[1] + gridOrigin[1] + 90 + cellSize[1] / 2) / cellSize[1]\n    );\n    const lonIdx = Math.floor(\n      (xIndex * cellSize[0] + gridOrigin[0] + 180 + cellSize[0] / 2) / cellSize[0]\n    );\n    return `${latIdx}-${lonIdx}`;\n  }\n\n  getPositionForIndex(index: number): Position {\n    const {numRow, numCol, boundingBox, gridOffset} = this.state;\n    const gridSize = [numCol, numRow];\n    const gridOrigin = [boundingBox.xMin, boundingBox.yMin];\n    const cellSize = [gridOffset.xOffset, gridOffset.yOffset];\n\n    const yIndex = Math.floor(index / gridSize[0]);\n    const xIndex = index - yIndex * gridSize[0];\n    const yPos = yIndex * cellSize[1] + gridOrigin[1];\n    const xPos = xIndex * cellSize[0] + gridOrigin[0];\n    return [xPos, yPos];\n  }\n\n  getPickingInfo({info, mode}: GetPickingInfoParams): PickingInfo {\n    const {index} = info;\n    let object: any = null;\n    if (index >= 0) {\n      const {gpuGridAggregator} = this.state;\n      const position = this.getPositionForIndex(index);\n      const colorInfo = GPUGridAggregator.getAggregationData({\n        pixelIndex: index,\n        ...gpuGridAggregator.getData('color')\n      });\n      const elevationInfo = GPUGridAggregator.getAggregationData({\n        pixelIndex: index,\n        ...gpuGridAggregator.getData('elevation')\n      });\n\n      object = {\n        colorValue: colorInfo.cellWeight,\n        elevationValue: elevationInfo.cellWeight,\n        count: colorInfo.cellCount || elevationInfo.cellCount,\n        position,\n        totalCount: colorInfo.totalCount || elevationInfo.totalCount\n      };\n      if (mode !== 'hover') {\n        // perform CPU aggregation for full list of points for each cell\n        const {props} = this;\n        let {gridHash} = this.state;\n        if (!gridHash) {\n          const {gridOffset, translation, boundingBox} = this.state;\n          const {viewport} = this.context;\n          const attributes = this.getAttributes();\n          const cpuAggregation = pointToDensityGridDataCPU(props as any, {\n            gridOffset,\n            attributes,\n            viewport,\n            translation,\n            boundingBox\n          });\n          gridHash = cpuAggregation.gridHash;\n          this.setState({gridHash});\n        }\n        const key = this.getHashKeyForIndex(index);\n        const cpuAggregationData = gridHash[key];\n        Object.assign(object, cpuAggregationData);\n      }\n    }\n\n    // override object with picked cell\n    info.picked = Boolean(object);\n    info.object = object;\n\n    return info;\n  }\n\n  renderLayers() {\n    if (!this.state.isSupported) {\n      return null;\n    }\n    const {\n      elevationScale,\n      extruded,\n      cellSize: cellSizeMeters,\n      coverage,\n      material,\n      elevationRange,\n      colorDomain,\n      elevationDomain\n    } = this.props;\n\n    const {weights, numRow, numCol, gridOrigin, gridOffset} = this.state;\n    const {color, elevation} = weights;\n    const colorRange = colorRangeToFlatArray(this.props.colorRange);\n\n    const SubLayerClass = this.getSubLayerClass('gpu-grid-cell', GPUGridCellLayer);\n\n    return new SubLayerClass(\n      {\n        gridSize: [numCol, numRow],\n        gridOrigin,\n        gridOffset: [gridOffset.xOffset, gridOffset.yOffset],\n        colorRange,\n        elevationRange,\n        colorDomain,\n        elevationDomain,\n\n        cellSize: cellSizeMeters,\n        coverage,\n        material,\n        elevationScale,\n        extruded\n      },\n      this.getSubLayerProps({\n        id: 'gpu-grid-cell'\n      }),\n      {\n        data: {\n          attributes: {\n            colors: color.aggregationBuffer,\n            elevations: elevation.aggregationBuffer\n          }\n        },\n        colorMaxMinBuffer: color.maxMinBuffer,\n        elevationMaxMinBuffer: elevation.maxMinBuffer,\n        numInstances: numCol * numRow\n      }\n    );\n  }\n\n  finalizeState(context: LayerContext) {\n    const {color, elevation} = this.state.weights;\n    [color, elevation].forEach(weight => {\n      const {aggregationBuffer, maxMinBuffer} = weight;\n      maxMinBuffer.delete();\n      aggregationBuffer?.delete();\n    });\n    super.finalizeState(context);\n  }\n\n  // Aggregation Overrides\n\n  updateAggregationState(opts) {\n    const {props, oldProps} = opts;\n    const {cellSize, coordinateSystem} = props;\n    const {viewport} = this.context;\n    const cellSizeChanged = oldProps.cellSize !== cellSize;\n    const {dimensions} = this.state;\n\n    const positionsChanged = this.isAttributeChanged(POSITION_ATTRIBUTE_NAME);\n    // any attribute changed\n    const attributesChanged = positionsChanged || this.isAttributeChanged();\n\n    let {boundingBox} = this.state;\n    if (positionsChanged) {\n      boundingBox = getBoundingBox(this.getAttributes(), this.getNumInstances());\n      this.setState({boundingBox});\n    }\n    if (positionsChanged || cellSizeChanged) {\n      const {gridOffset, translation, width, height, numCol, numRow} = getGridParams(\n        boundingBox,\n        cellSize,\n        viewport,\n        coordinateSystem\n      );\n      this.allocateResources(numRow, numCol);\n      this.setState({\n        gridOffset,\n        translation,\n        gridOrigin: [-1 * translation[0], -1 * translation[1]],\n        width,\n        height,\n        numCol,\n        numRow\n      });\n    }\n\n    const aggregationDataDirty =\n      attributesChanged ||\n      this.isAggregationDirty(opts, {\n        dimension: dimensions.data,\n        compareAll: true\n      });\n\n    if (aggregationDataDirty) {\n      this._updateAccessors(opts);\n    }\n    this.setState({\n      aggregationDataDirty\n    });\n  }\n\n  // Private\n\n  _updateAccessors(opts) {\n    const {colorAggregation, elevationAggregation} = opts.props;\n    const {color, elevation} = this.state.weights;\n    color.operation = AGGREGATION_OPERATION[colorAggregation];\n    elevation.operation = AGGREGATION_OPERATION[elevationAggregation];\n  }\n}\n"],"file":"gpu-grid-layer.js"}