{"version":3,"sources":["../../../src/contour-layer/contour-utils.ts"],"names":["getCode","getVertices","CONTOUR_TYPE","generateContours","thresholdData","cellWeights","gridSize","gridOrigin","cellSize","contourSegments","contourPolygons","width","height","segmentIndex","polygonIndex","data","contour","threshold","x","y","code","meanCode","opts","type","ISO_BANDS","Array","isArray","polygons","polygon","vertices","ISO_LINES","i","length","start","end"],"mappings":"AAAA,SAAQA,OAAR,EAAiBC,WAAjB,EAA8BC,YAA9B,QAAiD,oBAAjD;AAIA,OAAO,SAASC,gBAAT,CAA0B;AAC/BC,EAAAA,aAD+B;AAE/BC,EAAAA,WAF+B;AAG/BC,EAAAA,QAH+B;AAI/BC,EAAAA,UAJ+B;AAK/BC,EAAAA;AAL+B,CAA1B,EAYJ;AACD,QAAMC,eAAiE,GAAG,EAA1E;AACA,QAAMC,eAAuD,GAAG,EAAhE;AACA,QAAMC,KAAK,GAAGL,QAAQ,CAAC,CAAD,CAAtB;AACA,QAAMM,MAAM,GAAGN,QAAQ,CAAC,CAAD,CAAvB;AACA,MAAIO,YAAY,GAAG,CAAnB;AACA,MAAIC,YAAY,GAAG,CAAnB;;AAEA,OAAK,MAAMC,IAAX,IAAmBX,aAAnB,EAAkC;AAChC,UAAM;AAACY,MAAAA;AAAD,QAAYD,IAAlB;AACA,UAAM;AAACE,MAAAA;AAAD,QAAcD,OAApB;;AACA,SAAK,IAAIE,CAAC,GAAG,CAAC,CAAd,EAAiBA,CAAC,GAAGP,KAArB,EAA4BO,CAAC,EAA7B,EAAiC;AAC/B,WAAK,IAAIC,CAAC,GAAG,CAAC,CAAd,EAAiBA,CAAC,GAAGP,MAArB,EAA6BO,CAAC,EAA9B,EAAkC;AAEhC,cAAM;AAACC,UAAAA,IAAD;AAAOC,UAAAA;AAAP,YAAmBrB,OAAO,CAAC;AAC/BK,UAAAA,WAD+B;AAE/BY,UAAAA,SAF+B;AAG/BC,UAAAA,CAH+B;AAI/BC,UAAAA,CAJ+B;AAK/BR,UAAAA,KAL+B;AAM/BC,UAAAA;AAN+B,SAAD,CAAhC;AAQA,cAAMU,IAAI,GAAG;AACXC,UAAAA,IAAI,EAAErB,YAAY,CAACsB,SADR;AAEXjB,UAAAA,UAFW;AAGXC,UAAAA,QAHW;AAIXU,UAAAA,CAJW;AAKXC,UAAAA,CALW;AAMXR,UAAAA,KANW;AAOXC,UAAAA,MAPW;AAQXQ,UAAAA,IARW;AASXC,UAAAA,QATW;AAUXjB,UAAAA,aAAa,EAAEW;AAVJ,SAAb;;AAYA,YAAIU,KAAK,CAACC,OAAN,CAAcT,SAAd,CAAJ,EAA8B;AAC5BK,UAAAA,IAAI,CAACC,IAAL,GAAYrB,YAAY,CAACsB,SAAzB;AACA,gBAAMG,QAAQ,GAAG1B,WAAW,CAACqB,IAAD,CAA5B;;AACA,eAAK,MAAMM,OAAX,IAAsBD,QAAtB,EAAgC;AAC9BjB,YAAAA,eAAe,CAACI,YAAY,EAAb,CAAf,GAAkC;AAChCe,cAAAA,QAAQ,EAAED,OADsB;AAEhCZ,cAAAA;AAFgC,aAAlC;AAID;AACF,SATD,MASO;AAELM,UAAAA,IAAI,CAACC,IAAL,GAAYrB,YAAY,CAAC4B,SAAzB;AACA,gBAAMD,QAAQ,GAAG5B,WAAW,CAACqB,IAAD,CAA5B;;AACA,eAAK,IAAIS,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,QAAQ,CAACG,MAA7B,EAAqCD,CAAC,IAAI,CAA1C,EAA6C;AAC3CtB,YAAAA,eAAe,CAACI,YAAY,EAAb,CAAf,GAAkC;AAChCoB,cAAAA,KAAK,EAAEJ,QAAQ,CAACE,CAAD,CADiB;AAEhCG,cAAAA,GAAG,EAAEL,QAAQ,CAACE,CAAC,GAAG,CAAL,CAFmB;AAGhCf,cAAAA;AAHgC,aAAlC;AAKD;AACF;AACF;AACF;AACF;;AACD,SAAO;AAACP,IAAAA,eAAD;AAAkBC,IAAAA;AAAlB,GAAP;AACD","sourcesContent":["import {getCode, getVertices, CONTOUR_TYPE} from './marching-squares';\n\n// Given all the cell weights, generates contours for each threshold.\n/* eslint-disable max-depth */\nexport function generateContours({\n  thresholdData,\n  cellWeights,\n  gridSize,\n  gridOrigin,\n  cellSize\n}: {\n  thresholdData: any;\n  cellWeights: Float32Array;\n  gridSize: number[];\n  gridOrigin: number[];\n  cellSize: number[];\n}) {\n  const contourSegments: {start: number[]; end: number[]; contour: any}[] = [];\n  const contourPolygons: {vertices: number[][]; contour: any}[] = [];\n  const width = gridSize[0];\n  const height = gridSize[1];\n  let segmentIndex = 0;\n  let polygonIndex = 0;\n\n  for (const data of thresholdData) {\n    const {contour} = data;\n    const {threshold} = contour;\n    for (let x = -1; x < width; x++) {\n      for (let y = -1; y < height; y++) {\n        // Get the MarchingSquares code based on neighbor cell weights.\n        const {code, meanCode} = getCode({\n          cellWeights,\n          threshold,\n          x,\n          y,\n          width,\n          height\n        });\n        const opts = {\n          type: CONTOUR_TYPE.ISO_BANDS,\n          gridOrigin,\n          cellSize,\n          x,\n          y,\n          width,\n          height,\n          code,\n          meanCode,\n          thresholdData: data\n        };\n        if (Array.isArray(threshold)) {\n          opts.type = CONTOUR_TYPE.ISO_BANDS;\n          const polygons = getVertices(opts) as number[][][];\n          for (const polygon of polygons) {\n            contourPolygons[polygonIndex++] = {\n              vertices: polygon,\n              contour\n            };\n          }\n        } else {\n          // Get the intersection vertices based on MarchingSquares code.\n          opts.type = CONTOUR_TYPE.ISO_LINES;\n          const vertices = getVertices(opts) as number[][];\n          for (let i = 0; i < vertices.length; i += 2) {\n            contourSegments[segmentIndex++] = {\n              start: vertices[i],\n              end: vertices[i + 1],\n              contour\n            };\n          }\n        }\n      }\n    }\n  }\n  return {contourSegments, contourPolygons};\n}\n/* eslint-enable max-depth */\n"],"file":"contour-utils.js"}