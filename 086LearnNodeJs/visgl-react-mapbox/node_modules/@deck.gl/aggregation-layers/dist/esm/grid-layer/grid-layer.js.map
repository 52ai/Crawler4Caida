{"version":3,"sources":["../../../src/grid-layer/grid-layer.ts"],"names":["CompositeLayer","GPUGridAggregator","GPUGridLayer","CPUGridLayer","defaultProps","gpuAggregation","GridLayer","initializeState","state","useGPUAggregation","updateState","props","setState","canUseGPUAggregation","renderLayers","data","updateTriggers","id","LayerType","getSubLayerClass","getSubLayerProps","lowerPercentile","upperPercentile","getColorValue","getElevationValue","colorScaleType","isSupported","context","gl"],"mappings":";AAAA,SACEA,cADF,QAMO,eANP;AAOA,OAAOC,iBAAP,MAA8B,mDAA9B;AACA,OAAOC,YAAP,MAA+C,kCAA/C;AACA,OAAOC,YAAP,MAA+C,kCAA/C;AAEA,MAAMC,YAA0C,GAAG,EACjD,GAAGF,YAAY,CAACE,YADiC;AAEjD,KAAGD,YAAY,CAACC,YAFiC;AAGjDC,EAAAA,cAAc,EAAE;AAHiC,CAAnD;AA0BA,eAAe,MAAMC,SAAN,SAAuDN,cAAvD,CAEb;AAAA;AAAA;;AAAA;AAAA;;AAQAO,EAAAA,eAAe,GAAG;AAChB,SAAKC,KAAL,GAAa;AACXC,MAAAA,iBAAiB,EAAE;AADR,KAAb;AAGD;;AAEDC,EAAAA,WAAW,CAAC;AAACC,IAAAA;AAAD,GAAD,EAAkC;AAC3C,SAAKC,QAAL,CAAc;AACZH,MAAAA,iBAAiB,EAAE,KAAKI,oBAAL,CAA0BF,KAA1B;AADP,KAAd;AAGD;;AAEDG,EAAAA,YAAY,GAAU;AACpB,UAAM;AAACC,MAAAA,IAAD;AAAOC,MAAAA;AAAP,QAAyB,KAAKL,KAApC;AACA,UAAMM,EAAE,GAAG,KAAKT,KAAL,CAAWC,iBAAX,GAA+B,KAA/B,GAAuC,KAAlD;AACA,UAAMS,SAAS,GAAG,KAAKV,KAAL,CAAWC,iBAAX,GACd,KAAKU,gBAAL,CAAsB,KAAtB,EAA6BjB,YAA7B,CADc,GAEd,KAAKiB,gBAAL,CAAsB,KAAtB,EAA6BhB,YAA7B,CAFJ;AAGA,WAAO,IAAIe,SAAJ,CACL,KAAKP,KADA,EAEL,KAAKS,gBAAL,CAAsB;AACpBH,MAAAA,EADoB;AAEpBD,MAAAA;AAFoB,KAAtB,CAFK,EAML;AACED,MAAAA;AADF,KANK,CAAP;AAUD;;AAIDF,EAAAA,oBAAoB,CAACF,KAAD,EAA4B;AAC9C,UAAM;AACJN,MAAAA,cADI;AAEJgB,MAAAA,eAFI;AAGJC,MAAAA,eAHI;AAIJC,MAAAA,aAJI;AAKJC,MAAAA,iBALI;AAMJC,MAAAA;AANI,QAOFd,KAPJ;;AAQA,QAAI,CAACN,cAAL,EAAqB;AAEnB,aAAO,KAAP;AACD;;AACD,QAAI,CAACJ,iBAAiB,CAACyB,WAAlB,CAA8B,KAAKC,OAAL,CAAaC,EAA3C,CAAL,EAAqD;AACnD,aAAO,KAAP;AACD;;AACD,QAAIP,eAAe,KAAK,CAApB,IAAyBC,eAAe,KAAK,GAAjD,EAAsD;AAEpD,aAAO,KAAP;AACD;;AACD,QAAIC,aAAa,KAAK,IAAlB,IAA0BC,iBAAiB,KAAK,IAApD,EAA0D;AAExD,aAAO,KAAP;AACD;;AACD,QAAIC,cAAc,KAAK,UAAnB,IAAiCA,cAAc,KAAK,SAAxD,EAAmE;AAEjE,aAAO,KAAP;AACD;;AACD,WAAO,IAAP;AACD;;AArED;;gBAFmBnB,S,eAGA,W;;gBAHAA,S,kBAIGF,Y","sourcesContent":["import {\n  CompositeLayer,\n  CompositeLayerProps,\n  Layer,\n  UpdateParameters,\n  DefaultProps\n} from '@deck.gl/core';\nimport GPUGridAggregator from '../utils/gpu-grid-aggregation/gpu-grid-aggregator';\nimport GPUGridLayer, {_GPUGridLayerProps} from '../gpu-grid-layer/gpu-grid-layer';\nimport CPUGridLayer, {_CPUGridLayerProps} from '../cpu-grid-layer/cpu-grid-layer';\n\nconst defaultProps: DefaultProps<GridLayerProps> = {\n  ...GPUGridLayer.defaultProps,\n  ...CPUGridLayer.defaultProps,\n  gpuAggregation: false\n};\n\n/** All properties supported by GridLayer. */\nexport type GridLayerProps<DataT = any> = _GridLayerProps<DataT> & CompositeLayerProps<DataT>;\n\n/** Properties added by GridLayer. */\ntype _GridLayerProps<DataT> = _CPUGridLayerProps<DataT> &\n  _GPUGridLayerProps<DataT> & {\n    /**\n     * Whether the aggregation should be performed in high-precision 64-bit mode.\n     * @default false\n     */\n    fp64?: boolean;\n\n    /**\n     * When set to true, aggregation is performed on GPU, provided other conditions are met.\n     * @default false\n     */\n    gpuAggregation?: boolean;\n  };\n\n/** Aggregate data into a grid-based heatmap. The color and height of a cell are determined based on the objects it contains. */\nexport default class GridLayer<DataT = any, ExtraPropsT = {}> extends CompositeLayer<\n  ExtraPropsT & Required<_GridLayerProps<DataT>>\n> {\n  static layerName = 'GridLayer';\n  static defaultProps = defaultProps;\n\n  state!: CompositeLayer['state'] & {\n    useGPUAggregation: boolean;\n  };\n\n  initializeState() {\n    this.state = {\n      useGPUAggregation: true\n    };\n  }\n\n  updateState({props}: UpdateParameters<this>) {\n    this.setState({\n      useGPUAggregation: this.canUseGPUAggregation(props)\n    });\n  }\n\n  renderLayers(): Layer {\n    const {data, updateTriggers} = this.props;\n    const id = this.state.useGPUAggregation ? 'GPU' : 'CPU';\n    const LayerType = this.state.useGPUAggregation\n      ? this.getSubLayerClass('GPU', GPUGridLayer)\n      : this.getSubLayerClass('CPU', CPUGridLayer);\n    return new LayerType(\n      this.props,\n      this.getSubLayerProps({\n        id,\n        updateTriggers\n      }),\n      {\n        data\n      }\n    );\n  }\n\n  // Private methods\n\n  canUseGPUAggregation(props: GridLayer['props']) {\n    const {\n      gpuAggregation,\n      lowerPercentile,\n      upperPercentile,\n      getColorValue,\n      getElevationValue,\n      colorScaleType\n    } = props;\n    if (!gpuAggregation) {\n      // cpu aggregation is requested\n      return false;\n    }\n    if (!GPUGridAggregator.isSupported(this.context.gl)) {\n      return false;\n    }\n    if (lowerPercentile !== 0 || upperPercentile !== 100) {\n      // percentile calculations requires sorting not supported on GPU\n      return false;\n    }\n    if (getColorValue !== null || getElevationValue !== null) {\n      // accessor for custom color or elevation calculation is specified\n      return false;\n    }\n    if (colorScaleType === 'quantile' || colorScaleType === 'ordinal') {\n      // quantile and ordinal scales are not supported on GPU\n      return false;\n    }\n    return true;\n  }\n}\n"],"file":"grid-layer.js"}