{"version":3,"sources":["../../../src/heatmap-layer/heatmap-layer.ts"],"names":["getBounds","boundsContain","packVertices","scaleToAspectRatio","getTextureCoordinates","getTextureParams","Buffer","Texture2D","Transform","getParameters","withParameters","FEATURES","hasFeatures","AttributeManager","COORDINATE_SYSTEM","log","TriangleLayer","AggregationLayer","defaultColorRange","colorRangeToFlatArray","weightsVs","weightsFs","vsMax","fsMax","RESOLUTION","TEXTURE_OPTIONS","mipmaps","parameters","dataFormat","DEFAULT_COLOR_DOMAIN","AGGREGATION_MODE","SUM","MEAN","defaultProps","getPosition","type","value","x","position","getWeight","intensity","min","radiusPixels","max","colorRange","threshold","colorDomain","optional","aggregation","weightsTextureSize","debounceTimeout","REQUIRED_FEATURES","BLEND_EQUATION_MINMAX","TEXTURE_FLOAT","FLOAT_TARGET_FEATURES","COLOR_ATTACHMENT_RGBA32F","FLOAT_BLEND","DIMENSIONS","data","props","HeatmapLayer","initializeState","gl","context","setState","supported","error","id","initializeAggregationLayer","_setupTextureParams","_setupAttributes","_setupResources","shouldUpdateState","changeFlags","somethingChanged","updateState","opts","state","_updateHeatmapState","oldProps","_getChangeFlags","dataChanged","viewportChanged","boundsChanged","_updateBounds","_updateTextureRenderingBounds","clearTimeout","updateTimer","isWeightMapDirty","viewportZoomChanged","_debouncedUpdateWeightmap","_updateColorTexture","_updateWeightmap","zoom","viewport","renderLayers","weightsTexture","triPositionBuffer","triTexCoordBuffer","maxWeightsTexture","colorTexture","updateTriggers","TriangleLayerClass","getSubLayerClass","getSubLayerProps","coordinateSystem","DEFAULT","attributes","positions","texCoords","vertexCount","maxTexture","aggregationMode","texture","finalizeState","weightsTransform","maxWeightTransform","delete","_getAttributeManager","stats","dimensions","isAttributeChanged","isAggregationDirty","compareAll","dimension","_createTextures","textureSize","format","width","height","attributeManager","getAttributeManager","add","size","accessor","weights","positionAttributeName","Math","floatTargetSupport","weightsScale","warn","getShaders","vs","_fs","_createWeightsTransform","shaders","elementCount","_targetTexture","_targetTextureVarying","weightsTransformShaders","maxWeightsTransformShaders","_sourceTextures","inTexture","byteLength","updateShaders","shaderOptions","_updateMaxWeightValue","run","blend","depthTest","blendFunc","blendEquation","forceUpdate","viewportCorners","unproject","map","p","fround","visibleWorldBounds","newState","worldBounds","scaledCommonBounds","_worldToCommonBounds","_commonToWorldBounds","LNGLAT","normalizedCommonBounds","subData","textureBounds","projectPosition","colors","Uint8Array","setImageData","length","commonBounds","useLayerCoordinateSystem","metersPerPixel","distanceScales","metersPerUnit","uniforms","textureWidth","update","getNumInstances","clearColor","clearRenderTarget","getAttributes","moduleSettings","getModuleSettings","setParameters","fromTimer","setTimeout","bind","minLong","minLat","maxLong","maxLat","offsetMode","LNGLAT_OFFSETS","METER_OFFSETS","offsetOriginCommon","coordinateOrigin","scale","bottomLeftCommon","topRightCommon","xMin","yMin","xMax","yMax","bottomLeftWorld","unprojectPosition","topRightWorld","slice","concat"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2019 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* global setTimeout clearTimeout */\nimport GL from '@luma.gl/constants';\nimport {\n  getBounds,\n  boundsContain,\n  packVertices,\n  scaleToAspectRatio,\n  getTextureCoordinates,\n  getTextureParams\n} from './heatmap-layer-utils';\nimport {\n  Buffer,\n  Texture2D,\n  Transform,\n  getParameters,\n  withParameters,\n  FEATURES,\n  hasFeatures\n} from '@luma.gl/core';\nimport {\n  Accessor,\n  AccessorFunction,\n  AttributeManager,\n  ChangeFlags,\n  Color,\n  COORDINATE_SYSTEM,\n  Layer,\n  LayerContext,\n  LayersList,\n  log,\n  Position,\n  UpdateParameters,\n  DefaultProps\n} from '@deck.gl/core';\nimport TriangleLayer from './triangle-layer';\nimport AggregationLayer, {AggregationLayerProps} from '../aggregation-layer';\nimport {defaultColorRange, colorRangeToFlatArray} from '../utils/color-utils';\nimport weightsVs from './weights-vs.glsl';\nimport weightsFs from './weights-fs.glsl';\nimport vsMax from './max-vs.glsl';\nimport fsMax from './max-fs.glsl';\n\nconst RESOLUTION = 2; // (number of common space pixels) / (number texels)\nconst TEXTURE_OPTIONS = {\n  mipmaps: false,\n  parameters: {\n    [GL.TEXTURE_MAG_FILTER]: GL.LINEAR,\n    [GL.TEXTURE_MIN_FILTER]: GL.LINEAR,\n    [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n    [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE\n  },\n  dataFormat: GL.RGBA\n};\nconst DEFAULT_COLOR_DOMAIN = [0, 0];\nconst AGGREGATION_MODE = {\n  SUM: 0,\n  MEAN: 1\n};\n\nconst defaultProps: DefaultProps<HeatmapLayerProps> = {\n  getPosition: {type: 'accessor', value: x => x.position},\n  getWeight: {type: 'accessor', value: 1},\n  intensity: {type: 'number', min: 0, value: 1},\n  radiusPixels: {type: 'number', min: 1, max: 100, value: 50},\n  colorRange: defaultColorRange,\n  threshold: {type: 'number', min: 0, max: 1, value: 0.05},\n  colorDomain: {type: 'array', value: null, optional: true},\n  // 'SUM' or 'MEAN'\n  aggregation: 'SUM',\n  weightsTextureSize: {type: 'number', min: 128, max: 2048, value: 2048},\n  debounceTimeout: {type: 'number', min: 0, max: 1000, value: 500}\n};\n\nconst REQUIRED_FEATURES = [\n  FEATURES.BLEND_EQUATION_MINMAX, // max weight calculation\n  FEATURES.TEXTURE_FLOAT // weight-map as texture\n];\n\nconst FLOAT_TARGET_FEATURES = [\n  FEATURES.COLOR_ATTACHMENT_RGBA32F, // ability to render to float texture\n  FEATURES.FLOAT_BLEND // ability to blend when rendering to float texture\n];\n\nconst DIMENSIONS = {\n  data: {\n    props: ['radiusPixels']\n  }\n};\n\nexport type HeatmapLayerProps<DataT = any> = _HeatmapLayerProps<DataT> &\n  AggregationLayerProps<DataT>;\n\ntype _HeatmapLayerProps<DataT> = {\n  /**\n   * Radius of the circle in pixels, to which the weight of an object is distributed.\n   *\n   * @default 30\n   */\n  radiusPixels?: number;\n\n  /**\n   * Specified as an array of colors [color1, color2, ...].\n   *\n   * @default `6-class YlOrRd` - [colorbrewer](http://colorbrewer2.org/#type=sequential&scheme=YlOrRd&n=6)\n   */\n  colorRange?: Color[];\n\n  /**\n   * Value that is multiplied with the total weight at a pixel to obtain the final weight.\n   *\n   * @default 1\n   */\n  intensity?: number;\n\n  /**\n   * Ratio of the fading weight to the max weight, between `0` and `1`.\n   *\n   * For example, `0.1` affects all pixels with weight under 10% of the max.\n   *\n   * Ignored when `colorDomain` is specified.\n   * @default 0.05\n   */\n  threshold?: number;\n\n  /**\n   * Controls how weight values are mapped to the `colorRange`, as an array of two numbers [`minValue`, `maxValue`].\n   *\n   * @default null\n   */\n  colorDomain?: [number, number] | null;\n\n  /**\n   * Defines the type of aggregation operation\n   *\n   * V valid values are 'SUM', 'MEAN'.\n   *\n   * @default 'SUM'\n   */\n  aggregation?: 'SUM' | 'MEAN';\n\n  /**\n   * Specifies the size of weight texture.\n   * @default 2048\n   */\n  weightsTextureSize?: number;\n\n  /**\n   * Interval in milliseconds during which changes to the viewport don't trigger aggregation.\n   *\n   * @default 500\n   */\n  debounceTimeout?: number;\n\n  /**\n   * Method called to retrieve the position of each object.\n   *\n   * @default d => d.position\n   */\n  getPosition?: AccessorFunction<DataT, Position>;\n\n  /**\n   * The weight of each object.\n   *\n   * @default 1\n   */\n  getWeight?: Accessor<DataT, number>;\n};\n\n/** Visualizes the spatial distribution of data. */\nexport default class HeatmapLayer<DataT = any, ExtraPropsT = {}> extends AggregationLayer<\n  ExtraPropsT & Required<_HeatmapLayerProps<DataT>>\n> {\n  static layerName = 'HeatmapLayer';\n  static defaultProps = defaultProps;\n\n  state!: AggregationLayer['state'] & {\n    supported: boolean;\n    colorDomain?: number[];\n    isWeightMapDirty?: boolean;\n    weightsTexture?: Texture2D;\n    zoom?: number;\n    worldBounds?: number[];\n    normalizedCommonBounds?: number[];\n    updateTimer?: any;\n    triPositionBuffer?: Buffer;\n    triTexCoordBuffer?: Buffer;\n  };\n\n  initializeState() {\n    const {gl} = this.context;\n    if (!hasFeatures(gl, REQUIRED_FEATURES)) {\n      this.setState({supported: false});\n      log.error(`HeatmapLayer: ${this.id} is not supported on this browser`)();\n      return;\n    }\n    super.initializeAggregationLayer(DIMENSIONS);\n    this.setState({supported: true, colorDomain: DEFAULT_COLOR_DOMAIN});\n    this._setupTextureParams();\n    this._setupAttributes();\n    this._setupResources();\n  }\n\n  shouldUpdateState({changeFlags}: UpdateParameters<this>) {\n    // Need to be updated when viewport changes\n    return changeFlags.somethingChanged;\n  }\n\n  /* eslint-disable max-statements,complexity */\n  updateState(opts: UpdateParameters<this>) {\n    if (!this.state.supported) {\n      return;\n    }\n    super.updateState(opts);\n    this._updateHeatmapState(opts);\n  }\n\n  _updateHeatmapState(opts: UpdateParameters<this>) {\n    const {props, oldProps} = opts;\n    const changeFlags = this._getChangeFlags(opts);\n\n    if (changeFlags.dataChanged || changeFlags.viewportChanged) {\n      // if data is changed, do not debounce and immediately update the weight map\n      changeFlags.boundsChanged = this._updateBounds(changeFlags.dataChanged);\n      this._updateTextureRenderingBounds();\n    }\n\n    if (changeFlags.dataChanged || changeFlags.boundsChanged) {\n      // Update weight map immediately\n      clearTimeout(this.state.updateTimer);\n      this.setState({isWeightMapDirty: true});\n    } else if (changeFlags.viewportZoomChanged) {\n      // Update weight map when zoom stops\n      this._debouncedUpdateWeightmap();\n    }\n\n    if (props.colorRange !== oldProps.colorRange) {\n      this._updateColorTexture(opts);\n    }\n\n    if (this.state.isWeightMapDirty) {\n      this._updateWeightmap();\n    }\n\n    this.setState({zoom: opts.context.viewport.zoom});\n  }\n\n  renderLayers(): LayersList | Layer {\n    if (!this.state.supported) {\n      return [];\n    }\n    const {\n      weightsTexture,\n      triPositionBuffer,\n      triTexCoordBuffer,\n      maxWeightsTexture,\n      colorTexture,\n      colorDomain\n    } = this.state;\n    const {updateTriggers, intensity, threshold, aggregation} = this.props;\n\n    const TriangleLayerClass = this.getSubLayerClass('triangle', TriangleLayer);\n\n    return new TriangleLayerClass(\n      this.getSubLayerProps({\n        id: 'triangle-layer',\n        updateTriggers\n      }),\n      {\n        // position buffer is filled with world coordinates generated from viewport.unproject\n        // i.e. LNGLAT if geospatial, CARTESIAN otherwise\n        coordinateSystem: COORDINATE_SYSTEM.DEFAULT,\n        data: {\n          attributes: {\n            positions: triPositionBuffer,\n            texCoords: triTexCoordBuffer\n          }\n        },\n        vertexCount: 4,\n        maxTexture: maxWeightsTexture,\n        colorTexture,\n        aggregationMode: AGGREGATION_MODE[aggregation] || 0,\n        texture: weightsTexture,\n        intensity,\n        threshold,\n        colorDomain\n      }\n    );\n  }\n\n  finalizeState(context: LayerContext) {\n    super.finalizeState(context);\n    const {\n      weightsTransform,\n      weightsTexture,\n      maxWeightTransform,\n      maxWeightsTexture,\n      triPositionBuffer,\n      triTexCoordBuffer,\n      colorTexture,\n      updateTimer\n    } = this.state;\n    weightsTransform?.delete();\n    weightsTexture?.delete();\n    maxWeightTransform?.delete();\n    maxWeightsTexture?.delete();\n    triPositionBuffer?.delete();\n    triTexCoordBuffer?.delete();\n    colorTexture?.delete();\n    if (updateTimer) {\n      clearTimeout(updateTimer);\n    }\n  }\n\n  // PRIVATE\n\n  // override Composite layer private method to create AttributeManager instance\n  _getAttributeManager() {\n    return new AttributeManager(this.context.gl, {\n      id: this.props.id,\n      stats: this.context.stats\n    });\n  }\n\n  _getChangeFlags(opts: UpdateParameters<this>) {\n    const changeFlags: Partial<ChangeFlags> & {\n      boundsChanged?: boolean;\n      viewportZoomChanged?: boolean;\n    } = {};\n    const {dimensions} = this.state;\n    changeFlags.dataChanged =\n      this.isAttributeChanged() || // if any attribute is changed\n      this.isAggregationDirty(opts, {\n        compareAll: true,\n        dimension: dimensions.data\n      });\n    changeFlags.viewportChanged = opts.changeFlags.viewportChanged;\n\n    const {zoom} = this.state;\n    if (!opts.context.viewport || opts.context.viewport.zoom !== zoom) {\n      changeFlags.viewportZoomChanged = true;\n    }\n\n    return changeFlags;\n  }\n\n  _createTextures() {\n    const {gl} = this.context;\n    const {textureSize, format, type} = this.state;\n\n    this.setState({\n      weightsTexture: new Texture2D(gl, {\n        width: textureSize,\n        height: textureSize,\n        format,\n        type,\n        ...TEXTURE_OPTIONS\n      }),\n      maxWeightsTexture: new Texture2D(gl, {format, type, ...TEXTURE_OPTIONS}) // 1 X 1 texture,\n    });\n  }\n\n  _setupAttributes() {\n    const attributeManager = this.getAttributeManager()!;\n    attributeManager.add({\n      positions: {size: 3, type: GL.DOUBLE, accessor: 'getPosition'},\n      weights: {size: 1, accessor: 'getWeight'}\n    });\n    this.setState({positionAttributeName: 'positions'});\n  }\n\n  _setupTextureParams() {\n    const {gl} = this.context;\n    const {weightsTextureSize} = this.props;\n\n    const textureSize = Math.min(weightsTextureSize, getParameters(gl, gl.MAX_TEXTURE_SIZE));\n    const floatTargetSupport = hasFeatures(gl, FLOAT_TARGET_FEATURES);\n    const {format, type} = getTextureParams({gl, floatTargetSupport});\n    const weightsScale = floatTargetSupport ? 1 : 1 / 255;\n    this.setState({textureSize, format, type, weightsScale});\n    if (!floatTargetSupport) {\n      log.warn(\n        `HeatmapLayer: ${this.id} rendering to float texture not supported, fallingback to low precession format`\n      )();\n    }\n  }\n\n  getShaders(type) {\n    return super.getShaders(\n      type === 'max-weights-transform'\n        ? {\n            vs: vsMax,\n            _fs: fsMax\n          }\n        : {\n            vs: weightsVs,\n            _fs: weightsFs\n          }\n    );\n  }\n\n  _createWeightsTransform(shaders = {}) {\n    const {gl} = this.context;\n    let {weightsTransform} = this.state;\n    const {weightsTexture} = this.state;\n    weightsTransform?.delete();\n\n    weightsTransform = new Transform(gl, {\n      id: `${this.id}-weights-transform`,\n      elementCount: 1,\n      _targetTexture: weightsTexture,\n      _targetTextureVarying: 'weightsTexture',\n      ...shaders\n    });\n    this.setState({weightsTransform});\n  }\n\n  _setupResources() {\n    const {gl} = this.context;\n    this._createTextures();\n    const {textureSize, weightsTexture, maxWeightsTexture} = this.state;\n\n    const weightsTransformShaders = this.getShaders('weights-transform');\n    this._createWeightsTransform(weightsTransformShaders);\n\n    const maxWeightsTransformShaders = this.getShaders('max-weights-transform');\n    const maxWeightTransform = new Transform(gl, {\n      id: `${this.id}-max-weights-transform`,\n      _sourceTextures: {\n        inTexture: weightsTexture\n      },\n      _targetTexture: maxWeightsTexture,\n      _targetTextureVarying: 'outTexture',\n      ...maxWeightsTransformShaders,\n      elementCount: textureSize * textureSize\n    });\n\n    this.setState({\n      weightsTexture,\n      maxWeightsTexture,\n      maxWeightTransform,\n      zoom: null,\n      triPositionBuffer: new Buffer(gl, {\n        byteLength: 48,\n        accessor: {size: 3}\n      }),\n      triTexCoordBuffer: new Buffer(gl, {\n        byteLength: 48,\n        accessor: {size: 2}\n      })\n    });\n  }\n\n  // overwrite super class method to update transform model\n  updateShaders(shaderOptions) {\n    // sahder params (modules, injects) changed, update model object\n    this._createWeightsTransform(shaderOptions);\n  }\n\n  _updateMaxWeightValue() {\n    const {maxWeightTransform} = this.state;\n    maxWeightTransform.run({\n      parameters: {\n        blend: true,\n        depthTest: false,\n        blendFunc: [GL.ONE, GL.ONE],\n        blendEquation: GL.MAX\n      }\n    });\n  }\n\n  // Computes world bounds area that needs to be processed for generate heatmap\n  _updateBounds(forceUpdate: any = false): boolean {\n    const {viewport} = this.context;\n\n    // Unproject all 4 corners of the current screen coordinates into world coordinates (lng/lat)\n    // Takes care of viewport has non zero bearing/pitch (i.e axis not aligned with world coordiante system)\n    const viewportCorners = [\n      viewport.unproject([0, 0]),\n      viewport.unproject([viewport.width, 0]),\n      viewport.unproject([viewport.width, viewport.height]),\n      viewport.unproject([0, viewport.height])\n    ].map(p => p.map(Math.fround));\n\n    // #1: get world bounds for current viewport extends\n    const visibleWorldBounds = getBounds(viewportCorners); // TODO: Change to visible bounds\n\n    const newState: Partial<HeatmapLayer['state']> = {visibleWorldBounds, viewportCorners};\n    let boundsChanged = false;\n\n    if (\n      forceUpdate ||\n      !this.state.worldBounds ||\n      !boundsContain(this.state.worldBounds, visibleWorldBounds)\n    ) {\n      // #2 : convert world bounds to common (Flat) bounds\n      // #3 : extend common bounds to match aspect ratio with viewport\n      const scaledCommonBounds = this._worldToCommonBounds(visibleWorldBounds);\n\n      // #4 :convert aligned common bounds to world bounds\n      const worldBounds = this._commonToWorldBounds(scaledCommonBounds);\n\n      // Clip webmercator projection limits\n      if (this.props.coordinateSystem === COORDINATE_SYSTEM.LNGLAT) {\n        worldBounds[1] = Math.max(worldBounds[1], -85.051129);\n        worldBounds[3] = Math.min(worldBounds[3], 85.051129);\n        worldBounds[0] = Math.max(worldBounds[0], -360);\n        worldBounds[2] = Math.min(worldBounds[2], 360);\n      }\n\n      // #5: now convert world bounds to common using Layer's coordiante system and origin\n      const normalizedCommonBounds = this._worldToCommonBounds(worldBounds);\n\n      newState.worldBounds = worldBounds;\n      newState.normalizedCommonBounds = normalizedCommonBounds;\n\n      boundsChanged = true;\n    }\n    this.setState(newState);\n    return boundsChanged;\n  }\n\n  _updateTextureRenderingBounds() {\n    // Just render visible portion of the texture\n    const {triPositionBuffer, triTexCoordBuffer, normalizedCommonBounds, viewportCorners} =\n      this.state;\n\n    const {viewport} = this.context;\n\n    triPositionBuffer.subData(packVertices(viewportCorners, 3));\n\n    const textureBounds = viewportCorners.map(p =>\n      getTextureCoordinates(viewport.projectPosition(p), normalizedCommonBounds!)\n    );\n    triTexCoordBuffer.subData(packVertices(textureBounds, 2));\n  }\n\n  _updateColorTexture(opts) {\n    const {colorRange} = opts.props;\n    let {colorTexture} = this.state;\n    const colors = colorRangeToFlatArray(colorRange, false, Uint8Array as any);\n\n    if (colorTexture) {\n      colorTexture.setImageData({\n        data: colors,\n        width: colorRange.length\n      });\n    } else {\n      colorTexture = new Texture2D(this.context.gl, {\n        data: colors,\n        width: colorRange.length,\n        height: 1,\n        ...TEXTURE_OPTIONS\n      });\n    }\n    this.setState({colorTexture});\n  }\n\n  _updateWeightmap() {\n    const {radiusPixels, colorDomain, aggregation} = this.props;\n    const {weightsTransform, worldBounds, textureSize, weightsTexture, weightsScale} = this.state;\n    this.state.isWeightMapDirty = false;\n\n    // convert world bounds to common using Layer's coordiante system and origin\n    const commonBounds = this._worldToCommonBounds(worldBounds, {\n      useLayerCoordinateSystem: true\n    });\n\n    if (colorDomain && aggregation === 'SUM') {\n      // scale color domain to weight per pixel\n      const {viewport} = this.context;\n      const metersPerPixel =\n        (viewport.distanceScales.metersPerUnit[2] * (commonBounds[2] - commonBounds[0])) /\n        textureSize;\n      this.state.colorDomain = colorDomain.map(x => x * metersPerPixel * weightsScale);\n    } else {\n      this.state.colorDomain = colorDomain || DEFAULT_COLOR_DOMAIN;\n    }\n\n    const uniforms = {\n      radiusPixels,\n      commonBounds,\n      textureWidth: textureSize,\n      weightsScale\n    };\n    // Attribute manager sets data array count as instaceCount on model\n    // we need to set that as elementCount on 'weightsTransform'\n    weightsTransform.update({\n      elementCount: this.getNumInstances()\n    });\n    // Need to explictly specify clearColor as external context may have modified it\n    withParameters(this.context.gl, {clearColor: [0, 0, 0, 0]}, () => {\n      weightsTransform.run({\n        uniforms,\n        parameters: {\n          blend: true,\n          depthTest: false,\n          blendFunc: [GL.ONE, GL.ONE],\n          blendEquation: GL.FUNC_ADD\n        },\n        clearRenderTarget: true,\n        attributes: this.getAttributes(),\n        moduleSettings: this.getModuleSettings()\n      });\n    });\n    this._updateMaxWeightValue();\n\n    // reset filtering parameters (TODO: remove once luma issue#1193 is fixed)\n    weightsTexture.setParameters({\n      [GL.TEXTURE_MAG_FILTER]: GL.LINEAR,\n      [GL.TEXTURE_MIN_FILTER]: GL.LINEAR\n    });\n  }\n\n  _debouncedUpdateWeightmap(fromTimer = false) {\n    let {updateTimer} = this.state;\n    const {debounceTimeout} = this.props;\n\n    if (fromTimer) {\n      updateTimer = null;\n      // update\n      this._updateBounds(true);\n      this._updateTextureRenderingBounds();\n      this.setState({isWeightMapDirty: true});\n    } else {\n      this.setState({isWeightMapDirty: false});\n      clearTimeout(updateTimer);\n      updateTimer = setTimeout(this._debouncedUpdateWeightmap.bind(this, true), debounceTimeout);\n    }\n\n    this.setState({updateTimer});\n  }\n\n  // input: worldBounds: [minLong, minLat, maxLong, maxLat]\n  // input: opts.useLayerCoordinateSystem : layers coordiante system is used\n  // optput: commonBounds: [minX, minY, maxX, maxY] scaled to fit the current texture\n  _worldToCommonBounds(worldBounds, opts: {useLayerCoordinateSystem?: boolean} = {}) {\n    const {useLayerCoordinateSystem = false} = opts;\n    const [minLong, minLat, maxLong, maxLat] = worldBounds;\n    const {viewport} = this.context;\n    const {textureSize} = this.state;\n    const {coordinateSystem} = this.props;\n\n    const offsetMode =\n      useLayerCoordinateSystem &&\n      (coordinateSystem === COORDINATE_SYSTEM.LNGLAT_OFFSETS ||\n        coordinateSystem === COORDINATE_SYSTEM.METER_OFFSETS);\n    const offsetOriginCommon = offsetMode\n      ? viewport.projectPosition(this.props.coordinateOrigin)\n      : [0, 0];\n    const size = (textureSize * RESOLUTION) / viewport.scale;\n\n    let bottomLeftCommon;\n    let topRightCommon;\n\n    // Y-axis is flipped between World and Common bounds\n    if (useLayerCoordinateSystem && !offsetMode) {\n      bottomLeftCommon = this.projectPosition([minLong, minLat, 0]);\n      topRightCommon = this.projectPosition([maxLong, maxLat, 0]);\n    } else {\n      bottomLeftCommon = viewport.projectPosition([minLong, minLat, 0]);\n      topRightCommon = viewport.projectPosition([maxLong, maxLat, 0]);\n    }\n    // Ignore z component\n    return scaleToAspectRatio(\n      [\n        bottomLeftCommon[0] - offsetOriginCommon[0],\n        bottomLeftCommon[1] - offsetOriginCommon[1],\n        topRightCommon[0] - offsetOriginCommon[0],\n        topRightCommon[1] - offsetOriginCommon[1]\n      ],\n      size,\n      size\n    );\n  }\n\n  // input commonBounds: [xMin, yMin, xMax, yMax]\n  // output worldBounds: [minLong, minLat, maxLong, maxLat]\n  _commonToWorldBounds(commonBounds) {\n    const [xMin, yMin, xMax, yMax] = commonBounds;\n    const {viewport} = this.context;\n    const bottomLeftWorld = viewport.unprojectPosition([xMin, yMin]);\n    const topRightWorld = viewport.unprojectPosition([xMax, yMax]);\n\n    return bottomLeftWorld.slice(0, 2).concat(topRightWorld.slice(0, 2));\n  }\n}\n"],"file":"heatmap-layer.js"}