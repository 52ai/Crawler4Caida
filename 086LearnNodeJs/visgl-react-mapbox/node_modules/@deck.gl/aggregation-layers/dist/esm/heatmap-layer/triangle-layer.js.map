{"version":3,"sources":["../../../src/heatmap-layer/triangle-layer.ts"],"names":["Model","Geometry","Layer","project32","vs","fs","TriangleLayer","getShaders","modules","initializeState","gl","attributeManager","getAttributeManager","add","positions","size","noAlloc","texCoords","setState","model","_getModel","vertexCount","props","id","geometry","drawMode","draw","uniforms","state","texture","maxTexture","colorTexture","intensity","threshold","aggregationMode","colorDomain","setUniforms"],"mappings":";AAqBA,SAAQA,KAAR,EAAeC,QAAf,QAAyC,eAAzC;AACA,SAAQC,KAAR,EAA6BC,SAA7B,QAA6C,eAA7C;AACA,OAAOC,EAAP,MAAe,8BAAf;AACA,OAAOC,EAAP,MAAe,gCAAf;AAaA,eAAe,MAAMC,aAAN,SAA4BJ,KAA5B,CAAuD;AAGpEK,EAAAA,UAAU,GAAG;AACX,WAAO;AAACH,MAAAA,EAAD;AAAKC,MAAAA,EAAL;AAASG,MAAAA,OAAO,EAAE,CAACL,SAAD;AAAlB,KAAP;AACD;;AAEDM,EAAAA,eAAe,CAAC;AAACC,IAAAA;AAAD,GAAD,EAA2B;AACxC,UAAMC,gBAAgB,GAAG,KAAKC,mBAAL,EAAzB;AACAD,IAAAA,gBAAgB,CAACE,GAAjB,CAAqB;AACnBC,MAAAA,SAAS,EAAE;AAACC,QAAAA,IAAI,EAAE,CAAP;AAAUC,QAAAA,OAAO,EAAE;AAAnB,OADQ;AAEnBC,MAAAA,SAAS,EAAE;AAACF,QAAAA,IAAI,EAAE,CAAP;AAAUC,QAAAA,OAAO,EAAE;AAAnB;AAFQ,KAArB;AAIA,SAAKE,QAAL,CAAc;AACZC,MAAAA,KAAK,EAAE,KAAKC,SAAL,CAAeV,EAAf;AADK,KAAd;AAGD;;AAEDU,EAAAA,SAAS,CAACV,EAAD,EAAmC;AAC1C,UAAM;AAACW,MAAAA;AAAD,QAAgB,KAAKC,KAA3B;AAEA,WAAO,IAAItB,KAAJ,CAAUU,EAAV,EAAc,EACnB,GAAG,KAAKH,UAAL,EADgB;AAEnBgB,MAAAA,EAAE,EAAE,KAAKD,KAAL,CAAWC,EAFI;AAGnBC,MAAAA,QAAQ,EAAE,IAAIvB,QAAJ,CAAa;AACrBwB,QAAAA,QAAQ,GADa;AAErBJ,QAAAA;AAFqB,OAAb;AAHS,KAAd,CAAP;AAQD;;AAEDK,EAAAA,IAAI,CAAC;AAACC,IAAAA;AAAD,GAAD,EAAmB;AACrB,UAAM;AAACR,MAAAA;AAAD,QAAU,KAAKS,KAArB;AAEA,UAAM;AAACC,MAAAA,OAAD;AAAUC,MAAAA,UAAV;AAAsBC,MAAAA,YAAtB;AAAoCC,MAAAA,SAApC;AAA+CC,MAAAA,SAA/C;AAA0DC,MAAAA,eAA1D;AAA2EC,MAAAA;AAA3E,QACJ,KAAKb,KADP;AAGAH,IAAAA,KAAK,CACFiB,WADH,CACe,EACX,GAAGT,QADQ;AAEXE,MAAAA,OAFW;AAGXC,MAAAA,UAHW;AAIXC,MAAAA,YAJW;AAKXC,MAAAA,SALW;AAMXC,MAAAA,SANW;AAOXC,MAAAA,eAPW;AAQXC,MAAAA;AARW,KADf,EAWGT,IAXH;AAYD;;AAjDmE;;gBAAjDpB,a,eACA,e","sourcesContent":["// Copyright (c) 2015 - 2019 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry, Texture2D} from '@luma.gl/core';\nimport {Layer, LayerContext, project32} from '@deck.gl/core';\nimport vs from './triangle-layer-vertex.glsl';\nimport fs from './triangle-layer-fragment.glsl';\n\ntype _TriangleLayerProps = {\n  colorDomain: number[];\n  aggregationMode: string;\n  threshold: number;\n  intensity: number;\n  vertexCount: number;\n  colorTexture: Texture2D;\n  maxTexture: Texture2D;\n  texture: Texture2D;\n};\n\nexport default class TriangleLayer extends Layer<_TriangleLayerProps> {\n  static layerName = 'TriangleLayer';\n\n  getShaders() {\n    return {vs, fs, modules: [project32]};\n  }\n\n  initializeState({gl}: LayerContext): void {\n    const attributeManager = this.getAttributeManager()!;\n    attributeManager.add({\n      positions: {size: 3, noAlloc: true},\n      texCoords: {size: 2, noAlloc: true}\n    });\n    this.setState({\n      model: this._getModel(gl)\n    });\n  }\n\n  _getModel(gl: WebGLRenderingContext): Model {\n    const {vertexCount} = this.props;\n\n    return new Model(gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: GL.TRIANGLE_FAN,\n        vertexCount\n      })\n    });\n  }\n\n  draw({uniforms}): void {\n    const {model} = this.state;\n\n    const {texture, maxTexture, colorTexture, intensity, threshold, aggregationMode, colorDomain} =\n      this.props;\n\n    model\n      .setUniforms({\n        ...uniforms,\n        texture,\n        maxTexture,\n        colorTexture,\n        intensity,\n        threshold,\n        aggregationMode,\n        colorDomain\n      })\n      .draw();\n  }\n}\n"],"file":"triangle-layer.js"}