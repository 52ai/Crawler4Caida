{"version":3,"sources":["../../../src/screen-grid-layer/screen-grid-cell-layer.ts"],"names":["Model","Geometry","FEATURES","hasFeatures","Layer","log","picking","defaultColorRange","colorRangeToFlatArray","vs","fs","DEFAULT_MINCOLOR","DEFAULT_MAXCOLOR","COLOR_PROPS","defaultProps","cellSizePixels","value","min","cellMarginPixels","max","colorDomain","colorRange","ScreenGridCellLayer","isSupported","gl","TEXTURE_FLOAT","getShaders","modules","initializeState","context","attributeManager","getAttributeManager","addInstanced","instancePositions","size","update","calculateInstancePositions","instanceCounts","noAlloc","setState","model","_getModel","shouldUpdateState","changeFlags","somethingChanged","updateState","params","oldProps","props","numInstances","invalidateAll","invalidate","_updateUniforms","draw","uniforms","parameters","maxTexture","minColor","maxColor","state","setUniforms","depthTest","depthMask","attribute","width","height","viewport","numCol","Math","ceil","i","x","y","floor","id","geometry","drawMode","attributes","positions","Float32Array","isInstanced","_shouldUseMinMax","deprecated","some","key","shouldUseMinMax","viewportChanged","margin","cellScale"],"mappings":";AAqBA,SAAQA,KAAR,EAAeC,QAAf,EAAyBC,QAAzB,EAAmCC,WAAnC,QAA8E,eAA9E;AACA,SAAQC,KAAR,EAA2BC,GAA3B,EAAgCC,OAAhC,QAAgE,eAAhE;AACA,SAAQC,iBAAR,EAA2BC,qBAA3B,QAAuD,sBAAvD;AACA,OAAOC,EAAP,MAAe,iCAAf;AACA,OAAOC,EAAP,MAAe,mCAAf;AAGA,MAAMC,gBAAgB,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAAzB;AACA,MAAMC,gBAAgB,GAAG,CAAC,CAAD,EAAI,GAAJ,EAAS,CAAT,EAAY,GAAZ,CAAzB;AACA,MAAMC,WAAW,GAAG,CAAC,UAAD,EAAa,UAAb,EAAyB,YAAzB,EAAuC,aAAvC,CAApB;AAEA,MAAMC,YAAoD,GAAG;AAC3DC,EAAAA,cAAc,EAAE;AAACC,IAAAA,KAAK,EAAE,GAAR;AAAaC,IAAAA,GAAG,EAAE;AAAlB,GAD2C;AAE3DC,EAAAA,gBAAgB,EAAE;AAACF,IAAAA,KAAK,EAAE,CAAR;AAAWC,IAAAA,GAAG,EAAE,CAAhB;AAAmBE,IAAAA,GAAG,EAAE;AAAxB,GAFyC;AAI3DC,EAAAA,WAAW,EAAE,IAJ8C;AAK3DC,EAAAA,UAAU,EAAEd;AAL+C,CAA7D;AAiBA,eAAe,MAAMe,mBAAN,SAAiElB,KAAjE,CAEb;AAAA;AAAA;;AAAA;AAAA;;AAIkB,SAAXmB,WAAW,CAACC,EAAD,EAAK;AACrB,WAAOrB,WAAW,CAACqB,EAAD,EAAK,CAACtB,QAAQ,CAACuB,aAAV,CAAL,CAAlB;AACD;;AAKDC,EAAAA,UAAU,GAAG;AACX,WAAO;AAACjB,MAAAA,EAAD;AAAKC,MAAAA,EAAL;AAASiB,MAAAA,OAAO,EAAE,CAACrB,OAAD;AAAlB,KAAP;AACD;;AAEDsB,EAAAA,eAAe,GAAG;AAChB,UAAM;AAACJ,MAAAA;AAAD,QAAO,KAAKK,OAAlB;AACA,UAAMC,gBAAgB,GAAG,KAAKC,mBAAL,EAAzB;AACAD,IAAAA,gBAAgB,CAACE,YAAjB,CAA8B;AAE5BC,MAAAA,iBAAiB,EAAE;AAACC,QAAAA,IAAI,EAAE,CAAP;AAAUC,QAAAA,MAAM,EAAE,KAAKC;AAAvB,OAFS;AAG5BC,MAAAA,cAAc,EAAE;AAACH,QAAAA,IAAI,EAAE,CAAP;AAAUI,QAAAA,OAAO,EAAE;AAAnB;AAHY,KAA9B;AAKA,SAAKC,QAAL,CAAc;AACZC,MAAAA,KAAK,EAAE,KAAKC,SAAL,CAAejB,EAAf;AADK,KAAd;AAGD;;AAEDkB,EAAAA,iBAAiB,CAAC;AAACC,IAAAA;AAAD,GAAD,EAAgB;AAE/B,WAAOA,WAAW,CAACC,gBAAnB;AACD;;AAEDC,EAAAA,WAAW,CAACC,MAAD,EAAiC;AAC1C,UAAMD,WAAN,CAAkBC,MAAlB;AAEA,UAAM;AAACC,MAAAA,QAAD;AAAWC,MAAAA,KAAX;AAAkBL,MAAAA;AAAlB,QAAiCG,MAAvC;AAEA,UAAMhB,gBAAgB,GAAG,KAAKC,mBAAL,EAAzB;;AACA,QAAIiB,KAAK,CAACC,YAAN,KAAuBF,QAAQ,CAACE,YAApC,EAAkD;AAChDnB,MAAAA,gBAAgB,CAACoB,aAAjB;AACD,KAFD,MAEO,IAAIH,QAAQ,CAAChC,cAAT,KAA4BiC,KAAK,CAACjC,cAAtC,EAAsD;AAC3De,MAAAA,gBAAgB,CAACqB,UAAjB,CAA4B,mBAA5B;AACD;;AAED,SAAKC,eAAL,CAAqBL,QAArB,EAA+BC,KAA/B,EAAsCL,WAAtC;AACD;;AAEDU,EAAAA,IAAI,CAAC;AAACC,IAAAA;AAAD,GAAD,EAAa;AACf,UAAM;AAACC,MAAAA,UAAD;AAAaC,MAAAA;AAAb,QAA2B,KAAKR,KAAtC;AACA,UAAMS,QAAQ,GAAG,KAAKT,KAAL,CAAWS,QAAX,IAAuB9C,gBAAxC;AACA,UAAM+C,QAAQ,GAAG,KAAKV,KAAL,CAAWU,QAAX,IAAuB9C,gBAAxC;AAIA,UAAMQ,WAAW,GAAG,KAAK4B,KAAL,CAAW5B,WAAX,IAA0B,CAAC,CAAD,EAAI,CAAJ,CAA9C;AACA,UAAM;AAACoB,MAAAA;AAAD,QAAU,KAAKmB,KAArB;AACAnB,IAAAA,KAAK,CACFoB,WADH,CACeN,QADf,EAEGM,WAFH,CAEe;AACXH,MAAAA,QADW;AAEXC,MAAAA,QAFW;AAGXF,MAAAA,UAHW;AAIXpC,MAAAA;AAJW,KAFf,EAQGiC,IARH,CAQQ;AACJE,MAAAA,UAAU,EAAE;AACVM,QAAAA,SAAS,EAAE,KADD;AAEVC,QAAAA,SAAS,EAAE,KAFD;AAGV,WAAGP;AAHO;AADR,KARR;AAeD;;AAEDnB,EAAAA,0BAA0B,CAAC2B,SAAD,EAAY;AAACd,IAAAA;AAAD,GAAZ,EAA4B;AACpD,UAAM;AAACe,MAAAA,KAAD;AAAQC,MAAAA;AAAR,QAAkB,KAAKpC,OAAL,CAAaqC,QAArC;AACA,UAAM;AAACnD,MAAAA;AAAD,QAAmB,KAAKiC,KAA9B;AACA,UAAMmB,MAAM,GAAGC,IAAI,CAACC,IAAL,CAAUL,KAAK,GAAGjD,cAAlB,CAAf;AAEA,UAAM;AAACC,MAAAA,KAAD;AAAQkB,MAAAA;AAAR,QAAgB6B,SAAtB;;AAEA,SAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGrB,YAApB,EAAkCqB,CAAC,EAAnC,EAAuC;AACrC,YAAMC,CAAC,GAAGD,CAAC,GAAGH,MAAd;AACA,YAAMK,CAAC,GAAGJ,IAAI,CAACK,KAAL,CAAWH,CAAC,GAAGH,MAAf,CAAV;AACAnD,MAAAA,KAAK,CAACsD,CAAC,GAAGpC,IAAJ,GAAW,CAAZ,CAAL,GAAwBqC,CAAC,GAAGxD,cAAL,GAAuBiD,KAAxB,GAAiC,CAAjC,GAAqC,CAA3D;AACAhD,MAAAA,KAAK,CAACsD,CAAC,GAAGpC,IAAJ,GAAW,CAAZ,CAAL,GAAsB,IAAMsC,CAAC,GAAGzD,cAAL,GAAuBkD,MAAxB,GAAkC,CAA5D;AACAjD,MAAAA,KAAK,CAACsD,CAAC,GAAGpC,IAAJ,GAAW,CAAZ,CAAL,GAAsB,CAAtB;AACD;AACF;;AAIDO,EAAAA,SAAS,CAACjB,EAAD,EAAmC;AAC1C,WAAO,IAAIxB,KAAJ,CAAUwB,EAAV,EAAc,EACnB,GAAG,KAAKE,UAAL,EADgB;AAEnBgD,MAAAA,EAAE,EAAE,KAAK1B,KAAL,CAAW0B,EAFI;AAGnBC,MAAAA,QAAQ,EAAE,IAAI1E,QAAJ,CAAa;AACrB2E,QAAAA,QAAQ,GADa;AAErBC,QAAAA,UAAU,EAAE;AACVC,UAAAA,SAAS,EAAE,IAAIC,YAAJ,CAAiB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,EAA+B,CAA/B,EAAkC,CAAlC,CAAjB;AADD;AAFS,OAAb,CAHS;AASnBC,MAAAA,WAAW,EAAE;AATM,KAAd,CAAP;AAWD;;AAEDC,EAAAA,gBAAgB,GAAY;AAC1B,UAAM;AAACxB,MAAAA,QAAD;AAAWC,MAAAA,QAAX;AAAqBtC,MAAAA,WAArB;AAAkCC,MAAAA;AAAlC,QAAgD,KAAK2B,KAA3D;;AACA,QAAIS,QAAQ,IAAIC,QAAhB,EAA0B;AACxBrD,MAAAA,GAAG,CAAC6E,UAAJ,CAAe,8CAAf,EAA+D,yBAA/D;AACA,aAAO,IAAP;AACD;;AAGD,QAAI9D,WAAW,IAAIC,UAAnB,EAA+B;AAC7B,aAAO,KAAP;AACD;;AAED,WAAO,IAAP;AACD;;AAED+B,EAAAA,eAAe,CAACL,QAAD,EAAWC,KAAX,EAAkBL,WAAlB,EAAqC;AAClD,UAAM;AAACH,MAAAA;AAAD,QAAU,KAAKmB,KAArB;;AACA,QAAI9C,WAAW,CAACsE,IAAZ,CAAiBC,GAAG,IAAIrC,QAAQ,CAACqC,GAAD,CAAR,KAAkBpC,KAAK,CAACoC,GAAD,CAA/C,CAAJ,EAA2D;AACzD5C,MAAAA,KAAK,CAACoB,WAAN,CAAkB;AAACyB,QAAAA,eAAe,EAAE,KAAKJ,gBAAL;AAAlB,OAAlB;AACD;;AAED,QAAIlC,QAAQ,CAAC1B,UAAT,KAAwB2B,KAAK,CAAC3B,UAAlC,EAA8C;AAC5CmB,MAAAA,KAAK,CAACoB,WAAN,CAAkB;AAACvC,QAAAA,UAAU,EAAEb,qBAAqB,CAACwC,KAAK,CAAC3B,UAAP;AAAlC,OAAlB;AACD;;AAED,QACE0B,QAAQ,CAAC7B,gBAAT,KAA8B8B,KAAK,CAAC9B,gBAApC,IACA6B,QAAQ,CAAChC,cAAT,KAA4BiC,KAAK,CAACjC,cADlC,IAEA4B,WAAW,CAAC2C,eAHd,EAIE;AACA,YAAM;AAACtB,QAAAA,KAAD;AAAQC,QAAAA;AAAR,UAAkB,KAAKpC,OAAL,CAAaqC,QAArC;AACA,YAAM;AAACnD,QAAAA,cAAD;AAAiBG,QAAAA;AAAjB,UAAqC,KAAK8B,KAAhD;AACA,YAAMuC,MAAM,GAAGxE,cAAc,GAAGG,gBAAjB,GAAoCA,gBAApC,GAAuD,CAAtE;AAEA,YAAMsE,SAAS,GAAG,IAAIT,YAAJ,CAAiB,CAChC,CAAChE,cAAc,GAAGwE,MAAlB,IAA4BvB,KAA7B,GAAsC,CADL,EAEhC,EAAEjD,cAAc,GAAGwE,MAAnB,IAA6BtB,MAA9B,GAAwC,CAFP,EAGjC,CAHiC,CAAjB,CAAlB;AAKAzB,MAAAA,KAAK,CAACoB,WAAN,CAAkB;AAAC4B,QAAAA;AAAD,OAAlB;AACD;AACF;;AAnJD;;gBAFmBlE,mB,eAGA,qB;;gBAHAA,mB,kBAIGR,Y","sourcesContent":["// Copyright (c) 2015 - 2019 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry, FEATURES, hasFeatures, Texture2D, DefaultProps} from '@luma.gl/core';\nimport {Layer, LayerProps, log, picking, UpdateParameters} from '@deck.gl/core';\nimport {defaultColorRange, colorRangeToFlatArray} from '../utils/color-utils';\nimport vs from './screen-grid-layer-vertex.glsl';\nimport fs from './screen-grid-layer-fragment.glsl';\nimport type {_ScreenGridLayerProps} from './screen-grid-layer';\n\nconst DEFAULT_MINCOLOR = [0, 0, 0, 0];\nconst DEFAULT_MAXCOLOR = [0, 255, 0, 255];\nconst COLOR_PROPS = ['minColor', 'maxColor', 'colorRange', 'colorDomain'];\n\nconst defaultProps: DefaultProps<ScreenGridCellLayerProps> = {\n  cellSizePixels: {value: 100, min: 1},\n  cellMarginPixels: {value: 2, min: 0, max: 5},\n\n  colorDomain: null,\n  colorRange: defaultColorRange\n};\n\n/** All properties supported by ScreenGridCellLayer. */\nexport type ScreenGridCellLayerProps<DataT = any> = _ScreenGridCellLayerProps<DataT> &\n  LayerProps<DataT>;\n\n/** Proprties added by ScreenGridCellLayer. */\nexport type _ScreenGridCellLayerProps<DataT> = _ScreenGridLayerProps<DataT> & {\n  maxTexture: Texture2D;\n};\n\nexport default class ScreenGridCellLayer<DataT = any, ExtraPropsT = {}> extends Layer<\n  ExtraPropsT & Required<_ScreenGridCellLayerProps<DataT>>\n> {\n  static layerName = 'ScreenGridCellLayer';\n  static defaultProps = defaultProps;\n\n  static isSupported(gl) {\n    return hasFeatures(gl, [FEATURES.TEXTURE_FLOAT]);\n  }\n\n  state!: Layer['state'] & {\n    model: Model;\n  };\n  getShaders() {\n    return {vs, fs, modules: [picking]};\n  }\n\n  initializeState() {\n    const {gl} = this.context;\n    const attributeManager = this.getAttributeManager()!;\n    attributeManager.addInstanced({\n      // eslint-disable-next-line @typescript-eslint/unbound-method\n      instancePositions: {size: 3, update: this.calculateInstancePositions},\n      instanceCounts: {size: 4, noAlloc: true}\n    });\n    this.setState({\n      model: this._getModel(gl)\n    });\n  }\n\n  shouldUpdateState({changeFlags}) {\n    // 'instanceCounts' buffer contetns change on viewport change.\n    return changeFlags.somethingChanged;\n  }\n\n  updateState(params: UpdateParameters<this>) {\n    super.updateState(params);\n\n    const {oldProps, props, changeFlags} = params;\n\n    const attributeManager = this.getAttributeManager()!;\n    if (props.numInstances !== oldProps.numInstances) {\n      attributeManager.invalidateAll();\n    } else if (oldProps.cellSizePixels !== props.cellSizePixels) {\n      attributeManager.invalidate('instancePositions');\n    }\n\n    this._updateUniforms(oldProps, props, changeFlags);\n  }\n\n  draw({uniforms}) {\n    const {parameters, maxTexture} = this.props;\n    const minColor = this.props.minColor || DEFAULT_MINCOLOR;\n    const maxColor = this.props.maxColor || DEFAULT_MAXCOLOR;\n\n    // If colorDomain not specified we use default domain [1, maxCount]\n    // maxCount value will be sampled form maxTexture in vertex shader.\n    const colorDomain = this.props.colorDomain || [1, 0];\n    const {model} = this.state;\n    model\n      .setUniforms(uniforms)\n      .setUniforms({\n        minColor,\n        maxColor,\n        maxTexture,\n        colorDomain\n      })\n      .draw({\n        parameters: {\n          depthTest: false,\n          depthMask: false,\n          ...parameters\n        }\n      });\n  }\n\n  calculateInstancePositions(attribute, {numInstances}) {\n    const {width, height} = this.context.viewport;\n    const {cellSizePixels} = this.props;\n    const numCol = Math.ceil(width / cellSizePixels);\n\n    const {value, size} = attribute;\n\n    for (let i = 0; i < numInstances; i++) {\n      const x = i % numCol;\n      const y = Math.floor(i / numCol);\n      value[i * size + 0] = ((x * cellSizePixels) / width) * 2 - 1;\n      value[i * size + 1] = 1 - ((y * cellSizePixels) / height) * 2;\n      value[i * size + 2] = 0;\n    }\n  }\n\n  // Private Methods\n\n  _getModel(gl: WebGLRenderingContext): Model {\n    return new Model(gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: GL.TRIANGLE_FAN,\n        attributes: {\n          positions: new Float32Array([0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0])\n        }\n      }),\n      isInstanced: true\n    });\n  }\n\n  _shouldUseMinMax(): boolean {\n    const {minColor, maxColor, colorDomain, colorRange} = this.props;\n    if (minColor || maxColor) {\n      log.deprecated('ScreenGridLayer props: minColor and maxColor', 'colorRange, colorDomain')();\n      return true;\n    }\n    // minColor and maxColor not supplied, check if colorRange or colorDomain supplied.\n    // NOTE: colorDomain and colorRange are experimental features, use them only when supplied.\n    if (colorDomain || colorRange) {\n      return false;\n    }\n    // None specified, use default minColor and maxColor\n    return true;\n  }\n\n  _updateUniforms(oldProps, props, changeFlags): void {\n    const {model} = this.state;\n    if (COLOR_PROPS.some(key => oldProps[key] !== props[key])) {\n      model.setUniforms({shouldUseMinMax: this._shouldUseMinMax()});\n    }\n\n    if (oldProps.colorRange !== props.colorRange) {\n      model.setUniforms({colorRange: colorRangeToFlatArray(props.colorRange)});\n    }\n\n    if (\n      oldProps.cellMarginPixels !== props.cellMarginPixels ||\n      oldProps.cellSizePixels !== props.cellSizePixels ||\n      changeFlags.viewportChanged\n    ) {\n      const {width, height} = this.context.viewport;\n      const {cellSizePixels, cellMarginPixels} = this.props;\n      const margin = cellSizePixels > cellMarginPixels ? cellMarginPixels : 0;\n\n      const cellScale = new Float32Array([\n        ((cellSizePixels - margin) / width) * 2,\n        (-(cellSizePixels - margin) / height) * 2,\n        1\n      ]);\n      model.setUniforms({cellScale});\n    }\n  }\n}\n"],"file":"screen-grid-cell-layer.js"}