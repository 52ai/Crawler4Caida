{"version":3,"sources":["../../../src/grid-layer/grid-layer.ts"],"names":["defaultProps","GPUGridLayer","CPUGridLayer","gpuAggregation","GridLayer","state","useGPUAggregation","props","setState","canUseGPUAggregation","data","updateTriggers","id","LayerType","getSubLayerClass","getSubLayerProps","lowerPercentile","upperPercentile","getColorValue","getElevationValue","colorScaleType","GPUGridAggregator","isSupported","context","gl","CompositeLayer"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAOA;;AACA;;AACA;;;;;;;;;;AAEA,IAAMA,YAA0C,iDAC3CC,sBAAaD,YAD8B,GAE3CE,sBAAaF,YAF8B;AAG9CG,EAAAA,cAAc,EAAE;AAH8B,EAAhD;;IA0BqBC,S;;;;;;;;;;;;;;;;;;;;;WAUnB,2BAAkB;AAChB,WAAKC,KAAL,GAAa;AACXC,QAAAA,iBAAiB,EAAE;AADR,OAAb;AAGD;;;WAED,2BAA6C;AAAA,UAAhCC,KAAgC,QAAhCA,KAAgC;AAC3C,WAAKC,QAAL,CAAc;AACZF,QAAAA,iBAAiB,EAAE,KAAKG,oBAAL,CAA0BF,KAA1B;AADP,OAAd;AAGD;;;WAED,wBAAsB;AACpB,wBAA+B,KAAKA,KAApC;AAAA,UAAOG,IAAP,eAAOA,IAAP;AAAA,UAAaC,cAAb,eAAaA,cAAb;AACA,UAAMC,EAAE,GAAG,KAAKP,KAAL,CAAWC,iBAAX,GAA+B,KAA/B,GAAuC,KAAlD;AACA,UAAMO,SAAS,GAAG,KAAKR,KAAL,CAAWC,iBAAX,GACd,KAAKQ,gBAAL,CAAsB,KAAtB,EAA6Bb,qBAA7B,CADc,GAEd,KAAKa,gBAAL,CAAsB,KAAtB,EAA6BZ,qBAA7B,CAFJ;AAGA,aAAO,IAAIW,SAAJ,CACL,KAAKN,KADA,EAEL,KAAKQ,gBAAL,CAAsB;AACpBH,QAAAA,EAAE,EAAFA,EADoB;AAEpBD,QAAAA,cAAc,EAAdA;AAFoB,OAAtB,CAFK,EAML;AACED,QAAAA,IAAI,EAAJA;AADF,OANK,CAAP;AAUD;;;WAID,8BAAqBH,KAArB,EAAgD;AAC9C,UACEJ,cADF,GAOII,KAPJ,CACEJ,cADF;AAAA,UAEEa,eAFF,GAOIT,KAPJ,CAEES,eAFF;AAAA,UAGEC,eAHF,GAOIV,KAPJ,CAGEU,eAHF;AAAA,UAIEC,aAJF,GAOIX,KAPJ,CAIEW,aAJF;AAAA,UAKEC,iBALF,GAOIZ,KAPJ,CAKEY,iBALF;AAAA,UAMEC,cANF,GAOIb,KAPJ,CAMEa,cANF;;AAQA,UAAI,CAACjB,cAAL,EAAqB;AAEnB,eAAO,KAAP;AACD;;AACD,UAAI,CAACkB,2BAAkBC,WAAlB,CAA8B,KAAKC,OAAL,CAAaC,EAA3C,CAAL,EAAqD;AACnD,eAAO,KAAP;AACD;;AACD,UAAIR,eAAe,KAAK,CAApB,IAAyBC,eAAe,KAAK,GAAjD,EAAsD;AAEpD,eAAO,KAAP;AACD;;AACD,UAAIC,aAAa,KAAK,IAAlB,IAA0BC,iBAAiB,KAAK,IAApD,EAA0D;AAExD,eAAO,KAAP;AACD;;AACD,UAAIC,cAAc,KAAK,UAAnB,IAAiCA,cAAc,KAAK,SAAxD,EAAmE;AAEjE,eAAO,KAAP;AACD;;AACD,aAAO,IAAP;AACD;;;EAvEmEK,oB;;;8BAAjDrB,S,eAGA,W;8BAHAA,S,kBAIGJ,Y","sourcesContent":["import {\n  CompositeLayer,\n  CompositeLayerProps,\n  Layer,\n  UpdateParameters,\n  DefaultProps\n} from '@deck.gl/core';\nimport GPUGridAggregator from '../utils/gpu-grid-aggregation/gpu-grid-aggregator';\nimport GPUGridLayer, {_GPUGridLayerProps} from '../gpu-grid-layer/gpu-grid-layer';\nimport CPUGridLayer, {_CPUGridLayerProps} from '../cpu-grid-layer/cpu-grid-layer';\n\nconst defaultProps: DefaultProps<GridLayerProps> = {\n  ...GPUGridLayer.defaultProps,\n  ...CPUGridLayer.defaultProps,\n  gpuAggregation: false\n};\n\n/** All properties supported by GridLayer. */\nexport type GridLayerProps<DataT = any> = _GridLayerProps<DataT> & CompositeLayerProps<DataT>;\n\n/** Properties added by GridLayer. */\ntype _GridLayerProps<DataT> = _CPUGridLayerProps<DataT> &\n  _GPUGridLayerProps<DataT> & {\n    /**\n     * Whether the aggregation should be performed in high-precision 64-bit mode.\n     * @default false\n     */\n    fp64?: boolean;\n\n    /**\n     * When set to true, aggregation is performed on GPU, provided other conditions are met.\n     * @default false\n     */\n    gpuAggregation?: boolean;\n  };\n\n/** Aggregate data into a grid-based heatmap. The color and height of a cell are determined based on the objects it contains. */\nexport default class GridLayer<DataT = any, ExtraPropsT = {}> extends CompositeLayer<\n  ExtraPropsT & Required<_GridLayerProps<DataT>>\n> {\n  static layerName = 'GridLayer';\n  static defaultProps = defaultProps;\n\n  state!: CompositeLayer['state'] & {\n    useGPUAggregation: boolean;\n  };\n\n  initializeState() {\n    this.state = {\n      useGPUAggregation: true\n    };\n  }\n\n  updateState({props}: UpdateParameters<this>) {\n    this.setState({\n      useGPUAggregation: this.canUseGPUAggregation(props)\n    });\n  }\n\n  renderLayers(): Layer {\n    const {data, updateTriggers} = this.props;\n    const id = this.state.useGPUAggregation ? 'GPU' : 'CPU';\n    const LayerType = this.state.useGPUAggregation\n      ? this.getSubLayerClass('GPU', GPUGridLayer)\n      : this.getSubLayerClass('CPU', CPUGridLayer);\n    return new LayerType(\n      this.props,\n      this.getSubLayerProps({\n        id,\n        updateTriggers\n      }),\n      {\n        data\n      }\n    );\n  }\n\n  // Private methods\n\n  canUseGPUAggregation(props: GridLayer['props']) {\n    const {\n      gpuAggregation,\n      lowerPercentile,\n      upperPercentile,\n      getColorValue,\n      getElevationValue,\n      colorScaleType\n    } = props;\n    if (!gpuAggregation) {\n      // cpu aggregation is requested\n      return false;\n    }\n    if (!GPUGridAggregator.isSupported(this.context.gl)) {\n      return false;\n    }\n    if (lowerPercentile !== 0 || upperPercentile !== 100) {\n      // percentile calculations requires sorting not supported on GPU\n      return false;\n    }\n    if (getColorValue !== null || getElevationValue !== null) {\n      // accessor for custom color or elevation calculation is specified\n      return false;\n    }\n    if (colorScaleType === 'quantile' || colorScaleType === 'ordinal') {\n      // quantile and ordinal scales are not supported on GPU\n      return false;\n    }\n    return true;\n  }\n}\n"],"file":"grid-layer.js"}