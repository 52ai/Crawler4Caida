{"version":3,"sources":["../../src/aggregation-layer.ts"],"names":["AggregationLayer","dimensions","context","setState","ignoreProps","constructor","_propTypes","data","props","opts","changeFlags","extensionsChanged","shaders","getShaders","defines","NON_INSTANCED_MODEL","updateShaders","_updateAttributes","changedAttributes","getAttributeManager","getShaderAttributes","viewport","mousePosition","gl","moduleSettings","Object","assign","create","pickingActive","devicePixelRatio","updateOpts","params","oldProps","compareAll","dimension","state","dataProps","accessors","updateTriggersChanged","dataChanged","all","accessor","newProps","propTypes","name","isObjectEmpty","undefined","AttributeManager","id","stats","CompositeLayer","obj","isEmpty","key"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {\n  CompositeLayer,\n  AttributeManager,\n  _compareProps as compareProps,\n  UpdateParameters,\n  CompositeLayerProps\n} from '@deck.gl/core';\nimport {cssToDeviceRatio} from '@luma.gl/core';\nimport {filterProps} from './utils/prop-utils';\n\nexport type AggregationLayerProps<DataT = any> = CompositeLayerProps<DataT>;\n\nexport default abstract class AggregationLayer<\n  ExtraPropsT = {}\n> extends CompositeLayer<ExtraPropsT> {\n  static layerName = 'AggregationLayer';\n\n  state!: CompositeLayer['state'] & {\n    ignoreProps?: Record<string, any>;\n    dimensions?: any;\n  };\n\n  initializeAggregationLayer(dimensions: any) {\n    super.initializeState(this.context);\n\n    this.setState({\n      // Layer props , when changed doesn't require updating aggregation\n      ignoreProps: filterProps((this.constructor as any)._propTypes, dimensions.data.props),\n      dimensions\n    });\n  }\n\n  updateState(opts: UpdateParameters<this>) {\n    super.updateState(opts);\n    const {changeFlags} = opts;\n    if (changeFlags.extensionsChanged) {\n      const shaders = this.getShaders({});\n      if (shaders && shaders.defines) {\n        shaders.defines.NON_INSTANCED_MODEL = 1;\n      }\n      this.updateShaders(shaders);\n    }\n\n    // Explictly call to update attributes as 'CompositeLayer' doesn't call this\n    this._updateAttributes();\n  }\n\n  updateAttributes(changedAttributes) {\n    // Super classes, can refer to state.changedAttributes to determine what\n    // attributes changed\n    this.setState({changedAttributes});\n  }\n\n  getAttributes() {\n    return this.getAttributeManager()!.getShaderAttributes();\n  }\n\n  getModuleSettings() {\n    // For regular layer draw this happens during draw cycle (_drawLayersInViewport) not during update cycle\n    // For aggregation layers this is called during updateState to update aggregation data\n    // NOTE: it is similar to LayerPass._getModuleParameters() but doesn't inlcude `effects` it is not needed for aggregation\n    const {viewport, mousePosition, gl} = this.context;\n    const moduleSettings = Object.assign(Object.create(this.props), {\n      viewport,\n      mousePosition,\n      pickingActive: 0,\n      devicePixelRatio: cssToDeviceRatio(gl)\n    });\n    return moduleSettings;\n  }\n\n  updateShaders(shaders) {\n    // Default implemention is empty, subclasses can update their Model objects if needed\n  }\n\n  /**\n   * Checks if aggregation is dirty\n   * @param {Object} updateOpts - object {props, oldProps, changeFlags}\n   * @param {Object} params - object {dimension, compareAll}\n   * @param {Object} params.dimension - {props, accessors} array of props and/or accessors\n   * @param {Boolean} params.compareAll - when `true` it will include non layer props for comparision\n   * @returns {Boolean} - returns true if dimensions' prop or accessor is changed\n   **/\n  isAggregationDirty(\n    updateOpts,\n    params: {compareAll?: boolean; dimension?: any} = {}\n  ): string | boolean {\n    const {props, oldProps, changeFlags} = updateOpts;\n    const {compareAll = false, dimension} = params;\n    const {ignoreProps} = this.state;\n    const {props: dataProps, accessors = []} = dimension;\n    const {updateTriggersChanged} = changeFlags;\n    if (changeFlags.dataChanged) {\n      return true;\n    }\n    if (updateTriggersChanged) {\n      if (updateTriggersChanged.all) {\n        return true;\n      }\n      for (const accessor of accessors) {\n        if (updateTriggersChanged[accessor]) {\n          return true;\n        }\n      }\n    }\n    if (compareAll) {\n      if (changeFlags.extensionsChanged) {\n        return true;\n      }\n      // Compare non layer props too (like extension props)\n      // ignoreprops refers to all Layer props other than aggregation props that need to be comapred\n      return compareProps({\n        oldProps,\n        newProps: props,\n        ignoreProps,\n        propTypes: (this.constructor as any)._propTypes\n      });\n    }\n    // Compare props of the dimension\n    for (const name of dataProps) {\n      if (props[name] !== oldProps[name]) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Checks if an attribute is changed\n   * @param {String} name - name of the attribute\n   * @returns {Boolean} - `true` if attribute `name` is changed, `false` otherwise,\n   *                       If `name` is not passed or `undefiend`, `true` if any attribute is changed, `false` otherwise\n   **/\n  isAttributeChanged(name?: string) {\n    const {changedAttributes} = this.state;\n    if (!name) {\n      // if name not specified return true if any attribute is changed\n      return !isObjectEmpty(changedAttributes);\n    }\n    return changedAttributes && changedAttributes[name] !== undefined;\n  }\n\n  // Private\n\n  // override Composite layer private method to create AttributeManager instance\n  _getAttributeManager() {\n    return new AttributeManager(this.context.gl, {\n      id: this.props.id,\n      stats: this.context.stats\n    });\n  }\n}\n\n// Helper methods\n\n// Returns true if given object is empty, false otherwise.\nfunction isObjectEmpty(obj) {\n  let isEmpty = true;\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  for (const key in obj) {\n    isEmpty = false;\n    break;\n  }\n  return isEmpty;\n}\n"],"file":"aggregation-layer.js"}