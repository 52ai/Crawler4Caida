{"version":3,"sources":["../../../../src/utils/gpu-grid-aggregation/gpu-grid-aggregator.js"],"names":["BUFFER_NAMES","ARRAY_BUFFER_MAP","maxData","minData","maxMinData","REQUIRED_FEATURES","FEATURES","WEBGL2","COLOR_ATTACHMENT_RGBA32F","BLEND_EQUATION_MINMAX","FLOAT_BLEND","TEXTURE_FLOAT","GPUGridAggregator","gl","opts","id","state","weightAttributes","textures","meanTextures","buffers","framebuffers","maxMinFramebuffers","minFramebuffers","maxFramebuffers","equations","resources","results","_hasGPUSupport","_setupModels","gridAggregationModel","allAggregationModel","meanTransform","delete","deleteResources","setState","aggregationParams","_normalizeAggregationParams","log","_runAggregation","weightId","data","aggregationData","aggregationBuffer","getData","arrayName","bufferName","shaderOptions","modelDirty","DEFAULT_RUN_PARAMS","weights","normalizeWeightParams","updateObject","Object","assign","needMin","needMax","combineMaxMin","aggregationTexture","target","sourceType","maxMinBuffer","maxMinTexture","minBuffer","minTexture","maxBuffer","maxTexture","_trackGPUResultBuffers","cellSize","projectPoints","attributes","moduleSettings","numCol","numRow","translation","scaling","gridSize","parameters","blend","depthTest","blendFunc","uniforms","_renderToWeightsTexture","_renderToMaxMinTexture","blendEquation","MAX_MIN_BLEND_EQUATION","minOrMaxFb","clearParams","clearColor","MAX_32_BIT_FLOAT","MIN_BLEND_EQUATION","MAX_BLEND_EQUATION","framebuffer","viewport","clear","draw","uSampler","texture","operation","AGGREGATION_OPERATION","MIN","MEAN","transformOptions","_sourceTextures","aggregationValues","_targetTexture","elementCount","width","height","update","getMeanTransform","run","attach","_updateModels","_setupFramebuffers","_renderAggregateData","_getAggregateData","framebufferSize","resize","EQUATION_MAP","SUM","_getMinMaxTexture","name","getAggregationModel","instanceCount","getAllAggregationModel","vertexCount","_setupWeightAttributes","setVertexCount","setAttributes","setInstanceCount","pixelIndex","index","PIXEL_SIZE","cellCount","cellWeight","maxCellWieght","minCellWeight","totalCount","countsData","size","numCells","length","cellWeights","Float32Array","cellCounts","Uint32Array","i","sizeIndex","result","DEFAULT_WEIGHT_PARAMS","Array","isArray","forEach","obj","shaders","vs","AGGREGATE_TO_GRID_VS","fs","AGGREGATE_TO_GRID_FS","modules","fp64arithmetic","project32","Model","drawMode","AGGREGATE_ALL_VS","AGGREGATE_ALL_FS","isInstanced","position","Transform","TRANSFORM_MEAN_VS","_targetTextureVarying"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2018 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport GL from '@luma.gl/constants';\nimport {\n  Model,\n  Transform,\n  FEATURES,\n  hasFeatures,\n  isWebGL2,\n  readPixelsToBuffer,\n  withParameters\n} from '@luma.gl/core';\nimport {fp64arithmetic} from '@luma.gl/shadertools';\nimport {log, project32, _mergeShaders as mergeShaders} from '@deck.gl/core';\n\nimport {\n  DEFAULT_RUN_PARAMS,\n  MAX_32_BIT_FLOAT,\n  MIN_BLEND_EQUATION,\n  MAX_BLEND_EQUATION,\n  MAX_MIN_BLEND_EQUATION,\n  EQUATION_MAP,\n  DEFAULT_WEIGHT_PARAMS,\n  PIXEL_SIZE\n} from './gpu-grid-aggregator-constants';\nimport {AGGREGATION_OPERATION} from '../aggregation-operation-utils';\n\nimport AGGREGATE_TO_GRID_VS from './aggregate-to-grid-vs.glsl';\nimport AGGREGATE_TO_GRID_FS from './aggregate-to-grid-fs.glsl';\nimport AGGREGATE_ALL_VS from './aggregate-all-vs.glsl';\nimport AGGREGATE_ALL_FS from './aggregate-all-fs.glsl';\nimport TRANSFORM_MEAN_VS from './transform-mean-vs.glsl';\nimport {getFloatTexture, getFramebuffer} from './../resource-utils.js';\n\nconst BUFFER_NAMES = ['aggregationBuffer', 'maxMinBuffer', 'minBuffer', 'maxBuffer'];\nconst ARRAY_BUFFER_MAP = {\n  maxData: 'maxBuffer',\n  minData: 'minBuffer',\n  maxMinData: 'maxMinBuffer'\n};\n\nconst REQUIRED_FEATURES = [\n  FEATURES.WEBGL2, // TODO: Remove after trannsform refactor\n  FEATURES.COLOR_ATTACHMENT_RGBA32F,\n  FEATURES.BLEND_EQUATION_MINMAX,\n  FEATURES.FLOAT_BLEND,\n  FEATURES.TEXTURE_FLOAT\n];\n\nexport default class GPUGridAggregator {\n  // Decode and return aggregation data of given pixel.\n  static getAggregationData({aggregationData, maxData, minData, maxMinData, pixelIndex}) {\n    const index = pixelIndex * PIXEL_SIZE;\n    const results = {};\n    if (aggregationData) {\n      results.cellCount = aggregationData[index + 3];\n      results.cellWeight = aggregationData[index];\n    }\n    if (maxMinData) {\n      results.maxCellWieght = maxMinData[0];\n      results.minCellWeight = maxMinData[3];\n    } else {\n      if (maxData) {\n        results.maxCellWieght = maxData[0];\n        results.totalCount = maxData[3];\n      }\n      if (minData) {\n        results.minCellWeight = minData[0];\n        results.totalCount = maxData[3];\n      }\n    }\n    return results;\n  }\n\n  // Decodes and retuns counts and weights of all cells\n  static getCellData({countsData, size = 1}) {\n    const numCells = countsData.length / 4;\n    const cellWeights = new Float32Array(numCells * size);\n    const cellCounts = new Uint32Array(numCells);\n    for (let i = 0; i < numCells; i++) {\n      // weights in RGB channels\n      for (let sizeIndex = 0; sizeIndex < size; sizeIndex++) {\n        cellWeights[i * size + sizeIndex] = countsData[i * 4 + sizeIndex];\n      }\n      // count in Alpha channel\n      cellCounts[i] = countsData[i * 4 + 3];\n    }\n    return {cellCounts, cellWeights};\n  }\n\n  static isSupported(gl) {\n    return hasFeatures(gl, REQUIRED_FEATURES);\n  }\n\n  // DEBUG ONLY\n  // static logData({aggregationBuffer, minBuffer, maxBuffer, maxMinBuffer, limit = 10}) {\n  //   if (aggregationBuffer) {\n  //     console.log('Aggregation Data:');\n  //     const agrData = aggregationBuffer.getData();\n  //     for (let index = 0; index < agrData.length && limit > 0; index += 4) {\n  //       if (agrData[index + 3] > 0) {\n  //         console.log(\n  //           `index: ${index} weights: ${agrData[index]} ${agrData[index + 1]} ${\n  //             agrData[index + 2]\n  //           } count: ${agrData[index + 3]}`\n  //         );\n  //         limit--;\n  //       }\n  //     }\n  //   }\n  //   const obj = {minBuffer, maxBuffer, maxMinBuffer};\n  //   for (const key in obj) {\n  //     if (obj[key]) {\n  //       const data = obj[key].getData();\n  //       console.log(`${key} data : R: ${data[0]} G: ${data[1]} B: ${data[2]} A: ${data[3]}`);\n  //     }\n  //   }\n  // }\n\n  constructor(gl, opts = {}) {\n    this.id = opts.id || 'gpu-grid-aggregator';\n    this.gl = gl;\n    this.state = {\n      // per weight GPU resources\n      weightAttributes: {},\n      textures: {},\n      meanTextures: {},\n      buffers: {},\n      framebuffers: {},\n      maxMinFramebuffers: {},\n      minFramebuffers: {},\n      maxFramebuffers: {},\n      equations: {},\n\n      // common resources to be deleted\n      resources: {},\n\n      // results\n      results: {}\n    };\n    this._hasGPUSupport =\n      isWebGL2(gl) && // gl_InstanceID usage in min/max calculation shaders\n      hasFeatures(\n        this.gl,\n        FEATURES.BLEND_EQUATION_MINMAX, // set min/max blend modes\n        FEATURES.COLOR_ATTACHMENT_RGBA32F, // render to float texture\n        FEATURES.TEXTURE_FLOAT // sample from a float texture\n      );\n    if (this._hasGPUSupport) {\n      this._setupModels();\n    }\n  }\n\n  // Delete owned resources.\n  delete() {\n    const {gridAggregationModel, allAggregationModel, meanTransform} = this;\n    const {\n      textures,\n      framebuffers,\n      maxMinFramebuffers,\n      minFramebuffers,\n      maxFramebuffers,\n      meanTextures,\n      resources\n    } = this.state;\n\n    gridAggregationModel?.delete();\n    allAggregationModel?.delete();\n    meanTransform?.delete();\n\n    deleteResources([\n      framebuffers,\n      textures,\n      maxMinFramebuffers,\n      minFramebuffers,\n      maxFramebuffers,\n      meanTextures,\n      resources\n    ]);\n  }\n\n  // Perform aggregation and retun the results\n  run(opts = {}) {\n    // reset results\n    this.setState({results: {}});\n    const aggregationParams = this._normalizeAggregationParams(opts);\n    if (!this._hasGPUSupport) {\n      log.log(1, 'GPUGridAggregator: not supported')();\n    }\n    return this._runAggregation(aggregationParams);\n  }\n\n  // Reads aggregation data into JS Array object\n  // For WebGL1, data is available in JS Array objects already.\n  // For WebGL2, data is read from Buffer objects and cached for subsequent queries.\n  getData(weightId) {\n    const data = {};\n    const results = this.state.results;\n    if (!results[weightId].aggregationData) {\n      // cache the results if reading from the buffer (WebGL2 path)\n      results[weightId].aggregationData = results[weightId].aggregationBuffer.getData();\n    }\n    data.aggregationData = results[weightId].aggregationData;\n\n    // Check for optional results\n    for (const arrayName in ARRAY_BUFFER_MAP) {\n      const bufferName = ARRAY_BUFFER_MAP[arrayName];\n\n      if (results[weightId][arrayName] || results[weightId][bufferName]) {\n        // cache the result\n        results[weightId][arrayName] =\n          results[weightId][arrayName] || results[weightId][bufferName].getData();\n        data[arrayName] = results[weightId][arrayName];\n      }\n    }\n    return data;\n  }\n\n  updateShaders(shaderOptions = {}) {\n    this.setState({shaderOptions, modelDirty: true});\n  }\n\n  // PRIVATE\n\n  _normalizeAggregationParams(opts) {\n    const aggregationParams = {...DEFAULT_RUN_PARAMS, ...opts};\n    const {weights} = aggregationParams;\n    if (weights) {\n      aggregationParams.weights = normalizeWeightParams(weights);\n    }\n    return aggregationParams;\n  }\n\n  // Update priveate state\n  setState(updateObject) {\n    Object.assign(this.state, updateObject);\n  }\n\n  // GPU Aggregation methods\n\n  _getAggregateData(opts) {\n    const results = {};\n    const {\n      textures,\n      framebuffers,\n      maxMinFramebuffers,\n      minFramebuffers,\n      maxFramebuffers,\n      resources\n    } = this.state;\n    const {weights} = opts;\n\n    for (const id in weights) {\n      results[id] = {};\n      const {needMin, needMax, combineMaxMin} = weights[id];\n      results[id].aggregationTexture = textures[id];\n      results[id].aggregationBuffer = readPixelsToBuffer(framebuffers[id], {\n        target: weights[id].aggregationBuffer, // update if a buffer is provided\n        sourceType: GL.FLOAT\n      });\n      if (needMin && needMax && combineMaxMin) {\n        results[id].maxMinBuffer = readPixelsToBuffer(maxMinFramebuffers[id], {\n          target: weights[id].maxMinBuffer, // update if a buffer is provided\n          sourceType: GL.FLOAT\n        });\n        results[id].maxMinTexture = resources[`${id}-maxMinTexture`];\n      } else {\n        if (needMin) {\n          results[id].minBuffer = readPixelsToBuffer(minFramebuffers[id], {\n            target: weights[id].minBuffer, // update if a buffer is provided\n            sourceType: GL.FLOAT\n          });\n          results[id].minTexture = resources[`${id}-minTexture`];\n        }\n        if (needMax) {\n          results[id].maxBuffer = readPixelsToBuffer(maxFramebuffers[id], {\n            target: weights[id].maxBuffer, // update if a buffer is provided\n            sourceType: GL.FLOAT\n          });\n          results[id].maxTexture = resources[`${id}-maxTexture`];\n        }\n      }\n    }\n    this._trackGPUResultBuffers(results, weights);\n    return results;\n  }\n\n  _renderAggregateData(opts) {\n    const {\n      cellSize,\n      projectPoints,\n      attributes,\n      moduleSettings,\n      numCol,\n      numRow,\n      weights,\n      translation,\n      scaling\n    } = opts;\n    const {maxMinFramebuffers, minFramebuffers, maxFramebuffers} = this.state;\n\n    const gridSize = [numCol, numRow];\n    const parameters = {\n      blend: true,\n      depthTest: false,\n      blendFunc: [GL.ONE, GL.ONE]\n    };\n    const uniforms = {\n      cellSize,\n      gridSize,\n      projectPoints,\n      translation,\n      scaling\n    };\n\n    for (const id in weights) {\n      const {needMin, needMax} = weights[id];\n      const combineMaxMin = needMin && needMax && weights[id].combineMaxMin;\n      this._renderToWeightsTexture({\n        id,\n        parameters,\n        moduleSettings,\n        uniforms,\n        gridSize,\n        attributes,\n        weights\n      });\n      if (combineMaxMin) {\n        this._renderToMaxMinTexture({\n          id,\n          parameters: {...parameters, blendEquation: MAX_MIN_BLEND_EQUATION},\n          gridSize,\n          minOrMaxFb: maxMinFramebuffers[id],\n          clearParams: {clearColor: [0, 0, 0, MAX_32_BIT_FLOAT]},\n          combineMaxMin\n        });\n      } else {\n        if (needMin) {\n          this._renderToMaxMinTexture({\n            id,\n            parameters: {...parameters, blendEquation: MIN_BLEND_EQUATION},\n            gridSize,\n            minOrMaxFb: minFramebuffers[id],\n            clearParams: {clearColor: [MAX_32_BIT_FLOAT, MAX_32_BIT_FLOAT, MAX_32_BIT_FLOAT, 0]},\n            combineMaxMin\n          });\n        }\n        if (needMax) {\n          this._renderToMaxMinTexture({\n            id,\n            parameters: {...parameters, blendEquation: MAX_BLEND_EQUATION},\n            gridSize,\n            minOrMaxFb: maxFramebuffers[id],\n            clearParams: {clearColor: [0, 0, 0, 0]},\n            combineMaxMin\n          });\n        }\n      }\n    }\n  }\n\n  // render all aggregated grid-cells to generate Min, Max or MaxMin data texture\n  _renderToMaxMinTexture(opts) {\n    const {id, parameters, gridSize, minOrMaxFb, combineMaxMin, clearParams = {}} = opts;\n    const {framebuffers} = this.state;\n    const {gl, allAggregationModel} = this;\n\n    withParameters(\n      gl,\n      {\n        ...clearParams,\n        framebuffer: minOrMaxFb,\n        viewport: [0, 0, gridSize[0], gridSize[1]]\n      },\n      () => {\n        gl.clear(gl.COLOR_BUFFER_BIT);\n\n        allAggregationModel.draw({\n          parameters,\n          uniforms: {\n            uSampler: framebuffers[id].texture,\n            gridSize,\n            combineMaxMin\n          }\n        });\n      }\n    );\n  }\n\n  // render all data points to aggregate weights\n  _renderToWeightsTexture(opts) {\n    const {id, parameters, moduleSettings, uniforms, gridSize, weights} = opts;\n    const {framebuffers, equations, weightAttributes} = this.state;\n    const {gl, gridAggregationModel} = this;\n    const {operation} = weights[id];\n\n    const clearColor =\n      operation === AGGREGATION_OPERATION.MIN\n        ? [MAX_32_BIT_FLOAT, MAX_32_BIT_FLOAT, MAX_32_BIT_FLOAT, 0]\n        : [0, 0, 0, 0];\n    withParameters(\n      gl,\n      {\n        framebuffer: framebuffers[id],\n        viewport: [0, 0, gridSize[0], gridSize[1]],\n        clearColor\n      },\n      () => {\n        gl.clear(gl.COLOR_BUFFER_BIT);\n\n        const attributes = {weights: weightAttributes[id]};\n        gridAggregationModel.draw({\n          parameters: {...parameters, blendEquation: equations[id]},\n          moduleSettings,\n          uniforms,\n          attributes\n        });\n      }\n    );\n\n    if (operation === AGGREGATION_OPERATION.MEAN) {\n      const {meanTextures, textures} = this.state;\n      const transformOptions = {\n        _sourceTextures: {aggregationValues: meanTextures[id]}, // contains aggregated data\n        _targetTexture: textures[id], // store mean values,\n        elementCount: textures[id].width * textures[id].height\n      };\n      if (this.meanTransform) {\n        this.meanTransform.update(transformOptions);\n      } else {\n        this.meanTransform = getMeanTransform(gl, transformOptions);\n      }\n      this.meanTransform.run({\n        parameters: {\n          blend: false,\n          depthTest: false\n        }\n      });\n\n      // update framebuffer with mean results so readPixelsToBuffer returns mean values\n      framebuffers[id].attach({[GL.COLOR_ATTACHMENT0]: textures[id]});\n    }\n  }\n\n  _runAggregation(opts) {\n    this._updateModels(opts);\n    this._setupFramebuffers(opts);\n    this._renderAggregateData(opts);\n    const results = this._getAggregateData(opts);\n    this.setState({results});\n    return results;\n  }\n\n  // set up framebuffer for each weight\n  /* eslint-disable complexity, max-depth, max-statements*/\n  _setupFramebuffers(opts) {\n    const {\n      textures,\n      framebuffers,\n      maxMinFramebuffers,\n      minFramebuffers,\n      maxFramebuffers,\n      meanTextures,\n      equations\n    } = this.state;\n    const {weights} = opts;\n    const {numCol, numRow} = opts;\n    const framebufferSize = {width: numCol, height: numRow};\n    for (const id in weights) {\n      const {needMin, needMax, combineMaxMin, operation} = weights[id];\n      textures[id] =\n        weights[id].aggregationTexture ||\n        textures[id] ||\n        getFloatTexture(this.gl, {id: `${id}-texture`, width: numCol, height: numRow});\n      textures[id].resize(framebufferSize);\n      let texture = textures[id];\n      if (operation === AGGREGATION_OPERATION.MEAN) {\n        // For MEAN, we first aggregatet into a temp texture\n        meanTextures[id] =\n          meanTextures[id] ||\n          getFloatTexture(this.gl, {id: `${id}-mean-texture`, width: numCol, height: numRow});\n        meanTextures[id].resize(framebufferSize);\n        texture = meanTextures[id];\n      }\n      if (framebuffers[id]) {\n        framebuffers[id].attach({[GL.COLOR_ATTACHMENT0]: texture});\n      } else {\n        framebuffers[id] = getFramebuffer(this.gl, {\n          id: `${id}-fb`,\n          width: numCol,\n          height: numRow,\n          texture\n        });\n      }\n      framebuffers[id].resize(framebufferSize);\n      equations[id] = EQUATION_MAP[operation] || EQUATION_MAP.SUM;\n      // For min/max framebuffers will use default size 1X1\n      if (needMin || needMax) {\n        if (needMin && needMax && combineMaxMin) {\n          if (!maxMinFramebuffers[id]) {\n            texture = weights[id].maxMinTexture || this._getMinMaxTexture(`${id}-maxMinTexture`);\n            maxMinFramebuffers[id] = getFramebuffer(this.gl, {id: `${id}-maxMinFb`, texture});\n          }\n        } else {\n          if (needMin) {\n            if (!minFramebuffers[id]) {\n              texture = weights[id].minTexture || this._getMinMaxTexture(`${id}-minTexture`);\n              minFramebuffers[id] = getFramebuffer(this.gl, {\n                id: `${id}-minFb`,\n                texture\n              });\n            }\n          }\n          if (needMax) {\n            if (!maxFramebuffers[id]) {\n              texture = weights[id].maxTexture || this._getMinMaxTexture(`${id}-maxTexture`);\n              maxFramebuffers[id] = getFramebuffer(this.gl, {\n                id: `${id}-maxFb`,\n                texture\n              });\n            }\n          }\n        }\n      }\n    }\n  }\n  /* eslint-enable complexity, max-depth, max-statements */\n\n  _getMinMaxTexture(name) {\n    const {resources} = this.state;\n    if (!resources[name]) {\n      resources[name] = getFloatTexture(this.gl, {id: `resourceName`});\n    }\n    return resources[name];\n  }\n\n  _setupModels({numCol = 0, numRow = 0} = {}) {\n    const {gl} = this;\n    const {shaderOptions} = this.state;\n    this.gridAggregationModel?.delete();\n    this.gridAggregationModel = getAggregationModel(gl, shaderOptions);\n    if (!this.allAggregationModel) {\n      const instanceCount = numCol * numRow;\n      this.allAggregationModel = getAllAggregationModel(gl, instanceCount);\n    }\n  }\n\n  // set up buffers for all weights\n  _setupWeightAttributes(opts) {\n    const {weightAttributes} = this.state;\n    const {weights} = opts;\n    for (const id in weights) {\n      weightAttributes[id] = opts.attributes[id];\n    }\n  }\n\n  // GPU Aggregation results are provided in Buffers, if new Buffer objects are created track them for later deletion.\n  /* eslint-disable max-depth */\n  _trackGPUResultBuffers(results, weights) {\n    const {resources} = this.state;\n    for (const id in results) {\n      if (results[id]) {\n        for (const bufferName of BUFFER_NAMES) {\n          if (results[id][bufferName] && weights[id][bufferName] !== results[id][bufferName]) {\n            // No result buffer is provided in weights object, `readPixelsToBuffer` has created a new Buffer object\n            // collect the new buffer for garabge collection\n            const name = `gpu-result-${id}-${bufferName}`;\n            if (resources[name]) {\n              resources[name].delete();\n            }\n            resources[name] = results[id][bufferName];\n          }\n        }\n      }\n    }\n  }\n  /* eslint-enable max-depth */\n\n  _updateModels(opts) {\n    const {vertexCount, attributes, numCol, numRow} = opts;\n    const {modelDirty} = this.state;\n\n    if (modelDirty) {\n      this._setupModels(opts);\n      this.setState({modelDirty: false});\n    }\n\n    // this maps color/elevation to weight name.\n    this._setupWeightAttributes(opts);\n\n    this.gridAggregationModel.setVertexCount(vertexCount);\n    this.gridAggregationModel.setAttributes(attributes);\n\n    this.allAggregationModel.setInstanceCount(numCol * numRow);\n  }\n}\n\n// HELPER METHODS\n\nfunction normalizeWeightParams(weights) {\n  const result = {};\n  for (const id in weights) {\n    result[id] = {...DEFAULT_WEIGHT_PARAMS, ...weights[id]};\n  }\n  return result;\n}\n\nfunction deleteResources(resources) {\n  resources = Array.isArray(resources) ? resources : [resources];\n  resources.forEach(obj => {\n    for (const name in obj) {\n      obj[name].delete();\n    }\n  });\n}\n\nfunction getAggregationModel(gl, shaderOptions) {\n  const shaders = mergeShaders(\n    {\n      vs: AGGREGATE_TO_GRID_VS,\n      fs: AGGREGATE_TO_GRID_FS,\n      modules: [fp64arithmetic, project32]\n    },\n    shaderOptions\n  );\n\n  return new Model(gl, {\n    id: 'Gird-Aggregation-Model',\n    vertexCount: 1,\n    drawMode: GL.POINTS,\n    ...shaders\n  });\n}\n\nfunction getAllAggregationModel(gl, instanceCount) {\n  return new Model(gl, {\n    id: 'All-Aggregation-Model',\n    vs: AGGREGATE_ALL_VS,\n    fs: AGGREGATE_ALL_FS,\n    modules: [fp64arithmetic],\n    vertexCount: 1,\n    drawMode: GL.POINTS,\n    isInstanced: true,\n    instanceCount,\n    attributes: {\n      position: [0, 0]\n    }\n  });\n}\n\nfunction getMeanTransform(gl, opts) {\n  return new Transform(gl, {\n    vs: TRANSFORM_MEAN_VS,\n    _targetTextureVarying: 'meanValues',\n    ...opts\n  });\n}\n"],"file":"gpu-grid-aggregator.js"}