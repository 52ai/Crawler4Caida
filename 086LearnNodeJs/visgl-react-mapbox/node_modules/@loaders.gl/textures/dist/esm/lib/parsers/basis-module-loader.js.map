{"version":3,"sources":["../../../../src/lib/parsers/basis-module-loader.ts"],"names":["VERSION","loadLibrary","BASIS_CDN_ENCODER_WASM","BASIS_CDN_ENCODER_JS","loadBasisTranscoderPromise","loadBasisTrascoderModule","options","modules","basis","loadBasisTrascoder","BASIS","wasmBinary","Promise","all","globalThis","initializeBasisTrascoderModule","BasisModule","resolve","then","module","BasisFile","initializeBasis","loadBasisEncoderPromise","loadBasisEncoderModule","basisEncoder","loadBasisEncoder","BASIS_ENCODER","initializeBasisEncoderModule","BasisEncoderModule","KTX2File","BasisEncoder"],"mappings":"AAEA,MAAMA,OAAO,GAAG,mBAAuB,WAAvB,aAAmD,MAAnE;AAGA,SAAQC,WAAR,QAA0B,0BAA1B;AAEA,MAAMC,sBAAsB,oDAA6CF,OAA7C,kCAA5B;AACA,MAAMG,oBAAoB,oDAA6CH,OAA7C,gCAA1B;AAEA,IAAII,0BAAJ;AAOA,OAAO,eAAeC,wBAAf,CAAwCC,OAAxC,EAAiD;AACtD,QAAMC,OAAO,GAAGD,OAAO,CAACC,OAAR,IAAmB,EAAnC;;AACA,MAAIA,OAAO,CAACC,KAAZ,EAAmB;AACjB,WAAOD,OAAO,CAACC,KAAf;AACD;;AAEDJ,EAAAA,0BAA0B,GAAGA,0BAA0B,IAAIK,kBAAkB,CAACH,OAAD,CAA7E;AACA,SAAO,MAAMF,0BAAb;AACD;;AAOD,eAAeK,kBAAf,CAAkCH,OAAlC,EAA2C;AACzC,MAAII,KAAK,GAAG,IAAZ;AACA,MAAIC,UAAU,GAAG,IAAjB;AAEA,GAACD,KAAD,EAAQC,UAAR,IAAsB,MAAMC,OAAO,CAACC,GAAR,CAAY,CACtC,MAAMZ,WAAW,CAAC,qBAAD,EAAwB,UAAxB,EAAoCK,OAApC,CADqB,EAEtC,MAAML,WAAW,CAAC,uBAAD,EAA0B,UAA1B,EAAsCK,OAAtC,CAFqB,CAAZ,CAA5B;AAOAI,EAAAA,KAAK,GAAGA,KAAK,IAAII,UAAU,CAACJ,KAA5B;AACA,SAAO,MAAMK,8BAA8B,CAACL,KAAD,EAAQC,UAAR,CAA3C;AACD;;AAQD,SAASI,8BAAT,CAAwCC,WAAxC,EAAqDL,UAArD,EAAiE;AAC/D,QAAML,OAAsB,GAAG,EAA/B;;AAEA,MAAIK,UAAJ,EAAgB;AACdL,IAAAA,OAAO,CAACK,UAAR,GAAqBA,UAArB;AACD;;AAED,SAAO,IAAIC,OAAJ,CAAaK,OAAD,IAAa;AAE9BD,IAAAA,WAAW,CAACV,OAAD,CAAX,CAAqBY,IAArB,CAA2BC,MAAD,IAAY;AACpC,YAAM;AAACC,QAAAA,SAAD;AAAYC,QAAAA;AAAZ,UAA+BF,MAArC;AACAE,MAAAA,eAAe;AACfJ,MAAAA,OAAO,CAAC;AAACG,QAAAA;AAAD,OAAD,CAAP;AACD,KAJD;AAKD,GAPM,CAAP;AAQD;;AAED,IAAIE,uBAAJ;AAOA,OAAO,eAAeC,sBAAf,CAAsCjB,OAAtC,EAA+C;AACpD,QAAMC,OAAO,GAAGD,OAAO,CAACC,OAAR,IAAmB,EAAnC;;AACA,MAAIA,OAAO,CAACiB,YAAZ,EAA0B;AACxB,WAAOjB,OAAO,CAACiB,YAAf;AACD;;AAEDF,EAAAA,uBAAuB,GAAGA,uBAAuB,IAAIG,gBAAgB,CAACnB,OAAD,CAArE;AACA,SAAO,MAAMgB,uBAAb;AACD;;AAOD,eAAeG,gBAAf,CAAgCnB,OAAhC,EAAyC;AACvC,MAAIoB,aAAa,GAAG,IAApB;AACA,MAAIf,UAAU,GAAG,IAAjB;AAEA,GAACe,aAAD,EAAgBf,UAAhB,IAA8B,MAAMC,OAAO,CAACC,GAAR,CAAY,CAC9C,MAAMZ,WAAW,CAACE,oBAAD,EAAuB,UAAvB,EAAmCG,OAAnC,CAD6B,EAE9C,MAAML,WAAW,CAACC,sBAAD,EAAyB,UAAzB,EAAqCI,OAArC,CAF6B,CAAZ,CAApC;AAOAoB,EAAAA,aAAa,GAAGA,aAAa,IAAIZ,UAAU,CAACJ,KAA5C;AACA,SAAO,MAAMiB,4BAA4B,CAACD,aAAD,EAAgBf,UAAhB,CAAzC;AACD;;AAQD,SAASgB,4BAAT,CAAsCC,kBAAtC,EAA0DjB,UAA1D,EAAsE;AACpE,QAAML,OAAsB,GAAG,EAA/B;;AAEA,MAAIK,UAAJ,EAAgB;AACdL,IAAAA,OAAO,CAACK,UAAR,GAAqBA,UAArB;AACD;;AAED,SAAO,IAAIC,OAAJ,CAAaK,OAAD,IAAa;AAE9BW,IAAAA,kBAAkB,CAACtB,OAAD,CAAlB,CAA4BY,IAA5B,CAAkCC,MAAD,IAAY;AAC3C,YAAM;AAACC,QAAAA,SAAD;AAAYS,QAAAA,QAAZ;AAAsBR,QAAAA,eAAtB;AAAuCS,QAAAA;AAAvC,UAAuDX,MAA7D;AACAE,MAAAA,eAAe;AACfJ,MAAAA,OAAO,CAAC;AAACG,QAAAA,SAAD;AAAYS,QAAAA,QAAZ;AAAsBC,QAAAA;AAAtB,OAAD,CAAP;AACD,KAJD;AAKD,GAPM,CAAP;AAQD","sourcesContent":["// __VERSION__ is injected by babel-plugin-version-inline\n// @ts-ignore TS2304: Cannot find name '__VERSION__'.\nconst VERSION = typeof __VERSION__ !== 'undefined' ? __VERSION__ : 'beta';\n\n// @ts-nocheck\nimport {loadLibrary} from '@loaders.gl/worker-utils';\n\nconst BASIS_CDN_ENCODER_WASM = `https://unpkg.com/@loaders.gl/textures@${VERSION}/dist/libs/basis_encoder.wasm`;\nconst BASIS_CDN_ENCODER_JS = `https://unpkg.com/@loaders.gl/textures@${VERSION}/dist/libs/basis_encoder.js`;\n\nlet loadBasisTranscoderPromise;\n\n/**\n * Loads wasm transcoder module\n * @param options\n * @returns {BasisFile} promise\n */\nexport async function loadBasisTrascoderModule(options) {\n  const modules = options.modules || {};\n  if (modules.basis) {\n    return modules.basis;\n  }\n\n  loadBasisTranscoderPromise = loadBasisTranscoderPromise || loadBasisTrascoder(options);\n  return await loadBasisTranscoderPromise;\n}\n\n/**\n * Loads wasm transcoder module\n * @param options\n * @returns {BasisFile} promise\n */\nasync function loadBasisTrascoder(options) {\n  let BASIS = null;\n  let wasmBinary = null;\n\n  [BASIS, wasmBinary] = await Promise.all([\n    await loadLibrary('basis_transcoder.js', 'textures', options),\n    await loadLibrary('basis_transcoder.wasm', 'textures', options)\n  ]);\n\n  // Depends on how import happened...\n  // @ts-ignore TS2339: Property does not exist on type\n  BASIS = BASIS || globalThis.BASIS;\n  return await initializeBasisTrascoderModule(BASIS, wasmBinary);\n}\n\n/**\n * Initialize wasm transcoder module\n * @param BasisModule - js part of the module\n * @param wasmBinary - wasm part of the module\n * @returns {BasisFile} promise\n */\nfunction initializeBasisTrascoderModule(BasisModule, wasmBinary) {\n  const options: {wasmBinary?} = {};\n\n  if (wasmBinary) {\n    options.wasmBinary = wasmBinary;\n  }\n\n  return new Promise((resolve) => {\n    // if you try to return BasisModule the browser crashes!\n    BasisModule(options).then((module) => {\n      const {BasisFile, initializeBasis} = module;\n      initializeBasis();\n      resolve({BasisFile});\n    });\n  });\n}\n\nlet loadBasisEncoderPromise;\n\n/**\n * Loads wasm encoder module\n * @param options\n * @returns {BasisFile, KTX2File} promise\n */\nexport async function loadBasisEncoderModule(options) {\n  const modules = options.modules || {};\n  if (modules.basisEncoder) {\n    return modules.basisEncoder;\n  }\n\n  loadBasisEncoderPromise = loadBasisEncoderPromise || loadBasisEncoder(options);\n  return await loadBasisEncoderPromise;\n}\n\n/**\n * Loads wasm encoder module\n * @param options\n * @returns {BasisFile, KTX2File} promise\n */\nasync function loadBasisEncoder(options) {\n  let BASIS_ENCODER = null;\n  let wasmBinary = null;\n\n  [BASIS_ENCODER, wasmBinary] = await Promise.all([\n    await loadLibrary(BASIS_CDN_ENCODER_JS, 'textures', options),\n    await loadLibrary(BASIS_CDN_ENCODER_WASM, 'textures', options)\n  ]);\n\n  // Depends on how import happened...\n  // @ts-ignore TS2339: Property does not exist on type\n  BASIS_ENCODER = BASIS_ENCODER || globalThis.BASIS;\n  return await initializeBasisEncoderModule(BASIS_ENCODER, wasmBinary);\n}\n\n/**\n * Initialize wasm transcoder module\n * @param BasisEncoderModule - js part of the module\n * @param wasmBinary - wasm part of the module\n * @returns {BasisFile, KTX2File} promise\n */\nfunction initializeBasisEncoderModule(BasisEncoderModule, wasmBinary) {\n  const options: {wasmBinary?} = {};\n\n  if (wasmBinary) {\n    options.wasmBinary = wasmBinary;\n  }\n\n  return new Promise((resolve) => {\n    // if you try to return BasisModule the browser crashes!\n    BasisEncoderModule(options).then((module) => {\n      const {BasisFile, KTX2File, initializeBasis, BasisEncoder} = module;\n      initializeBasis();\n      resolve({BasisFile, KTX2File, BasisEncoder});\n    });\n  });\n}\n"],"file":"basis-module-loader.js"}