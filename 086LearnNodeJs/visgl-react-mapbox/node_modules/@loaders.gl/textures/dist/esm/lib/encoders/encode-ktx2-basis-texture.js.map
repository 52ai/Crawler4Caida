{"version":3,"sources":["../../../../src/lib/encoders/encode-ktx2-basis-texture.ts"],"names":["loadBasisEncoderModule","encodeKTX2BasisTexture","image","options","useSRGB","qualityLevel","encodeUASTC","mipmaps","BasisEncoder","basisEncoder","basisFileData","Uint8Array","width","height","setCreateKTX2File","setKTX2UASTCSupercompression","setKTX2SRGBTransferFunc","setSliceSourceImage","data","setPerceptual","setMipSRGB","setQualityLevel","setUASTC","setMipGen","numOutputBytes","encode","actualKTX2FileData","subarray","buffer","error","console","delete"],"mappings":"AACA,SAAQA,sBAAR,QAAqC,gCAArC;AASA,OAAO,eAAeC,sBAAf,CACLC,KADK,EAELC,OAAY,GAAG,EAFV,EAGiB;AAEtB,QAAM;AAACC,IAAAA,OAAO,GAAG,KAAX;AAAkBC,IAAAA,YAAY,GAAG,EAAjC;AAAqCC,IAAAA,WAAW,GAAG,KAAnD;AAA0DC,IAAAA,OAAO,GAAG;AAApE,MAA6EJ,OAAnF;AACA,QAAM;AAACK,IAAAA;AAAD,MAAiB,MAAMR,sBAAsB,CAACG,OAAD,CAAnD;AACA,QAAMM,YAAY,GAAG,IAAID,YAAJ,EAArB;;AAEA,MAAI;AACF,UAAME,aAAa,GAAG,IAAIC,UAAJ,CAAeT,KAAK,CAACU,KAAN,GAAcV,KAAK,CAACW,MAApB,GAA6B,CAA5C,CAAtB;AACAJ,IAAAA,YAAY,CAACK,iBAAb,CAA+B,IAA/B;AACAL,IAAAA,YAAY,CAACM,4BAAb,CAA0C,IAA1C;AACAN,IAAAA,YAAY,CAACO,uBAAb,CAAqC,IAArC;AAEAP,IAAAA,YAAY,CAACQ,mBAAb,CAAiC,CAAjC,EAAoCf,KAAK,CAACgB,IAA1C,EAAgDhB,KAAK,CAACU,KAAtD,EAA6DV,KAAK,CAACW,MAAnE,EAA2E,KAA3E;AACAJ,IAAAA,YAAY,CAACU,aAAb,CAA2Bf,OAA3B;AACAK,IAAAA,YAAY,CAACW,UAAb,CAAwBhB,OAAxB;AACAK,IAAAA,YAAY,CAACY,eAAb,CAA6BhB,YAA7B;AACAI,IAAAA,YAAY,CAACa,QAAb,CAAsBhB,WAAtB;AACAG,IAAAA,YAAY,CAACc,SAAb,CAAuBhB,OAAvB;AAEA,UAAMiB,cAAc,GAAGf,YAAY,CAACgB,MAAb,CAAoBf,aAApB,CAAvB;AAEA,UAAMgB,kBAAkB,GAAGhB,aAAa,CAACiB,QAAd,CAAuB,CAAvB,EAA0BH,cAA1B,EAA0CI,MAArE;AACA,WAAOF,kBAAP;AACD,GAjBD,CAiBE,OAAOG,KAAP,EAAc;AAEdC,IAAAA,OAAO,CAACD,KAAR,CAAc,6DAAd,EAA6EA,KAA7E;AACA,UAAMA,KAAN;AACD,GArBD,SAqBU;AACRpB,IAAAA,YAAY,CAACsB,MAAb;AACD;AACF","sourcesContent":["import type {ImageDataType} from '@loaders.gl/images';\nimport {loadBasisEncoderModule} from '../parsers/basis-module-loader';\n\n/**\n * Encodes image to Basis Universal Supercompressed GPU Texture.\n * Code example is taken from here - https://github.com/BinomialLLC/basis_universal/blob/master/webgl/ktx2_encode_test/index.html#L279\n * BasisEncoder API - https://github.com/BinomialLLC/basis_universal/blob/master/webgl/transcoder/basis_wrappers.cpp#L1712\n * @param image\n * @param options\n */\nexport async function encodeKTX2BasisTexture(\n  image: ImageDataType,\n  options: any = {}\n): Promise<ArrayBuffer> {\n  // TODO remove default values after writer options will be normalized like it done in load module.\n  const {useSRGB = false, qualityLevel = 10, encodeUASTC = false, mipmaps = false} = options;\n  const {BasisEncoder} = await loadBasisEncoderModule(options);\n  const basisEncoder = new BasisEncoder();\n\n  try {\n    const basisFileData = new Uint8Array(image.width * image.height * 4);\n    basisEncoder.setCreateKTX2File(true);\n    basisEncoder.setKTX2UASTCSupercompression(true);\n    basisEncoder.setKTX2SRGBTransferFunc(true);\n\n    basisEncoder.setSliceSourceImage(0, image.data, image.width, image.height, false);\n    basisEncoder.setPerceptual(useSRGB);\n    basisEncoder.setMipSRGB(useSRGB);\n    basisEncoder.setQualityLevel(qualityLevel);\n    basisEncoder.setUASTC(encodeUASTC);\n    basisEncoder.setMipGen(mipmaps);\n\n    const numOutputBytes = basisEncoder.encode(basisFileData);\n\n    const actualKTX2FileData = basisFileData.subarray(0, numOutputBytes).buffer;\n    return actualKTX2FileData;\n  } catch (error) {\n    // eslint-disable-next-line no-console\n    console.error('Basis Universal Supercompressed GPU Texture encoder Error: ', error);\n    throw error;\n  } finally {\n    basisEncoder.delete();\n  }\n}\n"],"file":"encode-ktx2-basis-texture.js"}