{"version":3,"sources":["../../../src/lib/parse-quantized-mesh.ts"],"names":["getMeshBoundingBox","decode","DECODING_STEPS","addSkirt","getMeshAttributes","vertexData","header","bounds","minHeight","maxHeight","minX","minY","maxX","maxY","xScale","yScale","zScale","nCoords","length","positions","Float32Array","texCoords","i","x","y","z","POSITION","value","size","TEXCOORD_0","getTileMesh","arrayBuffer","options","triangleIndices","originalTriangleIndices","westIndices","northIndices","eastIndices","southIndices","attributes","boundingBox","skirtHeight","newAttributes","triangles","newTriangles","loaderData","vertexCount","mode","indices","loadQuantizedMesh"],"mappings":"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","sourcesContent":["import {getMeshBoundingBox} from '@loaders.gl/schema';\nimport decode, {DECODING_STEPS} from './decode-quantized-mesh';\nimport {addSkirt} from './helpers/skirt';\n\nfunction getMeshAttributes(vertexData, header, bounds) {\n  const {minHeight, maxHeight} = header;\n  const [minX, minY, maxX, maxY] = bounds || [0, 0, 1, 1];\n  const xScale = maxX - minX;\n  const yScale = maxY - minY;\n  const zScale = maxHeight - minHeight;\n\n  const nCoords = vertexData.length / 3;\n  // vec3. x, y defined by bounds, z in meters\n  const positions = new Float32Array(nCoords * 3);\n\n  // vec2. 1 to 1 relationship with position. represents the uv on the texture image. 0,0 to 1,1.\n  const texCoords = new Float32Array(nCoords * 2);\n\n  // Data is not interleaved; all u, then all v, then all heights\n  for (let i = 0; i < nCoords; i++) {\n    const x = vertexData[i] / 32767;\n    const y = vertexData[i + nCoords] / 32767;\n    const z = vertexData[i + nCoords * 2] / 32767;\n\n    positions[3 * i + 0] = x * xScale + minX;\n    positions[3 * i + 1] = y * yScale + minY;\n    positions[3 * i + 2] = z * zScale + minHeight;\n\n    texCoords[2 * i + 0] = x;\n    texCoords[2 * i + 1] = y;\n  }\n\n  return {\n    POSITION: {value: positions, size: 3},\n    TEXCOORD_0: {value: texCoords, size: 2}\n    // TODO: Parse normals if they exist in the file\n    // NORMAL: {}, - optional, but creates the high poly look with lighting\n  };\n}\n\nfunction getTileMesh(arrayBuffer, options) {\n  if (!arrayBuffer) {\n    return null;\n  }\n  const {bounds} = options;\n  // Don't parse edge indices or format extensions\n  const {\n    header,\n    vertexData,\n    triangleIndices: originalTriangleIndices,\n    westIndices,\n    northIndices,\n    eastIndices,\n    southIndices\n  } = decode(arrayBuffer, DECODING_STEPS.triangleIndices);\n  let triangleIndices = originalTriangleIndices;\n  let attributes = getMeshAttributes(vertexData, header, bounds);\n\n  // Compute bounding box before adding skirt so that z values are not skewed\n  // TODO: Find bounding box from header, instead of doing extra pass over\n  // vertices.\n  const boundingBox = getMeshBoundingBox(attributes);\n\n  if (options.skirtHeight) {\n    const {attributes: newAttributes, triangles: newTriangles} = addSkirt(\n      attributes,\n      triangleIndices,\n      options.skirtHeight,\n      {\n        westIndices,\n        northIndices,\n        eastIndices,\n        southIndices\n      }\n    );\n    attributes = newAttributes;\n    triangleIndices = newTriangles;\n  }\n\n  return {\n    // Data return by this loader implementation\n    loaderData: {\n      header: {}\n    },\n    header: {\n      // @ts-ignore\n      vertexCount: triangleIndices.length,\n      boundingBox\n    },\n    mode: 4, // TRIANGLES\n    indices: {value: triangleIndices, size: 1},\n    attributes\n  };\n}\n\nexport default function loadQuantizedMesh(arrayBuffer, options) {\n  return getTileMesh(arrayBuffer, options['quantized-mesh']);\n}\n"],"file":"parse-quantized-mesh.js"}