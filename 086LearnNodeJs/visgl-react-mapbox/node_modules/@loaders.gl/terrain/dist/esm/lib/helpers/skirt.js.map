{"version":3,"sources":["../../../../src/lib/helpers/skirt.ts"],"names":["concatenateTypedArrays","addSkirt","attributes","triangles","skirtHeight","outsideIndices","outsideEdges","getOutsideEdgesFromIndices","POSITION","value","getOutsideEdgesFromTriangles","newPosition","constructor","length","newTexcoord0","TEXCOORD_0","newTriangles","i","edge","updateAttributesForNewEdge","edgeIndex","resultTriangles","Array","concat","edges","push","sort","a","b","Math","min","max","index","indices","position","westIndices","eastIndices","southIndices","northIndices","indexGroup","positionsLength","vertex1Offset","vertex2Offset","set","subarray","triangle1Offset"],"mappings":"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","sourcesContent":["import {concatenateTypedArrays} from '@loaders.gl/loader-utils';\n\nexport type EdgeIndices = {\n  westIndices: number[];\n  northIndices: number[];\n  eastIndices: number[];\n  southIndices: number[];\n};\n\n/**\n * Add skirt to existing mesh\n * @param {object} attributes - POSITION and TEXCOOD_0 attributes data\n * @param {any} triangles - indices array of the mesh geometry\n * @param skirtHeight - height of the skirt geometry\n * @param outsideIndices - edge indices from quantized mesh data\n * @returns - geometry data with added skirt\n */\nexport function addSkirt(attributes, triangles, skirtHeight: number, outsideIndices?: EdgeIndices) {\n  const outsideEdges = outsideIndices\n    ? getOutsideEdgesFromIndices(outsideIndices, attributes.POSITION.value)\n    : getOutsideEdgesFromTriangles(triangles);\n\n  // 2 new vertices for each outside edge\n  const newPosition = new attributes.POSITION.value.constructor(outsideEdges.length * 6);\n  const newTexcoord0 = new attributes.TEXCOORD_0.value.constructor(outsideEdges.length * 4);\n\n  // 2 new triangles for each outside edge\n  const newTriangles = new triangles.constructor(outsideEdges.length * 6);\n\n  for (let i = 0; i < outsideEdges.length; i++) {\n    const edge = outsideEdges[i];\n\n    updateAttributesForNewEdge({\n      edge,\n      edgeIndex: i,\n      attributes,\n      skirtHeight,\n      newPosition,\n      newTexcoord0,\n      newTriangles\n    });\n  }\n\n  attributes.POSITION.value = concatenateTypedArrays(attributes.POSITION.value, newPosition);\n  attributes.TEXCOORD_0.value = concatenateTypedArrays(attributes.TEXCOORD_0.value, newTexcoord0);\n  const resultTriangles =\n    triangles instanceof Array\n      ? triangles.concat(newTriangles)\n      : concatenateTypedArrays(triangles, newTriangles);\n\n  return {\n    attributes,\n    triangles: resultTriangles\n  };\n}\n\n/**\n * Get geometry edges that located on a border of the mesh\n * @param {any} triangles - indices array of the mesh geometry\n * @returns {number[][]} - outside edges data\n */\nfunction getOutsideEdgesFromTriangles(triangles) {\n  const edges: number[][] = [];\n  for (let i = 0; i < triangles.length; i += 3) {\n    edges.push([triangles[i], triangles[i + 1]]);\n    edges.push([triangles[i + 1], triangles[i + 2]]);\n    edges.push([triangles[i + 2], triangles[i]]);\n  }\n\n  edges.sort((a, b) => Math.min(...a) - Math.min(...b) || Math.max(...a) - Math.max(...b));\n\n  const outsideEdges: number[][] = [];\n  let index = 0;\n  while (index < edges.length) {\n    if (edges[index][0] === edges[index + 1]?.[1] && edges[index][1] === edges[index + 1]?.[0]) {\n      index += 2;\n    } else {\n      outsideEdges.push(edges[index]);\n      index++;\n    }\n  }\n  return outsideEdges;\n}\n\n/**\n * Get geometry edges that located on a border of the mesh\n * @param {object} indices - edge indices from quantized mesh data\n * @param {TypedArray} position - position attribute geometry data\n * @returns {number[][]} - outside edges data\n */\nfunction getOutsideEdgesFromIndices(indices: EdgeIndices, position) {\n  // Sort skirt indices to create adjacent triangles\n  indices.westIndices.sort((a, b) => position[3 * a + 1] - position[3 * b + 1]);\n  // Reverse (b - a) to match triangle winding\n  indices.eastIndices.sort((a, b) => position[3 * b + 1] - position[3 * a + 1]);\n  indices.southIndices.sort((a, b) => position[3 * b] - position[3 * a]);\n  // Reverse (b - a) to match triangle winding\n  indices.northIndices.sort((a, b) => position[3 * a] - position[3 * b]);\n\n  const edges: number[][] = [];\n  for (const index in indices) {\n    const indexGroup = indices[index];\n    for (let i = 0; i < indexGroup.length - 1; i++) {\n      edges.push([indexGroup[i], indexGroup[i + 1]]);\n    }\n  }\n  return edges;\n}\n\n/**\n * Get geometry edges that located on a border of the mesh\n * @param {object} args\n * @param {number[]} args.edge - edge indices in geometry\n * @param {number} args.edgeIndex - edge index in outsideEdges array\n * @param {object} args.attributes - POSITION and TEXCOORD_0 attributes\n * @param {number} args.skirtHeight - height of the skirt geometry\n * @param {TypedArray} args.newPosition - POSITION array for skirt data\n * @param {TypedArray} args.newTexcoord0 - TEXCOORD_0 array for skirt data\n * @param {TypedArray | Array} args.newTriangles - trinagle indices array for skirt data\n * @returns {void}\n */\nfunction updateAttributesForNewEdge({\n  edge,\n  edgeIndex,\n  attributes,\n  skirtHeight,\n  newPosition,\n  newTexcoord0,\n  newTriangles\n}) {\n  const positionsLength = attributes.POSITION.value.length;\n  const vertex1Offset = edgeIndex * 2;\n  const vertex2Offset = edgeIndex * 2 + 1;\n\n  // Define POSITION for new 1st vertex\n  newPosition.set(\n    attributes.POSITION.value.subarray(edge[0] * 3, edge[0] * 3 + 3),\n    vertex1Offset * 3\n  );\n  newPosition[vertex1Offset * 3 + 2] = newPosition[vertex1Offset * 3 + 2] - skirtHeight; // put down elevation on the skirt height\n\n  // Define POSITION for new 2nd vertex\n  newPosition.set(\n    attributes.POSITION.value.subarray(edge[1] * 3, edge[1] * 3 + 3),\n    vertex2Offset * 3\n  );\n  newPosition[vertex2Offset * 3 + 2] = newPosition[vertex2Offset * 3 + 2] - skirtHeight; // put down elevation on the skirt height\n\n  // Use same TEXCOORDS for skirt vertices\n  newTexcoord0.set(\n    attributes.TEXCOORD_0.value.subarray(edge[0] * 2, edge[0] * 2 + 2),\n    vertex1Offset * 2\n  );\n  newTexcoord0.set(\n    attributes.TEXCOORD_0.value.subarray(edge[1] * 2, edge[1] * 2 + 2),\n    vertex2Offset * 2\n  );\n\n  // Define new triangles\n  const triangle1Offset = edgeIndex * 2 * 3;\n  newTriangles[triangle1Offset] = edge[0];\n  newTriangles[triangle1Offset + 1] = positionsLength / 3 + vertex2Offset;\n  newTriangles[triangle1Offset + 2] = edge[1];\n\n  newTriangles[triangle1Offset + 3] = positionsLength / 3 + vertex2Offset;\n  newTriangles[triangle1Offset + 4] = edge[0];\n  newTriangles[triangle1Offset + 5] = positionsLength / 3 + vertex1Offset;\n}\n"],"file":"skirt.js"}