"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const schema_1 = require("@loaders.gl/schema");
const decode_quantized_mesh_1 = __importStar(require("./decode-quantized-mesh"));
const skirt_1 = require("./helpers/skirt");
function getMeshAttributes(vertexData, header, bounds) {
    const { minHeight, maxHeight } = header;
    const [minX, minY, maxX, maxY] = bounds || [0, 0, 1, 1];
    const xScale = maxX - minX;
    const yScale = maxY - minY;
    const zScale = maxHeight - minHeight;
    const nCoords = vertexData.length / 3;
    // vec3. x, y defined by bounds, z in meters
    const positions = new Float32Array(nCoords * 3);
    // vec2. 1 to 1 relationship with position. represents the uv on the texture image. 0,0 to 1,1.
    const texCoords = new Float32Array(nCoords * 2);
    // Data is not interleaved; all u, then all v, then all heights
    for (let i = 0; i < nCoords; i++) {
        const x = vertexData[i] / 32767;
        const y = vertexData[i + nCoords] / 32767;
        const z = vertexData[i + nCoords * 2] / 32767;
        positions[3 * i + 0] = x * xScale + minX;
        positions[3 * i + 1] = y * yScale + minY;
        positions[3 * i + 2] = z * zScale + minHeight;
        texCoords[2 * i + 0] = x;
        texCoords[2 * i + 1] = y;
    }
    return {
        POSITION: { value: positions, size: 3 },
        TEXCOORD_0: { value: texCoords, size: 2 }
        // TODO: Parse normals if they exist in the file
        // NORMAL: {}, - optional, but creates the high poly look with lighting
    };
}
function getTileMesh(arrayBuffer, options) {
    if (!arrayBuffer) {
        return null;
    }
    const { bounds } = options;
    // Don't parse edge indices or format extensions
    const { header, vertexData, triangleIndices: originalTriangleIndices, westIndices, northIndices, eastIndices, southIndices } = (0, decode_quantized_mesh_1.default)(arrayBuffer, decode_quantized_mesh_1.DECODING_STEPS.triangleIndices);
    let triangleIndices = originalTriangleIndices;
    let attributes = getMeshAttributes(vertexData, header, bounds);
    // Compute bounding box before adding skirt so that z values are not skewed
    // TODO: Find bounding box from header, instead of doing extra pass over
    // vertices.
    const boundingBox = (0, schema_1.getMeshBoundingBox)(attributes);
    if (options.skirtHeight) {
        const { attributes: newAttributes, triangles: newTriangles } = (0, skirt_1.addSkirt)(attributes, triangleIndices, options.skirtHeight, {
            westIndices,
            northIndices,
            eastIndices,
            southIndices
        });
        attributes = newAttributes;
        triangleIndices = newTriangles;
    }
    return {
        // Data return by this loader implementation
        loaderData: {
            header: {}
        },
        header: {
            // @ts-ignore
            vertexCount: triangleIndices.length,
            boundingBox
        },
        mode: 4,
        indices: { value: triangleIndices, size: 1 },
        attributes
    };
}
function loadQuantizedMesh(arrayBuffer, options) {
    return getTileMesh(arrayBuffer, options['quantized-mesh']);
}
exports.default = loadQuantizedMesh;
