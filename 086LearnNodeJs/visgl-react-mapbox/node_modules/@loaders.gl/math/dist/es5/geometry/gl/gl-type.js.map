{"version":3,"sources":["../../../../src/geometry/gl/gl-type.ts"],"names":["GL_TYPE_TO_ARRAY_TYPE","GL","DOUBLE","Float64Array","FLOAT","Float32Array","UNSIGNED_SHORT","Uint16Array","UNSIGNED_INT","Uint32Array","UNSIGNED_BYTE","Uint8Array","BYTE","Int8Array","SHORT","Int16Array","INT","Int32Array","NAME_TO_GL_TYPE","ERR_TYPE_CONVERSION","GLType","arrayOrType","ArrayBuffer","isView","constructor","glType","ArrayType","Error","name","UNSIGNED_SHORT_5_6_5","UNSIGNED_SHORT_4_4_4_4","UNSIGNED_SHORT_5_5_5_1","getArrayType","BYTES_PER_ELEMENT","Boolean","buffer","byteOffset","length","undefined","byteLength","getByteSize"],"mappings":";;;;;;;;;;;;;;;AACA;;;;AAEA,IAAMA,qBAAqB,qFACxBC,mBAAGC,MADqB,EACZC,YADY,wDAExBF,mBAAGG,KAFqB,EAEbC,YAFa,wDAGxBJ,mBAAGK,cAHqB,EAGJC,WAHI,wDAIxBN,mBAAGO,YAJqB,EAINC,WAJM,wDAKxBR,mBAAGS,aALqB,EAKLC,UALK,wDAMxBV,mBAAGW,IANqB,EAMdC,SANc,wDAOxBZ,mBAAGa,KAPqB,EAObC,UAPa,wDAQxBd,mBAAGe,GARqB,EAQfC,UARe,yBAA3B;AAaA,IAAMC,eAA0B,GAAG;AACjChB,EAAAA,MAAM,EAAED,mBAAGC,MADsB;AAEjCE,EAAAA,KAAK,EAAEH,mBAAGG,KAFuB;AAGjCE,EAAAA,cAAc,EAAEL,mBAAGK,cAHc;AAIjCE,EAAAA,YAAY,EAAEP,mBAAGO,YAJgB;AAKjCE,EAAAA,aAAa,EAAET,mBAAGS,aALe;AAMjCE,EAAAA,IAAI,EAAEX,mBAAGW,IANwB;AAOjCE,EAAAA,KAAK,EAAEb,mBAAGa,KAPuB;AAQjCE,EAAAA,GAAG,EAAEf,mBAAGe;AARyB,CAAnC;AAUA,IAAMG,mBAAmB,GAAG,2BAA5B;;IAGqBC,M;;;;;;;WAQnB,wBAAsBC,WAAtB,EAAkE;AAEhEA,MAAAA,WAAW,GAAGC,WAAW,CAACC,MAAZ,CAAmBF,WAAnB,IAAkCA,WAAW,CAACG,WAA9C,GAA4DH,WAA1E;;AACA,WAAK,IAAMI,MAAX,IAAqBzB,qBAArB,EAA4C;AAC1C,YAAM0B,SAAS,GAAG1B,qBAAqB,CAACyB,MAAD,CAAvC;;AACA,YAAIC,SAAS,KAAKL,WAAlB,EAA+B;AAC7B,iBAAOI,MAAP;AACD;AACF;;AACD,YAAM,IAAIE,KAAJ,CAAUR,mBAAV,CAAN;AACD;;;WAMD,kBAAgBS,IAAhB,EAAsC;AACpC,UAAMH,MAAM,GAAGP,eAAe,CAACU,IAAD,CAA9B;;AACA,UAAI,CAACH,MAAL,EAAa;AACX,cAAM,IAAIE,KAAJ,CAAUR,mBAAV,CAAN;AACD;;AACD,aAAOM,MAAP;AACD;;;WAGD,sBAAoBA,MAApB,EAAoC;AAClC,cAAQA,MAAR;AAGE,aAAKxB,mBAAG4B,oBAAR;AAEA,aAAK5B,mBAAG6B,sBAAR;AAEA,aAAK7B,mBAAG8B,sBAAR;AAEE,iBAAOxB,WAAP;;AACF;AACE,cAAMmB,SAAS,GAAG1B,qBAAqB,CAACyB,MAAD,CAAvC;;AACA,cAAI,CAACC,SAAL,EAAgB;AACd,kBAAM,IAAIC,KAAJ,CAAUR,mBAAV,CAAN;AACD;;AACD,iBAAOO,SAAP;AAfJ;AAiBD;;;WAMD,qBAAmBD,MAAnB,EAA2C;AACzC,UAAMC,SAAS,GAAGN,MAAM,CAACY,YAAP,CAAoBP,MAApB,CAAlB;AACA,aAAOC,SAAS,CAACO,iBAAjB;AACD;;;WAMD,kBAAgBR,MAAhB,EAAyC;AACvC,aAAOS,OAAO,CAACd,MAAM,CAACY,YAAP,CAAoBP,MAApB,CAAD,CAAd;AACD;;;WASD,0BACEA,MADF,EAEEU,MAFF,EAKc;AAAA,UAFZC,UAEY,uEAFS,CAET;AAAA,UADZC,MACY;;AACZ,UAAIA,MAAM,KAAKC,SAAf,EAA0B;AACxBD,QAAAA,MAAM,GAAG,CAACF,MAAM,CAACI,UAAP,GAAoBH,UAArB,IAAmChB,MAAM,CAACoB,WAAP,CAAmBf,MAAnB,CAA5C;AACD;;AACD,UAAMC,SAAS,GAAGN,MAAM,CAACY,YAAP,CAAoBP,MAApB,CAAlB;AACA,aAAO,IAAIC,SAAJ,CAAcS,MAAd,EAAsBC,UAAtB,EAAkCC,MAAlC,CAAP;AACD","sourcesContent":["import type {TypedArray} from '@math.gl/core';\nimport {GL_TYPE as GL} from '../constants';\n\nconst GL_TYPE_TO_ARRAY_TYPE = {\n  [GL.DOUBLE]: Float64Array,\n  [GL.FLOAT]: Float32Array,\n  [GL.UNSIGNED_SHORT]: Uint16Array,\n  [GL.UNSIGNED_INT]: Uint32Array,\n  [GL.UNSIGNED_BYTE]: Uint8Array,\n  [GL.BYTE]: Int8Array,\n  [GL.SHORT]: Int16Array,\n  [GL.INT]: Int32Array\n};\ntype GlTypeMap = {\n  [index: string]: number;\n};\nconst NAME_TO_GL_TYPE: GlTypeMap = {\n  DOUBLE: GL.DOUBLE,\n  FLOAT: GL.FLOAT,\n  UNSIGNED_SHORT: GL.UNSIGNED_SHORT,\n  UNSIGNED_INT: GL.UNSIGNED_INT,\n  UNSIGNED_BYTE: GL.UNSIGNED_BYTE,\n  BYTE: GL.BYTE,\n  SHORT: GL.SHORT,\n  INT: GL.INT\n};\nconst ERR_TYPE_CONVERSION = 'Failed to convert GL type';\n// Converts TYPED ARRAYS to corresponding GL constant\n// Used to auto deduce gl parameter types\nexport default class GLType {\n  // Signature: fromTypedArray(new Uint8Array())\n  // Signature: fromTypedArray(Uint8Array)\n  /**\n   * Returns the size, in bytes, of the corresponding datatype\n   * @param arrayOrType\n   * @returns glType a a string\n   */\n  static fromTypedArray(arrayOrType: TypedArray | Function): string {\n    // If typed array, look up constructor\n    arrayOrType = ArrayBuffer.isView(arrayOrType) ? arrayOrType.constructor : arrayOrType;\n    for (const glType in GL_TYPE_TO_ARRAY_TYPE) {\n      const ArrayType = GL_TYPE_TO_ARRAY_TYPE[glType];\n      if (ArrayType === arrayOrType) {\n        return glType;\n      }\n    }\n    throw new Error(ERR_TYPE_CONVERSION);\n  }\n  /**\n   * Extracts name for glType from array NAME_TO_GL_TYPE\n   * @param name\n   * @returns glType as a number\n   */\n  static fromName(name: string): number {\n    const glType = NAME_TO_GL_TYPE[name];\n    if (!glType) {\n      throw new Error(ERR_TYPE_CONVERSION);\n    }\n    return glType;\n  }\n  // Converts GL constant to corresponding typed array type\n  // eslint-disable-next-line complexity\n  static getArrayType(glType: number) {\n    switch (glType) {\n      /*eslint-disable*/\n      // @ts-ignore\n      case GL.UNSIGNED_SHORT_5_6_5:\n      // @ts-ignore\n      case GL.UNSIGNED_SHORT_4_4_4_4:\n      // @ts-ignore\n      case GL.UNSIGNED_SHORT_5_5_5_1:\n        /* eslint-enable*/\n        return Uint16Array;\n      default:\n        const ArrayType = GL_TYPE_TO_ARRAY_TYPE[glType];\n        if (!ArrayType) {\n          throw new Error(ERR_TYPE_CONVERSION);\n        }\n        return ArrayType;\n    }\n  }\n  /**\n   * Returns the size in bytes of one element of the provided WebGL type\n   * @param glType\n   * @returns size of glType\n   */\n  static getByteSize(glType: number): number {\n    const ArrayType = GLType.getArrayType(glType);\n    return ArrayType.BYTES_PER_ELEMENT;\n  }\n  /**\n   * Returns `true` if `glType` is a valid WebGL data type.\n   * @param glType\n   * @returns boolean\n   */\n  static validate(glType: number): boolean {\n    return Boolean(GLType.getArrayType(glType));\n  }\n  /**\n   * Creates a typed view of an array of bytes\n   * @param glType The type of typed array (ArrayBuffer view) to create\n   * @param buffer The buffer storage to use for the view.\n   * @param byteOffset The offset, in bytes, to the first element in the view\n   * @param length The number of elements in the view. Defaults to buffer length\n   * @returns A typed array view of the buffer\n   */\n  static createTypedArray(\n    glType: number,\n    buffer: TypedArray,\n    byteOffset: number = 0,\n    length?: number\n  ): TypedArray {\n    if (length === undefined) {\n      length = (buffer.byteLength - byteOffset) / GLType.getByteSize(glType);\n    }\n    const ArrayType = GLType.getArrayType(glType);\n    return new ArrayType(buffer, byteOffset, length);\n  }\n}\n"],"file":"gl-type.js"}