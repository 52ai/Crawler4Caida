import type { GLTFPostprocessed } from '@loaders.gl/gltf';
import { Matrix4, Vector3 } from '@math.gl/core';
export declare type BatchTableJson = {
    [key: string]: any[];
};
export declare type B3DMContent = {
    batchTableJson?: BatchTableJson;
    byteLength: number;
    byteOffset: number;
    cartesianModelMatrix: Matrix4;
    cartesianOrigin: Vector3;
    cartographicModelMatrix: Matrix4;
    cartographicOrigin: Vector3;
    featureIds?: number[] | null;
    featureTableBinary?: Uint8Array;
    featureTableJson?: BatchTableJson;
    gltf?: GLTFPostprocessed;
    gltfUpAxis: string;
    header: GLTFHeader;
    magic: number;
    modelMatrix: Matrix4;
    rotateYtoZ: boolean;
    rtcCenter: [number, number, number];
    type: string;
    version: number;
};
export declare type GLTFHeader = {
    batchLength?: number;
    batchTableBinaryByteLength: number;
    batchTableJsonByteLength: number;
    featureTableBinaryByteLength: number;
    featureTableJsonByteLength: number;
};
export declare type Node3D = {
    boundingVolume: BoundingVolume;
    children: any;
    geometricError: number;
    content?: {
        uri: string;
        boundingVolume: BoundingVolume;
    };
};
export declare type BoundingVolume = {
    box?: number[];
    sphere?: number[];
    region?: number[];
};
/**
 * 3DTILES_implicit_tiling types
 * Spec - https://github.com/CesiumGS/3d-tiles/tree/main/extensions/3DTILES_implicit_tiling#subtree-file-format
 */
export declare type Subtree = {
    buffers: Buffer[];
    bufferViews: BufferView[];
    tileAvailability: Availability;
    contentAvailability: Availability;
    childSubtreeAvailability: Availability;
};
export declare type Availability = {
    constant?: 0 | 1;
    bufferView?: number;
    explicitBitstream?: ExplicitBitstream;
};
export declare type ExplicitBitstream = Uint8Array;
/**
 * Spec - https://github.com/CesiumGS/3d-tiles/tree/main/extensions/3DTILES_implicit_tiling#subdivision-scheme
 */
export declare type SubdivisionScheme = 'QUADTREE' | 'OCTREE';
declare type Buffer = {
    name: string;
    uri?: string;
    byteLength: number;
};
declare type BufferView = {
    buffer: number;
    byteOffset: number;
    byteLength: number;
};
export {};
//# sourceMappingURL=types.d.ts.map