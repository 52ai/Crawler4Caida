{"version":3,"sources":["../../../../../src/lib/parsers/helpers/parse-3d-tile-gltf-view.ts"],"names":["GLTF_FORMAT","URI","EMBEDDED","parse3DTileGLTFViewSync","tile","arrayBuffer","byteOffset","options","rotateYtoZ","gltfByteLength","byteLength","Error","gltfUpAxis","assetGltfUpAxis","gltfArrayBuffer","gltfByteOffset","console","warn","type","extractGLTF","gltfFormat","context","tile3DOptions","extractGLTFBufferOrURL","loadGLTF","parse","fetch","gltfUrl","GLTFLoader","gltf","gltfUrlBytes","Uint8Array","textDecoder","TextDecoder","decode","replace"],"mappings":";;;;;;;;;;;;;;;AASA;;AACA;;AAEO,IAAMA,WAAW,GAAG;AACzBC,EAAAA,GAAG,EAAE,CADoB;AAEzBC,EAAAA,QAAQ,EAAE;AAFe,CAApB;;;AAKA,SAASC,uBAAT,CAAiCC,IAAjC,EAAuCC,WAAvC,EAAoDC,UAApD,EAAgEC,OAAhE,EAAyE;AAI9EH,EAAAA,IAAI,CAACI,UAAL,GAAkB,IAAlB;AAGA,MAAMC,cAAc,GAAGL,IAAI,CAACE,UAAL,GAAkBF,IAAI,CAACM,UAAvB,GAAoCJ,UAA3D;;AACA,MAAIG,cAAc,KAAK,CAAvB,EAA0B;AACxB,UAAM,IAAIE,KAAJ,CAAU,0CAAV,CAAN;AACD;;AAGDP,EAAAA,IAAI,CAACQ,UAAL,GACEL,OAAO,CAAC,UAAD,CAAP,IAAuBA,OAAO,CAAC,UAAD,CAAP,CAAoBM,eAA3C,GACIN,OAAO,CAAC,UAAD,CAAP,CAAoBM,eADxB,GAEI,GAHN;AAOAT,EAAAA,IAAI,CAACU,eAAL,GAAuB,mCAAiBT,WAAjB,EAA8BC,UAA9B,EAA0CG,cAA1C,CAAvB;AACAL,EAAAA,IAAI,CAACW,cAAL,GAAsB,CAAtB;AACAX,EAAAA,IAAI,CAACK,cAAL,GAAsBA,cAAtB;;AAEA,MAAIH,UAAU,GAAG,CAAb,KAAmB,CAAvB,EAA0B,CAIzB,CAJD,MAIO;AAGLU,IAAAA,OAAO,CAACC,IAAR,WAAgBb,IAAI,CAACc,IAArB;AACD;;AAGD,SAAOd,IAAI,CAACE,UAAL,GAAkBF,IAAI,CAACM,UAA9B;AACD;;SAEqBS,W;;;;;2EAAf,iBAA2Bf,IAA3B,EAAiCgB,UAAjC,EAA6Cb,OAA7C,EAAsDc,OAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AACCC,YAAAA,aADD,GACiBf,OAAO,CAAC,UAAD,CAAP,IAAuB,EADxC;AAGLgB,YAAAA,sBAAsB,CAACnB,IAAD,EAAOgB,UAAP,EAAmBb,OAAnB,CAAtB;;AAHK,iBAKDe,aAAa,CAACE,QALb;AAAA;AAAA;AAAA;;AAMIC,YAAAA,KANJ,GAMoBJ,OANpB,CAMII,KANJ,EAMWC,KANX,GAMoBL,OANpB,CAMWK,KANX;;AAAA,iBAOCtB,IAAI,CAACuB,OAPN;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAQ4BD,KAAK,CAACtB,IAAI,CAACuB,OAAN,EAAepB,OAAf,CARjC;;AAAA;AAQDH,YAAAA,IAAI,CAACU,eARJ;AASDV,YAAAA,IAAI,CAACW,cAAL,GAAsB,CAAtB;;AATC;AAAA,iBAWCX,IAAI,CAACU,eAXN;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAaiBW,KAAK,CAACrB,IAAI,CAACU,eAAN,EAAuBc,gBAAvB,EAAmCrB,OAAnC,EAA4Cc,OAA5C,CAbtB;;AAAA;AAaDjB,YAAAA,IAAI,CAACyB,IAbJ;AAcD,mBAAOzB,IAAI,CAACU,eAAZ;AACA,mBAAOV,IAAI,CAACW,cAAZ;AACA,mBAAOX,IAAI,CAACK,cAAZ;;AAhBC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAqBP,SAASc,sBAAT,CAAgCnB,IAAhC,EAAsCgB,UAAtC,EAAkDb,OAAlD,EAA2D;AACzD,UAAQa,UAAR;AACE,SAAKpB,WAAW,CAACC,GAAjB;AAGE,UAAM6B,YAAY,GAAG,IAAIC,UAAJ,CAAe3B,IAAI,CAACU,eAApB,EAAqCV,IAAI,CAACW,cAA1C,CAArB;AACA,UAAMiB,WAAW,GAAG,IAAIC,WAAJ,EAApB;AACA,UAAMN,OAAO,GAAGK,WAAW,CAACE,MAAZ,CAAmBJ,YAAnB,CAAhB;AACA1B,MAAAA,IAAI,CAACuB,OAAL,GAAeA,OAAO,CAACQ,OAAR,CAAgB,UAAhB,EAA4B,EAA5B,CAAf;AACA,aAAO/B,IAAI,CAACU,eAAZ;AACA,aAAOV,IAAI,CAACW,cAAZ;AACA,aAAOX,IAAI,CAACK,cAAZ;AACA;;AACF,SAAKT,WAAW,CAACE,QAAjB;AACE;;AACF;AACE,YAAM,IAAIS,KAAJ,CAAU,iCAAV,CAAN;AAfJ;AAiBD","sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\n// TODO - should we automatically parse the embedded glTF or leave it to the app?\n// - I.e. some apps might work directly on a GLB, in that case no need for us to decode...\n// - And if we decode, do we still keep the GLB in case it is needed?\n// - Do we add an option to control this?\n// - Also, should we have hard dependency on gltf module or use injection or auto-discovery for gltf parser?\n\nimport {GLTFLoader} from '@loaders.gl/gltf';\nimport {sliceArrayBuffer} from '@loaders.gl/loader-utils';\n\nexport const GLTF_FORMAT = {\n  URI: 0,\n  EMBEDDED: 1\n};\n\nexport function parse3DTileGLTFViewSync(tile, arrayBuffer, byteOffset, options) {\n  // Set flags\n  // glTF models need to be rotated from Y to Z up\n  // https://github.com/AnalyticalGraphicsInc/3d-tiles/tree/master/specification#y-up-to-z-up\n  tile.rotateYtoZ = true;\n\n  // Assume glTF consumes rest of tile\n  const gltfByteLength = tile.byteOffset + tile.byteLength - byteOffset;\n  if (gltfByteLength === 0) {\n    throw new Error('glTF byte length must be greater than 0.');\n  }\n\n  // Save gltf up axis\n  tile.gltfUpAxis =\n    options['3d-tiles'] && options['3d-tiles'].assetGltfUpAxis\n      ? options['3d-tiles'].assetGltfUpAxis\n      : 'Y';\n\n  // TODO - We can avoid copy if already 4-byte aligned...\n  // However the rest of the code may not be able to accept byteOffsets, so copy anyway\n  tile.gltfArrayBuffer = sliceArrayBuffer(arrayBuffer, byteOffset, gltfByteLength);\n  tile.gltfByteOffset = 0;\n  tile.gltfByteLength = gltfByteLength;\n\n  if (byteOffset % 4 === 0) {\n    // tile.gltfArrayBuffer = arrayBuffer;\n    // tile.gltfByteOffset = byteOffset;\n    // tile.gltfByteLength = gltfByteLength;\n  } else {\n    // Create a copy of the glb so that it is 4-byte aligned\n    // eslint-disable-next-line\n    console.warn(`${tile.type}: embedded glb is not aligned to a 4-byte boundary.`);\n  }\n\n  // Entire tile is consumed\n  return tile.byteOffset + tile.byteLength;\n}\n\nexport async function extractGLTF(tile, gltfFormat, options, context) {\n  const tile3DOptions = options['3d-tiles'] || {};\n\n  extractGLTFBufferOrURL(tile, gltfFormat, options);\n\n  if (tile3DOptions.loadGLTF) {\n    const {parse, fetch} = context;\n    if (tile.gltfUrl) {\n      tile.gltfArrayBuffer = await fetch(tile.gltfUrl, options);\n      tile.gltfByteOffset = 0;\n    }\n    if (tile.gltfArrayBuffer) {\n      // TODO - Should handle byteOffset... However, not used now...\n      tile.gltf = await parse(tile.gltfArrayBuffer, GLTFLoader, options, context);\n      delete tile.gltfArrayBuffer;\n      delete tile.gltfByteOffset;\n      delete tile.gltfByteLength;\n    }\n  }\n}\n\nfunction extractGLTFBufferOrURL(tile, gltfFormat, options) {\n  switch (gltfFormat) {\n    case GLTF_FORMAT.URI:\n      // We need to remove padding from the end of the model URL in case this tile was part of a composite tile.\n      // This removes all white space and null characters from the end of the string.\n      const gltfUrlBytes = new Uint8Array(tile.gltfArrayBuffer, tile.gltfByteOffset);\n      const textDecoder = new TextDecoder();\n      const gltfUrl = textDecoder.decode(gltfUrlBytes);\n      tile.gltfUrl = gltfUrl.replace(/[\\s\\0]+$/, '');\n      delete tile.gltfArrayBuffer;\n      delete tile.gltfByteOffset;\n      delete tile.gltfByteLength;\n      break;\n    case GLTF_FORMAT.EMBEDDED:\n      break;\n    default:\n      throw new Error('b3dm: Illegal glTF format field');\n  }\n}\n"],"file":"parse-3d-tile-gltf-view.js"}