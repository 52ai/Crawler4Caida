{"version":3,"sources":["../../../../src/lib/classes/tile-3d-feature-table.ts"],"names":["Tile3DFeatureTable","featureTableJson","featureTableBinary","json","buffer","extensionName","extensions","propertyName","Boolean","componentType","GL","UNSIGNED_INT","componentLength","jsonValue","Number","isFinite","byteOffset","_getTypedArrayFromBinary","GLType","fromName","featuresLength","_getTypedArrayFromArray","featureId","result","typedArray","getPropertyArray","i","count","cachedTypedArrays","_cachedTypedArrays","createTypedArray","array"],"mappings":";;;;;;;;;;;;;;;AAGA;;IAIqBA,kB;AAMnB,8BAAYC,gBAAZ,EAA8BC,kBAA9B,EAAkD;AAAA;AAAA;AAAA;AAAA,0DAHjC,CAGiC;AAAA,8DAF7B,EAE6B;AAChD,SAAKC,IAAL,GAAYF,gBAAZ;AACA,SAAKG,MAAL,GAAcF,kBAAd;AACD;;;;WAED,sBAAaG,aAAb,EAA4B;AAC1B,aAAO,KAAKF,IAAL,CAAUG,UAAV,IAAwB,KAAKH,IAAL,CAAUG,UAAV,CAAqBD,aAArB,CAA/B;AACD;;;WAED,qBAAYE,YAAZ,EAA0B;AACxB,aAAOC,OAAO,CAAC,KAAKL,IAAL,CAAUI,YAAV,CAAD,CAAd;AACD;;;WAED,2BAAkBA,YAAlB,EAAsF;AAAA,UAAtDE,aAAsD,uEAAtCC,SAAGC,YAAmC;AAAA,UAArBC,eAAqB,uEAAH,CAAG;AACpF,UAAMC,SAAS,GAAG,KAAKV,IAAL,CAAUI,YAAV,CAAlB;;AAEA,UAAIM,SAAS,IAAIC,MAAM,CAACC,QAAP,CAAgBF,SAAS,CAACG,UAA1B,CAAjB,EAAwD;AACtD,eAAO,KAAKC,wBAAL,CACLV,YADK,EAELE,aAFK,EAGLG,eAHK,EAIL,CAJK,EAKLC,SAAS,CAACG,UALL,CAAP;AAOD;;AAED,aAAOH,SAAP;AACD;;;WAED,0BAAiBN,YAAjB,EAA+BE,aAA/B,EAA8CG,eAA9C,EAA+D;AAC7D,UAAMC,SAAS,GAAG,KAAKV,IAAL,CAAUI,YAAV,CAAlB;;AAEA,UAAIM,SAAS,IAAIC,MAAM,CAACC,QAAP,CAAgBF,SAAS,CAACG,UAA1B,CAAjB,EAAwD;AACtD,YAAI,mBAAmBH,SAAvB,EAAkC;AAChCJ,UAAAA,aAAa,GAAGS,aAAOC,QAAP,CAAgBN,SAAS,CAACJ,aAA1B,CAAhB;AACD;;AACD,eAAO,KAAKQ,wBAAL,CACLV,YADK,EAELE,aAFK,EAGLG,eAHK,EAIL,KAAKQ,cAJA,EAKLP,SAAS,CAACG,UALL,CAAP;AAOD;;AAED,aAAO,KAAKK,uBAAL,CAA6Bd,YAA7B,EAA2CE,aAA3C,EAA0DI,SAA1D,CAAP;AACD;;;WAED,qBAAYN,YAAZ,EAA0BE,aAA1B,EAAyCG,eAAzC,EAA0DU,SAA1D,EAAqEC,MAArE,EAA6E;AAC3E,UAAMV,SAAS,GAAG,KAAKV,IAAL,CAAUI,YAAV,CAAlB;;AACA,UAAI,CAACM,SAAL,EAAgB;AACd,eAAOA,SAAP;AACD;;AAED,UAAMW,UAAU,GAAG,KAAKC,gBAAL,CAAsBlB,YAAtB,EAAoCE,aAApC,EAAmDG,eAAnD,CAAnB;;AAEA,UAAIA,eAAe,KAAK,CAAxB,EAA2B;AACzB,eAAOY,UAAU,CAACF,SAAD,CAAjB;AACD;;AAED,WAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGd,eAApB,EAAqC,EAAEc,CAAvC,EAA0C;AACxCH,QAAAA,MAAM,CAACG,CAAD,CAAN,GAAYF,UAAU,CAACZ,eAAe,GAAGU,SAAlB,GAA8BI,CAA/B,CAAtB;AACD;;AAED,aAAOH,MAAP;AACD;;;WAID,kCAAyBhB,YAAzB,EAAuCE,aAAvC,EAAsDG,eAAtD,EAAuEe,KAAvE,EAA8EX,UAA9E,EAA0F;AACxF,UAAMY,iBAAiB,GAAG,KAAKC,kBAA/B;AACA,UAAIL,UAAU,GAAGI,iBAAiB,CAACrB,YAAD,CAAlC;;AACA,UAAI,CAACiB,UAAL,EAAiB;AACfA,QAAAA,UAAU,GAAGN,aAAOY,gBAAP,CACXrB,aADW,EAEX,KAAKL,MAAL,CAAYA,MAFD,EAGX,KAAKA,MAAL,CAAYY,UAAZ,GAAyBA,UAHd,EAIXW,KAAK,GAAGf,eAJG,CAAb;AAMAgB,QAAAA,iBAAiB,CAACrB,YAAD,CAAjB,GAAkCiB,UAAlC;AACD;;AACD,aAAOA,UAAP;AACD;;;WAED,iCAAwBjB,YAAxB,EAAsCE,aAAtC,EAAqDsB,KAArD,EAA4D;AAC1D,UAAMH,iBAAiB,GAAG,KAAKC,kBAA/B;AACA,UAAIL,UAAU,GAAGI,iBAAiB,CAACrB,YAAD,CAAlC;;AACA,UAAI,CAACiB,UAAL,EAAiB;AACfA,QAAAA,UAAU,GAAGN,aAAOY,gBAAP,CAAwBrB,aAAxB,EAAuCsB,KAAvC,CAAb;AACAH,QAAAA,iBAAiB,CAACrB,YAAD,CAAjB,GAAkCiB,UAAlC;AACD;;AACD,aAAOA,UAAP;AACD","sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\nimport {GL, GLType} from '@loaders.gl/math';\n\n// Reference:\n// https://github.com/AnalyticalGraphicsInc/cesium/blob/1de96d087f0b17575eb1a3f736407b348c765d59/Source/Scene/Cesium3DTileFeatureTable.js\nexport default class Tile3DFeatureTable {\n  json;\n  buffer;\n  featuresLength = 0;\n  _cachedTypedArrays = {};\n\n  constructor(featureTableJson, featureTableBinary) {\n    this.json = featureTableJson;\n    this.buffer = featureTableBinary;\n  }\n\n  getExtension(extensionName) {\n    return this.json.extensions && this.json.extensions[extensionName];\n  }\n\n  hasProperty(propertyName) {\n    return Boolean(this.json[propertyName]);\n  }\n\n  getGlobalProperty(propertyName, componentType = GL.UNSIGNED_INT, componentLength = 1) {\n    const jsonValue = this.json[propertyName];\n\n    if (jsonValue && Number.isFinite(jsonValue.byteOffset)) {\n      return this._getTypedArrayFromBinary(\n        propertyName,\n        componentType,\n        componentLength,\n        1,\n        jsonValue.byteOffset\n      );\n    }\n\n    return jsonValue;\n  }\n\n  getPropertyArray(propertyName, componentType, componentLength) {\n    const jsonValue = this.json[propertyName];\n\n    if (jsonValue && Number.isFinite(jsonValue.byteOffset)) {\n      if ('componentType' in jsonValue) {\n        componentType = GLType.fromName(jsonValue.componentType);\n      }\n      return this._getTypedArrayFromBinary(\n        propertyName,\n        componentType,\n        componentLength,\n        this.featuresLength,\n        jsonValue.byteOffset\n      );\n    }\n\n    return this._getTypedArrayFromArray(propertyName, componentType, jsonValue);\n  }\n\n  getProperty(propertyName, componentType, componentLength, featureId, result) {\n    const jsonValue = this.json[propertyName];\n    if (!jsonValue) {\n      return jsonValue;\n    }\n\n    const typedArray = this.getPropertyArray(propertyName, componentType, componentLength);\n\n    if (componentLength === 1) {\n      return typedArray[featureId];\n    }\n\n    for (let i = 0; i < componentLength; ++i) {\n      result[i] = typedArray[componentLength * featureId + i];\n    }\n\n    return result;\n  }\n\n  // HELPERS\n\n  _getTypedArrayFromBinary(propertyName, componentType, componentLength, count, byteOffset) {\n    const cachedTypedArrays = this._cachedTypedArrays;\n    let typedArray = cachedTypedArrays[propertyName];\n    if (!typedArray) {\n      typedArray = GLType.createTypedArray(\n        componentType,\n        this.buffer.buffer,\n        this.buffer.byteOffset + byteOffset,\n        count * componentLength\n      );\n      cachedTypedArrays[propertyName] = typedArray;\n    }\n    return typedArray;\n  }\n\n  _getTypedArrayFromArray(propertyName, componentType, array) {\n    const cachedTypedArrays = this._cachedTypedArrays;\n    let typedArray = cachedTypedArrays[propertyName];\n    if (!typedArray) {\n      typedArray = GLType.createTypedArray(componentType, array);\n      cachedTypedArrays[propertyName] = typedArray;\n    }\n    return typedArray;\n  }\n}\n"],"file":"tile-3d-feature-table.js"}