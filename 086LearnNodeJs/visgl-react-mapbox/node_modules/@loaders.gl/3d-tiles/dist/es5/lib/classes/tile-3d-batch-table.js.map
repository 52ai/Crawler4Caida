{"version":3,"sources":["../../../../src/lib/classes/tile-3d-batch-table.ts"],"names":["defined","x","undefined","clone","y","IGNORED_PROPERTY_FIELDS","HIERARCHY","extensions","extras","Tile3DBatchTableParser","json","binary","featureCount","options","_extensions","_properties","propertyName","_binaryProperties","_initializeBinaryProperties","_hierarchy","extensionName","batchId","className","_checkBatchId","result","hierarchy","instanceIndex","classId","classIds","instanceClass","classes","name","getExactClassName","_hasPropertyInHierarchy","results","length","propertyNames","Object","keys","push","_getPropertyNamesInHierarchy","binaryProperty","_getBinaryProperty","propertyValues","hierarchyProperty","_getHierarchyProperty","value","_setBinaryProperty","_setHierarchyProperty","Array","valid","Error","index","unpack","typedArray","pack","binaryProperties","property","_initializeBinaryProperty","tile3DAccessor","type","accessor","buffer","byteOffset","values","componentCount","size","unpacker","packer","instances","hasOwnProperty","indexOf","indexInClass","classIndexes","batchTable"],"mappings":"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","sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\nimport {assert} from '@loaders.gl/loader-utils';\n\nimport {createTypedArrayFromAccessor} from './helpers/tile-3d-accessor-utils';\nimport {initializeHierarchy, traverseHierarchy} from './tile-3d-batch-table-hierarchy';\n\nfunction defined(x) {\n  return x !== undefined && x !== null;\n}\n\nconst clone = (x, y) => x;\n\n// These top level fields in the batch table json are not properties\nconst IGNORED_PROPERTY_FIELDS = {\n  HIERARCHY: true, // Deprecated HIERARCHY property\n  extensions: true,\n  extras: true\n};\n\n// The size of this array equals the maximum instance count among all loaded tiles, which has the potential to be large.\nexport default class Tile3DBatchTableParser {\n  json;\n  binary;\n  featureCount;\n  _extensions;\n  // Copy all top-level property fields from the json object, ignoring special fields\n  _properties;\n  _binaryProperties;\n  // TODO: hierarchy support is only partially implemented and not tested\n  _hierarchy;\n\n  constructor(json, binary, featureCount, options = {}) {\n    assert(featureCount >= 0);\n    this.json = json || {};\n    this.binary = binary;\n    this.featureCount = featureCount;\n\n    this._extensions = this.json?.extensions || {};\n\n    // Copy all top-level property fields from the json object, ignoring special fields\n    this._properties = {};\n    for (const propertyName in this.json) {\n      if (!IGNORED_PROPERTY_FIELDS[propertyName]) {\n        this._properties[propertyName] = this.json[propertyName];\n      }\n    }\n\n    this._binaryProperties = this._initializeBinaryProperties();\n\n    // TODO: hierarchy support is only partially implemented and not tested\n    if (options['3DTILES_batch_table_hierarchy']) {\n      this._hierarchy = initializeHierarchy(this, this.json, this.binary);\n    }\n  }\n\n  getExtension(extensionName) {\n    return this.json && this.json.extensions && this.json.extensions[extensionName];\n  }\n\n  memorySizeInBytes(): number {\n    return 0;\n  }\n\n  isClass(batchId, className: string): boolean {\n    this._checkBatchId(batchId);\n    assert(typeof className === 'string', className);\n\n    // extension: 3DTILES_batch_table_hierarchy\n    if (this._hierarchy) {\n      // PERFORMANCE_IDEA : cache results in the ancestor classes\n      //   to speed up this check if this area becomes a hotspot\n      // PERFORMANCE_IDEA : treat class names as integers for faster comparisons\n      const result = traverseHierarchy(this._hierarchy, batchId, (hierarchy, instanceIndex) => {\n        const classId = hierarchy.classIds[instanceIndex];\n        const instanceClass = hierarchy.classes[classId];\n        return instanceClass.name === className;\n      });\n      return defined(result);\n    }\n\n    return false;\n  }\n\n  isExactClass(batchId, className) {\n    assert(typeof className === 'string', className);\n\n    return this.getExactClassName(batchId) === className;\n  }\n\n  getExactClassName(batchId) {\n    this._checkBatchId(batchId);\n\n    // extension: 3DTILES_batch_table_hierarchy\n    if (this._hierarchy) {\n      const classId = this._hierarchy.classIds[batchId];\n      const instanceClass = this._hierarchy.classes[classId];\n      return instanceClass.name;\n    }\n\n    return undefined;\n  }\n\n  hasProperty(batchId, name) {\n    this._checkBatchId(batchId);\n    assert(typeof name === 'string', name);\n\n    return defined(this._properties[name]) || this._hasPropertyInHierarchy(batchId, name);\n  }\n\n  getPropertyNames(batchId, results) {\n    this._checkBatchId(batchId);\n\n    results = defined(results) ? results : [];\n    results.length = 0;\n\n    const propertyNames = Object.keys(this._properties);\n    results.push(...propertyNames);\n\n    if (this._hierarchy) {\n      this._getPropertyNamesInHierarchy(batchId, results);\n    }\n\n    return results;\n  }\n\n  getProperty(batchId, name) {\n    this._checkBatchId(batchId);\n    assert(typeof name === 'string', name);\n\n    if (this._binaryProperties) {\n      const binaryProperty = this._binaryProperties[name];\n      if (defined(binaryProperty)) {\n        return this._getBinaryProperty(binaryProperty, batchId);\n      }\n    }\n\n    const propertyValues = this._properties[name];\n    if (defined(propertyValues)) {\n      return clone(propertyValues[batchId], true);\n    }\n\n    // EXTENSION: 3DTILES_batch_table_hierarchy\n    if (this._hierarchy) {\n      const hierarchyProperty = this._getHierarchyProperty(batchId, name);\n      if (defined(hierarchyProperty)) {\n        return hierarchyProperty;\n      }\n    }\n\n    return undefined;\n  }\n\n  setProperty(batchId, name, value) {\n    const featureCount = this.featureCount;\n\n    this._checkBatchId(batchId);\n    assert(typeof name === 'string', name);\n\n    if (this._binaryProperties) {\n      const binaryProperty = this._binaryProperties[name];\n      if (binaryProperty) {\n        this._setBinaryProperty(binaryProperty, batchId, value);\n        return;\n      }\n    }\n\n    // EXTENSION: 3DTILES_batch_table_hierarchy\n    if (this._hierarchy) {\n      if (this._setHierarchyProperty(this, batchId, name, value)) {\n        return;\n      }\n    }\n\n    let propertyValues = this._properties[name];\n    if (!defined(propertyValues)) {\n      // Property does not exist. Create it.\n      this._properties[name] = new Array(featureCount);\n      propertyValues = this._properties[name];\n    }\n\n    propertyValues[batchId] = clone(value, true);\n  }\n\n  // PRIVATE METHODS\n\n  _checkBatchId(batchId) {\n    const valid = batchId >= 0 && batchId < this.featureCount;\n    if (!valid) {\n      throw new Error('batchId not in range [0, featureCount - 1].');\n    }\n  }\n\n  _getBinaryProperty(binaryProperty, index) {\n    return binaryProperty.unpack(binaryProperty.typedArray, index);\n  }\n\n  _setBinaryProperty(binaryProperty, index, value) {\n    binaryProperty.pack(value, binaryProperty.typedArray, index);\n  }\n\n  _initializeBinaryProperties() {\n    let binaryProperties: Record<string, any> | null = null;\n    for (const name in this._properties) {\n      const property = this._properties[name];\n      const binaryProperty = this._initializeBinaryProperty(name, property);\n      // Store any information needed to access the binary data, including the typed array,\n      // componentCount (e.g. a VEC4 would be 4), and the type used to pack and unpack (e.g. Cartesian4).\n      if (binaryProperty) {\n        binaryProperties = binaryProperties || {};\n        binaryProperties[name] = binaryProperty;\n      }\n    }\n    return binaryProperties;\n  }\n\n  _initializeBinaryProperty(name, property) {\n    if ('byteOffset' in property) {\n      // This is a binary property\n      const tile3DAccessor = property;\n\n      assert(this.binary, `Property ${name} requires a batch table binary.`);\n      assert(tile3DAccessor.type, `Property ${name} requires a type.`);\n\n      const accessor = createTypedArrayFromAccessor(\n        tile3DAccessor,\n        this.binary.buffer,\n        this.binary.byteOffset | 0,\n        this.featureCount\n      );\n\n      // Store any information needed to access the binary data, including the typed array,\n      // componentCount (e.g. a VEC4 would be 4), and the type used to pack and unpack (e.g. Cartesian4).\n      return {\n        typedArray: accessor.values,\n        componentCount: accessor.size,\n        unpack: accessor.unpacker,\n        pack: accessor.packer\n      };\n    }\n\n    return null;\n  }\n\n  //  EXTENSION SUPPORT: 3DTILES_batch_table_hierarchy\n\n  _hasPropertyInHierarchy(batchId, name) {\n    if (!this._hierarchy) {\n      return false;\n    }\n\n    const result = traverseHierarchy(this._hierarchy, batchId, (hierarchy, instanceIndex) => {\n      const classId = hierarchy.classIds[instanceIndex];\n      const instances = hierarchy.classes[classId].instances;\n      return defined(instances[name]);\n    });\n\n    return defined(result);\n  }\n\n  _getPropertyNamesInHierarchy(batchId, results) {\n    traverseHierarchy(this._hierarchy, batchId, (hierarchy, instanceIndex) => {\n      const classId = hierarchy.classIds[instanceIndex];\n      const instances = hierarchy.classes[classId].instances;\n      for (const name in instances) {\n        if (instances.hasOwnProperty(name)) {\n          if (results.indexOf(name) === -1) {\n            results.push(name);\n          }\n        }\n      }\n    });\n  }\n\n  _getHierarchyProperty(batchId, name) {\n    return traverseHierarchy(this._hierarchy, batchId, (hierarchy, instanceIndex) => {\n      const classId = hierarchy.classIds[instanceIndex];\n      const instanceClass = hierarchy.classes[classId];\n      const indexInClass = hierarchy.classIndexes[instanceIndex];\n      const propertyValues = instanceClass.instances[name];\n      if (defined(propertyValues)) {\n        if (defined(propertyValues.typedArray)) {\n          return this._getBinaryProperty(propertyValues, indexInClass);\n        }\n        return clone(propertyValues[indexInClass], true);\n      }\n      return null;\n    });\n  }\n\n  _setHierarchyProperty(batchTable, batchId, name, value) {\n    const result = traverseHierarchy(this._hierarchy, batchId, (hierarchy, instanceIndex) => {\n      const classId = hierarchy.classIds[instanceIndex];\n      const instanceClass = hierarchy.classes[classId];\n      const indexInClass = hierarchy.classIndexes[instanceIndex];\n      const propertyValues = instanceClass.instances[name];\n      if (defined(propertyValues)) {\n        assert(instanceIndex === batchId, `Inherited property \"${name}\" is read-only.`);\n        if (defined(propertyValues.typedArray)) {\n          this._setBinaryProperty(propertyValues, indexInClass, value);\n        } else {\n          propertyValues[indexInClass] = clone(value, true);\n        }\n        return true;\n      }\n      return false;\n    });\n    return defined(result);\n  }\n}\n"],"file":"tile-3d-batch-table.js"}