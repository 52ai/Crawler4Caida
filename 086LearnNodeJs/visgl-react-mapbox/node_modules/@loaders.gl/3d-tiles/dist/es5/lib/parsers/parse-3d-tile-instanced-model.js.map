{"version":3,"sources":["../../../../src/lib/parsers/parse-3d-tile-instanced-model.ts"],"names":["parseInstancedModel3DTile","tile","arrayBuffer","byteOffset","options","context","parseInstancedModel","gltfFormat","version","Error","view","DataView","getUint32","featureTableJsonByteLength","featureTable","Tile3DFeatureTable","featureTableJson","featureTableBinary","instancesLength","getGlobalProperty","featuresLength","Number","isFinite","eastNorthUp","rtcCenter","GL","FLOAT","batchTable","Tile3DBatchTable","batchTableJson","batchTableBinary","extractInstancedAttributes","collectionOptions","instances","Array","_batchTable","cull","url","undefined","gltf","basePath","incrementallyLoadTextures","forwardAxis","instancePosition","Vector3","instanceNormalRight","instanceNormalUp","instanceNormalForward","instanceRotation","Matrix3","instanceQuaternion","Quaternion","instanceScale","instanceTranslationRotationScale","instanceTransform","Matrix4","scratch1","scratch2","scratchVector1","scratchVector2","i","position","hasProperty","getProperty","UNSIGNED_SHORT","quantizedVolumeOffset","quantizedVolumeScale","MAX_UNSIGNED_SHORT","j","copy","translation","normalUp","normalRight","hasCustomOrientation","octNormalUp","octNormalRight","Ellipsoid","WGS84","eastNorthUpToFixedFrame","getRotationMatrix3","identity","cross","normalize","setColumn","fromMatrix3","rotation","set","scale","multiplyByScalar","nonUniformScale","batchId","rotationMatrix","fromQuaternion","translate","multiplyRight","modelMatrix","clone"],"mappings":"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","sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\nimport {Vector3, Matrix3, Matrix4, Quaternion} from '@math.gl/core';\nimport {Ellipsoid} from '@math.gl/geospatial';\nimport {GL} from '@loaders.gl/math'; // 'math.gl/geometry';\nimport Tile3DFeatureTable from '../classes/tile-3d-feature-table';\nimport Tile3DBatchTable from '../classes/tile-3d-batch-table';\n\nimport {parse3DTileHeaderSync} from './helpers/parse-3d-tile-header';\nimport {parse3DTileTablesHeaderSync, parse3DTileTablesSync} from './helpers/parse-3d-tile-tables';\nimport {parse3DTileGLTFViewSync, extractGLTF} from './helpers/parse-3d-tile-gltf-view';\n\nexport async function parseInstancedModel3DTile(tile, arrayBuffer, byteOffset, options, context) {\n  byteOffset = parseInstancedModel(tile, arrayBuffer, byteOffset, options, context);\n  await extractGLTF(tile, tile.gltfFormat, options, context);\n  return byteOffset;\n}\n\nfunction parseInstancedModel(tile, arrayBuffer, byteOffset, options, context) {\n  byteOffset = parse3DTileHeaderSync(tile, arrayBuffer, byteOffset);\n  if (tile.version !== 1) {\n    throw new Error(`Instanced 3D Model version ${tile.version} is not supported`);\n  }\n\n  byteOffset = parse3DTileTablesHeaderSync(tile, arrayBuffer, byteOffset);\n\n  const view = new DataView(arrayBuffer);\n\n  tile.gltfFormat = view.getUint32(byteOffset, true);\n  byteOffset += 4;\n\n  // PARSE FEATURE TABLE\n  byteOffset = parse3DTileTablesSync(tile, arrayBuffer, byteOffset, options);\n\n  byteOffset = parse3DTileGLTFViewSync(tile, arrayBuffer, byteOffset, options);\n\n  // TODO - Is the feature table sometimes optional or can check be moved into table header parser?\n  if (tile.featureTableJsonByteLength === 0) {\n    throw new Error('i3dm parser: featureTableJsonByteLength is zero.');\n  }\n\n  const featureTable = new Tile3DFeatureTable(tile.featureTableJson, tile.featureTableBinary);\n\n  const instancesLength = featureTable.getGlobalProperty('INSTANCES_LENGTH');\n  featureTable.featuresLength = instancesLength;\n\n  if (!Number.isFinite(instancesLength)) {\n    throw new Error('i3dm parser: INSTANCES_LENGTH must be defined');\n  }\n\n  tile.eastNorthUp = featureTable.getGlobalProperty('EAST_NORTH_UP');\n  tile.rtcCenter = featureTable.getGlobalProperty('RTC_CENTER', GL.FLOAT, 3);\n\n  const batchTable = new Tile3DBatchTable(\n    tile.batchTableJson,\n    tile.batchTableBinary,\n    instancesLength\n  );\n\n  extractInstancedAttributes(tile, featureTable, batchTable, instancesLength);\n\n  return byteOffset;\n}\n\n// eslint-disable-next-line max-statements, complexity\nfunction extractInstancedAttributes(tile, featureTable, batchTable, instancesLength) {\n  // Create model instance collection\n  const collectionOptions = {\n    instances: new Array(instancesLength),\n    batchTable: tile._batchTable,\n    cull: false, // Already culled by 3D Tiles\n    url: undefined,\n    // requestType: RequestType.TILES3D,\n    gltf: undefined,\n    basePath: undefined,\n    incrementallyLoadTextures: false,\n    // TODO - tileset is not available at this stage, tile is parsed independently\n    // upAxis: (tileset && tileset._gltfUpAxis) || [0, 1, 0],\n    forwardAxis: [1, 0, 0]\n  };\n\n  const instances = collectionOptions.instances;\n  const instancePosition = new Vector3();\n  const instanceNormalRight = new Vector3();\n  const instanceNormalUp = new Vector3();\n  const instanceNormalForward = new Vector3();\n  const instanceRotation = new Matrix3();\n  const instanceQuaternion = new Quaternion();\n  const instanceScale = new Vector3();\n  const instanceTranslationRotationScale = {};\n  const instanceTransform = new Matrix4();\n  const scratch1 = [];\n  const scratch2 = [];\n  const scratchVector1 = new Vector3();\n  const scratchVector2 = new Vector3();\n\n  for (let i = 0; i < instancesLength; i++) {\n    let position;\n\n    // Get the instance position\n    if (featureTable.hasProperty('POSITION')) {\n      position = featureTable.getProperty('POSITION', GL.FLOAT, 3, i, instancePosition);\n    } else if (featureTable.hasProperty('POSITION_QUANTIZED')) {\n      position = featureTable.getProperty(\n        'POSITION_QUANTIZED',\n        GL.UNSIGNED_SHORT,\n        3,\n        i,\n        instancePosition\n      );\n\n      const quantizedVolumeOffset = featureTable.getGlobalProperty(\n        'QUANTIZED_VOLUME_OFFSET',\n        GL.FLOAT,\n        3,\n        scratchVector1\n      );\n      if (!quantizedVolumeOffset) {\n        throw new Error(\n          'i3dm parser: QUANTIZED_VOLUME_OFFSET must be defined for quantized positions.'\n        );\n      }\n\n      const quantizedVolumeScale = featureTable.getGlobalProperty(\n        'QUANTIZED_VOLUME_SCALE',\n        GL.FLOAT,\n        3,\n        scratchVector2\n      );\n      if (!quantizedVolumeScale) {\n        throw new Error(\n          'i3dm parser: QUANTIZED_VOLUME_SCALE must be defined for quantized positions.'\n        );\n      }\n\n      const MAX_UNSIGNED_SHORT = 65535.0;\n      for (let j = 0; j < 3; j++) {\n        position[j] =\n          (position[j] / MAX_UNSIGNED_SHORT) * quantizedVolumeScale[j] + quantizedVolumeOffset[j];\n      }\n    }\n\n    if (!position) {\n      throw new Error('i3dm: POSITION or POSITION_QUANTIZED must be defined for each instance.');\n    }\n\n    instancePosition.copy(position);\n    // @ts-expect-error\n    instanceTranslationRotationScale.translation = instancePosition;\n\n    // Get the instance rotation\n    tile.normalUp = featureTable.getProperty('NORMAL_UP', GL.FLOAT, 3, i, scratch1);\n    tile.normalRight = featureTable.getProperty('NORMAL_RIGHT', GL.FLOAT, 3, i, scratch2);\n\n    const hasCustomOrientation = false;\n    if (tile.normalUp) {\n      if (!tile.normalRight) {\n        throw new Error('i3dm: Custom orientation requires both NORMAL_UP and NORMAL_RIGHT.');\n      }\n      // Vector3.unpack(normalUp, 0, instanceNormalUp);\n      // Vector3.unpack(normalRight, 0, instanceNormalRight);\n      tile.hasCustomOrientation = true;\n    } else {\n      tile.octNormalUp = featureTable.getProperty(\n        'NORMAL_UP_OCT32P',\n        GL.UNSIGNED_SHORT,\n        2,\n        scratch1\n      );\n      tile.octNormalRight = featureTable.getProperty(\n        'NORMAL_RIGHT_OCT32P',\n        GL.UNSIGNED_SHORT,\n        2,\n        scratch2\n      );\n\n      if (tile.octNormalUp) {\n        if (!tile.octNormalRight) {\n          throw new Error(\n            'i3dm: oct-encoded orientation requires NORMAL_UP_OCT32P and NORMAL_RIGHT_OCT32P'\n          );\n        }\n\n        throw new Error('i3dm: oct-encoded orientation not implemented');\n        /*\n        AttributeCompression.octDecodeInRange(octNormalUp[0], octNormalUp[1], 65535, instanceNormalUp);\n        AttributeCompression.octDecodeInRange(octNormalRight[0], octNormalRight[1], 65535, instanceNormalRight);\n        hasCustomOrientation = true;\n        */\n      } else if (tile.eastNorthUp) {\n        Ellipsoid.WGS84.eastNorthUpToFixedFrame(instancePosition, instanceTransform);\n        instanceTransform.getRotationMatrix3(instanceRotation);\n      } else {\n        instanceRotation.identity();\n      }\n    }\n\n    if (hasCustomOrientation) {\n      instanceNormalForward.copy(instanceNormalRight).cross(instanceNormalUp).normalize();\n      instanceRotation.setColumn(0, instanceNormalRight);\n      instanceRotation.setColumn(1, instanceNormalUp);\n      instanceRotation.setColumn(2, instanceNormalForward);\n    }\n\n    instanceQuaternion.fromMatrix3(instanceRotation);\n    // @ts-expect-error\n    instanceTranslationRotationScale.rotation = instanceQuaternion;\n\n    // Get the instance scale\n    instanceScale.set(1.0, 1.0, 1.0);\n    const scale = featureTable.getProperty('SCALE', GL.FLOAT, 1, i);\n    if (Number.isFinite(scale)) {\n      instanceScale.multiplyByScalar(scale);\n    }\n    const nonUniformScale = featureTable.getProperty('SCALE_NON_UNIFORM', GL.FLOAT, 3, i, scratch1);\n    if (nonUniformScale) {\n      instanceScale.scale(nonUniformScale);\n    }\n\n    // @ts-expect-error\n    instanceTranslationRotationScale.scale = instanceScale;\n\n    // Get the batchId\n    let batchId = featureTable.getProperty('BATCH_ID', GL.UNSIGNED_SHORT, 1, i);\n    if (batchId === undefined) {\n      // If BATCH_ID semantic is undefined, batchId is just the instance number\n      batchId = i;\n    }\n\n    // @ts-expect-error\n    const rotationMatrix = new Matrix4().fromQuaternion(instanceTranslationRotationScale.rotation);\n\n    // Create the model matrix and the instance\n    instanceTransform.identity();\n    // @ts-expect-error\n    instanceTransform.translate(instanceTranslationRotationScale.translation);\n    instanceTransform.multiplyRight(rotationMatrix);\n    // @ts-expect-error\n    instanceTransform.scale(instanceTranslationRotationScale.scale);\n\n    const modelMatrix = instanceTransform.clone();\n    instances[i] = {\n      modelMatrix,\n      batchId\n    };\n  }\n\n  tile.instances = instances;\n}\n"],"file":"parse-3d-tile-instanced-model.js"}