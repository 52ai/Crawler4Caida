{"version":3,"sources":["../../../../../src/lib/parsers/helpers/parse-3d-tile-subtree.ts"],"names":["SUBTREE_FILE_MAGIC","SUBTREE_FILE_VERSION","parse3DTilesSubtree","data","magic","Uint32Array","slice","Error","version","jsonByteLength","parseUint64Value","stringAttribute","Uint8Array","textDecoder","TextDecoder","string","decode","subtree","JSON","parse","binaryByteLength","internalBinaryBuffer","ArrayBuffer","tileAvailability","getExplicitBitstream","explicitBitstream","contentAvailability","childSubtreeAvailability","name","bufferViewIndex","bufferView","bufferViews","buffer","buffers","uri","response","arrayBuffer","byteOffset","byteLength","dataView","DataView","left","getUint32","right"],"mappings":"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","sourcesContent":["import type {Subtree, ExplicitBitstream} from '../../../types';\nimport {fetchFile} from '@loaders.gl/core';\n\nconst SUBTREE_FILE_MAGIC = 0x74627573;\nconst SUBTREE_FILE_VERSION = 1;\n\n/**\n * Parse subtree file\n * Spec - https://github.com/CesiumGS/3d-tiles/tree/main/extensions/3DTILES_implicit_tiling#subtree-file-format\n * @param data\n * @returns\n */\n// eslint-disable-next-line max-statements\nexport default async function parse3DTilesSubtree(data: ArrayBuffer): Promise<Subtree> {\n  const magic = new Uint32Array(data.slice(0, 4));\n\n  if (magic[0] !== SUBTREE_FILE_MAGIC) {\n    throw new Error('Wrong subtree file magic number');\n  }\n\n  const version = new Uint32Array(data.slice(4, 8));\n\n  if (version[0] !== SUBTREE_FILE_VERSION) {\n    throw new Error('Wrong subtree file verson, must be 1');\n  }\n\n  const jsonByteLength = parseUint64Value(data.slice(8, 16));\n  const stringAttribute = new Uint8Array(data, 24, jsonByteLength);\n\n  const textDecoder = new TextDecoder('utf8');\n  const string = textDecoder.decode(stringAttribute);\n  const subtree = JSON.parse(string);\n\n  const binaryByteLength = parseUint64Value(data.slice(16, 24));\n  let internalBinaryBuffer = new ArrayBuffer(0);\n\n  if (binaryByteLength) {\n    internalBinaryBuffer = data.slice(24 + jsonByteLength);\n  }\n\n  if ('bufferView' in subtree.tileAvailability) {\n    subtree.tileAvailability.explicitBitstream = await getExplicitBitstream(\n      subtree,\n      'tileAvailability',\n      internalBinaryBuffer\n    );\n  }\n\n  if ('bufferView' in subtree.contentAvailability) {\n    subtree.contentAvailability.explicitBitstream = await getExplicitBitstream(\n      subtree,\n      'contentAvailability',\n      internalBinaryBuffer\n    );\n  }\n\n  if ('bufferView' in subtree.childSubtreeAvailability) {\n    subtree.childSubtreeAvailability.explicitBitstream = await getExplicitBitstream(\n      subtree,\n      'childSubtreeAvailability',\n      internalBinaryBuffer\n    );\n  }\n\n  return subtree;\n}\n\n/**\n * Get explicit bitstream for subtree availability data.\n * @param subtree\n * @param name\n * @param internalBinaryBuffer\n */\nasync function getExplicitBitstream(\n  subtree: Subtree,\n  name: string,\n  internalBinaryBuffer: ArrayBuffer\n): Promise<ExplicitBitstream> {\n  const bufferViewIndex = subtree[name].bufferView;\n  const bufferView = subtree.bufferViews[bufferViewIndex];\n  const buffer = subtree.buffers[bufferView.buffer];\n\n  // External bitstream loading\n  if (buffer.uri) {\n    const response = await fetchFile(buffer.uri);\n    const data = await response.arrayBuffer();\n    // Return view of bitstream.\n    return new Uint8Array(data, bufferView.byteOffset, bufferView.byteLength);\n  }\n  // Return view of bitstream.\n  return new Uint8Array(internalBinaryBuffer, bufferView.byteOffset, bufferView.byteLength);\n}\n\n/**\n * Parse buffer to return uint64 value\n * @param buffer\n * @returns 64-bit value until precision is lost after Number.MAX_SAFE_INTEGER\n */\nfunction parseUint64Value(buffer: ArrayBuffer): number {\n  const dataView = new DataView(buffer);\n  const left = dataView.getUint32(0, true);\n  const right = dataView.getUint32(4, true);\n  // combine the two 32-bit values\n  return left + 2 ** 32 * right;\n}\n"],"file":"parse-3d-tile-subtree.js"}