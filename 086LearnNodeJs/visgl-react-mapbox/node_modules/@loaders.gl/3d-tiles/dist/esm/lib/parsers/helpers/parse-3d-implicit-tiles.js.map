{"version":3,"sources":["../../../../../src/lib/parsers/helpers/parse-3d-implicit-tiles.ts"],"names":["Tile3DSubtreeLoader","load","QUADTREE_DEVISION_COUNT","OCTREE_DEVISION_COUNT","SUBDIVISION_COUNT_MAP","QUADTREE","OCTREE","parseImplicitTiles","params","options","parentData","mortonIndex","x","y","z","childIndex","globalData","level","subtree","subdivisionScheme","subtreeLevels","maximumLevel","contentUrlTemplate","subtreesUriTemplate","basePath","tile","children","lodMetricValue","contentUrl","childrenPerTile","childX","childY","childZ","levelOffset","childTileMortonIndex","concatBits","tileAvailabilityIndex","childTileX","childTileY","childTileZ","isChildSubtreeAvailable","getAvailabilityResult","childSubtreeAvailability","lev","subtreePath","childSubtreeUrl","replaceContentUrlTemplate","childSubtree","isTileAvailable","tileAvailability","isContentAvailable","contentAvailability","childTileLevel","pData","index","currentTile","length","globalLevel","childCoordinates","formattedTile","formatTileData","push","availabilityData","Boolean","constant","explicitBitstream","getBooleanValueFromBitstream","refine","getRefine","lodMetricType","getTileType","rootLodMetricValue","rootBoundingVolume","uri","replace","boundingVolume","calculateBoundingVolumeForChildTile","content","id","type","region","west","south","east","north","minimumHeight","maximumHeight","boundingVolumesCount","sizeX","sizeY","sizeZ","childWest","childEast","childSouth","childNorth","childMinimumHeight","childMaximumHeight","console","warn","first","second","parseInt","toString","templateUrl","mapUrl","generateMapUrl","matched","items","key","availabilityIndex","availabilityBuffer","byteIndex","Math","floor","bitIndex","bitValue"],"mappings":"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","sourcesContent":["import type {Availability, BoundingVolume, Subtree} from '../../../types';\nimport {Tile3DSubtreeLoader} from '../../../tile-3d-subtree-loader';\nimport {load} from '@loaders.gl/core';\n\nconst QUADTREE_DEVISION_COUNT = 4;\nconst OCTREE_DEVISION_COUNT = 8;\n\nconst SUBDIVISION_COUNT_MAP = {\n  QUADTREE: QUADTREE_DEVISION_COUNT,\n  OCTREE: OCTREE_DEVISION_COUNT\n};\n\n/**\n * Recursively parse implicit tiles tree\n * Spec - https://github.com/CesiumGS/3d-tiles/tree/main/extensions/3DTILES_implicit_tiling\n * TODO Check out do we able to use Tile3D class as return type here.\n * @param subtree\n * @param lodMetricValue\n * @param options\n * @param parentData\n * @param childIndex\n * @param level\n * @param globalData\n */\n// eslint-disable-next-line max-statements\nexport async function parseImplicitTiles(params: {\n  subtree: Subtree;\n  options: any;\n  parentData?: {mortonIndex: number; x: number; y: number; z: number};\n  childIndex?: number;\n  level?: number;\n  globalData?: {level: number; mortonIndex: number; x: number; y: number; z: number};\n}) {\n  const {\n    options,\n    parentData = {\n      mortonIndex: 0,\n      x: 0,\n      y: 0,\n      z: 0\n    },\n    childIndex = 0,\n    globalData = {\n      level: 0,\n      mortonIndex: 0,\n      x: 0,\n      y: 0,\n      z: 0\n    }\n  } = params;\n  let {subtree, level = 0} = params;\n  const {\n    subdivisionScheme,\n    subtreeLevels,\n    maximumLevel,\n    contentUrlTemplate,\n    subtreesUriTemplate,\n    basePath\n  } = options;\n\n  const tile = {children: [], lodMetricValue: 0, contentUrl: ''};\n\n  const childrenPerTile = SUBDIVISION_COUNT_MAP[subdivisionScheme];\n\n  const childX = childIndex & 0b01;\n  const childY = (childIndex >> 1) & 0b01;\n  const childZ = (childIndex >> 2) & 0b01;\n\n  const levelOffset = (childrenPerTile ** level - 1) / (childrenPerTile - 1);\n  let childTileMortonIndex = concatBits(parentData.mortonIndex, childIndex);\n  let tileAvailabilityIndex = levelOffset + childTileMortonIndex;\n\n  // Local tile coordinates\n  let childTileX = concatBits(parentData.x, childX);\n  let childTileY = concatBits(parentData.y, childY);\n  let childTileZ = concatBits(parentData.z, childZ);\n\n  // TODO Remove after real implicit tileset will be tested.\n  // Degug data\n  // tile.level = level + globalData.level;\n  // tile.x = concatBits(globalData.x, childTileX);\n  // tile.y = concatBits(globalData.y, childTileY);\n  // tile.z = concatBits(globalData.z, childTileZ);\n  // tile.mortonIndex = childTileMortonIndex;\n  // End of debug data\n\n  let isChildSubtreeAvailable = false;\n\n  if (level + 1 > subtreeLevels) {\n    isChildSubtreeAvailable = getAvailabilityResult(\n      subtree.childSubtreeAvailability,\n      childTileMortonIndex\n    );\n  }\n\n  const x = concatBits(globalData.x, childTileX);\n  const y = concatBits(globalData.y, childTileY);\n  const z = concatBits(globalData.z, childTileZ);\n  const lev = level + globalData.level;\n\n  if (isChildSubtreeAvailable) {\n    const subtreePath = `${basePath}/${subtreesUriTemplate}`;\n    const childSubtreeUrl = replaceContentUrlTemplate(subtreePath, lev, x, y, z);\n    const childSubtree = await load(childSubtreeUrl, Tile3DSubtreeLoader);\n\n    subtree = childSubtree;\n\n    globalData.mortonIndex = childTileMortonIndex;\n    globalData.x = childTileX;\n    globalData.y = childTileY;\n    globalData.z = childTileZ;\n    globalData.level = level;\n\n    childTileMortonIndex = 0;\n    tileAvailabilityIndex = 0;\n    childTileX = 0;\n    childTileY = 0;\n    childTileZ = 0;\n    level = 0;\n  }\n\n  const isTileAvailable = getAvailabilityResult(subtree.tileAvailability, tileAvailabilityIndex);\n\n  if (!isTileAvailable || level > maximumLevel) {\n    return tile;\n  }\n\n  const isContentAvailable = getAvailabilityResult(\n    subtree.contentAvailability,\n    tileAvailabilityIndex\n  );\n\n  if (isContentAvailable) {\n    tile.contentUrl = replaceContentUrlTemplate(contentUrlTemplate, lev, x, y, z);\n  }\n\n  const childTileLevel = level + 1;\n  const pData = {mortonIndex: childTileMortonIndex, x: childTileX, y: childTileY, z: childTileZ};\n\n  for (let index = 0; index < childrenPerTile; index++) {\n    const currentTile = await parseImplicitTiles({\n      subtree,\n      options,\n      parentData: pData,\n      childIndex: index,\n      level: childTileLevel,\n      globalData\n    });\n\n    if (currentTile.contentUrl || currentTile.children.length) {\n      const globalLevel = lev + 1;\n      const childCoordinates = {childTileX, childTileY, childTileZ};\n      const formattedTile = formatTileData(currentTile, globalLevel, childCoordinates, options);\n      // @ts-ignore\n      tile.children.push(formattedTile);\n    }\n  }\n\n  return tile;\n}\n\nfunction getAvailabilityResult(availabilityData: Availability, index: number): boolean {\n  if ('constant' in availabilityData) {\n    return Boolean(availabilityData.constant);\n  }\n\n  if (availabilityData.explicitBitstream) {\n    return getBooleanValueFromBitstream(index, availabilityData.explicitBitstream);\n  }\n\n  return false;\n}\n\n/**\n * Do formatting of implicit tile data.\n * TODO Check out do we able to use Tile3D class as type here.\n * @param tile\n * @param lodMetricValue\n * @param options\n * @returns\n */\nfunction formatTileData(\n  tile,\n  level: number,\n  childCoordinates: {childTileX: number; childTileY: number; childTileZ: number},\n  options: any\n) {\n  const {\n    basePath,\n    refine,\n    getRefine,\n    lodMetricType,\n    getTileType,\n    rootLodMetricValue,\n    rootBoundingVolume\n  } = options;\n  const uri = tile.contentUrl && tile.contentUrl.replace(`${basePath}/`, '');\n  const lodMetricValue = rootLodMetricValue / 2 ** level;\n  const boundingVolume = calculateBoundingVolumeForChildTile(\n    level,\n    rootBoundingVolume,\n    childCoordinates\n  );\n\n  return {\n    children: tile.children,\n    contentUrl: tile.contentUrl,\n    content: {uri},\n    id: tile.contentUrl,\n    refine: getRefine(refine),\n    type: getTileType(tile),\n    lodMetricType,\n    lodMetricValue,\n    boundingVolume\n    // Temp debug values. Remove when real implicit tileset will be tested.\n    // x: tile.x,\n    // y: tile.y,\n    // z: tile.z,\n    // level: tile.level\n  };\n}\n\n/**\n * Calculate child bounding volume.\n * Spec - https://github.com/CesiumGS/3d-tiles/tree/main/extensions/3DTILES_implicit_tiling#subdivision-rules\n * @param level\n * @param rootBoundingVolume\n * @param childCoordinates\n */\nfunction calculateBoundingVolumeForChildTile(\n  level: number,\n  rootBoundingVolume: BoundingVolume,\n  childCoordinates: {childTileX: number; childTileY: number; childTileZ: number}\n): BoundingVolume | null {\n  if (rootBoundingVolume.region) {\n    const {childTileX, childTileY, childTileZ} = childCoordinates;\n    const [west, south, east, north, minimumHeight, maximumHeight] = rootBoundingVolume.region;\n    const boundingVolumesCount = 2 ** level;\n\n    const sizeX = (east - west) / boundingVolumesCount;\n    const sizeY = (north - south) / boundingVolumesCount;\n    const sizeZ = (maximumHeight - minimumHeight) / boundingVolumesCount;\n\n    const [childWest, childEast] = [west + sizeX * childTileX, west + sizeX * (childTileX + 1)];\n    const [childSouth, childNorth] = [south + sizeY * childTileY, south + sizeY * (childTileY + 1)];\n    const [childMinimumHeight, childMaximumHeight] = [\n      minimumHeight + sizeZ * childTileZ,\n      minimumHeight + sizeZ * (childTileZ + 1)\n    ];\n\n    return {\n      region: [childWest, childSouth, childEast, childNorth, childMinimumHeight, childMaximumHeight]\n    };\n  }\n\n  // eslint-disable-next-line no-console\n  console.warn('Unsupported bounding volume type: ', rootBoundingVolume);\n  return null;\n}\n\n/**\n * Do binary concatenation\n * @param first\n * @param second\n */\nfunction concatBits(first: number, second: number): number {\n  return parseInt(first.toString(2) + second.toString(2), 2);\n}\n\n/**\n * Replace implicit tile content url with real coordinates.\n * @param templateUrl\n * @param level\n * @param x\n * @param y\n * @param z\n */\nexport function replaceContentUrlTemplate(\n  templateUrl: string,\n  level: number,\n  x: number,\n  y: number,\n  z: number\n): string {\n  const mapUrl = generateMapUrl({level, x, y, z});\n  return templateUrl.replace(/{level}|{x}|{y}|{z}/gi, (matched) => mapUrl[matched]);\n}\n\n/**\n * Get Map object for content url generation\n * @param items\n */\nfunction generateMapUrl(items: {[key: string]: number}): {[key: string]: string} {\n  const mapUrl = {};\n\n  for (const key in items) {\n    mapUrl[`{${key}}`] = items[key];\n  }\n  return mapUrl;\n}\n\n/**\n * Get boolean value from bistream by index\n * A boolean value is encoded as a single bit, either 0 (false) or 1 (true).\n * Multiple boolean values are packed tightly in the same buffer.\n * These buffers of tightly-packed bits are sometimes referred to as bitstreams.\n * Spec - https://github.com/CesiumGS/3d-tiles/tree/implicit-revisions/specification/Metadata#booleans\n * @param availabilitiIndex\n */\nfunction getBooleanValueFromBitstream(\n  availabilityIndex: number,\n  availabilityBuffer: Uint8Array\n): boolean {\n  const byteIndex = Math.floor(availabilityIndex / 8);\n  const bitIndex = availabilityIndex % 8;\n  const bitValue = (availabilityBuffer[byteIndex] >> bitIndex) & 1;\n\n  return bitValue === 1;\n}\n"],"file":"parse-3d-implicit-tiles.js"}