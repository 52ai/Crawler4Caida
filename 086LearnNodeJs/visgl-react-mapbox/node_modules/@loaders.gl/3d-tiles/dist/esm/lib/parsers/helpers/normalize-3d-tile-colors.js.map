{"version":3,"sources":["../../../../../src/lib/parsers/helpers/normalize-3d-tile-colors.ts"],"names":["decodeRGB565","GL","normalize3DTileColorAttribute","tile","colors","batchTable","batchIds","isRGB565","pointCount","colorArray","Uint8ClampedArray","i","batchId","dimensions","getProperty","color","map","d","type","UNSIGNED_BYTE","value","size","normalized","length"],"mappings":"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","sourcesContent":["import {decodeRGB565, GL} from '@loaders.gl/math';\n\n/* eslint-disable complexity*/\nexport function normalize3DTileColorAttribute(tile, colors, batchTable?) {\n  // no colors defined\n  if (!colors && (!tile || !tile.batchIds || !batchTable)) {\n    return null;\n  }\n\n  const {batchIds, isRGB565, pointCount} = tile;\n  // Batch table, look up colors in table\n  if (batchIds && batchTable) {\n    const colorArray = new Uint8ClampedArray(pointCount * 3);\n    for (let i = 0; i < pointCount; i++) {\n      const batchId = batchIds[i];\n      // TODO figure out what is `dimensions` used for\n      const dimensions = batchTable.getProperty(batchId, 'dimensions');\n      const color = dimensions.map((d) => d * 255);\n      colorArray[i * 3] = color[0];\n      colorArray[i * 3 + 1] = color[1];\n      colorArray[i * 3 + 2] = color[2];\n    }\n    return {\n      type: GL.UNSIGNED_BYTE,\n      value: colorArray,\n      size: 3,\n      normalized: true\n    };\n  }\n\n  // RGB565 case, convert to RGB\n  if (isRGB565) {\n    const colorArray = new Uint8ClampedArray(pointCount * 3);\n    for (let i = 0; i < pointCount; i++) {\n      const color = decodeRGB565(colors[i]);\n      colorArray[i * 3] = color[0];\n      colorArray[i * 3 + 1] = color[1];\n      colorArray[i * 3 + 2] = color[2];\n    }\n    return {\n      type: GL.UNSIGNED_BYTE,\n      value: colorArray,\n      size: 3,\n      normalized: true\n    };\n  }\n\n  // RGB case (tile.isTranslucent)\n  if (colors && colors.length === pointCount * 3) {\n    return {\n      type: GL.UNSIGNED_BYTE,\n      value: colors,\n      size: 3,\n      normalized: true\n    };\n  }\n\n  // DEFAULT: RGBA case\n  return {\n    type: GL.UNSIGNED_BYTE,\n    value: colors,\n    size: 4,\n    normalized: true\n  };\n}\n/* eslint-enable complexity*/\n"],"file":"normalize-3d-tile-colors.js"}