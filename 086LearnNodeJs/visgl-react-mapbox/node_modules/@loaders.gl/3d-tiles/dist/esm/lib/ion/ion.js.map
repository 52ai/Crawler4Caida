{"version":3,"sources":["../../../../src/lib/ion/ion.ts"],"names":["fetchFile","assert","CESIUM_ION_URL","getIonTilesetMetadata","accessToken","assetId","assets","getIonAssets","item","items","type","id","ionAssetMetadata","getIonAssetMetadata","url","headers","Authorization","response","fetch","ok","Error","statusText","json","metadata","tilesetInfo"],"mappings":"AAEA,SAAQA,SAAR,QAAwB,kBAAxB;AACA,SAAQC,MAAR,QAAqB,0BAArB;AAEA,MAAMC,cAAc,GAAG,kCAAvB;AAGA,OAAO,eAAeC,qBAAf,CAAqCC,WAArC,EAAkDC,OAAlD,EAA2D;AAEhE,MAAI,CAACA,OAAL,EAAc;AACZ,UAAMC,MAAM,GAAG,MAAMC,YAAY,CAACH,WAAD,CAAjC;;AACA,SAAK,MAAMI,IAAX,IAAmBF,MAAM,CAACG,KAA1B,EAAiC;AAC/B,UAAID,IAAI,CAACE,IAAL,KAAc,SAAlB,EAA6B;AAC3BL,QAAAA,OAAO,GAAGG,IAAI,CAACG,EAAf;AACD;AACF;AACF;;AAGD,QAAMC,gBAAgB,GAAG,MAAMC,mBAAmB,CAACT,WAAD,EAAcC,OAAd,CAAlD;AACA,QAAM;AAACK,IAAAA,IAAD;AAAOI,IAAAA;AAAP,MAAcF,gBAApB;AACAX,EAAAA,MAAM,CAACS,IAAI,KAAK,SAAT,IAAsBI,GAAvB,CAAN;AAGAF,EAAAA,gBAAgB,CAACG,OAAjB,GAA2B;AACzBC,IAAAA,aAAa,mBAAYJ,gBAAgB,CAACR,WAA7B;AADY,GAA3B;AAGA,SAAOQ,gBAAP;AACD;AAGD,OAAO,eAAeL,YAAf,CAA4BH,WAA5B,EAAyC;AAC9CH,EAAAA,MAAM,CAACG,WAAD,CAAN;AACA,QAAMU,GAAG,GAAGZ,cAAZ;AACA,QAAMa,OAAO,GAAG;AAACC,IAAAA,aAAa,mBAAYZ,WAAZ;AAAd,GAAhB;AACA,QAAMa,QAAQ,GAAG,MAAMjB,SAAS,CAACc,GAAD,EAAM;AAACI,IAAAA,KAAK,EAAE;AAACH,MAAAA;AAAD;AAAR,GAAN,CAAhC;;AACA,MAAI,CAACE,QAAQ,CAACE,EAAd,EAAkB;AAChB,UAAM,IAAIC,KAAJ,CAAUH,QAAQ,CAACI,UAAnB,CAAN;AACD;;AACD,SAAO,MAAMJ,QAAQ,CAACK,IAAT,EAAb;AACD;AAGD,OAAO,eAAeT,mBAAf,CAAmCT,WAAnC,EAAgDC,OAAhD,EAAyD;AAC9DJ,EAAAA,MAAM,CAACG,WAAD,EAAcC,OAAd,CAAN;AACA,QAAMU,OAAO,GAAG;AAACC,IAAAA,aAAa,mBAAYZ,WAAZ;AAAd,GAAhB;AAEA,QAAMU,GAAG,aAAMZ,cAAN,cAAwBG,OAAxB,CAAT;AAGA,MAAIY,QAAQ,GAAG,MAAMjB,SAAS,WAAIc,GAAJ,GAAW;AAACI,IAAAA,KAAK,EAAE;AAACH,MAAAA;AAAD;AAAR,GAAX,CAA9B;;AACA,MAAI,CAACE,QAAQ,CAACE,EAAd,EAAkB;AAChB,UAAM,IAAIC,KAAJ,CAAUH,QAAQ,CAACI,UAAnB,CAAN;AACD;;AACD,MAAIE,QAAQ,GAAG,MAAMN,QAAQ,CAACK,IAAT,EAArB;AAIAL,EAAAA,QAAQ,GAAG,MAAMjB,SAAS,WAAIc,GAAJ,gBAAoB;AAACI,IAAAA,KAAK,EAAE;AAACH,MAAAA;AAAD;AAAR,GAApB,CAA1B;;AACA,MAAI,CAACE,QAAQ,CAACE,EAAd,EAAkB;AAChB,UAAM,IAAIC,KAAJ,CAAUH,QAAQ,CAACI,UAAnB,CAAN;AACD;;AACD,QAAMG,WAAW,GAAG,MAAMP,QAAQ,CAACK,IAAT,EAA1B;AAGAC,EAAAA,QAAQ,GAAG,EACT,GAAGA,QADM;AAET,OAAGC;AAFM,GAAX;AAKA,SAAOD,QAAP;AACD","sourcesContent":["// Minimal support to load tilsets from the Cesium ION services\n\nimport {fetchFile} from '@loaders.gl/core';\nimport {assert} from '@loaders.gl/loader-utils';\n\nconst CESIUM_ION_URL = 'https://api.cesium.com/v1/assets';\n\n// Returns `{url, headers, type, attributions}` for an ion tileset\nexport async function getIonTilesetMetadata(accessToken, assetId) {\n  // Step 1, if no asset id, look for first 3DTILES asset associated with this token.\n  if (!assetId) {\n    const assets = await getIonAssets(accessToken);\n    for (const item of assets.items) {\n      if (item.type === '3DTILES') {\n        assetId = item.id;\n      }\n    }\n  }\n\n  // Step 2: Query metdatadata for this asset.\n  const ionAssetMetadata = await getIonAssetMetadata(accessToken, assetId);\n  const {type, url} = ionAssetMetadata;\n  assert(type === '3DTILES' && url);\n\n  // Prepare a headers object for fetch\n  ionAssetMetadata.headers = {\n    Authorization: `Bearer ${ionAssetMetadata.accessToken}`\n  };\n  return ionAssetMetadata;\n}\n\n// Return a list of all assets associated with accessToken\nexport async function getIonAssets(accessToken) {\n  assert(accessToken);\n  const url = CESIUM_ION_URL;\n  const headers = {Authorization: `Bearer ${accessToken}`};\n  const response = await fetchFile(url, {fetch: {headers}});\n  if (!response.ok) {\n    throw new Error(response.statusText);\n  }\n  return await response.json();\n}\n\n// Return metadata for a specific asset associated with token\nexport async function getIonAssetMetadata(accessToken, assetId) {\n  assert(accessToken, assetId);\n  const headers = {Authorization: `Bearer ${accessToken}`};\n\n  const url = `${CESIUM_ION_URL}/${assetId}`;\n  // https://cesium.com/docs/rest-api/#operation/getAsset\n  // Retrieves metadata information about a specific asset.\n  let response = await fetchFile(`${url}`, {fetch: {headers}});\n  if (!response.ok) {\n    throw new Error(response.statusText);\n  }\n  let metadata = await response.json();\n\n  // https://cesium.com/docs/rest-api/#operation/getAssetEndpoint\n  // Retrieves information and credentials that allow you to access the tiled asset data for visualization and analysis.\n  response = await fetchFile(`${url}/endpoint`, {fetch: {headers}});\n  if (!response.ok) {\n    throw new Error(response.statusText);\n  }\n  const tilesetInfo = await response.json();\n\n  // extract dataset description\n  metadata = {\n    ...metadata,\n    ...tilesetInfo\n  };\n\n  return metadata;\n}\n"],"file":"ion.js"}