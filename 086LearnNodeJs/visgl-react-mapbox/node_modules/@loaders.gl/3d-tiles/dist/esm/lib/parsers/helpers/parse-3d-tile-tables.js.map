{"version":3,"sources":["../../../../../src/lib/parsers/helpers/parse-3d-tile-tables.ts"],"names":["getStringFromArrayBuffer","SIZEOF_UINT32","DEPRECATION_WARNING","parse3DTileTablesHeaderSync","tile","arrayBuffer","byteOffset","view","DataView","batchLength","header","featureTableJsonByteLength","getUint32","featureTableBinaryByteLength","batchTableJsonByteLength","batchTableBinaryByteLength","console","warn","parse3DTileTablesSync","options","parse3DTileFeatureTable","parse3DTileBatchTable","featureTableJson","BATCH_LENGTH","featureTableString","JSON","parse","featureTableBinary","Uint8Array","batchTableString","batchTableJson","batchTableBinary"],"mappings":"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","sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\nimport {getStringFromArrayBuffer} from './parse-utils';\n\nconst SIZEOF_UINT32 = 4;\nconst DEPRECATION_WARNING = 'b3dm tile in legacy format.';\n\n// eslint-disable-next-line max-statements\nexport function parse3DTileTablesHeaderSync(tile, arrayBuffer, byteOffset) {\n  const view = new DataView(arrayBuffer);\n  let batchLength;\n\n  tile.header = tile.header || {};\n\n  let featureTableJsonByteLength = view.getUint32(byteOffset, true);\n  byteOffset += SIZEOF_UINT32;\n\n  let featureTableBinaryByteLength = view.getUint32(byteOffset, true);\n  byteOffset += SIZEOF_UINT32;\n\n  let batchTableJsonByteLength = view.getUint32(byteOffset, true);\n  byteOffset += SIZEOF_UINT32;\n\n  let batchTableBinaryByteLength = view.getUint32(byteOffset, true);\n  byteOffset += SIZEOF_UINT32;\n\n  // First legacy header format - [batchLength] [batchTableByteLength] ('batchTableJsonByteLength': JSON starts with a quotation mark or the glTF magic)\n  // Second legacy format - [batchTableJsonByteLength] [batchTableBinaryByteLength] [batchLength] (Second legacy format is similar as first but here we check 'batchTableBinaryByteLength' instead)\n  // Current header format - [featureTableJsonByteLength] [featureTableBinaryByteLength] [batchTableJsonByteLength] [batchTableBinaryByteLength]\n  // First byte will be 0x22 or 0x67. The minimum uint32 expected is 0x22000000 = 570425344 = 570MB.\n  if (batchTableJsonByteLength >= 570425344) {\n    byteOffset -= SIZEOF_UINT32 * 2;\n    batchLength = featureTableJsonByteLength;\n    batchTableJsonByteLength = featureTableBinaryByteLength;\n    batchTableBinaryByteLength = 0;\n    featureTableJsonByteLength = 0;\n    featureTableBinaryByteLength = 0;\n\n    console.warn(DEPRECATION_WARNING); // eslint-disable-line\n  } else if (batchTableBinaryByteLength >= 570425344) {\n    byteOffset -= SIZEOF_UINT32;\n    batchLength = batchTableJsonByteLength;\n    batchTableJsonByteLength = featureTableJsonByteLength;\n    batchTableBinaryByteLength = featureTableBinaryByteLength;\n    featureTableJsonByteLength = 0;\n    featureTableBinaryByteLength = 0;\n\n    console.warn(DEPRECATION_WARNING); // eslint-disable-line\n  }\n\n  tile.header.featureTableJsonByteLength = featureTableJsonByteLength;\n  tile.header.featureTableBinaryByteLength = featureTableBinaryByteLength;\n  tile.header.batchTableJsonByteLength = batchTableJsonByteLength;\n  tile.header.batchTableBinaryByteLength = batchTableBinaryByteLength;\n  tile.header.batchLength = batchLength;\n\n  return byteOffset;\n}\n\nexport function parse3DTileTablesSync(tile, arrayBuffer, byteOffset, options) {\n  byteOffset = parse3DTileFeatureTable(tile, arrayBuffer, byteOffset, options);\n  byteOffset = parse3DTileBatchTable(tile, arrayBuffer, byteOffset, options);\n  return byteOffset;\n}\n\nfunction parse3DTileFeatureTable(tile, arrayBuffer, byteOffset, options) {\n  const {featureTableJsonByteLength, featureTableBinaryByteLength, batchLength} = tile.header;\n\n  tile.featureTableJson = {\n    BATCH_LENGTH: batchLength || 0\n  };\n\n  if (featureTableJsonByteLength > 0) {\n    const featureTableString = getStringFromArrayBuffer(\n      arrayBuffer,\n      byteOffset,\n      featureTableJsonByteLength\n    );\n    tile.featureTableJson = JSON.parse(featureTableString);\n  }\n  byteOffset += featureTableJsonByteLength;\n\n  tile.featureTableBinary = new Uint8Array(arrayBuffer, byteOffset, featureTableBinaryByteLength);\n  byteOffset += featureTableBinaryByteLength;\n\n  /*\n  const featureTable = parseFeatureTable(featureTableJson, featureTableBinary);\n\n  const batchLength = featureTable.getGlobalProperty('BATCH_LENGTH');\n  featureTable.featuresLength = batchLength;\n  */\n\n  return byteOffset;\n}\n\nfunction parse3DTileBatchTable(tile, arrayBuffer, byteOffset, options) {\n  const {batchTableJsonByteLength, batchTableBinaryByteLength} = tile.header;\n\n  if (batchTableJsonByteLength > 0) {\n    const batchTableString = getStringFromArrayBuffer(\n      arrayBuffer,\n      byteOffset,\n      batchTableJsonByteLength\n    );\n    tile.batchTableJson = JSON.parse(batchTableString);\n    byteOffset += batchTableJsonByteLength;\n\n    if (batchTableBinaryByteLength > 0) {\n      // Has a batch table binary\n      tile.batchTableBinary = new Uint8Array(arrayBuffer, byteOffset, batchTableBinaryByteLength);\n      // Copy the batchTableBinary section and let the underlying ArrayBuffer be freed\n      tile.batchTableBinary = new Uint8Array(tile.batchTableBinary);\n\n      byteOffset += batchTableBinaryByteLength;\n    }\n  }\n\n  return byteOffset;\n}\n"],"file":"parse-3d-tile-tables.js"}