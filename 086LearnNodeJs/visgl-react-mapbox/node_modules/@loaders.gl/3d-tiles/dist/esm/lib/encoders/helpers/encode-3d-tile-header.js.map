{"version":3,"sources":["../../../../../src/lib/encoders/helpers/encode-3d-tile-header.ts"],"names":["assert","encode3DTileHeader","tile","dataView","byteOffset","HEADER_SIZE","magic","version","byteLength","Array","isArray","Number","isFinite","setUint8","setUint32","encode3DTileByteLength","byteOffsetTileStart"],"mappings":"AACA,SAAQA,MAAR,QAAqB,0BAArB;AAEA,OAAO,SAASC,kBAAT,CAA4BC,IAA5B,EAAkCC,QAAlC,EAA4CC,UAA5C,EAAwD;AAC7D,QAAMC,WAAW,GAAG,EAApB;;AAEA,MAAI,CAACF,QAAL,EAAe;AACb,WAAOC,UAAU,GAAGC,WAApB;AACD;;AAED,QAAM;AAACC,IAAAA,KAAD;AAAQC,IAAAA,OAAO,GAAG,CAAlB;AAAqBC,IAAAA,UAAU,GAAG;AAAlC,MAAwCN,IAA9C;AAEAF,EAAAA,MAAM,CAACS,KAAK,CAACC,OAAN,CAAcJ,KAAd,KAAwBK,MAAM,CAACC,QAAP,CAAgBL,OAAhB,CAAxB,IAAoDI,MAAM,CAACC,QAAP,CAAgBJ,UAAhB,CAArD,CAAN;AAEAL,EAAAA,QAAQ,CAACU,QAAT,CAAkBT,UAAU,GAAG,CAA/B,EAAkCE,KAAK,CAAC,CAAD,CAAvC;AACAH,EAAAA,QAAQ,CAACU,QAAT,CAAkBT,UAAU,GAAG,CAA/B,EAAkCE,KAAK,CAAC,CAAD,CAAvC;AACAH,EAAAA,QAAQ,CAACU,QAAT,CAAkBT,UAAU,GAAG,CAA/B,EAAkCE,KAAK,CAAC,CAAD,CAAvC;AACAH,EAAAA,QAAQ,CAACU,QAAT,CAAkBT,UAAU,GAAG,CAA/B,EAAkCE,KAAK,CAAC,CAAD,CAAvC;AACAH,EAAAA,QAAQ,CAACW,SAAT,CAAmBV,UAAU,GAAG,CAAhC,EAAmCG,OAAnC,EAA4C,IAA5C;AACAJ,EAAAA,QAAQ,CAACW,SAAT,CAAmBV,UAAU,GAAG,CAAhC,EAAmCI,UAAnC,EAA+C,IAA/C;AAEAJ,EAAAA,UAAU,IAAIC,WAAd;AAEA,SAAOD,UAAP;AACD;AAGD,OAAO,SAASW,sBAAT,CAAgCZ,QAAhC,EAA0Ca,mBAA1C,EAA+DR,UAA/D,EAA2E;AAChF,MAAI,CAACL,QAAL,EAAe;AACb;AACD;;AAEDA,EAAAA,QAAQ,CAACW,SAAT,CAAmBE,mBAAmB,GAAG,CAAzC,EAA4CR,UAA5C,EAAwD,IAAxD;AACD","sourcesContent":["// HELPER ENCODERS\nimport {assert} from '@loaders.gl/loader-utils';\n\nexport function encode3DTileHeader(tile, dataView, byteOffset) {\n  const HEADER_SIZE = 12;\n\n  if (!dataView) {\n    return byteOffset + HEADER_SIZE;\n  }\n\n  const {magic, version = 1, byteLength = 12} = tile;\n\n  assert(Array.isArray(magic) && Number.isFinite(version) && Number.isFinite(byteLength));\n\n  dataView.setUint8(byteOffset + 0, magic[0]);\n  dataView.setUint8(byteOffset + 1, magic[1]);\n  dataView.setUint8(byteOffset + 2, magic[2]);\n  dataView.setUint8(byteOffset + 3, magic[3]);\n  dataView.setUint32(byteOffset + 4, version, true); // version\n  dataView.setUint32(byteOffset + 8, byteLength, true); // byteLength\n\n  byteOffset += HEADER_SIZE;\n\n  return byteOffset;\n}\n\n// Bytelength is sometimes only known at the end of writing a tile\nexport function encode3DTileByteLength(dataView, byteOffsetTileStart, byteLength) {\n  if (!dataView) {\n    return;\n  }\n\n  dataView.setUint32(byteOffsetTileStart + 8, byteLength, true); // byteLength\n}\n"],"file":"encode-3d-tile-header.js"}