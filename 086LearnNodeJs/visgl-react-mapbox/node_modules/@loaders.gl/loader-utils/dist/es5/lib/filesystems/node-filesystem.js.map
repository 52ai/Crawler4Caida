{"version":3,"sources":["../../../../src/lib/filesystems/node-filesystem.ts"],"names":["NodeFileSystem","options","fetch","_fetch","dirname","fs","readdir","path","stat","info","size","Number","isDirectory","fallbackFetch","flags","mode","open","fd","close","fstat","buffer","offset","length","byteLength","position","totalBytesRead","read","bytesRead"],"mappings":"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","sourcesContent":["import * as fs from '../node/fs';\nimport {IFileSystem, IRandomAccessReadFileSystem} from '../../types';\n// import {fetchFile} from \"../fetch/fetch-file\"\n// import {selectLoader} from \"../api/select-loader\";\n\ntype Stat = {\n  size: number;\n  isDirectory: () => boolean;\n  info?: fs.Stats;\n};\n\ntype ReadOptions = {\n  buffer?: Buffer;\n  offset?: number;\n  length?: number;\n  position?: number;\n};\n\n/**\n * FileSystem pass-through for Node.js\n * Compatible with BrowserFileSystem.\n * @param options\n */\nexport default class NodeFileSystem implements IFileSystem, IRandomAccessReadFileSystem {\n  // implements IFileSystem\n  constructor(options: {[key: string]: any}) {\n    this.fetch = options._fetch;\n  }\n\n  async readdir(dirname = '.', options?: {}): Promise<any[]> {\n    return await fs.readdir(dirname, options);\n  }\n\n  async stat(path: string, options?: {}): Promise<Stat> {\n    const info = await fs.stat(path, options);\n    return {size: Number(info.size), isDirectory: () => false, info};\n  }\n\n  async fetch(path: string, options: {[key: string]: any}) {\n    // Falls back to handle https:/http:/data: etc fetches\n    // eslint-disable-next-line\n    const fallbackFetch = options.fetch || this.fetch;\n    return fallbackFetch(path, options);\n  }\n\n  // implements IRandomAccessFileSystem\n  async open(path: string, flags: string | number, mode?: any): Promise<number> {\n    return await fs.open(path, flags);\n  }\n\n  async close(fd: number): Promise<void> {\n    return await fs.close(fd);\n  }\n\n  async fstat(fd: number): Promise<Stat> {\n    const info = await fs.fstat(fd);\n    return info;\n  }\n\n  async read(\n    fd: number,\n    // @ts-ignore Possibly null\n    {buffer = null, offset = 0, length = buffer.byteLength, position = null}: ReadOptions\n  ): Promise<{bytesRead: number; buffer: Buffer}> {\n    let totalBytesRead = 0;\n    // Read in loop until we get required number of bytes\n    while (totalBytesRead < length) {\n      const {bytesRead} = await fs.read(\n        fd,\n        buffer,\n        offset + totalBytesRead,\n        length - totalBytesRead,\n        position + totalBytesRead\n      );\n      totalBytesRead += bytesRead;\n    }\n    return {bytesRead: totalBytesRead, buffer};\n  }\n}\n"],"file":"node-filesystem.js"}