{"version":3,"sources":["../../../../src/lib/node/fs.ts"],"names":["readdir","stat","readFile","readFileSync","writeFile","writeFileSync","open","close","read","fstat","isSupported","Boolean","fs","_readToArrayBuffer","fd","start","length","buffer","Buffer","alloc","bytesRead","Error"],"mappings":";;;;;;;;;;;;;;AACA;;AACA;;AACA;;AAIO,IAAIA,OAAJ;;AAEA,IAAIC,IAAJ;;AAGA,IAAIC,QAAJ;;AAEA,IAAIC,YAAJ;;AAEA,IAAIC,SAAJ;;AAEA,IAAIC,aAAJ;;AAKA,IAAIC,IAAJ;;AAEA,IAAIC,KAAJ;;AAEA,IAAIC,IAAJ;;AAEA,IAAIC,KAAJ;;AAEA,IAAIC,WAAW,GAAGC,OAAO,CAACC,WAAD,CAAzB;;;AAIP,IAAI;AAEF,oBAAAZ,OAAO,GAAG,qBAAUY,YAAGZ,OAAb,CAAV;AAEA,iBAAAC,IAAI,GAAG,qBAAUW,YAAGX,IAAb,CAAP;AAGA,qBAAAC,QAAQ,GAAG,qBAAUU,YAAGV,QAAb,CAAX;AAEA,yBAAAC,YAAY,GAAGS,YAAGT,YAAlB;AAEA,sBAAAC,SAAS,GAAG,qBAAUQ,YAAGR,SAAb,CAAZ;AAEA,0BAAAC,aAAa,GAAGO,YAAGP,aAAnB;AAKA,iBAAAC,IAAI,GAAG,qBAAUM,YAAGN,IAAb,CAAP;AAEA,kBAAAC,KAAK,GAAG,qBAAUK,YAAGL,KAAb,CAAR;AAEA,iBAAAC,IAAI,GAAG,qBAAUI,YAAGJ,IAAb,CAAP;AAEA,kBAAAC,KAAK,GAAG,qBAAUG,YAAGH,KAAb,CAAR;AAEA,wBAAAC,WAAW,GAAGC,OAAO,CAACC,WAAD,CAArB;AACD,CA3BD,CA2BE,gBAAM,CAEP;;SAEqBC,kB;;;;;kFAAf,iBAAkCC,EAAlC,EAA8CC,KAA9C,EAA6DC,MAA7D;AAAA;;AAAA;AAAA;AAAA;AAAA;AACCC,YAAAA,MADD,GACUC,MAAM,CAACC,KAAP,CAAaH,MAAb,CADV;AAAA;AAAA,mBAEqBR,IAAI,CAACM,EAAD,EAAKG,MAAL,EAAa,CAAb,EAAgBD,MAAhB,EAAwBD,KAAxB,CAFzB;;AAAA;AAAA;AAEEK,YAAAA,SAFF,eAEEA,SAFF;;AAAA,kBAGDA,SAAS,KAAKJ,MAHb;AAAA;AAAA;AAAA;;AAAA,kBAIG,IAAIK,KAAJ,CAAU,gBAAV,CAJH;;AAAA;AAAA,6CAME,2BAAcJ,MAAd,CANF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["// fs wrapper (promisified fs + avoids bundling fs in browsers)\nimport fs from 'fs';\nimport {toArrayBuffer} from './buffer';\nimport {promisify} from './util';\n\nexport type {Stats} from 'fs';\n\nexport let readdir;\n/** Wrapper for Node.js fs method */\nexport let stat;\n\n/** Wrapper for Node.js fs method */\nexport let readFile;\n/** Wrapper for Node.js fs method */\nexport let readFileSync;\n/** Wrapper for Node.js fs method */\nexport let writeFile;\n/** Wrapper for Node.js fs method */\nexport let writeFileSync;\n\n// file descriptors\n\n/** Wrapper for Node.js fs method */\nexport let open;\n/** Wrapper for Node.js fs method */\nexport let close;\n/** Wrapper for Node.js fs method */\nexport let read;\n/** Wrapper for Node.js fs method */\nexport let fstat;\n\nexport let isSupported = Boolean(fs);\n\n// paths\n\ntry {\n  /** Wrapper for Node.js fs method */\n  readdir = promisify(fs.readdir);\n  /** Wrapper for Node.js fs method */\n  stat = promisify(fs.stat);\n\n  /** Wrapper for Node.js fs method */\n  readFile = promisify(fs.readFile);\n  /** Wrapper for Node.js fs method */\n  readFileSync = fs.readFileSync;\n  /** Wrapper for Node.js fs method */\n  writeFile = promisify(fs.writeFile);\n  /** Wrapper for Node.js fs method */\n  writeFileSync = fs.writeFileSync;\n\n  // file descriptors\n\n  /** Wrapper for Node.js fs method */\n  open = promisify(fs.open);\n  /** Wrapper for Node.js fs method */\n  close = promisify(fs.close);\n  /** Wrapper for Node.js fs method */\n  read = promisify(fs.read);\n  /** Wrapper for Node.js fs method */\n  fstat = promisify(fs.fstat);\n\n  isSupported = Boolean(fs);\n} catch {\n  // ignore\n}\n\nexport async function _readToArrayBuffer(fd: number, start: number, length: number) {\n  const buffer = Buffer.alloc(length);\n  const {bytesRead} = await read(fd, buffer, 0, length, start);\n  if (bytesRead !== length) {\n    throw new Error('fs.read failed');\n  }\n  return toArrayBuffer(buffer);\n}\n"],"file":"fs.js"}