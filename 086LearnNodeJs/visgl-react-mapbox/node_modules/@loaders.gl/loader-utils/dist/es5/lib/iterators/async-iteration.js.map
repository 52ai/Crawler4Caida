{"version":3,"sources":["../../../../src/lib/iterators/async-iteration.ts"],"names":["forEach","iterator","visitor","next","done","value","return","cancel","concatenateArrayBuffersAsync","asyncIterator","arrayBuffers","chunk","push","concatenateArrayBuffers","concatenateStringsAsync","strings","join"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;SAgBsBA,O;;;;;uEAAf,iBAAuBC,QAAvB,EAAiCC,OAAjC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,iBAEE,IAFF;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAGyBD,QAAQ,CAACE,IAAT,EAHzB;;AAAA;AAAA;AAGIC,YAAAA,IAHJ,wBAGIA,IAHJ;AAGUC,YAAAA,KAHV,wBAGUA,KAHV;;AAAA,iBAICD,IAJD;AAAA;AAAA;AAAA;;AAKDH,YAAAA,QAAQ,CAACK,MAAT;AALC;;AAAA;AAQGC,YAAAA,MARH,GAQYL,OAAO,CAACG,KAAD,CARnB;;AAAA,iBASCE,MATD;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAsBeC,4B;;;;;4FAAf,kBACLC,aADK;AAAA;;AAAA;AAAA;AAAA;AAAA;AAGCC,YAAAA,YAHD,GAG+B,EAH/B;AAAA;AAAA;AAAA;AAAA,qDAIqBD,aAJrB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAIYE,YAAAA,KAJZ;AAKHD,YAAAA,YAAY,CAACE,IAAb,CAAkBD,KAAlB;;AALG;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA,8CAOEE,wDAA2BH,YAA3B,CAPF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAUeI,uB;;;;;uFAAf,kBACLL,aADK;AAAA;;AAAA;AAAA;AAAA;AAAA;AAGCM,YAAAA,OAHD,GAGqB,EAHrB;AAAA;AAAA;AAAA;AAAA,sDAIqBN,aAJrB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAIYE,YAAAA,KAJZ;AAKHI,YAAAA,OAAO,CAACH,IAAR,CAAaD,KAAb;;AALG;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA,8CAOEI,OAAO,CAACC,IAAR,CAAa,EAAb,CAPF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import {concatenateArrayBuffers} from '../binary-utils/array-buffer-utils';\n\n// GENERAL UTILITIES\n\n/**\n * Iterate over async iterator, without resetting iterator if end is not reached\n * - forEach intentionally does not reset iterator if exiting loop prematurely\n *   so that iteration can continue in a second loop\n * - It is recommended to use a standard for-await as last loop to ensure\n *   iterator gets properly reset\n *\n * TODO - optimize using sync iteration if argument is an Iterable?\n *\n * @param iterator\n * @param visitor\n */\nexport async function forEach(iterator, visitor) {\n  // eslint-disable-next-line\n  while (true) {\n    const {done, value} = await iterator.next();\n    if (done) {\n      iterator.return();\n      return;\n    }\n    const cancel = visitor(value);\n    if (cancel) {\n      return;\n    }\n  }\n}\n\n// Breaking big data into iterable chunks, concatenating iterable chunks into big data objects\n\n/**\n * Concatenates all data chunks yielded by an (async) iterator\n * This function can e.g. be used to enable atomic parsers to work on (async) iterator inputs\n */\n\nexport async function concatenateArrayBuffersAsync(\n  asyncIterator: AsyncIterable<ArrayBuffer> | Iterable<ArrayBuffer>\n): Promise<ArrayBuffer> {\n  const arrayBuffers: ArrayBuffer[] = [];\n  for await (const chunk of asyncIterator) {\n    arrayBuffers.push(chunk);\n  }\n  return concatenateArrayBuffers(...arrayBuffers);\n}\n\nexport async function concatenateStringsAsync(\n  asyncIterator: AsyncIterable<string> | Iterable<string>\n): Promise<string> {\n  const strings: string[] = [];\n  for await (const chunk of asyncIterator) {\n    strings.push(chunk);\n  }\n  return strings.join('');\n}\n"],"file":"async-iteration.js"}