{"version":3,"sources":["../../../../src/lib/request-utils/request-scheduler.ts"],"names":["Stats","STAT_QUEUED_REQUESTS","STAT_ACTIVE_REQUESTS","STAT_CANCELLED_REQUESTS","STAT_QUEUED_REQUESTS_EVER","STAT_ACTIVE_REQUESTS_EVER","DEFAULT_PROPS","id","throttleRequests","maxRequests","RequestScheduler","constructor","props","Map","stats","get","scheduleRequest","handle","getPriority","Promise","resolve","done","requestMap","has","request","priority","promise","requestQueue","push","set","_issueNewRequests","_issueRequest","isDone","delete","activeRequestCount","deferredUpdate","setTimeout","_issueNewRequestsAsync","freeSlots","Math","max","_updateAllRequests","i","shift","length","_updateRequest","splice","sort","a","b"],"mappings":"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","sourcesContent":["import {Stats} from '@probe.gl/stats';\n\ntype Handle = any;\ntype DoneFunction = () => any;\ntype GetPriorityFunction = () => number;\ntype RequestResult = {\n  done: DoneFunction;\n} | null;\n\n/** RequestScheduler Options */\nexport type RequestSchedulerProps = {\n  id?: string;\n  throttleRequests?: boolean;\n  maxRequests?: number;\n};\n\nconst STAT_QUEUED_REQUESTS = 'Queued Requests';\nconst STAT_ACTIVE_REQUESTS = 'Active Requests';\nconst STAT_CANCELLED_REQUESTS = 'Cancelled Requests';\nconst STAT_QUEUED_REQUESTS_EVER = 'Queued Requests Ever';\nconst STAT_ACTIVE_REQUESTS_EVER = 'Active Requests Ever';\n\nconst DEFAULT_PROPS: Required<RequestSchedulerProps> = {\n  id: 'request-scheduler',\n  // Specifies if the request scheduler should throttle incoming requests, mainly for comparative testing\n  throttleRequests: true,\n  // The maximum number of simultaneous active requests. Un-throttled requests do not observe this limit.\n  maxRequests: 6\n};\n\n/** Tracks one request */\ntype Request = {\n  handle: Handle;\n  priority: number;\n  getPriority: GetPriorityFunction;\n  resolve?: (value: any) => any;\n};\n\n/**\n * Used to issue a request, without having them \"deeply queued\" by the browser.\n * @todo - Track requests globally, across multiple servers\n */\nexport default class RequestScheduler {\n  readonly props: Required<RequestSchedulerProps>;\n  readonly stats: Stats;\n  activeRequestCount: number = 0;\n\n  /** Tracks the number of active requests and prioritizes/cancels queued requests. */\n  private requestQueue: Request[] = [];\n  private requestMap: Map<Handle, Promise<RequestResult>> = new Map();\n  private deferredUpdate: any = null;\n\n  constructor(props: RequestSchedulerProps = {}) {\n    this.props = {...DEFAULT_PROPS, ...props};\n\n    // Returns the statistics used by the request scheduler.\n    this.stats = new Stats({id: this.props.id});\n    this.stats.get(STAT_QUEUED_REQUESTS);\n    this.stats.get(STAT_ACTIVE_REQUESTS);\n    this.stats.get(STAT_CANCELLED_REQUESTS);\n    this.stats.get(STAT_QUEUED_REQUESTS_EVER);\n    this.stats.get(STAT_ACTIVE_REQUESTS_EVER);\n  }\n\n  /**\n   * Called by an application that wants to issue a request, without having it deeply queued by the browser\n   *\n   * When the returned promise resolved, it is OK for the application to issue a request.\n   * The promise resolves to an object that contains a `done` method.\n   * When the application's request has completed (or failed), the application must call the `done` function\n   *\n   * @param handle\n   * @param getPriority will be called when request \"slots\" open up,\n   *    allowing the caller to update priority or cancel the request\n   *    Highest priority executes first, priority < 0 cancels the request\n   * @returns a promise\n   *   - resolves to a object (with a `done` field) when the request can be issued without queueing,\n   *   - resolves to `null` if the request has been cancelled (by the callback return < 0).\n   *     In this case the application should not issue the request\n   */\n  scheduleRequest(\n    handle: Handle,\n    getPriority: GetPriorityFunction = () => 0\n  ): Promise<RequestResult> {\n    // Allows throttling to be disabled\n    if (!this.props.throttleRequests) {\n      return Promise.resolve({done: () => {}});\n    }\n\n    // dedupe\n    if (this.requestMap.has(handle)) {\n      return this.requestMap.get(handle) as Promise<any>;\n    }\n\n    const request: Request = {handle, priority: 0, getPriority};\n    const promise = new Promise<RequestResult>((resolve) => {\n      // @ts-ignore\n      request.resolve = resolve;\n      return request;\n    });\n\n    this.requestQueue.push(request);\n    this.requestMap.set(handle, promise);\n    this._issueNewRequests();\n    return promise;\n  }\n\n  // PRIVATE\n\n  _issueRequest(request: Request): Promise<any> {\n    const {handle, resolve} = request;\n    let isDone = false;\n\n    const done = () => {\n      // can only be called once\n      if (!isDone) {\n        isDone = true;\n\n        // Stop tracking a request - it has completed, failed, cancelled etc\n        this.requestMap.delete(handle);\n        this.activeRequestCount--;\n        // A slot just freed up, see if any queued requests are waiting\n        this._issueNewRequests();\n      }\n    };\n\n    // Track this request\n    this.activeRequestCount++;\n\n    return resolve ? resolve({done}) : Promise.resolve({done});\n  }\n\n  /** We check requests asynchronously, to prevent multiple updates */\n  _issueNewRequests(): void {\n    if (!this.deferredUpdate) {\n      this.deferredUpdate = setTimeout(() => this._issueNewRequestsAsync(), 0);\n    }\n  }\n\n  /** Refresh all requests  */\n  _issueNewRequestsAsync() {\n    // TODO - shouldn't we clear the timeout?\n    this.deferredUpdate = null;\n\n    const freeSlots = Math.max(this.props.maxRequests - this.activeRequestCount, 0);\n\n    if (freeSlots === 0) {\n      return;\n    }\n\n    this._updateAllRequests();\n\n    // Resolve pending promises for the top-priority requests\n    for (let i = 0; i < freeSlots; ++i) {\n      const request = this.requestQueue.shift();\n      if (request) {\n        this._issueRequest(request); // eslint-disable-line @typescript-eslint/no-floating-promises\n      }\n    }\n\n    // Uncomment to debug\n    // console.log(`${freeSlots} free slots, ${this.requestQueue.length} queued requests`);\n  }\n\n  /** Ensure all requests have updated priorities, and that no longer valid requests are cancelled */\n  _updateAllRequests() {\n    const requestQueue = this.requestQueue;\n    for (let i = 0; i < requestQueue.length; ++i) {\n      const request = requestQueue[i];\n      if (!this._updateRequest(request)) {\n        // Remove the element and make sure to adjust the counter to account for shortened array\n        requestQueue.splice(i, 1);\n        this.requestMap.delete(request.handle);\n        i--;\n      }\n    }\n\n    // Sort the remaining requests based on priority\n    requestQueue.sort((a, b) => a.priority - b.priority);\n  }\n\n  /** Update a single request by calling the callback */\n  _updateRequest(request) {\n    request.priority = request.getPriority(request.handle); // eslint-disable-line callback-return\n\n    // by returning a negative priority, the callback cancels the request\n    if (request.priority < 0) {\n      request.resolve(null);\n      return false;\n    }\n    return true;\n  }\n}\n"],"file":"request-scheduler.js"}