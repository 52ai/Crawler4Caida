import fs from 'fs';
import { toArrayBuffer } from './buffer';
import { promisify } from './util';
export let readdir;
export let stat;
export let readFile;
export let readFileSync;
export let writeFile;
export let writeFileSync;
export let open;
export let close;
export let read;
export let fstat;
export let isSupported = Boolean(fs);

try {
  readdir = promisify(fs.readdir);
  stat = promisify(fs.stat);
  readFile = promisify(fs.readFile);
  readFileSync = fs.readFileSync;
  writeFile = promisify(fs.writeFile);
  writeFileSync = fs.writeFileSync;
  open = promisify(fs.open);
  close = promisify(fs.close);
  read = promisify(fs.read);
  fstat = promisify(fs.fstat);
  isSupported = Boolean(fs);
} catch {}

export async function _readToArrayBuffer(fd, start, length) {
  const buffer = Buffer.alloc(length);
  const {
    bytesRead
  } = await read(fd, buffer, 0, length, start);

  if (bytesRead !== length) {
    throw new Error('fs.read failed');
  }

  return toArrayBuffer(buffer);
}
//# sourceMappingURL=fs.js.map