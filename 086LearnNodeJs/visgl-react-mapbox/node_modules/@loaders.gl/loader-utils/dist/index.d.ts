export type { Loader, LoaderWithParser, LoaderContext, LoaderOptions, Writer, WriterOptions, DataType, SyncDataType, BatchableDataType, IFileSystem, IRandomAccessReadFileSystem } from './types';
export { assert } from './lib/env-utils/assert';
export { isBrowser, isWorker, nodeVersion, self, window, global, document } from './lib/env-utils/globals';
export { createLoaderWorker } from './lib/worker-loader-utils/create-loader-worker';
export { parseWithWorker, canParseWithWorker } from './lib/worker-loader-utils/parse-with-worker';
export { canEncodeWithWorker } from './lib/worker-loader-utils/encode-with-worker';
export { parseJSON } from './lib/parser-utils/parse-json';
export { toArrayBuffer, sliceArrayBuffer, concatenateArrayBuffers, concatenateTypedArrays, compareArrayBuffers } from './lib/binary-utils/array-buffer-utils';
export { padToNBytes, copyToArray, copyArrayBuffer } from './lib/binary-utils/memory-copy-utils';
export { copyPaddedArrayBufferToDataView, copyPaddedStringToDataView } from './lib/binary-utils/binary-copy-utils';
export { padStringToByteAlignment, copyStringToDataView, copyBinaryToDataView } from './lib/binary-utils/encode-utils';
export { getFirstCharacters, getMagicString } from './lib/binary-utils/get-first-characters';
export { makeTextEncoderIterator, makeTextDecoderIterator, makeLineIterator, makeNumberedLineIterator } from './lib/iterators/text-iterators';
export { forEach, concatenateArrayBuffersAsync } from './lib/iterators/async-iteration';
export { default as RequestScheduler } from './lib/request-utils/request-scheduler';
export { setPathPrefix, getPathPrefix, resolvePath } from './lib/path-utils/file-aliases';
export { addAliases as _addAliases } from './lib/path-utils/file-aliases';
export { JSONLoader } from './json-loader';
import * as path from './lib/path-utils/path';
export { path };
export { isBuffer, toBuffer, bufferToArrayBuffer } from './lib/binary-utils/buffer-utils';
import * as util from './lib/node/util';
export { util };
export { promisify } from './lib/node/util';
import * as fs from './lib/node/fs';
export { fs };
export { default as _NodeFileSystem } from './lib/filesystems/node-filesystem';
//# sourceMappingURL=index.d.ts.map