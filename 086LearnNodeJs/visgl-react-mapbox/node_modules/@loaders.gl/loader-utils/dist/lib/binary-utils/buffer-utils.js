"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.bufferToArrayBuffer = exports.toBuffer = exports.isBuffer = void 0;
const node = __importStar(require("../node/buffer"));
/**
 * Check for Node.js `Buffer` (without triggering bundler to include Buffer polyfill on browser)
 */
function isBuffer(value) {
    return value && typeof value === 'object' && value.isBuffer;
}
exports.isBuffer = isBuffer;
/**
 * Converts to Node.js `Buffer` (without triggering bundler to include Buffer polyfill on browser)
 * @todo better data type
 */
function toBuffer(data) {
    return node.toBuffer ? node.toBuffer(data) : data;
}
exports.toBuffer = toBuffer;
/**
 * Converts Node.js `Buffer` to `ArrayBuffer` (without triggering bundler to include Buffer polyfill on browser)
 * @todo better data type
 */
function bufferToArrayBuffer(buffer) {
    if (isBuffer(buffer)) {
        const typedArray = new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.length);
        return typedArray.slice().buffer;
    }
    return buffer;
}
exports.bufferToArrayBuffer = bufferToArrayBuffer;
