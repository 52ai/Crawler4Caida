"use strict";
// Note: These were broken out from gltf loader...
// eslint-disable-next-line complexity
Object.defineProperty(exports, "__esModule", { value: true });
exports.copyBinaryToDataView = exports.copyStringToDataView = exports.padStringToByteAlignment = void 0;
// PERFORMANCE IDEA: No need to copy string twice...
function padStringToByteAlignment(string, byteAlignment) {
    const length = string.length;
    const paddedLength = Math.ceil(length / byteAlignment) * byteAlignment; // Round up to the required alignment
    const padding = paddedLength - length;
    let whitespace = '';
    for (let i = 0; i < padding; ++i) {
        whitespace += ' ';
    }
    return string + whitespace;
}
exports.padStringToByteAlignment = padStringToByteAlignment;
function copyStringToDataView(dataView, byteOffset, string, byteLength) {
    if (dataView) {
        for (let i = 0; i < byteLength; i++) {
            dataView.setUint8(byteOffset + i, string.charCodeAt(i));
        }
    }
    return byteOffset + byteLength;
}
exports.copyStringToDataView = copyStringToDataView;
function copyBinaryToDataView(dataView, byteOffset, binary, byteLength) {
    if (dataView) {
        for (let i = 0; i < byteLength; i++) {
            dataView.setUint8(byteOffset + i, binary[i]);
        }
    }
    return byteOffset + byteLength;
}
exports.copyBinaryToDataView = copyBinaryToDataView;
