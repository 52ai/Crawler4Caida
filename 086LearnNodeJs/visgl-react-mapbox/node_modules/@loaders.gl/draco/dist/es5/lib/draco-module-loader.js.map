{"version":3,"sources":["../../../src/lib/draco-module-loader.ts"],"names":["DRACO_VERSION","DRACO_JS_DECODER_URL","DRACO_WASM_WRAPPER_URL","DRACO_WASM_DECODER_URL","DRACO_ENCODER_URL","loadDecoderPromise","loadEncoderPromise","loadDracoDecoderModule","options","modules","draco3d","createDecoderModule","then","draco","loadDracoDecoder","loadDracoEncoderModule","createEncoderModule","loadDracoEncoder","decoderType","DracoDecoderModule","Promise","all","wasmBinary","globalThis","initializeDracoDecoder","resolve","onModuleLoaded","DracoEncoderModule"],"mappings":"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","sourcesContent":["// Dynamic DRACO module loading inspired by THREE.DRACOLoader\n// https://github.com/mrdoob/three.js/blob/398c4f39ebdb8b23eefd4a7a5ec49ec0c96c7462/examples/jsm/loaders/DRACOLoader.js\n// by Don McCurdy / https://www.donmccurdy.com / MIT license\n\nimport {loadLibrary} from '@loaders.gl/worker-utils';\n\nconst DRACO_VERSION = '1.4.1';\nconst DRACO_JS_DECODER_URL = `https://www.gstatic.com/draco/versioned/decoders/${DRACO_VERSION}/draco_decoder.js`;\nconst DRACO_WASM_WRAPPER_URL = `https://www.gstatic.com/draco/versioned/decoders/${DRACO_VERSION}/draco_wasm_wrapper.js`;\nconst DRACO_WASM_DECODER_URL = `https://www.gstatic.com/draco/versioned/decoders/${DRACO_VERSION}/draco_decoder.wasm`;\n\nconst DRACO_ENCODER_URL = `https://raw.githubusercontent.com/google/draco/${DRACO_VERSION}/javascript/draco_encoder.js`;\n\nlet loadDecoderPromise;\nlet loadEncoderPromise;\n\nexport async function loadDracoDecoderModule(options) {\n  const modules = options.modules || {};\n\n  // Check if a bundled draco3d library has been supplied by application\n  if (modules.draco3d) {\n    loadDecoderPromise =\n      loadDecoderPromise ||\n      modules.draco3d.createDecoderModule({}).then((draco) => {\n        return {draco};\n      });\n  } else {\n    // If not, dynamically load the WASM script from our CDN\n    loadDecoderPromise = loadDecoderPromise || loadDracoDecoder(options);\n  }\n  return await loadDecoderPromise;\n}\n\nexport async function loadDracoEncoderModule(options) {\n  const modules = options.modules || {};\n\n  // Check if a bundled draco3d library has been supplied by application\n  if (modules.draco3d) {\n    loadEncoderPromise =\n      loadEncoderPromise ||\n      modules.draco3d.createEncoderModule({}).then((draco) => {\n        return {draco};\n      });\n  } else {\n    // If not, dynamically load the WASM script from our CDN\n    loadEncoderPromise = loadEncoderPromise || loadDracoEncoder(options);\n  }\n  return await loadEncoderPromise;\n}\n\n// DRACO DECODER LOADING\n\nasync function loadDracoDecoder(options) {\n  let DracoDecoderModule;\n  let wasmBinary;\n  switch (options.draco && options.draco.decoderType) {\n    case 'js':\n      DracoDecoderModule = await loadLibrary(DRACO_JS_DECODER_URL, 'draco', options);\n      break;\n\n    case 'wasm':\n    default:\n      [DracoDecoderModule, wasmBinary] = await Promise.all([\n        await loadLibrary(DRACO_WASM_WRAPPER_URL, 'draco', options),\n        await loadLibrary(DRACO_WASM_DECODER_URL, 'draco', options)\n      ]);\n  }\n  // Depends on how import happened...\n  // @ts-ignore\n  DracoDecoderModule = DracoDecoderModule || globalThis.DracoDecoderModule;\n  return await initializeDracoDecoder(DracoDecoderModule, wasmBinary);\n}\n\nfunction initializeDracoDecoder(DracoDecoderModule, wasmBinary) {\n  const options: {wasmBinary?: any} = {};\n  if (wasmBinary) {\n    options.wasmBinary = wasmBinary;\n  }\n\n  return new Promise((resolve) => {\n    DracoDecoderModule({\n      ...options,\n      onModuleLoaded: (draco) => resolve({draco}) // Module is Promise-like. Wrap in object to avoid loop.\n    });\n  });\n}\n\n// ENCODER\n\nasync function loadDracoEncoder(options) {\n  let DracoEncoderModule = await loadLibrary(DRACO_ENCODER_URL, 'draco', options);\n  // @ts-ignore\n  DracoEncoderModule = DracoEncoderModule || globalThis.DracoEncoderModule;\n\n  return new Promise((resolve) => {\n    DracoEncoderModule({\n      onModuleLoaded: (draco) => resolve({draco}) // Module is Promise-like. Wrap in object to avoid loop.\n    });\n  });\n}\n"],"file":"draco-module-loader.js"}