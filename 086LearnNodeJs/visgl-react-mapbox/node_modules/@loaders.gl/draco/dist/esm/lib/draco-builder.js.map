{"version":3,"sources":["../../../src/lib/draco-builder.ts"],"names":["GLTF_TO_DRACO_ATTRIBUTE_NAME_MAP","POSITION","NORMAL","COLOR_0","TEXCOORD_0","noop","DracoBuilder","constructor","draco","dracoEncoder","Encoder","dracoMeshBuilder","MeshBuilder","dracoMetadataBuilder","MetadataBuilder","destroy","destroyEncodedObject","object","encodeSync","mesh","options","log","_setOptions","pointcloud","_encodePointCloud","_encodeMesh","_getAttributesFromMesh","attributes","indices","dracoPointCloud","PointCloud","metadata","_addGeometryMetadata","_createDracoPointCloud","dracoData","DracoInt8Array","encodedLen","EncodePointCloudToDracoBuffer","Error","num_points","num_attributes","dracoInt8ArrayToArrayBuffer","dracoMesh","Mesh","_createDracoMesh","EncodeMeshToDracoBuffer","SetSpeedOptions","speed","dracoMethod","method","SetEncodingMethod","attribute","quantization","bits","dracoPosition","SetAttributeQuantization","optionalMetadata","attributesMetadata","positions","_getPositionAttribute","vertexCount","length","attributeName","uniqueId","_addAttributeToMesh","_addAttributeMetadata","name","error","ArrayBuffer","isView","type","_getDracoAttributeType","size","numFaces","AddFacesToMesh","builder","buffer","Int8Array","AddInt8Attribute","Int16Array","AddInt16Attribute","Int32Array","AddInt32Attribute","Uint8Array","Uint8ClampedArray","AddUInt8Attribute","Uint16Array","AddUInt16Attribute","Uint32Array","AddUInt32Attribute","Float32Array","AddFloatAttribute","toLowerCase","COLOR","TEX_COORD","GENERIC","dracoType","dracoGeometry","dracoMetadata","Metadata","_populateDracoMetadata","AddMetadata","uniqueAttributeId","dracoAttributeMetadata","SetMetadataForAttribute","key","value","getEntries","Math","trunc","AddIntEntry","AddDoubleEntry","AddIntEntryArray","AddStringEntry","byteLength","outputBuffer","outputData","i","GetValue","container","hasEntriesFunc","entries","hasOwnProperty","Object"],"mappings":"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","sourcesContent":["/* eslint-disable camelcase */\n// This code is inspired by example code in the DRACO repository\nimport type {\n  Draco3D,\n  DracoInt8Array,\n  Encoder,\n  Mesh,\n  MeshBuilder,\n  PointCloud,\n  Metadata,\n  MetadataBuilder,\n  draco_GeometryAttribute_Type\n} from '../draco3d/draco3d-types';\n\nimport type {TypedArray} from '@loaders.gl/schema';\nimport type {DracoMesh} from './draco-types';\n\nexport type DracoBuildOptions = {\n  pointcloud?: boolean;\n  metadata?: {[key: string]: string};\n  attributesMetadata?: {};\n  log?: any;\n\n  // draco encoding options\n  speed?: [number, number];\n  method?: string;\n  quantization?: {[attributeName: string]: number};\n};\n\n// Native Draco attribute names to GLTF attribute names.\nconst GLTF_TO_DRACO_ATTRIBUTE_NAME_MAP = {\n  POSITION: 'POSITION',\n  NORMAL: 'NORMAL',\n  COLOR_0: 'COLOR',\n  TEXCOORD_0: 'TEX_COORD'\n};\n\nconst noop = () => {};\n\nexport default class DracoBuilder {\n  draco: Draco3D;\n  dracoEncoder: Encoder;\n  dracoMeshBuilder: MeshBuilder;\n  dracoMetadataBuilder: MetadataBuilder;\n  log: any;\n\n  // draco - the draco decoder, either import `draco3d` or load dynamically\n  constructor(draco: Draco3D) {\n    this.draco = draco;\n    this.dracoEncoder = new this.draco.Encoder();\n    this.dracoMeshBuilder = new this.draco.MeshBuilder();\n    this.dracoMetadataBuilder = new this.draco.MetadataBuilder();\n  }\n\n  destroy(): void {\n    this.destroyEncodedObject(this.dracoMeshBuilder);\n    this.destroyEncodedObject(this.dracoEncoder);\n    this.destroyEncodedObject(this.dracoMetadataBuilder);\n    // @ts-ignore\n    this.dracoMeshBuilder = null;\n    // @ts-ignore\n    this.dracoEncoder = null;\n    // @ts-ignore\n    this.draco = null;\n  }\n\n  // TBD - when does this need to be called?\n  destroyEncodedObject(object): void {\n    if (object) {\n      this.draco.destroy(object);\n    }\n  }\n\n  /**\n   * Encode mesh or point cloud\n   * @param mesh =({})\n   * @param options\n   */\n  encodeSync(mesh: DracoMesh, options: DracoBuildOptions = {}): ArrayBuffer {\n    this.log = noop; // TODO\n    this._setOptions(options);\n\n    return options.pointcloud\n      ? this._encodePointCloud(mesh, options)\n      : this._encodeMesh(mesh, options);\n  }\n\n  // PRIVATE\n\n  _getAttributesFromMesh(mesh: DracoMesh) {\n    // TODO - Change the encodePointCloud interface instead?\n    const attributes = {...mesh, ...mesh.attributes};\n    // Fold indices into the attributes\n    if (mesh.indices) {\n      attributes.indices = mesh.indices;\n    }\n    return attributes;\n  }\n\n  _encodePointCloud(pointcloud: DracoMesh, options: DracoBuildOptions): ArrayBuffer {\n    const dracoPointCloud = new this.draco.PointCloud();\n\n    if (options.metadata) {\n      this._addGeometryMetadata(dracoPointCloud, options.metadata);\n    }\n\n    const attributes = this._getAttributesFromMesh(pointcloud);\n\n    // Build a `DracoPointCloud` from the input data\n    this._createDracoPointCloud(dracoPointCloud, attributes, options);\n\n    const dracoData = new this.draco.DracoInt8Array();\n\n    try {\n      const encodedLen = this.dracoEncoder.EncodePointCloudToDracoBuffer(\n        dracoPointCloud,\n        false,\n        dracoData\n      );\n\n      if (!(encodedLen > 0)) {\n        throw new Error('Draco encoding failed.');\n      }\n\n      this.log(`DRACO encoded ${dracoPointCloud.num_points()} points\n        with ${dracoPointCloud.num_attributes()} attributes into ${encodedLen} bytes`);\n\n      return dracoInt8ArrayToArrayBuffer(dracoData);\n    } finally {\n      this.destroyEncodedObject(dracoData);\n      this.destroyEncodedObject(dracoPointCloud);\n    }\n  }\n\n  _encodeMesh(mesh: DracoMesh, options: DracoBuildOptions): ArrayBuffer {\n    const dracoMesh = new this.draco.Mesh();\n\n    if (options.metadata) {\n      this._addGeometryMetadata(dracoMesh, options.metadata);\n    }\n\n    const attributes = this._getAttributesFromMesh(mesh);\n\n    // Build a `DracoMesh` from the input data\n    this._createDracoMesh(dracoMesh, attributes, options);\n\n    const dracoData = new this.draco.DracoInt8Array();\n\n    try {\n      const encodedLen = this.dracoEncoder.EncodeMeshToDracoBuffer(dracoMesh, dracoData);\n      if (encodedLen <= 0) {\n        throw new Error('Draco encoding failed.');\n      }\n\n      this.log(`DRACO encoded ${dracoMesh.num_points()} points\n        with ${dracoMesh.num_attributes()} attributes into ${encodedLen} bytes`);\n\n      return dracoInt8ArrayToArrayBuffer(dracoData);\n    } finally {\n      this.destroyEncodedObject(dracoData);\n      this.destroyEncodedObject(dracoMesh);\n    }\n  }\n\n  /**\n   * Set encoding options.\n   * @param {{speed?: any; method?: any; quantization?: any;}} options\n   */\n  _setOptions(options: DracoBuildOptions): void {\n    if ('speed' in options) {\n      // @ts-ignore\n      this.dracoEncoder.SetSpeedOptions(...options.speed);\n    }\n    if ('method' in options) {\n      const dracoMethod = this.draco[options.method || 'MESH_SEQUENTIAL_ENCODING'];\n      // assert(dracoMethod)\n      this.dracoEncoder.SetEncodingMethod(dracoMethod);\n    }\n    if ('quantization' in options) {\n      for (const attribute in options.quantization) {\n        const bits = options.quantization[attribute];\n        const dracoPosition = this.draco[attribute];\n        this.dracoEncoder.SetAttributeQuantization(dracoPosition, bits);\n      }\n    }\n  }\n\n  /**\n   * @param {Mesh} dracoMesh\n   * @param {object} attributes\n   * @returns {Mesh}\n   */\n  _createDracoMesh(dracoMesh: Mesh, attributes, options: DracoBuildOptions): Mesh {\n    const optionalMetadata = options.attributesMetadata || {};\n\n    try {\n      const positions = this._getPositionAttribute(attributes);\n      if (!positions) {\n        throw new Error('positions');\n      }\n      const vertexCount = positions.length / 3;\n\n      for (let attributeName in attributes) {\n        const attribute = attributes[attributeName];\n        attributeName = GLTF_TO_DRACO_ATTRIBUTE_NAME_MAP[attributeName] || attributeName;\n        const uniqueId = this._addAttributeToMesh(dracoMesh, attributeName, attribute, vertexCount);\n\n        if (uniqueId !== -1) {\n          this._addAttributeMetadata(dracoMesh, uniqueId, {\n            name: attributeName,\n            ...(optionalMetadata[attributeName] || {})\n          });\n        }\n      }\n    } catch (error) {\n      this.destroyEncodedObject(dracoMesh);\n      throw error;\n    }\n\n    return dracoMesh;\n  }\n\n  /**\n   * @param {} dracoPointCloud\n   * @param {object} attributes\n   */\n  _createDracoPointCloud(\n    dracoPointCloud: PointCloud,\n    attributes: object,\n    options: DracoBuildOptions\n  ): PointCloud {\n    const optionalMetadata = options.attributesMetadata || {};\n\n    try {\n      const positions = this._getPositionAttribute(attributes);\n      if (!positions) {\n        throw new Error('positions');\n      }\n      const vertexCount = positions.length / 3;\n\n      for (let attributeName in attributes) {\n        const attribute = attributes[attributeName];\n        attributeName = GLTF_TO_DRACO_ATTRIBUTE_NAME_MAP[attributeName] || attributeName;\n        const uniqueId = this._addAttributeToMesh(\n          dracoPointCloud,\n          attributeName,\n          attribute,\n          vertexCount\n        );\n        if (uniqueId !== -1) {\n          this._addAttributeMetadata(dracoPointCloud, uniqueId, {\n            name: attributeName,\n            ...(optionalMetadata[attributeName] || {})\n          });\n        }\n      }\n    } catch (error) {\n      this.destroyEncodedObject(dracoPointCloud);\n      throw error;\n    }\n\n    return dracoPointCloud;\n  }\n\n  /**\n   * @param mesh\n   * @param attributeName\n   * @param attribute\n   * @param vertexCount\n   */\n  _addAttributeToMesh(\n    mesh: PointCloud,\n    attributeName: string,\n    attribute: TypedArray,\n    vertexCount: number\n  ) {\n    if (!ArrayBuffer.isView(attribute)) {\n      return -1;\n    }\n\n    const type = this._getDracoAttributeType(attributeName);\n    // @ts-ignore TODO/fix types\n    const size = attribute.length / vertexCount;\n\n    if (type === 'indices') {\n      // @ts-ignore TODO/fix types\n      const numFaces = attribute.length / 3;\n      this.log(`Adding attribute ${attributeName}, size ${numFaces}`);\n\n      // @ts-ignore assumes mesh is a Mesh, not a point cloud\n      this.dracoMeshBuilder.AddFacesToMesh(mesh, numFaces, attribute);\n      return -1;\n    }\n\n    this.log(`Adding attribute ${attributeName}, size ${size}`);\n\n    const builder = this.dracoMeshBuilder;\n    const {buffer} = attribute;\n\n    switch (attribute.constructor) {\n      case Int8Array:\n        return builder.AddInt8Attribute(mesh, type, vertexCount, size, new Int8Array(buffer));\n\n      case Int16Array:\n        return builder.AddInt16Attribute(mesh, type, vertexCount, size, new Int16Array(buffer));\n\n      case Int32Array:\n        return builder.AddInt32Attribute(mesh, type, vertexCount, size, new Int32Array(buffer));\n      case Uint8Array:\n      case Uint8ClampedArray:\n        return builder.AddUInt8Attribute(mesh, type, vertexCount, size, new Uint8Array(buffer));\n\n      case Uint16Array:\n        return builder.AddUInt16Attribute(mesh, type, vertexCount, size, new Uint16Array(buffer));\n\n      case Uint32Array:\n        return builder.AddUInt32Attribute(mesh, type, vertexCount, size, new Uint32Array(buffer));\n\n      case Float32Array:\n      default:\n        return builder.AddFloatAttribute(mesh, type, vertexCount, size, new Float32Array(buffer));\n    }\n  }\n\n  /**\n   * DRACO can compress attributes of know type better\n   * TODO - expose an attribute type map?\n   * @param attributeName\n   */\n  _getDracoAttributeType(attributeName: string): draco_GeometryAttribute_Type | 'indices' {\n    switch (attributeName.toLowerCase()) {\n      case 'indices':\n        return 'indices';\n      case 'position':\n      case 'positions':\n      case 'vertices':\n        return this.draco.POSITION;\n      case 'normal':\n      case 'normals':\n        return this.draco.NORMAL;\n      case 'color':\n      case 'colors':\n        return this.draco.COLOR;\n      case 'texcoord':\n      case 'texcoords':\n        return this.draco.TEX_COORD;\n      default:\n        return this.draco.GENERIC;\n    }\n  }\n\n  _getPositionAttribute(attributes) {\n    for (const attributeName in attributes) {\n      const attribute = attributes[attributeName];\n      const dracoType = this._getDracoAttributeType(attributeName);\n      if (dracoType === this.draco.POSITION) {\n        return attribute;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Add metadata for the geometry.\n   * @param dracoGeometry - WASM Draco Object\n   * @param metadata\n   */\n  _addGeometryMetadata(dracoGeometry: PointCloud, metadata: {[key: string]: string}) {\n    const dracoMetadata = new this.draco.Metadata();\n    this._populateDracoMetadata(dracoMetadata, metadata);\n    this.dracoMeshBuilder.AddMetadata(dracoGeometry, dracoMetadata);\n  }\n\n  /**\n   * Add metadata for an attribute to geometry.\n   * @param dracoGeometry - WASM Draco Object\n   * @param uniqueAttributeId\n   * @param metadata\n   */\n  _addAttributeMetadata(\n    dracoGeometry: PointCloud,\n    uniqueAttributeId: number,\n    metadata: Map<string, string> | {[key: string]: string}\n  ) {\n    // Note: Draco JS IDL doesn't seem to expose draco.AttributeMetadata, however it seems to\n    // create such objects automatically from draco.Metadata object.\n    const dracoAttributeMetadata = new this.draco.Metadata();\n    this._populateDracoMetadata(dracoAttributeMetadata, metadata);\n    // Draco3d doc note: Directly add attribute metadata to geometry.\n    // You can do this without explicitly adding |GeometryMetadata| to mesh.\n    this.dracoMeshBuilder.SetMetadataForAttribute(\n      dracoGeometry,\n      uniqueAttributeId,\n      dracoAttributeMetadata\n    );\n  }\n\n  /**\n   * Add contents of object or map to a WASM Draco Metadata Object\n   * @param dracoMetadata - WASM Draco Object\n   * @param metadata\n   */\n  _populateDracoMetadata(\n    dracoMetadata: Metadata,\n    metadata: Map<string, string> | {[key: string]: string}\n  ) {\n    for (const [key, value] of getEntries(metadata)) {\n      switch (typeof value) {\n        case 'number':\n          if (Math.trunc(value) === value) {\n            this.dracoMetadataBuilder.AddIntEntry(dracoMetadata, key, value);\n          } else {\n            this.dracoMetadataBuilder.AddDoubleEntry(dracoMetadata, key, value);\n          }\n          break;\n        case 'object':\n          if (value instanceof Int32Array) {\n            this.dracoMetadataBuilder.AddIntEntryArray(dracoMetadata, key, value, value.length);\n          }\n          break;\n        case 'string':\n        default:\n          this.dracoMetadataBuilder.AddStringEntry(dracoMetadata, key, value);\n      }\n    }\n  }\n}\n\n// HELPER FUNCTIONS\n\n/**\n * Copy encoded data to buffer\n * @param dracoData\n */\nfunction dracoInt8ArrayToArrayBuffer(dracoData: DracoInt8Array) {\n  const byteLength = dracoData.size();\n  const outputBuffer = new ArrayBuffer(byteLength);\n  const outputData = new Int8Array(outputBuffer);\n  for (let i = 0; i < byteLength; ++i) {\n    outputData[i] = dracoData.GetValue(i);\n  }\n  return outputBuffer;\n}\n\n/** Enable iteration over either an object or a map */\nfunction getEntries(container) {\n  const hasEntriesFunc = container.entries && !container.hasOwnProperty('entries');\n  return hasEntriesFunc ? container.entries() : Object.entries(container);\n}\n"],"file":"draco-builder.js"}