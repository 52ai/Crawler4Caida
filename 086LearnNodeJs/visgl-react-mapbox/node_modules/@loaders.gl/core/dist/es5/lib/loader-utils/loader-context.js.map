{"version":3,"sources":["../../../../src/lib/loader-utils/loader-context.ts"],"names":["getLoaderContext","context","options","previousContext","resolvedContext","fetch","Array","isArray","loaders","getLoadersFromContext","candidateLoaders","contextLoaders","length"],"mappings":";;;;;;;;;;;;;;AACA;;;;;;AAWO,SAASA,gBAAT,CACLC,OADK,EAELC,OAFK,EAIU;AAAA,MADfC,eACe,uEADyB,IACzB;;AAGf,MAAIA,eAAJ,EAAqB;AACnB,WAAOA,eAAP;AACD;;AAED,MAAMC,eAA8B;AAClCC,IAAAA,KAAK,EAAE,mCAAiBH,OAAjB,EAA0BD,OAA1B;AAD2B,KAE/BA,OAF+B,CAApC;;AAMA,MAAI,CAACK,KAAK,CAACC,OAAN,CAAcH,eAAe,CAACI,OAA9B,CAAL,EAA6C;AAC3CJ,IAAAA,eAAe,CAACI,OAAhB,GAA0B,IAA1B;AACD;;AAED,SAAOJ,eAAP;AACD;;AAGM,SAASK,qBAAT,CACLD,OADK,EAELP,OAFK,EAGL;AAEA,MAAI,CAACA,OAAD,IAAYO,OAAZ,IAAuB,CAACF,KAAK,CAACC,OAAN,CAAcC,OAAd,CAA5B,EAAoD;AAClD,WAAOA,OAAP;AACD;;AAGD,MAAIE,gBAAJ;;AACA,MAAIF,OAAJ,EAAa;AACXE,IAAAA,gBAAgB,GAAGJ,KAAK,CAACC,OAAN,CAAcC,OAAd,IAAyBA,OAAzB,GAAmC,CAACA,OAAD,CAAtD;AACD;;AACD,MAAIP,OAAO,IAAIA,OAAO,CAACO,OAAvB,EAAgC;AAC9B,QAAMG,cAAc,GAAGL,KAAK,CAACC,OAAN,CAAcN,OAAO,CAACO,OAAtB,IAAiCP,OAAO,CAACO,OAAzC,GAAmD,CAACP,OAAO,CAACO,OAAT,CAA1E;AACAE,IAAAA,gBAAgB,GAAGA,gBAAgB,8CAAOA,gBAAP,oCAA4BC,cAA5B,KAA8CA,cAAjF;AACD;;AAED,SAAOD,gBAAgB,IAAIA,gBAAgB,CAACE,MAArC,GAA8CF,gBAA9C,GAAiE,IAAxE;AACD","sourcesContent":["import type {Loader, LoaderOptions, LoaderContext} from '@loaders.gl/loader-utils';\nimport {getFetchFunction} from './option-utils';\n\n/**\n * \"sub\" loaders invoked by other loaders get a \"context\" injected on `this`\n * The context will inject core methods like `parse` and contain information\n * about loaders and options passed in to the top-level `parse` call.\n *\n * @param context\n * @param options\n * @param previousContext\n */\nexport function getLoaderContext(\n  context: Omit<LoaderContext, 'fetch'> & Partial<Pick<LoaderContext, 'fetch'>>,\n  options?: LoaderOptions,\n  previousContext: LoaderContext | null = null\n): LoaderContext {\n  // For recursive calls, we already have a context\n  // TODO - add any additional loaders to context?\n  if (previousContext) {\n    return previousContext;\n  }\n\n  const resolvedContext: LoaderContext = {\n    fetch: getFetchFunction(options, context),\n    ...context\n  };\n\n  // Recursive loading does not use single loader\n  if (!Array.isArray(resolvedContext.loaders)) {\n    resolvedContext.loaders = null;\n  }\n\n  return resolvedContext;\n}\n\n// eslint-disable-next-line complexity\nexport function getLoadersFromContext(\n  loaders: Loader[] | Loader | undefined,\n  context?: LoaderContext\n) {\n  // A single non-array loader is force selected, but only on top-level (context === null)\n  if (!context && loaders && !Array.isArray(loaders)) {\n    return loaders;\n  }\n\n  // Create a merged list\n  let candidateLoaders;\n  if (loaders) {\n    candidateLoaders = Array.isArray(loaders) ? loaders : [loaders];\n  }\n  if (context && context.loaders) {\n    const contextLoaders = Array.isArray(context.loaders) ? context.loaders : [context.loaders];\n    candidateLoaders = candidateLoaders ? [...candidateLoaders, ...contextLoaders] : contextLoaders;\n  }\n  // If no loaders, return null to look in globally registered loaders\n  return candidateLoaders && candidateLoaders.length ? candidateLoaders : null;\n}\n"],"file":"loader-context.js"}