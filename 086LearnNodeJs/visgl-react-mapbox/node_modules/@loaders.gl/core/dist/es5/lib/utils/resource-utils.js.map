{"version":3,"sources":["../../../../src/lib/utils/resource-utils.ts"],"names":["QUERY_STRING_PATTERN","getResourceUrlAndType","resource","url","stripQueryString","contentTypeHeader","headers","get","type","name","getResourceContentLength","size","length","ArrayBuffer","byteLength","isView","replace"],"mappings":";;;;;;;;AAAA;;AACA;;AAEA,IAAMA,oBAAoB,GAAG,MAA7B;;AAUO,SAASC,qBAAT,CAA+BC,QAA/B,EAA2E;AAEhF,MAAI,wBAAWA,QAAX,CAAJ,EAA0B;AACxB,QAAMC,GAAG,GAAGC,gBAAgB,CAACF,QAAQ,CAACC,GAAT,IAAgB,EAAjB,CAA5B;AACA,QAAME,iBAAiB,GAAGH,QAAQ,CAACI,OAAT,CAAiBC,GAAjB,CAAqB,cAArB,KAAwC,EAAlE;AACA,WAAO;AACLJ,MAAAA,GAAG,EAAHA,GADK;AAELK,MAAAA,IAAI,EAAE,kCAAcH,iBAAd,KAAoC,yCAAqBF,GAArB;AAFrC,KAAP;AAID;;AAGD,MAAI,oBAAOD,QAAP,CAAJ,EAAsB;AACpB,WAAO;AAGLC,MAAAA,GAAG,EAAEC,gBAAgB,CAACF,QAAQ,CAACO,IAAT,IAAiB,EAAlB,CAHhB;AAILD,MAAAA,IAAI,EAAEN,QAAQ,CAACM,IAAT,IAAiB;AAJlB,KAAP;AAMD;;AAED,MAAI,OAAON,QAAP,KAAoB,QAAxB,EAAkC;AAChC,WAAO;AAELC,MAAAA,GAAG,EAAEC,gBAAgB,CAACF,QAAD,CAFhB;AAILM,MAAAA,IAAI,EAAE,yCAAqBN,QAArB;AAJD,KAAP;AAMD;;AAGD,SAAO;AACLC,IAAAA,GAAG,EAAE,EADA;AAELK,IAAAA,IAAI,EAAE;AAFD,GAAP;AAID;;AASM,SAASE,wBAAT,CAAkCR,QAAlC,EAAyD;AAC9D,MAAI,wBAAWA,QAAX,CAAJ,EAA0B;AACxB,WAAOA,QAAQ,CAACI,OAAT,CAAiB,gBAAjB,KAAsC,CAAC,CAA9C;AACD;;AACD,MAAI,oBAAOJ,QAAP,CAAJ,EAAsB;AACpB,WAAOA,QAAQ,CAACS,IAAhB;AACD;;AACD,MAAI,OAAOT,QAAP,KAAoB,QAAxB,EAAkC;AAEhC,WAAOA,QAAQ,CAACU,MAAhB;AACD;;AACD,MAAIV,QAAQ,YAAYW,WAAxB,EAAqC;AACnC,WAAOX,QAAQ,CAACY,UAAhB;AACD;;AACD,MAAID,WAAW,CAACE,MAAZ,CAAmBb,QAAnB,CAAJ,EAAkC;AAChC,WAAOA,QAAQ,CAACY,UAAhB;AACD;;AACD,SAAO,CAAC,CAAR;AACD;;AAED,SAASV,gBAAT,CAA0BD,GAA1B,EAA+B;AAC7B,SAAOA,GAAG,CAACa,OAAJ,CAAYhB,oBAAZ,EAAkC,EAAlC,CAAP;AACD","sourcesContent":["import {isResponse, isBlob} from '../../javascript-utils/is-type';\nimport {parseMIMEType, parseMIMETypeFromURL} from './mime-type-utils';\n\nconst QUERY_STRING_PATTERN = /\\?.*/;\n\n/**\n * Returns an object with `url` and (MIME) `type` fields\n * If it cannot determine url or type, the corresponding value will be an empty string\n *\n * @param resource Any type, but only Responses, string URLs and data URLs are processed\n *\n * @todo string parameters are assumed to be URLs\n */\nexport function getResourceUrlAndType(resource: any): {url: string; type: string} {\n  // If resource is a response, it contains the information directly\n  if (isResponse(resource)) {\n    const url = stripQueryString(resource.url || '');\n    const contentTypeHeader = resource.headers.get('content-type') || '';\n    return {\n      url,\n      type: parseMIMEType(contentTypeHeader) || parseMIMETypeFromURL(url)\n    };\n  }\n\n  // If the resource is a Blob or a File (subclass of Blob)\n  if (isBlob(resource)) {\n    return {\n      // File objects have a \"name\" property. Blob objects don't have any\n      // url (name) information\n      url: stripQueryString(resource.name || ''),\n      type: resource.type || ''\n    };\n  }\n\n  if (typeof resource === 'string') {\n    return {\n      // TODO this could mess up data URL but it doesn't matter as it is just used for inference\n      url: stripQueryString(resource),\n      // If a data url\n      type: parseMIMETypeFromURL(resource)\n    };\n  }\n\n  // Unknown\n  return {\n    url: '',\n    type: ''\n  };\n}\n\n/**\n  * Returns (approximate) content length for a resource if it can be determined.\n  * Returns -1 if content length cannot be determined.\n  * @param resource\n\n  * @note string parameters are NOT assumed to be URLs\n  */\nexport function getResourceContentLength(resource: any): number {\n  if (isResponse(resource)) {\n    return resource.headers['content-length'] || -1;\n  }\n  if (isBlob(resource)) {\n    return resource.size;\n  }\n  if (typeof resource === 'string') {\n    // TODO - handle data URL?\n    return resource.length;\n  }\n  if (resource instanceof ArrayBuffer) {\n    return resource.byteLength;\n  }\n  if (ArrayBuffer.isView(resource)) {\n    return resource.byteLength;\n  }\n  return -1;\n}\n\nfunction stripQueryString(url) {\n  return url.replace(QUERY_STRING_PATTERN, '');\n}\n"],"file":"resource-utils.js"}