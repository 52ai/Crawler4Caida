{"version":3,"sources":["../../../../src/lib/api/select-loader.ts"],"names":["EXT_PATTERN","selectLoader","data","loaders","options","context","validHTTPResponse","loader","selectLoaderSync","nothrow","slice","arrayBuffer","Error","getNoValidLoaderMessage","Array","isArray","candidateLoaders","concat","ignoreRegisteredLoaders","push","normalizeLoaders","selectLoaderInternal","url","type","testUrl","reason","mimeType","findLoaderByMIMEType","findLoaderByUrl","findLoaderByInitialBytes","getFirstCharacters","fallbackMimeType","log","name","Response","status","message","path","filename","firstCharacters","match","exec","extension","findLoaderByExtension","toLowerCase","extensions","loaderExtension","mimeTypes","includes","id","testDataAgainstText","ArrayBuffer","isView","testDataAgainstBinary","buffer","byteOffset","testText","tests","some","test","startsWith","testBinary","byteLength","magic","getMagicString","length","dataView","DataView","i","String","fromCharCode","getUint8"],"mappings":"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","sourcesContent":["import type {LoaderContext, LoaderOptions, Loader} from '@loaders.gl/loader-utils';\nimport {compareArrayBuffers, path} from '@loaders.gl/loader-utils';\nimport {normalizeLoader} from '../loader-utils/normalize-loader';\nimport {log} from '../utils/log';\nimport {getResourceUrlAndType} from '../utils/resource-utils';\nimport {getRegisteredLoaders} from './register-loaders';\nimport {isBlob} from '../../javascript-utils/is-type';\n\nconst EXT_PATTERN = /\\.([^.]+)$/;\n\n// TODO - Need a variant that peeks at streams for parseInBatches\n// TODO - Detect multiple matching loaders? Use heuristics to grade matches?\n// TODO - Allow apps to pass context to disambiguate between multiple matches (e.g. multiple .json formats)?\n\n/**\n * Find a loader that matches file extension and/or initial file content\n * Search the loaders array argument for a loader that matches url extension or initial data\n * Returns: a normalized loader\n * @param data data to assist\n * @param loaders\n * @param options\n * @param context used internally, applications should not provide this parameter\n */\nexport async function selectLoader(\n  data: Response | Blob | ArrayBuffer | string,\n  loaders: Loader[] | Loader = [],\n  options?: LoaderOptions,\n  context?: LoaderContext\n): Promise<Loader | null> {\n  if (!validHTTPResponse(data)) {\n    return null;\n  }\n\n  // First make a sync attempt, disabling exceptions\n  let loader = selectLoaderSync(data, loaders, {...options, nothrow: true}, context);\n  if (loader) {\n    return loader;\n  }\n\n  // For Blobs and Files, try to asynchronously read a small initial slice and test again with that\n  // to see if we can detect by initial content\n  if (isBlob(data)) {\n    data = await (data as Blob).slice(0, 10).arrayBuffer();\n    loader = selectLoaderSync(data, loaders, options, context);\n  }\n\n  // no loader available\n  if (!loader && !options?.nothrow) {\n    throw new Error(getNoValidLoaderMessage(data));\n  }\n\n  return loader;\n}\n\n/**\n * Find a loader that matches file extension and/or initial file content\n * Search the loaders array argument for a loader that matches url extension or initial data\n * Returns: a normalized loader\n * @param data data to assist\n * @param loaders\n * @param options\n * @param context used internally, applications should not provide this parameter\n */\nexport function selectLoaderSync(\n  data: Response | Blob | ArrayBuffer | string,\n  loaders: Loader[] | Loader = [],\n  options?: LoaderOptions,\n  context?: LoaderContext\n): Loader | null {\n  if (!validHTTPResponse(data)) {\n    return null;\n  }\n\n  // eslint-disable-next-line complexity\n  // if only a single loader was provided (not as array), force its use\n  // TODO - Should this behavior be kept and documented?\n  if (loaders && !Array.isArray(loaders)) {\n    // TODO - remove support for legacy loaders\n    return normalizeLoader(loaders);\n  }\n\n  // Build list of candidate loaders that will be searched in order for a match\n  let candidateLoaders: Loader[] = [];\n  // First search supplied loaders\n  if (loaders) {\n    candidateLoaders = candidateLoaders.concat(loaders);\n  }\n  // Then fall back to registered loaders\n  if (!options?.ignoreRegisteredLoaders) {\n    candidateLoaders.push(...getRegisteredLoaders());\n  }\n\n  // TODO - remove support for legacy loaders\n  normalizeLoaders(candidateLoaders);\n\n  const loader = selectLoaderInternal(data, candidateLoaders, options, context);\n\n  // no loader available\n  if (!loader && !options?.nothrow) {\n    throw new Error(getNoValidLoaderMessage(data));\n  }\n\n  return loader;\n}\n\n/** Implements loaders selection logic */\n// eslint-disable-next-line complexity\nfunction selectLoaderInternal(\n  data: Response | Blob | ArrayBuffer | string,\n  loaders: Loader[],\n  options?: LoaderOptions,\n  context?: LoaderContext\n) {\n  const {url, type} = getResourceUrlAndType(data);\n\n  const testUrl = url || context?.url;\n\n  let loader: Loader | null = null;\n  let reason: string = '';\n\n  // if options.mimeType is supplied, it takes precedence\n  if (options?.mimeType) {\n    loader = findLoaderByMIMEType(loaders, options?.mimeType);\n    reason = `match forced by supplied MIME type ${options?.mimeType}`;\n  }\n\n  // Look up loader by url\n  loader = loader || findLoaderByUrl(loaders, testUrl);\n  reason = reason || (loader ? `matched url ${testUrl}` : '');\n\n  // Look up loader by mime type\n  loader = loader || findLoaderByMIMEType(loaders, type);\n  reason = reason || (loader ? `matched MIME type ${type}` : '');\n\n  // Look for loader via initial bytes (Note: not always accessible (e.g. Response, stream, async iterator)\n  loader = loader || findLoaderByInitialBytes(loaders, data);\n  reason = reason || (loader ? `matched initial data ${getFirstCharacters(data)}` : '');\n\n  // Look up loader by fallback mime type\n  loader = loader || findLoaderByMIMEType(loaders, options?.fallbackMimeType);\n  reason = reason || (loader ? `matched fallback MIME type ${type}` : '');\n\n  if (reason) {\n    log.log(1, `selectLoader selected ${loader?.name}: ${reason}.`);\n  }\n\n  return loader;\n}\n\n/** Check HTTP Response */\nfunction validHTTPResponse(data: any): boolean {\n  // HANDLE HTTP status\n  if (data instanceof Response) {\n    // 204 - NO CONTENT. This handles cases where e.g. a tile server responds with 204 for a missing tile\n    if (data.status === 204) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/** Generate a helpful message to help explain why loader selection failed. */\nfunction getNoValidLoaderMessage(data): string {\n  const {url, type} = getResourceUrlAndType(data);\n\n  let message = 'No valid loader found (';\n  message += url ? `${path.filename(url)}, ` : 'no url provided, ';\n  message += `MIME type: ${type ? `\"${type}\"` : 'not provided'}, `;\n  // First characters are only accessible when called on data (string or arrayBuffer).\n  const firstCharacters: string = data ? getFirstCharacters(data) : '';\n  message += firstCharacters ? ` first bytes: \"${firstCharacters}\"` : 'first bytes: not available';\n  message += ')';\n  return message;\n}\n\nfunction normalizeLoaders(loaders: Loader[]): void {\n  for (const loader of loaders) {\n    normalizeLoader(loader);\n  }\n}\n\n// TODO - Would be nice to support http://example.com/file.glb?parameter=1\n// E.g: x = new URL('http://example.com/file.glb?load=1'; x.pathname\nfunction findLoaderByUrl(loaders: Loader[], url?: string): Loader | null {\n  // Get extension\n  const match = url && EXT_PATTERN.exec(url);\n  const extension = match && match[1];\n  return extension ? findLoaderByExtension(loaders, extension) : null;\n}\n\nfunction findLoaderByExtension(loaders: Loader[], extension: string): Loader | null {\n  extension = extension.toLowerCase();\n\n  for (const loader of loaders) {\n    for (const loaderExtension of loader.extensions) {\n      if (loaderExtension.toLowerCase() === extension) {\n        return loader;\n      }\n    }\n  }\n  return null;\n}\n\nfunction findLoaderByMIMEType(loaders, mimeType) {\n  for (const loader of loaders) {\n    if (loader.mimeTypes && loader.mimeTypes.includes(mimeType)) {\n      return loader;\n    }\n\n    // Support referring to loaders using the \"unregistered tree\"\n    // https://en.wikipedia.org/wiki/Media_type#Unregistered_tree\n    if (mimeType === `application/x.${loader.id}`) {\n      return loader;\n    }\n  }\n  return null;\n}\n\nfunction findLoaderByInitialBytes(loaders, data) {\n  if (!data) {\n    return null;\n  }\n\n  for (const loader of loaders) {\n    if (typeof data === 'string') {\n      if (testDataAgainstText(data, loader)) {\n        return loader;\n      }\n    } else if (ArrayBuffer.isView(data)) {\n      // Typed Arrays can have offsets into underlying buffer\n      if (testDataAgainstBinary(data.buffer, data.byteOffset, loader)) {\n        return loader;\n      }\n    } else if (data instanceof ArrayBuffer) {\n      const byteOffset = 0;\n      if (testDataAgainstBinary(data, byteOffset, loader)) {\n        return loader;\n      }\n    }\n    // TODO Handle streaming case (requires creating a new AsyncIterator)\n  }\n  return null;\n}\n\nfunction testDataAgainstText(data, loader) {\n  if (loader.testText) {\n    return loader.testText(data);\n  }\n\n  const tests = Array.isArray(loader.tests) ? loader.tests : [loader.tests];\n  return tests.some((test) => data.startsWith(test));\n}\n\nfunction testDataAgainstBinary(data, byteOffset, loader) {\n  const tests = Array.isArray(loader.tests) ? loader.tests : [loader.tests];\n  return tests.some((test) => testBinary(data, byteOffset, loader, test));\n}\n\nfunction testBinary(data, byteOffset, loader, test) {\n  if (test instanceof ArrayBuffer) {\n    return compareArrayBuffers(test, data, test.byteLength);\n  }\n  switch (typeof test) {\n    case 'function':\n      return test(data, loader);\n\n    case 'string':\n      // Magic bytes check: If `test` is a string, check if binary data starts with that strings\n      const magic = getMagicString(data, byteOffset, test.length);\n      return test === magic;\n\n    default:\n      return false;\n  }\n}\n\nfunction getFirstCharacters(data, length: number = 5) {\n  if (typeof data === 'string') {\n    return data.slice(0, length);\n  } else if (ArrayBuffer.isView(data)) {\n    // Typed Arrays can have offsets into underlying buffer\n    return getMagicString(data.buffer, data.byteOffset, length);\n  } else if (data instanceof ArrayBuffer) {\n    const byteOffset = 0;\n    return getMagicString(data, byteOffset, length);\n  }\n  return '';\n}\n\nfunction getMagicString(arrayBuffer, byteOffset, length) {\n  if (arrayBuffer.byteLength < byteOffset + length) {\n    return '';\n  }\n  const dataView = new DataView(arrayBuffer);\n  let magic = '';\n  for (let i = 0; i < length; i++) {\n    magic += String.fromCharCode(dataView.getUint8(byteOffset + i));\n  }\n  return magic;\n}\n"],"file":"select-loader.js"}