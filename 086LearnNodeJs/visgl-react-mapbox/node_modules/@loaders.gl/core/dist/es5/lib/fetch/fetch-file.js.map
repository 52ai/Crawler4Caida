{"version":3,"sources":["../../../../src/lib/fetch/fetch-file.ts"],"names":["fetchFile","url","options","fetchOptions","fetch"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;SAYsBA,S;;;;;yEAAf,iBACLC,GADK,EAELC,OAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAID,OAAOD,GAAP,KAAe,QAJd;AAAA;AAAA;AAAA;;AAKHA,YAAAA,GAAG,GAAG,8BAAYA,GAAZ,CAAN;AAEIE,YAAAA,YAPD,GAO6BD,OAP7B;;AAQH,gBAAIA,OAAO,SAAP,IAAAA,OAAO,WAAP,IAAAA,OAAO,CAAEE,KAAT,IAAkB,QAAOF,OAAP,aAAOA,OAAP,uBAAOA,OAAO,CAAEE,KAAhB,MAA0B,UAAhD,EAA4D;AAC1DD,cAAAA,YAAY,GAAGD,OAAO,CAACE,KAAvB;AACD;;AAVE;AAAA,mBAYUA,KAAK,CAACH,GAAD,EAAME,YAAN,CAZf;;AAAA;AAAA;;AAAA;AAAA;AAAA,mBAeQ,iCAAaF,GAAb,CAfR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import {resolvePath} from '@loaders.gl/loader-utils';\nimport {makeResponse} from '../utils/response-utils';\n// import {getErrorMessageFromResponse} from './fetch-error-message';\n\n/**\n * fetch compatible function\n * Reads file data from:\n * - http/http urls\n * - data urls\n * - File/Blob objects\n * Leverages `@loaders.gl/polyfills` for Node.js support\n * Respects pathPrefix and file aliases\n */\nexport async function fetchFile(\n  url: string | Blob,\n  options?: RequestInit & {fetch?: RequestInit | Function}\n): Promise<Response> {\n  if (typeof url === 'string') {\n    url = resolvePath(url);\n\n    let fetchOptions: RequestInit = options as RequestInit;\n    if (options?.fetch && typeof options?.fetch !== 'function') {\n      fetchOptions = options.fetch;\n    }\n\n    return await fetch(url, fetchOptions);\n  }\n\n  return await makeResponse(url);\n}\n"],"file":"fetch-file.js"}