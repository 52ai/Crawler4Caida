{"version":3,"sources":["../../../../src/lib/fetch/read-file.ts"],"names":["readFileSync","url","options","isBrowser","buffer","fs","nothrow"],"mappings":";;;;;;;AACA;;AASO,SAASA,YAAT,CAAsBC,GAAtB,EAAyD;AAAA,MAAtBC,OAAsB,uEAAJ,EAAI;AAC9DD,EAAAA,GAAG,GAAG,8BAAYA,GAAZ,CAAN;;AAOA,MAAI,CAACE,sBAAL,EAAgB;AACd,QAAMC,MAAM,GAAGC,gBAAGL,YAAH,CAAgBC,GAAhB,EAAqBC,OAArB,CAAf;;AACA,WAAO,OAAOE,MAAP,KAAkB,QAAlB,GAA6B,gCAAcA,MAAd,CAA7B,GAAqDA,MAA5D;AACD;;AAGD,MAAI,CAACF,OAAO,CAACI,OAAb,EAAsB;AAEpB,6BAAO,KAAP;AACD;;AAED,SAAO,IAAP;AACD","sourcesContent":["// File read\nimport {isBrowser, resolvePath, fs, toArrayBuffer} from '@loaders.gl/loader-utils';\nimport {assert} from '@loaders.gl/loader-utils';\n\n// TODO - this is not tested\n// const isDataURL = (url) => url.startsWith('data:');\n\n/**\n * In a few cases (data URIs, node.js) \"files\" can be read synchronously\n */\nexport function readFileSync(url: string, options: object = {}) {\n  url = resolvePath(url);\n\n  // Only support this if we can also support sync data URL decoding in browser\n  // if (isDataURL(url)) {\n  //   return decodeDataUri(url);\n  // }\n\n  if (!isBrowser) {\n    const buffer = fs.readFileSync(url, options);\n    return typeof buffer !== 'string' ? toArrayBuffer(buffer) : buffer;\n  }\n\n  // @ts-ignore\n  if (!options.nothrow) {\n    // throw new Error('Cant load URI synchronously');\n    assert(false);\n  }\n\n  return null;\n}\n"],"file":"read-file.js"}