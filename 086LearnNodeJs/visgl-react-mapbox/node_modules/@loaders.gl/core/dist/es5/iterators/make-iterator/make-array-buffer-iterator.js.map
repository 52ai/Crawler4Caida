{"version":3,"sources":["../../../../src/iterators/make-iterator/make-array-buffer-iterator.ts"],"names":["makeArrayBufferIterator","DEFAULT_CHUNK_SIZE","arrayBuffer","options","chunkSize","byteOffset","byteLength","chunkByteLength","Math","min","chunk","ArrayBuffer","sourceArray","Uint8Array","chunkArray","set"],"mappings":";;;;;;;;;;;wCAUiBA,uB;;AARjB,IAAMC,kBAAkB,GAAG,MAAM,IAAjC;;AAQO,SAAUD,uBAAV,CACLE,WADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAELC,UAAAA,OAFK,2DAEsB,EAFtB;AAAA,+BAIoCA,OAJpC,CAIEC,SAJF,EAIEA,SAJF,mCAIcH,kBAJd;AAMDI,UAAAA,UANC,GAMY,CANZ;;AAAA;AAAA,gBAQEA,UAAU,GAAGH,WAAW,CAACI,UAR3B;AAAA;AAAA;AAAA;;AAUGC,UAAAA,eAVH,GAUqBC,IAAI,CAACC,GAAL,CAASP,WAAW,CAACI,UAAZ,GAAyBD,UAAlC,EAA8CD,SAA9C,CAVrB;AAWGM,UAAAA,KAXH,GAWW,IAAIC,WAAJ,CAAgBJ,eAAhB,CAXX;AAcGK,UAAAA,WAdH,GAciB,IAAIC,UAAJ,CAAeX,WAAf,EAA4BG,UAA5B,EAAwCE,eAAxC,CAdjB;AAeGO,UAAAA,UAfH,GAegB,IAAID,UAAJ,CAAeH,KAAf,CAfhB;AAgBHI,UAAAA,UAAU,CAACC,GAAX,CAAeH,WAAf;AAGAP,UAAAA,UAAU,IAAIE,eAAd;AAnBG;AAoBH,iBAAMG,KAAN;;AApBG;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import type {IteratorOptions} from './make-iterator';\n\nconst DEFAULT_CHUNK_SIZE = 256 * 1024;\n\n/**\n * Returns an iterator that breaks a big ArrayBuffer into chunks and yields them one-by-one\n * @param blob ArrayBuffer to iterate over\n * @param options\n * @param options.chunkSize\n */\nexport function* makeArrayBufferIterator(\n  arrayBuffer: ArrayBuffer,\n  options: IteratorOptions = {}\n): Iterable<ArrayBuffer> {\n  const {chunkSize = DEFAULT_CHUNK_SIZE} = options;\n\n  let byteOffset = 0;\n\n  while (byteOffset < arrayBuffer.byteLength) {\n    // Create a chunk of the right size\n    const chunkByteLength = Math.min(arrayBuffer.byteLength - byteOffset, chunkSize);\n    const chunk = new ArrayBuffer(chunkByteLength);\n\n    // Copy data from the big chunk\n    const sourceArray = new Uint8Array(arrayBuffer, byteOffset, chunkByteLength);\n    const chunkArray = new Uint8Array(chunk);\n    chunkArray.set(sourceArray);\n\n    // yield the chunk\n    byteOffset += chunkByteLength;\n    yield chunk;\n  }\n}\n"],"file":"make-array-buffer-iterator.js"}