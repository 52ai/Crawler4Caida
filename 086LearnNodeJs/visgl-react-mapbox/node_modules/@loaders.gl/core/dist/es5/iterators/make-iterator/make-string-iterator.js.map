{"version":3,"sources":["../../../../src/iterators/make-iterator/make-string-iterator.ts"],"names":["makeStringIterator","DEFAULT_CHUNK_SIZE","string","options","chunkSize","offset","textEncoder","TextEncoder","length","chunkLength","Math","min","chunk","slice","encode"],"mappings":";;;;;;;;;;;wCAUiBA,kB;;AARjB,IAAMC,kBAAkB,GAAG,MAAM,IAAjC;;AAQO,SAAUD,kBAAV,CACLE,MADK,EAELC,OAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAICC,UAAAA,SAJD,GAIa,CAAAD,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEC,SAAT,KAAsBH,kBAJnC;AAMDI,UAAAA,MANC,GAMQ,CANR;AAOCC,UAAAA,WAPD,GAOe,IAAIC,WAAJ,EAPf;;AAAA;AAAA,gBAQEF,MAAM,GAAGH,MAAM,CAACM,MARlB;AAAA;AAAA;AAAA;;AAUGC,UAAAA,WAVH,GAUiBC,IAAI,CAACC,GAAL,CAAST,MAAM,CAACM,MAAP,GAAgBH,MAAzB,EAAiCD,SAAjC,CAVjB;AAWGQ,UAAAA,KAXH,GAWWV,MAAM,CAACW,KAAP,CAAaR,MAAb,EAAqBA,MAAM,GAAGI,WAA9B,CAXX;AAYHJ,UAAAA,MAAM,IAAII,WAAV;AAZG;AAeH,iBAAMH,WAAW,CAACQ,MAAZ,CAAmBF,KAAnB,CAAN;;AAfG;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import type {IteratorOptions} from './make-iterator';\n\nconst DEFAULT_CHUNK_SIZE = 256 * 1024;\n\n/**\n * Returns an iterator that breaks a big string into chunks and yields them one-by-one as ArrayBuffers\n * @param blob string to iterate over\n * @param options\n * @param options.chunkSize\n */\nexport function* makeStringIterator(\n  string: string,\n  options?: IteratorOptions\n): Iterable<ArrayBuffer> {\n  const chunkSize = options?.chunkSize || DEFAULT_CHUNK_SIZE;\n\n  let offset = 0;\n  const textEncoder = new TextEncoder();\n  while (offset < string.length) {\n    // Create a chunk of the right size\n    const chunkLength = Math.min(string.length - offset, chunkSize);\n    const chunk = string.slice(offset, offset + chunkLength);\n    offset += chunkLength;\n\n    // yield an ArrayBuffer chunk\n    yield textEncoder.encode(chunk);\n  }\n}\n"],"file":"make-string-iterator.js"}