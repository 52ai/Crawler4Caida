"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parse = void 0;
const worker_utils_1 = require("@loaders.gl/worker-utils");
const loader_utils_1 = require("@loaders.gl/loader-utils");
const normalize_loader_1 = require("../loader-utils/normalize-loader");
const is_type_1 = require("../../javascript-utils/is-type");
const option_utils_1 = require("../loader-utils/option-utils");
const get_data_1 = require("../loader-utils/get-data");
const loader_context_1 = require("../loader-utils/loader-context");
const resource_utils_1 = require("../utils/resource-utils");
const select_loader_1 = require("./select-loader");
/**
 * Parses `data` using a specified loader
 * @param data
 * @param loaders
 * @param options
 * @param context
 */
async function parse(data, loaders, options, context) {
    (0, worker_utils_1.assert)(!context || typeof context === 'object'); // parse no longer accepts final url
    // Signature: parse(data, options, context | url)
    // Uses registered loaders
    if (loaders && !Array.isArray(loaders) && !(0, normalize_loader_1.isLoaderObject)(loaders)) {
        context = undefined; // context not supported in short signature
        options = loaders;
        loaders = undefined;
    }
    data = await data; // Resolve any promise
    options = options || {};
    // Extract a url for auto detection
    const { url } = (0, resource_utils_1.getResourceUrlAndType)(data);
    // Chooses a loader (and normalizes it)
    // Also use any loaders in the context, new loaders take priority
    const typedLoaders = loaders;
    const candidateLoaders = (0, loader_context_1.getLoadersFromContext)(typedLoaders, context);
    // todo hacky type cast
    const loader = await (0, select_loader_1.selectLoader)(data, candidateLoaders, options);
    // Note: if no loader was found, if so just return null
    if (!loader) {
        return null;
    }
    // Normalize options
    options = (0, option_utils_1.normalizeOptions)(options, loader, candidateLoaders, url);
    // Get a context (if already present, will be unchanged)
    context = (0, loader_context_1.getLoaderContext)({ url, parse, loaders: candidateLoaders }, options, context);
    return await parseWithLoader(loader, data, options, context);
}
exports.parse = parse;
// TODO: support progress and abort
// TODO - should accept loader.parseAsyncIterator and concatenate.
async function parseWithLoader(loader, data, options, context) {
    (0, worker_utils_1.validateWorkerVersion)(loader);
    if ((0, is_type_1.isResponse)(data)) {
        // Serialize to support passing the response to web worker
        const response = data;
        const { ok, redirected, status, statusText, type, url } = response;
        const headers = Object.fromEntries(response.headers.entries());
        context.response = { headers, ok, redirected, status, statusText, type, url };
    }
    data = await (0, get_data_1.getArrayBufferOrStringFromData)(data, loader, options);
    // First check for synchronous text parser, wrap results in promises
    if (loader.parseTextSync && typeof data === 'string') {
        options.dataType = 'text';
        return loader.parseTextSync(data, options, context, loader);
    }
    // If we have a workerUrl and the loader can parse the given options efficiently in a worker
    if ((0, loader_utils_1.canParseWithWorker)(loader, options)) {
        return await (0, loader_utils_1.parseWithWorker)(loader, data, options, context, parse);
    }
    // Check for asynchronous parser
    if (loader.parseText && typeof data === 'string') {
        return await loader.parseText(data, options, context, loader);
    }
    if (loader.parse) {
        return await loader.parse(data, options, context, loader);
    }
    // This should not happen, all sync loaders should also offer `parse` function
    (0, worker_utils_1.assert)(!loader.parseSync);
    // TBD - If asynchronous parser not available, return null
    throw new Error(`${loader.id} loader - no parser found and worker is disabled`);
}
