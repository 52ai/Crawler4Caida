{"version":3,"sources":["../../../../src/iterators/make-iterator/make-iterator.ts"],"names":["makeStringIterator","makeArrayBufferIterator","makeBlobIterator","makeStreamIterator","isBlob","isReadableStream","isResponse","makeIterator","data","options","ArrayBuffer","response","body","Error"],"mappings":"AAEA,SAAQA,kBAAR,QAAiC,wBAAjC;AACA,SAAQC,uBAAR,QAAsC,8BAAtC;AACA,SAAQC,gBAAR,QAA+B,sBAA/B;AAEA,SAAQC,kBAAR,QAAiC,wBAAjC;AACA,SAAQC,MAAR,EAAgBC,gBAAhB,EAAkCC,UAAlC,QAAmD,gCAAnD;AAiBA,OAAO,SAASC,YAAT,CACLC,IADK,EAELC,OAFK,EAG+C;AACpD,MAAI,OAAOD,IAAP,KAAgB,QAApB,EAA8B;AAE5B,WAAOR,kBAAkB,CAACQ,IAAD,EAAOC,OAAP,CAAzB;AACD;;AACD,MAAID,IAAI,YAAYE,WAApB,EAAiC;AAC/B,WAAOT,uBAAuB,CAACO,IAAD,EAAOC,OAAP,CAA9B;AACD;;AACD,MAAIL,MAAM,CAACI,IAAD,CAAV,EAAkB;AAChB,WAAON,gBAAgB,CAACM,IAAD,EAAeC,OAAf,CAAvB;AACD;;AACD,MAAIJ,gBAAgB,CAACG,IAAD,CAApB,EAA4B;AAC1B,WAAOL,kBAAkB,CAACK,IAAD,EAAyBC,OAAzB,CAAzB;AACD;;AACD,MAAIH,UAAU,CAACE,IAAD,CAAd,EAAsB;AACpB,UAAMG,QAAQ,GAAGH,IAAjB;AACA,WAAOL,kBAAkB,CAACQ,QAAQ,CAACC,IAAV,EAAkCH,OAAlC,CAAzB;AACD;;AACD,QAAM,IAAII,KAAJ,CAAU,cAAV,CAAN;AACD","sourcesContent":["import type {ReadStream} from 'fs';\n\nimport {makeStringIterator} from './make-string-iterator';\nimport {makeArrayBufferIterator} from './make-array-buffer-iterator';\nimport {makeBlobIterator} from './make-blob-iterator';\nimport type {StreamIteratorOptions} from './make-stream-iterator';\nimport {makeStreamIterator} from './make-stream-iterator';\nimport {isBlob, isReadableStream, isResponse} from '../../javascript-utils/is-type';\n\n/**\n * @param [options.chunkSize]\n */\nexport type IteratorOptions = StreamIteratorOptions & {\n  chunkSize?: number;\n};\n\n/**\n * Returns an iterator that breaks its input into chunks and yields them one-by-one.\n * @param data\n * @param options\n * @returns\n * This function can e.g. be used to enable data sources that can only be read atomically\n * (such as `Blob` and `File` via `FileReader`) to still be parsed in batches.\n */\nexport function makeIterator(\n  data: ArrayBuffer | string | Blob | Response | ReadableStream | ReadStream,\n  options?: IteratorOptions\n): AsyncIterable<ArrayBuffer> | Iterable<ArrayBuffer> {\n  if (typeof data === 'string') {\n    // Note: Converts string chunks to binary\n    return makeStringIterator(data, options);\n  }\n  if (data instanceof ArrayBuffer) {\n    return makeArrayBufferIterator(data, options);\n  }\n  if (isBlob(data)) {\n    return makeBlobIterator(data as Blob, options);\n  }\n  if (isReadableStream(data)) {\n    return makeStreamIterator(data as ReadableStream, options);\n  }\n  if (isResponse(data)) {\n    const response = data as Response;\n    return makeStreamIterator(response.body as ReadableStream, options);\n  }\n  throw new Error('makeIterator');\n}\n"],"file":"make-iterator.js"}