{"version":3,"sources":["../../../../src/lib/progress/fetch-progress.ts"],"names":["fetchProgress","response","onProgress","onDone","onError","ok","body","contentLength","headers","get","totalBytes","parseInt","ReadableStream","getReader","progressStream","start","controller","reader","read","Response","loadedBytes","done","value","close","byteLength","percent","Math","round","enqueue","error"],"mappings":"AAKA,eAAe,eAAeA,aAAf,CACbC,QADa,EAEbC,UAFa,EAGbC,MAAM,GAAG,MAAM,CAAE,CAHJ,EAIbC,OAAO,GAAG,MAAM,CAAE,CAJL,EAKb;AACAH,EAAAA,QAAQ,GAAG,MAAMA,QAAjB;;AACA,MAAI,CAACA,QAAQ,CAACI,EAAd,EAAkB;AAEhB,WAAOJ,QAAP;AACD;;AACD,QAAMK,IAAI,GAAGL,QAAQ,CAACK,IAAtB;;AACA,MAAI,CAACA,IAAL,EAAW;AAET,WAAOL,QAAP;AACD;;AACD,QAAMM,aAAa,GAAGN,QAAQ,CAACO,OAAT,CAAiBC,GAAjB,CAAqB,gBAArB,KAA0C,CAAhE;AACA,QAAMC,UAAU,GAAGH,aAAa,IAAII,QAAQ,CAACJ,aAAD,CAA5C;;AACA,MAAI,EAAEA,aAAa,GAAG,CAAlB,CAAJ,EAA0B;AACxB,WAAON,QAAP;AACD;;AAED,MAAI,OAAOW,cAAP,KAA0B,WAA1B,IAAyC,CAACN,IAAI,CAACO,SAAnD,EAA8D;AAC5D,WAAOZ,QAAP;AACD;;AAGD,QAAMa,cAAc,GAAG,IAAIF,cAAJ,CAAmB;AACxC,UAAMG,KAAN,CAAYC,UAAZ,EAAwB;AACtB,YAAMC,MAAM,GAAGX,IAAI,CAACO,SAAL,EAAf;AACA,YAAMK,IAAI,CAACF,UAAD,EAAaC,MAAb,EAAqB,CAArB,EAAwBP,UAAxB,EAAoCR,UAApC,EAAgDC,MAAhD,EAAwDC,OAAxD,CAAV;AACD;;AAJuC,GAAnB,CAAvB;AAOA,SAAO,IAAIe,QAAJ,CAAaL,cAAb,CAAP;AACD;;AAKD,eAAeI,IAAf,CAAoBF,UAApB,EAAgCC,MAAhC,EAAwCG,WAAxC,EAAqDV,UAArD,EAAiER,UAAjE,EAA6EC,MAA7E,EAAqFC,OAArF,EAA8F;AAC5F,MAAI;AACF,UAAM;AAACiB,MAAAA,IAAD;AAAOC,MAAAA;AAAP,QAAgB,MAAML,MAAM,CAACC,IAAP,EAA5B;;AACA,QAAIG,IAAJ,EAAU;AACRlB,MAAAA,MAAM;AACNa,MAAAA,UAAU,CAACO,KAAX;AACA;AACD;;AACDH,IAAAA,WAAW,IAAIE,KAAK,CAACE,UAArB;AACA,UAAMC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAYP,WAAW,GAAGV,UAAf,GAA6B,GAAxC,CAAhB;AACAR,IAAAA,UAAU,CAACuB,OAAD,EAAU;AAACL,MAAAA,WAAD;AAAcV,MAAAA;AAAd,KAAV,CAAV;AACAM,IAAAA,UAAU,CAACY,OAAX,CAAmBN,KAAnB;AACA,UAAMJ,IAAI,CAACF,UAAD,EAAaC,MAAb,EAAqBG,WAArB,EAAkCV,UAAlC,EAA8CR,UAA9C,EAA0DC,MAA1D,EAAkEC,OAAlE,CAAV;AACD,GAZD,CAYE,OAAOyB,KAAP,EAAc;AACdb,IAAAA,UAAU,CAACa,KAAX,CAAiBA,KAAjB;AACAzB,IAAAA,OAAO,CAACyB,KAAD,CAAP;AACD;AACF","sourcesContent":["// Forked from github AnthumChris/fetch-progress-indicators under MIT license\n\n/**\n * Intercepts the Response stream and creates a new Response\n */\nexport default async function fetchProgress(\n  response: Response | Promise<Response>,\n  onProgress: any, // TODO better callback types\n  onDone = () => {},\n  onError = () => {}\n) {\n  response = await response;\n  if (!response.ok) {\n    // ERROR checking needs to be done separately\n    return response;\n  }\n  const body = response.body;\n  if (!body) {\n    // 'ReadableStream not yet supported in this browser.\n    return response;\n  }\n  const contentLength = response.headers.get('content-length') || 0;\n  const totalBytes = contentLength && parseInt(contentLength);\n  if (!(contentLength > 0)) {\n    return response;\n  }\n  // Currently override only implemented in browser\n  if (typeof ReadableStream === 'undefined' || !body.getReader) {\n    return response;\n  }\n\n  // Create a new stream that invisbly wraps original stream\n  const progressStream = new ReadableStream({\n    async start(controller) {\n      const reader = body.getReader();\n      await read(controller, reader, 0, totalBytes, onProgress, onDone, onError);\n    }\n  });\n\n  return new Response(progressStream);\n}\n\n// Forward to original streams controller\n// TODO - this causes a crazy deep \"async stack\"... rewrite as async iterator?\n// eslint-disable-next-line max-params\nasync function read(controller, reader, loadedBytes, totalBytes, onProgress, onDone, onError) {\n  try {\n    const {done, value} = await reader.read();\n    if (done) {\n      onDone();\n      controller.close();\n      return;\n    }\n    loadedBytes += value.byteLength;\n    const percent = Math.round((loadedBytes / totalBytes) * 100);\n    onProgress(percent, {loadedBytes, totalBytes});\n    controller.enqueue(value);\n    await read(controller, reader, loadedBytes, totalBytes, onProgress, onDone, onError);\n  } catch (error) {\n    controller.error(error);\n    onError(error);\n  }\n}\n"],"file":"fetch-progress.js"}