{"version":3,"sources":["../../../../src/lib/loader-utils/normalize-loader.ts"],"names":["assert","isLoaderObject","loader","Array","isArray","hasExtensions","extensions","normalizeLoader","options","parseTextSync","parseText","text","binary"],"mappings":"AACA,SAAQA,MAAR,QAAqB,0BAArB;AAEA,OAAO,SAASC,cAAT,CAAwBC,MAAxB,EAA+C;AAAA;;AACpD,MAAI,CAACA,MAAL,EAAa;AACX,WAAO,KAAP;AACD;;AAED,MAAIC,KAAK,CAACC,OAAN,CAAcF,MAAd,CAAJ,EAA2B;AACzBA,IAAAA,MAAM,GAAGA,MAAM,CAAC,CAAD,CAAf;AACD;;AAED,QAAMG,aAAa,GAAGF,KAAK,CAACC,OAAN,YAAcF,MAAd,4CAAc,QAAQI,UAAtB,CAAtB;AAWA,SAAOD,aAAP;AACD;AAED,OAAO,SAASE,eAAT,CAAyBL,MAAzB,EAAiD;AAAA;;AAItDF,EAAAA,MAAM,CAACE,MAAD,EAAS,aAAT,CAAN;AACAF,EAAAA,MAAM,CAACC,cAAc,CAACC,MAAD,CAAf,EAAyB,gBAAzB,CAAN;AAKA,MAAIM,OAAJ;;AACA,MAAIL,KAAK,CAACC,OAAN,CAAcF,MAAd,CAAJ,EAA2B;AACzBM,IAAAA,OAAO,GAAGN,MAAM,CAAC,CAAD,CAAhB;AACAA,IAAAA,MAAM,GAAGA,MAAM,CAAC,CAAD,CAAf;AACAA,IAAAA,MAAM,GAAG,EACP,GAAGA,MADI;AAEPM,MAAAA,OAAO,EAAE,EAAC,GAAGN,MAAM,CAACM,OAAX;AAAoB,WAAGA;AAAvB;AAFF,KAAT;AAID;;AAMD,MAAI,YAAAN,MAAM,UAAN,oCAAQO,aAAR,gBAAyBP,MAAzB,qCAAyB,SAAQQ,SAArC,EAAgD;AAC9CR,IAAAA,MAAM,CAACS,IAAP,GAAc,IAAd;AACD;;AAED,MAAI,CAACT,MAAM,CAACS,IAAZ,EAAkB;AAChBT,IAAAA,MAAM,CAACU,MAAP,GAAgB,IAAhB;AACD;;AAED,SAAOV,MAAP;AACD","sourcesContent":["import type {Loader} from '@loaders.gl/loader-utils';\nimport {assert} from '@loaders.gl/loader-utils';\n\nexport function isLoaderObject(loader?: any): boolean {\n  if (!loader) {\n    return false;\n  }\n\n  if (Array.isArray(loader)) {\n    loader = loader[0];\n  }\n\n  const hasExtensions = Array.isArray(loader?.extensions);\n\n  /* Now handled by types and worker loaders do not have these\n  let hasParser =\n    loader.parseTextSync ||\n    loader.parseSync ||\n    loader.parse ||\n    loader.parseStream || // TODO Remove, Replace with parseInBatches\n    loader.parseInBatches;\n  */\n\n  return hasExtensions;\n}\n\nexport function normalizeLoader(loader: Loader): Loader {\n  // This error is fairly easy to trigger by mixing up import statements etc\n  // So we make an exception and add a developer error message for this case\n  // To help new users from getting stuck here\n  assert(loader, 'null loader');\n  assert(isLoaderObject(loader), 'invalid loader');\n\n  // NORMALIZE [LOADER, OPTIONS] => LOADER\n\n  // If [loader, options], create a new loaders object with options merged in\n  let options;\n  if (Array.isArray(loader)) {\n    options = loader[1];\n    loader = loader[0];\n    loader = {\n      ...loader,\n      options: {...loader.options, ...options}\n    };\n  }\n\n  // NORMALIZE text and binary flags\n  // Ensure at least one of text/binary flags are properly set\n\n  // @ts-expect-error\n  if (loader?.parseTextSync || loader?.parseText) {\n    loader.text = true;\n  }\n\n  if (!loader.text) {\n    loader.binary = true;\n  }\n\n  return loader;\n}\n"],"file":"normalize-loader.js"}