"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports._typecheckImageLoader = exports.ImageLoader = void 0;
const version_1 = require("./lib/utils/version");
const parse_image_1 = __importDefault(require("./lib/parsers/parse-image"));
const binary_image_api_1 = require("./lib/category-api/binary-image-api");
const EXTENSIONS = ['png', 'jpg', 'jpeg', 'gif', 'webp', 'bmp', 'ico', 'svg'];
const MIME_TYPES = [
    'image/png',
    'image/jpeg',
    'image/gif',
    'image/webp',
    'image/bmp',
    'image/vnd.microsoft.icon',
    'image/svg+xml'
];
const DEFAULT_IMAGE_LOADER_OPTIONS = {
    image: {
        type: 'auto',
        decode: true // if format is HTML
    }
    // imagebitmap: {} - passes (platform dependent) parameters to ImageBitmap constructor
};
/**
 * Loads a platform-specific image type
 * Note: This type can be used as input data to WebGL texture creation
 */
exports.ImageLoader = {
    id: 'image',
    module: 'images',
    name: 'Images',
    version: version_1.VERSION,
    mimeTypes: MIME_TYPES,
    extensions: EXTENSIONS,
    parse: parse_image_1.default,
    // TODO: byteOffset, byteLength;
    tests: [(arrayBuffer) => Boolean((0, binary_image_api_1.getBinaryImageMetadata)(new DataView(arrayBuffer)))],
    options: DEFAULT_IMAGE_LOADER_OPTIONS
};
exports._typecheckImageLoader = exports.ImageLoader;
