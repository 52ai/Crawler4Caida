{"version":3,"sources":["../../../../src/lib/category-api/binary-image-api.ts"],"names":["BIG_ENDIAN","LITTLE_ENDIAN","getBinaryImageMetadata","binaryData","dataView","toDataView","getPngMetadata","getJpegMetadata","getGifMetadata","getBmpMetadata","isPng","byteLength","getUint32","mimeType","width","height","isGif","getUint16","isBmp","isJpeg","getUint8","getJpegMarkers","tableMarkers","sofMarkers","i","marker","has","Set","add","data","DataView","ArrayBuffer","isView","buffer","Error"],"mappings":"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","sourcesContent":["// Attributions\n// * Based on binary-gltf-utils under MIT license: Copyright (c) 2016-17 Karl Cheng\n\n// TODO: make these functions work for Node.js buffers?\n// Quarantine references to Buffer to prevent bundler from adding big polyfills\n// import {bufferToArrayBuffer} from '../node/buffer-to-array-buffer';\n// TODO - this should be handled in @loaders.gl/polyfills\n\n/** MIME type, width and height extracted from binary compressed image data */\nexport type BinaryImageMetadata = {\n  mimeType: string;\n  width: number;\n  height: number;\n};\n\nconst BIG_ENDIAN = false;\nconst LITTLE_ENDIAN = true;\n\n/**\n * Extracts `{mimeType, width and height}` from a memory buffer containing a known image format\n * Currently supports `image/png`, `image/jpeg`, `image/bmp` and `image/gif`.\n * @param binaryData image file memory to parse\n * @returns metadata or null if memory is not a valid image file format layout.\n */\nexport function getBinaryImageMetadata(\n  binaryData: DataView | ArrayBuffer\n): BinaryImageMetadata | null {\n  const dataView = toDataView(binaryData);\n  return (\n    getPngMetadata(dataView) ||\n    getJpegMetadata(dataView) ||\n    getGifMetadata(dataView) ||\n    getBmpMetadata(dataView)\n  );\n}\n\n// PNG\n\nfunction getPngMetadata(binaryData) {\n  const dataView = toDataView(binaryData);\n  // Check file contains the first 4 bytes of the PNG signature.\n  const isPng = dataView.byteLength >= 24 && dataView.getUint32(0, BIG_ENDIAN) === 0x89504e47;\n  if (!isPng) {\n    return null;\n  }\n\n  // Extract size from a binary PNG file\n  return {\n    mimeType: 'image/png',\n    width: dataView.getUint32(16, BIG_ENDIAN),\n    height: dataView.getUint32(20, BIG_ENDIAN)\n  };\n}\n\n// GIF\n\n// Extract size from a binary GIF file\n// TODO: GIF is not this simple\nfunction getGifMetadata(binaryData) {\n  const dataView = toDataView(binaryData);\n  // Check first 4 bytes of the GIF signature (\"GIF8\").\n  const isGif = dataView.byteLength >= 10 && dataView.getUint32(0, BIG_ENDIAN) === 0x47494638;\n  if (!isGif) {\n    return null;\n  }\n\n  // GIF is little endian.\n  return {\n    mimeType: 'image/gif',\n    width: dataView.getUint16(6, LITTLE_ENDIAN),\n    height: dataView.getUint16(8, LITTLE_ENDIAN)\n  };\n}\n\n// BMP\n\n// TODO: BMP is not this simple\nexport function getBmpMetadata(binaryData) {\n  const dataView = toDataView(binaryData);\n  // Check magic number is valid (first 2 characters should be \"BM\").\n  // The mandatory bitmap file header is 14 bytes long.\n  const isBmp =\n    dataView.byteLength >= 14 &&\n    dataView.getUint16(0, BIG_ENDIAN) === 0x424d &&\n    dataView.getUint32(2, LITTLE_ENDIAN) === dataView.byteLength;\n\n  if (!isBmp) {\n    return null;\n  }\n\n  // BMP is little endian.\n  return {\n    mimeType: 'image/bmp',\n    width: dataView.getUint32(18, LITTLE_ENDIAN),\n    height: dataView.getUint32(22, LITTLE_ENDIAN)\n  };\n}\n\n// JPEG\n\n// Extract width and height from a binary JPEG file\nfunction getJpegMetadata(binaryData) {\n  const dataView = toDataView(binaryData);\n  // Check file contains the JPEG \"start of image\" (SOI) marker\n  // followed by another marker.\n  const isJpeg =\n    dataView.byteLength >= 3 &&\n    dataView.getUint16(0, BIG_ENDIAN) === 0xffd8 &&\n    dataView.getUint8(2) === 0xff;\n\n  if (!isJpeg) {\n    return null;\n  }\n\n  const {tableMarkers, sofMarkers} = getJpegMarkers();\n\n  // Exclude the two byte SOI marker.\n  let i = 2;\n  while (i + 9 < dataView.byteLength) {\n    const marker = dataView.getUint16(i, BIG_ENDIAN);\n\n    // The frame that contains the width and height of the JPEG image.\n    if (sofMarkers.has(marker)) {\n      return {\n        mimeType: 'image/jpeg',\n        height: dataView.getUint16(i + 5, BIG_ENDIAN), // Number of lines\n        width: dataView.getUint16(i + 7, BIG_ENDIAN) // Number of pixels per line\n      };\n    }\n\n    // Miscellaneous tables/data preceding the frame header.\n    if (!tableMarkers.has(marker)) {\n      return null;\n    }\n\n    // Length includes size of length parameter but not the two byte header.\n    i += 2;\n    i += dataView.getUint16(i, BIG_ENDIAN);\n  }\n\n  return null;\n}\n\nfunction getJpegMarkers() {\n  // Tables/misc header markers.\n  // DQT, DHT, DAC, DRI, COM, APP_n\n  const tableMarkers = new Set([0xffdb, 0xffc4, 0xffcc, 0xffdd, 0xfffe]);\n  for (let i = 0xffe0; i < 0xfff0; ++i) {\n    tableMarkers.add(i);\n  }\n\n  // SOF markers and DHP marker.\n  // These markers are after tables/misc data.\n  const sofMarkers = new Set([\n    0xffc0, 0xffc1, 0xffc2, 0xffc3, 0xffc5, 0xffc6, 0xffc7, 0xffc9, 0xffca, 0xffcb, 0xffcd, 0xffce,\n    0xffcf, 0xffde\n  ]);\n\n  return {tableMarkers, sofMarkers};\n}\n\n// TODO - move into image module?\nfunction toDataView(data) {\n  if (data instanceof DataView) {\n    return data;\n  }\n  if (ArrayBuffer.isView(data)) {\n    return new DataView(data.buffer);\n  }\n\n  // TODO: make these functions work for Node.js buffers?\n  // if (bufferToArrayBuffer) {\n  //   data = bufferToArrayBuffer(data);\n  // }\n\n  // Careful - Node Buffers will look like ArrayBuffers (keep after isBuffer)\n  if (data instanceof ArrayBuffer) {\n    return new DataView(data);\n  }\n  throw new Error('toDataView');\n}\n"],"file":"binary-image-api.js"}