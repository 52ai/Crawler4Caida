{"version":3,"sources":["../../../../src/lib/parsers/parse-image.ts"],"names":["parseImage","arrayBuffer","options","context","imageOptions","image","imageType","type","url","loadType","getLoadableImageType"],"mappings":";;;;;;;;;;;;;AACA;;AAGA;;AACA;;AACA;;AACA;;AACA;;SAI8BA,U;;;;;0EAAf,iBACbC,WADa,EAEbC,OAFa,EAGbC,OAHa;AAAA;;AAAA;AAAA;AAAA;AAAA;AAKbD,YAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACME,YAAAA,YANO,GAMQF,OAAO,CAACG,KAAR,IAAiB,EANzB;AASPC,YAAAA,SATO,GASKF,YAAY,CAACG,IAAb,IAAqB,MAT1B;AAAA,mBAWCJ,OAAO,IAAI,EAXZ,EAWNK,GAXM,QAWNA,GAXM;AAcPC,YAAAA,QAdO,GAcIC,oBAAoB,CAACJ,SAAD,CAdxB;AAAA,0BAiBLG,QAjBK;AAAA,4CAkBN,aAlBM,uBAqBN,OArBM,wBAwBN,MAxBM;AAAA;;AAAA;AAAA;AAAA,mBAmBK,iCAAmBR,WAAnB,EAAgCC,OAAhC,EAAyCM,GAAzC,CAnBL;;AAAA;AAmBTH,YAAAA,KAnBS;AAAA;;AAAA;AAAA;AAAA,mBAsBK,2BAAaJ,WAAb,EAA0BC,OAA1B,EAAmCM,GAAnC,CAtBL;;AAAA;AAsBTH,YAAAA,KAtBS;AAAA;;AAAA;AAAA;AAAA,mBA0BK,+BAAiBJ,WAAjB,EAA8BC,OAA9B,CA1BL;;AAAA;AA0BTG,YAAAA,KA1BS;AAAA;;AAAA;AA6BT,qCAAO,KAAP;;AA7BS;AAiCb,gBAAIC,SAAS,KAAK,MAAlB,EAA0B;AACxBD,cAAAA,KAAK,GAAG,kCAAaA,KAAb,CAAR;AACD;;AAnCY,6CAqCNA,KArCM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAyCf,SAASK,oBAAT,CAA8BH,IAA9B,EAAoC;AAClC,UAAQA,IAAR;AACE,SAAK,MAAL;AACA,SAAK,MAAL;AAGE,aAAO,qCAAP;;AACF;AAEE,2CAAqBA,IAArB;AACA,aAAOA,IAAP;AATJ;AAWD","sourcesContent":["import type {LoaderContext} from '@loaders.gl/loader-utils';\nimport {assert} from '@loaders.gl/loader-utils';\nimport type {ImageType} from '../../types';\nimport type {ImageLoaderOptions} from '../../image-loader';\nimport {isImageTypeSupported, getDefaultImageType} from '../category-api/image-type';\nimport {getImageData} from '../category-api/parsed-image-api';\nimport parseToImage from './parse-to-image';\nimport parseToImageBitmap from './parse-to-image-bitmap';\nimport parseToNodeImage from './parse-to-node-image';\n\n// Parse to platform defined image type (data on node, ImageBitmap or HTMLImage on browser)\n// eslint-disable-next-line complexity\nexport default async function parseImage(\n  arrayBuffer: ArrayBuffer,\n  options?: ImageLoaderOptions,\n  context?: LoaderContext\n): Promise<ImageType> {\n  options = options || {};\n  const imageOptions = options.image || {};\n\n  // The user can request a specific output format via `options.image.type`\n  const imageType = imageOptions.type || 'auto';\n\n  const {url} = context || {};\n\n  // Note: For options.image.type === `data`, we may still need to load as `image` or `imagebitmap`\n  const loadType = getLoadableImageType(imageType);\n\n  let image;\n  switch (loadType) {\n    case 'imagebitmap':\n      image = await parseToImageBitmap(arrayBuffer, options, url);\n      break;\n    case 'image':\n      image = await parseToImage(arrayBuffer, options, url);\n      break;\n    case 'data':\n      // Node.js loads imagedata directly\n      image = await parseToNodeImage(arrayBuffer, options);\n      break;\n    default:\n      assert(false);\n  }\n\n  // Browser: if options.image.type === 'data', we can now extract data from the loaded image\n  if (imageType === 'data') {\n    image = getImageData(image);\n  }\n\n  return image;\n}\n\n// Get a loadable image type from image type\nfunction getLoadableImageType(type) {\n  switch (type) {\n    case 'auto':\n    case 'data':\n      // Browser: For image data we need still need to load using an image format\n      // Node: the default image type is `data`.\n      return getDefaultImageType();\n    default:\n      // Throw an error if not supported\n      isImageTypeSupported(type);\n      return type;\n  }\n}\n"],"file":"parse-image.js"}