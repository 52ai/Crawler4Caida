{"version":3,"sources":["../../../../src/tileset/traversers/i3s-tileset-traverser.ts"],"names":["load","TilesetTraverser","getLodStatus","TileHeader","I3STileManager","I3STilesetTraverser","traversalFinished","frameState","_tileManager","hasPendingTiles","viewport","id","_frameNumber","constructor","options","shouldRefine","tile","_lodJudge","updateChildTiles","children","header","childTiles","tileset","child","extendedId","childTile","find","t","request","_loadTile","cachedRequest","nodePages","nodePagesTile","formTileFromNodePages","add","_onTileLoad","update","updateTile","nodeId","loader","nodeUrl","getTileUrl","url","loadOptions","i3s","isTileHeader","loadContent","push","frameNumber","Date","getTime","lastUpdate","updateDebounceTime","executeTraversal"],"mappings":"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","sourcesContent":["import {load} from '@loaders.gl/core';\nimport TilesetTraverser from './tileset-traverser';\n\nimport {getLodStatus} from '../helpers/i3s-lod';\nimport TileHeader from '../tile-3d';\nimport I3STileManager from './i3s-tile-manager';\nimport {FrameState} from '../helpers/frame-state';\n\nexport default class I3STilesetTraverser extends TilesetTraverser {\n  private _tileManager: I3STileManager;\n\n  /**\n   * Check if there are no penging tile header requests,\n   * that means the traversal is finished and we can call\n   * following-up callbacks.\n   */\n  protected traversalFinished(frameState: FrameState): boolean {\n    return !this._tileManager.hasPendingTiles(frameState.viewport.id, this._frameNumber || 0);\n  }\n\n  constructor(options) {\n    super(options);\n    this._tileManager = new I3STileManager();\n  }\n\n  shouldRefine(tile, frameState: FrameState) {\n    tile._lodJudge = getLodStatus(tile, frameState);\n    return tile._lodJudge === 'DIG';\n  }\n\n  updateChildTiles(tile, frameState: FrameState): boolean {\n    const children = tile.header.children || [];\n    // children which are already fetched and constructed as Tile3D instances\n    const childTiles = tile.children;\n    const tileset = tile.tileset;\n\n    for (const child of children) {\n      const extendedId = `${child.id}-${frameState.viewport.id}`;\n      // if child tile is not fetched\n      const childTile = childTiles && childTiles.find((t) => t.id === extendedId);\n      if (!childTile) {\n        let request = () => this._loadTile(child.id, tileset);\n        const cachedRequest = this._tileManager.find(extendedId);\n        if (!cachedRequest) {\n          // eslint-disable-next-line max-depth\n          if (tileset.tileset.nodePages) {\n            request = () => tileset.tileset.nodePagesTile.formTileFromNodePages(child.id);\n          }\n          this._tileManager.add(\n            request,\n            extendedId,\n            (header) => this._onTileLoad(header, tile, extendedId),\n            frameState\n          );\n        } else {\n          // update frameNumber since it is still needed in current frame\n          this._tileManager.update(extendedId, frameState);\n        }\n      } else if (childTile) {\n        // if child tile is fetched and available\n        this.updateTile(childTile, frameState);\n      }\n    }\n    return false;\n  }\n\n  async _loadTile(nodeId, tileset) {\n    const {loader} = tileset;\n    const nodeUrl = tileset.getTileUrl(`${tileset.url}/nodes/${nodeId}`);\n    // load metadata\n    const options = {\n      ...tileset.loadOptions,\n      i3s: {\n        ...tileset.loadOptions.i3s,\n        isTileHeader: true,\n        loadContent: false\n      }\n    };\n\n    return await load(nodeUrl, loader, options);\n  }\n\n  /**\n   * The callback to init TileHeader instance after loading the tile JSON\n   * @param {Object} header - the tile JSON from a dataset\n   * @param {TileHeader} tile - the parent TileHeader instance\n   * @param {string} extendedId - optional ID to separate copies of a tile for different viewports.\n   *                              const extendedId = `${tile.id}-${frameState.viewport.id}`;\n   * @return {void}\n   */\n  _onTileLoad(header, tile, extendedId) {\n    // after child tile is fetched\n    const childTile = new TileHeader(tile.tileset, header, tile, extendedId);\n    tile.children.push(childTile);\n    const frameState = this._tileManager.find(childTile.id).frameState;\n    this.updateTile(childTile, frameState);\n\n    // after tile fetched, resume traversal if still in current update/traversal frame\n    if (\n      this._frameNumber === frameState.frameNumber &&\n      (this.traversalFinished(frameState) ||\n        new Date().getTime() - this.lastUpdate > this.updateDebounceTime)\n    ) {\n      this.executeTraversal(childTile, frameState);\n    }\n  }\n}\n"],"file":"i3s-tileset-traverser.js"}