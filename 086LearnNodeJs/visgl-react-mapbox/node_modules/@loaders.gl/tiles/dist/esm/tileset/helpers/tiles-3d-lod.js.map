{"version":3,"sources":["../../../../src/tileset/helpers/tiles-3d-lod.ts"],"names":["Matrix4","Vector3","clamp","scratchPositionNormal","scratchCartographic","scratchMatrix","scratchCenter","scratchPosition","scratchDirection","calculateDynamicScreenSpaceError","root","camera","mapProjection","options","dynamicScreenSpaceErrorHeightFalloff","dynamicScreenSpaceErrorDensity","up","direction","height","minimumHeight","maximumHeight","tileBoundingVolume","contentBoundingVolume","TileBoundingRegion","Cartesian3","normalize","positionWC","directionWC","positionCartographic","transformLocal","inverseTransformation","computedTransform","ellipsoid","boundingVolume","centerLocal","multiplyByPoint","center","magnitude","minimumRadius","centerCartographic","Cartographic","fromCartesian","positionLocal","UNIT_Z","multiplyByPointAsVector","z","TileOrientedBoundingBox","boxHeight","_header","box","TileBoundingSphere","radius","heightFalloff","heightClose","heightFar","t","dot","Math","abs","horizonFactor","fog","distanceToCamera","density","scalar","exp","getDynamicScreenSpaceError","tileset","dynamicScreenSpaceError","dynamicScreenSpaceErrorComputedDensity","factor","dynamicScreenSpaceErrorFactor","dynamicError","getTiles3DScreenSpaceError","tile","frameState","useParentLodMetric","parentLodMetricValue","parent","lodMetricValue","distance","max","_distanceToCamera","sseDenominator","viewDistanceScale","error"],"mappings":"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","sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\n// TODO - Dynamic screen space error provides an optimization when looking at\n// tilesets from above\n\n/* eslint-disable */\n// @ts-nocheck\nimport {Matrix4, Vector3, clamp} from '@math.gl/core';\n\nconst scratchPositionNormal = new Vector3();\nconst scratchCartographic = new Vector3();\nconst scratchMatrix = new Matrix4();\nconst scratchCenter = new Vector3();\nconst scratchPosition = new Vector3();\nconst scratchDirection = new Vector3();\n\n// eslint-disable-next-line max-statements, complexity\nexport function calculateDynamicScreenSpaceError(root, {camera, mapProjection}, options = {}) {\n  const {dynamicScreenSpaceErrorHeightFalloff = 0.25, dynamicScreenSpaceErrorDensity = 0.00278} =\n    options;\n\n  let up;\n  let direction;\n  let height;\n  let minimumHeight;\n  let maximumHeight;\n\n  const tileBoundingVolume = root.contentBoundingVolume;\n\n  if (tileBoundingVolume instanceof TileBoundingRegion) {\n    up = Cartesian3.normalize(camera.positionWC, scratchPositionNormal);\n    direction = camera.directionWC;\n    height = camera.positionCartographic.height;\n    minimumHeight = tileBoundingVolume.minimumHeight;\n    maximumHeight = tileBoundingVolume.maximumHeight;\n  } else {\n    // Transform camera position and direction into the local coordinate system of the tileset\n    const transformLocal = Matrix4.inverseTransformation(root.computedTransform, scratchMatrix);\n    const ellipsoid = mapProjection.ellipsoid;\n    const boundingVolume = tileBoundingVolume.boundingVolume;\n    const centerLocal = Matrix4.multiplyByPoint(\n      transformLocal,\n      boundingVolume.center,\n      scratchCenter\n    );\n    if (Cartesian3.magnitude(centerLocal) > ellipsoid.minimumRadius) {\n      // The tileset is defined in WGS84. Approximate the minimum and maximum height.\n      const centerCartographic = Cartographic.fromCartesian(\n        centerLocal,\n        ellipsoid,\n        scratchCartographic\n      );\n      up = Cartesian3.normalize(camera.positionWC, scratchPositionNormal);\n      direction = camera.directionWC;\n      height = camera.positionCartographic.height;\n      minimumHeight = 0.0;\n      maximumHeight = centerCartographic.height * 2.0;\n    } else {\n      // The tileset is defined in local coordinates (z-up)\n      const positionLocal = Matrix4.multiplyByPoint(\n        transformLocal,\n        camera.positionWC,\n        scratchPosition\n      );\n      up = Cartesian3.UNIT_Z;\n      direction = Matrix4.multiplyByPointAsVector(\n        transformLocal,\n        camera.directionWC,\n        scratchDirection\n      );\n      direction = Cartesian3.normalize(direction, direction);\n      height = positionLocal.z;\n      if (tileBoundingVolume instanceof TileOrientedBoundingBox) {\n        // Assuming z-up, the last component stores the half-height of the box\n        const boxHeight = root._header.boundingVolume.box[11];\n        minimumHeight = centerLocal.z - boxHeight;\n        maximumHeight = centerLocal.z + boxHeight;\n      } else if (tileBoundingVolume instanceof TileBoundingSphere) {\n        const radius = boundingVolume.radius;\n        minimumHeight = centerLocal.z - radius;\n        maximumHeight = centerLocal.z + radius;\n      }\n    }\n  }\n\n  // The range where the density starts to lessen. Start at the quarter height of the tileset.\n  const heightFalloff = dynamicScreenSpaceErrorHeightFalloff;\n  const heightClose = minimumHeight + (maximumHeight - minimumHeight) * heightFalloff;\n  const heightFar = maximumHeight;\n\n  const t = clamp((height - heightClose) / (heightFar - heightClose), 0.0, 1.0);\n\n  // Increase density as the camera tilts towards the horizon\n  const dot = Math.abs(Cartesian3.dot(direction, up));\n\n  let horizonFactor = 1.0 - dot;\n\n  // Weaken the horizon factor as the camera height increases, implying the camera is further away from the tileset.\n  // The goal is to increase density for the \"street view\", not when viewing the tileset from a distance.\n  horizonFactor = horizonFactor * (1.0 - t);\n\n  return dynamicScreenSpaceErrorDensity * horizonFactor;\n}\n\nexport function fog(distanceToCamera, density) {\n  const scalar = distanceToCamera * density;\n  return 1.0 - Math.exp(-(scalar * scalar));\n}\n\nexport function getDynamicScreenSpaceError(tileset, distanceToCamera) {\n  if (tileset.dynamicScreenSpaceError && tileset.dynamicScreenSpaceErrorComputedDensity) {\n    const density = tileset.dynamicScreenSpaceErrorComputedDensity;\n    const factor = tileset.dynamicScreenSpaceErrorFactor;\n    // TODO: Refined screen space error that minimizes tiles in non-first-person\n    const dynamicError = fog(distanceToCamera, density) * factor;\n    return dynamicError;\n  }\n\n  return 0;\n}\n\nexport function getTiles3DScreenSpaceError(tile, frameState, useParentLodMetric) {\n  const tileset = tile.tileset;\n  const parentLodMetricValue = (tile.parent && tile.parent.lodMetricValue) || tile.lodMetricValue;\n  const lodMetricValue = useParentLodMetric ? parentLodMetricValue : tile.lodMetricValue;\n\n  // Leaf tiles do not have any error so save the computation\n  if (lodMetricValue === 0.0) {\n    return 0.0;\n  }\n\n  // TODO: Orthographic Frustum needs special treatment?\n  // this._getOrthograhicScreenSpaceError();\n\n  // Avoid divide by zero when viewer is inside the tile\n  const distance = Math.max(tile._distanceToCamera, 1e-7);\n  const {height, sseDenominator} = frameState;\n  const {viewDistanceScale} = tileset.options;\n  let error = (lodMetricValue * height * (viewDistanceScale || 1.0)) / (distance * sseDenominator);\n\n  error -= getDynamicScreenSpaceError(tileset, distance);\n\n  return error;\n}\n"],"file":"tiles-3d-lod.js"}