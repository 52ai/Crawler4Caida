{"version":3,"sources":["../../../src/tileset/tileset-3d.ts"],"names":["DEFAULT_PROPS","description","ellipsoid","Ellipsoid","WGS84","modelMatrix","Matrix4","throttleRequests","maxRequests","maximumMemoryUsage","maximumTilesSelected","debounceTime","onTileLoad","onTileUnload","onTileError","onTraversalComplete","selectedTiles","contentLoader","undefined","viewDistanceScale","maximumScreenSpaceError","loadTiles","updateTransforms","viewportTraversersMap","loadOptions","fetch","attributions","basePath","i3s","TILES_TOTAL","TILES_IN_MEMORY","TILES_IN_VIEW","TILES_RENDERABLE","TILES_LOADED","TILES_LOADING","TILES_UNLOADED","TILES_LOAD_FAILED","POINTS_COUNT","TILES_GPU_MEMORY","Tileset3D","json","options","tileset","loader","type","url","path","dirname","lodMetricType","lodMetricValue","refine","root","roots","cartographicCenter","cartesianCenter","zoom","boundingVolume","traverseCounter","geometricError","_traverser","_initializeTraverser","_cache","TilesetCache","_requestScheduler","RequestScheduler","_frameNumber","_pendingCount","_tiles","_emptyTiles","_requestedTiles","frameStateData","lastUpdatedVieports","_queryParams","_queryParamsString","gpuMemoryUsageInBytes","stats","Stats","id","_initializeStats","_extensionsUsed","dynamicScreenSpaceErrorComputedDensity","extras","asset","credits","tilesetInitializationPromise","_initializeTileSet","_destroy","length","Object","values","getQueryParamString","props","tilePath","isDataUrl","startsWith","queryParams","extensionName","Boolean","indexOf","viewports","then","doUpdate","updatePromise","Promise","resolve","setTimeout","preparedViewports","Array","reset","viewportsToTraverse","viewport","_needTraverse","push","_initializeTileHeaders","includes","frameState","traverse","viewportId","traverserId","currentFrameStateData","filteredSelectedTiles","unselectedTiles","tile","unselect","requestedTiles","emptyTiles","_updateTiles","frameStateKey","frameStateDataValue","concat","_loadTiles","_unloadTiles","_updateStats","oldSelectedTiles","set1","Set","map","t","set2","changed","filter","x","has","contentUnloaded","_loadTile","unloadTiles","_unloadTile","tilesRenderable","pointsRenderable","contentAvailable","content","pointCount","vertexCount","get","count","tilesetJson","TILESET_TYPE","I3S","calculateViewPropsI3S","TILES3D","_initializeTiles3DTileset","calculateViewPropsTiles3D","_initializeI3STileset","fullExtent","xmin","xmax","ymin","ymax","zmin","zmax","Vector3","cartographicToCartesian","extent","store","console","warn","center","cartesianToCartographic","radii","parentTileHeader","rootTile","Tile3D","children","depth","stack","pop","incrementCount","header","childHeader","childTile","TraverserClass","Tileset3DTraverser","I3SetTraverser","TilesetTraverser","onTraversalEnd","_onTraversalEnd","bind","parentTile","_destroySubtree","_onStartTileLoading","loadContent","loaded","_onTileLoadError","_onEndTileLoading","_onTileLoad","error","message","toString","nodesInNodePages","nodePagesTile","addCount","_addTileToCache","decrementCount","add","_updateCacheStats","byteLength","unloadContent","child","_destroyTile","unloadTile","destroy","Error","version","v","tilesetVersion","properties","extensionsUsed","token","queryParamStrings","keys","key","join"],"mappings":"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","sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\n/*\n\n  The Tileset loading and rendering flow is as below,\n  A rendered (i.e. deck.gl `Tile3DLayer`) triggers `tileset.update()` after a `tileset` is loaded\n  `tileset` starts traversing the tile tree and update `requestTiles` (tiles of which content need\n  to be fetched) and `selectedTiles` (tiles ready for rendering under the current viewport).\n  `Tile3DLayer` will update rendering based on `selectedTiles`.\n  `Tile3DLayer` also listens to `onTileLoad` callback and trigger another round of `update and then traversal`\n  when new tiles are loaded.\n\n  As I3S tileset have stored `tileHeader` file (metadata) and tile content files (geometry, texture, ...) separately.\n  During each traversal, it issues `tilHeader` requests if that `tileHeader` is not yet fetched,\n  after the tile header is fulfilled, it will resume the traversal starting from the tile just fetched (not root).\n\n  Tile3DLayer\n       |\n   await load(tileset)\n       |\n   tileset.update()\n       |                async load tileHeader\n   tileset.traverse() -------------------------- Queued\n       |        resume traversal after fetched  |\n       |----------------------------------------|\n       |\n       |                     async load tile content\n  tilset.requestedTiles  ----------------------------- RequestScheduler\n                                                              |\n  tilset.selectedTiles (ready for rendering)                  |\n       |         Listen to                                    |\n    Tile3DLayer ----------- onTileLoad  ----------------------|\n       |                         |   notify new tile is available\n    updateLayers                 |\n                        tileset.update // trigger another round of update\n*/\n\nimport {Matrix4, Vector3} from '@math.gl/core';\nimport {Ellipsoid} from '@math.gl/geospatial';\nimport {Stats} from '@probe.gl/stats';\nimport {\n  RequestScheduler,\n  assert,\n  path,\n  LoaderWithParser,\n  LoaderOptions\n} from '@loaders.gl/loader-utils';\nimport TilesetCache from './tileset-cache';\nimport {calculateTransformProps} from './helpers/transform-utils';\nimport {FrameState, getFrameState, limitSelectedTiles} from './helpers/frame-state';\nimport {getZoomFromBoundingVolume, getZoomFromExtent, getZoomFromFullExtent} from './helpers/zoom';\nimport Tile3D from './tile-3d';\nimport Tileset3DTraverser from './traversers/tileset-3d-traverser';\nimport TilesetTraverser from './traversers/tileset-traverser';\nimport I3SetTraverser from './traversers/i3s-tileset-traverser';\nimport {TILESET_TYPE} from '../constants';\nimport {Viewport} from '../types';\n\nexport type Tileset3DProps = {\n  // loading\n  throttleRequests?: boolean;\n  maxRequests?: number;\n  loadOptions?: LoaderOptions;\n  loadTiles?: boolean;\n  basePath?: string;\n  maximumMemoryUsage?: number;\n  maximumTilesSelected?: number;\n  debounceTime?: number;\n\n  // Metadata\n  description?: string;\n  attributions?: string[];\n\n  // Transforms\n  ellipsoid?: object;\n  modelMatrix?: Matrix4;\n\n  // Traversal\n  maximumScreenSpaceError?: number;\n  viewportTraversersMap?: any;\n  updateTransforms?: boolean;\n  viewDistanceScale?: number;\n\n  // Callbacks\n  onTileLoad?: (tile: Tile3D) => any;\n  onTileUnload?: (tile: Tile3D) => any;\n  onTileError?: (tile: Tile3D, message: string, url: string) => any;\n  contentLoader?: (tile: Tile3D) => Promise<void>;\n  onTraversalComplete?: (selectedTiles: Tile3D[]) => Tile3D[];\n};\n\ntype Props = {\n  description: string;\n  ellipsoid: object;\n  modelMatrix: Matrix4;\n  throttleRequests: boolean;\n  maximumMemoryUsage: number;\n  maximumTilesSelected: number;\n  debounceTime: number;\n  onTileLoad: (tile: Tile3D) => any;\n  onTileUnload: (tile: Tile3D) => any;\n  onTileError: (tile: Tile3D, message: string, url: string) => any;\n  onTraversalComplete: (selectedTiles: Tile3D[]) => Tile3D[];\n  maximumScreenSpaceError: number;\n  viewportTraversersMap: any;\n  attributions: string[];\n  maxRequests: number;\n  loadTiles: boolean;\n  loadOptions: LoaderOptions;\n  updateTransforms: boolean;\n  viewDistanceScale: number;\n  basePath: string;\n  contentLoader?: (tile: Tile3D) => Promise<void>;\n  i3s: {[key: string]: any};\n};\n\nconst DEFAULT_PROPS: Props = {\n  description: '',\n\n  ellipsoid: Ellipsoid.WGS84,\n  // A 4x4 transformation matrix this transforms the entire tileset.\n  modelMatrix: new Matrix4(),\n\n  // Set to false to disable network request throttling\n  throttleRequests: true,\n\n  // Number of simultaneous requsts, if throttleRequests is true\n  maxRequests: 64,\n\n  maximumMemoryUsage: 32,\n  /** Maximum number limit of tiles selected for show. 0 means no limit */\n  maximumTilesSelected: 0,\n  /** Delay time before the tileset traversal. It prevents traversal requests spam.*/\n  debounceTime: 0,\n\n  /**\n   * Callback. Indicates this a tile's content was loaded\n   * @param tile {TileHeader}\n   */\n  onTileLoad: () => {},\n  /**\n   * Callback. Indicates this a tile's content was unloaded\n   * @param tile {TileHeader}\n   */\n  onTileUnload: () => {},\n  onTileError: () => {},\n  /**\n   * Callback. Allows post-process selectedTiles right after traversal.\n   * @param selectedTiles {TileHeader[]}\n   * @returns TileHeader[] - output array of tiles to return to deck.gl\n   */\n  onTraversalComplete: (selectedTiles: Tile3D[]) => selectedTiles,\n\n  // Optional async tile content loader\n  contentLoader: undefined,\n\n  // View distance scale modifier\n  viewDistanceScale: 1.0,\n\n  // The maximum screen space error used to drive level of detail refinement.\n  maximumScreenSpaceError: 8,\n\n  loadTiles: true,\n  updateTransforms: true,\n  viewportTraversersMap: null,\n\n  loadOptions: {fetch: {}},\n\n  attributions: [],\n  basePath: '',\n\n  i3s: {}\n};\n\n// Tracked Stats\nconst TILES_TOTAL = 'Tiles In Tileset(s)';\nconst TILES_IN_MEMORY = 'Tiles In Memory';\nconst TILES_IN_VIEW = 'Tiles In View';\nconst TILES_RENDERABLE = 'Tiles To Render';\nconst TILES_LOADED = 'Tiles Loaded';\nconst TILES_LOADING = 'Tiles Loading';\nconst TILES_UNLOADED = 'Tiles Unloaded';\nconst TILES_LOAD_FAILED = 'Failed Tile Loads';\nconst POINTS_COUNT = 'Points/Vertices';\nconst TILES_GPU_MEMORY = 'Tile Memory Use';\n\nexport default class Tileset3D {\n  // props: Tileset3DProps;\n  options: Props;\n  loadOptions: {[key: string]: any};\n\n  type: string;\n  tileset: {[key: string]: any};\n  loader: LoaderWithParser;\n  url: string;\n  basePath: string;\n  modelMatrix: Matrix4;\n  ellipsoid: any;\n  lodMetricType: string;\n  lodMetricValue: number;\n  refine: string;\n  root: Tile3D | null;\n  roots: {[key: string]: Tile3D};\n  asset: {[key: string]: any};\n\n  description: string;\n  properties: any;\n  extras: any;\n  attributions: any;\n  credits: any;\n\n  stats: Stats;\n\n  traverseCounter: number;\n  geometricError: number;\n  selectedTiles: Tile3D[];\n  private updatePromise: Promise<number> | null = null;\n  tilesetInitializationPromise: Promise<void>;\n\n  cartographicCenter: Vector3 | null;\n  cartesianCenter: Vector3 | null;\n  zoom: number;\n  boundingVolume: any;\n\n  // METRICS\n  // The maximum amount of GPU memory (in MB) that may be used to cache tiles.\n  // Tiles not in view are unloaded to enforce private\n  // The total amount of GPU memory in bytes used by the tileset.\n  gpuMemoryUsageInBytes: any;\n  dynamicScreenSpaceErrorComputedDensity: any;\n\n  // TRAVERSAL\n  _traverser: TilesetTraverser;\n  private _cache: TilesetCache;\n  _requestScheduler: RequestScheduler;\n\n  _frameNumber: number;\n  private _queryParamsString: string;\n  private _queryParams: any;\n  private _extensionsUsed: any;\n  private _tiles: {[id: string]: Tile3D};\n\n  // counter for tracking tiles requests\n  private _pendingCount: any;\n\n  // HOLD TRAVERSAL RESULTS\n  private lastUpdatedVieports: Viewport[] | Viewport | null;\n  private _requestedTiles: any;\n  private _emptyTiles: any;\n  private frameStateData: any;\n\n  maximumMemoryUsage: number;\n\n  /**\n   * Create a new Tileset3D\n   * @param json\n   * @param props\n   */\n  // eslint-disable-next-line max-statements\n  constructor(json: any, options?: Tileset3DProps) {\n    assert(json);\n\n    // PUBLIC MEMBERS\n    this.options = {...DEFAULT_PROPS, ...options};\n    // raw data\n    this.tileset = json;\n    this.loader = json.loader;\n    // could be  3d tiles, i3s\n    this.type = json.type;\n    // The url to a tileset JSON file.\n    this.url = json.url;\n    this.basePath = json.basePath || path.dirname(this.url);\n    this.modelMatrix = this.options.modelMatrix;\n    this.ellipsoid = this.options.ellipsoid;\n\n    // Geometric error when the tree is not rendered at all\n    this.lodMetricType = json.lodMetricType;\n    this.lodMetricValue = json.lodMetricValue;\n    this.refine = json.root.refine;\n\n    this.loadOptions = this.options.loadOptions || {};\n\n    this.root = null;\n    this.roots = {};\n    // view props\n    this.cartographicCenter = null;\n    this.cartesianCenter = null;\n    this.zoom = 1;\n    this.boundingVolume = null;\n\n    // TRAVERSAL\n    this.traverseCounter = 0;\n    this.geometricError = 0;\n    this._traverser = this._initializeTraverser();\n    this._cache = new TilesetCache();\n    this._requestScheduler = new RequestScheduler({\n      throttleRequests: this.options.throttleRequests,\n      maxRequests: this.options.maxRequests\n    });\n    // update tracker\n    // increase in each update cycle\n    this._frameNumber = 0;\n\n    // counter for tracking tiles requests\n    this._pendingCount = 0;\n\n    // HOLD TRAVERSAL RESULTS\n    this._tiles = {};\n    this.selectedTiles = [];\n    this._emptyTiles = [];\n    this._requestedTiles = [];\n    this.frameStateData = {};\n    this.lastUpdatedVieports = null;\n\n    this._queryParams = {};\n    this._queryParamsString = '';\n\n    // METRICS\n    // The maximum amount of GPU memory (in MB) that may be used to cache tiles.\n    // Tiles not in view are unloaded to enforce this.\n    this.maximumMemoryUsage = this.options.maximumMemoryUsage || 32;\n    // The total amount of GPU memory in bytes used by the tileset.\n    this.gpuMemoryUsageInBytes = 0;\n    this.stats = new Stats({id: this.url});\n    this._initializeStats();\n\n    // EXTRACTED FROM TILESET\n    this._extensionsUsed = undefined;\n    this.dynamicScreenSpaceErrorComputedDensity = 0.0; // Updated based on the camera position and direction\n    // Metadata for the entire tileset\n    this.extras = null;\n    this.asset = {};\n    this.credits = {};\n    this.description = this.options.description || '';\n\n    this.tilesetInitializationPromise = this._initializeTileSet(json);\n  }\n\n  /** Release resources */\n  destroy(): void {\n    this._destroy();\n  }\n\n  /** Is the tileset loaded (update needs to have been called at least once) */\n  isLoaded(): boolean {\n    // Check that `_frameNumber !== 0` which means that update was called at least once\n    return this._pendingCount === 0 && this._frameNumber !== 0 && this._requestedTiles.length === 0;\n  }\n\n  get tiles(): object[] {\n    return Object.values(this._tiles);\n  }\n\n  get frameNumber(): number {\n    return this._frameNumber;\n  }\n\n  get queryParams(): string {\n    if (!this._queryParamsString) {\n      this._queryParamsString = getQueryParamString(this._queryParams);\n    }\n    return this._queryParamsString;\n  }\n\n  setProps(props: Tileset3DProps): void {\n    this.options = {...this.options, ...props};\n  }\n\n  /** @deprecated */\n  setOptions(options: Tileset3DProps): void {\n    this.options = {...this.options, ...options};\n  }\n\n  /**\n   * Return a loadable tile url for a specific tile subpath\n   * @param tilePath a tile subpath\n   */\n  getTileUrl(tilePath: string): string {\n    const isDataUrl = tilePath.startsWith('data:');\n    if (isDataUrl) {\n      return tilePath;\n    }\n    return `${tilePath}${this.queryParams}`;\n  }\n\n  // TODO CESIUM specific\n  hasExtension(extensionName: string): boolean {\n    return Boolean(this._extensionsUsed && this._extensionsUsed.indexOf(extensionName) > -1);\n  }\n\n  /**\n   * Update visible tiles relying on a list of viewports\n   * @param viewports - list of viewports\n   * @deprecated\n   */\n  update(viewports: Viewport[] | Viewport | null = null) {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.tilesetInitializationPromise.then(() => {\n      if (!viewports && this.lastUpdatedVieports) {\n        viewports = this.lastUpdatedVieports;\n      } else {\n        this.lastUpdatedVieports = viewports;\n      }\n      if (viewports) {\n        this.doUpdate(viewports);\n      }\n    });\n  }\n\n  /**\n   * Update visible tiles relying on a list of viewports.\n   * Do it with debounce delay to prevent update spam\n   * @param viewports viewports\n   * @returns Promise of new frameNumber\n   */\n  async selectTiles(viewports: Viewport[] | Viewport | null = null): Promise<number> {\n    await this.tilesetInitializationPromise;\n    if (viewports) {\n      this.lastUpdatedVieports = viewports;\n    }\n    if (!this.updatePromise) {\n      this.updatePromise = new Promise<number>((resolve) => {\n        setTimeout(() => {\n          if (this.lastUpdatedVieports) {\n            this.doUpdate(this.lastUpdatedVieports);\n          }\n          resolve(this._frameNumber);\n          this.updatePromise = null;\n        }, this.options.debounceTime);\n      });\n    }\n    return this.updatePromise;\n  }\n\n  /**\n   * Update visible tiles relying on a list of viewports\n   * @param viewports viewports\n   */\n  // eslint-disable-next-line max-statements, complexity\n  private doUpdate(viewports: Viewport[] | Viewport): void {\n    if ('loadTiles' in this.options && !this.options.loadTiles) {\n      return;\n    }\n    if (this.traverseCounter > 0) {\n      return;\n    }\n    const preparedViewports = viewports instanceof Array ? viewports : [viewports];\n\n    this._cache.reset();\n    this._frameNumber++;\n    this.traverseCounter = preparedViewports.length;\n    const viewportsToTraverse: string[] = [];\n    // First loop to decrement traverseCounter\n    for (const viewport of preparedViewports) {\n      const id = viewport.id;\n      if (this._needTraverse(id)) {\n        viewportsToTraverse.push(id);\n      } else {\n        this.traverseCounter--;\n      }\n    }\n\n    // Second loop to traverse\n    for (const viewport of preparedViewports) {\n      const id = viewport.id;\n      if (!this.roots[id]) {\n        this.roots[id] = this._initializeTileHeaders(this.tileset, null);\n      }\n\n      if (!viewportsToTraverse.includes(id)) {\n        continue; // eslint-disable-line no-continue\n      }\n      const frameState = getFrameState(viewport, this._frameNumber);\n      this._traverser.traverse(this.roots[id], frameState, this.options);\n    }\n  }\n\n  /**\n   * Check if traversal is needed for particular viewport\n   * @param {string} viewportId - id of a viewport\n   * @return {boolean}\n   */\n  _needTraverse(viewportId: string): boolean {\n    let traverserId = viewportId;\n    if (this.options.viewportTraversersMap) {\n      traverserId = this.options.viewportTraversersMap[viewportId];\n    }\n    if (traverserId !== viewportId) {\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * The callback to post-process tiles after traversal procedure\n   * @param frameState - frame state for tile culling\n   */\n  _onTraversalEnd(frameState: FrameState): void {\n    const id = frameState.viewport.id;\n    if (!this.frameStateData[id]) {\n      this.frameStateData[id] = {selectedTiles: [], _requestedTiles: [], _emptyTiles: []};\n    }\n    const currentFrameStateData = this.frameStateData[id];\n    const selectedTiles = Object.values(this._traverser.selectedTiles);\n    const [filteredSelectedTiles, unselectedTiles] = limitSelectedTiles(\n      selectedTiles,\n      frameState,\n      this.options.maximumTilesSelected\n    );\n    currentFrameStateData.selectedTiles = filteredSelectedTiles;\n    for (const tile of unselectedTiles) {\n      tile.unselect();\n    }\n\n    currentFrameStateData._requestedTiles = Object.values(this._traverser.requestedTiles);\n    currentFrameStateData._emptyTiles = Object.values(this._traverser.emptyTiles);\n\n    this.traverseCounter--;\n    if (this.traverseCounter > 0) {\n      return;\n    }\n\n    this._updateTiles();\n  }\n\n  /**\n   * Update tiles relying on data from all traversers\n   */\n  _updateTiles(): void {\n    this.selectedTiles = [];\n    this._requestedTiles = [];\n    this._emptyTiles = [];\n\n    for (const frameStateKey in this.frameStateData) {\n      const frameStateDataValue = this.frameStateData[frameStateKey];\n      this.selectedTiles = this.selectedTiles.concat(frameStateDataValue.selectedTiles);\n      this._requestedTiles = this._requestedTiles.concat(frameStateDataValue._requestedTiles);\n      this._emptyTiles = this._emptyTiles.concat(frameStateDataValue._emptyTiles);\n    }\n\n    this.selectedTiles = this.options.onTraversalComplete(this.selectedTiles);\n\n    for (const tile of this.selectedTiles) {\n      this._tiles[tile.id] = tile;\n    }\n\n    this._loadTiles();\n    this._unloadTiles();\n    this._updateStats();\n  }\n\n  _tilesChanged(oldSelectedTiles, selectedTiles) {\n    if (oldSelectedTiles.length !== selectedTiles.length) {\n      return true;\n    }\n    const set1 = new Set(oldSelectedTiles.map((t) => t.id));\n    const set2 = new Set(selectedTiles.map((t) => t.id));\n    let changed = oldSelectedTiles.filter((x) => !set2.has(x.id)).length > 0;\n    changed = changed || selectedTiles.filter((x) => !set1.has(x.id)).length > 0;\n    return changed;\n  }\n\n  _loadTiles() {\n    // Sort requests by priority before making any requests.\n    // This makes it less likely this requests will be cancelled after being issued.\n    // requestedTiles.sort((a, b) => a._priority - b._priority);\n    for (const tile of this._requestedTiles) {\n      if (tile.contentUnloaded) {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        this._loadTile(tile);\n      }\n    }\n  }\n\n  _unloadTiles() {\n    // unload tiles from cache when hit maximumMemoryUsage\n    this._cache.unloadTiles(this, (tileset, tile) => tileset._unloadTile(tile));\n  }\n\n  _updateStats() {\n    let tilesRenderable = 0;\n    let pointsRenderable = 0;\n    for (const tile of this.selectedTiles) {\n      if (tile.contentAvailable && tile.content) {\n        tilesRenderable++;\n        if (tile.content.pointCount) {\n          pointsRenderable += tile.content.pointCount;\n        } else {\n          // Calculate vertices for non point cloud tiles.\n          pointsRenderable += tile.content.vertexCount;\n        }\n      }\n    }\n\n    this.stats.get(TILES_IN_VIEW).count = this.selectedTiles.length;\n    this.stats.get(TILES_RENDERABLE).count = tilesRenderable;\n    this.stats.get(POINTS_COUNT).count = pointsRenderable;\n  }\n\n  async _initializeTileSet(tilesetJson) {\n    if (this.type === TILESET_TYPE.I3S) {\n      this.calculateViewPropsI3S();\n      tilesetJson.root = await tilesetJson.root;\n    }\n    this.root = this._initializeTileHeaders(tilesetJson, null);\n\n    if (this.type === TILESET_TYPE.TILES3D) {\n      this._initializeTiles3DTileset(tilesetJson);\n      this.calculateViewPropsTiles3D();\n    }\n\n    if (this.type === TILESET_TYPE.I3S) {\n      this._initializeI3STileset();\n    }\n  }\n\n  /**\n   * Called during initialize Tileset to initialize the tileset's cartographic center (longitude, latitude) and zoom.\n   * These metrics help apps center view on tileset\n   * For I3S there is extent (<1.8 version) or fullExtent (>=1.8 version) to calculate view props\n   * @returns\n   */\n  private calculateViewPropsI3S() {\n    // for I3S 1.8 try to calculate with fullExtent\n    const fullExtent = this.tileset.fullExtent;\n    if (fullExtent) {\n      const {xmin, xmax, ymin, ymax, zmin, zmax} = fullExtent;\n      this.cartographicCenter = new Vector3(\n        xmin + (xmax - xmin) / 2,\n        ymin + (ymax - ymin) / 2,\n        zmin + (zmax - zmin) / 2\n      );\n      this.cartesianCenter = Ellipsoid.WGS84.cartographicToCartesian(\n        this.cartographicCenter,\n        new Vector3()\n      );\n      this.zoom = getZoomFromFullExtent(fullExtent, this.cartographicCenter, this.cartesianCenter);\n      return;\n    }\n    // for I3S 1.6-1.7 try to calculate with extent\n    const extent = this.tileset.store?.extent;\n    if (extent) {\n      const [xmin, ymin, xmax, ymax] = extent;\n      this.cartographicCenter = new Vector3(xmin + (xmax - xmin) / 2, ymin + (ymax - ymin) / 2, 0);\n      this.cartesianCenter = Ellipsoid.WGS84.cartographicToCartesian(\n        this.cartographicCenter,\n        new Vector3()\n      );\n      this.zoom = getZoomFromExtent(extent, this.cartographicCenter, this.cartesianCenter);\n      return;\n    }\n    // eslint-disable-next-line no-console\n    console.warn('Extent is not defined in the tileset header');\n    this.cartographicCenter = new Vector3();\n    this.zoom = 1;\n    return;\n  }\n\n  /**\n   * Called during initialize Tileset to initialize the tileset's cartographic center (longitude, latitude) and zoom.\n   * These metrics help apps center view on tileset.\n   * For 3DTiles the root tile data is used to calculate view props.\n   * @returns\n   */\n  private calculateViewPropsTiles3D() {\n    const root = this.root as Tile3D;\n    assert(root);\n    const {center} = root.boundingVolume;\n    // TODO - handle all cases\n    if (!center) {\n      // eslint-disable-next-line no-console\n      console.warn('center was not pre-calculated for the root tile');\n      this.cartographicCenter = new Vector3();\n      this.zoom = 1;\n      return;\n    }\n\n    // cartographic coordinates are undefined at the center of the ellipsoid\n    if (center[0] !== 0 || center[1] !== 0 || center[2] !== 0) {\n      this.cartographicCenter = Ellipsoid.WGS84.cartesianToCartographic(center, new Vector3());\n    } else {\n      this.cartographicCenter = new Vector3(0, 0, -Ellipsoid.WGS84.radii[0]);\n    }\n    this.cartesianCenter = center;\n    this.zoom = getZoomFromBoundingVolume(root.boundingVolume, this.cartographicCenter);\n  }\n\n  _initializeStats() {\n    this.stats.get(TILES_TOTAL);\n    this.stats.get(TILES_LOADING);\n    this.stats.get(TILES_IN_MEMORY);\n    this.stats.get(TILES_IN_VIEW);\n    this.stats.get(TILES_RENDERABLE);\n    this.stats.get(TILES_LOADED);\n    this.stats.get(TILES_UNLOADED);\n    this.stats.get(TILES_LOAD_FAILED);\n    this.stats.get(POINTS_COUNT, 'memory');\n    this.stats.get(TILES_GPU_MEMORY, 'memory');\n  }\n\n  // Installs the main tileset JSON file or a tileset JSON file referenced from a tile.\n  // eslint-disable-next-line max-statements\n  _initializeTileHeaders(tilesetJson, parentTileHeader) {\n    // A tileset JSON file referenced from a tile may exist in a different directory than the root tileset.\n    // Get the basePath relative to the external tileset.\n    const rootTile = new Tile3D(this, tilesetJson.root, parentTileHeader); // resource\n\n    // If there is a parentTileHeader, add the root of the currently loading tileset\n    // to parentTileHeader's children, and update its depth.\n    if (parentTileHeader) {\n      parentTileHeader.children.push(rootTile);\n      rootTile.depth = parentTileHeader.depth + 1;\n    }\n\n    // 3DTiles knows the hierarchy beforehand\n    if (this.type === TILESET_TYPE.TILES3D) {\n      const stack: Tile3D[] = [];\n      stack.push(rootTile);\n\n      while (stack.length > 0) {\n        const tile = stack.pop() as Tile3D;\n        this.stats.get(TILES_TOTAL).incrementCount();\n        const children = tile.header.children || [];\n        for (const childHeader of children) {\n          const childTile = new Tile3D(this, childHeader, tile);\n          tile.children.push(childTile);\n          childTile.depth = tile.depth + 1;\n          stack.push(childTile);\n        }\n      }\n    }\n\n    return rootTile;\n  }\n\n  _initializeTraverser() {\n    let TraverserClass;\n    const type = this.type;\n    switch (type) {\n      case TILESET_TYPE.TILES3D:\n        TraverserClass = Tileset3DTraverser;\n        break;\n      case TILESET_TYPE.I3S:\n        TraverserClass = I3SetTraverser;\n        break;\n      default:\n        TraverserClass = TilesetTraverser;\n    }\n\n    return new TraverserClass({\n      basePath: this.basePath,\n      onTraversalEnd: this._onTraversalEnd.bind(this)\n    });\n  }\n\n  _destroyTileHeaders(parentTile) {\n    this._destroySubtree(parentTile);\n  }\n\n  async _loadTile(tile) {\n    let loaded;\n    try {\n      this._onStartTileLoading();\n      loaded = await tile.loadContent();\n    } catch (error) {\n      this._onTileLoadError(tile, error);\n    } finally {\n      this._onEndTileLoading();\n      this._onTileLoad(tile, loaded);\n    }\n  }\n\n  _onTileLoadError(tile, error) {\n    this.stats.get(TILES_LOAD_FAILED).incrementCount();\n\n    const message = error.message || error.toString();\n    const url = tile.url;\n    // TODO - Allow for probe log to be injected instead of console?\n    console.error(`A 3D tile failed to load: ${tile.url} ${message}`); // eslint-disable-line\n    this.options.onTileError(tile, message, url);\n  }\n\n  _onTileLoad(tile, loaded) {\n    if (!loaded) {\n      return;\n    }\n\n    if (this.type === TILESET_TYPE.I3S) {\n      // We can't calculate tiles total in I3S in advance so we calculate it dynamically.\n      const nodesInNodePages = this.tileset?.nodePagesTile?.nodesInNodePages || 0;\n      this.stats.get(TILES_TOTAL).reset();\n      this.stats.get(TILES_TOTAL).addCount(nodesInNodePages);\n    }\n\n    // add coordinateOrigin and modelMatrix to tile\n    if (tile && tile.content) {\n      calculateTransformProps(tile, tile.content);\n    }\n\n    this._addTileToCache(tile);\n    this.options.onTileLoad(tile);\n  }\n\n  _onStartTileLoading() {\n    this._pendingCount++;\n    this.stats.get(TILES_LOADING).incrementCount();\n  }\n\n  _onEndTileLoading() {\n    this._pendingCount--;\n    this.stats.get(TILES_LOADING).decrementCount();\n  }\n\n  _addTileToCache(tile) {\n    this._cache.add(this, tile, (tileset) => tileset._updateCacheStats(tile));\n  }\n\n  _updateCacheStats(tile) {\n    this.stats.get(TILES_LOADED).incrementCount();\n    this.stats.get(TILES_IN_MEMORY).incrementCount();\n\n    // Good enough? Just use the raw binary ArrayBuffer's byte length.\n    this.gpuMemoryUsageInBytes += tile.content.byteLength || 0;\n    this.stats.get(TILES_GPU_MEMORY).count = this.gpuMemoryUsageInBytes;\n  }\n\n  _unloadTile(tile) {\n    this.gpuMemoryUsageInBytes -= (tile.content && tile.content.byteLength) || 0;\n\n    this.stats.get(TILES_IN_MEMORY).decrementCount();\n    this.stats.get(TILES_UNLOADED).incrementCount();\n    this.stats.get(TILES_GPU_MEMORY).count = this.gpuMemoryUsageInBytes;\n\n    this.options.onTileUnload(tile);\n    tile.unloadContent();\n  }\n\n  // Traverse the tree and destroy all tiles\n  _destroy() {\n    const stack: Tile3D[] = [];\n\n    if (this.root) {\n      stack.push(this.root);\n    }\n\n    while (stack.length > 0) {\n      const tile: Tile3D = stack.pop() as Tile3D;\n\n      for (const child of tile.children) {\n        stack.push(child);\n      }\n\n      this._destroyTile(tile);\n    }\n    this.root = null;\n  }\n\n  // Traverse the tree and destroy all sub tiles\n  _destroySubtree(tile) {\n    const root = tile;\n    const stack: Tile3D[] = [];\n    stack.push(root);\n    while (stack.length > 0) {\n      tile = stack.pop();\n      for (const child of tile.children) {\n        stack.push(child);\n      }\n      if (tile !== root) {\n        this._destroyTile(tile);\n      }\n    }\n    root.children = [];\n  }\n\n  _destroyTile(tile) {\n    this._cache.unloadTile(this, tile);\n    this._unloadTile(tile);\n    tile.destroy();\n  }\n\n  _initializeTiles3DTileset(tilesetJson) {\n    this.asset = tilesetJson.asset;\n    if (!this.asset) {\n      throw new Error('Tileset must have an asset property.');\n    }\n    if (this.asset.version !== '0.0' && this.asset.version !== '1.0') {\n      throw new Error('The tileset must be 3D Tiles version 0.0 or 1.0.');\n    }\n\n    // Note: `asset.tilesetVersion` is version of the tileset itself (not the version of the 3D TILES standard)\n    // We add this version as a `v=1.0` query param to fetch the right version and not get an older cached version\n    if ('tilesetVersion' in this.asset) {\n      this._queryParams.v = this.asset.tilesetVersion;\n    }\n\n    // TODO - ion resources have a credits property we can use for additional attribution.\n    this.credits = {\n      attributions: this.options.attributions || []\n    };\n    this.description = this.options.description || '';\n\n    // Gets the tileset's properties dictionary object, which contains metadata about per-feature properties.\n    this.properties = tilesetJson.properties;\n    this.geometricError = tilesetJson.geometricError;\n    this._extensionsUsed = tilesetJson.extensionsUsed;\n    // Returns the extras property at the top of the tileset JSON (application specific metadata).\n    this.extras = tilesetJson.extras;\n  }\n\n  _initializeI3STileset() {\n    if (this.loadOptions.i3s && 'token' in this.loadOptions.i3s) {\n      this._queryParams.token = this.loadOptions.i3s.token;\n    }\n  }\n}\n\nfunction getQueryParamString(queryParams): string {\n  const queryParamStrings: string[] = [];\n  for (const key of Object.keys(queryParams)) {\n    queryParamStrings.push(`${key}=${queryParams[key]}`);\n  }\n  switch (queryParamStrings.length) {\n    case 0:\n      return '';\n    case 1:\n      return `?${queryParamStrings[0]}`;\n    default:\n      return `?${queryParamStrings.join('&')}`;\n  }\n}\n"],"file":"tileset-3d.js"}