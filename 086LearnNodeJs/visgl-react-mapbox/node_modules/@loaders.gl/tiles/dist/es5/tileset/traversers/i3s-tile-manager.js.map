{"version":3,"sources":["../../../../src/tileset/traversers/i3s-tile-manager.ts"],"names":["STATUS","REQUESTED","COMPLETED","ERROR","I3STileManager","I3SPendingTilesRegister","_statusMap","request","key","callback","frameState","frameNumber","id","viewport","status","pendingTilesRegister","register","then","data","actualFrameNumber","deregister","catch","error","newFrameNumber","newViewportId","viewportId","isZero"],"mappings":"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","sourcesContent":["import {FrameState} from '../helpers/frame-state';\nimport I3SPendingTilesRegister from './i3s-pending-tiles-register';\n\nconst STATUS = {\n  REQUESTED: 'REQUESTED',\n  COMPLETED: 'COMPLETED',\n  ERROR: 'ERROR'\n};\n\n// A helper class to manage tile metadata fetching\nexport default class I3STileManager {\n  private _statusMap: object;\n  private pendingTilesRegister = new I3SPendingTilesRegister();\n\n  constructor() {\n    this._statusMap = {};\n  }\n\n  /**\n   * Add request to map\n   * @param request - node metadata request\n   * @param key - unique key\n   * @param callback - callback after request completed\n   * @param frameState - frameState data\n   */\n  add(request, key, callback, frameState: FrameState) {\n    if (!this._statusMap[key]) {\n      const {\n        frameNumber,\n        viewport: {id}\n      } = frameState;\n      this._statusMap[key] = {request, callback, key, frameState, status: STATUS.REQUESTED};\n      // Register pending request for the frameNumber\n      this.pendingTilesRegister.register(id, frameNumber);\n      request()\n        .then((data) => {\n          this._statusMap[key].status = STATUS.COMPLETED;\n          const {\n            frameNumber: actualFrameNumber,\n            viewport: {id}\n          } = this._statusMap[key].frameState;\n          // Deregister pending request for the frameNumber\n          this.pendingTilesRegister.deregister(id, actualFrameNumber);\n          this._statusMap[key].callback(data, frameState);\n        })\n        .catch((error) => {\n          this._statusMap[key].status = STATUS.ERROR;\n          const {\n            frameNumber: actualFrameNumber,\n            viewport: {id}\n          } = this._statusMap[key].frameState;\n          // Deregister pending request for the frameNumber\n          this.pendingTilesRegister.deregister(id, actualFrameNumber);\n          callback(error);\n        });\n    }\n  }\n\n  /**\n   * Update request if it is still actual for the new frameState\n   * @param key - unique key\n   * @param frameState - frameState data\n   */\n  update(key, frameState: FrameState) {\n    if (this._statusMap[key]) {\n      // Deregister pending request for the old frameNumber\n      const {\n        frameNumber,\n        viewport: {id}\n      } = this._statusMap[key].frameState;\n      this.pendingTilesRegister.deregister(id, frameNumber);\n\n      // Register pending request for the new frameNumber\n      const {\n        frameNumber: newFrameNumber,\n        viewport: {id: newViewportId}\n      } = frameState;\n      this.pendingTilesRegister.register(newViewportId, newFrameNumber);\n      this._statusMap[key].frameState = frameState;\n    }\n  }\n\n  /**\n   * Find request in the map\n   * @param key - unique key\n   * @returns\n   */\n  find(key) {\n    return this._statusMap[key];\n  }\n\n  /**\n   * Check it there are pending tile headers for the particular frameNumber\n   * @param viewportId\n   * @param frameNumber\n   * @returns\n   */\n  hasPendingTiles(viewportId: string, frameNumber: number): boolean {\n    return !this.pendingTilesRegister.isZero(viewportId, frameNumber);\n  }\n}\n"],"file":"i3s-tile-manager.js"}