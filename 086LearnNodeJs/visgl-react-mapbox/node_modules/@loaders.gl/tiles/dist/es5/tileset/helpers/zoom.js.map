{"version":3,"sources":["../../../../src/tileset/helpers/zoom.ts"],"names":["WGS84_RADIUS_X","WGS84_RADIUS_Y","WGS84_RADIUS_Z","scratchVector","Vector3","getZoomFromBoundingVolume","boundingVolume","cartorgraphicCenter","OrientedBoundingBox","halfAxes","obbSize","getObbSize","Math","log2","BoundingSphere","radius","width","height","zoomX","zoomY","getZoomFromFullExtent","fullExtent","cartesianCenter","extentVertex","Ellipsoid","WGS84","cartographicToCartesian","xmax","ymax","zmax","extentSize","sqrt","pow","getZoomFromExtent","extent","xmin","ymin","zmin","getColumn","axeY","axeZ","farthestVertex","add","size","len"],"mappings":"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","sourcesContent":["import {Vector3} from '@math.gl/core';\nimport {BoundingSphere, OrientedBoundingBox} from '@math.gl/culling';\nimport {Ellipsoid} from '@math.gl/geospatial';\nimport {BoundingRectangle} from '../../types';\n\nconst WGS84_RADIUS_X = 6378137.0;\nconst WGS84_RADIUS_Y = 6378137.0;\nconst WGS84_RADIUS_Z = 6356752.3142451793;\n\nconst scratchVector = new Vector3();\n\n/**\n * Calculate appropriate zoom value for a particular boundingVolume\n * @param boundingVolume - the instance of bounding volume\n * @param cartorgraphicCenter - cartographic center of the bounding volume\n * @returns {number} - zoom value\n */\nexport function getZoomFromBoundingVolume(\n  boundingVolume: BoundingSphere | OrientedBoundingBox | BoundingRectangle,\n  cartorgraphicCenter: Vector3\n) {\n  if (boundingVolume instanceof OrientedBoundingBox) {\n    // OrientedBoundingBox\n    const {halfAxes} = boundingVolume;\n    const obbSize = getObbSize(halfAxes);\n    // Use WGS84_RADIUS_Z to allign with BoundingSphere algorithm\n    // Add the tile elevation value for correct zooming to elevated tiles\n    return Math.log2(WGS84_RADIUS_Z / (obbSize + cartorgraphicCenter[2]));\n  } else if (boundingVolume instanceof BoundingSphere) {\n    // BoundingSphere\n    const {radius} = boundingVolume;\n    // Add the tile elevation value for correct zooming to elevated tiles\n    return Math.log2(WGS84_RADIUS_Z / (radius + cartorgraphicCenter[2]));\n  } else if (boundingVolume.width && boundingVolume.height) {\n    // BoundingRectangle\n    const {width, height} = boundingVolume;\n    const zoomX = Math.log2(WGS84_RADIUS_X / width);\n    const zoomY = Math.log2(WGS84_RADIUS_Y / height);\n\n    return (zoomX + zoomY) / 2;\n  }\n\n  return 1;\n}\n\n/**\n * Calculate initial zoom for the tileset from 3D `fullExtent` defined in\n * the tileset metadata\n * @param fullExtent - 3D extent of the tileset\n * @param fullExtent.xmin - minimal longitude in decimal degrees\n * @param fullExtent.xmax - maximal longitude in decimal degrees\n * @param fullExtent.ymin - minimal latitude in decimal degrees\n * @param fullExtent.ymax - maximal latitude in decimal degrees\n * @param fullExtent.zmin - minimal elevation in meters\n * @param fullExtent.zmax - maximal elevation in meters\n * @param cartorgraphicCenter - tileset center in cartographic coordinate system\n * @param cartesianCenter - tileset center in cartesian coordinate system\n * @returns - initial zoom for the tileset\n */\nexport function getZoomFromFullExtent(\n  fullExtent: {\n    xmin: number;\n    xmax: number;\n    ymin: number;\n    ymax: number;\n    zmin: number;\n    zmax: number;\n  },\n  cartorgraphicCenter: Vector3,\n  cartesianCenter: Vector3\n) {\n  const extentVertex = Ellipsoid.WGS84.cartographicToCartesian(\n    [fullExtent.xmax, fullExtent.ymax, fullExtent.zmax],\n    new Vector3()\n  );\n  const extentSize = Math.sqrt(\n    Math.pow(extentVertex[0] - cartesianCenter[0], 2) +\n      Math.pow(extentVertex[1] - cartesianCenter[1], 2) +\n      Math.pow(extentVertex[2] - cartesianCenter[2], 2)\n  );\n  return Math.log2(WGS84_RADIUS_Z / (extentSize + cartorgraphicCenter[2]));\n}\n\n/**\n * Calculate initial zoom for the tileset from 2D `extent` defined in\n * the tileset metadata\n * @param extent - 2D extent of the tileset. It is array of 4 elements [xmin, ymin, xmax, ymax]\n * @param extent[0] - minimal longitude in decimal degrees\n * @param extent[1] - minimal latitude in decimal degrees\n * @param extent[2] - maximal longitude in decimal degrees\n * @param extent[3] - maximal latitude in decimal degrees\n * @param cartorgraphicCenter - tileset center in cartographic coordinate system\n * @param cartesianCenter - tileset center in cartesian coordinate system\n * @returns - initial zoom for the tileset\n */\nexport function getZoomFromExtent(\n  extent: [number, number, number, number],\n  cartorgraphicCenter: Vector3,\n  cartesianCenter: Vector3\n) {\n  const [xmin, ymin, xmax, ymax] = extent;\n  return getZoomFromFullExtent(\n    {xmin, xmax, ymin, ymax, zmin: 0, zmax: 0},\n    cartorgraphicCenter,\n    cartesianCenter\n  );\n}\n\nfunction getObbSize(halfAxes) {\n  halfAxes.getColumn(0, scratchVector);\n  const axeY = halfAxes.getColumn(1);\n  const axeZ = halfAxes.getColumn(2);\n  const farthestVertex = scratchVector.add(axeY).add(axeZ);\n  const size = farthestVertex.len();\n  return size;\n}\n"],"file":"zoom.js"}