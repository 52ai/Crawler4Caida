{"version":3,"sources":["../../../src/lib/parse-mvt.ts"],"names":["parseMVT","arrayBuffer","options","mvtOptions","normalizeOptions","shape","gis","format","mvt","data","parseToBinary","table","parseToGeojson","Error","parseToFlatGeoJson","flatGeoJsonFeatures","geometryInfo","binaryData","byteLength","features","coordLength","pointPositionsCount","pointFeaturesCount","linePositionsCount","linePathsCount","lineFeaturesCount","polygonPositionsCount","polygonObjectsCount","polygonRingsCount","polygonFeaturesCount","tile","BinaryVectorTile","Protobuf","selectedLayers","Array","isArray","layers","Object","keys","forEach","layerName","vectorTileLayer","i","length","vectorTileFeature","feature","decodedFeature","getDecodedFeatureBinary","push","VectorTile","getDecodedFeature","wgs84Coordinates","coordinates","tileIndex","hasTileIndex","Number","isFinite","x","y","z","toGeoJSON","transformToLocalCoordinates","layerProperty","properties","toBinaryCoordinates","transformToLocalCoordinatesBinary","line","extent","p","il"],"mappings":"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","sourcesContent":["import {flatGeojsonToBinary} from '@loaders.gl/gis';\nimport type {\n  FlatFeature,\n  Feature,\n  GeojsonGeometryInfo,\n  BinaryFeatures,\n  GeoJSONRowTable\n} from '@loaders.gl/schema';\nimport Protobuf from 'pbf';\n\nimport type {MVTMapboxCoordinates, MVTOptions, MVTLoaderOptions} from '../lib/types';\n\nimport VectorTile from './mapbox-vector-tile/vector-tile';\nimport BinaryVectorTile from './binary-vector-tile/vector-tile';\nimport VectorTileFeatureBinary from './binary-vector-tile/vector-tile-feature';\nimport VectorTileFeatureMapBox from './mapbox-vector-tile/vector-tile-feature';\n\n/**\n * Parse MVT arrayBuffer and return GeoJSON.\n *\n * @param arrayBuffer A MVT arrayBuffer\n * @param options\n * @returns A GeoJSON geometry object or a binary representation\n */\nexport default function parseMVT(arrayBuffer: ArrayBuffer, options?: MVTLoaderOptions) {\n  const mvtOptions = normalizeOptions(options);\n\n  const shape = options?.gis?.format || options?.mvt?.shape;\n  switch (shape) {\n    case 'columnar-table': // binary + some JS arrays\n      return {shape: 'columnar-table', data: parseToBinary(arrayBuffer, mvtOptions)};\n    case 'geojson-row-table': {\n      const table: GeoJSONRowTable = {\n        shape: 'geojson-row-table',\n        data: parseToGeojson(arrayBuffer, mvtOptions)\n      };\n      return table;\n    }\n    case 'geojson':\n      return parseToGeojson(arrayBuffer, mvtOptions);\n    case 'binary-geometry':\n      return parseToBinary(arrayBuffer, mvtOptions);\n    case 'binary':\n      return parseToBinary(arrayBuffer, mvtOptions);\n    default:\n      throw new Error(shape);\n  }\n}\n\nfunction parseToBinary(arrayBuffer: ArrayBuffer, options: MVTOptions): BinaryFeatures {\n  const [flatGeoJsonFeatures, geometryInfo] = parseToFlatGeoJson(arrayBuffer, options);\n\n  const binaryData = flatGeojsonToBinary(flatGeoJsonFeatures, geometryInfo);\n  // Add the original byteLength (as a reasonable approximation of the size of the binary data)\n  // TODO decide where to store extra fields like byteLength (header etc) and document\n  // @ts-ignore\n  binaryData.byteLength = arrayBuffer.byteLength;\n  return binaryData;\n}\n\nfunction parseToFlatGeoJson(\n  arrayBuffer: ArrayBuffer,\n  options: MVTOptions\n): [FlatFeature[], GeojsonGeometryInfo] {\n  const features: FlatFeature[] = [];\n  const geometryInfo: GeojsonGeometryInfo = {\n    coordLength: 2,\n    pointPositionsCount: 0,\n    pointFeaturesCount: 0,\n    linePositionsCount: 0,\n    linePathsCount: 0,\n    lineFeaturesCount: 0,\n    polygonPositionsCount: 0,\n    polygonObjectsCount: 0,\n    polygonRingsCount: 0,\n    polygonFeaturesCount: 0\n  };\n\n  if (arrayBuffer.byteLength <= 0) {\n    return [features, geometryInfo];\n  }\n\n  const tile = new BinaryVectorTile(new Protobuf(arrayBuffer));\n\n  const selectedLayers =\n    options && Array.isArray(options.layers) ? options.layers : Object.keys(tile.layers);\n\n  selectedLayers.forEach((layerName: string) => {\n    const vectorTileLayer = tile.layers[layerName];\n    if (!vectorTileLayer) {\n      return;\n    }\n\n    for (let i = 0; i < vectorTileLayer.length; i++) {\n      const vectorTileFeature = vectorTileLayer.feature(i, geometryInfo);\n      const decodedFeature = getDecodedFeatureBinary(vectorTileFeature, options, layerName);\n      features.push(decodedFeature);\n    }\n  });\n\n  return [features, geometryInfo];\n}\n\nfunction parseToGeojson(arrayBuffer: ArrayBuffer, options: MVTOptions): Feature[] {\n  if (arrayBuffer.byteLength <= 0) {\n    return [];\n  }\n\n  const features: MVTMapboxCoordinates[] = [];\n  const tile = new VectorTile(new Protobuf(arrayBuffer));\n\n  const selectedLayers = Array.isArray(options.layers) ? options.layers : Object.keys(tile.layers);\n\n  selectedLayers.forEach((layerName: string) => {\n    const vectorTileLayer = tile.layers[layerName];\n    if (!vectorTileLayer) {\n      return;\n    }\n\n    for (let i = 0; i < vectorTileLayer.length; i++) {\n      const vectorTileFeature = vectorTileLayer.feature(i);\n      const decodedFeature = getDecodedFeature(vectorTileFeature, options, layerName);\n      features.push(decodedFeature);\n    }\n  });\n\n  return features as Feature[];\n}\n\nfunction normalizeOptions(options?: MVTLoaderOptions): MVTOptions {\n  if (!options?.mvt) {\n    throw new Error('mvt options required');\n  }\n\n  // Validate\n  const wgs84Coordinates = options.mvt?.coordinates === 'wgs84';\n  const {tileIndex} = options.mvt;\n  const hasTileIndex =\n    tileIndex &&\n    Number.isFinite(tileIndex.x) &&\n    Number.isFinite(tileIndex.y) &&\n    Number.isFinite(tileIndex.z);\n\n  if (wgs84Coordinates && !hasTileIndex) {\n    throw new Error('MVT Loader: WGS84 coordinates need tileIndex property');\n  }\n\n  return options.mvt;\n}\n\n/**\n * @param feature\n * @param options\n * @returns decoded feature\n */\nfunction getDecodedFeature(\n  feature: VectorTileFeatureMapBox,\n  options: MVTOptions,\n  layerName: string\n): MVTMapboxCoordinates {\n  const decodedFeature = feature.toGeoJSON(\n    options.coordinates === 'wgs84' ? options.tileIndex : transformToLocalCoordinates\n  );\n\n  // Add layer name to GeoJSON properties\n  if (options.layerProperty) {\n    decodedFeature.properties[options.layerProperty] = layerName;\n  }\n\n  return decodedFeature;\n}\n\n/**\n * @param feature\n * @param options\n * @returns decoded binary feature\n */\nfunction getDecodedFeatureBinary(\n  feature: VectorTileFeatureBinary,\n  options: MVTOptions,\n  layerName: string\n): FlatFeature {\n  const decodedFeature = feature.toBinaryCoordinates(\n    options.coordinates === 'wgs84' ? options.tileIndex : transformToLocalCoordinatesBinary\n  );\n\n  // Add layer name to GeoJSON properties\n  if (options.layerProperty && decodedFeature.properties) {\n    decodedFeature.properties[options.layerProperty] = layerName;\n  }\n\n  return decodedFeature;\n}\n\n/**\n * @param line\n * @param feature\n */\nfunction transformToLocalCoordinates(line: number[], feature: {extent: any}): void {\n  // This function transforms local coordinates in a\n  // [0 - bufferSize, this.extent + bufferSize] range to a\n  // [0 - (bufferSize / this.extent), 1 + (bufferSize / this.extent)] range.\n  // The resulting extent would be 1.\n  const {extent} = feature;\n  for (let i = 0; i < line.length; i++) {\n    const p = line[i];\n    p[0] /= extent;\n    p[1] /= extent;\n  }\n}\n\nfunction transformToLocalCoordinatesBinary(data: number[], feature: {extent: any}) {\n  // For the binary code path, the feature data is just\n  // one big flat array, so we just divide each value\n  const {extent} = feature;\n  for (let i = 0, il = data.length; i < il; ++i) {\n    data[i] /= extent;\n  }\n}\n"],"file":"parse-mvt.js"}