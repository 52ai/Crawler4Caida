{"version":3,"sources":["../../../../src/lib/binary-vector-tile/vector-tile-feature.ts"],"names":["endPos","cmd","cmdLen","length","x","y","i","TEST_EXPORTS","classifyRings","VectorTileFeature","pbf","end","extent","keys","values","geometryInfo","properties","type","id","_pbf","_geometry","_keys","_values","_geometryInfo","readFields","readFeature","pos","readVarint","indices","data","readSVarint","push","start","Error","transform","geom","loadGeometry","geometry","coordLength","pointFeaturesCount","pointPositionsCount","lineFeaturesCount","linePathsCount","linePositionsCount","polygonFeaturesCount","polygonObjectsCount","polygonRingsCount","polygonPositionsCount","result","options","_toBinaryCoordinates","z","size","Math","pow","x0","y0"],"mappings":"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","sourcesContent":["// This code is forked from https://github.com/mapbox/vector-tile-js under BSD 3-clause license.\n\nimport Protobuf from 'pbf';\nimport {FlatFeature, FlatIndexedGeometry, GeojsonGeometryInfo} from '@loaders.gl/schema';\nimport {classifyRings, project, readFeature} from '../../helpers/binary-util-functions';\n\n// Reduce GC by reusing variables\nlet endPos: number;\nlet cmd: number;\nlet cmdLen: number;\nlet length: number;\nlet x: number;\nlet y: number;\nlet i: number;\n\nexport const TEST_EXPORTS = {\n  classifyRings\n};\n\nexport default class VectorTileFeature {\n  properties: {[x: string]: string | number | boolean | null};\n  extent: any;\n  type: number;\n  id: number | null;\n  _pbf: Protobuf;\n  _geometry: number;\n  _keys: string[];\n  _values: (string | number | boolean | null)[];\n  _geometryInfo: GeojsonGeometryInfo;\n\n  // eslint-disable-next-line max-params\n  constructor(\n    pbf: Protobuf,\n    end: number,\n    extent: any,\n    keys: string[],\n    values: (string | number | boolean | null)[],\n    geometryInfo: GeojsonGeometryInfo\n  ) {\n    // Public\n    this.properties = {};\n    this.extent = extent;\n    this.type = 0;\n    this.id = null;\n\n    // Private\n    this._pbf = pbf;\n    this._geometry = -1;\n    this._keys = keys;\n    this._values = values;\n    this._geometryInfo = geometryInfo;\n\n    pbf.readFields(readFeature, this, end);\n  }\n\n  // eslint-disable-next-line complexity, max-statements\n  loadGeometry(): FlatIndexedGeometry {\n    const pbf = this._pbf;\n    pbf.pos = this._geometry;\n\n    endPos = pbf.readVarint() + pbf.pos;\n    cmd = 1;\n    length = 0;\n    x = 0;\n    y = 0;\n    i = 0;\n\n    // Note: I attempted to replace the `data` array with a\n    // Float32Array, but performance was worse, both using\n    // `set()` and direct index access. Also, we cannot\n    // know how large the buffer should be, so it would\n    // increase memory usage\n    const indices: number[] = []; // Indices where geometries start\n    const data: number[] = []; // Flat array of coordinate data\n\n    while (pbf.pos < endPos) {\n      if (length <= 0) {\n        cmdLen = pbf.readVarint();\n        cmd = cmdLen & 0x7;\n        length = cmdLen >> 3;\n      }\n\n      length--;\n\n      if (cmd === 1 || cmd === 2) {\n        x += pbf.readSVarint();\n        y += pbf.readSVarint();\n\n        if (cmd === 1) {\n          // New line\n          indices.push(i);\n        }\n        data.push(x, y);\n        i += 2;\n      } else if (cmd === 7) {\n        // Workaround for https://github.com/mapbox/mapnik-vector-tile/issues/90\n        if (i > 0) {\n          const start = indices[indices.length - 1]; // start index of polygon\n          data.push(data[start], data[start + 1]); // closePolygon\n          i += 2;\n        }\n      } else {\n        throw new Error(`unknown command ${cmd}`);\n      }\n    }\n\n    return {data, indices};\n  }\n\n  /**\n   *\n   * @param transform\n   * @returns result\n   */\n  _toBinaryCoordinates(transform) {\n    // Expands the protobuf data to an intermediate Flat GeoJSON\n    // data format, which maps closely to the binary data buffers.\n    // It is similar to GeoJSON, but rather than storing the coordinates\n    // in multidimensional arrays, we have a 1D `data` with all the\n    // coordinates, and then index into this using the `indices`\n    // parameter, e.g.\n    //\n    // geometry: {\n    //   type: 'Point', data: [1,2], indices: [0]\n    // }\n    // geometry: {\n    //   type: 'LineString', data: [1,2,3,4,...], indices: [0]\n    // }\n    // geometry: {\n    //   type: 'Polygon', data: [1,2,3,4,...], indices: [[0, 2]]\n    // }\n    // Thus the indices member lets us look up the relevant range\n    // from the data array.\n    // The Multi* versions of the above types share the same data\n    // structure, just with multiple elements in the indices array\n    const geom = this.loadGeometry();\n    let geometry;\n\n    // Apply the supplied transformation to data\n    transform(geom.data, this);\n\n    const coordLength = 2;\n\n    // eslint-disable-next-line default-case\n    switch (this.type) {\n      case 1: // Point\n        this._geometryInfo.pointFeaturesCount++;\n        this._geometryInfo.pointPositionsCount += geom.indices.length;\n        geometry = {type: 'Point', ...geom};\n        break;\n\n      case 2: // LineString\n        this._geometryInfo.lineFeaturesCount++;\n        this._geometryInfo.linePathsCount += geom.indices.length;\n        this._geometryInfo.linePositionsCount += geom.data.length / coordLength;\n        geometry = {type: 'LineString', ...geom};\n        break;\n\n      case 3: // Polygon\n        geometry = classifyRings(geom);\n\n        // Unlike Point & LineString geom.indices is a 2D array, thanks\n        // to the classifyRings method\n        this._geometryInfo.polygonFeaturesCount++;\n        this._geometryInfo.polygonObjectsCount += geometry.indices.length;\n\n        for (const indices of geometry.indices) {\n          this._geometryInfo.polygonRingsCount += indices.length;\n        }\n        this._geometryInfo.polygonPositionsCount += geometry.data.length / coordLength;\n\n        break;\n      default:\n        throw new Error(`Invalid geometry type: ${this.type}`);\n    }\n\n    const result: FlatFeature = {type: 'Feature', geometry, properties: this.properties};\n\n    if (this.id !== null) {\n      result.id = this.id;\n    }\n\n    return result;\n  }\n\n  toBinaryCoordinates(\n    options: {x: number; y: number; z: number} | ((data: number[], feature: {extent: any}) => void)\n  ): FlatFeature {\n    if (typeof options === 'function') {\n      return this._toBinaryCoordinates(options);\n    }\n    const {x, y, z} = options;\n    const size = this.extent * Math.pow(2, z);\n    const x0 = this.extent * x;\n    const y0 = this.extent * y;\n\n    return this._toBinaryCoordinates((data: number[]) => project(data, x0, y0, size));\n  }\n}\n"],"file":"vector-tile-feature.js"}