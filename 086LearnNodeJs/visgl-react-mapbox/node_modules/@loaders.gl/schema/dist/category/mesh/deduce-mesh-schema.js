"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeMeshAttributeMetadata = exports.deduceMeshField = exports.deduceMeshSchema = void 0;
const schema_1 = require("../../lib/schema/schema");
const arrow_like_type_utils_1 = require("../../lib/arrow/arrow-like-type-utils");
/**
 * Create a schema for mesh attributes data
 * @param attributes
 * @param metadata
 * @returns
 */
function deduceMeshSchema(attributes, metadata) {
    const fields = deduceMeshFields(attributes);
    return new schema_1.Schema(fields, metadata);
}
exports.deduceMeshSchema = deduceMeshSchema;
/**
 * Create arrow-like schema field for mesh attribute
 * @param attributeName
 * @param attribute
 * @param optionalMetadata
 * @returns
 */
function deduceMeshField(attributeName, attribute, optionalMetadata) {
    const type = (0, arrow_like_type_utils_1.getArrowTypeFromTypedArray)(attribute.value);
    const metadata = optionalMetadata ? optionalMetadata : makeMeshAttributeMetadata(attribute);
    const field = new schema_1.Field(attributeName, new schema_1.FixedSizeList(attribute.size, new schema_1.Field('value', type)), false, metadata);
    return field;
}
exports.deduceMeshField = deduceMeshField;
/**
 * Create fields array for mesh attributes
 * @param attributes
 * @returns
 */
function deduceMeshFields(attributes) {
    const fields = [];
    for (const attributeName in attributes) {
        const attribute = attributes[attributeName];
        fields.push(deduceMeshField(attributeName, attribute));
    }
    return fields;
}
/**
 * Make metadata by mesh attribute properties
 * @param attribute
 * @returns
 */
function makeMeshAttributeMetadata(attribute) {
    const result = new Map();
    if ('byteOffset' in attribute) {
        result.set('byteOffset', attribute.byteOffset.toString(10));
    }
    if ('byteStride' in attribute) {
        result.set('byteStride', attribute.byteStride.toString(10));
    }
    if ('normalized' in attribute) {
        result.set('normalized', attribute.normalized.toString());
    }
    return result;
}
exports.makeMeshAttributeMetadata = makeMeshAttributeMetadata;
