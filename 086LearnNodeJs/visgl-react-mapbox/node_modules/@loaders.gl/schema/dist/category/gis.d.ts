import type { TypedArray } from '../types';
import type { Feature, Geometry, Point, LineString, Polygon } from 'geojson';
export type { GeoJSON, Feature, FeatureCollection, Geometry, Position, GeoJsonProperties } from 'geojson';
export type { Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon, GeometryCollection } from 'geojson';
export declare type GeojsonGeometryInfo = {
    coordLength: number;
    pointPositionsCount: number;
    pointFeaturesCount: number;
    linePositionsCount: number;
    linePathsCount: number;
    lineFeaturesCount: number;
    polygonPositionsCount: number;
    polygonObjectsCount: number;
    polygonRingsCount: number;
    polygonFeaturesCount: number;
};
export declare type FlatGeometryType = 'Point' | 'LineString' | 'Polygon';
declare type RemoveCoordinatesField<Type> = {
    [Property in keyof Type as Exclude<Property, 'coordinates'>]: Type[Property];
};
/**
 * Generic flat geometry data storage type
 */
export declare type FlatIndexedGeometry = {
    data: number[];
    indices: number[];
};
/**
 * GeoJSON (Multi)Point geometry with coordinate data flattened into `data` array and indexed by `indices`
 */
export declare type FlatPoint = RemoveCoordinatesField<Point> & FlatIndexedGeometry;
/**
 * GeoJSON (Multi)LineString geometry with coordinate data flattened into `data` array and indexed by `indices`
 */
export declare type FlatLineString = RemoveCoordinatesField<LineString> & FlatIndexedGeometry;
/**
 * GeoJSON (Multi)Polygon geometry with coordinate data flattened into `data` array and indexed by 2D `indices`
 */
export declare type FlatPolygon = RemoveCoordinatesField<Polygon> & {
    data: number[];
    indices: number[][];
    areas: number[][];
};
export declare type FlatGeometry = FlatPoint | FlatLineString | FlatPolygon;
declare type FlattenGeometry<Type> = {
    [Property in keyof Type]: Type[Property] extends Geometry ? FlatGeometry : Type[Property];
};
/**
 * GeoJSON Feature with Geometry replaced by FlatGeometry
 */
export declare type FlatFeature = FlattenGeometry<Feature>;
export declare type BinaryAttribute = {
    value: TypedArray;
    size: number;
};
export declare type BinaryGeometryType = 'Point' | 'LineString' | 'Polygon';
declare type NumericProps = {
    [key: string]: BinaryAttribute;
};
declare type Properties = object[];
/**
 * Represent a single Geometry, similar to a GeoJSON Geometry
 */
export declare type BinaryGeometry = BinaryPointGeometry | BinaryLineGeometry | BinaryPolygonGeometry;
export declare type BinaryPointGeometry = {
    type: 'Point';
    positions: BinaryAttribute;
};
export declare type BinaryLineGeometry = {
    type: 'LineString';
    positions: BinaryAttribute;
    pathIndices: BinaryAttribute;
};
export declare type BinaryPolygonGeometry = {
    type: 'Polygon';
    positions: BinaryAttribute;
    polygonIndices: BinaryAttribute;
    primitivePolygonIndices: BinaryAttribute;
    triangles?: BinaryAttribute;
};
export declare type BinaryProperties = {
    featureIds: BinaryAttribute;
    globalFeatureIds: BinaryAttribute;
    numericProps: NumericProps;
    properties: Properties;
    fields?: Properties;
};
export declare type BinaryPointFeatures = BinaryPointGeometry & BinaryProperties;
export declare type BinaryLineFeatures = BinaryLineGeometry & BinaryProperties;
export declare type BinaryPolygonFeatures = BinaryPolygonGeometry & BinaryProperties;
/**
 * Represent a collection of Features, similar to a GeoJSON FeatureCollection
 */
export declare type BinaryFeatures = {
    points?: BinaryPointFeatures;
    lines?: BinaryLineFeatures;
    polygons?: BinaryPolygonFeatures;
};
//# sourceMappingURL=gis.d.ts.map