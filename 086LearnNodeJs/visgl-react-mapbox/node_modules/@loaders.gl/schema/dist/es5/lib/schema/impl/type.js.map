{"version":3,"sources":["../../../../../src/lib/schema/impl/type.ts"],"names":["DataType","Type","NONE","other","x","typeId","Null","Int","Float","Binary","Utf8","Bool","Decimal","Date","Time","Timestamp","Interval","List","Struct","Union","FixedSizeBinary","FixedSizeList","Map","Dictionary","Symbol","toStringTag","isSigned","bitWidth","Int8","Int16","Int32","Int64","Uint8","Uint16","Uint32","Uint64","Precision","HALF","SINGLE","DOUBLE","precision","Float16","Float32","Float64","DateUnit","DAY","MILLISECOND","unit","DateDay","DateMillisecond","TimeUnit","SECOND","MICROSECOND","NANOSECOND","TimeSecond","TimeMillisecond","timezone","TimestampSecond","TimestampMillisecond","TimestampMicrosecond","TimestampNanosecond","IntervalUnit","DAY_TIME","YEAR_MONTH","IntervalDayTime","IntervalYearMonth","listSize","child","children","type","valueType","map","f","name","join"],"mappings":"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","sourcesContent":["// This code is adapted from ArrowJS https://github.com/apache/arrow\n// under Apache license http://www.apache.org/licenses/LICENSE-2.0\n\nimport {Type} from './enum';\n\nimport Field from './field';\n\nexport {Type} from './enum';\n\nexport type TypedIntArray =\n  | Int8Array\n  | Uint8Array\n  | Int16Array\n  | Uint16Array\n  | Int32Array\n  | Uint32Array\n  | Int32Array\n  | Uint32Array\n  | Uint8ClampedArray;\n\nexport type TypedFloatArray = Float32Array | Float64Array;\n\nexport type TypedArray = TypedIntArray | TypedFloatArray;\n\nexport type AnyArrayType = Array<any> | TypedIntArray | TypedFloatArray;\n\nexport class DataType {\n  static isNull(x: any): boolean {\n    return x && x.typeId === Type.Null;\n  }\n  static isInt(x: any): boolean {\n    return x && x.typeId === Type.Int;\n  }\n  static isFloat(x: any): boolean {\n    return x && x.typeId === Type.Float;\n  }\n  static isBinary(x: any): boolean {\n    return x && x.typeId === Type.Binary;\n  }\n  static isUtf8(x: any): boolean {\n    return x && x.typeId === Type.Utf8;\n  }\n  static isBool(x: any): boolean {\n    return x && x.typeId === Type.Bool;\n  }\n  static isDecimal(x: any): boolean {\n    return x && x.typeId === Type.Decimal;\n  }\n  static isDate(x: any): boolean {\n    return x && x.typeId === Type.Date;\n  }\n  static isTime(x: any): boolean {\n    return x && x.typeId === Type.Time;\n  }\n  static isTimestamp(x: any): boolean {\n    return x && x.typeId === Type.Timestamp;\n  }\n  static isInterval(x: any): boolean {\n    return x && x.typeId === Type.Interval;\n  }\n  static isList(x: any): boolean {\n    return x && x.typeId === Type.List;\n  }\n  static isStruct(x: any): boolean {\n    return x && x.typeId === Type.Struct;\n  }\n  static isUnion(x: any): boolean {\n    return x && x.typeId === Type.Union;\n  }\n  static isFixedSizeBinary(x: any): boolean {\n    return x && x.typeId === Type.FixedSizeBinary;\n  }\n  static isFixedSizeList(x: any): boolean {\n    return x && x.typeId === Type.FixedSizeList;\n  }\n  static isMap(x: any): boolean {\n    return x && x.typeId === Type.Map;\n  }\n  static isDictionary(x: any): boolean {\n    return x && x.typeId === Type.Dictionary;\n  }\n\n  get typeId(): Type {\n    return Type.NONE;\n  }\n\n  // get ArrayType(): AnyArrayType {\n  //   return Int8Array;\n  // }\n\n  // get ArrayType() { return Array; }\n  compareTo(other: DataType): boolean {\n    // TODO\n    return this === other; // comparer.visit(this, other);\n  }\n}\n\n// NULL\n\nexport class Null extends DataType {\n  get typeId(): Type {\n    return Type.Null;\n  }\n  get [Symbol.toStringTag](): string {\n    return 'Null';\n  }\n  toString(): string {\n    return 'Null';\n  }\n}\n\n// BOOLEANS\n\nexport class Bool extends DataType {\n  get typeId(): Type {\n    return Type.Bool;\n  }\n  // get ArrayType() {\n  //   return Uint8Array;\n  // }\n  get [Symbol.toStringTag](): string {\n    return 'Bool';\n  }\n  toString(): string {\n    return 'Bool';\n  }\n}\n\n// INTS\n\nexport class Int extends DataType {\n  readonly isSigned: boolean;\n  readonly bitWidth: number;\n  constructor(isSigned, bitWidth) {\n    super();\n    this.isSigned = isSigned;\n    this.bitWidth = bitWidth;\n  }\n  get typeId(): Type {\n    return Type.Int;\n  }\n  // get ArrayType() {\n  //   switch (this.bitWidth) {\n  //     case 8:\n  //       return this.isSigned ? Int8Array : Uint8Array;\n  //     case 16:\n  //       return this.isSigned ? Int16Array : Uint16Array;\n  //     case 32:\n  //       return this.isSigned ? Int32Array : Uint32Array;\n  //     case 64:\n  //       return this.isSigned ? Int32Array : Uint32Array;\n  //     default:\n  //       throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n  //   }\n  // }\n  get [Symbol.toStringTag](): string {\n    return 'Int';\n  }\n  toString(): string {\n    return `${this.isSigned ? 'I' : 'Ui'}nt${this.bitWidth}`;\n  }\n}\n\nexport class Int8 extends Int {\n  constructor() {\n    super(true, 8);\n  }\n}\nexport class Int16 extends Int {\n  constructor() {\n    super(true, 16);\n  }\n}\nexport class Int32 extends Int {\n  constructor() {\n    super(true, 32);\n  }\n}\nexport class Int64 extends Int {\n  constructor() {\n    super(true, 64);\n  }\n}\nexport class Uint8 extends Int {\n  constructor() {\n    super(false, 8);\n  }\n}\nexport class Uint16 extends Int {\n  constructor() {\n    super(false, 16);\n  }\n}\nexport class Uint32 extends Int {\n  constructor() {\n    super(false, 32);\n  }\n}\nexport class Uint64 extends Int {\n  constructor() {\n    super(false, 64);\n  }\n}\n\n// FLOATS\n\nconst Precision = {\n  HALF: 16,\n  SINGLE: 32,\n  DOUBLE: 64\n};\n\nexport class Float extends DataType {\n  readonly precision: number;\n  constructor(precision) {\n    super();\n    this.precision = precision;\n  }\n  get typeId(): Type {\n    return Type.Float;\n  }\n  // get ArrayType() {\n  //   switch (this.precision) {\n  //     case Precision.HALF:\n  //       return Uint16Array;\n  //     case Precision.SINGLE:\n  //       return Float32Array;\n  //     case Precision.DOUBLE:\n  //       return Float64Array;\n  //     default:\n  //       throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n  //   }\n  // }\n  get [Symbol.toStringTag](): string {\n    return 'Float';\n  }\n  toString(): string {\n    return `Float${this.precision}`;\n  }\n}\n\nexport class Float16 extends Float {\n  constructor() {\n    super(Precision.HALF);\n  }\n}\nexport class Float32 extends Float {\n  constructor() {\n    super(Precision.SINGLE);\n  }\n}\nexport class Float64 extends Float {\n  constructor() {\n    super(Precision.DOUBLE);\n  }\n}\n\nexport class Binary extends DataType {\n  constructor() {\n    super();\n  }\n  get typeId() {\n    return Type.Binary;\n  }\n  toString() {\n    return 'Binary';\n  }\n  get [Symbol.toStringTag]() {\n    return 'Binary';\n  }\n}\n\n// STRINGS\n\nexport class Utf8 extends DataType {\n  get typeId(): Type {\n    return Type.Utf8;\n  }\n  // get ArrayType() {\n  //   return Uint8Array;\n  // }\n  get [Symbol.toStringTag](): string {\n    return 'Utf8';\n  }\n  toString(): string {\n    return 'Utf8';\n  }\n}\n\n// DATES, TIMES AND INTERVALS\n\nconst DateUnit = {\n  DAY: 0,\n  MILLISECOND: 1\n};\n\nexport class Date extends DataType {\n  readonly unit: number;\n  constructor(unit) {\n    super();\n    this.unit = unit;\n  }\n  get typeId(): Type {\n    return Type.Date;\n  }\n  // get ArrayType() {\n  //   return Int32Array;\n  // }\n  get [Symbol.toStringTag](): string {\n    return 'Date';\n  }\n  toString(): string {\n    return `Date${(this.unit + 1) * 32}<${DateUnit[this.unit]}>`;\n  }\n}\n\nexport class DateDay extends Date {\n  constructor() {\n    super(DateUnit.DAY);\n  }\n}\nexport class DateMillisecond extends Date {\n  constructor() {\n    super(DateUnit.MILLISECOND);\n  }\n}\n\nconst TimeUnit = {\n  SECOND: 1,\n  MILLISECOND: 1e3,\n  MICROSECOND: 1e6,\n  NANOSECOND: 1e9\n};\n\nexport class Time extends DataType {\n  readonly unit: any;\n  readonly bitWidth: number;\n\n  constructor(unit: any, bitWidth: number) {\n    super();\n    this.unit = unit;\n    this.bitWidth = bitWidth;\n  }\n  get typeId(): Type {\n    return Type.Time;\n  }\n  toString(): string {\n    return `Time${this.bitWidth}<${TimeUnit[this.unit]}>`;\n  }\n  get [Symbol.toStringTag](): string {\n    return 'Time';\n  }\n  // get ArrayType() {\n  //   return Int32Array;\n  // }\n}\n\nexport class TimeSecond extends Time {\n  constructor() {\n    super(TimeUnit.SECOND, 32);\n  }\n}\nexport class TimeMillisecond extends Time {\n  constructor() {\n    super(TimeUnit.MILLISECOND, 32);\n  }\n}\n// export class TimeMicrosecond extends Time { constructor() { super(TimeUnit.MICROSECOND, 64); } }\n// export class TimeNanosecond extends Time { constructor() { super(TimeUnit.NANOSECOND, 64); } }\n\nexport class Timestamp extends DataType {\n  readonly unit: any;\n  readonly timezone: any;\n\n  constructor(unit: any, timezone = null) {\n    super();\n    this.unit = unit;\n    this.timezone = timezone;\n  }\n  get typeId(): Type {\n    return Type.Timestamp;\n  }\n  // get ArrayType() {\n  //   return Int32Array;\n  // }\n  get [Symbol.toStringTag](): string {\n    return 'Timestamp';\n  }\n  toString(): string {\n    return `Timestamp<${TimeUnit[this.unit]}${this.timezone ? `, ${this.timezone}` : ''}>`;\n  }\n}\n\nexport class TimestampSecond extends Timestamp {\n  constructor(timezone = null) {\n    super(TimeUnit.SECOND, timezone);\n  }\n}\nexport class TimestampMillisecond extends Timestamp {\n  constructor(timezone = null) {\n    super(TimeUnit.MILLISECOND, timezone);\n  }\n}\nexport class TimestampMicrosecond extends Timestamp {\n  constructor(timezone = null) {\n    super(TimeUnit.MICROSECOND, timezone);\n  }\n}\nexport class TimestampNanosecond extends Timestamp {\n  constructor(timezone = null) {\n    super(TimeUnit.NANOSECOND, timezone);\n  }\n}\n\nconst IntervalUnit = {\n  DAY_TIME: 0,\n  YEAR_MONTH: 1\n};\n\nexport class Interval extends DataType {\n  readonly unit: number;\n  constructor(unit: number) {\n    super();\n    this.unit = unit;\n  }\n  get typeId(): Type {\n    return Type.Interval;\n  }\n  // get ArrayType() {\n  //   return Int32Array;\n  // }\n  get [Symbol.toStringTag](): string {\n    return 'Interval';\n  }\n  toString(): string {\n    return `Interval<${IntervalUnit[this.unit]}>`;\n  }\n}\n\nexport class IntervalDayTime extends Interval {\n  constructor() {\n    super(IntervalUnit.DAY_TIME);\n  }\n}\nexport class IntervalYearMonth extends Interval {\n  constructor() {\n    super(IntervalUnit.YEAR_MONTH);\n  }\n}\n\nexport class FixedSizeList extends DataType {\n  readonly listSize: number;\n  readonly children: Field[];\n\n  constructor(listSize: number, child: Field) {\n    super();\n    this.listSize = listSize;\n    this.children = [child];\n  }\n  get typeId(): Type {\n    return Type.FixedSizeList;\n  }\n  get valueType() {\n    return this.children[0].type;\n  }\n  get valueField() {\n    return this.children[0];\n  }\n  // get ArrayType() {\n  //   return this.valueType.ArrayType;\n  // }\n  get [Symbol.toStringTag](): string {\n    return 'FixedSizeList';\n  }\n  toString(): string {\n    return `FixedSizeList[${this.listSize}]<${this.valueType}>`;\n  }\n}\n\nexport class Struct extends DataType {\n  public readonly children: Field[];\n\n  constructor(children: Field[]) {\n    super();\n    this.children = children;\n  }\n\n  public get typeId() {\n    return Type.Struct;\n  }\n  public toString() {\n    return `Struct<{${this.children.map((f) => `${f.name}:${f.type}`).join(', ')}}>`;\n  }\n  get [Symbol.toStringTag](): string {\n    return 'Struct';\n  }\n}\n"],"file":"type.js"}