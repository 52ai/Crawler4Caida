"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var DEFAULT_ROW_COUNT = 100;

var ColumnarTableBatchAggregator = function () {
  function ColumnarTableBatchAggregator(schema, options) {
    (0, _classCallCheck2.default)(this, ColumnarTableBatchAggregator);
    (0, _defineProperty2.default)(this, "schema", void 0);
    (0, _defineProperty2.default)(this, "length", 0);
    (0, _defineProperty2.default)(this, "allocated", 0);
    (0, _defineProperty2.default)(this, "columns", {});
    this.schema = schema;

    this._reallocateColumns();
  }

  (0, _createClass2.default)(ColumnarTableBatchAggregator, [{
    key: "rowCount",
    value: function rowCount() {
      return this.length;
    }
  }, {
    key: "addArrayRow",
    value: function addArrayRow(row) {
      this._reallocateColumns();

      var i = 0;

      for (var fieldName in this.columns) {
        this.columns[fieldName][this.length] = row[i++];
      }

      this.length++;
    }
  }, {
    key: "addObjectRow",
    value: function addObjectRow(row) {
      this._reallocateColumns();

      for (var fieldName in row) {
        this.columns[fieldName][this.length] = row[fieldName];
      }

      this.length++;
    }
  }, {
    key: "getBatch",
    value: function getBatch() {
      this._pruneColumns();

      var columns = Array.isArray(this.schema) ? this.columns : {};

      if (!Array.isArray(this.schema)) {
        for (var fieldName in this.schema) {
          var field = this.schema[fieldName];
          columns[field.name] = this.columns[field.index];
        }
      }

      this.columns = {};
      var batch = {
        shape: 'columnar-table',
        batchType: 'data',
        data: columns,
        schema: this.schema,
        length: this.length
      };
      return batch;
    }
  }, {
    key: "_reallocateColumns",
    value: function _reallocateColumns() {
      if (this.length < this.allocated) {
        return;
      }

      this.allocated = this.allocated > 0 ? this.allocated *= 2 : DEFAULT_ROW_COUNT;
      this.columns = {};

      for (var fieldName in this.schema) {
        var field = this.schema[fieldName];
        var ArrayType = field.type || Float32Array;
        var oldColumn = this.columns[field.index];

        if (oldColumn && ArrayBuffer.isView(oldColumn)) {
          var typedArray = new ArrayType(this.allocated);
          typedArray.set(oldColumn);
          this.columns[field.index] = typedArray;
        } else if (oldColumn) {
          oldColumn.length = this.allocated;
          this.columns[field.index] = oldColumn;
        } else {
          this.columns[field.index] = new ArrayType(this.allocated);
        }
      }
    }
  }, {
    key: "_pruneColumns",
    value: function _pruneColumns() {
      for (var _i = 0, _Object$entries = Object.entries(this.columns); _i < _Object$entries.length; _i++) {
        var _Object$entries$_i = (0, _slicedToArray2.default)(_Object$entries[_i], 2),
            _columnName = _Object$entries$_i[0],
            column = _Object$entries$_i[1];

        this.columns[_columnName] = column.slice(0, this.length);
      }
    }
  }]);
  return ColumnarTableBatchAggregator;
}();

exports.default = ColumnarTableBatchAggregator;
//# sourceMappingURL=columnar-table-batch-aggregator.js.map