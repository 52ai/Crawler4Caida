{"version":3,"sources":["../../../../src/lib/batches/row-table-batch-aggregator.ts"],"names":["DEFAULT_ROW_COUNT","RowTableBatchAggregator","schema","options","Array","isArray","_headers","key","index","name","length","row","cursor","Number","isFinite","shape","rowObject","addObjectRow","arrayRows","rowArray","addArrayRow","objectRows","rows","slice","batchType","data"],"mappings":";;;;;;;;;;;;;;;AAGA;;AAGA,IAAMA,iBAAiB,GAAG,GAA1B;;IAEqBC,uB;AAUnB,mCAAYC,MAAZ,EAA4BC,OAA5B,EAAwD;AAAA;AAAA;AAAA;AAAA,kDANvC,CAMuC;AAAA,sDALP,IAKO;AAAA,qDAJ9B,IAI8B;AAAA,kDAHvC,CAGuC;AAAA,oDAF3B,EAE2B;AACtD,SAAKA,OAAL,GAAeA,OAAf;AACA,SAAKD,MAAL,GAAcA,MAAd;;AAIA,QAAI,CAACE,KAAK,CAACC,OAAN,CAAcH,MAAd,CAAL,EAA4B;AAC1B,WAAKI,QAAL,GAAgB,EAAhB;;AACA,WAAK,IAAMC,GAAX,IAAkBL,MAAlB,EAA0B;AACxB,aAAKI,QAAL,CAAcJ,MAAM,CAACK,GAAD,CAAN,CAAYC,KAA1B,IAAmCN,MAAM,CAACK,GAAD,CAAN,CAAYE,IAA/C;AACD;AACF;AACF;;;;WAED,oBAAmB;AACjB,aAAO,KAAKC,MAAZ;AACD;;;WAED,qBAAYC,GAAZ,EAAwBC,MAAxB,EAA+C;AAC7C,UAAIC,MAAM,CAACC,QAAP,CAAgBF,MAAhB,CAAJ,EAA6B;AAC3B,aAAKA,MAAL,GAAcA,MAAd;AACD;;AAGD,cAAQ,KAAKT,OAAL,CAAaY,KAArB;AACE,aAAK,kBAAL;AACE,cAAMC,SAAS,GAAG,kCAAmBL,GAAnB,EAAwB,KAAKL,QAA7B,CAAlB;AACA,eAAKW,YAAL,CAAkBD,SAAlB,EAA6BJ,MAA7B;AACA;;AACF,aAAK,iBAAL;AACE,eAAKM,SAAL,GAAiB,KAAKA,SAAL,IAAkB,IAAId,KAAJ,CAAUJ,iBAAV,CAAnC;AACA,eAAKkB,SAAL,CAAe,KAAKR,MAApB,IAA8BC,GAA9B;AACA,eAAKD,MAAL;AACA;AATJ;AAWD;;;WAED,sBAAaC,GAAb,EAA+CC,MAA/C,EAAsE;AACpE,UAAIC,MAAM,CAACC,QAAP,CAAgBF,MAAhB,CAAJ,EAA6B;AAC3B,aAAKA,MAAL,GAAcA,MAAd;AACD;;AAGD,cAAQ,KAAKT,OAAL,CAAaY,KAArB;AACE,aAAK,iBAAL;AACE,cAAMI,QAAQ,GAAG,iCAAkBR,GAAlB,EAAuB,KAAKL,QAA5B,CAAjB;AACA,eAAKc,WAAL,CAAiBD,QAAjB,EAA2BP,MAA3B;AACA;;AACF,aAAK,kBAAL;AACE,eAAKS,UAAL,GAAkB,KAAKA,UAAL,IAAmB,IAAIjB,KAAJ,CAAUJ,iBAAV,CAArC;AACA,eAAKqB,UAAL,CAAgB,KAAKX,MAArB,IAA+BC,GAA/B;AACA,eAAKD,MAAL;AACA;AATJ;AAWD;;;WAED,oBAA8B;AAC5B,UAAIY,IAAI,GAAG,KAAKJ,SAAL,IAAkB,KAAKG,UAAlC;;AACA,UAAI,CAACC,IAAL,EAAW;AACT,eAAO,IAAP;AACD;;AAEDA,MAAAA,IAAI,GAAGA,IAAI,CAACC,KAAL,CAAW,CAAX,EAAc,KAAKb,MAAnB,CAAP;AACA,WAAKQ,SAAL,GAAiB,IAAjB;AACA,WAAKG,UAAL,GAAkB,IAAlB;AAEA,aAAO;AACLN,QAAAA,KAAK,EAAE,KAAKZ,OAAL,CAAaY,KADf;AAELS,QAAAA,SAAS,EAAE,MAFN;AAGLC,QAAAA,IAAI,EAAEH,IAHD;AAILZ,QAAAA,MAAM,EAAE,KAAKA,MAJR;AAKLR,QAAAA,MAAM,EAAE,KAAKA,MALR;AAMLU,QAAAA,MAAM,EAAE,KAAKA;AANR,OAAP;AAQD","sourcesContent":["import type {Schema} from '../schema/schema';\nimport type {TableBatch} from '../../category/table/table-types';\n// import type {ArrayRowTableBatch, ObjectRowTableBatch} from '../../category/table';\nimport {convertToArrayRow, convertToObjectRow} from '../utils/row-utils';\nimport {TableBatchAggregator, TableBatchOptions} from './table-batch-aggregator';\n\nconst DEFAULT_ROW_COUNT = 100;\n\nexport default class RowTableBatchAggregator implements TableBatchAggregator {\n  schema: Schema;\n  options: TableBatchOptions;\n\n  length: number = 0;\n  objectRows: {[columnName: string]: any} | null = null;\n  arrayRows: any[] | null = null;\n  cursor: number = 0;\n  private _headers: string[] = [];\n\n  constructor(schema: Schema, options: TableBatchOptions) {\n    this.options = options;\n    this.schema = schema;\n\n    // schema is an array if there're no headers\n    // object if there are headers\n    if (!Array.isArray(schema)) {\n      this._headers = [];\n      for (const key in schema) {\n        this._headers[schema[key].index] = schema[key].name;\n      }\n    }\n  }\n\n  rowCount(): number {\n    return this.length;\n  }\n\n  addArrayRow(row: any[], cursor?: number): void {\n    if (Number.isFinite(cursor)) {\n      this.cursor = cursor as number;\n    }\n\n    // eslint-disable-next-line default-case\n    switch (this.options.shape) {\n      case 'object-row-table':\n        const rowObject = convertToObjectRow(row, this._headers);\n        this.addObjectRow(rowObject, cursor);\n        break;\n      case 'array-row-table':\n        this.arrayRows = this.arrayRows || new Array(DEFAULT_ROW_COUNT);\n        this.arrayRows[this.length] = row;\n        this.length++;\n        break;\n    }\n  }\n\n  addObjectRow(row: {[columnName: string]: any}, cursor?: number): void {\n    if (Number.isFinite(cursor)) {\n      this.cursor = cursor as number;\n    }\n\n    // eslint-disable-next-line default-case\n    switch (this.options.shape) {\n      case 'array-row-table':\n        const rowArray = convertToArrayRow(row, this._headers);\n        this.addArrayRow(rowArray, cursor);\n        break;\n      case 'object-row-table':\n        this.objectRows = this.objectRows || new Array(DEFAULT_ROW_COUNT);\n        this.objectRows[this.length] = row;\n        this.length++;\n        break;\n    }\n  }\n\n  getBatch(): TableBatch | null {\n    let rows = this.arrayRows || this.objectRows;\n    if (!rows) {\n      return null;\n    }\n\n    rows = rows.slice(0, this.length);\n    this.arrayRows = null;\n    this.objectRows = null;\n\n    return {\n      shape: this.options.shape,\n      batchType: 'data',\n      data: rows,\n      length: this.length,\n      schema: this.schema,\n      cursor: this.cursor\n    };\n  }\n}\n"],"file":"row-table-batch-aggregator.js"}