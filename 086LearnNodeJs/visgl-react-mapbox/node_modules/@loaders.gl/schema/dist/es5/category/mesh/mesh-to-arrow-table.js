"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.convertMeshToArrowTable = convertMeshToArrowTable;

var _Arrow = require("apache-arrow/Arrow.dom");

var _arrowTypeUtils = require("../../lib/arrow/arrow-type-utils");

var _deduceMeshSchema = require("./deduce-mesh-schema");

function convertMeshToArrowTable(mesh, batchSize) {
  var _mesh$schema;

  var vectors = [];
  var fields = [];

  for (var attributeKey in mesh.attributes) {
    var attribute = mesh.attributes[attributeKey];
    var value = attribute.value,
        _attribute$size = attribute.size,
        size = _attribute$size === void 0 ? 1 : _attribute$size;
    var type = (0, _arrowTypeUtils.getArrowType)(value);
    var vector = (0, _arrowTypeUtils.getArrowVector)(value);
    var listType = new _Arrow.FixedSizeList(size, new _Arrow.Field('value', type));
    var field = new _Arrow.Field(attributeKey, listType, false, (0, _deduceMeshSchema.makeMeshAttributeMetadata)(attribute));
    var data = new _Arrow.Data(listType, 0, value.length / size, 0, undefined, [vector]);
    var listVector = new _Arrow.FixedSizeListVector(data);
    vectors.push(listVector);
    fields.push(field);
  }

  var schema = new _Arrow.Schema(fields, (mesh === null || mesh === void 0 ? void 0 : (_mesh$schema = mesh.schema) === null || _mesh$schema === void 0 ? void 0 : _mesh$schema.metadata) || new Map());
  var recordBatch = new _Arrow.RecordBatch(schema, vectors[0].length, vectors);
  var table = new _Arrow.Table(schema, recordBatch);
  return table;
}
//# sourceMappingURL=mesh-to-arrow-table.js.map