"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.convertMesh = convertMesh;
exports.convertMeshToColumnarTable = convertMeshToColumnarTable;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _meshToArrowTable = require("./mesh-to-arrow-table");

function convertMesh(mesh, shape, options) {
  switch (shape || 'mesh') {
    case 'mesh':
      return mesh;

    case 'columnar-table':
      return convertMeshToColumnarTable(mesh);

    case 'arrow-table':
      return {
        shape: 'arrow-table',
        data: (0, _meshToArrowTable.convertMeshToArrowTable)(mesh)
      };

    default:
      throw new Error("Unsupported shape ".concat(options === null || options === void 0 ? void 0 : options.shape));
  }
}

function convertMeshToColumnarTable(mesh) {
  var columns = {};

  for (var _i = 0, _Object$entries = Object.entries(mesh.attributes); _i < _Object$entries.length; _i++) {
    var _Object$entries$_i = (0, _slicedToArray2.default)(_Object$entries[_i], 2),
        columnName = _Object$entries$_i[0],
        attribute = _Object$entries$_i[1];

    columns[columnName] = attribute.value;
  }

  return {
    shape: 'columnar-table',
    schema: mesh.schema,
    data: columns
  };
}
//# sourceMappingURL=convert-mesh.js.map