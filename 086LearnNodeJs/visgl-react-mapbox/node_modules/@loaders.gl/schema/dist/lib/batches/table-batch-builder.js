"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const base_table_batch_aggregator_1 = __importDefault(require("./base-table-batch-aggregator"));
const row_table_batch_aggregator_1 = __importDefault(require("./row-table-batch-aggregator"));
const columnar_table_batch_aggregator_1 = __importDefault(require("./columnar-table-batch-aggregator"));
const DEFAULT_OPTIONS = {
    shape: 'array-row-table',
    batchSize: 'auto',
    batchDebounceMs: 0,
    limit: 0,
    _limitMB: 0
};
const ERR_MESSAGE = 'TableBatchBuilder';
/** Incrementally builds batches from a stream of rows */
class TableBatchBuilder {
    constructor(schema, options) {
        this.aggregator = null;
        this.batchCount = 0;
        this.bytesUsed = 0;
        this.isChunkComplete = false;
        this.lastBatchEmittedMs = Date.now();
        this.totalLength = 0;
        this.totalBytes = 0;
        this.rowBytes = 0;
        this.schema = schema;
        this.options = { ...DEFAULT_OPTIONS, ...options };
    }
    limitReached() {
        if (Boolean(this.options?.limit) && this.totalLength >= this.options.limit) {
            return true;
        }
        if (Boolean(this.options?._limitMB) && this.totalBytes / 1e6 >= this.options._limitMB) {
            return true;
        }
        return false;
    }
    /** @deprecated Use addArrayRow or addObjectRow */
    addRow(row) {
        if (this.limitReached()) {
            return;
        }
        this.totalLength++;
        this.rowBytes = this.rowBytes || this._estimateRowMB(row);
        this.totalBytes += this.rowBytes;
        if (Array.isArray(row)) {
            this.addArrayRow(row);
        }
        else {
            this.addObjectRow(row);
        }
    }
    /** Add one row to the batch */
    addArrayRow(row) {
        if (!this.aggregator) {
            const TableBatchType = this._getTableBatchType();
            this.aggregator = new TableBatchType(this.schema, this.options);
        }
        this.aggregator.addArrayRow(row);
    }
    /** Add one row to the batch */
    addObjectRow(row) {
        if (!this.aggregator) {
            const TableBatchType = this._getTableBatchType();
            this.aggregator = new TableBatchType(this.schema, this.options);
        }
        this.aggregator.addObjectRow(row);
    }
    /** Mark an incoming raw memory chunk has completed */
    chunkComplete(chunk) {
        if (chunk instanceof ArrayBuffer) {
            this.bytesUsed += chunk.byteLength;
        }
        if (typeof chunk === 'string') {
            this.bytesUsed += chunk.length;
        }
        this.isChunkComplete = true;
    }
    getFullBatch(options) {
        return this._isFull() ? this._getBatch(options) : null;
    }
    getFinalBatch(options) {
        return this._getBatch(options);
    }
    // INTERNAL
    _estimateRowMB(row) {
        return Array.isArray(row) ? row.length * 8 : Object.keys(row).length * 8;
    }
    _isFull() {
        // No batch, not ready
        if (!this.aggregator || this.aggregator.rowCount() === 0) {
            return false;
        }
        // if batchSize === 'auto' we wait for chunk to complete
        // if batchSize === number, ensure we have enough rows
        if (this.options.batchSize === 'auto') {
            if (!this.isChunkComplete) {
                return false;
            }
        }
        else if (this.options.batchSize > this.aggregator.rowCount()) {
            return false;
        }
        // Debounce batches
        if (this.options.batchDebounceMs > Date.now() - this.lastBatchEmittedMs) {
            return false;
        }
        // Emit batch
        this.isChunkComplete = false;
        this.lastBatchEmittedMs = Date.now();
        return true;
    }
    /**
     * bytesUsed can be set via chunkComplete or via getBatch*
     */
    _getBatch(options) {
        if (!this.aggregator) {
            return null;
        }
        // TODO - this can overly increment bytes used?
        if (options?.bytesUsed) {
            this.bytesUsed = options.bytesUsed;
        }
        const normalizedBatch = this.aggregator.getBatch();
        normalizedBatch.count = this.batchCount;
        normalizedBatch.bytesUsed = this.bytesUsed;
        Object.assign(normalizedBatch, options);
        this.batchCount++;
        this.aggregator = null;
        return normalizedBatch;
    }
    _getTableBatchType() {
        switch (this.options.shape) {
            case 'row-table':
                return base_table_batch_aggregator_1.default;
            case 'array-row-table':
            case 'object-row-table':
                return row_table_batch_aggregator_1.default;
            case 'columnar-table':
                return columnar_table_batch_aggregator_1.default;
            case 'arrow-table':
                if (!TableBatchBuilder.ArrowBatch) {
                    throw new Error(ERR_MESSAGE);
                }
                return TableBatchBuilder.ArrowBatch;
            default:
                throw new Error(ERR_MESSAGE);
        }
    }
}
exports.default = TableBatchBuilder;
