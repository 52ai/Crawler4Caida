{"version":3,"sources":["../../../../src/lib/worker-farm/worker-pool.ts"],"names":["isMobile","WorkerThread","WorkerJob","WorkerPool","isSupported","constructor","props","source","url","setProps","destroy","idleQueue","forEach","worker","isDestroyed","name","undefined","maxConcurrency","maxMobileConcurrency","reuseWorkers","onDebug","startJob","onMessage","job","type","data","done","onError","error","startPromise","Promise","onStart","jobQueue","push","_startQueuedJob","length","workerThread","_getAvailableWorker","queuedJob","shift","message","backlog","payload","result","returnWorkerToQueue","shouldDestroyWorker","count","_getMaxConcurrency","toLowerCase"],"mappings":"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","sourcesContent":["import type {WorkerMessageType, WorkerMessagePayload} from '../../types';\nimport {isMobile} from '../env-utils/globals';\nimport WorkerThread from './worker-thread';\nimport WorkerJob from './worker-job';\n\n/** WorkerPool onDebug Callback Parameters */\ntype OnDebugParameters = {\n  message: string;\n  worker: string;\n  name: string;\n  job: string;\n  backlog: number;\n  workerThread: WorkerThread;\n};\n\n/** WorkerPool Properties */\nexport type WorkerPoolProps = {\n  name?: string;\n  source?: string; // | Function;\n  url?: string;\n  maxConcurrency?: number;\n  maxMobileConcurrency?: number;\n  onDebug?: (options: OnDebugParameters) => any;\n  reuseWorkers?: boolean;\n};\n\n/** Private helper types */\ntype OnMessage = (job: WorkerJob, type: WorkerMessageType, payload: WorkerMessagePayload) => void;\ntype OnError = (job: WorkerJob, error: Error) => void;\n\ntype QueuedJob = {\n  name: string;\n  onMessage: OnMessage;\n  onError: OnError;\n  onStart: (value: any) => void; // Resolve job start promise\n};\n\n/**\n * Process multiple data messages with small pool of identical workers\n */\nexport default class WorkerPool {\n  name: string = 'unnamed';\n  source?: string; // | Function;\n  url?: string;\n  maxConcurrency: number = 1;\n  maxMobileConcurrency: number = 1;\n  onDebug: (options: OnDebugParameters) => any = () => {};\n  reuseWorkers: boolean = true;\n\n  private props: WorkerPoolProps = {};\n  private jobQueue: QueuedJob[] = [];\n  private idleQueue: WorkerThread[] = [];\n  private count = 0;\n  private isDestroyed = false;\n\n  /** Checks if workers are supported on this platform */\n  static isSupported(): boolean {\n    return WorkerThread.isSupported();\n  }\n\n  /**\n   * @param processor - worker function\n   * @param maxConcurrency - max count of workers\n   */\n  constructor(props: WorkerPoolProps) {\n    this.source = props.source;\n    this.url = props.url;\n    this.setProps(props);\n  }\n\n  /**\n   * Terminates all workers in the pool\n   * @note Can free up significant memory\n   */\n  destroy(): void {\n    // Destroy idle workers, active Workers will be destroyed on completion\n    this.idleQueue.forEach((worker) => worker.destroy());\n    this.isDestroyed = true;\n  }\n\n  setProps(props: WorkerPoolProps) {\n    this.props = {...this.props, ...props};\n\n    if (props.name !== undefined) {\n      this.name = props.name;\n    }\n    if (props.maxConcurrency !== undefined) {\n      this.maxConcurrency = props.maxConcurrency;\n    }\n    if (props.maxMobileConcurrency !== undefined) {\n      this.maxMobileConcurrency = props.maxMobileConcurrency;\n    }\n    if (props.reuseWorkers !== undefined) {\n      this.reuseWorkers = props.reuseWorkers;\n    }\n    if (props.onDebug !== undefined) {\n      this.onDebug = props.onDebug;\n    }\n  }\n\n  async startJob(\n    name: string,\n    onMessage: OnMessage = (job, type, data) => job.done(data),\n    onError: OnError = (job, error) => job.error(error)\n  ): Promise<WorkerJob> {\n    // Promise resolves when thread starts working on this job\n    const startPromise = new Promise<WorkerJob>((onStart) => {\n      // Promise resolves when thread completes or fails working on this job\n      this.jobQueue.push({name, onMessage, onError, onStart});\n      return this;\n    });\n    this._startQueuedJob(); // eslint-disable-line @typescript-eslint/no-floating-promises\n    return await startPromise;\n  }\n\n  // PRIVATE\n\n  /**\n   * Starts first queued job if worker is available or can be created\n   * Called when job is started and whenever a worker returns to the idleQueue\n   */\n  async _startQueuedJob(): Promise<void> {\n    if (!this.jobQueue.length) {\n      return;\n    }\n\n    const workerThread = this._getAvailableWorker();\n    if (!workerThread) {\n      return;\n    }\n\n    // We have a worker, dequeue and start the job\n    const queuedJob = this.jobQueue.shift();\n    if (queuedJob) {\n      // Emit a debug event\n      // @ts-ignore\n      this.onDebug({\n        message: 'Starting job',\n        name: queuedJob.name,\n        workerThread,\n        backlog: this.jobQueue.length\n      });\n\n      // Create a worker job to let the app access thread and manage job completion\n      const job = new WorkerJob(queuedJob.name, workerThread);\n\n      // Set the worker thread's message handlers\n      workerThread.onMessage = (data) => queuedJob.onMessage(job, data.type, data.payload);\n      workerThread.onError = (error) => queuedJob.onError(job, error);\n\n      // Resolve the start promise so that the app can start sending messages to worker\n      queuedJob.onStart(job);\n\n      // Wait for the app to signal that the job is complete, then return worker to queue\n      try {\n        await job.result;\n      } finally {\n        this.returnWorkerToQueue(workerThread);\n      }\n    }\n  }\n\n  /**\n   * Returns a worker to the idle queue\n   * Destroys the worker if\n   *  - pool is destroyed\n   *  - if this pool doesn't reuse workers\n   *  - if maxConcurrency has been lowered\n   * @param worker\n   */\n  returnWorkerToQueue(worker: WorkerThread) {\n    const shouldDestroyWorker =\n      this.isDestroyed || !this.reuseWorkers || this.count > this._getMaxConcurrency();\n\n    if (shouldDestroyWorker) {\n      worker.destroy();\n      this.count--;\n    } else {\n      this.idleQueue.push(worker);\n    }\n\n    if (!this.isDestroyed) {\n      this._startQueuedJob(); // eslint-disable-line @typescript-eslint/no-floating-promises\n    }\n  }\n\n  /**\n   * Returns idle worker or creates new worker if maxConcurrency has not been reached\n   */\n  _getAvailableWorker(): WorkerThread | null {\n    // If a worker has completed and returned to the queue, it can be used\n    if (this.idleQueue.length > 0) {\n      return this.idleQueue.shift() || null;\n    }\n\n    // Create fresh worker if we haven't yet created the max amount of worker threads for this worker source\n    if (this.count < this._getMaxConcurrency()) {\n      this.count++;\n      const name = `${this.name.toLowerCase()} (#${this.count} of ${this.maxConcurrency})`;\n      return new WorkerThread({name, source: this.source, url: this.url});\n    }\n\n    // No worker available, have to wait\n    return null;\n  }\n\n  _getMaxConcurrency() {\n    return isMobile ? this.maxMobileConcurrency : this.maxConcurrency;\n  }\n}\n"],"file":"worker-pool.js"}