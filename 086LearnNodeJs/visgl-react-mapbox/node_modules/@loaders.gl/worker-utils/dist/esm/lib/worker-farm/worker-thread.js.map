{"version":3,"sources":["../../../../src/lib/worker-farm/worker-thread.ts"],"names":["Worker","NodeWorker","isBrowser","assert","getLoadableWorkerURL","getTransferList","NOOP","WorkerThread","isSupported","constructor","props","name","source","url","onMessage","onError","error","console","log","worker","_createBrowserWorker","_createNodeWorker","destroy","terminate","terminated","isRunning","Boolean","postMessage","data","transferList","_getErrorFromErrorEvent","event","message","lineno","colno","Error","_loadableURL","onmessage","onerror","onmessageerror","absolute","includes","startsWith","eval","on","code"],"mappings":"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","sourcesContent":["import {Worker as NodeWorker} from '../node/worker_threads';\nimport {isBrowser} from '../env-utils/globals';\nimport {assert} from '../env-utils/assert';\nimport {getLoadableWorkerURL} from '../worker-utils/get-loadable-worker-url';\nimport {getTransferList} from '../worker-utils/get-transfer-list';\n\nconst NOOP = () => {};\n\nexport type WorkerThreadProps = {\n  name: string;\n  source?: string;\n  url?: string;\n};\n\n/**\n * Represents one worker thread\n */\nexport default class WorkerThread {\n  readonly name: string;\n  readonly source: string | undefined;\n  readonly url: string | undefined;\n  terminated: boolean = false;\n  worker: Worker | NodeWorker;\n  onMessage: (message: any) => void;\n  onError: (error: Error) => void;\n\n  private _loadableURL: string = '';\n\n  /** Checks if workers are supported on this platform */\n  static isSupported(): boolean {\n    return (\n      (typeof Worker !== 'undefined' && isBrowser) ||\n      (typeof NodeWorker !== 'undefined' && !isBrowser)\n    );\n  }\n\n  constructor(props: WorkerThreadProps) {\n    const {name, source, url} = props;\n    assert(source || url); // Either source or url must be defined\n    this.name = name;\n    this.source = source;\n    this.url = url;\n    this.onMessage = NOOP;\n    this.onError = (error) => console.log(error); // eslint-disable-line\n\n    this.worker = isBrowser ? this._createBrowserWorker() : this._createNodeWorker();\n  }\n\n  /**\n   * Terminate this worker thread\n   * @note Can free up significant memory\n   */\n  destroy(): void {\n    this.onMessage = NOOP;\n    this.onError = NOOP;\n    this.worker.terminate(); // eslint-disable-line @typescript-eslint/no-floating-promises\n    this.terminated = true;\n  }\n\n  get isRunning() {\n    return Boolean(this.onMessage);\n  }\n\n  /**\n   * Send a message to this worker thread\n   * @param data any data structure, ideally consisting mostly of transferrable objects\n   * @param transferList If not supplied, calculated automatically by traversing data\n   */\n  postMessage(data: any, transferList?: any[]): void {\n    transferList = transferList || getTransferList(data);\n    // @ts-ignore\n    this.worker.postMessage(data, transferList);\n  }\n\n  // PRIVATE\n\n  /**\n   * Generate a standard Error from an ErrorEvent\n   * @param event\n   */\n  _getErrorFromErrorEvent(event: ErrorEvent): Error {\n    // Note Error object does not have the expected fields if loading failed completely\n    // https://developer.mozilla.org/en-US/docs/Web/API/Worker#Event_handlers\n    // https://developer.mozilla.org/en-US/docs/Web/API/ErrorEvent\n    let message = 'Failed to load ';\n    message += `worker ${this.name} from ${this.url}. `;\n    if (event.message) {\n      message += `${event.message} in `;\n    }\n    // const hasFilename = event.filename && !event.filename.startsWith('blob:');\n    // message += hasFilename ? event.filename : this.source.slice(0, 100);\n    if (event.lineno) {\n      message += `:${event.lineno}:${event.colno}`;\n    }\n    return new Error(message);\n  }\n\n  /**\n   * Creates a worker thread on the browser\n   */\n  _createBrowserWorker(): Worker {\n    this._loadableURL = getLoadableWorkerURL({source: this.source, url: this.url});\n    const worker = new Worker(this._loadableURL, {name: this.name});\n\n    worker.onmessage = (event) => {\n      if (!event.data) {\n        this.onError(new Error('No data received'));\n      } else {\n        this.onMessage(event.data);\n      }\n    };\n    // This callback represents an uncaught exception in the worker thread\n    worker.onerror = (error: ErrorEvent): void => {\n      this.onError(this._getErrorFromErrorEvent(error));\n      this.terminated = true;\n    };\n    // TODO - not clear when this would be called, for now just log in case it happens\n    worker.onmessageerror = (event) => console.error(event); // eslint-disable-line\n\n    return worker;\n  }\n\n  /**\n   * Creates a worker thread in node.js\n   * @todo https://nodejs.org/api/async_hooks.html#async-resource-worker-pool\n   */\n  _createNodeWorker(): NodeWorker {\n    let worker: NodeWorker;\n    if (this.url) {\n      // Make sure relative URLs start with './'\n      const absolute = this.url.includes(':/') || this.url.startsWith('/');\n      const url = absolute ? this.url : `./${this.url}`;\n      // console.log('Starting work from', url);\n      worker = new NodeWorker(url, {eval: false});\n    } else if (this.source) {\n      worker = new NodeWorker(this.source, {eval: true});\n    } else {\n      throw new Error('no worker');\n    }\n    worker.on('message', (data) => {\n      // console.error('message', data);\n      this.onMessage(data);\n    });\n    worker.on('error', (error) => {\n      // console.error('error', error);\n      this.onError(error);\n    });\n    worker.on('exit', (code) => {\n      // console.error('exit', code);\n    });\n    return worker;\n  }\n}\n"],"file":"worker-thread.js"}