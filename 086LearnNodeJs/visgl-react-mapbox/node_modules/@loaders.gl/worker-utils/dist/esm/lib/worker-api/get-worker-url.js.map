{"version":3,"sources":["../../../../src/lib/worker-api/get-worker-url.ts"],"names":["assert","VERSION","__VERSION__","NPM_TAG","getWorkerName","worker","warning","version","name","getWorkerURL","options","workerOptions","id","workerFile","url","workerUrl","_workerType","module","versionTag"],"mappings":"AACA,SAAQA,MAAR,QAAqB,qBAArB;AACA,SAAQC,OAAO,IAAIC,WAAnB,QAAqC,sBAArC;AAEA,MAAMC,OAAO,GAAG,QAAhB;AACA,MAAMF,OAAO,GAAG,mBAAuB,WAAvB,aAAmDE,OAAnE;AAKA,OAAO,SAASC,aAAT,CAAuBC,MAAvB,EAAqD;AAC1D,QAAMC,OAAO,GAAGD,MAAM,CAACE,OAAP,KAAmBN,OAAnB,4BAA+CA,OAA/C,SAA4D,EAA5E;AACA,mBAAUI,MAAM,CAACG,IAAjB,cAAyBH,MAAM,CAACE,OAAhC,SAA0CD,OAA1C;AACD;AASD,OAAO,SAASG,YAAT,CAAsBJ,MAAtB,EAA4CK,OAAsB,GAAG,EAArE,EAAiF;AACtF,QAAMC,aAAa,GAAGD,OAAO,CAACL,MAAM,CAACO,EAAR,CAAP,IAAsB,EAA5C;AAEA,QAAMC,UAAU,aAAMR,MAAM,CAACO,EAAb,eAAhB;AAEA,MAAIE,GAAG,GAAGH,aAAa,CAACI,SAAxB;;AAQA,MAAI,CAACD,GAAD,IAAQT,MAAM,CAACO,EAAP,KAAc,aAA1B,EAAyC;AACvCE,IAAAA,GAAG,GAAGJ,OAAO,CAACK,SAAd;AACD;;AAID,MAAIL,OAAO,CAACM,WAAR,KAAwB,MAA5B,EAAoC;AAClCF,IAAAA,GAAG,qBAAcT,MAAM,CAACY,MAArB,mBAAoCJ,UAApC,CAAH;AACD;;AAGD,MAAI,CAACC,GAAL,EAAU;AAER,QAAIP,OAAO,GAAGF,MAAM,CAACE,OAArB;;AAEA,QAAIA,OAAO,KAAK,QAAhB,EAA0B;AAExBA,MAAAA,OAAO,GAAGJ,OAAV;AACD;;AACD,UAAMe,UAAU,GAAGX,OAAO,cAAOA,OAAP,IAAmB,EAA7C;AACAO,IAAAA,GAAG,2CAAoCT,MAAM,CAACY,MAA3C,SAAoDC,UAApD,mBAAuEL,UAAvE,CAAH;AACD;;AAEDb,EAAAA,MAAM,CAACc,GAAD,CAAN;AAGA,SAAOA,GAAP;AACD","sourcesContent":["import type {WorkerObject, WorkerOptions} from '../../types';\nimport {assert} from '../env-utils/assert';\nimport {VERSION as __VERSION__} from '../env-utils/version';\n\nconst NPM_TAG = 'latest'; // Change to 'latest' on release-branch\nconst VERSION = typeof __VERSION__ !== 'undefined' ? __VERSION__ : NPM_TAG;\n\n/**\n * Gets worker object's name (for debugging in Chrome thread inspector window)\n */\nexport function getWorkerName(worker: WorkerObject): string {\n  const warning = worker.version !== VERSION ? ` (worker-utils@${VERSION})` : '';\n  return `${worker.name}@${worker.version}${warning}`;\n}\n\n/**\n * Generate a worker URL based on worker object and options\n * @returns A URL to one of the following:\n * - a published worker on unpkg CDN\n * - a local test worker\n * - a URL provided by the user in options\n */\nexport function getWorkerURL(worker: WorkerObject, options: WorkerOptions = {}): string {\n  const workerOptions = options[worker.id] || {};\n\n  const workerFile = `${worker.id}-worker.js`;\n\n  let url = workerOptions.workerUrl;\n\n  // HACK: Allow for non-nested workerUrl for the CompressionWorker.\n  // For the compression worker, workerOptions is currently not nested correctly. For most loaders,\n  // you'd have options within an object, i.e. `{mvt: {coordinates: ...}}` but the CompressionWorker\n  // puts options at the top level, not within a `compression` key (its `id`). For this reason, the\n  // above `workerOptions` will always be a string (i.e. `'gzip'`) for the CompressionWorker. To not\n  // break backwards compatibility, we allow the CompressionWorker to have options at the top level.\n  if (!url && worker.id === 'compression') {\n    url = options.workerUrl;\n  }\n\n  // If URL is test, generate local loaders.gl url\n  // @ts-ignore _workerType\n  if (options._workerType === 'test') {\n    url = `modules/${worker.module}/dist/${workerFile}`;\n  }\n\n  // If url override is not provided, generate a URL to published version on npm CDN unpkg.com\n  if (!url) {\n    // GENERATE\n    let version = worker.version;\n    // On master we need to load npm alpha releases published with the `beta` tag\n    if (version === 'latest') {\n      // throw new Error('latest worker version specified');\n      version = NPM_TAG;\n    }\n    const versionTag = version ? `@${version}` : '';\n    url = `https://unpkg.com/@loaders.gl/${worker.module}${versionTag}/dist/${workerFile}`;\n  }\n\n  assert(url);\n\n  // Allow user to override location\n  return url;\n}\n"],"file":"get-worker-url.js"}