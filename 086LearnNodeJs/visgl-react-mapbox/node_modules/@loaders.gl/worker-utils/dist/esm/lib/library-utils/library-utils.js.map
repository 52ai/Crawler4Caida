{"version":3,"sources":["../../../../src/lib/library-utils/library-utils.ts"],"names":["global","isBrowser","isWorker","node","assert","VERSION","__VERSION__","LATEST","loadLibraryPromises","loadLibrary","libraryUrl","moduleName","options","getLibraryUrl","loadLibraryFromFile","library","startsWith","modules","CDN","endsWith","response","fetch","arrayBuffer","requireFromFile","importScripts","scriptSource","text","loadLibraryFromString","id","requireFromString","eval","call","script","document","createElement","appendChild","createTextNode","e","body"],"mappings":"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","sourcesContent":["/* global importScripts */\nimport {global, isBrowser, isWorker} from '../env-utils/globals';\nimport * as node from '../node/require-utils.node';\nimport {assert} from '../env-utils/assert';\nimport {VERSION as __VERSION__} from '../env-utils/version';\n\n// TODO - unpkg.com doesn't seem to have a `latest` specifier for alpha releases...\nconst LATEST = 'latest';\nconst VERSION = typeof __VERSION__ !== 'undefined' ? __VERSION__ : LATEST;\n\nconst loadLibraryPromises: Record<string, Promise<any>> = {}; // promises\n\n/**\n * Dynamically loads a library (\"module\")\n *\n * - wasm library: Array buffer is returned\n * - js library: Parse JS is returned\n *\n * Method depends on environment\n * - browser - script element is created and installed on document\n * - worker - eval is called on global context\n * - node - file is required\n *\n * @param libraryUrl\n * @param moduleName\n * @param options\n */\nexport async function loadLibrary(\n  libraryUrl: string,\n  moduleName: string | null = null,\n  options: object = {}\n): Promise<any> {\n  if (moduleName) {\n    libraryUrl = getLibraryUrl(libraryUrl, moduleName, options);\n  }\n\n  // Ensure libraries are only loaded once\n\n  loadLibraryPromises[libraryUrl] =\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    loadLibraryPromises[libraryUrl] || loadLibraryFromFile(libraryUrl);\n  return await loadLibraryPromises[libraryUrl];\n}\n\n// TODO - sort out how to resolve paths for main/worker and dev/prod\nexport function getLibraryUrl(library: string, moduleName?: string, options?: any): string {\n  // Check if already a URL\n  if (library.startsWith('http')) {\n    return library;\n  }\n\n  // Allow application to import and supply libraries through `options.modules`\n  const modules = options.modules || {};\n  if (modules[library]) {\n    return modules[library];\n  }\n\n  // Load from local files, not from CDN scripts in Node.js\n  // TODO - needs to locate the modules directory when installed!\n  if (!isBrowser) {\n    return `modules/${moduleName}/dist/libs/${library}`;\n  }\n\n  // In browser, load from external scripts\n  if (options.CDN) {\n    assert(options.CDN.startsWith('http'));\n    return `${options.CDN}/${moduleName}@${VERSION}/dist/libs/${library}`;\n  }\n\n  // TODO - loading inside workers requires paths relative to worker script location...\n  if (isWorker) {\n    return `../src/libs/${library}`;\n  }\n\n  return `modules/${moduleName}/src/libs/${library}`;\n}\n\nasync function loadLibraryFromFile(libraryUrl: string): Promise<any> {\n  if (libraryUrl.endsWith('wasm')) {\n    const response = await fetch(libraryUrl);\n    return await response.arrayBuffer();\n  }\n\n  if (!isBrowser) {\n    try {\n      return node && node.requireFromFile && (await node.requireFromFile(libraryUrl));\n    } catch {\n      return null;\n    }\n  }\n  if (isWorker) {\n    return importScripts(libraryUrl);\n  }\n  // TODO - fix - should be more secure than string parsing since observes CORS\n  // if (isBrowser) {\n  //   return await loadScriptFromFile(libraryUrl);\n  // }\n\n  const response = await fetch(libraryUrl);\n  const scriptSource = await response.text();\n  return loadLibraryFromString(scriptSource, libraryUrl);\n}\n\n/*\nasync function loadScriptFromFile(libraryUrl) {\n  const script = document.createElement('script');\n  script.src = libraryUrl;\n  return await new Promise((resolve, reject) => {\n    script.onload = data => {\n      resolve(data);\n    };\n    script.onerror = reject;\n  });\n}\n*/\n\n// TODO - Needs security audit...\n//  - Raw eval call\n//  - Potentially bypasses CORS\n// Upside is that this separates fetching and parsing\n// we could create a`LibraryLoader` or`ModuleLoader`\nfunction loadLibraryFromString(scriptSource: string, id: string): null | any {\n  if (!isBrowser) {\n    return node.requireFromString && node.requireFromString(scriptSource, id);\n  }\n\n  if (isWorker) {\n    // Use lvalue trick to make eval run in global scope\n    eval.call(global, scriptSource); // eslint-disable-line no-eval\n    // https://stackoverflow.com/questions/9107240/1-evalthis-vs-evalthis-in-javascript\n    // http://perfectionkills.com/global-eval-what-are-the-options/\n    return null;\n  }\n\n  const script = document.createElement('script');\n  script.id = id;\n  // most browsers like a separate text node but some throw an error. The second method covers those.\n  try {\n    script.appendChild(document.createTextNode(scriptSource));\n  } catch (e) {\n    script.text = scriptSource;\n  }\n  document.body.appendChild(script);\n  return null;\n}\n\n// TODO - technique for module injection into worker, from THREE.DracoLoader...\n/*\nfunction combineWorkerWithLibrary(worker, jsContent) {\n  var fn = wWorker.toString();\n  var body = [\n    '// injected',\n    jsContent,\n    '',\n    '// worker',\n    fn.substring(fn.indexOf('{') + 1, fn.lastIndexOf('}'))\n  ].join('\\n');\n  this.workerSourceURL = URL.createObjectURL(new Blob([body]));\n}\n*/\n"],"file":"library-utils.js"}