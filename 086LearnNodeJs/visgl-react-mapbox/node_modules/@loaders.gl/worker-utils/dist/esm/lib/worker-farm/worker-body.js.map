{"version":3,"sources":["../../../../src/lib/worker-farm/worker-body.ts"],"names":["getTransferList","getParentPort","parentPort","eval","globalThis","onMessageWrapperMap","Map","WorkerBody","inWorkerThread","self","Boolean","onmessage","onMessage","handleMessage","message","type","payload","data","on","console","debug","addEventListener","onMessageWrapper","get","isKnownMessage","error","removeEventListener","delete","postMessage","source","transferList","startsWith"],"mappings":"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","sourcesContent":["import type {WorkerMessageData, WorkerMessageType, WorkerMessagePayload} from '../../types';\nimport {getTransferList} from '../worker-utils/get-transfer-list';\n\n/** Vile hack to defeat over-zealous bundlers from stripping out the require */\nfunction getParentPort() {\n  // const isNode = globalThis.process;\n  let parentPort;\n  try {\n    // prettier-ignore\n    eval('globalThis.parentPort = require(\\'worker_threads\\').parentPort'); // eslint-disable-line no-eval\n    parentPort = globalThis.parentPort;\n    // eslint-disable-next-line no-empty\n  } catch {}\n  return parentPort;\n}\n\nconst onMessageWrapperMap = new Map();\n\n/**\n * Type safe wrapper for worker code\n */\nexport default class WorkerBody {\n  /** Check that we are actually in a worker thread */\n  static inWorkerThread(): boolean {\n    return typeof self !== 'undefined' || Boolean(getParentPort());\n  }\n\n  /*\n   * (type: WorkerMessageType, payload: WorkerMessagePayload) => any\n   */\n  static set onmessage(onMessage: (type: WorkerMessageType, payload: WorkerMessagePayload) => any) {\n    function handleMessage(message) {\n      // Confusingly the message itself also has a 'type' field which is always set to 'message'\n      const parentPort = getParentPort();\n      const {type, payload} = parentPort ? message : message.data;\n      // if (!isKnownMessage(message)) {\n      //   return;\n      // }\n      onMessage(type, payload);\n    }\n\n    const parentPort = getParentPort();\n    if (parentPort) {\n      parentPort.on('message', handleMessage);\n      // if (message == 'exit') { parentPort.unref(); }\n      // eslint-disable-next-line\n      parentPort.on('exit', () => console.debug('Node worker closing'));\n    } else {\n      // eslint-disable-next-line no-restricted-globals\n      globalThis.onmessage = handleMessage;\n    }\n  }\n\n  static addEventListener(\n    onMessage: (type: WorkerMessageType, payload: WorkerMessagePayload) => any\n  ) {\n    let onMessageWrapper = onMessageWrapperMap.get(onMessage);\n\n    if (!onMessageWrapper) {\n      onMessageWrapper = (message: MessageEvent<any>) => {\n        if (!isKnownMessage(message)) {\n          return;\n        }\n\n        // Confusingly in the browser, the message itself also has a 'type' field which is always set to 'message'\n        const parentPort = getParentPort();\n        const {type, payload} = parentPort ? message : message.data;\n        onMessage(type, payload);\n      };\n    }\n\n    const parentPort = getParentPort();\n    if (parentPort) {\n      console.error('not implemented'); // eslint-disable-line\n    } else {\n      globalThis.addEventListener('message', onMessageWrapper);\n    }\n  }\n\n  static removeEventListener(\n    onMessage: (type: WorkerMessageType, payload: WorkerMessagePayload) => any\n  ) {\n    const onMessageWrapper = onMessageWrapperMap.get(onMessage);\n    onMessageWrapperMap.delete(onMessage);\n    const parentPort = getParentPort();\n    if (parentPort) {\n      console.error('not implemented'); // eslint-disable-line\n    } else {\n      globalThis.removeEventListener('message', onMessageWrapper);\n    }\n  }\n\n  /**\n   * Send a message from a worker to creating thread (main thread)\n   * @param type\n   * @param payload\n   */\n  static postMessage(type: WorkerMessageType, payload: WorkerMessagePayload): void {\n    const data: WorkerMessageData = {source: 'loaders.gl', type, payload};\n    // console.log('posting message', data);\n    const transferList = getTransferList(payload);\n\n    const parentPort = getParentPort();\n    if (parentPort) {\n      parentPort.postMessage(data, transferList);\n      // console.log('posted message', data);\n    } else {\n      // @ts-ignore\n      globalThis.postMessage(data, transferList);\n    }\n  }\n}\n\n// Filter out noise messages sent to workers\nfunction isKnownMessage(message: MessageEvent<any>) {\n  const {type, data} = message;\n  return (\n    type === 'message' &&\n    data &&\n    typeof data.source === 'string' &&\n    data.source.startsWith('loaders.gl')\n  );\n}\n"],"file":"worker-body.js"}