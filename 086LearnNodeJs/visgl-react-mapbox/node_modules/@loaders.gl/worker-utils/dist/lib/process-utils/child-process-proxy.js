"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable no-console */
// Avoid using named imports for Node builtins to help with "empty" resolution
// for bundlers targeting browser environments. Access imports & types
// through the `ChildProcess` object (e.g. `ChildProcess.spawn`, `ChildProcess.ChildProcess`).
const ChildProcess = __importStar(require("child_process"));
const process_utils_1 = require("./process-utils");
const DEFAULT_PROPS = {
    command: '',
    arguments: [],
    port: 5000,
    autoPort: true,
    wait: 2000,
    onSuccess: (processProxy) => {
        console.log(`Started ${processProxy.props.command}`);
    }
};
/**
 * Manager for a Node.js child process
 * Prepares arguments, starts, stops and tracks output
 */
class ChildProcessProxy {
    // constructor(props?: {id?: string});
    constructor({ id = 'browser-driver' } = {}) {
        this.props = { ...DEFAULT_PROPS };
        this.childProcess = null;
        this.port = 0;
        this.id = id;
    }
    /** Starts a child process with the provided props */
    async start(props) {
        props = { ...DEFAULT_PROPS, ...props };
        this.props = props;
        const args = [...props.arguments];
        // If portArg is set, we can look up an available port
        this.port = Number(props.port);
        if (props.portArg) {
            if (props.autoPort) {
                this.port = await (0, process_utils_1.getAvailablePort)(props.port);
            }
            args.push(props.portArg, String(this.port));
        }
        return await new Promise((resolve, reject) => {
            try {
                this._setTimeout(() => {
                    if (props.onSuccess) {
                        props.onSuccess(this);
                    }
                    resolve({});
                });
                console.log(`Spawning ${props.command} ${props.arguments.join(' ')}`);
                const childProcess = ChildProcess.spawn(props.command, args, props.spawn);
                this.childProcess = childProcess;
                childProcess.stdout.on('data', (data) => {
                    console.log(data.toString());
                });
                // TODO - add option regarding whether stderr should be treated as data
                childProcess.stderr.on('data', (data) => {
                    console.log(`Child process wrote to stderr: "${data}".`);
                    this._clearTimeout();
                    reject(new Error(data));
                });
                childProcess.on('error', (error) => {
                    console.log(`Child process errored with ${error}`);
                    this._clearTimeout();
                    reject(error);
                });
                childProcess.on('close', (code) => {
                    console.log(`Child process exited with ${code}`);
                    this.childProcess = null;
                    this._clearTimeout();
                    resolve({});
                });
            }
            catch (error) {
                reject(error);
            }
        });
    }
    /** Stops a running child process */
    async stop() {
        if (this.childProcess) {
            this.childProcess.kill();
            this.childProcess = null;
        }
    }
    /** Exits this process */
    async exit(statusCode = 0) {
        try {
            await this.stop();
            // eslint-disable-next-line no-process-exit
            process.exit(statusCode);
        }
        catch (error) {
            console.error(error.message || error);
            // eslint-disable-next-line no-process-exit
            process.exit(1);
        }
    }
    _setTimeout(callback) {
        if (Number(this.props.wait) > 0) {
            this.successTimer = setTimeout(callback, this.props.wait);
        }
    }
    _clearTimeout() {
        if (this.successTimer) {
            clearTimeout(this.successTimer);
        }
    }
}
exports.default = ChildProcessProxy;
