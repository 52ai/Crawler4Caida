{"version":3,"sources":["../../../../src/lib/worker-api/validate-worker-version.ts"],"names":["validateWorkerVersion","worker","coreVersion","VERSION","workerVersion","version","parseVersion","parts","split","map","Number","major","minor"],"mappings":";;;;;;;AACA;;AACA;;AAQO,SAASA,qBAAT,CACLC,MADK,EAGI;AAAA,MADTC,WACS,uEADaC,gBACb;AACT,sBAAOF,MAAP,EAAe,oBAAf;AAEA,MAAMG,aAAa,GAAGH,MAAM,CAACI,OAA7B;;AACA,MAAI,CAACH,WAAD,IAAgB,CAACE,aAArB,EAAoC;AAClC,WAAO,KAAP;AACD;;AAYD,SAAO,IAAP;AACD;;AAID,SAASE,YAAT,CAAsBD,OAAtB,EAA+B;AAC7B,MAAME,KAAK,GAAGF,OAAO,CAACG,KAAR,CAAc,GAAd,EAAmBC,GAAnB,CAAuBC,MAAvB,CAAd;AACA,SAAO;AAACC,IAAAA,KAAK,EAAEJ,KAAK,CAAC,CAAD,CAAb;AAAkBK,IAAAA,KAAK,EAAEL,KAAK,CAAC,CAAD;AAA9B,GAAP;AACD","sourcesContent":["import type {WorkerObject} from '../../types';\nimport {assert} from '../env-utils/assert';\nimport {VERSION} from '../env-utils/version';\n\n/**\n * Check if worker is compatible with this library version\n * @param worker\n * @param libVersion\n * @returns `true` if the two versions are compatible\n */\nexport function validateWorkerVersion(\n  worker: WorkerObject,\n  coreVersion: string = VERSION\n): boolean {\n  assert(worker, 'no worker provided');\n\n  const workerVersion = worker.version;\n  if (!coreVersion || !workerVersion) {\n    return false;\n  }\n\n  // TODO enable when fix the __version__ injection\n  // const coreVersions = parseVersion(coreVersion);\n  // const workerVersions = parseVersion(workerVersion);\n  // assert(\n  //   coreVersion.major === workerVersion.major && coreVersion.minor <= workerVersion.minor,\n  //   `worker: ${worker.name} is not compatible. ${coreVersion.major}.${\n  //     coreVersion.minor\n  //   }+ is required.`\n  // );\n\n  return true;\n}\n\n// @ts-ignore\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nfunction parseVersion(version) {\n  const parts = version.split('.').map(Number);\n  return {major: parts[0], minor: parts[1]};\n}\n"],"file":"validate-worker-version.js"}