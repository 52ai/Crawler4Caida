"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var ChildProcess = _interopRequireWildcard(require("child_process"));

var _processUtils = require("./process-utils");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var DEFAULT_PROPS = {
  command: '',
  arguments: [],
  port: 5000,
  autoPort: true,
  wait: 2000,
  onSuccess: function onSuccess(processProxy) {
    console.log("Started ".concat(processProxy.props.command));
  }
};

var ChildProcessProxy = function () {
  function ChildProcessProxy() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref$id = _ref.id,
        id = _ref$id === void 0 ? 'browser-driver' : _ref$id;

    (0, _classCallCheck2.default)(this, ChildProcessProxy);
    (0, _defineProperty2.default)(this, "id", void 0);
    (0, _defineProperty2.default)(this, "props", _objectSpread({}, DEFAULT_PROPS));
    (0, _defineProperty2.default)(this, "childProcess", null);
    (0, _defineProperty2.default)(this, "port", 0);
    (0, _defineProperty2.default)(this, "successTimer", void 0);
    this.id = id;
  }

  (0, _createClass2.default)(ChildProcessProxy, [{
    key: "start",
    value: function () {
      var _start = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee(props) {
        var _this = this;

        var args;
        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                props = _objectSpread(_objectSpread({}, DEFAULT_PROPS), props);
                this.props = props;
                args = (0, _toConsumableArray2.default)(props.arguments);
                this.port = Number(props.port);

                if (!props.portArg) {
                  _context.next = 10;
                  break;
                }

                if (!props.autoPort) {
                  _context.next = 9;
                  break;
                }

                _context.next = 8;
                return (0, _processUtils.getAvailablePort)(props.port);

              case 8:
                this.port = _context.sent;

              case 9:
                args.push(props.portArg, String(this.port));

              case 10:
                _context.next = 12;
                return new Promise(function (resolve, reject) {
                  try {
                    _this._setTimeout(function () {
                      if (props.onSuccess) {
                        props.onSuccess(_this);
                      }

                      resolve({});
                    });

                    console.log("Spawning ".concat(props.command, " ").concat(props.arguments.join(' ')));
                    var childProcess = ChildProcess.spawn(props.command, args, props.spawn);
                    _this.childProcess = childProcess;
                    childProcess.stdout.on('data', function (data) {
                      console.log(data.toString());
                    });
                    childProcess.stderr.on('data', function (data) {
                      console.log("Child process wrote to stderr: \"".concat(data, "\"."));

                      _this._clearTimeout();

                      reject(new Error(data));
                    });
                    childProcess.on('error', function (error) {
                      console.log("Child process errored with ".concat(error));

                      _this._clearTimeout();

                      reject(error);
                    });
                    childProcess.on('close', function (code) {
                      console.log("Child process exited with ".concat(code));
                      _this.childProcess = null;

                      _this._clearTimeout();

                      resolve({});
                    });
                  } catch (error) {
                    reject(error);
                  }
                });

              case 12:
                return _context.abrupt("return", _context.sent);

              case 13:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function start(_x) {
        return _start.apply(this, arguments);
      }

      return start;
    }()
  }, {
    key: "stop",
    value: function () {
      var _stop = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee2() {
        return _regenerator.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (this.childProcess) {
                  this.childProcess.kill();
                  this.childProcess = null;
                }

              case 1:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function stop() {
        return _stop.apply(this, arguments);
      }

      return stop;
    }()
  }, {
    key: "exit",
    value: function () {
      var _exit = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee3() {
        var statusCode,
            _args3 = arguments;
        return _regenerator.default.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                statusCode = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : 0;
                _context3.prev = 1;
                _context3.next = 4;
                return this.stop();

              case 4:
                process.exit(statusCode);
                _context3.next = 11;
                break;

              case 7:
                _context3.prev = 7;
                _context3.t0 = _context3["catch"](1);
                console.error(_context3.t0.message || _context3.t0);
                process.exit(1);

              case 11:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this, [[1, 7]]);
      }));

      function exit() {
        return _exit.apply(this, arguments);
      }

      return exit;
    }()
  }, {
    key: "_setTimeout",
    value: function _setTimeout(callback) {
      if (Number(this.props.wait) > 0) {
        this.successTimer = setTimeout(callback, this.props.wait);
      }
    }
  }, {
    key: "_clearTimeout",
    value: function _clearTimeout() {
      if (this.successTimer) {
        clearTimeout(this.successTimer);
      }
    }
  }]);
  return ChildProcessProxy;
}();

exports.default = ChildProcessProxy;
//# sourceMappingURL=child-process-proxy.js.map