{"version":3,"sources":["../../../../src/lib/library-utils/library-utils.ts"],"names":["LATEST","VERSION","loadLibraryPromises","loadLibrary","libraryUrl","moduleName","options","getLibraryUrl","loadLibraryFromFile","library","startsWith","modules","isBrowser","CDN","isWorker","endsWith","fetch","response","arrayBuffer","node","requireFromFile","importScripts","text","scriptSource","loadLibraryFromString","id","requireFromString","eval","call","global","script","document","createElement","appendChild","createTextNode","e","body"],"mappings":"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","sourcesContent":["/* global importScripts */\nimport {global, isBrowser, isWorker} from '../env-utils/globals';\nimport * as node from '../node/require-utils.node';\nimport {assert} from '../env-utils/assert';\nimport {VERSION as __VERSION__} from '../env-utils/version';\n\n// TODO - unpkg.com doesn't seem to have a `latest` specifier for alpha releases...\nconst LATEST = 'latest';\nconst VERSION = typeof __VERSION__ !== 'undefined' ? __VERSION__ : LATEST;\n\nconst loadLibraryPromises: Record<string, Promise<any>> = {}; // promises\n\n/**\n * Dynamically loads a library (\"module\")\n *\n * - wasm library: Array buffer is returned\n * - js library: Parse JS is returned\n *\n * Method depends on environment\n * - browser - script element is created and installed on document\n * - worker - eval is called on global context\n * - node - file is required\n *\n * @param libraryUrl\n * @param moduleName\n * @param options\n */\nexport async function loadLibrary(\n  libraryUrl: string,\n  moduleName: string | null = null,\n  options: object = {}\n): Promise<any> {\n  if (moduleName) {\n    libraryUrl = getLibraryUrl(libraryUrl, moduleName, options);\n  }\n\n  // Ensure libraries are only loaded once\n\n  loadLibraryPromises[libraryUrl] =\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    loadLibraryPromises[libraryUrl] || loadLibraryFromFile(libraryUrl);\n  return await loadLibraryPromises[libraryUrl];\n}\n\n// TODO - sort out how to resolve paths for main/worker and dev/prod\nexport function getLibraryUrl(library: string, moduleName?: string, options?: any): string {\n  // Check if already a URL\n  if (library.startsWith('http')) {\n    return library;\n  }\n\n  // Allow application to import and supply libraries through `options.modules`\n  const modules = options.modules || {};\n  if (modules[library]) {\n    return modules[library];\n  }\n\n  // Load from local files, not from CDN scripts in Node.js\n  // TODO - needs to locate the modules directory when installed!\n  if (!isBrowser) {\n    return `modules/${moduleName}/dist/libs/${library}`;\n  }\n\n  // In browser, load from external scripts\n  if (options.CDN) {\n    assert(options.CDN.startsWith('http'));\n    return `${options.CDN}/${moduleName}@${VERSION}/dist/libs/${library}`;\n  }\n\n  // TODO - loading inside workers requires paths relative to worker script location...\n  if (isWorker) {\n    return `../src/libs/${library}`;\n  }\n\n  return `modules/${moduleName}/src/libs/${library}`;\n}\n\nasync function loadLibraryFromFile(libraryUrl: string): Promise<any> {\n  if (libraryUrl.endsWith('wasm')) {\n    const response = await fetch(libraryUrl);\n    return await response.arrayBuffer();\n  }\n\n  if (!isBrowser) {\n    try {\n      return node && node.requireFromFile && (await node.requireFromFile(libraryUrl));\n    } catch {\n      return null;\n    }\n  }\n  if (isWorker) {\n    return importScripts(libraryUrl);\n  }\n  // TODO - fix - should be more secure than string parsing since observes CORS\n  // if (isBrowser) {\n  //   return await loadScriptFromFile(libraryUrl);\n  // }\n\n  const response = await fetch(libraryUrl);\n  const scriptSource = await response.text();\n  return loadLibraryFromString(scriptSource, libraryUrl);\n}\n\n/*\nasync function loadScriptFromFile(libraryUrl) {\n  const script = document.createElement('script');\n  script.src = libraryUrl;\n  return await new Promise((resolve, reject) => {\n    script.onload = data => {\n      resolve(data);\n    };\n    script.onerror = reject;\n  });\n}\n*/\n\n// TODO - Needs security audit...\n//  - Raw eval call\n//  - Potentially bypasses CORS\n// Upside is that this separates fetching and parsing\n// we could create a`LibraryLoader` or`ModuleLoader`\nfunction loadLibraryFromString(scriptSource: string, id: string): null | any {\n  if (!isBrowser) {\n    return node.requireFromString && node.requireFromString(scriptSource, id);\n  }\n\n  if (isWorker) {\n    // Use lvalue trick to make eval run in global scope\n    eval.call(global, scriptSource); // eslint-disable-line no-eval\n    // https://stackoverflow.com/questions/9107240/1-evalthis-vs-evalthis-in-javascript\n    // http://perfectionkills.com/global-eval-what-are-the-options/\n    return null;\n  }\n\n  const script = document.createElement('script');\n  script.id = id;\n  // most browsers like a separate text node but some throw an error. The second method covers those.\n  try {\n    script.appendChild(document.createTextNode(scriptSource));\n  } catch (e) {\n    script.text = scriptSource;\n  }\n  document.body.appendChild(script);\n  return null;\n}\n\n// TODO - technique for module injection into worker, from THREE.DracoLoader...\n/*\nfunction combineWorkerWithLibrary(worker, jsContent) {\n  var fn = wWorker.toString();\n  var body = [\n    '// injected',\n    jsContent,\n    '',\n    '// worker',\n    fn.substring(fn.indexOf('{') + 1, fn.lastIndexOf('}'))\n  ].join('\\n');\n  this.workerSourceURL = URL.createObjectURL(new Blob([body]));\n}\n*/\n"],"file":"library-utils.js"}