{"version":3,"sources":["../../../../src/lib/worker-farm/worker-job.ts"],"names":["WorkerJob","jobName","workerThread","name","result","Promise","resolve","reject","_resolve","_reject","type","payload","postMessage","source","value","isRunning","error"],"mappings":";;;;;;;;;;;;;;;AAEA;;IAKqBA,S;AAUnB,qBAAYC,OAAZ,EAA6BC,YAA7B,EAAyD;AAAA;;AAAA;AAAA;AAAA;AAAA,qDAPpC,IAOoC;AAAA;AAAA,oDAHhB,YAAM,CAAE,CAGQ;AAAA,mDAFf,YAAM,CAAE,CAEO;AACvD,SAAKC,IAAL,GAAYF,OAAZ;AACA,SAAKC,YAAL,GAAoBA,YAApB;AACA,SAAKE,MAAL,GAAc,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC7C,MAAA,KAAI,CAACC,QAAL,GAAgBF,OAAhB;AACA,MAAA,KAAI,CAACG,OAAL,GAAeF,MAAf;AACD,KAHa,CAAd;AAID;;;;WAMD,qBAAYG,IAAZ,EAAqCC,OAArC,EAA0E;AACxE,WAAKT,YAAL,CAAkBU,WAAlB,CAA8B;AAC5BC,QAAAA,MAAM,EAAE,YADoB;AAE5BH,QAAAA,IAAI,EAAJA,IAF4B;AAG5BC,QAAAA,OAAO,EAAPA;AAH4B,OAA9B;AAKD;;;WAKD,cAAKG,KAAL,EAAuB;AACrB,0BAAO,KAAKC,SAAZ;AACA,WAAKA,SAAL,GAAiB,KAAjB;;AACA,WAAKP,QAAL,CAAcM,KAAd;AACD;;;WAKD,eAAME,MAAN,EAA0B;AACxB,0BAAO,KAAKD,SAAZ;AACA,WAAKA,SAAL,GAAiB,KAAjB;;AACA,WAAKN,OAAL,CAAaO,MAAb;AACD","sourcesContent":["import type {WorkerMessageType, WorkerMessagePayload} from '../../types';\nimport WorkerThread from './worker-thread';\nimport {assert} from '../env-utils/assert';\n\n/**\n * Represents one Job handled by a WorkerPool or WorkerFarm\n */\nexport default class WorkerJob {\n  readonly name: string;\n  readonly workerThread: WorkerThread;\n  isRunning: boolean = true;\n  /** Promise that resolves when Job is done */\n  readonly result: Promise<any>;\n\n  private _resolve: (value: any) => void = () => {};\n  private _reject: (reason?: any) => void = () => {};\n\n  constructor(jobName: string, workerThread: WorkerThread) {\n    this.name = jobName;\n    this.workerThread = workerThread;\n    this.result = new Promise((resolve, reject) => {\n      this._resolve = resolve;\n      this._reject = reject;\n    });\n  }\n\n  /**\n   * Send a message to the job's worker thread\n   * @param data any data structure, ideally consisting mostly of transferrable objects\n   */\n  postMessage(type: WorkerMessageType, payload: WorkerMessagePayload): void {\n    this.workerThread.postMessage({\n      source: 'loaders.gl', // Lets worker ignore unrelated messages\n      type,\n      payload\n    });\n  }\n\n  /**\n   * Call to resolve the `result` Promise with the supplied value\n   */\n  done(value: any): void {\n    assert(this.isRunning);\n    this.isRunning = false;\n    this._resolve(value);\n  }\n\n  /**\n   * Call to reject the `result` Promise with the supplied error\n   */\n  error(error: Error): void {\n    assert(this.isRunning);\n    this.isRunning = false;\n    this._reject(error);\n  }\n}\n"],"file":"worker-job.js"}