"use strict";
// GLTF 1.0 EXTENSION: KHR_binary_glTF
// https://github.com/KhronosGroup/glTF/tree/master/extensions/1.0/Khronos/KHR_binary_glTF
/* eslint-disable camelcase */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.preprocess = exports.name = void 0;
const gltf_scenegraph_1 = __importDefault(require("../api/gltf-scenegraph"));
const KHR_BINARY_GLTF = 'KHR_binary_glTF';
/** Extension name */
exports.name = KHR_BINARY_GLTF;
function preprocess(gltfData) {
    const gltfScenegraph = new gltf_scenegraph_1.default(gltfData);
    const { json } = gltfScenegraph;
    // Note: json.buffers.binary_glTF also needs to be replaced
    // This is currently done during gltf normalization
    // Image and shader nodes can have the extension
    // https://github.com/KhronosGroup/glTF/blob/master/extensions/1.0/Khronos/KHR_binary_glTF/schema/image.KHR_binary_glTF.schema.json
    for (const image of json.images || []) {
        const extension = gltfScenegraph.getObjectExtension(image, KHR_BINARY_GLTF);
        // The data in the extension is valid as glTF 2.0 data inside the object, so just copy it in
        if (extension) {
            Object.assign(image, extension);
        }
        gltfScenegraph.removeObjectExtension(image, KHR_BINARY_GLTF);
    }
    // TODO shaders - At least traverse and throw error if used?
    // https://github.com/KhronosGroup/glTF/blob/master/extensions/1.0/Khronos/KHR_binary_glTF/schema/shader.KHR_binary_glTF.schema.json
    // glTF v1 one files have a partially formed URI field that is not expected in (and causes problems in) 2.0
    if (json.buffers && json.buffers[0]) {
        delete json.buffers[0].uri;
    }
    // Remove the top-level extension as it has now been removed from all nodes
    gltfScenegraph.removeExtension(KHR_BINARY_GLTF);
}
exports.preprocess = preprocess;
// KHR_binary_gltf is a 1.0 extension that is supported natively by 2.0
// export function encode() {
//   throw new Error(KHR_BINARY_GLTF);
// }
