"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.decode = decode;
exports.name = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _gltfScenegraph = _interopRequireDefault(require("../api/gltf-scenegraph"));

var _meshoptDecoder = require("../../meshopt/meshopt-decoder");

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var DEFAULT_MESHOPT_OPTIONS = {
  byteOffset: 0,
  filter: 'NONE'
};
var EXT_MESHOPT_COMPRESSION = 'EXT_meshopt_compression';
var name = EXT_MESHOPT_COMPRESSION;
exports.name = name;

function decode(_x, _x2) {
  return _decode.apply(this, arguments);
}

function _decode() {
  _decode = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee(gltfData, options) {
    var _options$gltf;

    var scenegraph, promises, _iterator, _step, bufferViewIndex;

    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            scenegraph = new _gltfScenegraph.default(gltfData);

            if (options !== null && options !== void 0 && (_options$gltf = options.gltf) !== null && _options$gltf !== void 0 && _options$gltf.decompressMeshes) {
              _context.next = 3;
              break;
            }

            return _context.abrupt("return");

          case 3:
            promises = [];
            _iterator = _createForOfIteratorHelper(gltfData.json.bufferViews || []);

            try {
              for (_iterator.s(); !(_step = _iterator.n()).done;) {
                bufferViewIndex = _step.value;
                promises.push(decodeMeshoptBufferView(scenegraph, bufferViewIndex));
              }
            } catch (err) {
              _iterator.e(err);
            } finally {
              _iterator.f();
            }

            _context.next = 8;
            return Promise.all(promises);

          case 8:
            scenegraph.removeExtension(EXT_MESHOPT_COMPRESSION);

          case 9:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _decode.apply(this, arguments);
}

function decodeMeshoptBufferView(_x3, _x4) {
  return _decodeMeshoptBufferView.apply(this, arguments);
}

function _decodeMeshoptBufferView() {
  _decodeMeshoptBufferView = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee2(scenegraph, bufferView) {
    var meshoptExtension, _meshoptExtension$byt, byteOffset, _meshoptExtension$byt2, byteLength, byteStride, count, mode, _meshoptExtension$fil, filter, bufferIndex, buffer, source, result;

    return _regenerator.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            meshoptExtension = scenegraph.getObjectExtension(bufferView, EXT_MESHOPT_COMPRESSION);

            if (!meshoptExtension) {
              _context2.next = 9;
              break;
            }

            _meshoptExtension$byt = meshoptExtension.byteOffset, byteOffset = _meshoptExtension$byt === void 0 ? 0 : _meshoptExtension$byt, _meshoptExtension$byt2 = meshoptExtension.byteLength, byteLength = _meshoptExtension$byt2 === void 0 ? 0 : _meshoptExtension$byt2, byteStride = meshoptExtension.byteStride, count = meshoptExtension.count, mode = meshoptExtension.mode, _meshoptExtension$fil = meshoptExtension.filter, filter = _meshoptExtension$fil === void 0 ? 'NONE' : _meshoptExtension$fil, bufferIndex = meshoptExtension.buffer;
            buffer = scenegraph.gltf.buffers[bufferIndex];
            source = new Uint8Array(buffer.arrayBuffer, buffer.byteOffset + byteOffset, byteLength);
            result = new Uint8Array(scenegraph.gltf.buffers[bufferView.buffer].arrayBuffer, bufferView.byteOffset, bufferView.byteLength);
            _context2.next = 8;
            return (0, _meshoptDecoder.meshoptDecodeGltfBuffer)(result, count, byteStride, source, mode, filter);

          case 8:
            return _context2.abrupt("return", result);

          case 9:
            return _context2.abrupt("return", null);

          case 10:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _decodeMeshoptBufferView.apply(this, arguments);
}
//# sourceMappingURL=EXT_meshopt_compression.js.map