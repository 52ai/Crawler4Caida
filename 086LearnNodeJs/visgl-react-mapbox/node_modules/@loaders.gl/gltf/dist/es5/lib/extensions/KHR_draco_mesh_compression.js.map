{"version":3,"sources":["../../../../src/lib/extensions/KHR_draco_mesh_compression.ts"],"names":["makeMeshPrimitiveIterator","KHR_DRACO_MESH_COMPRESSION","name","preprocess","gltfData","options","context","scenegraph","Scenegraph","primitive","getObjectExtension","decode","gltf","decompressMeshes","promises","push","decompressPrimitive","Promise","all","removeExtension","encode","json","meshes","mesh","compressMesh","addRequiredExtension","dracoExtension","buffer","getTypedArrayForBufferView","bufferView","bufferCopy","byteOffset","parse","dracoOptions","DracoLoader","decodedData","decodedAttributes","attributes","Object","entries","attributeName","decodedAttribute","accessorIndex","accessor","getAccessor","min","max","indices","checkPrimitive","mode","DracoWriter","Error","compressedData","encodeSync","parseSync","fauxAccessors","_addFauxAttributes","bufferViewIndex","addBufferView","glTFMesh","primitives","extensions","keys","length"],"mappings":"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","sourcesContent":["// https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_draco_mesh_compression\n// Only TRIANGLES: 0x0004 and TRIANGLE_STRIP: 0x0005 are supported\n/* eslint-disable camelcase */\n\n/* eslint-disable camelcase */\nimport type {\n  GLTF,\n  GLTFAccessor,\n  GLTFMeshPrimitive,\n  GLTF_KHR_draco_mesh_compression\n} from '../types/gltf-types';\nimport type {GLTFLoaderOptions} from '../../gltf-loader';\n\nimport type {LoaderContext} from '@loaders.gl/loader-utils';\nimport {DracoLoader} from '@loaders.gl/draco';\nimport {DracoLoaderOptions, DracoMesh} from '@loaders.gl/draco';\nimport {sliceArrayBuffer} from '@loaders.gl/loader-utils';\nimport {default as Scenegraph} from '../api/gltf-scenegraph';\nimport {getGLTFAccessors, getGLTFAccessor} from '../gltf-utils/gltf-attribute-utils';\n\nconst KHR_DRACO_MESH_COMPRESSION = 'KHR_draco_mesh_compression';\n\n/** Extension name */\nexport const name = KHR_DRACO_MESH_COMPRESSION;\n\nexport function preprocess(\n  gltfData: {json: GLTF},\n  options: GLTFLoaderOptions,\n  context: LoaderContext\n): void {\n  const scenegraph = new Scenegraph(gltfData);\n  for (const primitive of makeMeshPrimitiveIterator(scenegraph)) {\n    if (scenegraph.getObjectExtension(primitive, KHR_DRACO_MESH_COMPRESSION)) {\n      // TODO - Remove fallback accessors to make sure we don't load unnecessary buffers\n    }\n  }\n}\n\nexport async function decode(\n  gltfData: {json: GLTF},\n  options: GLTFLoaderOptions,\n  context: LoaderContext\n): Promise<void> {\n  if (!options?.gltf?.decompressMeshes) {\n    return;\n  }\n\n  const scenegraph = new Scenegraph(gltfData);\n  const promises: Promise<void>[] = [];\n  for (const primitive of makeMeshPrimitiveIterator(scenegraph)) {\n    if (scenegraph.getObjectExtension(primitive, KHR_DRACO_MESH_COMPRESSION)) {\n      promises.push(decompressPrimitive(scenegraph, primitive, options, context));\n    }\n  }\n\n  // Decompress meshes in parallel\n  await Promise.all(promises);\n\n  // We have now decompressed all primitives, so remove the top-level extensions\n  scenegraph.removeExtension(KHR_DRACO_MESH_COMPRESSION);\n}\n\nexport function encode(gltfData, options: GLTFLoaderOptions = {}): void {\n  const scenegraph = new Scenegraph(gltfData);\n\n  for (const mesh of scenegraph.json.meshes || []) {\n    // eslint-disable-next-line camelcase\n    // @ts-ignore\n    compressMesh(mesh, options);\n    // NOTE: Only add the extension if something was actually compressed\n    scenegraph.addRequiredExtension(KHR_DRACO_MESH_COMPRESSION);\n  }\n}\n\n// DECODE\n\n// Unpacks one mesh primitive and removes the extension from the primitive\n// DracoDecoder needs to be imported and registered by app\n// Returns: Promise that resolves when all pending draco decoder jobs for this mesh complete\n\n// TODO - Implement fallback behavior per KHR_DRACO_MESH_COMPRESSION spec\n\nasync function decompressPrimitive(\n  scenegraph: Scenegraph,\n  primitive: GLTFMeshPrimitive,\n  options: GLTFLoaderOptions,\n  context: LoaderContext\n): Promise<void> {\n  const dracoExtension = scenegraph.getObjectExtension<GLTF_KHR_draco_mesh_compression>(\n    primitive,\n    KHR_DRACO_MESH_COMPRESSION\n  );\n  if (!dracoExtension) {\n    return;\n  }\n\n  const buffer = scenegraph.getTypedArrayForBufferView(dracoExtension.bufferView);\n  // TODO - parse does not yet deal well with byte offsets embedded in typed arrays. Copy buffer\n  // TODO - remove when `parse` is fixed to handle `byteOffset`s\n  const bufferCopy = sliceArrayBuffer(buffer.buffer, buffer.byteOffset); // , buffer.byteLength);\n\n  const {parse} = context;\n  const dracoOptions: DracoLoaderOptions = {...options};\n\n  // TODO - remove hack: The entire tileset might be included, too expensive to serialize\n  delete dracoOptions['3d-tiles'];\n  const decodedData = (await parse(bufferCopy, DracoLoader, dracoOptions, context)) as DracoMesh;\n\n  const decodedAttributes: {[key: string]: GLTFAccessor} = getGLTFAccessors(decodedData.attributes);\n\n  // Restore min/max values\n  for (const [attributeName, decodedAttribute] of Object.entries(decodedAttributes)) {\n    if (attributeName in primitive.attributes) {\n      const accessorIndex: number = primitive.attributes[attributeName];\n      const accessor = scenegraph.getAccessor(accessorIndex);\n      if (accessor?.min && accessor?.max) {\n        decodedAttribute.min = accessor.min;\n        decodedAttribute.max = accessor.max;\n      }\n    }\n  }\n\n  // @ts-ignore\n  primitive.attributes = decodedAttributes;\n  if (decodedData.indices) {\n    // @ts-ignore\n    primitive.indices = getGLTFAccessor(decodedData.indices);\n  }\n\n  // Extension has been processed, delete it\n  // delete primitive.extensions[KHR_DRACO_MESH_COMPRESSION];\n\n  checkPrimitive(primitive);\n}\n\n// ENCODE\n\n// eslint-disable-next-line max-len\n// Only TRIANGLES: 0x0004 and TRIANGLE_STRIP: 0x0005 are supported\nfunction compressMesh(attributes, indices, mode: number = 4, options, context: LoaderContext) {\n  if (!options.DracoWriter) {\n    throw new Error('options.gltf.DracoWriter not provided');\n  }\n\n  // TODO - use DracoWriter using encode w/ registered DracoWriter...\n  const compressedData = options.DracoWriter.encodeSync({attributes});\n\n  // Draco compression may change the order and number of vertices in a mesh.\n  // To satisfy the requirement that accessors properties be correct for both\n  // compressed and uncompressed data, generators should create uncompressed\n  // attributes and indices using data that has been decompressed from the Draco buffer,\n  // rather than the original source data.\n  // @ts-ignore TODO this needs to be fixed\n  const decodedData = context?.parseSync?.({attributes});\n  const fauxAccessors = options._addFauxAttributes(decodedData.attributes);\n\n  const bufferViewIndex = options.addBufferView(compressedData);\n\n  const glTFMesh = {\n    primitives: [\n      {\n        attributes: fauxAccessors, // TODO - verify with spec\n        mode, // GL.POINTS\n        extensions: {\n          [KHR_DRACO_MESH_COMPRESSION]: {\n            bufferView: bufferViewIndex,\n            attributes: fauxAccessors // TODO - verify with spec\n          }\n        }\n      }\n    ]\n  };\n\n  return glTFMesh;\n}\n\n// UTILS\n\nfunction checkPrimitive(primitive: GLTFMeshPrimitive) {\n  if (!primitive.attributes && Object.keys(primitive.attributes).length > 0) {\n    throw new Error('glTF: Empty primitive detected: Draco decompression failure?');\n  }\n}\n\nfunction* makeMeshPrimitiveIterator(scenegraph) {\n  for (const mesh of scenegraph.json.meshes || []) {\n    for (const primitive of mesh.primitives) {\n      yield primitive;\n    }\n  }\n}\n"],"file":"KHR_draco_mesh_compression.js"}