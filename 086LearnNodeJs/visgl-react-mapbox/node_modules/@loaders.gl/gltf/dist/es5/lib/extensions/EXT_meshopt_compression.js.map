{"version":3,"sources":["../../../../src/lib/extensions/EXT_meshopt_compression.ts"],"names":["DEFAULT_MESHOPT_OPTIONS","byteOffset","filter","EXT_MESHOPT_COMPRESSION","name","decode","gltfData","options","scenegraph","GLTFScenegraph","gltf","decompressMeshes","promises","json","bufferViews","bufferViewIndex","push","decodeMeshoptBufferView","Promise","all","removeExtension","bufferView","meshoptExtension","getObjectExtension","byteLength","byteStride","count","mode","bufferIndex","buffer","buffers","source","Uint8Array","arrayBuffer","result"],"mappings":";;;;;;;;;;;;;;AAGA;;AACA;;;;;;;;AAIA,IAAMA,uBAAuB,GAAG;AAC9BC,EAAAA,UAAU,EAAE,CADkB;AAE9BC,EAAAA,MAAM,EAAE;AAFsB,CAAhC;AAMA,IAAMC,uBAAuB,GAAG,yBAAhC;AAEO,IAAMC,IAAI,GAAGD,uBAAb;;;SAEeE,M;;;;;sEAAf,iBAAsBC,QAAtB,EAA8CC,OAA9C;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AACCC,YAAAA,UADD,GACc,IAAIC,uBAAJ,CAAmBH,QAAnB,CADd;;AAAA,gBAGAC,OAHA,aAGAA,OAHA,gCAGAA,OAAO,CAAEG,IAHT,0CAGA,cAAeC,gBAHf;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAOCC,YAAAA,QAPD,GAO4B,EAP5B;AAAA,mDAQyBN,QAAQ,CAACO,IAAT,CAAcC,WAAd,IAA6B,EARtD;;AAAA;AAQL,kEAA+D;AAApDC,gBAAAA,eAAoD;AAC7DH,gBAAAA,QAAQ,CAACI,IAAT,CAAcC,uBAAuB,CAACT,UAAD,EAAaO,eAAb,CAArC;AACD;AAVI;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAaCG,OAAO,CAACC,GAAR,CAAYP,QAAZ,CAbD;;AAAA;AAgBLJ,YAAAA,UAAU,CAACY,eAAX,CAA2BjB,uBAA3B;;AAhBK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAoBQc,uB;;;;;uFAAf,kBACET,UADF,EAEEa,UAFF;AAAA;;AAAA;AAAA;AAAA;AAAA;AAIQC,YAAAA,gBAJR,GAI2Bd,UAAU,CAACe,kBAAX,CACvBF,UADuB,EAEvBlB,uBAFuB,CAJ3B;;AAAA,iBAQMmB,gBARN;AAAA;AAAA;AAAA;;AAAA,oCAiBQA,gBAjBR,CAUMrB,UAVN,EAUMA,UAVN,sCAUmB,CAVnB,mDAiBQqB,gBAjBR,CAWME,UAXN,EAWMA,UAXN,uCAWmB,CAXnB,2BAYMC,UAZN,GAiBQH,gBAjBR,CAYMG,UAZN,EAaMC,KAbN,GAiBQJ,gBAjBR,CAaMI,KAbN,EAcMC,IAdN,GAiBQL,gBAjBR,CAcMK,IAdN,0BAiBQL,gBAjBR,CAeMpB,MAfN,EAeMA,MAfN,sCAee,MAff,0BAgBc0B,WAhBd,GAiBQN,gBAjBR,CAgBMO,MAhBN;AAkBUA,YAAAA,MAlBV,GAkBmBrB,UAAU,CAACE,IAAX,CAAgBoB,OAAhB,CAAwBF,WAAxB,CAlBnB;AAoBUG,YAAAA,MApBV,GAoBmB,IAAIC,UAAJ,CAAeH,MAAM,CAACI,WAAtB,EAAmCJ,MAAM,CAAC5B,UAAP,GAAoBA,UAAvD,EAAmEuB,UAAnE,CApBnB;AAqBUU,YAAAA,MArBV,GAqBmB,IAAIF,UAAJ,CACbxB,UAAU,CAACE,IAAX,CAAgBoB,OAAhB,CAAwBT,UAAU,CAACQ,MAAnC,EAA2CI,WAD9B,EAEbZ,UAAU,CAACpB,UAFE,EAGboB,UAAU,CAACG,UAHE,CArBnB;AAAA;AAAA,mBA0BU,6CAAwBU,MAAxB,EAAgCR,KAAhC,EAAuCD,UAAvC,EAAmDM,MAAnD,EAA2DJ,IAA3D,EAAiEzB,MAAjE,CA1BV;;AAAA;AAAA,8CA2BWgC,MA3BX;;AAAA;AAAA,8CA8BS,IA9BT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["/* eslint-disable camelcase */\nimport type {GLTF, GLTFBufferView, GLTF_EXT_meshopt_compression} from '../types/gltf-types';\nimport type {GLTFLoaderOptions} from '../../gltf-loader';\nimport GLTFScenegraph from '../api/gltf-scenegraph';\nimport {meshoptDecodeGltfBuffer} from '../../meshopt/meshopt-decoder';\n\n// @ts-ignore\n// eslint-disable-next-line\nconst DEFAULT_MESHOPT_OPTIONS = {\n  byteOffset: 0,\n  filter: 'NONE'\n};\n\n/** Extension name */\nconst EXT_MESHOPT_COMPRESSION = 'EXT_meshopt_compression';\n\nexport const name = EXT_MESHOPT_COMPRESSION;\n\nexport async function decode(gltfData: {json: GLTF}, options: GLTFLoaderOptions) {\n  const scenegraph = new GLTFScenegraph(gltfData);\n\n  if (!options?.gltf?.decompressMeshes) {\n    return;\n  }\n\n  const promises: Promise<any>[] = [];\n  for (const bufferViewIndex of gltfData.json.bufferViews || []) {\n    promises.push(decodeMeshoptBufferView(scenegraph, bufferViewIndex));\n  }\n\n  // Decompress meshes in parallel\n  await Promise.all(promises);\n\n  // We have now decompressed all primitives, so remove the top-level extensions\n  scenegraph.removeExtension(EXT_MESHOPT_COMPRESSION);\n}\n\n/** Decode one meshopt buffer view */\nasync function decodeMeshoptBufferView(\n  scenegraph: GLTFScenegraph,\n  bufferView: GLTFBufferView\n): Promise<ArrayBuffer | null> {\n  const meshoptExtension = scenegraph.getObjectExtension<GLTF_EXT_meshopt_compression>(\n    bufferView,\n    EXT_MESHOPT_COMPRESSION\n  );\n  if (meshoptExtension) {\n    const {\n      byteOffset = 0,\n      byteLength = 0,\n      byteStride,\n      count,\n      mode,\n      filter = 'NONE',\n      buffer: bufferIndex\n    } = meshoptExtension;\n    const buffer = scenegraph.gltf.buffers[bufferIndex];\n\n    const source = new Uint8Array(buffer.arrayBuffer, buffer.byteOffset + byteOffset, byteLength);\n    const result = new Uint8Array(\n      scenegraph.gltf.buffers[bufferView.buffer].arrayBuffer,\n      bufferView.byteOffset,\n      bufferView.byteLength\n    );\n    await meshoptDecodeGltfBuffer(result, count, byteStride, source, mode, filter);\n    return result;\n  }\n\n  return null;\n}\n"],"file":"EXT_meshopt_compression.js"}