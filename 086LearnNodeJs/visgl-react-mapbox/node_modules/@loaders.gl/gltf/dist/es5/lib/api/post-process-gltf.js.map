{"version":3,"sources":["../../../../src/lib/api/post-process-gltf.ts"],"names":["COMPONENTS","SCALAR","VEC2","VEC3","VEC4","MAT2","MAT3","MAT4","BYTES","GL_SAMPLER","TEXTURE_MAG_FILTER","TEXTURE_MIN_FILTER","TEXTURE_WRAP_S","TEXTURE_WRAP_T","REPEAT","LINEAR","NEAREST_MIPMAP_LINEAR","SAMPLER_PARAMETER_GLTF_TO_GL","magFilter","minFilter","wrapS","wrapT","DEFAULT_SAMPLER","getBytesFromComponentType","componentType","getSizeFromAccessorType","type","GLTFPostProcessor","gltf","options","json","buffers","images","baseUri","_resolveTree","bufferViews","map","bufView","i","_resolveBufferView","image","_resolveImage","samplers","sampler","_resolveSampler","textures","texture","_resolveTexture","accessors","accessor","_resolveAccessor","materials","material","_resolveMaterial","meshes","mesh","_resolveMesh","nodes","node","_resolveNode","skins","skin","_resolveSkin","scenes","scene","_resolveScene","undefined","index","_get","array","object","console","warn","id","getNode","children","child","getMesh","length","reduce","accum","meshIndex","primitives","concat","camera","getCamera","getSkin","inverseBindMatrices","getAccessor","primitive","attributes","attribute","indices","getMaterial","normalTexture","getTexture","occlusionTexture","occlustionTexture","emissiveTexture","emmisiveTexture","emissiveFactor","pbrMetallicRoughness","mr","baseColorTexture","metallicRoughnessTexture","bufferView","getBufferView","bytesPerComponent","components","bytesPerElement","buffer","ArrayType","byteLength","byteOffset","cutBuffer","arrayBuffer","slice","byteStride","_getValueFromInterleavedBuffer","count","value","result","Uint8Array","elementOffset","set","getSampler","source","getImage","parameters","key","glEnum","_enumSamplerParameter","preloadedImage","bufferIndex","data","perspective","orthographic","postProcessGLTF","postProcess"],"mappings":"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","sourcesContent":["import {assert} from '../utils/assert';\nimport {getAccessorArrayTypeAndLength} from '../gltf-utils/gltf-utils';\nimport {BufferView} from '../types/gltf-json-schema';\nimport {BufferView as BufferViewPostprocessed} from '../types/gltf-postprocessed-schema';\n\n// This is a post processor for loaded glTF files\n// The goal is to make the loaded data easier to use in WebGL applications\n//\n// Functions:\n// * Resolve indexed arrays structure of glTF into a linked tree.\n// * Translate stringified enum keys and values into WebGL constants.\n// * Load images (optional)\n\n// ENUM LOOKUP\n\nconst COMPONENTS = {\n  SCALAR: 1,\n  VEC2: 2,\n  VEC3: 3,\n  VEC4: 4,\n  MAT2: 4,\n  MAT3: 9,\n  MAT4: 16\n};\n\nconst BYTES = {\n  5120: 1, // BYTE\n  5121: 1, // UNSIGNED_BYTE\n  5122: 2, // SHORT\n  5123: 2, // UNSIGNED_SHORT\n  5125: 4, // UNSIGNED_INT\n  5126: 4 // FLOAT\n};\n\nconst GL_SAMPLER = {\n  // Sampler parameters\n  TEXTURE_MAG_FILTER: 0x2800,\n  TEXTURE_MIN_FILTER: 0x2801,\n  TEXTURE_WRAP_S: 0x2802,\n  TEXTURE_WRAP_T: 0x2803,\n\n  // Sampler default values\n  REPEAT: 0x2901,\n  LINEAR: 0x2601,\n  NEAREST_MIPMAP_LINEAR: 0x2702\n};\n\nconst SAMPLER_PARAMETER_GLTF_TO_GL = {\n  magFilter: GL_SAMPLER.TEXTURE_MAG_FILTER,\n  minFilter: GL_SAMPLER.TEXTURE_MIN_FILTER,\n  wrapS: GL_SAMPLER.TEXTURE_WRAP_S,\n  wrapT: GL_SAMPLER.TEXTURE_WRAP_T\n};\n\n// When undefined, a sampler with repeat wrapping and auto filtering should be used.\n// https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#texture\nconst DEFAULT_SAMPLER = {\n  [GL_SAMPLER.TEXTURE_MAG_FILTER]: GL_SAMPLER.LINEAR,\n  [GL_SAMPLER.TEXTURE_MIN_FILTER]: GL_SAMPLER.NEAREST_MIPMAP_LINEAR,\n  [GL_SAMPLER.TEXTURE_WRAP_S]: GL_SAMPLER.REPEAT,\n  [GL_SAMPLER.TEXTURE_WRAP_T]: GL_SAMPLER.REPEAT\n};\n\nfunction getBytesFromComponentType(componentType) {\n  return BYTES[componentType];\n}\n\nfunction getSizeFromAccessorType(type) {\n  return COMPONENTS[type];\n}\n\nclass GLTFPostProcessor {\n  baseUri: string = '';\n  json: Record<string, any> = {};\n  buffers: [] = [];\n  images: [] = [];\n\n  postProcess(gltf, options = {}) {\n    const {json, buffers = [], images = [], baseUri = ''} = gltf;\n    assert(json);\n\n    this.baseUri = baseUri;\n    this.json = json;\n    this.buffers = buffers;\n    this.images = images;\n\n    this._resolveTree(this.json, options);\n\n    return this.json;\n  }\n\n  // Convert indexed glTF structure into tree structure\n  // cross-link index resolution, enum lookup, convenience calculations\n  // eslint-disable-next-line complexity\n  _resolveTree(json, options = {}) {\n    if (json.bufferViews) {\n      json.bufferViews = json.bufferViews.map((bufView, i) => this._resolveBufferView(bufView, i));\n    }\n    if (json.images) {\n      json.images = json.images.map((image, i) => this._resolveImage(image, i));\n    }\n    if (json.samplers) {\n      json.samplers = json.samplers.map((sampler, i) => this._resolveSampler(sampler, i));\n    }\n    if (json.textures) {\n      json.textures = json.textures.map((texture, i) => this._resolveTexture(texture, i));\n    }\n    if (json.accessors) {\n      json.accessors = json.accessors.map((accessor, i) => this._resolveAccessor(accessor, i));\n    }\n    if (json.materials) {\n      json.materials = json.materials.map((material, i) => this._resolveMaterial(material, i));\n    }\n    if (json.meshes) {\n      json.meshes = json.meshes.map((mesh, i) => this._resolveMesh(mesh, i));\n    }\n    if (json.nodes) {\n      json.nodes = json.nodes.map((node, i) => this._resolveNode(node, i));\n    }\n    if (json.skins) {\n      json.skins = json.skins.map((skin, i) => this._resolveSkin(skin, i));\n    }\n    if (json.scenes) {\n      json.scenes = json.scenes.map((scene, i) => this._resolveScene(scene, i));\n    }\n    if (json.scene !== undefined) {\n      json.scene = json.scenes[this.json.scene];\n    }\n  }\n\n  getScene(index) {\n    return this._get('scenes', index);\n  }\n\n  getNode(index) {\n    return this._get('nodes', index);\n  }\n\n  getSkin(index) {\n    return this._get('skins', index);\n  }\n\n  getMesh(index) {\n    return this._get('meshes', index);\n  }\n\n  getMaterial(index) {\n    return this._get('materials', index);\n  }\n\n  getAccessor(index) {\n    return this._get('accessors', index);\n  }\n\n  getCamera(index) {\n    return null; // TODO: fix this\n  }\n\n  getTexture(index) {\n    return this._get('textures', index);\n  }\n\n  getSampler(index) {\n    return this._get('samplers', index);\n  }\n\n  getImage(index) {\n    return this._get('images', index);\n  }\n\n  getBufferView(index) {\n    return this._get('bufferViews', index);\n  }\n\n  getBuffer(index) {\n    return this._get('buffers', index);\n  }\n\n  _get(array, index) {\n    // check if already resolved\n    if (typeof index === 'object') {\n      return index;\n    }\n    const object = this.json[array] && this.json[array][index];\n    if (!object) {\n      console.warn(`glTF file error: Could not find ${array}[${index}]`); // eslint-disable-line\n    }\n    return object;\n  }\n\n  // PARSING HELPERS\n\n  _resolveScene(scene, index) {\n    // scene = {...scene};\n    scene.id = scene.id || `scene-${index}`;\n    scene.nodes = (scene.nodes || []).map((node) => this.getNode(node));\n    return scene;\n  }\n\n  _resolveNode(node, index) {\n    // node = {...node};\n    node.id = node.id || `node-${index}`;\n    if (node.children) {\n      node.children = node.children.map((child) => this.getNode(child));\n    }\n    if (node.mesh !== undefined) {\n      node.mesh = this.getMesh(node.mesh);\n    } else if (node.meshes !== undefined && node.meshes.length) {\n      node.mesh = node.meshes.reduce(\n        (accum, meshIndex) => {\n          const mesh = this.getMesh(meshIndex);\n          accum.id = mesh.id;\n          accum.primitives = accum.primitives.concat(mesh.primitives);\n          return accum;\n        },\n        {primitives: []}\n      );\n    }\n    if (node.camera !== undefined) {\n      node.camera = this.getCamera(node.camera);\n    }\n    if (node.skin !== undefined) {\n      node.skin = this.getSkin(node.skin);\n    }\n    return node;\n  }\n\n  _resolveSkin(skin, index) {\n    // skin = {...skin};\n    skin.id = skin.id || `skin-${index}`;\n    skin.inverseBindMatrices = this.getAccessor(skin.inverseBindMatrices);\n    return skin;\n  }\n\n  _resolveMesh(mesh, index) {\n    // mesh = {...mesh};\n    mesh.id = mesh.id || `mesh-${index}`;\n    if (mesh.primitives) {\n      mesh.primitives = mesh.primitives.map((primitive) => {\n        primitive = {...primitive};\n        const attributes = primitive.attributes;\n        primitive.attributes = {};\n        for (const attribute in attributes) {\n          primitive.attributes[attribute] = this.getAccessor(attributes[attribute]);\n        }\n        if (primitive.indices !== undefined) {\n          primitive.indices = this.getAccessor(primitive.indices);\n        }\n        if (primitive.material !== undefined) {\n          primitive.material = this.getMaterial(primitive.material);\n        }\n        return primitive;\n      });\n    }\n    return mesh;\n  }\n\n  _resolveMaterial(material, index) {\n    // material = {...material};\n    material.id = material.id || `material-${index}`;\n    if (material.normalTexture) {\n      material.normalTexture = {...material.normalTexture};\n      material.normalTexture.texture = this.getTexture(material.normalTexture.index);\n    }\n    if (material.occlusionTexture) {\n      material.occlustionTexture = {...material.occlustionTexture};\n      material.occlusionTexture.texture = this.getTexture(material.occlusionTexture.index);\n    }\n    if (material.emissiveTexture) {\n      material.emmisiveTexture = {...material.emmisiveTexture};\n      material.emissiveTexture.texture = this.getTexture(material.emissiveTexture.index);\n    }\n    if (!material.emissiveFactor) {\n      material.emissiveFactor = material.emmisiveTexture ? [1, 1, 1] : [0, 0, 0];\n    }\n\n    if (material.pbrMetallicRoughness) {\n      material.pbrMetallicRoughness = {...material.pbrMetallicRoughness};\n      const mr = material.pbrMetallicRoughness;\n      if (mr.baseColorTexture) {\n        mr.baseColorTexture = {...mr.baseColorTexture};\n        mr.baseColorTexture.texture = this.getTexture(mr.baseColorTexture.index);\n      }\n      if (mr.metallicRoughnessTexture) {\n        mr.metallicRoughnessTexture = {...mr.metallicRoughnessTexture};\n        mr.metallicRoughnessTexture.texture = this.getTexture(mr.metallicRoughnessTexture.index);\n      }\n    }\n    return material;\n  }\n\n  _resolveAccessor(accessor, index) {\n    // accessor = {...accessor};\n    accessor.id = accessor.id || `accessor-${index}`;\n    if (accessor.bufferView !== undefined) {\n      // Draco encoded meshes don't have bufferView\n      accessor.bufferView = this.getBufferView(accessor.bufferView);\n    }\n\n    // Look up enums\n    accessor.bytesPerComponent = getBytesFromComponentType(accessor.componentType);\n    accessor.components = getSizeFromAccessorType(accessor.type);\n    accessor.bytesPerElement = accessor.bytesPerComponent * accessor.components;\n\n    // Create TypedArray for the accessor\n    // Note: The canonical way to instantiate is to ignore this array and create\n    // WebGLBuffer's using the bufferViews.\n    if (accessor.bufferView) {\n      const buffer = accessor.bufferView.buffer;\n      const {ArrayType, byteLength} = getAccessorArrayTypeAndLength(accessor, accessor.bufferView);\n      const byteOffset =\n        (accessor.bufferView.byteOffset || 0) + (accessor.byteOffset || 0) + buffer.byteOffset;\n      let cutBuffer = buffer.arrayBuffer.slice(byteOffset, byteOffset + byteLength);\n      if (accessor.bufferView.byteStride) {\n        cutBuffer = this._getValueFromInterleavedBuffer(\n          buffer,\n          byteOffset,\n          accessor.bufferView.byteStride,\n          accessor.bytesPerElement,\n          accessor.count\n        );\n      }\n      accessor.value = new ArrayType(cutBuffer);\n    }\n\n    return accessor;\n  }\n\n  /**\n   * Take values of particular accessor from interleaved buffer\n   * various parts of the buffer\n   * @param buffer\n   * @param byteOffset\n   * @param byteStride\n   * @param bytesPerElement\n   * @param count\n   * @returns\n   */\n  _getValueFromInterleavedBuffer(buffer, byteOffset, byteStride, bytesPerElement, count) {\n    const result = new Uint8Array(count * bytesPerElement);\n    for (let i = 0; i < count; i++) {\n      const elementOffset = byteOffset + i * byteStride;\n      result.set(\n        new Uint8Array(buffer.arrayBuffer.slice(elementOffset, elementOffset + bytesPerElement)),\n        i * bytesPerElement\n      );\n    }\n    return result.buffer;\n  }\n\n  _resolveTexture(texture, index) {\n    // texture = {...texture};\n    texture.id = texture.id || `texture-${index}`;\n    texture.sampler = 'sampler' in texture ? this.getSampler(texture.sampler) : DEFAULT_SAMPLER;\n    texture.source = this.getImage(texture.source);\n    return texture;\n  }\n\n  _resolveSampler(sampler, index) {\n    // sampler = {...sampler};\n    sampler.id = sampler.id || `sampler-${index}`;\n    // Map textual parameters to GL parameter values\n    sampler.parameters = {};\n    for (const key in sampler) {\n      const glEnum = this._enumSamplerParameter(key);\n      if (glEnum !== undefined) {\n        sampler.parameters[glEnum] = sampler[key];\n      }\n    }\n    return sampler;\n  }\n\n  _enumSamplerParameter(key) {\n    return SAMPLER_PARAMETER_GLTF_TO_GL[key];\n  }\n\n  _resolveImage(image, index) {\n    // image = {...image};\n    image.id = image.id || `image-${index}`;\n    if (image.bufferView !== undefined) {\n      image.bufferView = this.getBufferView(image.bufferView);\n    }\n\n    // Check if image has been preloaded by the GLTFLoader\n    // If so, link it into the JSON and drop the URI\n    const preloadedImage = this.images[index];\n    if (preloadedImage) {\n      image.image = preloadedImage;\n    }\n\n    return image;\n  }\n\n  _resolveBufferView(bufferView: BufferView, index: number): BufferViewPostprocessed {\n    // bufferView = {...bufferView};\n    const bufferIndex = bufferView.buffer;\n    const result: BufferViewPostprocessed = {\n      id: `bufferView-${index}`,\n      ...bufferView,\n      buffer: this.buffers[bufferIndex]\n    };\n\n    // @ts-expect-error\n    const arrayBuffer = this.buffers[bufferIndex].arrayBuffer;\n    // @ts-expect-error\n    let byteOffset = this.buffers[bufferIndex].byteOffset || 0;\n\n    if ('byteOffset' in bufferView) {\n      byteOffset += bufferView.byteOffset;\n    }\n\n    result.data = new Uint8Array(arrayBuffer, byteOffset, bufferView.byteLength);\n    return result;\n  }\n\n  _resolveCamera(camera, index) {\n    camera.id = camera.id || `camera-${index}`;\n    // TODO - create 4x4 matrices\n    if (camera.perspective) {\n      // camera.matrix = createPerspectiveMatrix(camera.perspective);\n    }\n    if (camera.orthographic) {\n      // camera.matrix = createOrthographicMatrix(camera.orthographic);\n    }\n    return camera;\n  }\n}\n\nexport function postProcessGLTF(gltf, options?) {\n  return new GLTFPostProcessor().postProcess(gltf, options);\n}\n"],"file":"post-process-gltf.js"}