"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.decode = decode;
exports.encode = encode;
exports.name = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _gltfScenegraph = _interopRequireDefault(require("../../api/gltf-scenegraph"));

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var KHR_TECHNIQUES_WEBGL = 'KHR_techniques_webgl';
var name = KHR_TECHNIQUES_WEBGL;
exports.name = name;

function decode(_x) {
  return _decode.apply(this, arguments);
}

function _decode() {
  _decode = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee(gltfData) {
    var gltfScenegraph, json, extension, techniques, _iterator, _step, material, materialExtension;

    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            gltfScenegraph = new _gltfScenegraph.default(gltfData);
            json = gltfScenegraph.json;
            extension = gltfScenegraph.getExtension(KHR_TECHNIQUES_WEBGL);

            if (extension) {
              techniques = resolveTechniques(extension, gltfScenegraph);
              _iterator = _createForOfIteratorHelper(json.materials || []);

              try {
                for (_iterator.s(); !(_step = _iterator.n()).done;) {
                  material = _step.value;
                  materialExtension = gltfScenegraph.getObjectExtension(material, KHR_TECHNIQUES_WEBGL);

                  if (materialExtension) {
                    material.technique = Object.assign({}, materialExtension, techniques[materialExtension.technique]);
                    material.technique.values = resolveValues(material.technique, gltfScenegraph);
                  }

                  gltfScenegraph.removeObjectExtension(material, KHR_TECHNIQUES_WEBGL);
                }
              } catch (err) {
                _iterator.e(err);
              } finally {
                _iterator.f();
              }

              gltfScenegraph.removeExtension(KHR_TECHNIQUES_WEBGL);
            }

          case 4:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _decode.apply(this, arguments);
}

function encode(_x2, _x3) {
  return _encode.apply(this, arguments);
}

function _encode() {
  _encode = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee2(gltfData, options) {
    return _regenerator.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _encode.apply(this, arguments);
}

function resolveTechniques(techniquesExtension, gltfScenegraph) {
  var _techniquesExtension$ = techniquesExtension.programs,
      programs = _techniquesExtension$ === void 0 ? [] : _techniquesExtension$,
      _techniquesExtension$2 = techniquesExtension.shaders,
      shaders = _techniquesExtension$2 === void 0 ? [] : _techniquesExtension$2,
      _techniquesExtension$3 = techniquesExtension.techniques,
      techniques = _techniquesExtension$3 === void 0 ? [] : _techniquesExtension$3;
  var textDecoder = new TextDecoder();
  shaders.forEach(function (shader) {
    if (Number.isFinite(shader.bufferView)) {
      shader.code = textDecoder.decode(gltfScenegraph.getTypedArrayForBufferView(shader.bufferView));
    } else {
      throw new Error('KHR_techniques_webgl: no shader code');
    }
  });
  programs.forEach(function (program) {
    program.fragmentShader = shaders[program.fragmentShader];
    program.vertexShader = shaders[program.vertexShader];
  });
  techniques.forEach(function (technique) {
    technique.program = programs[technique.program];
  });
  return techniques;
}

function resolveValues(technique, gltfScenegraph) {
  var values = Object.assign({}, technique.values);
  Object.keys(technique.uniforms || {}).forEach(function (uniform) {
    if (technique.uniforms[uniform].value && !(uniform in values)) {
      values[uniform] = technique.uniforms[uniform].value;
    }
  });
  Object.keys(values).forEach(function (uniform) {
    if ((0, _typeof2.default)(values[uniform]) === 'object' && values[uniform].index !== undefined) {
      values[uniform].texture = gltfScenegraph.getTexture(values[uniform].index);
    }
  });
  return values;
}
//# sourceMappingURL=KHR_techniques_webgl.js.map