"use strict";

var _regeneratorRuntime2 = require("@babel/runtime/regenerator");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.preprocess = preprocess;
exports.decode = decode;
exports.encode = encode;
exports.name = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _draco = require("@loaders.gl/draco");

var _loaderUtils = require("@loaders.gl/loader-utils");

var _gltfScenegraph = _interopRequireDefault(require("../api/gltf-scenegraph"));

var _gltfAttributeUtils = require("../gltf-utils/gltf-attribute-utils");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var _marked = _regeneratorRuntime2.mark(makeMeshPrimitiveIterator);

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var KHR_DRACO_MESH_COMPRESSION = 'KHR_draco_mesh_compression';
var name = KHR_DRACO_MESH_COMPRESSION;
exports.name = name;

function preprocess(gltfData, options, context) {
  var scenegraph = new _gltfScenegraph.default(gltfData);

  var _iterator = _createForOfIteratorHelper(makeMeshPrimitiveIterator(scenegraph)),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var primitive = _step.value;

      if (scenegraph.getObjectExtension(primitive, KHR_DRACO_MESH_COMPRESSION)) {}
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
}

function decode(_x, _x2, _x3) {
  return _decode.apply(this, arguments);
}

function _decode() {
  _decode = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee(gltfData, options, context) {
    var _options$gltf;

    var scenegraph, promises, _iterator5, _step5, primitive;

    return _regenerator.default.wrap(function _callee$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (options !== null && options !== void 0 && (_options$gltf = options.gltf) !== null && _options$gltf !== void 0 && _options$gltf.decompressMeshes) {
              _context2.next = 2;
              break;
            }

            return _context2.abrupt("return");

          case 2:
            scenegraph = new _gltfScenegraph.default(gltfData);
            promises = [];
            _iterator5 = _createForOfIteratorHelper(makeMeshPrimitiveIterator(scenegraph));

            try {
              for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
                primitive = _step5.value;

                if (scenegraph.getObjectExtension(primitive, KHR_DRACO_MESH_COMPRESSION)) {
                  promises.push(decompressPrimitive(scenegraph, primitive, options, context));
                }
              }
            } catch (err) {
              _iterator5.e(err);
            } finally {
              _iterator5.f();
            }

            _context2.next = 8;
            return Promise.all(promises);

          case 8:
            scenegraph.removeExtension(KHR_DRACO_MESH_COMPRESSION);

          case 9:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee);
  }));
  return _decode.apply(this, arguments);
}

function encode(gltfData) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var scenegraph = new _gltfScenegraph.default(gltfData);

  var _iterator2 = _createForOfIteratorHelper(scenegraph.json.meshes || []),
      _step2;

  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var mesh = _step2.value;
      compressMesh(mesh, options);
      scenegraph.addRequiredExtension(KHR_DRACO_MESH_COMPRESSION);
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }
}

function decompressPrimitive(_x4, _x5, _x6, _x7) {
  return _decompressPrimitive.apply(this, arguments);
}

function _decompressPrimitive() {
  _decompressPrimitive = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee2(scenegraph, primitive, options, context) {
    var dracoExtension, buffer, bufferCopy, parse, dracoOptions, decodedData, decodedAttributes, _i, _Object$entries, _Object$entries$_i, attributeName, decodedAttribute, accessorIndex, accessor;

    return _regenerator.default.wrap(function _callee2$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            dracoExtension = scenegraph.getObjectExtension(primitive, KHR_DRACO_MESH_COMPRESSION);

            if (dracoExtension) {
              _context3.next = 3;
              break;
            }

            return _context3.abrupt("return");

          case 3:
            buffer = scenegraph.getTypedArrayForBufferView(dracoExtension.bufferView);
            bufferCopy = (0, _loaderUtils.sliceArrayBuffer)(buffer.buffer, buffer.byteOffset);
            parse = context.parse;
            dracoOptions = _objectSpread({}, options);
            delete dracoOptions['3d-tiles'];
            _context3.next = 10;
            return parse(bufferCopy, _draco.DracoLoader, dracoOptions, context);

          case 10:
            decodedData = _context3.sent;
            decodedAttributes = (0, _gltfAttributeUtils.getGLTFAccessors)(decodedData.attributes);

            for (_i = 0, _Object$entries = Object.entries(decodedAttributes); _i < _Object$entries.length; _i++) {
              _Object$entries$_i = (0, _slicedToArray2.default)(_Object$entries[_i], 2), attributeName = _Object$entries$_i[0], decodedAttribute = _Object$entries$_i[1];

              if (attributeName in primitive.attributes) {
                accessorIndex = primitive.attributes[attributeName];
                accessor = scenegraph.getAccessor(accessorIndex);

                if (accessor !== null && accessor !== void 0 && accessor.min && accessor !== null && accessor !== void 0 && accessor.max) {
                  decodedAttribute.min = accessor.min;
                  decodedAttribute.max = accessor.max;
                }
              }
            }

            primitive.attributes = decodedAttributes;

            if (decodedData.indices) {
              primitive.indices = (0, _gltfAttributeUtils.getGLTFAccessor)(decodedData.indices);
            }

            checkPrimitive(primitive);

          case 16:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee2);
  }));
  return _decompressPrimitive.apply(this, arguments);
}

function compressMesh(attributes, indices) {
  var _context$parseSync;

  var mode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 4;
  var options = arguments.length > 3 ? arguments[3] : undefined;
  var context = arguments.length > 4 ? arguments[4] : undefined;

  if (!options.DracoWriter) {
    throw new Error('options.gltf.DracoWriter not provided');
  }

  var compressedData = options.DracoWriter.encodeSync({
    attributes: attributes
  });
  var decodedData = context === null || context === void 0 ? void 0 : (_context$parseSync = context.parseSync) === null || _context$parseSync === void 0 ? void 0 : _context$parseSync.call(context, {
    attributes: attributes
  });

  var fauxAccessors = options._addFauxAttributes(decodedData.attributes);

  var bufferViewIndex = options.addBufferView(compressedData);
  var glTFMesh = {
    primitives: [{
      attributes: fauxAccessors,
      mode: mode,
      extensions: (0, _defineProperty2.default)({}, KHR_DRACO_MESH_COMPRESSION, {
        bufferView: bufferViewIndex,
        attributes: fauxAccessors
      })
    }]
  };
  return glTFMesh;
}

function checkPrimitive(primitive) {
  if (!primitive.attributes && Object.keys(primitive.attributes).length > 0) {
    throw new Error('glTF: Empty primitive detected: Draco decompression failure?');
  }
}

function makeMeshPrimitiveIterator(scenegraph) {
  var _iterator3, _step3, mesh, _iterator4, _step4, primitive;

  return _regenerator.default.wrap(function makeMeshPrimitiveIterator$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _iterator3 = _createForOfIteratorHelper(scenegraph.json.meshes || []);
          _context.prev = 1;

          _iterator3.s();

        case 3:
          if ((_step3 = _iterator3.n()).done) {
            _context.next = 24;
            break;
          }

          mesh = _step3.value;
          _iterator4 = _createForOfIteratorHelper(mesh.primitives);
          _context.prev = 6;

          _iterator4.s();

        case 8:
          if ((_step4 = _iterator4.n()).done) {
            _context.next = 14;
            break;
          }

          primitive = _step4.value;
          _context.next = 12;
          return primitive;

        case 12:
          _context.next = 8;
          break;

        case 14:
          _context.next = 19;
          break;

        case 16:
          _context.prev = 16;
          _context.t0 = _context["catch"](6);

          _iterator4.e(_context.t0);

        case 19:
          _context.prev = 19;

          _iterator4.f();

          return _context.finish(19);

        case 22:
          _context.next = 3;
          break;

        case 24:
          _context.next = 29;
          break;

        case 26:
          _context.prev = 26;
          _context.t1 = _context["catch"](1);

          _iterator3.e(_context.t1);

        case 29:
          _context.prev = 29;

          _iterator3.f();

          return _context.finish(29);

        case 32:
        case "end":
          return _context.stop();
      }
    }
  }, _marked, null, [[1, 26, 29, 32], [6, 16, 19, 22]]);
}
//# sourceMappingURL=KHR_draco_mesh_compression.js.map