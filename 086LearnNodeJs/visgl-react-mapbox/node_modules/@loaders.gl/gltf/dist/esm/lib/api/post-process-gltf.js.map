{"version":3,"sources":["../../../../src/lib/api/post-process-gltf.ts"],"names":["assert","getAccessorArrayTypeAndLength","COMPONENTS","SCALAR","VEC2","VEC3","VEC4","MAT2","MAT3","MAT4","BYTES","GL_SAMPLER","TEXTURE_MAG_FILTER","TEXTURE_MIN_FILTER","TEXTURE_WRAP_S","TEXTURE_WRAP_T","REPEAT","LINEAR","NEAREST_MIPMAP_LINEAR","SAMPLER_PARAMETER_GLTF_TO_GL","magFilter","minFilter","wrapS","wrapT","DEFAULT_SAMPLER","getBytesFromComponentType","componentType","getSizeFromAccessorType","type","GLTFPostProcessor","postProcess","gltf","options","json","buffers","images","baseUri","_resolveTree","bufferViews","map","bufView","i","_resolveBufferView","image","_resolveImage","samplers","sampler","_resolveSampler","textures","texture","_resolveTexture","accessors","accessor","_resolveAccessor","materials","material","_resolveMaterial","meshes","mesh","_resolveMesh","nodes","node","_resolveNode","skins","skin","_resolveSkin","scenes","scene","_resolveScene","undefined","getScene","index","_get","getNode","getSkin","getMesh","getMaterial","getAccessor","getCamera","getTexture","getSampler","getImage","getBufferView","getBuffer","array","object","console","warn","id","children","child","length","reduce","accum","meshIndex","primitives","concat","camera","inverseBindMatrices","primitive","attributes","attribute","indices","normalTexture","occlusionTexture","occlustionTexture","emissiveTexture","emmisiveTexture","emissiveFactor","pbrMetallicRoughness","mr","baseColorTexture","metallicRoughnessTexture","bufferView","bytesPerComponent","components","bytesPerElement","buffer","ArrayType","byteLength","byteOffset","cutBuffer","arrayBuffer","slice","byteStride","_getValueFromInterleavedBuffer","count","value","result","Uint8Array","elementOffset","set","source","parameters","key","glEnum","_enumSamplerParameter","preloadedImage","bufferIndex","data","_resolveCamera","perspective","orthographic","postProcessGLTF"],"mappings":"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","sourcesContent":["import {assert} from '../utils/assert';\nimport {getAccessorArrayTypeAndLength} from '../gltf-utils/gltf-utils';\nimport {BufferView} from '../types/gltf-json-schema';\nimport {BufferView as BufferViewPostprocessed} from '../types/gltf-postprocessed-schema';\n\n// This is a post processor for loaded glTF files\n// The goal is to make the loaded data easier to use in WebGL applications\n//\n// Functions:\n// * Resolve indexed arrays structure of glTF into a linked tree.\n// * Translate stringified enum keys and values into WebGL constants.\n// * Load images (optional)\n\n// ENUM LOOKUP\n\nconst COMPONENTS = {\n  SCALAR: 1,\n  VEC2: 2,\n  VEC3: 3,\n  VEC4: 4,\n  MAT2: 4,\n  MAT3: 9,\n  MAT4: 16\n};\n\nconst BYTES = {\n  5120: 1, // BYTE\n  5121: 1, // UNSIGNED_BYTE\n  5122: 2, // SHORT\n  5123: 2, // UNSIGNED_SHORT\n  5125: 4, // UNSIGNED_INT\n  5126: 4 // FLOAT\n};\n\nconst GL_SAMPLER = {\n  // Sampler parameters\n  TEXTURE_MAG_FILTER: 0x2800,\n  TEXTURE_MIN_FILTER: 0x2801,\n  TEXTURE_WRAP_S: 0x2802,\n  TEXTURE_WRAP_T: 0x2803,\n\n  // Sampler default values\n  REPEAT: 0x2901,\n  LINEAR: 0x2601,\n  NEAREST_MIPMAP_LINEAR: 0x2702\n};\n\nconst SAMPLER_PARAMETER_GLTF_TO_GL = {\n  magFilter: GL_SAMPLER.TEXTURE_MAG_FILTER,\n  minFilter: GL_SAMPLER.TEXTURE_MIN_FILTER,\n  wrapS: GL_SAMPLER.TEXTURE_WRAP_S,\n  wrapT: GL_SAMPLER.TEXTURE_WRAP_T\n};\n\n// When undefined, a sampler with repeat wrapping and auto filtering should be used.\n// https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#texture\nconst DEFAULT_SAMPLER = {\n  [GL_SAMPLER.TEXTURE_MAG_FILTER]: GL_SAMPLER.LINEAR,\n  [GL_SAMPLER.TEXTURE_MIN_FILTER]: GL_SAMPLER.NEAREST_MIPMAP_LINEAR,\n  [GL_SAMPLER.TEXTURE_WRAP_S]: GL_SAMPLER.REPEAT,\n  [GL_SAMPLER.TEXTURE_WRAP_T]: GL_SAMPLER.REPEAT\n};\n\nfunction getBytesFromComponentType(componentType) {\n  return BYTES[componentType];\n}\n\nfunction getSizeFromAccessorType(type) {\n  return COMPONENTS[type];\n}\n\nclass GLTFPostProcessor {\n  baseUri: string = '';\n  json: Record<string, any> = {};\n  buffers: [] = [];\n  images: [] = [];\n\n  postProcess(gltf, options = {}) {\n    const {json, buffers = [], images = [], baseUri = ''} = gltf;\n    assert(json);\n\n    this.baseUri = baseUri;\n    this.json = json;\n    this.buffers = buffers;\n    this.images = images;\n\n    this._resolveTree(this.json, options);\n\n    return this.json;\n  }\n\n  // Convert indexed glTF structure into tree structure\n  // cross-link index resolution, enum lookup, convenience calculations\n  // eslint-disable-next-line complexity\n  _resolveTree(json, options = {}) {\n    if (json.bufferViews) {\n      json.bufferViews = json.bufferViews.map((bufView, i) => this._resolveBufferView(bufView, i));\n    }\n    if (json.images) {\n      json.images = json.images.map((image, i) => this._resolveImage(image, i));\n    }\n    if (json.samplers) {\n      json.samplers = json.samplers.map((sampler, i) => this._resolveSampler(sampler, i));\n    }\n    if (json.textures) {\n      json.textures = json.textures.map((texture, i) => this._resolveTexture(texture, i));\n    }\n    if (json.accessors) {\n      json.accessors = json.accessors.map((accessor, i) => this._resolveAccessor(accessor, i));\n    }\n    if (json.materials) {\n      json.materials = json.materials.map((material, i) => this._resolveMaterial(material, i));\n    }\n    if (json.meshes) {\n      json.meshes = json.meshes.map((mesh, i) => this._resolveMesh(mesh, i));\n    }\n    if (json.nodes) {\n      json.nodes = json.nodes.map((node, i) => this._resolveNode(node, i));\n    }\n    if (json.skins) {\n      json.skins = json.skins.map((skin, i) => this._resolveSkin(skin, i));\n    }\n    if (json.scenes) {\n      json.scenes = json.scenes.map((scene, i) => this._resolveScene(scene, i));\n    }\n    if (json.scene !== undefined) {\n      json.scene = json.scenes[this.json.scene];\n    }\n  }\n\n  getScene(index) {\n    return this._get('scenes', index);\n  }\n\n  getNode(index) {\n    return this._get('nodes', index);\n  }\n\n  getSkin(index) {\n    return this._get('skins', index);\n  }\n\n  getMesh(index) {\n    return this._get('meshes', index);\n  }\n\n  getMaterial(index) {\n    return this._get('materials', index);\n  }\n\n  getAccessor(index) {\n    return this._get('accessors', index);\n  }\n\n  getCamera(index) {\n    return null; // TODO: fix this\n  }\n\n  getTexture(index) {\n    return this._get('textures', index);\n  }\n\n  getSampler(index) {\n    return this._get('samplers', index);\n  }\n\n  getImage(index) {\n    return this._get('images', index);\n  }\n\n  getBufferView(index) {\n    return this._get('bufferViews', index);\n  }\n\n  getBuffer(index) {\n    return this._get('buffers', index);\n  }\n\n  _get(array, index) {\n    // check if already resolved\n    if (typeof index === 'object') {\n      return index;\n    }\n    const object = this.json[array] && this.json[array][index];\n    if (!object) {\n      console.warn(`glTF file error: Could not find ${array}[${index}]`); // eslint-disable-line\n    }\n    return object;\n  }\n\n  // PARSING HELPERS\n\n  _resolveScene(scene, index) {\n    // scene = {...scene};\n    scene.id = scene.id || `scene-${index}`;\n    scene.nodes = (scene.nodes || []).map((node) => this.getNode(node));\n    return scene;\n  }\n\n  _resolveNode(node, index) {\n    // node = {...node};\n    node.id = node.id || `node-${index}`;\n    if (node.children) {\n      node.children = node.children.map((child) => this.getNode(child));\n    }\n    if (node.mesh !== undefined) {\n      node.mesh = this.getMesh(node.mesh);\n    } else if (node.meshes !== undefined && node.meshes.length) {\n      node.mesh = node.meshes.reduce(\n        (accum, meshIndex) => {\n          const mesh = this.getMesh(meshIndex);\n          accum.id = mesh.id;\n          accum.primitives = accum.primitives.concat(mesh.primitives);\n          return accum;\n        },\n        {primitives: []}\n      );\n    }\n    if (node.camera !== undefined) {\n      node.camera = this.getCamera(node.camera);\n    }\n    if (node.skin !== undefined) {\n      node.skin = this.getSkin(node.skin);\n    }\n    return node;\n  }\n\n  _resolveSkin(skin, index) {\n    // skin = {...skin};\n    skin.id = skin.id || `skin-${index}`;\n    skin.inverseBindMatrices = this.getAccessor(skin.inverseBindMatrices);\n    return skin;\n  }\n\n  _resolveMesh(mesh, index) {\n    // mesh = {...mesh};\n    mesh.id = mesh.id || `mesh-${index}`;\n    if (mesh.primitives) {\n      mesh.primitives = mesh.primitives.map((primitive) => {\n        primitive = {...primitive};\n        const attributes = primitive.attributes;\n        primitive.attributes = {};\n        for (const attribute in attributes) {\n          primitive.attributes[attribute] = this.getAccessor(attributes[attribute]);\n        }\n        if (primitive.indices !== undefined) {\n          primitive.indices = this.getAccessor(primitive.indices);\n        }\n        if (primitive.material !== undefined) {\n          primitive.material = this.getMaterial(primitive.material);\n        }\n        return primitive;\n      });\n    }\n    return mesh;\n  }\n\n  _resolveMaterial(material, index) {\n    // material = {...material};\n    material.id = material.id || `material-${index}`;\n    if (material.normalTexture) {\n      material.normalTexture = {...material.normalTexture};\n      material.normalTexture.texture = this.getTexture(material.normalTexture.index);\n    }\n    if (material.occlusionTexture) {\n      material.occlustionTexture = {...material.occlustionTexture};\n      material.occlusionTexture.texture = this.getTexture(material.occlusionTexture.index);\n    }\n    if (material.emissiveTexture) {\n      material.emmisiveTexture = {...material.emmisiveTexture};\n      material.emissiveTexture.texture = this.getTexture(material.emissiveTexture.index);\n    }\n    if (!material.emissiveFactor) {\n      material.emissiveFactor = material.emmisiveTexture ? [1, 1, 1] : [0, 0, 0];\n    }\n\n    if (material.pbrMetallicRoughness) {\n      material.pbrMetallicRoughness = {...material.pbrMetallicRoughness};\n      const mr = material.pbrMetallicRoughness;\n      if (mr.baseColorTexture) {\n        mr.baseColorTexture = {...mr.baseColorTexture};\n        mr.baseColorTexture.texture = this.getTexture(mr.baseColorTexture.index);\n      }\n      if (mr.metallicRoughnessTexture) {\n        mr.metallicRoughnessTexture = {...mr.metallicRoughnessTexture};\n        mr.metallicRoughnessTexture.texture = this.getTexture(mr.metallicRoughnessTexture.index);\n      }\n    }\n    return material;\n  }\n\n  _resolveAccessor(accessor, index) {\n    // accessor = {...accessor};\n    accessor.id = accessor.id || `accessor-${index}`;\n    if (accessor.bufferView !== undefined) {\n      // Draco encoded meshes don't have bufferView\n      accessor.bufferView = this.getBufferView(accessor.bufferView);\n    }\n\n    // Look up enums\n    accessor.bytesPerComponent = getBytesFromComponentType(accessor.componentType);\n    accessor.components = getSizeFromAccessorType(accessor.type);\n    accessor.bytesPerElement = accessor.bytesPerComponent * accessor.components;\n\n    // Create TypedArray for the accessor\n    // Note: The canonical way to instantiate is to ignore this array and create\n    // WebGLBuffer's using the bufferViews.\n    if (accessor.bufferView) {\n      const buffer = accessor.bufferView.buffer;\n      const {ArrayType, byteLength} = getAccessorArrayTypeAndLength(accessor, accessor.bufferView);\n      const byteOffset =\n        (accessor.bufferView.byteOffset || 0) + (accessor.byteOffset || 0) + buffer.byteOffset;\n      let cutBuffer = buffer.arrayBuffer.slice(byteOffset, byteOffset + byteLength);\n      if (accessor.bufferView.byteStride) {\n        cutBuffer = this._getValueFromInterleavedBuffer(\n          buffer,\n          byteOffset,\n          accessor.bufferView.byteStride,\n          accessor.bytesPerElement,\n          accessor.count\n        );\n      }\n      accessor.value = new ArrayType(cutBuffer);\n    }\n\n    return accessor;\n  }\n\n  /**\n   * Take values of particular accessor from interleaved buffer\n   * various parts of the buffer\n   * @param buffer\n   * @param byteOffset\n   * @param byteStride\n   * @param bytesPerElement\n   * @param count\n   * @returns\n   */\n  _getValueFromInterleavedBuffer(buffer, byteOffset, byteStride, bytesPerElement, count) {\n    const result = new Uint8Array(count * bytesPerElement);\n    for (let i = 0; i < count; i++) {\n      const elementOffset = byteOffset + i * byteStride;\n      result.set(\n        new Uint8Array(buffer.arrayBuffer.slice(elementOffset, elementOffset + bytesPerElement)),\n        i * bytesPerElement\n      );\n    }\n    return result.buffer;\n  }\n\n  _resolveTexture(texture, index) {\n    // texture = {...texture};\n    texture.id = texture.id || `texture-${index}`;\n    texture.sampler = 'sampler' in texture ? this.getSampler(texture.sampler) : DEFAULT_SAMPLER;\n    texture.source = this.getImage(texture.source);\n    return texture;\n  }\n\n  _resolveSampler(sampler, index) {\n    // sampler = {...sampler};\n    sampler.id = sampler.id || `sampler-${index}`;\n    // Map textual parameters to GL parameter values\n    sampler.parameters = {};\n    for (const key in sampler) {\n      const glEnum = this._enumSamplerParameter(key);\n      if (glEnum !== undefined) {\n        sampler.parameters[glEnum] = sampler[key];\n      }\n    }\n    return sampler;\n  }\n\n  _enumSamplerParameter(key) {\n    return SAMPLER_PARAMETER_GLTF_TO_GL[key];\n  }\n\n  _resolveImage(image, index) {\n    // image = {...image};\n    image.id = image.id || `image-${index}`;\n    if (image.bufferView !== undefined) {\n      image.bufferView = this.getBufferView(image.bufferView);\n    }\n\n    // Check if image has been preloaded by the GLTFLoader\n    // If so, link it into the JSON and drop the URI\n    const preloadedImage = this.images[index];\n    if (preloadedImage) {\n      image.image = preloadedImage;\n    }\n\n    return image;\n  }\n\n  _resolveBufferView(bufferView: BufferView, index: number): BufferViewPostprocessed {\n    // bufferView = {...bufferView};\n    const bufferIndex = bufferView.buffer;\n    const result: BufferViewPostprocessed = {\n      id: `bufferView-${index}`,\n      ...bufferView,\n      buffer: this.buffers[bufferIndex]\n    };\n\n    // @ts-expect-error\n    const arrayBuffer = this.buffers[bufferIndex].arrayBuffer;\n    // @ts-expect-error\n    let byteOffset = this.buffers[bufferIndex].byteOffset || 0;\n\n    if ('byteOffset' in bufferView) {\n      byteOffset += bufferView.byteOffset;\n    }\n\n    result.data = new Uint8Array(arrayBuffer, byteOffset, bufferView.byteLength);\n    return result;\n  }\n\n  _resolveCamera(camera, index) {\n    camera.id = camera.id || `camera-${index}`;\n    // TODO - create 4x4 matrices\n    if (camera.perspective) {\n      // camera.matrix = createPerspectiveMatrix(camera.perspective);\n    }\n    if (camera.orthographic) {\n      // camera.matrix = createOrthographicMatrix(camera.orthographic);\n    }\n    return camera;\n  }\n}\n\nexport function postProcessGLTF(gltf, options?) {\n  return new GLTFPostProcessor().postProcess(gltf, options);\n}\n"],"file":"post-process-gltf.js"}