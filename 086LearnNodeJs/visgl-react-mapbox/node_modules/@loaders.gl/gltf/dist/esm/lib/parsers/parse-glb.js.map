{"version":3,"sources":["../../../../src/lib/parsers/parse-glb.ts"],"names":["padToNBytes","assert","MAGIC_glTF","GLB_FILE_HEADER_SIZE","GLB_CHUNK_HEADER_SIZE","GLB_CHUNK_TYPE_JSON","GLB_CHUNK_TYPE_BIN","GLB_CHUNK_TYPE_JSON_XVIZ_DEPRECATED","GLB_CHUNK_TYPE_BIX_XVIZ_DEPRECATED","GLB_V1_CONTENT_FORMAT_JSON","LE","getMagicString","dataView","byteOffset","String","fromCharCode","getUint8","isGLB","arrayBuffer","options","DataView","magic","magic1","getUint32","parseGLBSync","glb","type","version","byteLength","Object","assign","header","hasBinChunk","json","binChunks","parseGLBV1","parseGLBV2","Error","contentLength","contentFormat","parseJSONChunk","parseBINChunk","parseGLBChunksSync","chunkLength","chunkFormat","strict","jsonChunk","Uint8Array","buffer","textDecoder","TextDecoder","jsonText","decode","JSON","parse","push"],"mappings":"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","sourcesContent":["/* eslint-disable camelcase, max-statements */\n// https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#glb-file-format-specification\n// https://github.com/KhronosGroup/glTF/tree/master/extensions/1.0/Khronos/KHR_binary_glTF\nimport type {GLB} from '../types/glb-types';\nimport {padToNBytes, assert} from '@loaders.gl/loader-utils';\n\nexport type GLBParseOptions = {\n  magic?: number;\n  strict?: boolean;\n};\n\nconst MAGIC_glTF = 0x676c5446; // glTF in Big-Endian ASCII\n\nconst GLB_FILE_HEADER_SIZE = 12;\nconst GLB_CHUNK_HEADER_SIZE = 8;\n\nconst GLB_CHUNK_TYPE_JSON = 0x4e4f534a;\nconst GLB_CHUNK_TYPE_BIN = 0x004e4942;\nconst GLB_CHUNK_TYPE_JSON_XVIZ_DEPRECATED = 0; // DEPRECATED - Backward compatibility for old xviz files\nconst GLB_CHUNK_TYPE_BIX_XVIZ_DEPRECATED = 1; // DEPRECATED - Backward compatibility for old xviz files\n\nconst GLB_V1_CONTENT_FORMAT_JSON = 0x0;\n\nconst LE = true; // Binary GLTF is little endian.\n\nfunction getMagicString(dataView, byteOffset = 0) {\n  return `\\\n${String.fromCharCode(dataView.getUint8(byteOffset + 0))}\\\n${String.fromCharCode(dataView.getUint8(byteOffset + 1))}\\\n${String.fromCharCode(dataView.getUint8(byteOffset + 2))}\\\n${String.fromCharCode(dataView.getUint8(byteOffset + 3))}`;\n}\n\n// Check if a data view is a GLB\nexport function isGLB(\n  arrayBuffer: ArrayBuffer,\n  byteOffset: number = 0,\n  options: GLBParseOptions = {}\n): boolean {\n  const dataView = new DataView(arrayBuffer);\n  // Check that GLB Header starts with the magic number\n  const {magic = MAGIC_glTF} = options;\n  const magic1 = dataView.getUint32(byteOffset, false);\n  return magic1 === magic || magic1 === MAGIC_glTF;\n}\n\nexport default function parseGLBSync(\n  glb: GLB,\n  arrayBuffer: ArrayBuffer,\n  byteOffset: number = 0,\n  options: GLBParseOptions = {}\n) {\n  // Check that GLB Header starts with the magic number\n  const dataView = new DataView(arrayBuffer);\n\n  // Compare format with GLBLoader documentation\n  const type = getMagicString(dataView, byteOffset + 0);\n  const version = dataView.getUint32(byteOffset + 4, LE); // Version 2 of binary glTF container format\n  const byteLength = dataView.getUint32(byteOffset + 8, LE); // Total byte length of binary file\n\n  Object.assign(glb, {\n    // Put less important stuff in a header, to avoid clutter\n    header: {\n      byteOffset, // Byte offset into the initial arrayBuffer\n      byteLength,\n      hasBinChunk: false\n    },\n\n    type,\n    version,\n\n    json: {},\n    binChunks: []\n  } as GLB);\n\n  byteOffset += GLB_FILE_HEADER_SIZE;\n\n  switch (glb.version) {\n    case 1:\n      // eslint-disable-next-line\n      return parseGLBV1(glb, dataView, byteOffset);\n    case 2:\n      // eslint-disable-next-line\n      return parseGLBV2(glb, dataView, byteOffset, (options = {}));\n    default:\n      throw new Error(`Invalid GLB version ${glb.version}. Only supports v1 and v2.`);\n  }\n}\n\nfunction parseGLBV1(glb: GLB, dataView: DataView, byteOffset: number): number {\n  // Sanity: ensure file is big enough to hold at least the headers\n  assert(glb.header.byteLength > GLB_FILE_HEADER_SIZE + GLB_CHUNK_HEADER_SIZE);\n\n  // Explanation of GLB structure:\n  // https://cloud.githubusercontent.com/assets/3479527/22600725/36b87122-ea55-11e6-9d40-6fd42819fcab.png\n  const contentLength = dataView.getUint32(byteOffset + 0, LE); // Byte length of chunk\n  const contentFormat = dataView.getUint32(byteOffset + 4, LE); // Chunk format as uint32\n  byteOffset += GLB_CHUNK_HEADER_SIZE;\n\n  // GLB v1 only supports a single chunk type\n  assert(contentFormat === GLB_V1_CONTENT_FORMAT_JSON);\n\n  parseJSONChunk(glb, dataView, byteOffset, contentLength);\n  // No need to call the function padToBytes() from parseJSONChunk()\n  byteOffset += contentLength;\n  byteOffset += parseBINChunk(glb, dataView, byteOffset, glb.header.byteLength);\n\n  return byteOffset;\n}\n\nfunction parseGLBV2(\n  glb: GLB,\n  dataView: DataView,\n  byteOffset: number,\n  options: GLBParseOptions\n): number {\n  // Sanity: ensure file is big enough to hold at least the first chunk header\n  assert(glb.header.byteLength > GLB_FILE_HEADER_SIZE + GLB_CHUNK_HEADER_SIZE);\n\n  parseGLBChunksSync(glb, dataView, byteOffset, options);\n\n  return byteOffset + glb.header.byteLength;\n}\n\nfunction parseGLBChunksSync(\n  glb: GLB,\n  dataView: DataView,\n  byteOffset: number,\n  options: GLBParseOptions\n) {\n  // Per spec we must iterate over chunks, ignoring all except JSON and BIN\n  // Iterate as long as there is space left for another chunk header\n  while (byteOffset + 8 <= glb.header.byteLength) {\n    const chunkLength = dataView.getUint32(byteOffset + 0, LE); // Byte length of chunk\n    const chunkFormat = dataView.getUint32(byteOffset + 4, LE); // Chunk format as uint32\n    byteOffset += GLB_CHUNK_HEADER_SIZE;\n\n    // Per spec we must iterate over chunks, ignoring all except JSON and BIN\n    switch (chunkFormat) {\n      case GLB_CHUNK_TYPE_JSON:\n        parseJSONChunk(glb, dataView, byteOffset, chunkLength);\n        break;\n      case GLB_CHUNK_TYPE_BIN:\n        parseBINChunk(glb, dataView, byteOffset, chunkLength);\n        break;\n\n      // Backward compatibility for very old xviz files\n      case GLB_CHUNK_TYPE_JSON_XVIZ_DEPRECATED:\n        if (!options.strict) {\n          parseJSONChunk(glb, dataView, byteOffset, chunkLength);\n        }\n        break;\n      case GLB_CHUNK_TYPE_BIX_XVIZ_DEPRECATED:\n        if (!options.strict) {\n          parseBINChunk(glb, dataView, byteOffset, chunkLength);\n        }\n        break;\n\n      default:\n        // Ignore, per spec\n        // console.warn(`Unknown GLB chunk type`); // eslint-disable-line\n        break;\n    }\n\n    byteOffset += padToNBytes(chunkLength, 4);\n  }\n\n  return byteOffset;\n}\n\n// Parse a GLB JSON chunk\nfunction parseJSONChunk(glb: GLB, dataView: DataView, byteOffset: number, chunkLength: number) {\n  // 1. Create a \"view\" of the binary encoded JSON data inside the GLB\n  const jsonChunk = new Uint8Array(dataView.buffer, byteOffset, chunkLength);\n\n  // 2. Decode the JSON binary array into clear text\n  const textDecoder = new TextDecoder('utf8');\n  const jsonText = textDecoder.decode(jsonChunk);\n\n  // 3. Parse the JSON text into a JavaScript data structure\n  glb.json = JSON.parse(jsonText);\n\n  return padToNBytes(chunkLength, 4);\n}\n\n// Parse a GLB BIN chunk\nfunction parseBINChunk(glb: GLB, dataView, byteOffset, chunkLength) {\n  // Note: BIN chunk can be optional\n  glb.header.hasBinChunk = true;\n  glb.binChunks.push({\n    byteOffset,\n    byteLength: chunkLength,\n    arrayBuffer: dataView.buffer\n    // TODO - copy, or create typed array view?\n  });\n\n  return padToNBytes(chunkLength, 4);\n}\n"],"file":"parse-glb.js"}