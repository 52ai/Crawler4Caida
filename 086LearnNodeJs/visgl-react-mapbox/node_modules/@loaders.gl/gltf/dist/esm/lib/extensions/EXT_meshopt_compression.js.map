{"version":3,"sources":["../../../../src/lib/extensions/EXT_meshopt_compression.ts"],"names":["GLTFScenegraph","meshoptDecodeGltfBuffer","DEFAULT_MESHOPT_OPTIONS","byteOffset","filter","EXT_MESHOPT_COMPRESSION","name","decode","gltfData","options","scenegraph","gltf","decompressMeshes","promises","bufferViewIndex","json","bufferViews","push","decodeMeshoptBufferView","Promise","all","removeExtension","bufferView","meshoptExtension","getObjectExtension","byteLength","byteStride","count","mode","buffer","bufferIndex","buffers","source","Uint8Array","arrayBuffer","result"],"mappings":"AAGA,OAAOA,cAAP,MAA2B,wBAA3B;AACA,SAAQC,uBAAR,QAAsC,+BAAtC;AAIA,MAAMC,uBAAuB,GAAG;AAC9BC,EAAAA,UAAU,EAAE,CADkB;AAE9BC,EAAAA,MAAM,EAAE;AAFsB,CAAhC;AAMA,MAAMC,uBAAuB,GAAG,yBAAhC;AAEA,OAAO,MAAMC,IAAI,GAAGD,uBAAb;AAEP,OAAO,eAAeE,MAAf,CAAsBC,QAAtB,EAA8CC,OAA9C,EAA0E;AAAA;;AAC/E,QAAMC,UAAU,GAAG,IAAIV,cAAJ,CAAmBQ,QAAnB,CAAnB;;AAEA,MAAI,EAACC,OAAD,aAACA,OAAD,gCAACA,OAAO,CAAEE,IAAV,0CAAC,cAAeC,gBAAhB,CAAJ,EAAsC;AACpC;AACD;;AAED,QAAMC,QAAwB,GAAG,EAAjC;;AACA,OAAK,MAAMC,eAAX,IAA8BN,QAAQ,CAACO,IAAT,CAAcC,WAAd,IAA6B,EAA3D,EAA+D;AAC7DH,IAAAA,QAAQ,CAACI,IAAT,CAAcC,uBAAuB,CAACR,UAAD,EAAaI,eAAb,CAArC;AACD;;AAGD,QAAMK,OAAO,CAACC,GAAR,CAAYP,QAAZ,CAAN;AAGAH,EAAAA,UAAU,CAACW,eAAX,CAA2BhB,uBAA3B;AACD;;AAGD,eAAea,uBAAf,CACER,UADF,EAEEY,UAFF,EAG+B;AAC7B,QAAMC,gBAAgB,GAAGb,UAAU,CAACc,kBAAX,CACvBF,UADuB,EAEvBjB,uBAFuB,CAAzB;;AAIA,MAAIkB,gBAAJ,EAAsB;AACpB,UAAM;AACJpB,MAAAA,UAAU,GAAG,CADT;AAEJsB,MAAAA,UAAU,GAAG,CAFT;AAGJC,MAAAA,UAHI;AAIJC,MAAAA,KAJI;AAKJC,MAAAA,IALI;AAMJxB,MAAAA,MAAM,GAAG,MANL;AAOJyB,MAAAA,MAAM,EAAEC;AAPJ,QAQFP,gBARJ;AASA,UAAMM,MAAM,GAAGnB,UAAU,CAACC,IAAX,CAAgBoB,OAAhB,CAAwBD,WAAxB,CAAf;AAEA,UAAME,MAAM,GAAG,IAAIC,UAAJ,CAAeJ,MAAM,CAACK,WAAtB,EAAmCL,MAAM,CAAC1B,UAAP,GAAoBA,UAAvD,EAAmEsB,UAAnE,CAAf;AACA,UAAMU,MAAM,GAAG,IAAIF,UAAJ,CACbvB,UAAU,CAACC,IAAX,CAAgBoB,OAAhB,CAAwBT,UAAU,CAACO,MAAnC,EAA2CK,WAD9B,EAEbZ,UAAU,CAACnB,UAFE,EAGbmB,UAAU,CAACG,UAHE,CAAf;AAKA,UAAMxB,uBAAuB,CAACkC,MAAD,EAASR,KAAT,EAAgBD,UAAhB,EAA4BM,MAA5B,EAAoCJ,IAApC,EAA0CxB,MAA1C,CAA7B;AACA,WAAO+B,MAAP;AACD;;AAED,SAAO,IAAP;AACD","sourcesContent":["/* eslint-disable camelcase */\nimport type {GLTF, GLTFBufferView, GLTF_EXT_meshopt_compression} from '../types/gltf-types';\nimport type {GLTFLoaderOptions} from '../../gltf-loader';\nimport GLTFScenegraph from '../api/gltf-scenegraph';\nimport {meshoptDecodeGltfBuffer} from '../../meshopt/meshopt-decoder';\n\n// @ts-ignore\n// eslint-disable-next-line\nconst DEFAULT_MESHOPT_OPTIONS = {\n  byteOffset: 0,\n  filter: 'NONE'\n};\n\n/** Extension name */\nconst EXT_MESHOPT_COMPRESSION = 'EXT_meshopt_compression';\n\nexport const name = EXT_MESHOPT_COMPRESSION;\n\nexport async function decode(gltfData: {json: GLTF}, options: GLTFLoaderOptions) {\n  const scenegraph = new GLTFScenegraph(gltfData);\n\n  if (!options?.gltf?.decompressMeshes) {\n    return;\n  }\n\n  const promises: Promise<any>[] = [];\n  for (const bufferViewIndex of gltfData.json.bufferViews || []) {\n    promises.push(decodeMeshoptBufferView(scenegraph, bufferViewIndex));\n  }\n\n  // Decompress meshes in parallel\n  await Promise.all(promises);\n\n  // We have now decompressed all primitives, so remove the top-level extensions\n  scenegraph.removeExtension(EXT_MESHOPT_COMPRESSION);\n}\n\n/** Decode one meshopt buffer view */\nasync function decodeMeshoptBufferView(\n  scenegraph: GLTFScenegraph,\n  bufferView: GLTFBufferView\n): Promise<ArrayBuffer | null> {\n  const meshoptExtension = scenegraph.getObjectExtension<GLTF_EXT_meshopt_compression>(\n    bufferView,\n    EXT_MESHOPT_COMPRESSION\n  );\n  if (meshoptExtension) {\n    const {\n      byteOffset = 0,\n      byteLength = 0,\n      byteStride,\n      count,\n      mode,\n      filter = 'NONE',\n      buffer: bufferIndex\n    } = meshoptExtension;\n    const buffer = scenegraph.gltf.buffers[bufferIndex];\n\n    const source = new Uint8Array(buffer.arrayBuffer, buffer.byteOffset + byteOffset, byteLength);\n    const result = new Uint8Array(\n      scenegraph.gltf.buffers[bufferView.buffer].arrayBuffer,\n      bufferView.byteOffset,\n      bufferView.byteLength\n    );\n    await meshoptDecodeGltfBuffer(result, count, byteStride, source, mode, filter);\n    return result;\n  }\n\n  return null;\n}\n"],"file":"EXT_meshopt_compression.js"}