{"version":3,"sources":["../../../../src/lib/encoders/encode-glb.ts"],"names":["copyPaddedStringToDataView","copyPaddedArrayBufferToDataView","MAGIC_glTF","MAGIC_JSON","MAGIC_BIN","LE","encodeGLBSync","glb","dataView","byteOffset","options","magic","version","json","binary","byteOffsetStart","setUint32","byteOffsetFileLength","byteOffsetJsonHeader","jsonString","JSON","stringify","jsonByteLength","byteOffsetBinHeader","binByteLength","fileByteLength"],"mappings":"AACA,SACEA,0BADF,EAEEC,+BAFF,QAGO,0BAHP;AAKA,MAAMC,UAAU,GAAG,UAAnB;AACA,MAAMC,UAAU,GAAG,UAAnB;AACA,MAAMC,SAAS,GAAG,UAAlB;AAEA,MAAMC,EAAE,GAAG,IAAX;AAKA,eAAe,SAASC,aAAT,CAAuBC,GAAvB,EAA4BC,QAA5B,EAAsCC,UAAU,GAAG,CAAnD,EAAsDC,OAAO,GAAG,EAAhE,EAAoE;AACjF,QAAM;AAACC,IAAAA,KAAK,GAAGT,UAAT;AAAqBU,IAAAA,OAAO,GAAG,CAA/B;AAAkCC,IAAAA,IAAI,GAAG,EAAzC;AAA6CC,IAAAA;AAA7C,MAAuDP,GAA7D;AAEA,QAAMQ,eAAe,GAAGN,UAAxB;;AAGA,MAAID,QAAJ,EAAc;AACZA,IAAAA,QAAQ,CAACQ,SAAT,CAAmBP,UAAU,GAAG,CAAhC,EAAmCE,KAAnC,EAA0CN,EAA1C;AACAG,IAAAA,QAAQ,CAACQ,SAAT,CAAmBP,UAAU,GAAG,CAAhC,EAAmCG,OAAnC,EAA4CP,EAA5C;AACAG,IAAAA,QAAQ,CAACQ,SAAT,CAAmBP,UAAU,GAAG,CAAhC,EAAmC,CAAnC,EAAsCJ,EAAtC;AACD;;AACD,QAAMY,oBAAoB,GAAGR,UAAU,GAAG,CAA1C;AACAA,EAAAA,UAAU,IAAI,EAAd;AAGA,QAAMS,oBAAoB,GAAGT,UAA7B;;AACA,MAAID,QAAJ,EAAc;AACZA,IAAAA,QAAQ,CAACQ,SAAT,CAAmBP,UAAU,GAAG,CAAhC,EAAmC,CAAnC,EAAsCJ,EAAtC;AACAG,IAAAA,QAAQ,CAACQ,SAAT,CAAmBP,UAAU,GAAG,CAAhC,EAAmCN,UAAnC,EAA+CE,EAA/C;AACD;;AACDI,EAAAA,UAAU,IAAI,CAAd;AAGA,QAAMU,UAAU,GAAGC,IAAI,CAACC,SAAL,CAAeR,IAAf,CAAnB;AACAJ,EAAAA,UAAU,GAAGT,0BAA0B,CAACQ,QAAD,EAAWC,UAAX,EAAuBU,UAAvB,EAAmC,CAAnC,CAAvC;;AAGA,MAAIX,QAAJ,EAAc;AACZ,UAAMc,cAAc,GAAGb,UAAU,GAAGS,oBAAb,GAAoC,CAA3D;AACAV,IAAAA,QAAQ,CAACQ,SAAT,CAAmBE,oBAAoB,GAAG,CAA1C,EAA6CI,cAA7C,EAA6DjB,EAA7D;AACD;;AAGD,MAAIS,MAAJ,EAAY;AACV,UAAMS,mBAAmB,GAAGd,UAA5B;;AAGA,QAAID,QAAJ,EAAc;AACZA,MAAAA,QAAQ,CAACQ,SAAT,CAAmBP,UAAU,GAAG,CAAhC,EAAmC,CAAnC,EAAsCJ,EAAtC;AACAG,MAAAA,QAAQ,CAACQ,SAAT,CAAmBP,UAAU,GAAG,CAAhC,EAAmCL,SAAnC,EAA8CC,EAA9C;AACD;;AACDI,IAAAA,UAAU,IAAI,CAAd;AAEAA,IAAAA,UAAU,GAAGR,+BAA+B,CAACO,QAAD,EAAWC,UAAX,EAAuBK,MAAvB,EAA+B,CAA/B,CAA5C;;AAGA,QAAIN,QAAJ,EAAc;AACZ,YAAMgB,aAAa,GAAGf,UAAU,GAAGc,mBAAb,GAAmC,CAAzD;AACAf,MAAAA,QAAQ,CAACQ,SAAT,CAAmBO,mBAAmB,GAAG,CAAzC,EAA4CC,aAA5C,EAA2DnB,EAA3D;AACD;AACF;;AAGD,MAAIG,QAAJ,EAAc;AACZ,UAAMiB,cAAc,GAAGhB,UAAU,GAAGM,eAApC;AACAP,IAAAA,QAAQ,CAACQ,SAAT,CAAmBC,oBAAnB,EAAyCQ,cAAzC,EAAyDpB,EAAzD;AACD;;AAED,SAAOI,UAAP;AACD","sourcesContent":["/* eslint-disable camelcase, max-statements */\nimport {\n  copyPaddedStringToDataView,\n  copyPaddedArrayBufferToDataView\n} from '@loaders.gl/loader-utils';\n\nconst MAGIC_glTF = 0x46546c67; // glTF in ASCII\nconst MAGIC_JSON = 0x4e4f534a; // JSON in ASCII\nconst MAGIC_BIN = 0x004e4942; // BIN\\0 in ASCII\n\nconst LE = true; // Binary GLTF is little endian.\n\n// Encode the full GLB buffer with header etc\n// https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#\n// glb-file-format-specification\nexport default function encodeGLBSync(glb, dataView, byteOffset = 0, options = {}) {\n  const {magic = MAGIC_glTF, version = 2, json = {}, binary} = glb;\n\n  const byteOffsetStart = byteOffset;\n\n  // Write GLB Header\n  if (dataView) {\n    dataView.setUint32(byteOffset + 0, magic, LE); // Magic number (the ASCII string 'glTF').\n    dataView.setUint32(byteOffset + 4, version, LE); // Version 2 of binary glTF container format uint32\n    dataView.setUint32(byteOffset + 8, 0, LE); // Total byte length of generated file (uint32), will be set last\n  }\n  const byteOffsetFileLength = byteOffset + 8;\n  byteOffset += 12; // GLB_FILE_HEADER_SIZE\n\n  // Write the JSON chunk header\n  const byteOffsetJsonHeader = byteOffset;\n  if (dataView) {\n    dataView.setUint32(byteOffset + 0, 0, LE); // Byte length of json chunk (will be written later)\n    dataView.setUint32(byteOffset + 4, MAGIC_JSON, LE); // Chunk type\n  }\n  byteOffset += 8; // GLB_CHUNK_HEADER_SIZE\n\n  // Write the JSON chunk\n  const jsonString = JSON.stringify(json);\n  byteOffset = copyPaddedStringToDataView(dataView, byteOffset, jsonString, 4);\n\n  // Now we know the JSON chunk length so we can write it.\n  if (dataView) {\n    const jsonByteLength = byteOffset - byteOffsetJsonHeader - 8; // GLB_CHUNK_HEADER_SIZE\n    dataView.setUint32(byteOffsetJsonHeader + 0, jsonByteLength, LE); // Byte length of json chunk (uint32)\n  }\n\n  // Write the BIN chunk if present. The BIN chunk is optional.\n  if (binary) {\n    const byteOffsetBinHeader = byteOffset;\n\n    // Write the BIN chunk header\n    if (dataView) {\n      dataView.setUint32(byteOffset + 0, 0, LE); // Byte length BIN (uint32)\n      dataView.setUint32(byteOffset + 4, MAGIC_BIN, LE); // Chunk type\n    }\n    byteOffset += 8; // GLB_CHUNK_HEADER_SIZE\n\n    byteOffset = copyPaddedArrayBufferToDataView(dataView, byteOffset, binary, 4);\n\n    // Now we know the BIN chunk length so we can write it.\n    if (dataView) {\n      const binByteLength = byteOffset - byteOffsetBinHeader - 8; // GLB_CHUNK_HEADER_SIZE\n      dataView.setUint32(byteOffsetBinHeader + 0, binByteLength, LE); // Byte length BIN (uint32)\n    }\n  }\n\n  // Now we know the glb file length so we can write it.\n  if (dataView) {\n    const fileByteLength = byteOffset - byteOffsetStart;\n    dataView.setUint32(byteOffsetFileLength, fileByteLength, LE); // Total byte length of generated file (uint32)\n  }\n\n  return byteOffset;\n}\n"],"file":"encode-glb.js"}