"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parse = exports.GLTFLoader = void 0;
const version_1 = require("./lib/utils/version");
const parse_gltf_1 = require("./lib/parsers/parse-gltf");
/**
 * GLTF loader
 */
exports.GLTFLoader = {
    name: 'glTF',
    id: 'gltf',
    module: 'gltf',
    version: version_1.VERSION,
    extensions: ['gltf', 'glb'],
    mimeTypes: ['model/gltf+json', 'model/gltf-binary'],
    text: true,
    binary: true,
    tests: ['glTF'],
    parse,
    options: {
        gltf: {
            normalize: true,
            loadBuffers: true,
            loadImages: true,
            decompressMeshes: true,
            postProcess: true // Postprocess glTF and return json structure directly
        },
        // common?
        log: console // eslint-disable-line
    },
    deprecatedOptions: {
        fetchImages: 'gltf.loadImages',
        createImages: 'gltf.loadImages',
        decompress: 'gltf.decompressMeshes',
        postProcess: 'gltf.postProcess',
        gltf: {
            decompress: 'gltf.decompressMeshes'
        }
    }
};
async function parse(arrayBuffer, options = {}, context) {
    // Apps can call the parse method directly, we so apply default options here
    options = { ...exports.GLTFLoader.options, ...options };
    // @ts-ignore
    options.gltf = { ...exports.GLTFLoader.options.gltf, ...options.gltf };
    const { byteOffset = 0 } = options;
    const gltf = {};
    return await (0, parse_gltf_1.parseGLTF)(gltf, arrayBuffer, byteOffset, options, context);
}
exports.parse = parse;
