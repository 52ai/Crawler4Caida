{"version":3,"sources":["../../src/cut-by-grid.ts"],"names":["bitCode","intersect","getPointAtIndex","copy","push","cutPolylineByGrid","positions","options","size","broken","gridResolution","gridOffset","startIndex","endIndex","length","numPoints","part","result","a","b","codeB","cell","getGridCell","scratchPoint","i","codeAlt","moveToNeighborCell","TYPE_INSIDE","TYPE_BORDER","concatInPlace","arr1","arr2","cutPolygonByGrid","holeIndices","edgeTypes","queue","pos","types","Array","fill","holes","bbox","shift","getBoundingBox","code","parts","bisectPolygon","polygonLow","polygonHigh","polygon","edge","resultLow","resultHigh","typesLow","typesHigh","p","side","type","prev","prevSide","Math","sign","prevType","lowPointCount","highPointCount","out","left","floor","bottom","minX","Infinity","maxX","minY","maxY","x","y"],"mappings":"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","sourcesContent":["/* eslint-disable max-statements, max-depth, complexity, no-unused-expressions */\nimport {bitCode, intersect, BoundingBox} from './lineclip';\nimport {getPointAtIndex, copy, push} from './utils';\n\nimport type {NumericArray} from '@math.gl/core';\n\nexport type Polygon = {\n  positions: Readonly<NumericArray>;\n  holeIndices?: Readonly<NumericArray>;\n  edgeTypes?: Readonly<NumericArray>;\n};\n\nexport function cutPolylineByGrid(\n  positions: NumericArray,\n  options?: {\n    size?: number;\n    broken?: boolean;\n    gridResolution?: number;\n    gridOffset?: [number, number];\n    startIndex?: number;\n    endIndex?: number;\n  }\n): number[] | number[][] {\n  const {\n    size = 2,\n    broken = false,\n    gridResolution = 10,\n    gridOffset = [0, 0],\n    startIndex = 0,\n    endIndex = positions.length\n  } = options || {};\n  const numPoints = (endIndex - startIndex) / size;\n  let part: number[] = [];\n  const result: number[][] = [part];\n  const a: number[] = getPointAtIndex(positions, 0, size, startIndex);\n  let b: number[];\n  let codeB: number;\n  const cell: BoundingBox = getGridCell(a, gridResolution, gridOffset, []);\n  const scratchPoint: number[] = [];\n  push(part, a);\n\n  for (let i = 1; i < numPoints; i++) {\n    b = getPointAtIndex(positions, i, size, startIndex, b);\n    codeB = bitCode(b, cell);\n\n    while (codeB) {\n      // find the intersection with the current cell\n      intersect(a, b, codeB, cell, scratchPoint);\n      const codeAlt = bitCode(scratchPoint, cell);\n      if (codeAlt) {\n        intersect(a, scratchPoint, codeAlt, cell, scratchPoint);\n        codeB = codeAlt;\n      }\n      push(part, scratchPoint);\n      // move to the next cell\n      copy(a, scratchPoint);\n\n      moveToNeighborCell(cell, gridResolution, codeB);\n      if (broken && part.length > size) {\n        part = [];\n        result.push(part);\n        push(part, a);\n      }\n\n      codeB = bitCode(b, cell);\n    }\n\n    push(part, b);\n    copy(a, b);\n  }\n\n  return broken ? result : result[0];\n}\n\nconst TYPE_INSIDE = 0;\nconst TYPE_BORDER = 1;\n\nfunction concatInPlace(arr1: number[], arr2: number[]): number[] {\n  for (let i = 0; i < arr2.length; i++) {\n    arr1.push(arr2[i]);\n  }\n  return arr1;\n}\n\nexport function cutPolygonByGrid(\n  positions: Readonly<NumericArray>,\n  holeIndices: Readonly<NumericArray> | null = null,\n  options?: {\n    size?: number;\n    gridResolution?: number;\n    gridOffset?: [number, number];\n    edgeTypes?: boolean;\n  }\n): Polygon[] {\n  if (!positions.length) {\n    // input is empty\n    return [];\n  }\n  const {size = 2, gridResolution = 10, gridOffset = [0, 0], edgeTypes = false} = options || {};\n  const result: Polygon[] = [];\n  const queue: {pos: Readonly<NumericArray>; types: number[]; holes: Readonly<NumericArray>}[] = [\n    {\n      pos: positions,\n      types: edgeTypes ? (new Array(positions.length / size).fill(TYPE_BORDER) as number[]) : null,\n      holes: holeIndices || []\n    }\n  ];\n  const bbox: number[][] = [[], []];\n  // @ts-ignore\n  let cell: BoundingBox = [];\n\n  // Recursively bisect polygon until every part fit in a single grid cell\n  while (queue.length) {\n    const {pos, types, holes} = queue.shift();\n\n    // Get the bounding box of the outer polygon\n    getBoundingBox(pos, size, holes[0] || pos.length, bbox);\n    cell = getGridCell(bbox[0], gridResolution, gridOffset, cell);\n    const code = bitCode(bbox[1], cell);\n\n    if (code) {\n      // Split the outer ring at the boundary\n      let parts = bisectPolygon(pos, types, size, 0, holes[0] || pos.length, cell, code);\n      const polygonLow = {pos: parts[0].pos, types: parts[0].types, holes: []};\n      const polygonHigh = {pos: parts[1].pos, types: parts[1].types, holes: []};\n      queue.push(polygonLow, polygonHigh);\n\n      // Split each hole at the boundary\n      for (let i = 0; i < holes.length; i++) {\n        parts = bisectPolygon(pos, types, size, holes[i], holes[i + 1] || pos.length, cell, code);\n\n        if (parts[0]) {\n          polygonLow.holes.push(polygonLow.pos.length);\n          polygonLow.pos = concatInPlace(polygonLow.pos, parts[0].pos);\n          if (edgeTypes) {\n            polygonLow.types = concatInPlace(polygonLow.types, parts[0].types);\n          }\n        }\n        if (parts[1]) {\n          polygonHigh.holes.push(polygonHigh.pos.length);\n          polygonHigh.pos = concatInPlace(polygonHigh.pos, parts[1].pos);\n          if (edgeTypes) {\n            polygonHigh.types = concatInPlace(polygonHigh.types, parts[1].types);\n          }\n        }\n      }\n    } else {\n      // Polygon fits in a single cell, no more processing required\n      const polygon: Polygon = {positions: pos};\n      if (edgeTypes) {\n        polygon.edgeTypes = types;\n      }\n      if (holes.length) {\n        polygon.holeIndices = holes;\n      }\n\n      result.push(polygon);\n    }\n  }\n  return result;\n}\n\n// edgeTypes:\n// TYPE_BORDER - edge from the original polygon\n// TYPE_INSIDE - inside the original polygon\n// eslint-disable-next-line max-params\nfunction bisectPolygon(\n  positions: Readonly<NumericArray>,\n  edgeTypes: number[] | undefined,\n  size: number,\n  startIndex: number,\n  endIndex: number,\n  bbox: BoundingBox,\n  edge: number\n): {\n  pos: number[];\n  types?: number[];\n}[] {\n  const numPoints = (endIndex - startIndex) / size;\n  const resultLow: number[] = [];\n  const resultHigh: number[] = [];\n  const typesLow: number[] = [];\n  const typesHigh: number[] = [];\n  const scratchPoint: number[] = [];\n\n  let p: number[];\n  let side: number;\n  let type: number;\n  const prev = getPointAtIndex(positions, numPoints - 1, size, startIndex);\n  let prevSide = Math.sign(edge & 8 ? prev[1] - bbox[3] : prev[0] - bbox[2]);\n  let prevType = edgeTypes && edgeTypes[numPoints - 1];\n  let lowPointCount = 0;\n  let highPointCount = 0;\n\n  for (let i = 0; i < numPoints; i++) {\n    p = getPointAtIndex(positions, i, size, startIndex, p);\n    side = Math.sign(edge & 8 ? p[1] - bbox[3] : p[0] - bbox[2]);\n    type = edgeTypes && edgeTypes[startIndex / size + i];\n\n    // if segment goes through the boundary, add an intersection\n    if (side && prevSide && prevSide !== side) {\n      intersect(prev, p, edge, bbox, scratchPoint);\n      push(resultLow, scratchPoint) && typesLow.push(prevType);\n      push(resultHigh, scratchPoint) && typesHigh.push(prevType);\n    }\n\n    if (side <= 0) {\n      push(resultLow, p) && typesLow.push(type);\n      lowPointCount -= side;\n    } else if (typesLow.length) {\n      typesLow[typesLow.length - 1] = TYPE_INSIDE;\n    }\n    if (side >= 0) {\n      push(resultHigh, p) && typesHigh.push(type);\n      highPointCount += side;\n    } else if (typesHigh.length) {\n      typesHigh[typesHigh.length - 1] = TYPE_INSIDE;\n    }\n\n    copy(prev, p);\n    prevSide = side;\n    prevType = type;\n  }\n\n  return [\n    lowPointCount ? {pos: resultLow, types: edgeTypes && typesLow} : null,\n    highPointCount ? {pos: resultHigh, types: edgeTypes && typesHigh} : null\n  ];\n}\n\nfunction getGridCell(\n  p: number[],\n  gridResolution: number,\n  gridOffset: [number, number],\n  out: number[]\n): BoundingBox {\n  const left = Math.floor((p[0] - gridOffset[0]) / gridResolution) * gridResolution + gridOffset[0];\n  const bottom =\n    Math.floor((p[1] - gridOffset[1]) / gridResolution) * gridResolution + gridOffset[1];\n  out[0] = left;\n  out[1] = bottom;\n  out[2] = left + gridResolution;\n  out[3] = bottom + gridResolution;\n  return out as BoundingBox;\n}\n\nfunction moveToNeighborCell(cell: number[], gridResolution: number, edge: number): void {\n  if (edge & 8) {\n    // top\n    cell[1] += gridResolution;\n    cell[3] += gridResolution;\n  } else if (edge & 4) {\n    // bottom\n    cell[1] -= gridResolution;\n    cell[3] -= gridResolution;\n  } else if (edge & 2) {\n    // right\n    cell[0] += gridResolution;\n    cell[2] += gridResolution;\n  } else if (edge & 1) {\n    // left\n    cell[0] -= gridResolution;\n    cell[2] -= gridResolution;\n  }\n}\n\nfunction getBoundingBox(\n  positions: Readonly<NumericArray>,\n  size: number,\n  endIndex: number,\n  out: number[][]\n): number[][] {\n  let minX = Infinity;\n  let maxX = -Infinity;\n  let minY = Infinity;\n  let maxY = -Infinity;\n\n  for (let i = 0; i < endIndex; i += size) {\n    const x = positions[i];\n    const y = positions[i + 1];\n    minX = x < minX ? x : minX;\n    maxX = x > maxX ? x : maxX;\n    minY = y < minY ? y : minY;\n    maxY = y > maxY ? y : maxY;\n  }\n\n  out[0][0] = minX;\n  out[0][1] = minY;\n  out[1][0] = maxX;\n  out[1][1] = maxY;\n  return out;\n}\n"],"file":"cut-by-grid.js"}