{"version":3,"sources":["../../src/cut-by-grid.ts"],"names":["cutPolylineByGrid","positions","options","size","broken","gridResolution","gridOffset","startIndex","endIndex","length","numPoints","part","result","a","b","codeB","cell","getGridCell","scratchPoint","i","codeAlt","moveToNeighborCell","push","TYPE_INSIDE","TYPE_BORDER","concatInPlace","arr1","arr2","cutPolygonByGrid","holeIndices","edgeTypes","queue","pos","types","Array","fill","holes","bbox","shift","getBoundingBox","code","parts","bisectPolygon","polygonLow","polygonHigh","polygon","edge","resultLow","resultHigh","typesLow","typesHigh","p","side","type","prev","prevSide","Math","sign","prevType","lowPointCount","highPointCount","out","left","floor","bottom","minX","Infinity","maxX","minY","maxY","x","y"],"mappings":"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","sourcesContent":["/* eslint-disable max-statements, max-depth, complexity, no-unused-expressions */\nimport {bitCode, intersect, BoundingBox} from './lineclip';\nimport {getPointAtIndex, copy, push} from './utils';\n\nimport type {NumericArray} from '@math.gl/core';\n\nexport type Polygon = {\n  positions: Readonly<NumericArray>;\n  holeIndices?: Readonly<NumericArray>;\n  edgeTypes?: Readonly<NumericArray>;\n};\n\nexport function cutPolylineByGrid(\n  positions: NumericArray,\n  options?: {\n    size?: number;\n    broken?: boolean;\n    gridResolution?: number;\n    gridOffset?: [number, number];\n    startIndex?: number;\n    endIndex?: number;\n  }\n): number[] | number[][] {\n  const {\n    size = 2,\n    broken = false,\n    gridResolution = 10,\n    gridOffset = [0, 0],\n    startIndex = 0,\n    endIndex = positions.length\n  } = options || {};\n  const numPoints = (endIndex - startIndex) / size;\n  let part: number[] = [];\n  const result: number[][] = [part];\n  const a: number[] = getPointAtIndex(positions, 0, size, startIndex);\n  let b: number[];\n  let codeB: number;\n  const cell: BoundingBox = getGridCell(a, gridResolution, gridOffset, []);\n  const scratchPoint: number[] = [];\n  push(part, a);\n\n  for (let i = 1; i < numPoints; i++) {\n    b = getPointAtIndex(positions, i, size, startIndex, b);\n    codeB = bitCode(b, cell);\n\n    while (codeB) {\n      // find the intersection with the current cell\n      intersect(a, b, codeB, cell, scratchPoint);\n      const codeAlt = bitCode(scratchPoint, cell);\n      if (codeAlt) {\n        intersect(a, scratchPoint, codeAlt, cell, scratchPoint);\n        codeB = codeAlt;\n      }\n      push(part, scratchPoint);\n      // move to the next cell\n      copy(a, scratchPoint);\n\n      moveToNeighborCell(cell, gridResolution, codeB);\n      if (broken && part.length > size) {\n        part = [];\n        result.push(part);\n        push(part, a);\n      }\n\n      codeB = bitCode(b, cell);\n    }\n\n    push(part, b);\n    copy(a, b);\n  }\n\n  return broken ? result : result[0];\n}\n\nconst TYPE_INSIDE = 0;\nconst TYPE_BORDER = 1;\n\nfunction concatInPlace(arr1: number[], arr2: number[]): number[] {\n  for (let i = 0; i < arr2.length; i++) {\n    arr1.push(arr2[i]);\n  }\n  return arr1;\n}\n\nexport function cutPolygonByGrid(\n  positions: Readonly<NumericArray>,\n  holeIndices: Readonly<NumericArray> | null = null,\n  options?: {\n    size?: number;\n    gridResolution?: number;\n    gridOffset?: [number, number];\n    edgeTypes?: boolean;\n  }\n): Polygon[] {\n  if (!positions.length) {\n    // input is empty\n    return [];\n  }\n  const {size = 2, gridResolution = 10, gridOffset = [0, 0], edgeTypes = false} = options || {};\n  const result: Polygon[] = [];\n  const queue: {pos: Readonly<NumericArray>; types: number[]; holes: Readonly<NumericArray>}[] = [\n    {\n      pos: positions,\n      types: edgeTypes ? (new Array(positions.length / size).fill(TYPE_BORDER) as number[]) : null,\n      holes: holeIndices || []\n    }\n  ];\n  const bbox: number[][] = [[], []];\n  // @ts-ignore\n  let cell: BoundingBox = [];\n\n  // Recursively bisect polygon until every part fit in a single grid cell\n  while (queue.length) {\n    const {pos, types, holes} = queue.shift();\n\n    // Get the bounding box of the outer polygon\n    getBoundingBox(pos, size, holes[0] || pos.length, bbox);\n    cell = getGridCell(bbox[0], gridResolution, gridOffset, cell);\n    const code = bitCode(bbox[1], cell);\n\n    if (code) {\n      // Split the outer ring at the boundary\n      let parts = bisectPolygon(pos, types, size, 0, holes[0] || pos.length, cell, code);\n      const polygonLow = {pos: parts[0].pos, types: parts[0].types, holes: []};\n      const polygonHigh = {pos: parts[1].pos, types: parts[1].types, holes: []};\n      queue.push(polygonLow, polygonHigh);\n\n      // Split each hole at the boundary\n      for (let i = 0; i < holes.length; i++) {\n        parts = bisectPolygon(pos, types, size, holes[i], holes[i + 1] || pos.length, cell, code);\n\n        if (parts[0]) {\n          polygonLow.holes.push(polygonLow.pos.length);\n          polygonLow.pos = concatInPlace(polygonLow.pos, parts[0].pos);\n          if (edgeTypes) {\n            polygonLow.types = concatInPlace(polygonLow.types, parts[0].types);\n          }\n        }\n        if (parts[1]) {\n          polygonHigh.holes.push(polygonHigh.pos.length);\n          polygonHigh.pos = concatInPlace(polygonHigh.pos, parts[1].pos);\n          if (edgeTypes) {\n            polygonHigh.types = concatInPlace(polygonHigh.types, parts[1].types);\n          }\n        }\n      }\n    } else {\n      // Polygon fits in a single cell, no more processing required\n      const polygon: Polygon = {positions: pos};\n      if (edgeTypes) {\n        polygon.edgeTypes = types;\n      }\n      if (holes.length) {\n        polygon.holeIndices = holes;\n      }\n\n      result.push(polygon);\n    }\n  }\n  return result;\n}\n\n// edgeTypes:\n// TYPE_BORDER - edge from the original polygon\n// TYPE_INSIDE - inside the original polygon\n// eslint-disable-next-line max-params\nfunction bisectPolygon(\n  positions: Readonly<NumericArray>,\n  edgeTypes: number[] | undefined,\n  size: number,\n  startIndex: number,\n  endIndex: number,\n  bbox: BoundingBox,\n  edge: number\n): {\n  pos: number[];\n  types?: number[];\n}[] {\n  const numPoints = (endIndex - startIndex) / size;\n  const resultLow: number[] = [];\n  const resultHigh: number[] = [];\n  const typesLow: number[] = [];\n  const typesHigh: number[] = [];\n  const scratchPoint: number[] = [];\n\n  let p: number[];\n  let side: number;\n  let type: number;\n  const prev = getPointAtIndex(positions, numPoints - 1, size, startIndex);\n  let prevSide = Math.sign(edge & 8 ? prev[1] - bbox[3] : prev[0] - bbox[2]);\n  let prevType = edgeTypes && edgeTypes[numPoints - 1];\n  let lowPointCount = 0;\n  let highPointCount = 0;\n\n  for (let i = 0; i < numPoints; i++) {\n    p = getPointAtIndex(positions, i, size, startIndex, p);\n    side = Math.sign(edge & 8 ? p[1] - bbox[3] : p[0] - bbox[2]);\n    type = edgeTypes && edgeTypes[startIndex / size + i];\n\n    // if segment goes through the boundary, add an intersection\n    if (side && prevSide && prevSide !== side) {\n      intersect(prev, p, edge, bbox, scratchPoint);\n      push(resultLow, scratchPoint) && typesLow.push(prevType);\n      push(resultHigh, scratchPoint) && typesHigh.push(prevType);\n    }\n\n    if (side <= 0) {\n      push(resultLow, p) && typesLow.push(type);\n      lowPointCount -= side;\n    } else if (typesLow.length) {\n      typesLow[typesLow.length - 1] = TYPE_INSIDE;\n    }\n    if (side >= 0) {\n      push(resultHigh, p) && typesHigh.push(type);\n      highPointCount += side;\n    } else if (typesHigh.length) {\n      typesHigh[typesHigh.length - 1] = TYPE_INSIDE;\n    }\n\n    copy(prev, p);\n    prevSide = side;\n    prevType = type;\n  }\n\n  return [\n    lowPointCount ? {pos: resultLow, types: edgeTypes && typesLow} : null,\n    highPointCount ? {pos: resultHigh, types: edgeTypes && typesHigh} : null\n  ];\n}\n\nfunction getGridCell(\n  p: number[],\n  gridResolution: number,\n  gridOffset: [number, number],\n  out: number[]\n): BoundingBox {\n  const left = Math.floor((p[0] - gridOffset[0]) / gridResolution) * gridResolution + gridOffset[0];\n  const bottom =\n    Math.floor((p[1] - gridOffset[1]) / gridResolution) * gridResolution + gridOffset[1];\n  out[0] = left;\n  out[1] = bottom;\n  out[2] = left + gridResolution;\n  out[3] = bottom + gridResolution;\n  return out as BoundingBox;\n}\n\nfunction moveToNeighborCell(cell: number[], gridResolution: number, edge: number): void {\n  if (edge & 8) {\n    // top\n    cell[1] += gridResolution;\n    cell[3] += gridResolution;\n  } else if (edge & 4) {\n    // bottom\n    cell[1] -= gridResolution;\n    cell[3] -= gridResolution;\n  } else if (edge & 2) {\n    // right\n    cell[0] += gridResolution;\n    cell[2] += gridResolution;\n  } else if (edge & 1) {\n    // left\n    cell[0] -= gridResolution;\n    cell[2] -= gridResolution;\n  }\n}\n\nfunction getBoundingBox(\n  positions: Readonly<NumericArray>,\n  size: number,\n  endIndex: number,\n  out: number[][]\n): number[][] {\n  let minX = Infinity;\n  let maxX = -Infinity;\n  let minY = Infinity;\n  let maxY = -Infinity;\n\n  for (let i = 0; i < endIndex; i += size) {\n    const x = positions[i];\n    const y = positions[i + 1];\n    minX = x < minX ? x : minX;\n    maxX = x > maxX ? x : maxX;\n    minY = y < minY ? y : minY;\n    maxY = y > maxY ? y : maxY;\n  }\n\n  out[0][0] = minX;\n  out[0][1] = minY;\n  out[1][0] = maxX;\n  out[1][1] = maxY;\n  return out;\n}\n"],"file":"cut-by-grid.js"}