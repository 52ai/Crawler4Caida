{"version":3,"sources":["../../src/polygon.ts"],"names":["Polygon","points","options","isFlatArray","start","end","length","size","isClosed","Object","freeze","Math","abs","getSignedArea","sign","visitor","x1","y1","x2","y2","i1","i2","direction"],"mappings":";;;;;;;;;;;;;;;AACA;;AAIA;;IAgBqBA,O;AAKnB,mBAAYC,MAAZ,EAA6E;AAAA,QAA9BC,OAA8B,uEAAJ,EAAI;AAAA;AAAA;AAAA;AAAA;AAC3E,SAAKD,MAAL,GAAcA,MAAd;AACA,SAAKE,WAAL,GAAmB,CAAC,mBAAQF,MAAM,CAAC,CAAD,CAAd,CAApB;AAEA,SAAKC,OAAL,GAAe;AACbE,MAAAA,KAAK,EAAEF,OAAO,CAACE,KAAR,IAAiB,CADX;AAEbC,MAAAA,GAAG,EAAEH,OAAO,CAACG,GAAR,IAAeJ,MAAM,CAACK,MAFd;AAGbC,MAAAA,IAAI,EAAEL,OAAO,CAACK,IAAR,IAAgB,CAHT;AAIbC,MAAAA,QAAQ,EAAEN,OAAO,CAACM;AAJL,KAAf;AAOAC,IAAAA,MAAM,CAACC,MAAP,CAAc,IAAd;AACD;;;;WAMD,yBAAwB;AACtB,UAAI,KAAKP,WAAT,EAAsB,OAAO,wCAAqB,KAAKF,MAA1B,EAAkD,KAAKC,OAAvD,CAAP;AAEtB,aAAO,8CAA2B,KAAKD,MAAhC,EAAsD,KAAKC,OAA3D,CAAP;AACD;;;WAMD,mBAAkB;AAChB,aAAOS,IAAI,CAACC,GAAL,CAAS,KAAKC,aAAL,EAAT,CAAP;AACD;;;WAMD,+BAA8B;AAC5B,aAAOF,IAAI,CAACG,IAAL,CAAU,KAAKD,aAAL,EAAV,CAAP;AACD;;;WAMD,wBAAeE,OAAf,EAAoD;AAClD,UAAI,KAAKZ,WAAT,EAAsB;AACpB,mDACE,KAAKF,MADP,EAGE,UAACe,EAAD,EAAKC,EAAL,EAASC,EAAT,EAAaC,EAAb,EAAiBC,EAAjB,EAAqBC,EAArB,EAA4B;AAE1BN,UAAAA,OAAO,CAAC,CAACC,EAAD,EAAKC,EAAL,CAAD,EAAW,CAACC,EAAD,EAAKC,EAAL,CAAX,EAAqBC,EAArB,EAAyBC,EAAzB,CAAP;AACD,SANH,EAOE,KAAKnB,OAPP;AASD,OAVD,MAUO;AACL,yDAA8B,KAAKD,MAAnC,EAAyDc,OAAzD,EAAkE,KAAKb,OAAvE;AACD;AACF;;;WAOD,gCAAuBoB,SAAvB,EAAmD;AACjD,UAAI,KAAKnB,WAAT,EAAsB;AACpB,eAAO,iDAA8B,KAAKF,MAAnC,EAA2DqB,SAA3D,EAAsE,KAAKpB,OAA3E,CAAP;AACD;;AACD,aAAO,uDAAoC,KAAKD,MAAzC,EAA+DqB,SAA/D,EAA0E,KAAKpB,OAA/E,CAAP;AACD","sourcesContent":["/* eslint-disable no-undef, no-console */\nimport {isArray} from '@math.gl/core';\nimport type {SegmentVisitorPoints} from './polygon-utils';\nimport type {NumericArray} from '@math.gl/core';\n\nimport {\n  getPolygonSignedArea,\n  forEachSegmentInPolygon,\n  modifyPolygonWindingDirection,\n  getPolygonSignedAreaPoints,\n  forEachSegmentInPolygonPoints,\n  modifyPolygonWindingDirectionPoints\n} from './polygon-utils';\n\nexport type PolygonOptions = {\n  start?: number;\n  end?: number;\n  size?: number;\n  isClosed?: boolean;\n};\n\nexport default class Polygon {\n  points: NumericArray | number[][];\n  isFlatArray: boolean;\n  options: PolygonOptions;\n\n  constructor(points: NumericArray | number[][], options: PolygonOptions = {}) {\n    this.points = points;\n    this.isFlatArray = !isArray(points[0]);\n\n    this.options = {\n      start: options.start || 0,\n      end: options.end || points.length,\n      size: options.size || 2,\n      isClosed: options.isClosed\n    };\n\n    Object.freeze(this);\n  }\n\n  /**\n   * Returns signed area of the polygon.\n   * @returns Signed area of the polygon.\n   */\n  getSignedArea(): number {\n    if (this.isFlatArray) return getPolygonSignedArea(this.points as NumericArray, this.options);\n\n    return getPolygonSignedAreaPoints(this.points as number[][], this.options);\n  }\n\n  /**\n   * Returns absolute area of the polygon.\n   * @returns Absolute area of the polygon.\n   */\n  getArea(): number {\n    return Math.abs(this.getSignedArea());\n  }\n\n  /**\n   * Returns winding direction of the polygon.\n   * @returns Winding direction of the polygon. 1 is for clockwise, -1 for counterclockwise winding direction.\n   */\n  getWindingDirection(): number {\n    return Math.sign(this.getSignedArea());\n  }\n\n  /**\n   * Calls the visitor callback for each segment in the polygon.\n   * @param visitor A callback to call for each segment.\n   */\n  forEachSegment(visitor: SegmentVisitorPoints): void {\n    if (this.isFlatArray) {\n      forEachSegmentInPolygon(\n        this.points as NumericArray,\n        // eslint-disable-next-line max-params\n        (x1, y1, x2, y2, i1, i2) => {\n          // TODO @igorDykhta original visitor uses arrays for each point, but with flat arrays performance degrades if we allocate points for each segment\n          visitor([x1, y1], [x2, y2], i1, i2);\n        },\n        this.options\n      );\n    } else {\n      forEachSegmentInPolygonPoints(this.points as number[][], visitor, this.options);\n    }\n  }\n\n  /**\n   * Checks winding direction of the polygon and reverses the polygon in case of opposite winding direction.\n   * @param direction Requested winding direction. 1 is for clockwise, -1 for counterclockwise winding direction.\n   * @return Returns true if the winding direction was changed.\n   */\n  modifyWindingDirection(direction: number): boolean {\n    if (this.isFlatArray) {\n      return modifyPolygonWindingDirection(this.points as NumericArray, direction, this.options);\n    }\n    return modifyPolygonWindingDirectionPoints(this.points as number[][], direction, this.options);\n  }\n}\n"],"file":"polygon.js"}