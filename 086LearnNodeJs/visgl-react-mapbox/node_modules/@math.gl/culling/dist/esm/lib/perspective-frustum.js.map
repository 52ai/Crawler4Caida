{"version":3,"sources":["../../../src/lib/perspective-frustum.ts"],"names":["assert","Vector2","PerspectiveOffCenterFrustum","defined","val","PerspectiveFrustum","constructor","options","fov","aspectRatio","near","far","xOffset","yOffset","clone","equals","other","_update","_offCenterFrustum","projectionMatrix","infiniteProjectionMatrix","fovy","_fovy","sseDenominator","_sseDenominator","computeCullingVolume","position","direction","up","getPixelDimensions","drawingBufferWidth","drawingBufferHeight","distance","result","Number","isFinite","f","_fov","_aspectRatio","_near","_far","_xOffset","_yOffset","Math","PI","atan","tan","top","bottom","right","left"],"mappings":"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","sourcesContent":["// This file is derived from the Cesium math library under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\n// Note: This class is still an experimental export, mainly used by other test cases\n// - It has not been fully adapted to math.gl conventions\n// - Documentation has not been ported\n\nimport {assert, Matrix4, NumericArray, Vector2} from '@math.gl/core';\nimport PerspectiveOffCenterFrustum from './perspective-off-center-frustum';\nimport CullingVolume from './culling-volume';\n\nconst defined = (val) => val !== null && typeof val !== 'undefined';\n\ntype PerspectiveFrustumOptions = {\n  /** The angle of the field of view (FOV), in radians. */\n  fov?: number;\n  /** The aspect ratio of the frustum's width to it's height. */\n  aspectRatio?: number;\n  /** The distance of the near plane. */\n  near?: number;\n  /** The distance of the far plane. */\n  far?: number;\n  /** The offset in the x direction. */\n  xOffset?: number;\n  /** The offset in the y direction. */\n  yOffset?: number;\n};\n\n/**\n * The viewing frustum is defined by 6 planes.\n * Each plane is represented by a {@link Vector4} object, where the x, y, and z components\n * define the unit vector normal to the plane, and the w component is the distance of the\n * plane from the origin/camera position.\n *\n * @alias PerspectiveFrustum\n *\n * @example\n * var frustum = new PerspectiveFrustum({\n *     fov : Math.PI_OVER_THREE,\n *     aspectRatio : canvas.clientWidth / canvas.clientHeight\n *     near : 1.0,\n *     far : 1000.0\n * });\n *\n * @see PerspectiveOffCenterFrustum\n */\nexport default class PerspectiveFrustum {\n  private _offCenterFrustum = new PerspectiveOffCenterFrustum();\n  /**\n   * The angle of the field of view (FOV), in radians.  This angle will be used\n   * as the horizontal FOV if the width is greater than the height, otherwise\n   * it will be the vertical FOV.\n   */\n  fov?: number;\n  private _fov: number;\n  private _fovy: number;\n  private _sseDenominator: number;\n  /**\n   * The aspect ratio of the frustum's width to it's height.\n   */\n  aspectRatio?: number;\n  private _aspectRatio: number;\n  /**\n   * The distance of the near plane.\n   * @default 1.0\n   */\n  near: number;\n  private _near: number;\n  /**\n   * The distance of the far plane.\n   * @default 500000000.0\n   */\n  far: number;\n  private _far: number;\n  /**\n   * Offsets the frustum in the x direction.\n   * @default 0.0\n   */\n  xOffset: number;\n  private _xOffset: number;\n  /**\n   * Offsets the frustum in the y direction.\n   * @default 0.0\n   */\n  yOffset: number;\n  private _yOffset: number;\n\n  constructor(options: PerspectiveFrustumOptions = {}) {\n    const {fov, aspectRatio, near = 1.0, far = 500000000.0, xOffset = 0.0, yOffset = 0.0} = options;\n\n    this.fov = fov;\n    this.aspectRatio = aspectRatio;\n    this.near = near;\n    this.far = far;\n    this.xOffset = xOffset;\n    this.yOffset = yOffset;\n  }\n\n  /**\n   * Returns a duplicate of a PerspectiveFrustum instance.\n   */\n  clone(): PerspectiveFrustum {\n    return new PerspectiveFrustum({\n      aspectRatio: this.aspectRatio,\n      fov: this.fov,\n      near: this.near,\n      far: this.far\n    });\n  }\n\n  /**\n   * Compares the provided PerspectiveFrustum componentwise and returns\n   * <code>true</code> if they are equal, <code>false</code> otherwise.\n   */\n  equals(other: PerspectiveFrustum): boolean {\n    if (!defined(other) || !(other instanceof PerspectiveFrustum)) {\n      return false;\n    }\n\n    this._update();\n    other._update();\n\n    return (\n      this.fov === other.fov &&\n      this.aspectRatio === other.aspectRatio &&\n      this.near === other.near &&\n      this.far === other.far &&\n      this._offCenterFrustum.equals(other._offCenterFrustum)\n    );\n  }\n\n  /**\n   * Gets the perspective projection matrix computed from the view this.\n   */\n  get projectionMatrix(): Matrix4 {\n    this._update();\n    return this._offCenterFrustum.projectionMatrix;\n  }\n\n  /**\n   * The perspective projection matrix computed from the view frustum with an infinite far plane.\n   */\n  get infiniteProjectionMatrix(): Matrix4 {\n    this._update();\n    return this._offCenterFrustum.infiniteProjectionMatrix;\n  }\n\n  /**\n   * Gets the angle of the vertical field of view, in radians.\n   */\n  get fovy(): number {\n    this._update();\n    return this._fovy;\n  }\n\n  /**\n   * @private\n   */\n  get sseDenominator(): number {\n    this._update();\n    return this._sseDenominator;\n  }\n\n  /**\n   * Creates a culling volume for this this.ion.\n   * @returns {CullingVolume} A culling volume at the given position and orientation.\n   *\n   * @example\n   * // Check if a bounding volume intersects the this.\n   * var cullingVolume = this.computeCullingVolume(cameraPosition, cameraDirection, cameraUp);\n   * var intersect = cullingVolume.computeVisibility(boundingVolume);\n   */\n  computeCullingVolume(\n    /** A Vector3 defines the eye position. */\n    position: Readonly<NumericArray>,\n    /** A Vector3 defines the view direction. */\n    direction: Readonly<NumericArray>,\n    /** A Vector3 defines the up direction. */\n    up: Readonly<NumericArray>\n  ): CullingVolume {\n    this._update();\n    return this._offCenterFrustum.computeCullingVolume(position, direction, up);\n  }\n\n  /**\n   * Returns the pixel's width and height in meters.\n   * @returns {Vector2} The modified result parameter or a new instance of {@link Vector2} with the pixel's width and height in the x and y properties, respectively.\n   *\n   * @exception {DeveloperError} drawingBufferWidth must be greater than zero.\n   * @exception {DeveloperError} drawingBufferHeight must be greater than zero.\n   *\n   * @example\n   * // Example 1\n   * // Get the width and height of a pixel.\n   * var pixelSize = camera.this.getPixelDimensions(scene.drawingBufferWidth, scene.drawingBufferHeight, 1.0, new Vector2());\n   *\n   * @example\n   * // Example 2\n   * // Get the width and height of a pixel if the near plane was set to 'distance'.\n   * // For example, get the size of a pixel of an image on a billboard.\n   * var position = camera.position;\n   * var direction = camera.direction;\n   * var toCenter = Vector3.subtract(primitive.boundingVolume.center, position, new Vector3());      // vector from camera to a primitive\n   * var toCenterProj = Vector3.multiplyByScalar(direction, Vector3.dot(direction, toCenter), new Vector3()); // project vector onto camera direction vector\n   * var distance = Vector3.magnitude(toCenterProj);\n   * var pixelSize = camera.this.getPixelDimensions(scene.drawingBufferWidth, scene.drawingBufferHeight, distance, new Vector2());\n   */\n  getPixelDimensions(\n    /** The width of the drawing buffer. */\n    drawingBufferWidth: number,\n    /** The height of the drawing buffer. */\n    drawingBufferHeight: number,\n    /** The distance to the near plane in meters. */\n    distance: number,\n    /** The object onto which to store the result. */\n    result?: Vector2\n  ): Vector2 {\n    this._update();\n    return this._offCenterFrustum.getPixelDimensions(\n      drawingBufferWidth,\n      drawingBufferHeight,\n      distance,\n      result || new Vector2()\n    );\n  }\n\n  // eslint-disable-next-line complexity, max-statements\n  private _update(): void {\n    assert(\n      Number.isFinite(this.fov) &&\n        Number.isFinite(this.aspectRatio) &&\n        Number.isFinite(this.near) &&\n        Number.isFinite(this.far)\n    );\n    // 'fov, aspectRatio, near, or far parameters are not set.'\n\n    const f = this._offCenterFrustum;\n\n    if (\n      this.fov !== this._fov ||\n      this.aspectRatio !== this._aspectRatio ||\n      this.near !== this._near ||\n      this.far !== this._far ||\n      this.xOffset !== this._xOffset ||\n      this.yOffset !== this._yOffset\n    ) {\n      assert(this.fov >= 0 && this.fov < Math.PI);\n      // throw new DeveloperError('fov must be in the range [0, PI).');\n\n      assert(this.aspectRatio > 0);\n      // throw new DeveloperError('aspectRatio must be positive.');\n\n      assert(this.near >= 0 && this.near < this.far);\n      // throw new DeveloperError('near must be greater than zero and less than far.');\n\n      this._aspectRatio = this.aspectRatio;\n      this._fov = this.fov;\n      this._fovy =\n        this.aspectRatio <= 1\n          ? this.fov\n          : Math.atan(Math.tan(this.fov * 0.5) / this.aspectRatio) * 2.0;\n      this._near = this.near;\n      this._far = this.far;\n      this._sseDenominator = 2.0 * Math.tan(0.5 * this._fovy);\n      this._xOffset = this.xOffset;\n      this._yOffset = this.yOffset;\n\n      f.top = this.near * Math.tan(0.5 * this._fovy);\n      f.bottom = -f.top;\n      f.right = this.aspectRatio * f.top;\n      f.left = -f.right;\n      f.near = this.near;\n      f.far = this.far;\n\n      f.right += this.xOffset;\n      f.left += this.xOffset;\n      f.top += this.yOffset;\n      f.bottom += this.yOffset;\n    }\n  }\n}\n"],"file":"perspective-frustum.js"}