{"version":3,"sources":["../../../src/lib/plane.ts"],"names":["Vector3","equals","assert","scratchPosition","scratchNormal","Plane","constructor","normal","distance","fromNormalDistance","Number","isFinite","from","normalize","fromPointNormal","point","dot","fromCoefficients","a","b","c","d","set","len","clone","right","getPointDistance","transform","matrix4","copy","transformAsVector","scale","projectPointOntoPlane","result","pointDistance","scaledNormal","subtract","to"],"mappings":"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","sourcesContent":["// This file is derived from the Cesium math library under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\n/* eslint-disable */\nimport {Vector3, equals, assert, NumericArray} from '@math.gl/core';\n\nconst scratchPosition = new Vector3();\nconst scratchNormal = new Vector3();\n\n// A plane in Hessian Normal Form\nexport default class Plane {\n  readonly normal: Vector3;\n  distance: number;\n\n  constructor(normal: Readonly<NumericArray> = [0, 0, 1], distance: number = 0) {\n    this.normal = new Vector3();\n    this.distance = -0;\n    this.fromNormalDistance(normal, distance);\n  }\n\n  /** Creates a plane from a normal and a distance from the origin. */\n  fromNormalDistance(normal: Readonly<NumericArray>, distance: number): this {\n    assert(Number.isFinite(distance));\n    this.normal.from(normal).normalize();\n    this.distance = distance;\n    return this;\n  }\n\n  /** Creates a plane from a normal and a point on the plane. */\n  fromPointNormal(point: Readonly<NumericArray>, normal: Readonly<NumericArray>): this {\n    point = scratchPosition.from(point);\n    this.normal.from(normal).normalize();\n    const distance = -this.normal.dot(point);\n    this.distance = distance;\n    return this;\n  }\n\n  /** Creates a plane from the general equation */\n  fromCoefficients(a: number, b: number, c: number, d: number): this {\n    this.normal.set(a, b, c);\n    assert(equals(this.normal.len(), 1));\n    this.distance = d;\n    return this;\n  }\n\n  /** Duplicates a Plane instance. */\n  clone(): Plane {\n    return new Plane(this.normal, this.distance);\n  }\n\n  /** Compares the provided Planes by normal and distance */\n  equals(right: Plane): boolean {\n    return equals(this.distance, right.distance) && equals(this.normal, right.normal);\n  }\n\n  /** Computes the signed shortest distance of a point to a plane.\n   * The sign of the distance determines which side of the plane the point is on.\n   */\n  getPointDistance(point: Readonly<NumericArray>): number {\n    return this.normal.dot(point) + this.distance;\n  }\n\n  /** Transforms the plane by the given transformation matrix. */\n  transform(matrix4: Readonly<NumericArray>): this {\n    const normal = scratchNormal.copy(this.normal).transformAsVector(matrix4).normalize();\n    const point = this.normal.scale(-this.distance).transform(matrix4);\n    return this.fromPointNormal(point, normal);\n  }\n\n  /** Projects a point onto the plane. */\n  projectPointOntoPlane(point: Readonly<NumericArray>, result: Vector3): Vector3;\n  projectPointOntoPlane(\n    point: Readonly<NumericArray>,\n    result?: readonly number[]\n  ): readonly number[];\n\n  projectPointOntoPlane(point, result = [0, 0, 0]) {\n    point = scratchPosition.from(point);\n    // projectedPoint = point - (normal.point + scale) * normal\n    const pointDistance = this.getPointDistance(point);\n    const scaledNormal = scratchNormal.copy(this.normal).scale(pointDistance);\n\n    return point.subtract(scaledNormal).to(result);\n  }\n}\n"],"file":"plane.js"}