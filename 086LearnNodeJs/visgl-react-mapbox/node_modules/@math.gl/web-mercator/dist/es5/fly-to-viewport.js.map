{"version":3,"sources":["../../src/fly-to-viewport.ts"],"names":["EPSILON","VIEWPORT_TRANSITION_PROPS","DEFAULT_OPTS","curve","speed","flyToViewport","startProps","endProps","t","options","getFlyToTransitionParams","startZoom","startCenterXY","uDelta","w0","u1","S","rho","rho2","r0","viewport","key","startValue","endValue","s","w","Math","cosh","u","tanh","sinh","scaleIncrement","newZoom","newCenterWorld","vec2","scale","add","newCenter","longitude","latitude","zoom","getFlyToDuration","opts","screenSpeed","maxDuration","length","duration","Number","isFinite","Object","assign","startCenter","startScale","endZoom","endCenter","endCenterXY","sub","max","width","height","w1","_u1","b0","b1","log","sqrt","r1"],"mappings":"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","sourcesContent":["import {lerp} from './math-utils';\nimport {scaleToZoom, zoomToScale, lngLatToWorld, worldToLngLat} from './web-mercator-utils';\nimport * as vec2 from 'gl-matrix/vec2';\n\nimport type {ViewportProps} from './normalize-viewport-props';\n\nconst EPSILON = 0.01;\nconst VIEWPORT_TRANSITION_PROPS = ['longitude', 'latitude', 'zoom'] as const;\nconst DEFAULT_OPTS = {\n  curve: 1.414,\n  speed: 1.2\n  // screenSpeed and maxDuration are used only if specified\n};\n\nexport type FlytoTransitionOptions = {\n  curve?: number;\n  speed?: number;\n  screenSpeed?: number;\n  maxDuration?: number;\n};\n\n/**\n * mapbox-gl-js flyTo : https://www.mapbox.com/mapbox-gl-js/api/#map#flyto.\n * It implements “Smooth and efficient zooming and panning.” algorithm by\n * \"Jarke J. van Wijk and Wim A.A. Nuij\"\n */\nexport default function flyToViewport(\n  startProps: ViewportProps,\n  endProps: ViewportProps,\n  t: number,\n  options?: FlytoTransitionOptions\n): {\n  longitude: number;\n  latitude: number;\n  zoom: number;\n} {\n  // Equations from above paper are referred where needed.\n\n  const {startZoom, startCenterXY, uDelta, w0, u1, S, rho, rho2, r0} = getFlyToTransitionParams(\n    startProps,\n    endProps,\n    options\n  );\n\n  // If change in center is too small, do linear interpolaiton.\n  if (u1 < EPSILON) {\n    const viewport = {};\n    for (const key of VIEWPORT_TRANSITION_PROPS) {\n      const startValue = startProps[key];\n      const endValue = endProps[key];\n      viewport[key] = lerp(startValue, endValue, t);\n    }\n    // @ts-expect-error properties are populated dynamically\n    return viewport;\n  }\n\n  const s = t * S;\n\n  const w = Math.cosh(r0) / Math.cosh(r0 + rho * s);\n  const u = (w0 * ((Math.cosh(r0) * Math.tanh(r0 + rho * s) - Math.sinh(r0)) / rho2)) / u1;\n\n  const scaleIncrement = 1 / w; // Using w method for scaling.\n  const newZoom = startZoom + scaleToZoom(scaleIncrement);\n\n  const newCenterWorld = vec2.scale([], uDelta, u);\n  vec2.add(newCenterWorld, newCenterWorld, startCenterXY);\n\n  const newCenter = worldToLngLat(newCenterWorld);\n  return {\n    longitude: newCenter[0],\n    latitude: newCenter[1],\n    zoom: newZoom\n  };\n}\n\n// returns transition duration in milliseconds\nexport function getFlyToDuration(\n  startProps: ViewportProps,\n  endProps: ViewportProps,\n  options?: FlytoTransitionOptions\n): number {\n  const opts = {...DEFAULT_OPTS, ...options};\n  const {screenSpeed, speed, maxDuration} = opts;\n  const {S, rho} = getFlyToTransitionParams(startProps, endProps, opts);\n  const length = 1000 * S;\n  let duration: number;\n  if (Number.isFinite(screenSpeed)) {\n    duration = length / (screenSpeed / rho);\n  } else {\n    duration = length / speed;\n  }\n\n  return Number.isFinite(maxDuration) && duration > maxDuration ? 0 : duration;\n}\n\n// Private Methods\n\n// Calculate all parameters that are static for given startProps and endProps\nfunction getFlyToTransitionParams(\n  startProps: ViewportProps,\n  endProps: ViewportProps,\n  opts: FlytoTransitionOptions\n): {\n  startZoom: number;\n  startCenterXY: number[];\n  uDelta: number[];\n  w0: number;\n  u1: number;\n  S: number;\n  rho: number;\n  rho2: number;\n  r0: number;\n  r1: number;\n} {\n  opts = Object.assign({}, DEFAULT_OPTS, opts);\n  const rho = opts.curve;\n  const startZoom = startProps.zoom;\n  const startCenter = [startProps.longitude, startProps.latitude];\n  const startScale = zoomToScale(startZoom);\n  const endZoom = endProps.zoom;\n  const endCenter = [endProps.longitude, endProps.latitude];\n  const scale = zoomToScale(endZoom - startZoom);\n\n  const startCenterXY = lngLatToWorld(startCenter);\n  const endCenterXY = lngLatToWorld(endCenter);\n  const uDelta = vec2.sub([] as number[], endCenterXY, startCenterXY);\n\n  const w0 = Math.max(startProps.width, startProps.height);\n  const w1 = w0 / scale;\n  const u1 = vec2.length(uDelta) * startScale;\n  // u0 is treated as '0' in Eq (9).\n\n  // If u1 is too small, will generate invalid number\n  const _u1 = Math.max(u1, EPSILON);\n\n  // Implement Equation (9) from above algorithm.\n  const rho2 = rho * rho;\n  const b0 = (w1 * w1 - w0 * w0 + rho2 * rho2 * _u1 * _u1) / (2 * w0 * rho2 * _u1);\n  const b1 = (w1 * w1 - w0 * w0 - rho2 * rho2 * _u1 * _u1) / (2 * w1 * rho2 * _u1);\n  const r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0);\n  const r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);\n  const S = (r1 - r0) / rho;\n\n  return {startZoom, startCenterXY, uDelta, w0, u1, S, rho, rho2, r0, r1};\n}\n"],"file":"fly-to-viewport.js"}