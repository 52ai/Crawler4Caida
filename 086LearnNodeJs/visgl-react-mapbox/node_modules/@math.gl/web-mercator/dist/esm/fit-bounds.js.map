{"version":3,"sources":["../../src/fit-bounds.ts"],"names":["assert","log2","clamp","MAX_LATITUDE","lngLatToWorld","worldToLngLat","fitBounds","options","width","height","bounds","minExtent","maxZoom","offset","west","south","east","north","padding","getPaddingObject","nw","se","size","Math","max","abs","targetSize","left","right","top","bottom","scaleX","scaleY","offsetX","offsetY","center","centerLngLat","zoom","min","Number","isFinite","longitude","latitude"],"mappings":"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","sourcesContent":["import assert from './assert';\nimport {log2, clamp} from './math-utils';\nimport {MAX_LATITUDE, lngLatToWorld, worldToLngLat} from './web-mercator-utils';\n\n/**\n * Options for fitBounds\n * @param width - viewport width\n * @param height - viewport height\n * @param bounds - [[lon, lat], [lon, lat]]\n * @param minExtent - The width/height of the bounded area will never be smaller than this\n * @param padding - The amount of padding in pixels\n *  to add to the given bounds. Can also be an object with top, bottom, left and right\n *  properties defining the padding.\n * @param options.offset= - The center of the given bounds relative to the map's center,\n */\nexport type FitBoundsOptions = {\n  width: number;\n  height: number;\n  bounds: [[number, number], [number, number]];\n  minExtent?: number; // 0.01 would be about 1000 meters (degree is ~110KM)\n  maxZoom?: number; // ~x4,000,000 => About 10 meter extents\n  // options\n  padding?: number | Padding;\n  offset?: number[];\n};\n\n/**\n * An object describing the padding to add to the bounds.\n * @property top - Padding from top in pixels to add to the given bounds\n * @property bottom - Padding from bottom in pixels to add to the given bounds\n * @property left - Padding from left in pixels to add to the given bounds\n * @property right - Padding from right in pixels to add to the given bounds\n */\nexport type Padding = {\n  top: number;\n  bottom: number;\n  left: number;\n  right: number;\n};\n\ntype ViewportProps = {\n  longitude: number;\n  latitude: number;\n  zoom: number;\n};\n\n/**\n * Returns map settings {latitude, longitude, zoom}\n * that will contain the provided corners within the provided width.\n *\n * > _Note: Only supports non-perspective mode._\n *\n * @param options fit bounds parameters\n * @returns - latitude, longitude and zoom\n */\nexport default function fitBounds(options: FitBoundsOptions): ViewportProps {\n  const {\n    width,\n    height,\n    bounds,\n    minExtent = 0, // 0.01 would be about 1000 meters (degree is ~110KM)\n    maxZoom = 24, // ~x4,000,000 => About 10 meter extents\n    offset = [0, 0]\n  } = options;\n\n  const [[west, south], [east, north]] = bounds;\n  const padding = getPaddingObject(options.padding);\n\n  const nw = lngLatToWorld([west, clamp(north, -MAX_LATITUDE, MAX_LATITUDE)]);\n  const se = lngLatToWorld([east, clamp(south, -MAX_LATITUDE, MAX_LATITUDE)]);\n\n  // width/height on the Web Mercator plane\n  const size = [\n    Math.max(Math.abs(se[0] - nw[0]), minExtent),\n    Math.max(Math.abs(se[1] - nw[1]), minExtent)\n  ];\n\n  const targetSize = [\n    width - padding.left - padding.right - Math.abs(offset[0]) * 2,\n    height - padding.top - padding.bottom - Math.abs(offset[1]) * 2\n  ];\n\n  assert(targetSize[0] > 0 && targetSize[1] > 0);\n\n  // scale = screen pixels per unit on the Web Mercator plane\n  const scaleX = targetSize[0] / size[0];\n  const scaleY = targetSize[1] / size[1];\n\n  // Find how much we need to shift the center\n  const offsetX = (padding.right - padding.left) / 2 / scaleX;\n  const offsetY = (padding.top - padding.bottom) / 2 / scaleY;\n\n  const center = [(se[0] + nw[0]) / 2 + offsetX, (se[1] + nw[1]) / 2 + offsetY];\n\n  const centerLngLat = worldToLngLat(center);\n  const zoom = Math.min(maxZoom, log2(Math.abs(Math.min(scaleX, scaleY))));\n\n  assert(Number.isFinite(zoom));\n\n  return {\n    longitude: centerLngLat[0],\n    latitude: centerLngLat[1],\n    zoom\n  };\n}\n\n// Helpers\nfunction getPaddingObject(padding: number | Padding = 0): Padding {\n  if (typeof padding === 'number') {\n    return {\n      top: padding,\n      bottom: padding,\n      left: padding,\n      right: padding\n    };\n  }\n\n  // Make sure all the required properties are set\n  assert(\n    Number.isFinite(padding.top) &&\n      Number.isFinite(padding.bottom) &&\n      Number.isFinite(padding.left) &&\n      Number.isFinite(padding.right)\n  );\n\n  return padding;\n}\n"],"file":"fit-bounds.js"}